
Puma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f074  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  0801f310  0801f310  0002f310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f6d8  0801f6d8  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  0801f6d8  0801f6d8  0002f6d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f6e0  0801f6e0  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f6e0  0801f6e0  0002f6e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f6e4  0801f6e4  0002f6e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  24000000  0801f6e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d18  240001f0  0801f8d8  000301f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24001f08  0801f8d8  00031f08  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ed6b  00000000  00000000  0003021e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004fac  00000000  00000000  0005ef89  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001870  00000000  00000000  00063f38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001660  00000000  00000000  000657a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003b2dd  00000000  00000000  00066e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a642  00000000  00000000  000a20e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00165386  00000000  00000000  000bc727  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00221aad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069d8  00000000  00000000  00221b28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240001f0 	.word	0x240001f0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0801f2f4 	.word	0x0801f2f4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240001f4 	.word	0x240001f4
 80002d4:	0801f2f4 	.word	0x0801f2f4

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b972 	b.w	80005e4 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9e08      	ldr	r6, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	4688      	mov	r8, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d14b      	bne.n	80003be <__udivmoddi4+0xa6>
 8000326:	428a      	cmp	r2, r1
 8000328:	4615      	mov	r5, r2
 800032a:	d967      	bls.n	80003fc <__udivmoddi4+0xe4>
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	b14a      	cbz	r2, 8000346 <__udivmoddi4+0x2e>
 8000332:	f1c2 0720 	rsb	r7, r2, #32
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	fa20 f707 	lsr.w	r7, r0, r7
 800033e:	4095      	lsls	r5, r2
 8000340:	ea47 0803 	orr.w	r8, r7, r3
 8000344:	4094      	lsls	r4, r2
 8000346:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000350:	fa1f fc85 	uxth.w	ip, r5
 8000354:	fb0e 8817 	mls	r8, lr, r7, r8
 8000358:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800035c:	fb07 f10c 	mul.w	r1, r7, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x60>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f107 30ff 	add.w	r0, r7, #4294967295
 800036a:	f080 811b 	bcs.w	80005a4 <__udivmoddi4+0x28c>
 800036e:	4299      	cmp	r1, r3
 8000370:	f240 8118 	bls.w	80005a4 <__udivmoddi4+0x28c>
 8000374:	3f02      	subs	r7, #2
 8000376:	442b      	add	r3, r5
 8000378:	1a5b      	subs	r3, r3, r1
 800037a:	b2a4      	uxth	r4, r4
 800037c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000380:	fb0e 3310 	mls	r3, lr, r0, r3
 8000384:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000388:	fb00 fc0c 	mul.w	ip, r0, ip
 800038c:	45a4      	cmp	ip, r4
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x8c>
 8000390:	192c      	adds	r4, r5, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	f080 8107 	bcs.w	80005a8 <__udivmoddi4+0x290>
 800039a:	45a4      	cmp	ip, r4
 800039c:	f240 8104 	bls.w	80005a8 <__udivmoddi4+0x290>
 80003a0:	3802      	subs	r0, #2
 80003a2:	442c      	add	r4, r5
 80003a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a8:	eba4 040c 	sub.w	r4, r4, ip
 80003ac:	2700      	movs	r7, #0
 80003ae:	b11e      	cbz	r6, 80003b8 <__udivmoddi4+0xa0>
 80003b0:	40d4      	lsrs	r4, r2
 80003b2:	2300      	movs	r3, #0
 80003b4:	e9c6 4300 	strd	r4, r3, [r6]
 80003b8:	4639      	mov	r1, r7
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d909      	bls.n	80003d6 <__udivmoddi4+0xbe>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	f000 80eb 	beq.w	800059e <__udivmoddi4+0x286>
 80003c8:	2700      	movs	r7, #0
 80003ca:	e9c6 0100 	strd	r0, r1, [r6]
 80003ce:	4638      	mov	r0, r7
 80003d0:	4639      	mov	r1, r7
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	fab3 f783 	clz	r7, r3
 80003da:	2f00      	cmp	r7, #0
 80003dc:	d147      	bne.n	800046e <__udivmoddi4+0x156>
 80003de:	428b      	cmp	r3, r1
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xd0>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 80fa 	bhi.w	80005dc <__udivmoddi4+0x2c4>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb61 0303 	sbc.w	r3, r1, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4698      	mov	r8, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d0e0      	beq.n	80003b8 <__udivmoddi4+0xa0>
 80003f6:	e9c6 4800 	strd	r4, r8, [r6]
 80003fa:	e7dd      	b.n	80003b8 <__udivmoddi4+0xa0>
 80003fc:	b902      	cbnz	r2, 8000400 <__udivmoddi4+0xe8>
 80003fe:	deff      	udf	#255	; 0xff
 8000400:	fab2 f282 	clz	r2, r2
 8000404:	2a00      	cmp	r2, #0
 8000406:	f040 808f 	bne.w	8000528 <__udivmoddi4+0x210>
 800040a:	1b49      	subs	r1, r1, r5
 800040c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000410:	fa1f f885 	uxth.w	r8, r5
 8000414:	2701      	movs	r7, #1
 8000416:	fbb1 fcfe 	udiv	ip, r1, lr
 800041a:	0c23      	lsrs	r3, r4, #16
 800041c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb08 f10c 	mul.w	r1, r8, ip
 8000428:	4299      	cmp	r1, r3
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x124>
 800042c:	18eb      	adds	r3, r5, r3
 800042e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x122>
 8000434:	4299      	cmp	r1, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2bc>
 800043a:	4684      	mov	ip, r0
 800043c:	1a59      	subs	r1, r3, r1
 800043e:	b2a3      	uxth	r3, r4
 8000440:	fbb1 f0fe 	udiv	r0, r1, lr
 8000444:	fb0e 1410 	mls	r4, lr, r0, r1
 8000448:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800044c:	fb08 f800 	mul.w	r8, r8, r0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x14c>
 8000454:	192c      	adds	r4, r5, r4
 8000456:	f100 33ff 	add.w	r3, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x14a>
 800045c:	45a0      	cmp	r8, r4
 800045e:	f200 80b6 	bhi.w	80005ce <__udivmoddi4+0x2b6>
 8000462:	4618      	mov	r0, r3
 8000464:	eba4 0408 	sub.w	r4, r4, r8
 8000468:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800046c:	e79f      	b.n	80003ae <__udivmoddi4+0x96>
 800046e:	f1c7 0c20 	rsb	ip, r7, #32
 8000472:	40bb      	lsls	r3, r7
 8000474:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000478:	ea4e 0e03 	orr.w	lr, lr, r3
 800047c:	fa01 f407 	lsl.w	r4, r1, r7
 8000480:	fa20 f50c 	lsr.w	r5, r0, ip
 8000484:	fa21 f30c 	lsr.w	r3, r1, ip
 8000488:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800048c:	4325      	orrs	r5, r4
 800048e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000492:	0c2c      	lsrs	r4, r5, #16
 8000494:	fb08 3319 	mls	r3, r8, r9, r3
 8000498:	fa1f fa8e 	uxth.w	sl, lr
 800049c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a0:	fb09 f40a 	mul.w	r4, r9, sl
 80004a4:	429c      	cmp	r4, r3
 80004a6:	fa02 f207 	lsl.w	r2, r2, r7
 80004aa:	fa00 f107 	lsl.w	r1, r0, r7
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b0>
 80004b0:	eb1e 0303 	adds.w	r3, lr, r3
 80004b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b8:	f080 8087 	bcs.w	80005ca <__udivmoddi4+0x2b2>
 80004bc:	429c      	cmp	r4, r3
 80004be:	f240 8084 	bls.w	80005ca <__udivmoddi4+0x2b2>
 80004c2:	f1a9 0902 	sub.w	r9, r9, #2
 80004c6:	4473      	add	r3, lr
 80004c8:	1b1b      	subs	r3, r3, r4
 80004ca:	b2ad      	uxth	r5, r5
 80004cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d0:	fb08 3310 	mls	r3, r8, r0, r3
 80004d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004dc:	45a2      	cmp	sl, r4
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1da>
 80004e0:	eb1e 0404 	adds.w	r4, lr, r4
 80004e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e8:	d26b      	bcs.n	80005c2 <__udivmoddi4+0x2aa>
 80004ea:	45a2      	cmp	sl, r4
 80004ec:	d969      	bls.n	80005c2 <__udivmoddi4+0x2aa>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4474      	add	r4, lr
 80004f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004f6:	fba0 8902 	umull	r8, r9, r0, r2
 80004fa:	eba4 040a 	sub.w	r4, r4, sl
 80004fe:	454c      	cmp	r4, r9
 8000500:	46c2      	mov	sl, r8
 8000502:	464b      	mov	r3, r9
 8000504:	d354      	bcc.n	80005b0 <__udivmoddi4+0x298>
 8000506:	d051      	beq.n	80005ac <__udivmoddi4+0x294>
 8000508:	2e00      	cmp	r6, #0
 800050a:	d069      	beq.n	80005e0 <__udivmoddi4+0x2c8>
 800050c:	ebb1 050a 	subs.w	r5, r1, sl
 8000510:	eb64 0403 	sbc.w	r4, r4, r3
 8000514:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000518:	40fd      	lsrs	r5, r7
 800051a:	40fc      	lsrs	r4, r7
 800051c:	ea4c 0505 	orr.w	r5, ip, r5
 8000520:	e9c6 5400 	strd	r5, r4, [r6]
 8000524:	2700      	movs	r7, #0
 8000526:	e747      	b.n	80003b8 <__udivmoddi4+0xa0>
 8000528:	f1c2 0320 	rsb	r3, r2, #32
 800052c:	fa20 f703 	lsr.w	r7, r0, r3
 8000530:	4095      	lsls	r5, r2
 8000532:	fa01 f002 	lsl.w	r0, r1, r2
 8000536:	fa21 f303 	lsr.w	r3, r1, r3
 800053a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800053e:	4338      	orrs	r0, r7
 8000540:	0c01      	lsrs	r1, r0, #16
 8000542:	fbb3 f7fe 	udiv	r7, r3, lr
 8000546:	fa1f f885 	uxth.w	r8, r5
 800054a:	fb0e 3317 	mls	r3, lr, r7, r3
 800054e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000552:	fb07 f308 	mul.w	r3, r7, r8
 8000556:	428b      	cmp	r3, r1
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x256>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f107 3cff 	add.w	ip, r7, #4294967295
 8000564:	d22f      	bcs.n	80005c6 <__udivmoddi4+0x2ae>
 8000566:	428b      	cmp	r3, r1
 8000568:	d92d      	bls.n	80005c6 <__udivmoddi4+0x2ae>
 800056a:	3f02      	subs	r7, #2
 800056c:	4429      	add	r1, r5
 800056e:	1acb      	subs	r3, r1, r3
 8000570:	b281      	uxth	r1, r0
 8000572:	fbb3 f0fe 	udiv	r0, r3, lr
 8000576:	fb0e 3310 	mls	r3, lr, r0, r3
 800057a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057e:	fb00 f308 	mul.w	r3, r0, r8
 8000582:	428b      	cmp	r3, r1
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x27e>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f100 3cff 	add.w	ip, r0, #4294967295
 800058c:	d217      	bcs.n	80005be <__udivmoddi4+0x2a6>
 800058e:	428b      	cmp	r3, r1
 8000590:	d915      	bls.n	80005be <__udivmoddi4+0x2a6>
 8000592:	3802      	subs	r0, #2
 8000594:	4429      	add	r1, r5
 8000596:	1ac9      	subs	r1, r1, r3
 8000598:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800059c:	e73b      	b.n	8000416 <__udivmoddi4+0xfe>
 800059e:	4637      	mov	r7, r6
 80005a0:	4630      	mov	r0, r6
 80005a2:	e709      	b.n	80003b8 <__udivmoddi4+0xa0>
 80005a4:	4607      	mov	r7, r0
 80005a6:	e6e7      	b.n	8000378 <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fb      	b.n	80003a4 <__udivmoddi4+0x8c>
 80005ac:	4541      	cmp	r1, r8
 80005ae:	d2ab      	bcs.n	8000508 <__udivmoddi4+0x1f0>
 80005b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005b4:	eb69 020e 	sbc.w	r2, r9, lr
 80005b8:	3801      	subs	r0, #1
 80005ba:	4613      	mov	r3, r2
 80005bc:	e7a4      	b.n	8000508 <__udivmoddi4+0x1f0>
 80005be:	4660      	mov	r0, ip
 80005c0:	e7e9      	b.n	8000596 <__udivmoddi4+0x27e>
 80005c2:	4618      	mov	r0, r3
 80005c4:	e795      	b.n	80004f2 <__udivmoddi4+0x1da>
 80005c6:	4667      	mov	r7, ip
 80005c8:	e7d1      	b.n	800056e <__udivmoddi4+0x256>
 80005ca:	4681      	mov	r9, r0
 80005cc:	e77c      	b.n	80004c8 <__udivmoddi4+0x1b0>
 80005ce:	3802      	subs	r0, #2
 80005d0:	442c      	add	r4, r5
 80005d2:	e747      	b.n	8000464 <__udivmoddi4+0x14c>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	442b      	add	r3, r5
 80005da:	e72f      	b.n	800043c <__udivmoddi4+0x124>
 80005dc:	4638      	mov	r0, r7
 80005de:	e708      	b.n	80003f2 <__udivmoddi4+0xda>
 80005e0:	4637      	mov	r7, r6
 80005e2:	e6e9      	b.n	80003b8 <__udivmoddi4+0xa0>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);
//handle GPIO interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	80fb      	strh	r3, [r7, #6]
		GPIO_TypeDef* port;
		uint16_t  pin_num;
    }PINS;*/
	//pins: 0,1,2,3,4,7 - PA0(PC10)y, PA1(PD5)y, PB2(PC7)y, PE3(PE4)y, PD4(PD3)y, PD7(PE2)y
	// HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
	switch (GPIO_Pin){
 80005f2:	88fb      	ldrh	r3, [r7, #6]
 80005f4:	2b04      	cmp	r3, #4
 80005f6:	f000 80cd 	beq.w	8000794 <HAL_GPIO_EXTI_Callback+0x1ac>
 80005fa:	2b04      	cmp	r3, #4
 80005fc:	dc04      	bgt.n	8000608 <HAL_GPIO_EXTI_Callback+0x20>
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d00c      	beq.n	800061c <HAL_GPIO_EXTI_Callback+0x34>
 8000602:	2b02      	cmp	r3, #2
 8000604:	d068      	beq.n	80006d8 <HAL_GPIO_EXTI_Callback+0xf0>
			  motor_steps[5]--;
			  delta_pos[5]--;
		  }
		break;
	default:
		break;
 8000606:	e24f      	b.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x4c0>
	switch (GPIO_Pin){
 8000608:	2b10      	cmp	r3, #16
 800060a:	f000 818d 	beq.w	8000928 <HAL_GPIO_EXTI_Callback+0x340>
 800060e:	2b80      	cmp	r3, #128	; 0x80
 8000610:	f000 81ea 	beq.w	80009e8 <HAL_GPIO_EXTI_Callback+0x400>
 8000614:	2b08      	cmp	r3, #8
 8000616:	f000 8129 	beq.w	800086c <HAL_GPIO_EXTI_Callback+0x284>
		break;
 800061a:	e245      	b.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x4c0>
		 Lstate[0] = HAL_GPIO_ReadPin(encoders[0].port, encoders[0].pin_num);
 800061c:	4b8c      	ldr	r3, [pc, #560]	; (8000850 <HAL_GPIO_EXTI_Callback+0x268>)
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	4b8b      	ldr	r3, [pc, #556]	; (8000850 <HAL_GPIO_EXTI_Callback+0x268>)
 8000622:	889b      	ldrh	r3, [r3, #4]
 8000624:	4619      	mov	r1, r3
 8000626:	4610      	mov	r0, r2
 8000628:	f012 feae 	bl	8013388 <HAL_GPIO_ReadPin>
 800062c:	4603      	mov	r3, r0
 800062e:	461a      	mov	r2, r3
 8000630:	4b88      	ldr	r3, [pc, #544]	; (8000854 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000632:	601a      	str	r2, [r3, #0]
		  if((val_encoderA[0] == LOW) && Lstate[0]==HIGH)
 8000634:	4b88      	ldr	r3, [pc, #544]	; (8000858 <HAL_GPIO_EXTI_Callback+0x270>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d12b      	bne.n	8000694 <HAL_GPIO_EXTI_Callback+0xac>
 800063c:	4b85      	ldr	r3, [pc, #532]	; (8000854 <HAL_GPIO_EXTI_Callback+0x26c>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d127      	bne.n	8000694 <HAL_GPIO_EXTI_Callback+0xac>
			val_encoderB[0] = HAL_GPIO_ReadPin(encoders[1].port, encoders[1].pin_num);
 8000644:	4b82      	ldr	r3, [pc, #520]	; (8000850 <HAL_GPIO_EXTI_Callback+0x268>)
 8000646:	689a      	ldr	r2, [r3, #8]
 8000648:	4b81      	ldr	r3, [pc, #516]	; (8000850 <HAL_GPIO_EXTI_Callback+0x268>)
 800064a:	899b      	ldrh	r3, [r3, #12]
 800064c:	4619      	mov	r1, r3
 800064e:	4610      	mov	r0, r2
 8000650:	f012 fe9a 	bl	8013388 <HAL_GPIO_ReadPin>
 8000654:	4603      	mov	r3, r0
 8000656:	461a      	mov	r2, r3
 8000658:	4b80      	ldr	r3, [pc, #512]	; (800085c <HAL_GPIO_EXTI_Callback+0x274>)
 800065a:	601a      	str	r2, [r3, #0]
		    if(val_encoderB[0] == LOW && direction[0])
 800065c:	4b7f      	ldr	r3, [pc, #508]	; (800085c <HAL_GPIO_EXTI_Callback+0x274>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d108      	bne.n	8000676 <HAL_GPIO_EXTI_Callback+0x8e>
 8000664:	4b7e      	ldr	r3, [pc, #504]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	2b00      	cmp	r3, #0
 800066c:	d003      	beq.n	8000676 <HAL_GPIO_EXTI_Callback+0x8e>
		      direction[0] = false; //Reverse
 800066e:	4b7c      	ldr	r3, [pc, #496]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 8000670:	2200      	movs	r2, #0
 8000672:	701a      	strb	r2, [r3, #0]
 8000674:	e00e      	b.n	8000694 <HAL_GPIO_EXTI_Callback+0xac>
		    else if(val_encoderB[0] == HIGH && !direction[0])
 8000676:	4b79      	ldr	r3, [pc, #484]	; (800085c <HAL_GPIO_EXTI_Callback+0x274>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d10a      	bne.n	8000694 <HAL_GPIO_EXTI_Callback+0xac>
 800067e:	4b78      	ldr	r3, [pc, #480]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	b2db      	uxtb	r3, r3
 8000684:	f083 0301 	eor.w	r3, r3, #1
 8000688:	b2db      	uxtb	r3, r3
 800068a:	2b00      	cmp	r3, #0
 800068c:	d002      	beq.n	8000694 <HAL_GPIO_EXTI_Callback+0xac>
		    	direction[0] = true;  //Forward
 800068e:	4b74      	ldr	r3, [pc, #464]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 8000690:	2201      	movs	r2, #1
 8000692:	701a      	strb	r2, [r3, #0]
		  val_encoderA[0] = Lstate[0];
 8000694:	4b6f      	ldr	r3, [pc, #444]	; (8000854 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a6f      	ldr	r2, [pc, #444]	; (8000858 <HAL_GPIO_EXTI_Callback+0x270>)
 800069a:	6013      	str	r3, [r2, #0]
		  if(!direction[0]){
 800069c:	4b70      	ldr	r3, [pc, #448]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	f083 0301 	eor.w	r3, r3, #1
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d00a      	beq.n	80006c2 <HAL_GPIO_EXTI_Callback+0xda>
			  motor_steps[0]++;
 80006ac:	4b6d      	ldr	r3, [pc, #436]	; (8000864 <HAL_GPIO_EXTI_Callback+0x27c>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	3301      	adds	r3, #1
 80006b2:	4a6c      	ldr	r2, [pc, #432]	; (8000864 <HAL_GPIO_EXTI_Callback+0x27c>)
 80006b4:	6013      	str	r3, [r2, #0]
			  delta_pos[0]++;
 80006b6:	4b6c      	ldr	r3, [pc, #432]	; (8000868 <HAL_GPIO_EXTI_Callback+0x280>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	3301      	adds	r3, #1
 80006bc:	4a6a      	ldr	r2, [pc, #424]	; (8000868 <HAL_GPIO_EXTI_Callback+0x280>)
 80006be:	6013      	str	r3, [r2, #0]
		break;
 80006c0:	e1f2      	b.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x4c0>
			  motor_steps[0]--;
 80006c2:	4b68      	ldr	r3, [pc, #416]	; (8000864 <HAL_GPIO_EXTI_Callback+0x27c>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	3b01      	subs	r3, #1
 80006c8:	4a66      	ldr	r2, [pc, #408]	; (8000864 <HAL_GPIO_EXTI_Callback+0x27c>)
 80006ca:	6013      	str	r3, [r2, #0]
			  delta_pos[0]--;
 80006cc:	4b66      	ldr	r3, [pc, #408]	; (8000868 <HAL_GPIO_EXTI_Callback+0x280>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	3b01      	subs	r3, #1
 80006d2:	4a65      	ldr	r2, [pc, #404]	; (8000868 <HAL_GPIO_EXTI_Callback+0x280>)
 80006d4:	6013      	str	r3, [r2, #0]
		break;
 80006d6:	e1e7      	b.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x4c0>
		 Lstate[1] = HAL_GPIO_ReadPin(encoders[2].port, encoders[2].pin_num);
 80006d8:	4b5d      	ldr	r3, [pc, #372]	; (8000850 <HAL_GPIO_EXTI_Callback+0x268>)
 80006da:	691a      	ldr	r2, [r3, #16]
 80006dc:	4b5c      	ldr	r3, [pc, #368]	; (8000850 <HAL_GPIO_EXTI_Callback+0x268>)
 80006de:	8a9b      	ldrh	r3, [r3, #20]
 80006e0:	4619      	mov	r1, r3
 80006e2:	4610      	mov	r0, r2
 80006e4:	f012 fe50 	bl	8013388 <HAL_GPIO_ReadPin>
 80006e8:	4603      	mov	r3, r0
 80006ea:	461a      	mov	r2, r3
 80006ec:	4b59      	ldr	r3, [pc, #356]	; (8000854 <HAL_GPIO_EXTI_Callback+0x26c>)
 80006ee:	605a      	str	r2, [r3, #4]
		  if((val_encoderA[1] == LOW) && Lstate[1]==HIGH)
 80006f0:	4b59      	ldr	r3, [pc, #356]	; (8000858 <HAL_GPIO_EXTI_Callback+0x270>)
 80006f2:	685b      	ldr	r3, [r3, #4]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d12b      	bne.n	8000750 <HAL_GPIO_EXTI_Callback+0x168>
 80006f8:	4b56      	ldr	r3, [pc, #344]	; (8000854 <HAL_GPIO_EXTI_Callback+0x26c>)
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d127      	bne.n	8000750 <HAL_GPIO_EXTI_Callback+0x168>
			val_encoderB[1] = HAL_GPIO_ReadPin(encoders[3].port, encoders[3].pin_num);
 8000700:	4b53      	ldr	r3, [pc, #332]	; (8000850 <HAL_GPIO_EXTI_Callback+0x268>)
 8000702:	699a      	ldr	r2, [r3, #24]
 8000704:	4b52      	ldr	r3, [pc, #328]	; (8000850 <HAL_GPIO_EXTI_Callback+0x268>)
 8000706:	8b9b      	ldrh	r3, [r3, #28]
 8000708:	4619      	mov	r1, r3
 800070a:	4610      	mov	r0, r2
 800070c:	f012 fe3c 	bl	8013388 <HAL_GPIO_ReadPin>
 8000710:	4603      	mov	r3, r0
 8000712:	461a      	mov	r2, r3
 8000714:	4b51      	ldr	r3, [pc, #324]	; (800085c <HAL_GPIO_EXTI_Callback+0x274>)
 8000716:	605a      	str	r2, [r3, #4]
		    if(val_encoderB[1] == LOW && direction[1])
 8000718:	4b50      	ldr	r3, [pc, #320]	; (800085c <HAL_GPIO_EXTI_Callback+0x274>)
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d108      	bne.n	8000732 <HAL_GPIO_EXTI_Callback+0x14a>
 8000720:	4b4f      	ldr	r3, [pc, #316]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 8000722:	785b      	ldrb	r3, [r3, #1]
 8000724:	b2db      	uxtb	r3, r3
 8000726:	2b00      	cmp	r3, #0
 8000728:	d003      	beq.n	8000732 <HAL_GPIO_EXTI_Callback+0x14a>
		      direction[1] = false; //Reverse
 800072a:	4b4d      	ldr	r3, [pc, #308]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 800072c:	2200      	movs	r2, #0
 800072e:	705a      	strb	r2, [r3, #1]
 8000730:	e00e      	b.n	8000750 <HAL_GPIO_EXTI_Callback+0x168>
		    else if(val_encoderB[1] == HIGH && !direction[1])
 8000732:	4b4a      	ldr	r3, [pc, #296]	; (800085c <HAL_GPIO_EXTI_Callback+0x274>)
 8000734:	685b      	ldr	r3, [r3, #4]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d10a      	bne.n	8000750 <HAL_GPIO_EXTI_Callback+0x168>
 800073a:	4b49      	ldr	r3, [pc, #292]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 800073c:	785b      	ldrb	r3, [r3, #1]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	f083 0301 	eor.w	r3, r3, #1
 8000744:	b2db      	uxtb	r3, r3
 8000746:	2b00      	cmp	r3, #0
 8000748:	d002      	beq.n	8000750 <HAL_GPIO_EXTI_Callback+0x168>
		    	direction[1] = true;  //Forward
 800074a:	4b45      	ldr	r3, [pc, #276]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 800074c:	2201      	movs	r2, #1
 800074e:	705a      	strb	r2, [r3, #1]
		  val_encoderA[1] = Lstate[1];
 8000750:	4b40      	ldr	r3, [pc, #256]	; (8000854 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	4a40      	ldr	r2, [pc, #256]	; (8000858 <HAL_GPIO_EXTI_Callback+0x270>)
 8000756:	6053      	str	r3, [r2, #4]
		  if(!direction[1]){
 8000758:	4b41      	ldr	r3, [pc, #260]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 800075a:	785b      	ldrb	r3, [r3, #1]
 800075c:	b2db      	uxtb	r3, r3
 800075e:	f083 0301 	eor.w	r3, r3, #1
 8000762:	b2db      	uxtb	r3, r3
 8000764:	2b00      	cmp	r3, #0
 8000766:	d00a      	beq.n	800077e <HAL_GPIO_EXTI_Callback+0x196>
			  motor_steps[1]++;
 8000768:	4b3e      	ldr	r3, [pc, #248]	; (8000864 <HAL_GPIO_EXTI_Callback+0x27c>)
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	3301      	adds	r3, #1
 800076e:	4a3d      	ldr	r2, [pc, #244]	; (8000864 <HAL_GPIO_EXTI_Callback+0x27c>)
 8000770:	6053      	str	r3, [r2, #4]
			  delta_pos[1]++;
 8000772:	4b3d      	ldr	r3, [pc, #244]	; (8000868 <HAL_GPIO_EXTI_Callback+0x280>)
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	3301      	adds	r3, #1
 8000778:	4a3b      	ldr	r2, [pc, #236]	; (8000868 <HAL_GPIO_EXTI_Callback+0x280>)
 800077a:	6053      	str	r3, [r2, #4]
		break;
 800077c:	e194      	b.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x4c0>
			  motor_steps[1]--;
 800077e:	4b39      	ldr	r3, [pc, #228]	; (8000864 <HAL_GPIO_EXTI_Callback+0x27c>)
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	3b01      	subs	r3, #1
 8000784:	4a37      	ldr	r2, [pc, #220]	; (8000864 <HAL_GPIO_EXTI_Callback+0x27c>)
 8000786:	6053      	str	r3, [r2, #4]
			  delta_pos[1]--;
 8000788:	4b37      	ldr	r3, [pc, #220]	; (8000868 <HAL_GPIO_EXTI_Callback+0x280>)
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	3b01      	subs	r3, #1
 800078e:	4a36      	ldr	r2, [pc, #216]	; (8000868 <HAL_GPIO_EXTI_Callback+0x280>)
 8000790:	6053      	str	r3, [r2, #4]
		break;
 8000792:	e189      	b.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x4c0>
		 Lstate[2] = HAL_GPIO_ReadPin(encoders[4].port, encoders[4].pin_num);
 8000794:	4b2e      	ldr	r3, [pc, #184]	; (8000850 <HAL_GPIO_EXTI_Callback+0x268>)
 8000796:	6a1a      	ldr	r2, [r3, #32]
 8000798:	4b2d      	ldr	r3, [pc, #180]	; (8000850 <HAL_GPIO_EXTI_Callback+0x268>)
 800079a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800079c:	4619      	mov	r1, r3
 800079e:	4610      	mov	r0, r2
 80007a0:	f012 fdf2 	bl	8013388 <HAL_GPIO_ReadPin>
 80007a4:	4603      	mov	r3, r0
 80007a6:	461a      	mov	r2, r3
 80007a8:	4b2a      	ldr	r3, [pc, #168]	; (8000854 <HAL_GPIO_EXTI_Callback+0x26c>)
 80007aa:	609a      	str	r2, [r3, #8]
		  if((val_encoderA[2] == LOW) && Lstate[2]==HIGH)
 80007ac:	4b2a      	ldr	r3, [pc, #168]	; (8000858 <HAL_GPIO_EXTI_Callback+0x270>)
 80007ae:	689b      	ldr	r3, [r3, #8]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d12b      	bne.n	800080c <HAL_GPIO_EXTI_Callback+0x224>
 80007b4:	4b27      	ldr	r3, [pc, #156]	; (8000854 <HAL_GPIO_EXTI_Callback+0x26c>)
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d127      	bne.n	800080c <HAL_GPIO_EXTI_Callback+0x224>
			val_encoderB[2] = HAL_GPIO_ReadPin(encoders[5].port, encoders[5].pin_num);
 80007bc:	4b24      	ldr	r3, [pc, #144]	; (8000850 <HAL_GPIO_EXTI_Callback+0x268>)
 80007be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80007c0:	4b23      	ldr	r3, [pc, #140]	; (8000850 <HAL_GPIO_EXTI_Callback+0x268>)
 80007c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80007c4:	4619      	mov	r1, r3
 80007c6:	4610      	mov	r0, r2
 80007c8:	f012 fdde 	bl	8013388 <HAL_GPIO_ReadPin>
 80007cc:	4603      	mov	r3, r0
 80007ce:	461a      	mov	r2, r3
 80007d0:	4b22      	ldr	r3, [pc, #136]	; (800085c <HAL_GPIO_EXTI_Callback+0x274>)
 80007d2:	609a      	str	r2, [r3, #8]
		    if(val_encoderB[2] == LOW && direction[2])
 80007d4:	4b21      	ldr	r3, [pc, #132]	; (800085c <HAL_GPIO_EXTI_Callback+0x274>)
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d108      	bne.n	80007ee <HAL_GPIO_EXTI_Callback+0x206>
 80007dc:	4b20      	ldr	r3, [pc, #128]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 80007de:	789b      	ldrb	r3, [r3, #2]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d003      	beq.n	80007ee <HAL_GPIO_EXTI_Callback+0x206>
		      direction[2] = false; //Reverse
 80007e6:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	709a      	strb	r2, [r3, #2]
 80007ec:	e00e      	b.n	800080c <HAL_GPIO_EXTI_Callback+0x224>
		    else if(val_encoderB[2] == HIGH && !direction[2])
 80007ee:	4b1b      	ldr	r3, [pc, #108]	; (800085c <HAL_GPIO_EXTI_Callback+0x274>)
 80007f0:	689b      	ldr	r3, [r3, #8]
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d10a      	bne.n	800080c <HAL_GPIO_EXTI_Callback+0x224>
 80007f6:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 80007f8:	789b      	ldrb	r3, [r3, #2]
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	f083 0301 	eor.w	r3, r3, #1
 8000800:	b2db      	uxtb	r3, r3
 8000802:	2b00      	cmp	r3, #0
 8000804:	d002      	beq.n	800080c <HAL_GPIO_EXTI_Callback+0x224>
		    	direction[2] = true;  //Forward
 8000806:	4b16      	ldr	r3, [pc, #88]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 8000808:	2201      	movs	r2, #1
 800080a:	709a      	strb	r2, [r3, #2]
		  val_encoderA[2] = Lstate[2];
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <HAL_GPIO_EXTI_Callback+0x26c>)
 800080e:	689b      	ldr	r3, [r3, #8]
 8000810:	4a11      	ldr	r2, [pc, #68]	; (8000858 <HAL_GPIO_EXTI_Callback+0x270>)
 8000812:	6093      	str	r3, [r2, #8]
		  if(!direction[2]){
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 8000816:	789b      	ldrb	r3, [r3, #2]
 8000818:	b2db      	uxtb	r3, r3
 800081a:	f083 0301 	eor.w	r3, r3, #1
 800081e:	b2db      	uxtb	r3, r3
 8000820:	2b00      	cmp	r3, #0
 8000822:	d00a      	beq.n	800083a <HAL_GPIO_EXTI_Callback+0x252>
			  motor_steps[2]++;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <HAL_GPIO_EXTI_Callback+0x27c>)
 8000826:	689b      	ldr	r3, [r3, #8]
 8000828:	3301      	adds	r3, #1
 800082a:	4a0e      	ldr	r2, [pc, #56]	; (8000864 <HAL_GPIO_EXTI_Callback+0x27c>)
 800082c:	6093      	str	r3, [r2, #8]
			  delta_pos[2]++;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <HAL_GPIO_EXTI_Callback+0x280>)
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	3301      	adds	r3, #1
 8000834:	4a0c      	ldr	r2, [pc, #48]	; (8000868 <HAL_GPIO_EXTI_Callback+0x280>)
 8000836:	6093      	str	r3, [r2, #8]
		break;
 8000838:	e136      	b.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x4c0>
			  motor_steps[2]--;
 800083a:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <HAL_GPIO_EXTI_Callback+0x27c>)
 800083c:	689b      	ldr	r3, [r3, #8]
 800083e:	3b01      	subs	r3, #1
 8000840:	4a08      	ldr	r2, [pc, #32]	; (8000864 <HAL_GPIO_EXTI_Callback+0x27c>)
 8000842:	6093      	str	r3, [r2, #8]
			  delta_pos[2]--;
 8000844:	4b08      	ldr	r3, [pc, #32]	; (8000868 <HAL_GPIO_EXTI_Callback+0x280>)
 8000846:	689b      	ldr	r3, [r3, #8]
 8000848:	3b01      	subs	r3, #1
 800084a:	4a07      	ldr	r2, [pc, #28]	; (8000868 <HAL_GPIO_EXTI_Callback+0x280>)
 800084c:	6093      	str	r3, [r2, #8]
		break;
 800084e:	e12b      	b.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x4c0>
 8000850:	240003cc 	.word	0x240003cc
 8000854:	240003b4 	.word	0x240003b4
 8000858:	2400039c 	.word	0x2400039c
 800085c:	240004ac 	.word	0x240004ac
 8000860:	24000000 	.word	0x24000000
 8000864:	2400020c 	.word	0x2400020c
 8000868:	24000258 	.word	0x24000258
		 Lstate[3] = HAL_GPIO_ReadPin(encoders[6].port, encoders[6].pin_num);
 800086c:	4b90      	ldr	r3, [pc, #576]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x4c8>)
 800086e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000870:	4b8f      	ldr	r3, [pc, #572]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x4c8>)
 8000872:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000874:	4619      	mov	r1, r3
 8000876:	4610      	mov	r0, r2
 8000878:	f012 fd86 	bl	8013388 <HAL_GPIO_ReadPin>
 800087c:	4603      	mov	r3, r0
 800087e:	461a      	mov	r2, r3
 8000880:	4b8c      	ldr	r3, [pc, #560]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x4cc>)
 8000882:	60da      	str	r2, [r3, #12]
		  if((val_encoderA[3] == LOW) && Lstate[3]==HIGH)
 8000884:	4b8c      	ldr	r3, [pc, #560]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d12b      	bne.n	80008e4 <HAL_GPIO_EXTI_Callback+0x2fc>
 800088c:	4b89      	ldr	r3, [pc, #548]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x4cc>)
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d127      	bne.n	80008e4 <HAL_GPIO_EXTI_Callback+0x2fc>
			val_encoderB[3] = HAL_GPIO_ReadPin(encoders[7].port, encoders[7].pin_num);
 8000894:	4b86      	ldr	r3, [pc, #536]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x4c8>)
 8000896:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000898:	4b85      	ldr	r3, [pc, #532]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x4c8>)
 800089a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800089c:	4619      	mov	r1, r3
 800089e:	4610      	mov	r0, r2
 80008a0:	f012 fd72 	bl	8013388 <HAL_GPIO_ReadPin>
 80008a4:	4603      	mov	r3, r0
 80008a6:	461a      	mov	r2, r3
 80008a8:	4b84      	ldr	r3, [pc, #528]	; (8000abc <HAL_GPIO_EXTI_Callback+0x4d4>)
 80008aa:	60da      	str	r2, [r3, #12]
		    if(val_encoderB[3] == LOW && direction[3])
 80008ac:	4b83      	ldr	r3, [pc, #524]	; (8000abc <HAL_GPIO_EXTI_Callback+0x4d4>)
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d108      	bne.n	80008c6 <HAL_GPIO_EXTI_Callback+0x2de>
 80008b4:	4b82      	ldr	r3, [pc, #520]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 80008b6:	78db      	ldrb	r3, [r3, #3]
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d003      	beq.n	80008c6 <HAL_GPIO_EXTI_Callback+0x2de>
		      direction[3] = false; //Reverse
 80008be:	4b80      	ldr	r3, [pc, #512]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	70da      	strb	r2, [r3, #3]
 80008c4:	e00e      	b.n	80008e4 <HAL_GPIO_EXTI_Callback+0x2fc>
		    else if(val_encoderB[3] == HIGH && !direction[3])
 80008c6:	4b7d      	ldr	r3, [pc, #500]	; (8000abc <HAL_GPIO_EXTI_Callback+0x4d4>)
 80008c8:	68db      	ldr	r3, [r3, #12]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d10a      	bne.n	80008e4 <HAL_GPIO_EXTI_Callback+0x2fc>
 80008ce:	4b7c      	ldr	r3, [pc, #496]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 80008d0:	78db      	ldrb	r3, [r3, #3]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	f083 0301 	eor.w	r3, r3, #1
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d002      	beq.n	80008e4 <HAL_GPIO_EXTI_Callback+0x2fc>
		    	direction[3] = true;  //Forward
 80008de:	4b78      	ldr	r3, [pc, #480]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	70da      	strb	r2, [r3, #3]
		  val_encoderA[3] = Lstate[3];
 80008e4:	4b73      	ldr	r3, [pc, #460]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x4cc>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	4a73      	ldr	r2, [pc, #460]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x4d0>)
 80008ea:	60d3      	str	r3, [r2, #12]
		  if(!direction[3]){
 80008ec:	4b74      	ldr	r3, [pc, #464]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 80008ee:	78db      	ldrb	r3, [r3, #3]
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	f083 0301 	eor.w	r3, r3, #1
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d00a      	beq.n	8000912 <HAL_GPIO_EXTI_Callback+0x32a>
			  motor_steps[3]++;
 80008fc:	4b71      	ldr	r3, [pc, #452]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x4dc>)
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	3301      	adds	r3, #1
 8000902:	4a70      	ldr	r2, [pc, #448]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8000904:	60d3      	str	r3, [r2, #12]
			  delta_pos[3]++;
 8000906:	4b70      	ldr	r3, [pc, #448]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x4e0>)
 8000908:	68db      	ldr	r3, [r3, #12]
 800090a:	3301      	adds	r3, #1
 800090c:	4a6e      	ldr	r2, [pc, #440]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x4e0>)
 800090e:	60d3      	str	r3, [r2, #12]
		break;
 8000910:	e0ca      	b.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x4c0>
			  motor_steps[3]--;
 8000912:	4b6c      	ldr	r3, [pc, #432]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8000914:	68db      	ldr	r3, [r3, #12]
 8000916:	3b01      	subs	r3, #1
 8000918:	4a6a      	ldr	r2, [pc, #424]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x4dc>)
 800091a:	60d3      	str	r3, [r2, #12]
			  delta_pos[3]--;
 800091c:	4b6a      	ldr	r3, [pc, #424]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x4e0>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	3b01      	subs	r3, #1
 8000922:	4a69      	ldr	r2, [pc, #420]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x4e0>)
 8000924:	60d3      	str	r3, [r2, #12]
		break;
 8000926:	e0bf      	b.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x4c0>
		 Lstate[4] = HAL_GPIO_ReadPin(encoders[8].port, encoders[9].pin_num);
 8000928:	4b61      	ldr	r3, [pc, #388]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x4c8>)
 800092a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800092c:	4b60      	ldr	r3, [pc, #384]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x4c8>)
 800092e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8000932:	4619      	mov	r1, r3
 8000934:	4610      	mov	r0, r2
 8000936:	f012 fd27 	bl	8013388 <HAL_GPIO_ReadPin>
 800093a:	4603      	mov	r3, r0
 800093c:	461a      	mov	r2, r3
 800093e:	4b5d      	ldr	r3, [pc, #372]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x4cc>)
 8000940:	611a      	str	r2, [r3, #16]
		  if((val_encoderA[4] == LOW) && Lstate[4]==HIGH)
 8000942:	4b5d      	ldr	r3, [pc, #372]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8000944:	691b      	ldr	r3, [r3, #16]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d12c      	bne.n	80009a4 <HAL_GPIO_EXTI_Callback+0x3bc>
 800094a:	4b5a      	ldr	r3, [pc, #360]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x4cc>)
 800094c:	691b      	ldr	r3, [r3, #16]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d128      	bne.n	80009a4 <HAL_GPIO_EXTI_Callback+0x3bc>
			val_encoderB[4] = HAL_GPIO_ReadPin(encoders[9].port, encoders[9].pin_num);
 8000952:	4b57      	ldr	r3, [pc, #348]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x4c8>)
 8000954:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000956:	4b56      	ldr	r3, [pc, #344]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x4c8>)
 8000958:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800095c:	4619      	mov	r1, r3
 800095e:	4610      	mov	r0, r2
 8000960:	f012 fd12 	bl	8013388 <HAL_GPIO_ReadPin>
 8000964:	4603      	mov	r3, r0
 8000966:	461a      	mov	r2, r3
 8000968:	4b54      	ldr	r3, [pc, #336]	; (8000abc <HAL_GPIO_EXTI_Callback+0x4d4>)
 800096a:	611a      	str	r2, [r3, #16]
		    if(val_encoderB[4] == LOW && direction[4])
 800096c:	4b53      	ldr	r3, [pc, #332]	; (8000abc <HAL_GPIO_EXTI_Callback+0x4d4>)
 800096e:	691b      	ldr	r3, [r3, #16]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d108      	bne.n	8000986 <HAL_GPIO_EXTI_Callback+0x39e>
 8000974:	4b52      	ldr	r3, [pc, #328]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8000976:	791b      	ldrb	r3, [r3, #4]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	2b00      	cmp	r3, #0
 800097c:	d003      	beq.n	8000986 <HAL_GPIO_EXTI_Callback+0x39e>
		      direction[4] = false; //Reverse
 800097e:	4b50      	ldr	r3, [pc, #320]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8000980:	2200      	movs	r2, #0
 8000982:	711a      	strb	r2, [r3, #4]
 8000984:	e00e      	b.n	80009a4 <HAL_GPIO_EXTI_Callback+0x3bc>
		    else if(val_encoderB[4] == HIGH && !direction[4])
 8000986:	4b4d      	ldr	r3, [pc, #308]	; (8000abc <HAL_GPIO_EXTI_Callback+0x4d4>)
 8000988:	691b      	ldr	r3, [r3, #16]
 800098a:	2b01      	cmp	r3, #1
 800098c:	d10a      	bne.n	80009a4 <HAL_GPIO_EXTI_Callback+0x3bc>
 800098e:	4b4c      	ldr	r3, [pc, #304]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8000990:	791b      	ldrb	r3, [r3, #4]
 8000992:	b2db      	uxtb	r3, r3
 8000994:	f083 0301 	eor.w	r3, r3, #1
 8000998:	b2db      	uxtb	r3, r3
 800099a:	2b00      	cmp	r3, #0
 800099c:	d002      	beq.n	80009a4 <HAL_GPIO_EXTI_Callback+0x3bc>
		    	direction[4] = true;  //Forward
 800099e:	4b48      	ldr	r3, [pc, #288]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	711a      	strb	r2, [r3, #4]
		  val_encoderA[4] = Lstate[4];
 80009a4:	4b43      	ldr	r3, [pc, #268]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x4cc>)
 80009a6:	691b      	ldr	r3, [r3, #16]
 80009a8:	4a43      	ldr	r2, [pc, #268]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x4d0>)
 80009aa:	6113      	str	r3, [r2, #16]
		  if(!direction[4]){
 80009ac:	4b44      	ldr	r3, [pc, #272]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 80009ae:	791b      	ldrb	r3, [r3, #4]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	f083 0301 	eor.w	r3, r3, #1
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d00a      	beq.n	80009d2 <HAL_GPIO_EXTI_Callback+0x3ea>
			  motor_steps[4]++;
 80009bc:	4b41      	ldr	r3, [pc, #260]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x4dc>)
 80009be:	691b      	ldr	r3, [r3, #16]
 80009c0:	3301      	adds	r3, #1
 80009c2:	4a40      	ldr	r2, [pc, #256]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x4dc>)
 80009c4:	6113      	str	r3, [r2, #16]
			  delta_pos[4]++;
 80009c6:	4b40      	ldr	r3, [pc, #256]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x4e0>)
 80009c8:	691b      	ldr	r3, [r3, #16]
 80009ca:	3301      	adds	r3, #1
 80009cc:	4a3e      	ldr	r2, [pc, #248]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x4e0>)
 80009ce:	6113      	str	r3, [r2, #16]
		break;
 80009d0:	e06a      	b.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x4c0>
			  motor_steps[4]--;
 80009d2:	4b3c      	ldr	r3, [pc, #240]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x4dc>)
 80009d4:	691b      	ldr	r3, [r3, #16]
 80009d6:	3b01      	subs	r3, #1
 80009d8:	4a3a      	ldr	r2, [pc, #232]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x4dc>)
 80009da:	6113      	str	r3, [r2, #16]
			  delta_pos[4]--;
 80009dc:	4b3a      	ldr	r3, [pc, #232]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x4e0>)
 80009de:	691b      	ldr	r3, [r3, #16]
 80009e0:	3b01      	subs	r3, #1
 80009e2:	4a39      	ldr	r2, [pc, #228]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x4e0>)
 80009e4:	6113      	str	r3, [r2, #16]
		break;
 80009e6:	e05f      	b.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x4c0>
		 Lstate[5] = HAL_GPIO_ReadPin(encoders[10].port, encoders[10].pin_num);
 80009e8:	4b31      	ldr	r3, [pc, #196]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x4c8>)
 80009ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80009ec:	4b30      	ldr	r3, [pc, #192]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x4c8>)
 80009ee:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80009f2:	4619      	mov	r1, r3
 80009f4:	4610      	mov	r0, r2
 80009f6:	f012 fcc7 	bl	8013388 <HAL_GPIO_ReadPin>
 80009fa:	4603      	mov	r3, r0
 80009fc:	461a      	mov	r2, r3
 80009fe:	4b2d      	ldr	r3, [pc, #180]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x4cc>)
 8000a00:	615a      	str	r2, [r3, #20]
		  if((val_encoderA[5] == LOW) && Lstate[5]==HIGH)
 8000a02:	4b2d      	ldr	r3, [pc, #180]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d12c      	bne.n	8000a64 <HAL_GPIO_EXTI_Callback+0x47c>
 8000a0a:	4b2a      	ldr	r3, [pc, #168]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x4cc>)
 8000a0c:	695b      	ldr	r3, [r3, #20]
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d128      	bne.n	8000a64 <HAL_GPIO_EXTI_Callback+0x47c>
			val_encoderB[5] = HAL_GPIO_ReadPin(encoders[11].port, encoders[11].pin_num);
 8000a12:	4b27      	ldr	r3, [pc, #156]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x4c8>)
 8000a14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a16:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x4c8>)
 8000a18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4610      	mov	r0, r2
 8000a20:	f012 fcb2 	bl	8013388 <HAL_GPIO_ReadPin>
 8000a24:	4603      	mov	r3, r0
 8000a26:	461a      	mov	r2, r3
 8000a28:	4b24      	ldr	r3, [pc, #144]	; (8000abc <HAL_GPIO_EXTI_Callback+0x4d4>)
 8000a2a:	615a      	str	r2, [r3, #20]
		    if(val_encoderB[5] == LOW && direction[5])
 8000a2c:	4b23      	ldr	r3, [pc, #140]	; (8000abc <HAL_GPIO_EXTI_Callback+0x4d4>)
 8000a2e:	695b      	ldr	r3, [r3, #20]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d108      	bne.n	8000a46 <HAL_GPIO_EXTI_Callback+0x45e>
 8000a34:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8000a36:	795b      	ldrb	r3, [r3, #5]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d003      	beq.n	8000a46 <HAL_GPIO_EXTI_Callback+0x45e>
		      direction[5] = false; //Reverse
 8000a3e:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	715a      	strb	r2, [r3, #5]
 8000a44:	e00e      	b.n	8000a64 <HAL_GPIO_EXTI_Callback+0x47c>
		    else if(val_encoderB[5] == HIGH && !direction[5])
 8000a46:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <HAL_GPIO_EXTI_Callback+0x4d4>)
 8000a48:	695b      	ldr	r3, [r3, #20]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d10a      	bne.n	8000a64 <HAL_GPIO_EXTI_Callback+0x47c>
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8000a50:	795b      	ldrb	r3, [r3, #5]
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	f083 0301 	eor.w	r3, r3, #1
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d002      	beq.n	8000a64 <HAL_GPIO_EXTI_Callback+0x47c>
		    	direction[5] = true;  //Forward
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	715a      	strb	r2, [r3, #5]
		  val_encoderA[5] = Lstate[5];
 8000a64:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x4cc>)
 8000a66:	695b      	ldr	r3, [r3, #20]
 8000a68:	4a13      	ldr	r2, [pc, #76]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8000a6a:	6153      	str	r3, [r2, #20]
		  if(!direction[5]){
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8000a6e:	795b      	ldrb	r3, [r3, #5]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	f083 0301 	eor.w	r3, r3, #1
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d00a      	beq.n	8000a92 <HAL_GPIO_EXTI_Callback+0x4aa>
			  motor_steps[5]++;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8000a7e:	695b      	ldr	r3, [r3, #20]
 8000a80:	3301      	adds	r3, #1
 8000a82:	4a10      	ldr	r2, [pc, #64]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8000a84:	6153      	str	r3, [r2, #20]
			  delta_pos[5]++;
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x4e0>)
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	4a0e      	ldr	r2, [pc, #56]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x4e0>)
 8000a8e:	6153      	str	r3, [r2, #20]
		break;
 8000a90:	e009      	b.n	8000aa6 <HAL_GPIO_EXTI_Callback+0x4be>
			  motor_steps[5]--;
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8000a9a:	6153      	str	r3, [r2, #20]
			  delta_pos[5]--;
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x4e0>)
 8000a9e:	695b      	ldr	r3, [r3, #20]
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	4a09      	ldr	r2, [pc, #36]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x4e0>)
 8000aa4:	6153      	str	r3, [r2, #20]
		break;
 8000aa6:	bf00      	nop
	}
}
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	240003cc 	.word	0x240003cc
 8000ab4:	240003b4 	.word	0x240003b4
 8000ab8:	2400039c 	.word	0x2400039c
 8000abc:	240004ac 	.word	0x240004ac
 8000ac0:	24000000 	.word	0x24000000
 8000ac4:	2400020c 	.word	0x2400020c
 8000ac8:	24000258 	.word	0x24000258

08000acc <PWM3_change_duty_cycle>:

void PWM3_change_duty_cycle (int valuePA6, int valuePB1, int valuePA7){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08c      	sub	sp, #48	; 0x30
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
 8000ae8:	615a      	str	r2, [r3, #20]
 8000aea:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aec:	2360      	movs	r3, #96	; 0x60
 8000aee:	617b      	str	r3, [r7, #20]
	  sConfigOC.Pulse = valuePA6;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	61bb      	str	r3, [r7, #24]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000af8:	2300      	movs	r3, #0
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2200      	movs	r2, #0
 8000b02:	4619      	mov	r1, r3
 8000b04:	4819      	ldr	r0, [pc, #100]	; (8000b6c <PWM3_change_duty_cycle+0xa0>)
 8000b06:	f016 faf5 	bl	80170f4 <HAL_TIM_PWM_ConfigChannel>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <PWM3_change_duty_cycle+0x48>
	  {
	    Error_Handler();
 8000b10:	f001 f936 	bl	8001d80 <Error_Handler>
	  /*sConfigOC.Pulse = valuePB0;
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
	  {
	    Error_Handler();
	  }*/
	  sConfigOC.Pulse = valuePB1;
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	220c      	movs	r2, #12
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4812      	ldr	r0, [pc, #72]	; (8000b6c <PWM3_change_duty_cycle+0xa0>)
 8000b22:	f016 fae7 	bl	80170f4 <HAL_TIM_PWM_ConfigChannel>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <PWM3_change_duty_cycle+0x64>
	  {
	    Error_Handler();
 8000b2c:	f001 f928 	bl	8001d80 <Error_Handler>
	  }
	  sConfigOC.Pulse = valuePA7;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	2204      	movs	r2, #4
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	480b      	ldr	r0, [pc, #44]	; (8000b6c <PWM3_change_duty_cycle+0xa0>)
 8000b3e:	f016 fad9 	bl	80170f4 <HAL_TIM_PWM_ConfigChannel>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <PWM3_change_duty_cycle+0x80>
	  	  {
	  	    Error_Handler();
 8000b48:	f001 f91a 	bl	8001d80 <Error_Handler>
	  	  }
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4807      	ldr	r0, [pc, #28]	; (8000b6c <PWM3_change_duty_cycle+0xa0>)
 8000b50:	f016 f958 	bl	8016e04 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000b54:	2104      	movs	r1, #4
 8000b56:	4805      	ldr	r0, [pc, #20]	; (8000b6c <PWM3_change_duty_cycle+0xa0>)
 8000b58:	f016 f954 	bl	8016e04 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000b5c:	210c      	movs	r1, #12
 8000b5e:	4803      	ldr	r0, [pc, #12]	; (8000b6c <PWM3_change_duty_cycle+0xa0>)
 8000b60:	f016 f950 	bl	8016e04 <HAL_TIM_PWM_Start>
}
 8000b64:	bf00      	nop
 8000b66:	3730      	adds	r7, #48	; 0x30
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	2400046c 	.word	0x2400046c

08000b70 <PWM1_change_duty_cycle>:
void PWM1_change_duty_cycle (int valuePE11, int valuePE13){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	; 0x28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000b7a:	f107 030c 	add.w	r3, r7, #12
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
 8000b88:	611a      	str	r2, [r3, #16]
 8000b8a:	615a      	str	r2, [r3, #20]
 8000b8c:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b8e:	2360      	movs	r3, #96	; 0x60
 8000b90:	60fb      	str	r3, [r7, #12]
	  sConfigOC.Pulse = valuePE11;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	613b      	str	r3, [r7, #16]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61bb      	str	r3, [r7, #24]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	623b      	str	r3, [r7, #32]
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000baa:	f107 030c 	add.w	r3, r7, #12
 8000bae:	2204      	movs	r2, #4
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4811      	ldr	r0, [pc, #68]	; (8000bf8 <PWM1_change_duty_cycle+0x88>)
 8000bb4:	f016 fa9e 	bl	80170f4 <HAL_TIM_PWM_ConfigChannel>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <PWM1_change_duty_cycle+0x52>
	  {
	    Error_Handler();
 8000bbe:	f001 f8df 	bl	8001d80 <Error_Handler>
	  }
	  sConfigOC.Pulse = valuePE13;
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	613b      	str	r3, [r7, #16]
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bc6:	f107 030c 	add.w	r3, r7, #12
 8000bca:	2208      	movs	r2, #8
 8000bcc:	4619      	mov	r1, r3
 8000bce:	480a      	ldr	r0, [pc, #40]	; (8000bf8 <PWM1_change_duty_cycle+0x88>)
 8000bd0:	f016 fa90 	bl	80170f4 <HAL_TIM_PWM_ConfigChannel>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <PWM1_change_duty_cycle+0x6e>
	  {
	    Error_Handler();
 8000bda:	f001 f8d1 	bl	8001d80 <Error_Handler>
	  }
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000bde:	2104      	movs	r1, #4
 8000be0:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <PWM1_change_duty_cycle+0x88>)
 8000be2:	f016 f90f 	bl	8016e04 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000be6:	2108      	movs	r1, #8
 8000be8:	4803      	ldr	r0, [pc, #12]	; (8000bf8 <PWM1_change_duty_cycle+0x88>)
 8000bea:	f016 f90b 	bl	8016e04 <HAL_TIM_PWM_Start>
}
 8000bee:	bf00      	nop
 8000bf0:	3728      	adds	r7, #40	; 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	24000550 	.word	0x24000550

08000bfc <PWM2_change_duty_cycle>:

//pin PA5
void PWM2_change_duty_cycle (int valuePA5){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000c04:	f107 030c 	add.w	r3, r7, #12
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
 8000c14:	615a      	str	r2, [r3, #20]
 8000c16:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c18:	2360      	movs	r3, #96	; 0x60
 8000c1a:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = valuePA5;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c28:	f107 030c 	add.w	r3, r7, #12
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4807      	ldr	r0, [pc, #28]	; (8000c50 <PWM2_change_duty_cycle+0x54>)
 8000c32:	f016 fa5f 	bl	80170f4 <HAL_TIM_PWM_ConfigChannel>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <PWM2_change_duty_cycle+0x44>
	{
	  Error_Handler();
 8000c3c:	f001 f8a0 	bl	8001d80 <Error_Handler>
    }
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000c40:	2100      	movs	r1, #0
 8000c42:	4803      	ldr	r0, [pc, #12]	; (8000c50 <PWM2_change_duty_cycle+0x54>)
 8000c44:	f016 f8de 	bl	8016e04 <HAL_TIM_PWM_Start>
}
 8000c48:	bf00      	nop
 8000c4a:	3728      	adds	r7, #40	; 0x28
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	24000590 	.word	0x24000590
 8000c54:	00000000 	.word	0x00000000

08000c58 <HAL_TIM_PeriodElapsedCallback>:
  //HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);
  CDC_Transmit_FS((uint8_t *)&ch, 1);
  return ch;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	int j;
	if (htim == &htim7){
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a71      	ldr	r2, [pc, #452]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	f040 80c2 	bne.w	8000dee <HAL_TIM_PeriodElapsedCallback+0x196>
		for (j = 0; j < NUM_JOINTS; j++){
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	e0b7      	b.n	8000de0 <HAL_TIM_PeriodElapsedCallback+0x188>

			if (j <3){
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	dc38      	bgt.n	8000ce8 <HAL_TIM_PeriodElapsedCallback+0x90>
				current_angle[j] = (double)motor_steps[j] *2.0*3.1415926/REV_COUNT_1*2.0;
 8000c76:	4a6d      	ldr	r2, [pc, #436]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c7e:	ee07 3a90 	vmov	s15, r3
 8000c82:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000c86:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000c8a:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8000e00 <HAL_TIM_PeriodElapsedCallback+0x1a8>
 8000c8e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000c92:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 8000e08 <HAL_TIM_PeriodElapsedCallback+0x1b0>
 8000c96:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c9a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000c9e:	4a64      	ldr	r2, [pc, #400]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	00db      	lsls	r3, r3, #3
 8000ca4:	4413      	add	r3, r2
 8000ca6:	ed83 7b00 	vstr	d7, [r3]
				joint_speed[j] = (double)delta_pos[j] *2.0*3.1415926/REV_COUNT_1/0.01*2.0;
 8000caa:	4a62      	ldr	r2, [pc, #392]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb2:	ee07 3a90 	vmov	s15, r3
 8000cb6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000cba:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000cbe:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8000e00 <HAL_TIM_PeriodElapsedCallback+0x1a8>
 8000cc2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000cc6:	ed9f 5b50 	vldr	d5, [pc, #320]	; 8000e08 <HAL_TIM_PeriodElapsedCallback+0x1b0>
 8000cca:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000cce:	ed9f 5b50 	vldr	d5, [pc, #320]	; 8000e10 <HAL_TIM_PeriodElapsedCallback+0x1b8>
 8000cd2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cd6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000cda:	4a57      	ldr	r2, [pc, #348]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	00db      	lsls	r3, r3, #3
 8000ce0:	4413      	add	r3, r2
 8000ce2:	ed83 7b00 	vstr	d7, [r3]
 8000ce6:	e073      	b.n	8000dd0 <HAL_TIM_PeriodElapsedCallback+0x178>
			}
			else if (j < 5){
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	dc38      	bgt.n	8000d60 <HAL_TIM_PeriodElapsedCallback+0x108>
				current_angle[j] = (double)motor_steps[j] *2.0*3.1415926/REV_COUNT_2*2.0;
 8000cee:	4a4f      	ldr	r2, [pc, #316]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf6:	ee07 3a90 	vmov	s15, r3
 8000cfa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000cfe:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000d02:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8000e00 <HAL_TIM_PeriodElapsedCallback+0x1a8>
 8000d06:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000d0a:	ed9f 5b43 	vldr	d5, [pc, #268]	; 8000e18 <HAL_TIM_PeriodElapsedCallback+0x1c0>
 8000d0e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d12:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000d16:	4a46      	ldr	r2, [pc, #280]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	00db      	lsls	r3, r3, #3
 8000d1c:	4413      	add	r3, r2
 8000d1e:	ed83 7b00 	vstr	d7, [r3]
				joint_speed[j] = (double)delta_pos[j] *2.0*3.1415926/REV_COUNT_2/0.01*2.0;
 8000d22:	4a44      	ldr	r2, [pc, #272]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d2a:	ee07 3a90 	vmov	s15, r3
 8000d2e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000d32:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000d36:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8000e00 <HAL_TIM_PeriodElapsedCallback+0x1a8>
 8000d3a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000d3e:	ed9f 5b36 	vldr	d5, [pc, #216]	; 8000e18 <HAL_TIM_PeriodElapsedCallback+0x1c0>
 8000d42:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000d46:	ed9f 5b32 	vldr	d5, [pc, #200]	; 8000e10 <HAL_TIM_PeriodElapsedCallback+0x1b8>
 8000d4a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d4e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000d52:	4a39      	ldr	r2, [pc, #228]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	00db      	lsls	r3, r3, #3
 8000d58:	4413      	add	r3, r2
 8000d5a:	ed83 7b00 	vstr	d7, [r3]
 8000d5e:	e037      	b.n	8000dd0 <HAL_TIM_PeriodElapsedCallback+0x178>
			}
			else{
				current_angle[j] = (double)motor_steps[j] *2.0*3.1415926/REV_COUNT_3*2.0;
 8000d60:	4a32      	ldr	r2, [pc, #200]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d68:	ee07 3a90 	vmov	s15, r3
 8000d6c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000d70:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000d74:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8000e00 <HAL_TIM_PeriodElapsedCallback+0x1a8>
 8000d78:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000d7c:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8000e20 <HAL_TIM_PeriodElapsedCallback+0x1c8>
 8000d80:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d84:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000d88:	4a29      	ldr	r2, [pc, #164]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	00db      	lsls	r3, r3, #3
 8000d8e:	4413      	add	r3, r2
 8000d90:	ed83 7b00 	vstr	d7, [r3]
				joint_speed[j] = (double)delta_pos[j] *2.0*3.1415926/REV_COUNT_3/0.01*2.0;
 8000d94:	4a27      	ldr	r2, [pc, #156]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d9c:	ee07 3a90 	vmov	s15, r3
 8000da0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000da4:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000da8:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8000e00 <HAL_TIM_PeriodElapsedCallback+0x1a8>
 8000dac:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000db0:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 8000e20 <HAL_TIM_PeriodElapsedCallback+0x1c8>
 8000db4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000db8:	ed9f 5b15 	vldr	d5, [pc, #84]	; 8000e10 <HAL_TIM_PeriodElapsedCallback+0x1b8>
 8000dbc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000dc0:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000dc4:	4a1c      	ldr	r2, [pc, #112]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	00db      	lsls	r3, r3, #3
 8000dca:	4413      	add	r3, r2
 8000dcc:	ed83 7b00 	vstr	d7, [r3]
			}
			delta_pos[j] = 0;
 8000dd0:	4a18      	ldr	r2, [pc, #96]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (j = 0; j < NUM_JOINTS; j++){
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2b05      	cmp	r3, #5
 8000de4:	f77f af44 	ble.w	8000c70 <HAL_TIM_PeriodElapsedCallback+0x18>
		}

		need_control = true;
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	701a      	strb	r2, [r3, #0]
	}
}
 8000dee:	bf00      	nop
 8000df0:	3714      	adds	r7, #20
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	f3af 8000 	nop.w
 8000e00:	4d12d84a 	.word	0x4d12d84a
 8000e04:	400921fb 	.word	0x400921fb
 8000e08:	00000000 	.word	0x00000000
 8000e0c:	40d0e000 	.word	0x40d0e000
 8000e10:	47ae147b 	.word	0x47ae147b
 8000e14:	3f847ae1 	.word	0x3f847ae1
 8000e18:	00000000 	.word	0x00000000
 8000e1c:	40b67c00 	.word	0x40b67c00
 8000e20:	00000000 	.word	0x00000000
 8000e24:	405cc000 	.word	0x405cc000
 8000e28:	240005d0 	.word	0x240005d0
 8000e2c:	2400020c 	.word	0x2400020c
 8000e30:	24000270 	.word	0x24000270
 8000e34:	24000258 	.word	0x24000258
 8000e38:	24000228 	.word	0x24000228
 8000e3c:	24000006 	.word	0x24000006

08000e40 <Joint_controller>:


void Joint_controller(bool homing, creal_T* G_q_vector){
 8000e40:	b590      	push	{r4, r7, lr}
 8000e42:	b097      	sub	sp, #92	; 0x5c
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	71fb      	strb	r3, [r7, #7]
	int k;
	int PWM_val [6] = {0};
 8000e4c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
 8000e5c:	615a      	str	r2, [r3, #20]
	double G_q_r [6] = {0};
 8000e5e:	f107 0308 	add.w	r3, r7, #8
 8000e62:	2230      	movs	r2, #48	; 0x30
 8000e64:	2100      	movs	r1, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f01d f97e 	bl	801e168 <memset>
	G_q(G_CONSTANT, current_angle[2], current_angle[3], current_angle[4], current_angle[5], G_q_vector);
 8000e6c:	4b78      	ldr	r3, [pc, #480]	; (8001050 <Joint_controller+0x210>)
 8000e6e:	ed93 7b04 	vldr	d7, [r3, #16]
 8000e72:	4b77      	ldr	r3, [pc, #476]	; (8001050 <Joint_controller+0x210>)
 8000e74:	ed93 6b06 	vldr	d6, [r3, #24]
 8000e78:	4b75      	ldr	r3, [pc, #468]	; (8001050 <Joint_controller+0x210>)
 8000e7a:	ed93 5b08 	vldr	d5, [r3, #32]
 8000e7e:	4b74      	ldr	r3, [pc, #464]	; (8001050 <Joint_controller+0x210>)
 8000e80:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8000e84:	6838      	ldr	r0, [r7, #0]
 8000e86:	eeb0 3b45 	vmov.f64	d3, d5
 8000e8a:	eeb0 2b46 	vmov.f64	d2, d6
 8000e8e:	eeb0 1b47 	vmov.f64	d1, d7
 8000e92:	ed9f 0b6b 	vldr	d0, [pc, #428]	; 8001040 <Joint_controller+0x200>
 8000e96:	f001 fac3 	bl	8002420 <G_q>
	for (k = 0; k < NUM_JOINTS; k++){
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	657b      	str	r3, [r7, #84]	; 0x54
 8000e9e:	e0b6      	b.n	800100e <Joint_controller+0x1ce>
		G_q_r[k] = (double)G_q_vector[k].re;
 8000ea0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ea2:	011b      	lsls	r3, r3, #4
 8000ea4:	683a      	ldr	r2, [r7, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000eac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000eae:	00d2      	lsls	r2, r2, #3
 8000eb0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000eb4:	440a      	add	r2, r1
 8000eb6:	3a50      	subs	r2, #80	; 0x50
 8000eb8:	e9c2 3400 	strd	r3, r4, [r2]
		backemf[k] = joint_speed[k] * V_CONSTANT[k];
 8000ebc:	4a65      	ldr	r2, [pc, #404]	; (8001054 <Joint_controller+0x214>)
 8000ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	4413      	add	r3, r2
 8000ec4:	ed93 6b00 	vldr	d6, [r3]
 8000ec8:	4a63      	ldr	r2, [pc, #396]	; (8001058 <Joint_controller+0x218>)
 8000eca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ecc:	00db      	lsls	r3, r3, #3
 8000ece:	4413      	add	r3, r2
 8000ed0:	ed93 7b00 	vldr	d7, [r3]
 8000ed4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000ed8:	4a60      	ldr	r2, [pc, #384]	; (800105c <Joint_controller+0x21c>)
 8000eda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000edc:	00db      	lsls	r3, r3, #3
 8000ede:	4413      	add	r3, r2
 8000ee0:	ed83 7b00 	vstr	d7, [r3]
		G_q_r[k] *= 1024;
 8000ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000eec:	4413      	add	r3, r2
 8000eee:	3b50      	subs	r3, #80	; 0x50
 8000ef0:	ed93 7b00 	vldr	d7, [r3]
 8000ef4:	ed9f 6b54 	vldr	d6, [pc, #336]	; 8001048 <Joint_controller+0x208>
 8000ef8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000efc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000f04:	4413      	add	r3, r2
 8000f06:	3b50      	subs	r3, #80	; 0x50
 8000f08:	ed83 7b00 	vstr	d7, [r3]
		G_q_r[k] /= (12.0 - backemf[k])/RESISTANCE[k]*T_CONSTANT[k];
 8000f0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000f14:	4413      	add	r3, r2
 8000f16:	3b50      	subs	r3, #80	; 0x50
 8000f18:	ed93 5b00 	vldr	d5, [r3]
 8000f1c:	4a4f      	ldr	r2, [pc, #316]	; (800105c <Joint_controller+0x21c>)
 8000f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	4413      	add	r3, r2
 8000f24:	ed93 7b00 	vldr	d7, [r3]
 8000f28:	eeb2 6b08 	vmov.f64	d6, #40	; 0x41400000  12.0
 8000f2c:	ee36 4b47 	vsub.f64	d4, d6, d7
 8000f30:	4a4b      	ldr	r2, [pc, #300]	; (8001060 <Joint_controller+0x220>)
 8000f32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	4413      	add	r3, r2
 8000f38:	ed93 7b00 	vldr	d7, [r3]
 8000f3c:	ee84 6b07 	vdiv.f64	d6, d4, d7
 8000f40:	4a48      	ldr	r2, [pc, #288]	; (8001064 <Joint_controller+0x224>)
 8000f42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	4413      	add	r3, r2
 8000f48:	ed93 7b00 	vldr	d7, [r3]
 8000f4c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000f50:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000f54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f56:	00db      	lsls	r3, r3, #3
 8000f58:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000f5c:	4413      	add	r3, r2
 8000f5e:	3b50      	subs	r3, #80	; 0x50
 8000f60:	ed83 7b00 	vstr	d7, [r3]
		PWM_val[k] = G_q_r[k] + K_P[k] * (desired_pos[k] - current_angle[k]) - K_V[k] * joint_speed[k];
 8000f64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f66:	00db      	lsls	r3, r3, #3
 8000f68:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000f6c:	4413      	add	r3, r2
 8000f6e:	3b50      	subs	r3, #80	; 0x50
 8000f70:	ed93 6b00 	vldr	d6, [r3]
 8000f74:	4a3c      	ldr	r2, [pc, #240]	; (8001068 <Joint_controller+0x228>)
 8000f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000f84:	4a39      	ldr	r2, [pc, #228]	; (800106c <Joint_controller+0x22c>)
 8000f86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	4413      	add	r3, r2
 8000f8c:	ed93 4b00 	vldr	d4, [r3]
 8000f90:	4a2f      	ldr	r2, [pc, #188]	; (8001050 <Joint_controller+0x210>)
 8000f92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f94:	00db      	lsls	r3, r3, #3
 8000f96:	4413      	add	r3, r2
 8000f98:	ed93 7b00 	vldr	d7, [r3]
 8000f9c:	ee34 7b47 	vsub.f64	d7, d4, d7
 8000fa0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000fa4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000fa8:	4a31      	ldr	r2, [pc, #196]	; (8001070 <Joint_controller+0x230>)
 8000faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb0:	ee07 3a90 	vmov	s15, r3
 8000fb4:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000fb8:	4a26      	ldr	r2, [pc, #152]	; (8001054 <Joint_controller+0x214>)
 8000fba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	4413      	add	r3, r2
 8000fc0:	ed93 7b00 	vldr	d7, [r3]
 8000fc4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000fc8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000fcc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000fd0:	ee17 2a90 	vmov	r2, s15
 8000fd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000fdc:	440b      	add	r3, r1
 8000fde:	f843 2c1c 	str.w	r2, [r3, #-28]
		if (PWM_val[k] > 1024){
 8000fe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000fea:	4413      	add	r3, r2
 8000fec:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ff4:	dd08      	ble.n	8001008 <Joint_controller+0x1c8>
			PWM_val[k] = 1024;
 8000ff6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000ffe:	4413      	add	r3, r2
 8001000:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001004:	f843 2c1c 	str.w	r2, [r3, #-28]
	for (k = 0; k < NUM_JOINTS; k++){
 8001008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800100a:	3301      	adds	r3, #1
 800100c:	657b      	str	r3, [r7, #84]	; 0x54
 800100e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001010:	2b05      	cmp	r3, #5
 8001012:	f77f af45 	ble.w	8000ea0 <Joint_controller+0x60>
		}
	}
	PWM1_change_duty_cycle(PWM_val[0], PWM_val[1]);
 8001016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001018:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800101a:	4611      	mov	r1, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fda7 	bl	8000b70 <PWM1_change_duty_cycle>
	PWM2_change_duty_cycle(PWM_val[2]);
 8001022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fde9 	bl	8000bfc <PWM2_change_duty_cycle>
	PWM3_change_duty_cycle(PWM_val[3], PWM_val[4], PWM_val[5]);
 800102a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800102c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800102e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fd4b 	bl	8000acc <PWM3_change_duty_cycle>

}
 8001036:	bf00      	nop
 8001038:	375c      	adds	r7, #92	; 0x5c
 800103a:	46bd      	mov	sp, r7
 800103c:	bd90      	pop	{r4, r7, pc}
 800103e:	bf00      	nop
 8001040:	51eb851f 	.word	0x51eb851f
 8001044:	c0239eb8 	.word	0xc0239eb8
 8001048:	00000000 	.word	0x00000000
 800104c:	40900000 	.word	0x40900000
 8001050:	24000270 	.word	0x24000270
 8001054:	24000228 	.word	0x24000228
 8001058:	0801f3d0 	.word	0x0801f3d0
 800105c:	240002a0 	.word	0x240002a0
 8001060:	0801f430 	.word	0x0801f430
 8001064:	0801f400 	.word	0x0801f400
 8001068:	0801f39c 	.word	0x0801f39c
 800106c:	240002d0 	.word	0x240002d0
 8001070:	0801f3b4 	.word	0x0801f3b4

08001074 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001074:	b590      	push	{r4, r7, lr}
 8001076:	b0b3      	sub	sp, #204	; 0xcc
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char* msg = "Hello Nucleo Fun!\n\r";
 800107a:	4b9b      	ldr	r3, [pc, #620]	; (80012e8 <main+0x274>)
 800107c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	char* EOL = "]\n\r";
 8001080:	4b9a      	ldr	r3, [pc, #616]	; (80012ec <main+0x278>)
 8001082:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	char* EOJ = ", ";
 8001086:	4b9a      	ldr	r3, [pc, #616]	; (80012f0 <main+0x27c>)
 8001088:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	char* timer_tester = "timed\n\r";
 800108c:	4b99      	ldr	r3, [pc, #612]	; (80012f4 <main+0x280>)
 800108e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	uint32_t  stop;
	uint32_t  delta;
	creal_T G_q_vector[6];
	//pins: 0,1,2,3,4,7 - PA0(PC10)y, PA1(PD5)y, PB2(PC7)y, PE3(PE4)y, PD4(PD3)y, PD7(PE2)y
	// HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
	encoders[0].port = GPIOA; encoders[0].pin_num = GPIO_PIN_0;
 8001092:	4b99      	ldr	r3, [pc, #612]	; (80012f8 <main+0x284>)
 8001094:	4a99      	ldr	r2, [pc, #612]	; (80012fc <main+0x288>)
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	4b97      	ldr	r3, [pc, #604]	; (80012f8 <main+0x284>)
 800109a:	2201      	movs	r2, #1
 800109c:	809a      	strh	r2, [r3, #4]
	encoders[1].port = GPIOC; encoders[1].pin_num = GPIO_PIN_10;
 800109e:	4b96      	ldr	r3, [pc, #600]	; (80012f8 <main+0x284>)
 80010a0:	4a97      	ldr	r2, [pc, #604]	; (8001300 <main+0x28c>)
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	4b94      	ldr	r3, [pc, #592]	; (80012f8 <main+0x284>)
 80010a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010aa:	819a      	strh	r2, [r3, #12]
	encoders[2].port = GPIOA; encoders[2].pin_num = GPIO_PIN_1;
 80010ac:	4b92      	ldr	r3, [pc, #584]	; (80012f8 <main+0x284>)
 80010ae:	4a93      	ldr	r2, [pc, #588]	; (80012fc <main+0x288>)
 80010b0:	611a      	str	r2, [r3, #16]
 80010b2:	4b91      	ldr	r3, [pc, #580]	; (80012f8 <main+0x284>)
 80010b4:	2202      	movs	r2, #2
 80010b6:	829a      	strh	r2, [r3, #20]
	encoders[3].port = GPIOD; encoders[3].pin_num = GPIO_PIN_5;
 80010b8:	4b8f      	ldr	r3, [pc, #572]	; (80012f8 <main+0x284>)
 80010ba:	4a92      	ldr	r2, [pc, #584]	; (8001304 <main+0x290>)
 80010bc:	619a      	str	r2, [r3, #24]
 80010be:	4b8e      	ldr	r3, [pc, #568]	; (80012f8 <main+0x284>)
 80010c0:	2220      	movs	r2, #32
 80010c2:	839a      	strh	r2, [r3, #28]
	encoders[4].port = GPIOB; encoders[4].pin_num = GPIO_PIN_2;
 80010c4:	4b8c      	ldr	r3, [pc, #560]	; (80012f8 <main+0x284>)
 80010c6:	4a90      	ldr	r2, [pc, #576]	; (8001308 <main+0x294>)
 80010c8:	621a      	str	r2, [r3, #32]
 80010ca:	4b8b      	ldr	r3, [pc, #556]	; (80012f8 <main+0x284>)
 80010cc:	2204      	movs	r2, #4
 80010ce:	849a      	strh	r2, [r3, #36]	; 0x24
	encoders[5].port = GPIOC; encoders[5].pin_num = GPIO_PIN_7;
 80010d0:	4b89      	ldr	r3, [pc, #548]	; (80012f8 <main+0x284>)
 80010d2:	4a8b      	ldr	r2, [pc, #556]	; (8001300 <main+0x28c>)
 80010d4:	629a      	str	r2, [r3, #40]	; 0x28
 80010d6:	4b88      	ldr	r3, [pc, #544]	; (80012f8 <main+0x284>)
 80010d8:	2280      	movs	r2, #128	; 0x80
 80010da:	859a      	strh	r2, [r3, #44]	; 0x2c
	encoders[6].port = GPIOE; encoders[6].pin_num = GPIO_PIN_3;
 80010dc:	4b86      	ldr	r3, [pc, #536]	; (80012f8 <main+0x284>)
 80010de:	4a8b      	ldr	r2, [pc, #556]	; (800130c <main+0x298>)
 80010e0:	631a      	str	r2, [r3, #48]	; 0x30
 80010e2:	4b85      	ldr	r3, [pc, #532]	; (80012f8 <main+0x284>)
 80010e4:	2208      	movs	r2, #8
 80010e6:	869a      	strh	r2, [r3, #52]	; 0x34
	encoders[7].port = GPIOE; encoders[7].pin_num = GPIO_PIN_4;
 80010e8:	4b83      	ldr	r3, [pc, #524]	; (80012f8 <main+0x284>)
 80010ea:	4a88      	ldr	r2, [pc, #544]	; (800130c <main+0x298>)
 80010ec:	639a      	str	r2, [r3, #56]	; 0x38
 80010ee:	4b82      	ldr	r3, [pc, #520]	; (80012f8 <main+0x284>)
 80010f0:	2210      	movs	r2, #16
 80010f2:	879a      	strh	r2, [r3, #60]	; 0x3c
	encoders[8].port = GPIOD; encoders[8].pin_num = GPIO_PIN_4;
 80010f4:	4b80      	ldr	r3, [pc, #512]	; (80012f8 <main+0x284>)
 80010f6:	4a83      	ldr	r2, [pc, #524]	; (8001304 <main+0x290>)
 80010f8:	641a      	str	r2, [r3, #64]	; 0x40
 80010fa:	4b7f      	ldr	r3, [pc, #508]	; (80012f8 <main+0x284>)
 80010fc:	2210      	movs	r2, #16
 80010fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	encoders[9].port = GPIOD; encoders[9].pin_num = GPIO_PIN_3;
 8001102:	4b7d      	ldr	r3, [pc, #500]	; (80012f8 <main+0x284>)
 8001104:	4a7f      	ldr	r2, [pc, #508]	; (8001304 <main+0x290>)
 8001106:	649a      	str	r2, [r3, #72]	; 0x48
 8001108:	4b7b      	ldr	r3, [pc, #492]	; (80012f8 <main+0x284>)
 800110a:	2208      	movs	r2, #8
 800110c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	encoders[10].port = GPIOD; encoders[10].pin_num = GPIO_PIN_7;
 8001110:	4b79      	ldr	r3, [pc, #484]	; (80012f8 <main+0x284>)
 8001112:	4a7c      	ldr	r2, [pc, #496]	; (8001304 <main+0x290>)
 8001114:	651a      	str	r2, [r3, #80]	; 0x50
 8001116:	4b78      	ldr	r3, [pc, #480]	; (80012f8 <main+0x284>)
 8001118:	2280      	movs	r2, #128	; 0x80
 800111a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    encoders[11].port = GPIOE; encoders[11].pin_num = GPIO_PIN_2;
 800111e:	4b76      	ldr	r3, [pc, #472]	; (80012f8 <main+0x284>)
 8001120:	4a7a      	ldr	r2, [pc, #488]	; (800130c <main+0x298>)
 8001122:	659a      	str	r2, [r3, #88]	; 0x58
 8001124:	4b74      	ldr	r3, [pc, #464]	; (80012f8 <main+0x284>)
 8001126:	2204      	movs	r2, #4
 8001128:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    for(i = 0; i < NUM_JOINTS; i++){
 800112c:	2300      	movs	r3, #0
 800112e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001132:	e024      	b.n	800117e <main+0x10a>
    	val_encoderA [i] = HIGH;
 8001134:	4a76      	ldr	r2, [pc, #472]	; (8001310 <main+0x29c>)
 8001136:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800113a:	2101      	movs	r1, #1
 800113c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	val_encoderB [i] = HIGH;
 8001140:	4a74      	ldr	r2, [pc, #464]	; (8001314 <main+0x2a0>)
 8001142:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001146:	2101      	movs	r1, #1
 8001148:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	direction [i] = true;
 800114c:	4a72      	ldr	r2, [pc, #456]	; (8001318 <main+0x2a4>)
 800114e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001152:	4413      	add	r3, r2
 8001154:	2201      	movs	r2, #1
 8001156:	701a      	strb	r2, [r3, #0]
    	desired_pos[i] = test_pos[i];
 8001158:	4a70      	ldr	r2, [pc, #448]	; (800131c <main+0x2a8>)
 800115a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	4413      	add	r3, r2
 8001162:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001166:	496e      	ldr	r1, [pc, #440]	; (8001320 <main+0x2ac>)
 8001168:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800116c:	00d2      	lsls	r2, r2, #3
 800116e:	440a      	add	r2, r1
 8001170:	e9c2 3400 	strd	r3, r4, [r2]
    for(i = 0; i < NUM_JOINTS; i++){
 8001174:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001178:	3301      	adds	r3, #1
 800117a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800117e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001182:	2b05      	cmp	r3, #5
 8001184:	ddd6      	ble.n	8001134 <main+0xc0>
    }

    //for CPU cycle counts
    if (ARM_CM_DWT_CTRL != 0) {        // See if DWT is available
 8001186:	4b67      	ldr	r3, [pc, #412]	; (8001324 <main+0x2b0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d00e      	beq.n	80011ac <main+0x138>

        ARM_CM_DEMCR      |= 1 << 24;  // Set bit 24
 800118e:	4b66      	ldr	r3, [pc, #408]	; (8001328 <main+0x2b4>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a65      	ldr	r2, [pc, #404]	; (8001328 <main+0x2b4>)
 8001194:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001198:	6013      	str	r3, [r2, #0]

        ARM_CM_DWT_CYCCNT  = 0;
 800119a:	4b64      	ldr	r3, [pc, #400]	; (800132c <main+0x2b8>)
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]

        ARM_CM_DWT_CTRL   |= 1 << 0;   // Set bit 0
 80011a0:	4b60      	ldr	r3, [pc, #384]	; (8001324 <main+0x2b0>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a5f      	ldr	r2, [pc, #380]	; (8001324 <main+0x2b0>)
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ac:	f011 fb28 	bl	8012800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011b0:	f000 f8c4 	bl	800133c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b4:	f000 fc1c 	bl	80019f0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80011b8:	f000 fbce 	bl	8001958 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80011bc:	f000 f97c 	bl	80014b8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80011c0:	f000 fa16 	bl	80015f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80011c4:	f000 fa6e 	bl	80016a4 <MX_TIM3_Init>
  MX_TIM5_Init();
 80011c8:	f000 fade 	bl	8001788 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 80011cc:	f000 fb78 	bl	80018c0 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80011d0:	f01c fa48 	bl	801d664 <MX_USB_DEVICE_Init>
  MX_TIM7_Init();
 80011d4:	f000 fb34 	bl	8001840 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  PWM3_change_duty_cycle(1024, 500, 100);
 80011d8:	2264      	movs	r2, #100	; 0x64
 80011da:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80011de:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80011e2:	f7ff fc73 	bl	8000acc <PWM3_change_duty_cycle>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //printf(msg);
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 80011e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ea:	4845      	ldr	r0, [pc, #276]	; (8001300 <main+0x28c>)
 80011ec:	f012 f8cc 	bl	8013388 <HAL_GPIO_ReadPin>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d05a      	beq.n	80012ac <main+0x238>
		  itoa(motor_steps[0], one_motor, 10);
 80011f6:	4b4e      	ldr	r3, [pc, #312]	; (8001330 <main+0x2bc>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 80011fe:	220a      	movs	r2, #10
 8001200:	4618      	mov	r0, r3
 8001202:	f01c ff9f 	bl	801e144 <itoa>
		  strcpy(print_string, one_motor);
 8001206:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800120a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800120e:	4611      	mov	r1, r2
 8001210:	4618      	mov	r0, r3
 8001212:	f01d f878 	bl	801e306 <strcpy>
		  for (i = 1; i < NUM_JOINTS; i++){
 8001216:	2301      	movs	r3, #1
 8001218:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800121c:	e01e      	b.n	800125c <main+0x1e8>
			  itoa(motor_steps[i], one_motor, 10);
 800121e:	4a44      	ldr	r2, [pc, #272]	; (8001330 <main+0x2bc>)
 8001220:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001228:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 800122c:	220a      	movs	r2, #10
 800122e:	4618      	mov	r0, r3
 8001230:	f01c ff88 	bl	801e144 <itoa>
			  strcat(print_string, EOJ);
 8001234:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001238:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800123c:	4618      	mov	r0, r3
 800123e:	f01d f853 	bl	801e2e8 <strcat>
			  strcat(print_string, one_motor);
 8001242:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8001246:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800124a:	4611      	mov	r1, r2
 800124c:	4618      	mov	r0, r3
 800124e:	f01d f84b 	bl	801e2e8 <strcat>
		  for (i = 1; i < NUM_JOINTS; i++){
 8001252:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001256:	3301      	adds	r3, #1
 8001258:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800125c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001260:	2b05      	cmp	r3, #5
 8001262:	dddc      	ble.n	800121e <main+0x1aa>
		  }
		  strcat(print_string, EOL);
 8001264:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001268:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800126c:	4618      	mov	r0, r3
 800126e:	f01d f83b 	bl	801e2e8 <strcat>
		  CDC_Transmit_FS((uint8_t*)"motor is at [", strlen(msg));
 8001272:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8001276:	f7ff f82f 	bl	80002d8 <strlen>
 800127a:	4603      	mov	r3, r0
 800127c:	b29b      	uxth	r3, r3
 800127e:	4619      	mov	r1, r3
 8001280:	482c      	ldr	r0, [pc, #176]	; (8001334 <main+0x2c0>)
 8001282:	f01c fae7 	bl	801d854 <CDC_Transmit_FS>
		  HAL_Delay(2);
 8001286:	2002      	movs	r0, #2
 8001288:	f011 fb4c 	bl	8012924 <HAL_Delay>
		  CDC_Transmit_FS((uint8_t*)print_string, strlen(print_string));
 800128c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff f821 	bl	80002d8 <strlen>
 8001296:	4603      	mov	r3, r0
 8001298:	b29a      	uxth	r2, r3
 800129a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800129e:	4611      	mov	r1, r2
 80012a0:	4618      	mov	r0, r3
 80012a2:	f01c fad7 	bl	801d854 <CDC_Transmit_FS>
		  HAL_Delay(2);
 80012a6:	2002      	movs	r0, #2
 80012a8:	f011 fb3c 	bl	8012924 <HAL_Delay>
	  }
	  if (need_control){
 80012ac:	4b22      	ldr	r3, [pc, #136]	; (8001338 <main+0x2c4>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d097      	beq.n	80011e6 <main+0x172>
		  start = ARM_CM_DWT_CYCCNT;
 80012b6:	4b1d      	ldr	r3, [pc, #116]	; (800132c <main+0x2b8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		  Joint_controller(false, G_q_vector);
 80012be:	463b      	mov	r3, r7
 80012c0:	4619      	mov	r1, r3
 80012c2:	2000      	movs	r0, #0
 80012c4:	f7ff fdbc 	bl	8000e40 <Joint_controller>
		  stop  = ARM_CM_DWT_CYCCNT;
 80012c8:	4b18      	ldr	r3, [pc, #96]	; (800132c <main+0x2b8>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		  delta = stop - start;
 80012d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80012d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		  need_control = false;
 80012de:	4b16      	ldr	r3, [pc, #88]	; (8001338 <main+0x2c4>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	701a      	strb	r2, [r3, #0]
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 80012e4:	e77f      	b.n	80011e6 <main+0x172>
 80012e6:	bf00      	nop
 80012e8:	0801f310 	.word	0x0801f310
 80012ec:	0801f324 	.word	0x0801f324
 80012f0:	0801f328 	.word	0x0801f328
 80012f4:	0801f32c 	.word	0x0801f32c
 80012f8:	240003cc 	.word	0x240003cc
 80012fc:	58020000 	.word	0x58020000
 8001300:	58020800 	.word	0x58020800
 8001304:	58020c00 	.word	0x58020c00
 8001308:	58020400 	.word	0x58020400
 800130c:	58021000 	.word	0x58021000
 8001310:	2400039c 	.word	0x2400039c
 8001314:	240004ac 	.word	0x240004ac
 8001318:	24000000 	.word	0x24000000
 800131c:	0801f460 	.word	0x0801f460
 8001320:	240002d0 	.word	0x240002d0
 8001324:	e0001000 	.word	0xe0001000
 8001328:	e000edfc 	.word	0xe000edfc
 800132c:	e0001004 	.word	0xe0001004
 8001330:	2400020c 	.word	0x2400020c
 8001334:	0801f334 	.word	0x0801f334
 8001338:	24000006 	.word	0x24000006

0800133c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b0cc      	sub	sp, #304	; 0x130
 8001340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001342:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001346:	224c      	movs	r2, #76	; 0x4c
 8001348:	2100      	movs	r1, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f01c ff0c 	bl	801e168 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001350:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001354:	2220      	movs	r2, #32
 8001356:	2100      	movs	r1, #0
 8001358:	4618      	mov	r0, r3
 800135a:	f01c ff05 	bl	801e168 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800135e:	f107 0308 	add.w	r3, r7, #8
 8001362:	4618      	mov	r0, r3
 8001364:	23bc      	movs	r3, #188	; 0xbc
 8001366:	461a      	mov	r2, r3
 8001368:	2100      	movs	r1, #0
 800136a:	f01c fefd 	bl	801e168 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800136e:	2002      	movs	r0, #2
 8001370:	f013 fa30 	bl	80147d4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	4b4c      	ldr	r3, [pc, #304]	; (80014ac <SystemClock_Config+0x170>)
 800137c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137e:	4a4b      	ldr	r2, [pc, #300]	; (80014ac <SystemClock_Config+0x170>)
 8001380:	f023 0301 	bic.w	r3, r3, #1
 8001384:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001386:	4b49      	ldr	r3, [pc, #292]	; (80014ac <SystemClock_Config+0x170>)
 8001388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138a:	f003 0201 	and.w	r2, r3, #1
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	4b47      	ldr	r3, [pc, #284]	; (80014b0 <SystemClock_Config+0x174>)
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	4a46      	ldr	r2, [pc, #280]	; (80014b0 <SystemClock_Config+0x174>)
 8001398:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800139c:	6193      	str	r3, [r2, #24]
 800139e:	4b44      	ldr	r3, [pc, #272]	; (80014b0 <SystemClock_Config+0x174>)
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013ae:	bf00      	nop
 80013b0:	4b3f      	ldr	r3, [pc, #252]	; (80014b0 <SystemClock_Config+0x174>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013bc:	d1f8      	bne.n	80013b0 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013be:	2301      	movs	r3, #1
 80013c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80013c4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80013c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013cc:	2302      	movs	r3, #2
 80013ce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013d2:	2302      	movs	r3, #2
 80013d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013d8:	2301      	movs	r3, #1
 80013da:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 54;
 80013de:	2336      	movs	r3, #54	; 0x36
 80013e0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80013e4:	2302      	movs	r3, #2
 80013e6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80013ea:	2309      	movs	r3, #9
 80013ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013f0:	2302      	movs	r3, #2
 80013f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80013f6:	230c      	movs	r3, #12
 80013f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001408:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800140c:	4618      	mov	r0, r3
 800140e:	f013 fa2b 	bl	8014868 <HAL_RCC_OscConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8001418:	f000 fcb2 	bl	8001d80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800141c:	233f      	movs	r3, #63	; 0x3f
 800141e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001422:	2303      	movs	r3, #3
 8001424:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001428:	2300      	movs	r3, #0
 800142a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800142e:	2300      	movs	r3, #0
 8001430:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001434:	2340      	movs	r3, #64	; 0x40
 8001436:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800143a:	2340      	movs	r3, #64	; 0x40
 800143c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001440:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001444:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001448:	2340      	movs	r3, #64	; 0x40
 800144a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800144e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001452:	2103      	movs	r1, #3
 8001454:	4618      	mov	r0, r3
 8001456:	f013 fddf 	bl	8015018 <HAL_RCC_ClockConfig>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <SystemClock_Config+0x128>
  {
    Error_Handler();
 8001460:	f000 fc8e 	bl	8001d80 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART1
 8001464:	f107 0308 	add.w	r3, r7, #8
 8001468:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <SystemClock_Config+0x178>)
 800146a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800146c:	f107 0308 	add.w	r3, r7, #8
 8001470:	2200      	movs	r2, #0
 8001472:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001474:	f107 0308 	add.w	r3, r7, #8
 8001478:	2200      	movs	r2, #0
 800147a:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800147c:	f107 0308 	add.w	r3, r7, #8
 8001480:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001488:	f107 0308 	add.w	r3, r7, #8
 800148c:	4618      	mov	r0, r3
 800148e:	f014 f947 	bl	8015720 <HAL_RCCEx_PeriphCLKConfig>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <SystemClock_Config+0x160>
  {
    Error_Handler();
 8001498:	f000 fc72 	bl	8001d80 <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 800149c:	f013 f9d4 	bl	8014848 <HAL_PWREx_EnableUSBVoltageDetector>
}
 80014a0:	bf00      	nop
 80014a2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	58000400 	.word	0x58000400
 80014b0:	58024800 	.word	0x58024800
 80014b4:	00040003 	.word	0x00040003

080014b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b096      	sub	sp, #88	; 0x58
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	60da      	str	r2, [r3, #12]
 80014d8:	611a      	str	r2, [r3, #16]
 80014da:	615a      	str	r2, [r3, #20]
 80014dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	222c      	movs	r2, #44	; 0x2c
 80014e2:	2100      	movs	r1, #0
 80014e4:	4618      	mov	r0, r3
 80014e6:	f01c fe3f 	bl	801e168 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014ea:	4b3f      	ldr	r3, [pc, #252]	; (80015e8 <MX_TIM1_Init+0x130>)
 80014ec:	4a3f      	ldr	r2, [pc, #252]	; (80015ec <MX_TIM1_Init+0x134>)
 80014ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1080-1;
 80014f0:	4b3d      	ldr	r3, [pc, #244]	; (80015e8 <MX_TIM1_Init+0x130>)
 80014f2:	f240 4237 	movw	r2, #1079	; 0x437
 80014f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f8:	4b3b      	ldr	r3, [pc, #236]	; (80015e8 <MX_TIM1_Init+0x130>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024-1;
 80014fe:	4b3a      	ldr	r3, [pc, #232]	; (80015e8 <MX_TIM1_Init+0x130>)
 8001500:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001504:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001506:	4b38      	ldr	r3, [pc, #224]	; (80015e8 <MX_TIM1_Init+0x130>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800150c:	4b36      	ldr	r3, [pc, #216]	; (80015e8 <MX_TIM1_Init+0x130>)
 800150e:	2200      	movs	r2, #0
 8001510:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001512:	4b35      	ldr	r3, [pc, #212]	; (80015e8 <MX_TIM1_Init+0x130>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001518:	4833      	ldr	r0, [pc, #204]	; (80015e8 <MX_TIM1_Init+0x130>)
 800151a:	f015 fc47 	bl	8016dac <HAL_TIM_PWM_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8001524:	f000 fc2c 	bl	8001d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001528:	2300      	movs	r3, #0
 800152a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800152c:	2300      	movs	r3, #0
 800152e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001534:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001538:	4619      	mov	r1, r3
 800153a:	482b      	ldr	r0, [pc, #172]	; (80015e8 <MX_TIM1_Init+0x130>)
 800153c:	f016 faa8 	bl	8017a90 <HAL_TIMEx_MasterConfigSynchronization>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001546:	f000 fc1b 	bl	8001d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800154a:	2360      	movs	r3, #96	; 0x60
 800154c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001552:	2300      	movs	r3, #0
 8001554:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001556:	2300      	movs	r3, #0
 8001558:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800155a:	2300      	movs	r3, #0
 800155c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800155e:	2300      	movs	r3, #0
 8001560:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001566:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800156a:	2204      	movs	r2, #4
 800156c:	4619      	mov	r1, r3
 800156e:	481e      	ldr	r0, [pc, #120]	; (80015e8 <MX_TIM1_Init+0x130>)
 8001570:	f015 fdc0 	bl	80170f4 <HAL_TIM_PWM_ConfigChannel>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800157a:	f000 fc01 	bl	8001d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800157e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001582:	2208      	movs	r2, #8
 8001584:	4619      	mov	r1, r3
 8001586:	4818      	ldr	r0, [pc, #96]	; (80015e8 <MX_TIM1_Init+0x130>)
 8001588:	f015 fdb4 	bl	80170f4 <HAL_TIM_PWM_ConfigChannel>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8001592:	f000 fbf5 	bl	8001d80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001596:	2300      	movs	r3, #0
 8001598:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800159a:	2300      	movs	r3, #0
 800159c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	4619      	mov	r1, r3
 80015ca:	4807      	ldr	r0, [pc, #28]	; (80015e8 <MX_TIM1_Init+0x130>)
 80015cc:	f016 fae8 	bl	8017ba0 <HAL_TIMEx_ConfigBreakDeadTime>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 80015d6:	f000 fbd3 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015da:	4803      	ldr	r0, [pc, #12]	; (80015e8 <MX_TIM1_Init+0x130>)
 80015dc:	f000 fc80 	bl	8001ee0 <HAL_TIM_MspPostInit>

}
 80015e0:	bf00      	nop
 80015e2:	3758      	adds	r7, #88	; 0x58
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	24000550 	.word	0x24000550
 80015ec:	40010000 	.word	0x40010000

080015f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	; 0x28
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f6:	f107 031c 	add.w	r3, r7, #28
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001602:	463b      	mov	r3, r7
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
 8001610:	615a      	str	r2, [r3, #20]
 8001612:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001614:	4b22      	ldr	r3, [pc, #136]	; (80016a0 <MX_TIM2_Init+0xb0>)
 8001616:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800161a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1080-1;
 800161c:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <MX_TIM2_Init+0xb0>)
 800161e:	f240 4237 	movw	r2, #1079	; 0x437
 8001622:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001624:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <MX_TIM2_Init+0xb0>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024-1;
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <MX_TIM2_Init+0xb0>)
 800162c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001630:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001632:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <MX_TIM2_Init+0xb0>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001638:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <MX_TIM2_Init+0xb0>)
 800163a:	2200      	movs	r2, #0
 800163c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800163e:	4818      	ldr	r0, [pc, #96]	; (80016a0 <MX_TIM2_Init+0xb0>)
 8001640:	f015 fbb4 	bl	8016dac <HAL_TIM_PWM_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 800164a:	f000 fb99 	bl	8001d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001652:	2300      	movs	r3, #0
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001656:	f107 031c 	add.w	r3, r7, #28
 800165a:	4619      	mov	r1, r3
 800165c:	4810      	ldr	r0, [pc, #64]	; (80016a0 <MX_TIM2_Init+0xb0>)
 800165e:	f016 fa17 	bl	8017a90 <HAL_TIMEx_MasterConfigSynchronization>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001668:	f000 fb8a 	bl	8001d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800166c:	2360      	movs	r3, #96	; 0x60
 800166e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001674:	2300      	movs	r3, #0
 8001676:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001678:	2300      	movs	r3, #0
 800167a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800167c:	463b      	mov	r3, r7
 800167e:	2200      	movs	r2, #0
 8001680:	4619      	mov	r1, r3
 8001682:	4807      	ldr	r0, [pc, #28]	; (80016a0 <MX_TIM2_Init+0xb0>)
 8001684:	f015 fd36 	bl	80170f4 <HAL_TIM_PWM_ConfigChannel>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800168e:	f000 fb77 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001692:	4803      	ldr	r0, [pc, #12]	; (80016a0 <MX_TIM2_Init+0xb0>)
 8001694:	f000 fc24 	bl	8001ee0 <HAL_TIM_MspPostInit>

}
 8001698:	bf00      	nop
 800169a:	3728      	adds	r7, #40	; 0x28
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	24000590 	.word	0x24000590

080016a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	; 0x28
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016aa:	f107 031c 	add.w	r3, r7, #28
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016b6:	463b      	mov	r3, r7
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
 80016c4:	615a      	str	r2, [r3, #20]
 80016c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016c8:	4b2d      	ldr	r3, [pc, #180]	; (8001780 <MX_TIM3_Init+0xdc>)
 80016ca:	4a2e      	ldr	r2, [pc, #184]	; (8001784 <MX_TIM3_Init+0xe0>)
 80016cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1080-1;
 80016ce:	4b2c      	ldr	r3, [pc, #176]	; (8001780 <MX_TIM3_Init+0xdc>)
 80016d0:	f240 4237 	movw	r2, #1079	; 0x437
 80016d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d6:	4b2a      	ldr	r3, [pc, #168]	; (8001780 <MX_TIM3_Init+0xdc>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1024-1;
 80016dc:	4b28      	ldr	r3, [pc, #160]	; (8001780 <MX_TIM3_Init+0xdc>)
 80016de:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80016e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e4:	4b26      	ldr	r3, [pc, #152]	; (8001780 <MX_TIM3_Init+0xdc>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ea:	4b25      	ldr	r3, [pc, #148]	; (8001780 <MX_TIM3_Init+0xdc>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016f0:	4823      	ldr	r0, [pc, #140]	; (8001780 <MX_TIM3_Init+0xdc>)
 80016f2:	f015 fb5b 	bl	8016dac <HAL_TIM_PWM_Init>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 80016fc:	f000 fb40 	bl	8001d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001700:	2300      	movs	r3, #0
 8001702:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001704:	2300      	movs	r3, #0
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001708:	f107 031c 	add.w	r3, r7, #28
 800170c:	4619      	mov	r1, r3
 800170e:	481c      	ldr	r0, [pc, #112]	; (8001780 <MX_TIM3_Init+0xdc>)
 8001710:	f016 f9be 	bl	8017a90 <HAL_TIMEx_MasterConfigSynchronization>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800171a:	f000 fb31 	bl	8001d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800171e:	2360      	movs	r3, #96	; 0x60
 8001720:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800172e:	463b      	mov	r3, r7
 8001730:	2200      	movs	r2, #0
 8001732:	4619      	mov	r1, r3
 8001734:	4812      	ldr	r0, [pc, #72]	; (8001780 <MX_TIM3_Init+0xdc>)
 8001736:	f015 fcdd 	bl	80170f4 <HAL_TIM_PWM_ConfigChannel>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001740:	f000 fb1e 	bl	8001d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001744:	463b      	mov	r3, r7
 8001746:	2204      	movs	r2, #4
 8001748:	4619      	mov	r1, r3
 800174a:	480d      	ldr	r0, [pc, #52]	; (8001780 <MX_TIM3_Init+0xdc>)
 800174c:	f015 fcd2 	bl	80170f4 <HAL_TIM_PWM_ConfigChannel>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8001756:	f000 fb13 	bl	8001d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800175a:	463b      	mov	r3, r7
 800175c:	220c      	movs	r2, #12
 800175e:	4619      	mov	r1, r3
 8001760:	4807      	ldr	r0, [pc, #28]	; (8001780 <MX_TIM3_Init+0xdc>)
 8001762:	f015 fcc7 	bl	80170f4 <HAL_TIM_PWM_ConfigChannel>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800176c:	f000 fb08 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001770:	4803      	ldr	r0, [pc, #12]	; (8001780 <MX_TIM3_Init+0xdc>)
 8001772:	f000 fbb5 	bl	8001ee0 <HAL_TIM_MspPostInit>

}
 8001776:	bf00      	nop
 8001778:	3728      	adds	r7, #40	; 0x28
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	2400046c 	.word	0x2400046c
 8001784:	40000400 	.word	0x40000400

08001788 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08a      	sub	sp, #40	; 0x28
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800178e:	f107 031c 	add.w	r3, r7, #28
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800179a:	463b      	mov	r3, r7
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
 80017a8:	615a      	str	r2, [r3, #20]
 80017aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80017ac:	4b22      	ldr	r3, [pc, #136]	; (8001838 <MX_TIM5_Init+0xb0>)
 80017ae:	4a23      	ldr	r2, [pc, #140]	; (800183c <MX_TIM5_Init+0xb4>)
 80017b0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1080-1;
 80017b2:	4b21      	ldr	r3, [pc, #132]	; (8001838 <MX_TIM5_Init+0xb0>)
 80017b4:	f240 4237 	movw	r2, #1079	; 0x437
 80017b8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ba:	4b1f      	ldr	r3, [pc, #124]	; (8001838 <MX_TIM5_Init+0xb0>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024-1;
 80017c0:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <MX_TIM5_Init+0xb0>)
 80017c2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80017c6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c8:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <MX_TIM5_Init+0xb0>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ce:	4b1a      	ldr	r3, [pc, #104]	; (8001838 <MX_TIM5_Init+0xb0>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80017d4:	4818      	ldr	r0, [pc, #96]	; (8001838 <MX_TIM5_Init+0xb0>)
 80017d6:	f015 fae9 	bl	8016dac <HAL_TIM_PWM_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM5_Init+0x5c>
  {
    Error_Handler();
 80017e0:	f000 face 	bl	8001d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80017ec:	f107 031c 	add.w	r3, r7, #28
 80017f0:	4619      	mov	r1, r3
 80017f2:	4811      	ldr	r0, [pc, #68]	; (8001838 <MX_TIM5_Init+0xb0>)
 80017f4:	f016 f94c 	bl	8017a90 <HAL_TIMEx_MasterConfigSynchronization>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 80017fe:	f000 fabf 	bl	8001d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001802:	2360      	movs	r3, #96	; 0x60
 8001804:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800180a:	2300      	movs	r3, #0
 800180c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800180e:	2300      	movs	r3, #0
 8001810:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001812:	463b      	mov	r3, r7
 8001814:	220c      	movs	r2, #12
 8001816:	4619      	mov	r1, r3
 8001818:	4807      	ldr	r0, [pc, #28]	; (8001838 <MX_TIM5_Init+0xb0>)
 800181a:	f015 fc6b 	bl	80170f4 <HAL_TIM_PWM_ConfigChannel>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8001824:	f000 faac 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001828:	4803      	ldr	r0, [pc, #12]	; (8001838 <MX_TIM5_Init+0xb0>)
 800182a:	f000 fb59 	bl	8001ee0 <HAL_TIM_MspPostInit>

}
 800182e:	bf00      	nop
 8001830:	3728      	adds	r7, #40	; 0x28
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	2400042c 	.word	0x2400042c
 800183c:	40000c00 	.word	0x40000c00

08001840 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001850:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <MX_TIM7_Init+0x78>)
 8001852:	4a1a      	ldr	r2, [pc, #104]	; (80018bc <MX_TIM7_Init+0x7c>)
 8001854:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1080-1;
 8001856:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <MX_TIM7_Init+0x78>)
 8001858:	f240 4237 	movw	r2, #1079	; 0x437
 800185c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185e:	4b16      	ldr	r3, [pc, #88]	; (80018b8 <MX_TIM7_Init+0x78>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8001864:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <MX_TIM7_Init+0x78>)
 8001866:	f240 32e7 	movw	r2, #999	; 0x3e7
 800186a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <MX_TIM7_Init+0x78>)
 800186e:	2280      	movs	r2, #128	; 0x80
 8001870:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001872:	4811      	ldr	r0, [pc, #68]	; (80018b8 <MX_TIM7_Init+0x78>)
 8001874:	f015 fa44 	bl	8016d00 <HAL_TIM_Base_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800187e:	f000 fa7f 	bl	8001d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001882:	2300      	movs	r3, #0
 8001884:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800188a:	1d3b      	adds	r3, r7, #4
 800188c:	4619      	mov	r1, r3
 800188e:	480a      	ldr	r0, [pc, #40]	; (80018b8 <MX_TIM7_Init+0x78>)
 8001890:	f016 f8fe 	bl	8017a90 <HAL_TIMEx_MasterConfigSynchronization>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800189a:	f000 fa71 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  /*##-2- Start the TIM Base generation in interrupt mode ####################*/
  if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK)
 800189e:	4806      	ldr	r0, [pc, #24]	; (80018b8 <MX_TIM7_Init+0x78>)
 80018a0:	f015 fa5a 	bl	8016d58 <HAL_TIM_Base_Start_IT>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM7_Init+0x6e>
  {
    /* Starting Error */
    Error_Handler();
 80018aa:	f000 fa69 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE END TIM7_Init 2 */

}
 80018ae:	bf00      	nop
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	240005d0 	.word	0x240005d0
 80018bc:	40001400 	.word	0x40001400

080018c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018c4:	4b22      	ldr	r3, [pc, #136]	; (8001950 <MX_USART1_UART_Init+0x90>)
 80018c6:	4a23      	ldr	r2, [pc, #140]	; (8001954 <MX_USART1_UART_Init+0x94>)
 80018c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80018ca:	4b21      	ldr	r3, [pc, #132]	; (8001950 <MX_USART1_UART_Init+0x90>)
 80018cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018d2:	4b1f      	ldr	r3, [pc, #124]	; (8001950 <MX_USART1_UART_Init+0x90>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018d8:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <MX_USART1_UART_Init+0x90>)
 80018da:	2200      	movs	r2, #0
 80018dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018de:	4b1c      	ldr	r3, [pc, #112]	; (8001950 <MX_USART1_UART_Init+0x90>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018e4:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <MX_USART1_UART_Init+0x90>)
 80018e6:	220c      	movs	r2, #12
 80018e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ea:	4b19      	ldr	r3, [pc, #100]	; (8001950 <MX_USART1_UART_Init+0x90>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f0:	4b17      	ldr	r3, [pc, #92]	; (8001950 <MX_USART1_UART_Init+0x90>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018f6:	4b16      	ldr	r3, [pc, #88]	; (8001950 <MX_USART1_UART_Init+0x90>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018fc:	4b14      	ldr	r3, [pc, #80]	; (8001950 <MX_USART1_UART_Init+0x90>)
 80018fe:	2200      	movs	r2, #0
 8001900:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001902:	4b13      	ldr	r3, [pc, #76]	; (8001950 <MX_USART1_UART_Init+0x90>)
 8001904:	2200      	movs	r2, #0
 8001906:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001908:	4811      	ldr	r0, [pc, #68]	; (8001950 <MX_USART1_UART_Init+0x90>)
 800190a:	f016 f9e5 	bl	8017cd8 <HAL_UART_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001914:	f000 fa34 	bl	8001d80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001918:	2100      	movs	r1, #0
 800191a:	480d      	ldr	r0, [pc, #52]	; (8001950 <MX_USART1_UART_Init+0x90>)
 800191c:	f018 ff53 	bl	801a7c6 <HAL_UARTEx_SetTxFifoThreshold>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001926:	f000 fa2b 	bl	8001d80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800192a:	2100      	movs	r1, #0
 800192c:	4808      	ldr	r0, [pc, #32]	; (8001950 <MX_USART1_UART_Init+0x90>)
 800192e:	f018 ff88 	bl	801a842 <HAL_UARTEx_SetRxFifoThreshold>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001938:	f000 fa22 	bl	8001d80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800193c:	4804      	ldr	r0, [pc, #16]	; (8001950 <MX_USART1_UART_Init+0x90>)
 800193e:	f018 ff09 	bl	801a754 <HAL_UARTEx_DisableFifoMode>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001948:	f000 fa1a 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}
 8001950:	240004c4 	.word	0x240004c4
 8001954:	40011000 	.word	0x40011000

08001958 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800195c:	4b22      	ldr	r3, [pc, #136]	; (80019e8 <MX_USART3_UART_Init+0x90>)
 800195e:	4a23      	ldr	r2, [pc, #140]	; (80019ec <MX_USART3_UART_Init+0x94>)
 8001960:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001962:	4b21      	ldr	r3, [pc, #132]	; (80019e8 <MX_USART3_UART_Init+0x90>)
 8001964:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001968:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800196a:	4b1f      	ldr	r3, [pc, #124]	; (80019e8 <MX_USART3_UART_Init+0x90>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001970:	4b1d      	ldr	r3, [pc, #116]	; (80019e8 <MX_USART3_UART_Init+0x90>)
 8001972:	2200      	movs	r2, #0
 8001974:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001976:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <MX_USART3_UART_Init+0x90>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800197c:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <MX_USART3_UART_Init+0x90>)
 800197e:	220c      	movs	r2, #12
 8001980:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001982:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <MX_USART3_UART_Init+0x90>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001988:	4b17      	ldr	r3, [pc, #92]	; (80019e8 <MX_USART3_UART_Init+0x90>)
 800198a:	2200      	movs	r2, #0
 800198c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800198e:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <MX_USART3_UART_Init+0x90>)
 8001990:	2200      	movs	r2, #0
 8001992:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001994:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <MX_USART3_UART_Init+0x90>)
 8001996:	2200      	movs	r2, #0
 8001998:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800199a:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <MX_USART3_UART_Init+0x90>)
 800199c:	2200      	movs	r2, #0
 800199e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019a0:	4811      	ldr	r0, [pc, #68]	; (80019e8 <MX_USART3_UART_Init+0x90>)
 80019a2:	f016 f999 	bl	8017cd8 <HAL_UART_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80019ac:	f000 f9e8 	bl	8001d80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019b0:	2100      	movs	r1, #0
 80019b2:	480d      	ldr	r0, [pc, #52]	; (80019e8 <MX_USART3_UART_Init+0x90>)
 80019b4:	f018 ff07 	bl	801a7c6 <HAL_UARTEx_SetTxFifoThreshold>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80019be:	f000 f9df 	bl	8001d80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019c2:	2100      	movs	r1, #0
 80019c4:	4808      	ldr	r0, [pc, #32]	; (80019e8 <MX_USART3_UART_Init+0x90>)
 80019c6:	f018 ff3c 	bl	801a842 <HAL_UARTEx_SetRxFifoThreshold>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80019d0:	f000 f9d6 	bl	8001d80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80019d4:	4804      	ldr	r0, [pc, #16]	; (80019e8 <MX_USART3_UART_Init+0x90>)
 80019d6:	f018 febd 	bl	801a754 <HAL_UARTEx_DisableFifoMode>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80019e0:	f000 f9ce 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	24000310 	.word	0x24000310
 80019ec:	40004800 	.word	0x40004800

080019f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08e      	sub	sp, #56	; 0x38
 80019f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	609a      	str	r2, [r3, #8]
 8001a02:	60da      	str	r2, [r3, #12]
 8001a04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a06:	4bbe      	ldr	r3, [pc, #760]	; (8001d00 <MX_GPIO_Init+0x310>)
 8001a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a0c:	4abc      	ldr	r2, [pc, #752]	; (8001d00 <MX_GPIO_Init+0x310>)
 8001a0e:	f043 0310 	orr.w	r3, r3, #16
 8001a12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a16:	4bba      	ldr	r3, [pc, #744]	; (8001d00 <MX_GPIO_Init+0x310>)
 8001a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a1c:	f003 0310 	and.w	r3, r3, #16
 8001a20:	623b      	str	r3, [r7, #32]
 8001a22:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a24:	4bb6      	ldr	r3, [pc, #728]	; (8001d00 <MX_GPIO_Init+0x310>)
 8001a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a2a:	4ab5      	ldr	r2, [pc, #724]	; (8001d00 <MX_GPIO_Init+0x310>)
 8001a2c:	f043 0304 	orr.w	r3, r3, #4
 8001a30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a34:	4bb2      	ldr	r3, [pc, #712]	; (8001d00 <MX_GPIO_Init+0x310>)
 8001a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a3a:	f003 0304 	and.w	r3, r3, #4
 8001a3e:	61fb      	str	r3, [r7, #28]
 8001a40:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a42:	4baf      	ldr	r3, [pc, #700]	; (8001d00 <MX_GPIO_Init+0x310>)
 8001a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a48:	4aad      	ldr	r2, [pc, #692]	; (8001d00 <MX_GPIO_Init+0x310>)
 8001a4a:	f043 0320 	orr.w	r3, r3, #32
 8001a4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a52:	4bab      	ldr	r3, [pc, #684]	; (8001d00 <MX_GPIO_Init+0x310>)
 8001a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a58:	f003 0320 	and.w	r3, r3, #32
 8001a5c:	61bb      	str	r3, [r7, #24]
 8001a5e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a60:	4ba7      	ldr	r3, [pc, #668]	; (8001d00 <MX_GPIO_Init+0x310>)
 8001a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a66:	4aa6      	ldr	r2, [pc, #664]	; (8001d00 <MX_GPIO_Init+0x310>)
 8001a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a70:	4ba3      	ldr	r3, [pc, #652]	; (8001d00 <MX_GPIO_Init+0x310>)
 8001a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7e:	4ba0      	ldr	r3, [pc, #640]	; (8001d00 <MX_GPIO_Init+0x310>)
 8001a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a84:	4a9e      	ldr	r2, [pc, #632]	; (8001d00 <MX_GPIO_Init+0x310>)
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a8e:	4b9c      	ldr	r3, [pc, #624]	; (8001d00 <MX_GPIO_Init+0x310>)
 8001a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9c:	4b98      	ldr	r3, [pc, #608]	; (8001d00 <MX_GPIO_Init+0x310>)
 8001a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa2:	4a97      	ldr	r2, [pc, #604]	; (8001d00 <MX_GPIO_Init+0x310>)
 8001aa4:	f043 0302 	orr.w	r3, r3, #2
 8001aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aac:	4b94      	ldr	r3, [pc, #592]	; (8001d00 <MX_GPIO_Init+0x310>)
 8001aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aba:	4b91      	ldr	r3, [pc, #580]	; (8001d00 <MX_GPIO_Init+0x310>)
 8001abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac0:	4a8f      	ldr	r2, [pc, #572]	; (8001d00 <MX_GPIO_Init+0x310>)
 8001ac2:	f043 0308 	orr.w	r3, r3, #8
 8001ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aca:	4b8d      	ldr	r3, [pc, #564]	; (8001d00 <MX_GPIO_Init+0x310>)
 8001acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad0:	f003 0308 	and.w	r3, r3, #8
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ad8:	4b89      	ldr	r3, [pc, #548]	; (8001d00 <MX_GPIO_Init+0x310>)
 8001ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ade:	4a88      	ldr	r2, [pc, #544]	; (8001d00 <MX_GPIO_Init+0x310>)
 8001ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ae4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ae8:	4b85      	ldr	r3, [pc, #532]	; (8001d00 <MX_GPIO_Init+0x310>)
 8001aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001af6:	2200      	movs	r2, #0
 8001af8:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001afc:	4881      	ldr	r0, [pc, #516]	; (8001d04 <MX_GPIO_Init+0x314>)
 8001afe:	f011 fc5b 	bl	80133b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2140      	movs	r1, #64	; 0x40
 8001b06:	4880      	ldr	r0, [pc, #512]	; (8001d08 <MX_GPIO_Init+0x318>)
 8001b08:	f011 fc56 	bl	80133b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 8001b0c:	2314      	movs	r3, #20
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b10:	2300      	movs	r3, #0
 8001b12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	487b      	ldr	r0, [pc, #492]	; (8001d0c <MX_GPIO_Init+0x31c>)
 8001b20:	f011 fa82 	bl	8013028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b24:	2308      	movs	r3, #8
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001b28:	4b79      	ldr	r3, [pc, #484]	; (8001d10 <MX_GPIO_Init+0x320>)
 8001b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b34:	4619      	mov	r1, r3
 8001b36:	4875      	ldr	r0, [pc, #468]	; (8001d0c <MX_GPIO_Init+0x31c>)
 8001b38:	f011 fa76 	bl	8013028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b42:	2300      	movs	r3, #0
 8001b44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b46:	2302      	movs	r3, #2
 8001b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4870      	ldr	r0, [pc, #448]	; (8001d14 <MX_GPIO_Init+0x324>)
 8001b52:	f011 fa69 	bl	8013028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b56:	2380      	movs	r3, #128	; 0x80
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b66:	4619      	mov	r1, r3
 8001b68:	486b      	ldr	r0, [pc, #428]	; (8001d18 <MX_GPIO_Init+0x328>)
 8001b6a:	f011 fa5d 	bl	8013028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC7 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_10;
 8001b6e:	f240 4382 	movw	r3, #1154	; 0x482
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b74:	2300      	movs	r3, #0
 8001b76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b80:	4619      	mov	r1, r3
 8001b82:	4864      	ldr	r0, [pc, #400]	; (8001d14 <MX_GPIO_Init+0x324>)
 8001b84:	f011 fa50 	bl	8013028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001b8c:	4b60      	ldr	r3, [pc, #384]	; (8001d10 <MX_GPIO_Init+0x320>)
 8001b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b90:	2301      	movs	r3, #1
 8001b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4860      	ldr	r0, [pc, #384]	; (8001d1c <MX_GPIO_Init+0x32c>)
 8001b9c:	f011 fa44 	bl	8013028 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin;
 8001ba0:	2304      	movs	r3, #4
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bac:	2300      	movs	r3, #0
 8001bae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bb0:	230b      	movs	r3, #11
 8001bb2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_MDIO_GPIO_Port, &GPIO_InitStruct);
 8001bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4858      	ldr	r0, [pc, #352]	; (8001d1c <MX_GPIO_Init+0x32c>)
 8001bbc:	f011 fa34 	bl	8013028 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001bc0:	2330      	movs	r3, #48	; 0x30
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bd0:	230b      	movs	r3, #11
 8001bd2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd8:	4619      	mov	r1, r3
 8001bda:	484e      	ldr	r0, [pc, #312]	; (8001d14 <MX_GPIO_Init+0x324>)
 8001bdc:	f011 fa24 	bl	8013028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001be0:	2304      	movs	r3, #4
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001be4:	4b4a      	ldr	r3, [pc, #296]	; (8001d10 <MX_GPIO_Init+0x320>)
 8001be6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001be8:	2301      	movs	r3, #1
 8001bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4844      	ldr	r0, [pc, #272]	; (8001d04 <MX_GPIO_Init+0x314>)
 8001bf4:	f011 fa18 	bl	8013028 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001bf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c06:	2300      	movs	r3, #0
 8001c08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c0a:	230b      	movs	r3, #11
 8001c0c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c12:	4619      	mov	r1, r3
 8001c14:	483b      	ldr	r0, [pc, #236]	; (8001d04 <MX_GPIO_Init+0x314>)
 8001c16:	f011 fa07 	bl	8013028 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001c1a:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c20:	2301      	movs	r3, #1
 8001c22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c30:	4619      	mov	r1, r3
 8001c32:	4834      	ldr	r0, [pc, #208]	; (8001d04 <MX_GPIO_Init+0x314>)
 8001c34:	f011 f9f8 	bl	8013028 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001c38:	2340      	movs	r3, #64	; 0x40
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c44:	2300      	movs	r3, #0
 8001c46:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	482e      	ldr	r0, [pc, #184]	; (8001d08 <MX_GPIO_Init+0x318>)
 8001c50:	f011 f9ea 	bl	8013028 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001c54:	2380      	movs	r3, #128	; 0x80
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c64:	4619      	mov	r1, r3
 8001c66:	4828      	ldr	r0, [pc, #160]	; (8001d08 <MX_GPIO_Init+0x318>)
 8001c68:	f011 f9de 	bl	8013028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001c6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c72:	2300      	movs	r3, #0
 8001c74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4824      	ldr	r0, [pc, #144]	; (8001d14 <MX_GPIO_Init+0x324>)
 8001c82:	f011 f9d1 	bl	8013028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c86:	2308      	movs	r3, #8
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c96:	4619      	mov	r1, r3
 8001c98:	4821      	ldr	r0, [pc, #132]	; (8001d20 <MX_GPIO_Init+0x330>)
 8001c9a:	f011 f9c5 	bl	8013028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8001c9e:	23d0      	movs	r3, #208	; 0xd0
 8001ca0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001ca2:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <MX_GPIO_Init+0x320>)
 8001ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cae:	4619      	mov	r1, r3
 8001cb0:	481b      	ldr	r0, [pc, #108]	; (8001d20 <MX_GPIO_Init+0x330>)
 8001cb2:	f011 f9b9 	bl	8013028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001cb6:	2320      	movs	r3, #32
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4815      	ldr	r0, [pc, #84]	; (8001d20 <MX_GPIO_Init+0x330>)
 8001cca:	f011 f9ad 	bl	8013028 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001cce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ce0:	230b      	movs	r3, #11
 8001ce2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4807      	ldr	r0, [pc, #28]	; (8001d08 <MX_GPIO_Init+0x318>)
 8001cec:	f011 f99c 	bl	8013028 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	2006      	movs	r0, #6
 8001cf6:	f010 ff1e 	bl	8012b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001cfa:	2006      	movs	r0, #6
 8001cfc:	e012      	b.n	8001d24 <MX_GPIO_Init+0x334>
 8001cfe:	bf00      	nop
 8001d00:	58024400 	.word	0x58024400
 8001d04:	58020400 	.word	0x58020400
 8001d08:	58021800 	.word	0x58021800
 8001d0c:	58021000 	.word	0x58021000
 8001d10:	11310000 	.word	0x11310000
 8001d14:	58020800 	.word	0x58020800
 8001d18:	58021400 	.word	0x58021400
 8001d1c:	58020000 	.word	0x58020000
 8001d20:	58020c00 	.word	0x58020c00
 8001d24:	f010 ff21 	bl	8012b6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	2007      	movs	r0, #7
 8001d2e:	f010 ff02 	bl	8012b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001d32:	2007      	movs	r0, #7
 8001d34:	f010 ff19 	bl	8012b6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	2008      	movs	r0, #8
 8001d3e:	f010 fefa 	bl	8012b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001d42:	2008      	movs	r0, #8
 8001d44:	f010 ff11 	bl	8012b6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	2009      	movs	r0, #9
 8001d4e:	f010 fef2 	bl	8012b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001d52:	2009      	movs	r0, #9
 8001d54:	f010 ff09 	bl	8012b6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	200a      	movs	r0, #10
 8001d5e:	f010 feea 	bl	8012b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001d62:	200a      	movs	r0, #10
 8001d64:	f010 ff01 	bl	8012b6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	2017      	movs	r0, #23
 8001d6e:	f010 fee2 	bl	8012b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d72:	2017      	movs	r0, #23
 8001d74:	f010 fef9 	bl	8012b6a <HAL_NVIC_EnableIRQ>

}
 8001d78:	bf00      	nop
 8001d7a:	3738      	adds	r7, #56	; 0x38
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d96:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <HAL_MspInit+0x30>)
 8001d98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d9c:	4a08      	ldr	r2, [pc, #32]	; (8001dc0 <HAL_MspInit+0x30>)
 8001d9e:	f043 0302 	orr.w	r3, r3, #2
 8001da2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001da6:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <HAL_MspInit+0x30>)
 8001da8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	607b      	str	r3, [r7, #4]
 8001db2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	58024400 	.word	0x58024400

08001dc4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b087      	sub	sp, #28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a2b      	ldr	r2, [pc, #172]	; (8001e80 <HAL_TIM_PWM_MspInit+0xbc>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d10f      	bne.n	8001df6 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dd6:	4b2b      	ldr	r3, [pc, #172]	; (8001e84 <HAL_TIM_PWM_MspInit+0xc0>)
 8001dd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ddc:	4a29      	ldr	r2, [pc, #164]	; (8001e84 <HAL_TIM_PWM_MspInit+0xc0>)
 8001dde:	f043 0301 	orr.w	r3, r3, #1
 8001de2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001de6:	4b27      	ldr	r3, [pc, #156]	; (8001e84 <HAL_TIM_PWM_MspInit+0xc0>)
 8001de8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001df4:	e03d      	b.n	8001e72 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM2)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dfe:	d10f      	bne.n	8001e20 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e00:	4b20      	ldr	r3, [pc, #128]	; (8001e84 <HAL_TIM_PWM_MspInit+0xc0>)
 8001e02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e06:	4a1f      	ldr	r2, [pc, #124]	; (8001e84 <HAL_TIM_PWM_MspInit+0xc0>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e10:	4b1c      	ldr	r3, [pc, #112]	; (8001e84 <HAL_TIM_PWM_MspInit+0xc0>)
 8001e12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	693b      	ldr	r3, [r7, #16]
}
 8001e1e:	e028      	b.n	8001e72 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM3)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a18      	ldr	r2, [pc, #96]	; (8001e88 <HAL_TIM_PWM_MspInit+0xc4>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d10f      	bne.n	8001e4a <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e2a:	4b16      	ldr	r3, [pc, #88]	; (8001e84 <HAL_TIM_PWM_MspInit+0xc0>)
 8001e2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e30:	4a14      	ldr	r2, [pc, #80]	; (8001e84 <HAL_TIM_PWM_MspInit+0xc0>)
 8001e32:	f043 0302 	orr.w	r3, r3, #2
 8001e36:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e3a:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <HAL_TIM_PWM_MspInit+0xc0>)
 8001e3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	68fb      	ldr	r3, [r7, #12]
}
 8001e48:	e013      	b.n	8001e72 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM5)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a0f      	ldr	r2, [pc, #60]	; (8001e8c <HAL_TIM_PWM_MspInit+0xc8>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d10e      	bne.n	8001e72 <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e54:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <HAL_TIM_PWM_MspInit+0xc0>)
 8001e56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e5a:	4a0a      	ldr	r2, [pc, #40]	; (8001e84 <HAL_TIM_PWM_MspInit+0xc0>)
 8001e5c:	f043 0308 	orr.w	r3, r3, #8
 8001e60:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e64:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <HAL_TIM_PWM_MspInit+0xc0>)
 8001e66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	68bb      	ldr	r3, [r7, #8]
}
 8001e72:	bf00      	nop
 8001e74:	371c      	adds	r7, #28
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40010000 	.word	0x40010000
 8001e84:	58024400 	.word	0x58024400
 8001e88:	40000400 	.word	0x40000400
 8001e8c:	40000c00 	.word	0x40000c00

08001e90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a0e      	ldr	r2, [pc, #56]	; (8001ed8 <HAL_TIM_Base_MspInit+0x48>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d116      	bne.n	8001ed0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <HAL_TIM_Base_MspInit+0x4c>)
 8001ea4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ea8:	4a0c      	ldr	r2, [pc, #48]	; (8001edc <HAL_TIM_Base_MspInit+0x4c>)
 8001eaa:	f043 0320 	orr.w	r3, r3, #32
 8001eae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <HAL_TIM_Base_MspInit+0x4c>)
 8001eb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001eb8:	f003 0320 	and.w	r3, r3, #32
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	2037      	movs	r0, #55	; 0x37
 8001ec6:	f010 fe36 	bl	8012b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001eca:	2037      	movs	r0, #55	; 0x37
 8001ecc:	f010 fe4d 	bl	8012b6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001ed0:	bf00      	nop
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40001400 	.word	0x40001400
 8001edc:	58024400 	.word	0x58024400

08001ee0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08c      	sub	sp, #48	; 0x30
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee8:	f107 031c 	add.w	r3, r7, #28
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a5a      	ldr	r2, [pc, #360]	; (8002068 <HAL_TIM_MspPostInit+0x188>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d120      	bne.n	8001f44 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f02:	4b5a      	ldr	r3, [pc, #360]	; (800206c <HAL_TIM_MspPostInit+0x18c>)
 8001f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f08:	4a58      	ldr	r2, [pc, #352]	; (800206c <HAL_TIM_MspPostInit+0x18c>)
 8001f0a:	f043 0310 	orr.w	r3, r3, #16
 8001f0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f12:	4b56      	ldr	r3, [pc, #344]	; (800206c <HAL_TIM_MspPostInit+0x18c>)
 8001f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f18:	f003 0310 	and.w	r3, r3, #16
 8001f1c:	61bb      	str	r3, [r7, #24]
 8001f1e:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001f20:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f26:	2302      	movs	r3, #2
 8001f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f32:	2301      	movs	r3, #1
 8001f34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f36:	f107 031c 	add.w	r3, r7, #28
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	484c      	ldr	r0, [pc, #304]	; (8002070 <HAL_TIM_MspPostInit+0x190>)
 8001f3e:	f011 f873 	bl	8013028 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001f42:	e08c      	b.n	800205e <HAL_TIM_MspPostInit+0x17e>
  else if(htim->Instance==TIM2)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f4c:	d11f      	bne.n	8001f8e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4e:	4b47      	ldr	r3, [pc, #284]	; (800206c <HAL_TIM_MspPostInit+0x18c>)
 8001f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f54:	4a45      	ldr	r2, [pc, #276]	; (800206c <HAL_TIM_MspPostInit+0x18c>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f5e:	4b43      	ldr	r3, [pc, #268]	; (800206c <HAL_TIM_MspPostInit+0x18c>)
 8001f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	617b      	str	r3, [r7, #20]
 8001f6a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f6c:	2320      	movs	r3, #32
 8001f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f70:	2302      	movs	r3, #2
 8001f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f80:	f107 031c 	add.w	r3, r7, #28
 8001f84:	4619      	mov	r1, r3
 8001f86:	483b      	ldr	r0, [pc, #236]	; (8002074 <HAL_TIM_MspPostInit+0x194>)
 8001f88:	f011 f84e 	bl	8013028 <HAL_GPIO_Init>
}
 8001f8c:	e067      	b.n	800205e <HAL_TIM_MspPostInit+0x17e>
  else if(htim->Instance==TIM3)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a39      	ldr	r2, [pc, #228]	; (8002078 <HAL_TIM_MspPostInit+0x198>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d13e      	bne.n	8002016 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f98:	4b34      	ldr	r3, [pc, #208]	; (800206c <HAL_TIM_MspPostInit+0x18c>)
 8001f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f9e:	4a33      	ldr	r2, [pc, #204]	; (800206c <HAL_TIM_MspPostInit+0x18c>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fa8:	4b30      	ldr	r3, [pc, #192]	; (800206c <HAL_TIM_MspPostInit+0x18c>)
 8001faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb6:	4b2d      	ldr	r3, [pc, #180]	; (800206c <HAL_TIM_MspPostInit+0x18c>)
 8001fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fbc:	4a2b      	ldr	r2, [pc, #172]	; (800206c <HAL_TIM_MspPostInit+0x18c>)
 8001fbe:	f043 0302 	orr.w	r3, r3, #2
 8001fc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fc6:	4b29      	ldr	r3, [pc, #164]	; (800206c <HAL_TIM_MspPostInit+0x18c>)
 8001fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fd4:	23c0      	movs	r3, #192	; 0xc0
 8001fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe8:	f107 031c 	add.w	r3, r7, #28
 8001fec:	4619      	mov	r1, r3
 8001fee:	4821      	ldr	r0, [pc, #132]	; (8002074 <HAL_TIM_MspPostInit+0x194>)
 8001ff0:	f011 f81a 	bl	8013028 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002000:	2300      	movs	r3, #0
 8002002:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002004:	2302      	movs	r3, #2
 8002006:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002008:	f107 031c 	add.w	r3, r7, #28
 800200c:	4619      	mov	r1, r3
 800200e:	481b      	ldr	r0, [pc, #108]	; (800207c <HAL_TIM_MspPostInit+0x19c>)
 8002010:	f011 f80a 	bl	8013028 <HAL_GPIO_Init>
}
 8002014:	e023      	b.n	800205e <HAL_TIM_MspPostInit+0x17e>
  else if(htim->Instance==TIM5)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a19      	ldr	r2, [pc, #100]	; (8002080 <HAL_TIM_MspPostInit+0x1a0>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d11e      	bne.n	800205e <HAL_TIM_MspPostInit+0x17e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002020:	4b12      	ldr	r3, [pc, #72]	; (800206c <HAL_TIM_MspPostInit+0x18c>)
 8002022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002026:	4a11      	ldr	r2, [pc, #68]	; (800206c <HAL_TIM_MspPostInit+0x18c>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002030:	4b0e      	ldr	r3, [pc, #56]	; (800206c <HAL_TIM_MspPostInit+0x18c>)
 8002032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800203e:	2308      	movs	r3, #8
 8002040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002042:	2302      	movs	r3, #2
 8002044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204a:	2300      	movs	r3, #0
 800204c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800204e:	2302      	movs	r3, #2
 8002050:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002052:	f107 031c 	add.w	r3, r7, #28
 8002056:	4619      	mov	r1, r3
 8002058:	4806      	ldr	r0, [pc, #24]	; (8002074 <HAL_TIM_MspPostInit+0x194>)
 800205a:	f010 ffe5 	bl	8013028 <HAL_GPIO_Init>
}
 800205e:	bf00      	nop
 8002060:	3730      	adds	r7, #48	; 0x30
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40010000 	.word	0x40010000
 800206c:	58024400 	.word	0x58024400
 8002070:	58021000 	.word	0x58021000
 8002074:	58020000 	.word	0x58020000
 8002078:	40000400 	.word	0x40000400
 800207c:	58020400 	.word	0x58020400
 8002080:	40000c00 	.word	0x40000c00

08002084 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08c      	sub	sp, #48	; 0x30
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208c:	f107 031c 	add.w	r3, r7, #28
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a41      	ldr	r2, [pc, #260]	; (80021a8 <HAL_UART_MspInit+0x124>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d13f      	bne.n	8002126 <HAL_UART_MspInit+0xa2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020a6:	4b41      	ldr	r3, [pc, #260]	; (80021ac <HAL_UART_MspInit+0x128>)
 80020a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020ac:	4a3f      	ldr	r2, [pc, #252]	; (80021ac <HAL_UART_MspInit+0x128>)
 80020ae:	f043 0310 	orr.w	r3, r3, #16
 80020b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80020b6:	4b3d      	ldr	r3, [pc, #244]	; (80021ac <HAL_UART_MspInit+0x128>)
 80020b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020bc:	f003 0310 	and.w	r3, r3, #16
 80020c0:	61bb      	str	r3, [r7, #24]
 80020c2:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c4:	4b39      	ldr	r3, [pc, #228]	; (80021ac <HAL_UART_MspInit+0x128>)
 80020c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ca:	4a38      	ldr	r2, [pc, #224]	; (80021ac <HAL_UART_MspInit+0x128>)
 80020cc:	f043 0302 	orr.w	r3, r3, #2
 80020d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020d4:	4b35      	ldr	r3, [pc, #212]	; (80021ac <HAL_UART_MspInit+0x128>)
 80020d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80020e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	2302      	movs	r3, #2
 80020ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f0:	2300      	movs	r3, #0
 80020f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80020f4:	2304      	movs	r3, #4
 80020f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f8:	f107 031c 	add.w	r3, r7, #28
 80020fc:	4619      	mov	r1, r3
 80020fe:	482c      	ldr	r0, [pc, #176]	; (80021b0 <HAL_UART_MspInit+0x12c>)
 8002100:	f010 ff92 	bl	8013028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002104:	2340      	movs	r3, #64	; 0x40
 8002106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002108:	2302      	movs	r3, #2
 800210a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002110:	2300      	movs	r3, #0
 8002112:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002114:	2307      	movs	r3, #7
 8002116:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002118:	f107 031c 	add.w	r3, r7, #28
 800211c:	4619      	mov	r1, r3
 800211e:	4824      	ldr	r0, [pc, #144]	; (80021b0 <HAL_UART_MspInit+0x12c>)
 8002120:	f010 ff82 	bl	8013028 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002124:	e03b      	b.n	800219e <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART3)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a22      	ldr	r2, [pc, #136]	; (80021b4 <HAL_UART_MspInit+0x130>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d136      	bne.n	800219e <HAL_UART_MspInit+0x11a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002130:	4b1e      	ldr	r3, [pc, #120]	; (80021ac <HAL_UART_MspInit+0x128>)
 8002132:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002136:	4a1d      	ldr	r2, [pc, #116]	; (80021ac <HAL_UART_MspInit+0x128>)
 8002138:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800213c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002140:	4b1a      	ldr	r3, [pc, #104]	; (80021ac <HAL_UART_MspInit+0x128>)
 8002142:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002146:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800214a:	613b      	str	r3, [r7, #16]
 800214c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800214e:	4b17      	ldr	r3, [pc, #92]	; (80021ac <HAL_UART_MspInit+0x128>)
 8002150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002154:	4a15      	ldr	r2, [pc, #84]	; (80021ac <HAL_UART_MspInit+0x128>)
 8002156:	f043 0308 	orr.w	r3, r3, #8
 800215a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800215e:	4b13      	ldr	r3, [pc, #76]	; (80021ac <HAL_UART_MspInit+0x128>)
 8002160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002164:	f003 0308 	and.w	r3, r3, #8
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800216c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002172:	2302      	movs	r3, #2
 8002174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002176:	2300      	movs	r3, #0
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217a:	2300      	movs	r3, #0
 800217c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800217e:	2307      	movs	r3, #7
 8002180:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002182:	f107 031c 	add.w	r3, r7, #28
 8002186:	4619      	mov	r1, r3
 8002188:	480b      	ldr	r0, [pc, #44]	; (80021b8 <HAL_UART_MspInit+0x134>)
 800218a:	f010 ff4d 	bl	8013028 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800218e:	2200      	movs	r2, #0
 8002190:	2100      	movs	r1, #0
 8002192:	2027      	movs	r0, #39	; 0x27
 8002194:	f010 fccf 	bl	8012b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002198:	2027      	movs	r0, #39	; 0x27
 800219a:	f010 fce6 	bl	8012b6a <HAL_NVIC_EnableIRQ>
}
 800219e:	bf00      	nop
 80021a0:	3730      	adds	r7, #48	; 0x30
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40011000 	.word	0x40011000
 80021ac:	58024400 	.word	0x58024400
 80021b0:	58020400 	.word	0x58020400
 80021b4:	40004800 	.word	0x40004800
 80021b8:	58020c00 	.word	0x58020c00

080021bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ce:	e7fe      	b.n	80021ce <HardFault_Handler+0x4>

080021d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021d4:	e7fe      	b.n	80021d4 <MemManage_Handler+0x4>

080021d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021d6:	b480      	push	{r7}
 80021d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021da:	e7fe      	b.n	80021da <BusFault_Handler+0x4>

080021dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021e0:	e7fe      	b.n	80021e0 <UsageFault_Handler+0x4>

080021e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021e2:	b480      	push	{r7}
 80021e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021e6:	bf00      	nop
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021fe:	b480      	push	{r7}
 8002200:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002210:	f010 fb68 	bl	80128e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002214:	bf00      	nop
 8002216:	bd80      	pop	{r7, pc}

08002218 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800221c:	2001      	movs	r0, #1
 800221e:	f011 f8e4 	bl	80133ea <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}

08002226 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800222a:	2002      	movs	r0, #2
 800222c:	f011 f8dd 	bl	80133ea <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002230:	bf00      	nop
 8002232:	bd80      	pop	{r7, pc}

08002234 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002238:	2004      	movs	r0, #4
 800223a:	f011 f8d6 	bl	80133ea <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}

08002242 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002246:	2008      	movs	r0, #8
 8002248:	f011 f8cf 	bl	80133ea <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800224c:	bf00      	nop
 800224e:	bd80      	pop	{r7, pc}

08002250 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002254:	2010      	movs	r0, #16
 8002256:	f011 f8c8 	bl	80133ea <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}

0800225e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002262:	2040      	movs	r0, #64	; 0x40
 8002264:	f011 f8c1 	bl	80133ea <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002268:	2080      	movs	r0, #128	; 0x80
 800226a:	f011 f8be 	bl	80133ea <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002278:	4802      	ldr	r0, [pc, #8]	; (8002284 <USART3_IRQHandler+0x10>)
 800227a:	f015 fd7d 	bl	8017d78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	24000310 	.word	0x24000310

08002288 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800228c:	4802      	ldr	r0, [pc, #8]	; (8002298 <TIM7_IRQHandler+0x10>)
 800228e:	f014 fe11 	bl	8016eb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	240005d0 	.word	0x240005d0

0800229c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80022a0:	4802      	ldr	r0, [pc, #8]	; (80022ac <OTG_FS_IRQHandler+0x10>)
 80022a2:	f011 fa13 	bl	80136cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	24001afc 	.word	0x24001afc

080022b0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80022b8:	4b11      	ldr	r3, [pc, #68]	; (8002300 <_sbrk+0x50>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d102      	bne.n	80022c6 <_sbrk+0x16>
		heap_end = &end;
 80022c0:	4b0f      	ldr	r3, [pc, #60]	; (8002300 <_sbrk+0x50>)
 80022c2:	4a10      	ldr	r2, [pc, #64]	; (8002304 <_sbrk+0x54>)
 80022c4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80022c6:	4b0e      	ldr	r3, [pc, #56]	; (8002300 <_sbrk+0x50>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80022cc:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <_sbrk+0x50>)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4413      	add	r3, r2
 80022d4:	466a      	mov	r2, sp
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d907      	bls.n	80022ea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80022da:	f01b fef1 	bl	801e0c0 <__errno>
 80022de:	4602      	mov	r2, r0
 80022e0:	230c      	movs	r3, #12
 80022e2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80022e4:	f04f 33ff 	mov.w	r3, #4294967295
 80022e8:	e006      	b.n	80022f8 <_sbrk+0x48>
	}

	heap_end += incr;
 80022ea:	4b05      	ldr	r3, [pc, #20]	; (8002300 <_sbrk+0x50>)
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4413      	add	r3, r2
 80022f2:	4a03      	ldr	r2, [pc, #12]	; (8002300 <_sbrk+0x50>)
 80022f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80022f6:	68fb      	ldr	r3, [r7, #12]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	24000300 	.word	0x24000300
 8002304:	24001f08 	.word	0x24001f08

08002308 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800230c:	4b29      	ldr	r3, [pc, #164]	; (80023b4 <SystemInit+0xac>)
 800230e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002312:	4a28      	ldr	r2, [pc, #160]	; (80023b4 <SystemInit+0xac>)
 8002314:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002318:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800231c:	4b26      	ldr	r3, [pc, #152]	; (80023b8 <SystemInit+0xb0>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a25      	ldr	r2, [pc, #148]	; (80023b8 <SystemInit+0xb0>)
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002328:	4b23      	ldr	r3, [pc, #140]	; (80023b8 <SystemInit+0xb0>)
 800232a:	2200      	movs	r2, #0
 800232c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800232e:	4b22      	ldr	r3, [pc, #136]	; (80023b8 <SystemInit+0xb0>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	4921      	ldr	r1, [pc, #132]	; (80023b8 <SystemInit+0xb0>)
 8002334:	4b21      	ldr	r3, [pc, #132]	; (80023bc <SystemInit+0xb4>)
 8002336:	4013      	ands	r3, r2
 8002338:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800233a:	4b1f      	ldr	r3, [pc, #124]	; (80023b8 <SystemInit+0xb0>)
 800233c:	2200      	movs	r2, #0
 800233e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002340:	4b1d      	ldr	r3, [pc, #116]	; (80023b8 <SystemInit+0xb0>)
 8002342:	2200      	movs	r2, #0
 8002344:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002346:	4b1c      	ldr	r3, [pc, #112]	; (80023b8 <SystemInit+0xb0>)
 8002348:	2200      	movs	r2, #0
 800234a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800234c:	4b1a      	ldr	r3, [pc, #104]	; (80023b8 <SystemInit+0xb0>)
 800234e:	2200      	movs	r2, #0
 8002350:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8002352:	4b19      	ldr	r3, [pc, #100]	; (80023b8 <SystemInit+0xb0>)
 8002354:	2200      	movs	r2, #0
 8002356:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8002358:	4b17      	ldr	r3, [pc, #92]	; (80023b8 <SystemInit+0xb0>)
 800235a:	2200      	movs	r2, #0
 800235c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800235e:	4b16      	ldr	r3, [pc, #88]	; (80023b8 <SystemInit+0xb0>)
 8002360:	2200      	movs	r2, #0
 8002362:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8002364:	4b14      	ldr	r3, [pc, #80]	; (80023b8 <SystemInit+0xb0>)
 8002366:	2200      	movs	r2, #0
 8002368:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800236a:	4b13      	ldr	r3, [pc, #76]	; (80023b8 <SystemInit+0xb0>)
 800236c:	2200      	movs	r2, #0
 800236e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8002370:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <SystemInit+0xb0>)
 8002372:	2200      	movs	r2, #0
 8002374:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002376:	4b10      	ldr	r3, [pc, #64]	; (80023b8 <SystemInit+0xb0>)
 8002378:	2200      	movs	r2, #0
 800237a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800237c:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <SystemInit+0xb0>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a0d      	ldr	r2, [pc, #52]	; (80023b8 <SystemInit+0xb0>)
 8002382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002386:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002388:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <SystemInit+0xb0>)
 800238a:	2200      	movs	r2, #0
 800238c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800238e:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <SystemInit+0xb8>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <SystemInit+0xbc>)
 8002394:	4013      	ands	r3, r2
 8002396:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800239a:	d202      	bcs.n	80023a2 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800239c:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <SystemInit+0xc0>)
 800239e:	2201      	movs	r2, #1
 80023a0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023a2:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <SystemInit+0xac>)
 80023a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023a8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80023aa:	bf00      	nop
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	e000ed00 	.word	0xe000ed00
 80023b8:	58024400 	.word	0x58024400
 80023bc:	eaf6ed7f 	.word	0xeaf6ed7f
 80023c0:	5c001000 	.word	0x5c001000
 80023c4:	ffff0000 	.word	0xffff0000
 80023c8:	51008108 	.word	0x51008108

080023cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002404 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80023d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80023d2:	e003      	b.n	80023dc <LoopCopyDataInit>

080023d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80023d4:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80023d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80023d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80023da:	3104      	adds	r1, #4

080023dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80023dc:	480b      	ldr	r0, [pc, #44]	; (800240c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80023de:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80023e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80023e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80023e4:	d3f6      	bcc.n	80023d4 <CopyDataInit>
  ldr  r2, =_sbss
 80023e6:	4a0b      	ldr	r2, [pc, #44]	; (8002414 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80023e8:	e002      	b.n	80023f0 <LoopFillZerobss>

080023ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80023ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80023ec:	f842 3b04 	str.w	r3, [r2], #4

080023f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80023f0:	4b09      	ldr	r3, [pc, #36]	; (8002418 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80023f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80023f4:	d3f9      	bcc.n	80023ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023f6:	f7ff ff87 	bl	8002308 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023fa:	f01b fe67 	bl	801e0cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023fe:	f7fe fe39 	bl	8001074 <main>
  bx  lr    
 8002402:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002404:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8002408:	0801f6e8 	.word	0x0801f6e8
  ldr  r0, =_sdata
 800240c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8002410:	240001f0 	.word	0x240001f0
  ldr  r2, =_sbss
 8002414:	240001f0 	.word	0x240001f0
  ldr  r3, = _ebss
 8002418:	24001f08 	.word	0x24001f08

0800241c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800241c:	e7fe      	b.n	800241c <ADC3_IRQHandler>
	...

08002420 <G_q>:
 *                creal_T b_G_q[6]
 * Return Type  : void
 */
void G_q(double g, double theta2, double theta3, double theta4, double theta5,
         creal_T b_G_q[6])
{
 8002420:	b590      	push	{r4, r7, lr}
 8002422:	f5ad 5d9e 	sub.w	sp, sp, #5056	; 0x13c0
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	4bc1      	ldr	r3, [pc, #772]	; (8002730 <G_q+0x310>)
 800242c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002430:	443a      	add	r2, r7
 8002432:	4413      	add	r3, r2
 8002434:	ed83 0b00 	vstr	d0, [r3]
 8002438:	4bbe      	ldr	r3, [pc, #760]	; (8002734 <G_q+0x314>)
 800243a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800243e:	443a      	add	r2, r7
 8002440:	4413      	add	r3, r2
 8002442:	ed83 1b00 	vstr	d1, [r3]
 8002446:	4bbc      	ldr	r3, [pc, #752]	; (8002738 <G_q+0x318>)
 8002448:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800244c:	443a      	add	r2, r7
 800244e:	4413      	add	r3, r2
 8002450:	ed83 2b00 	vstr	d2, [r3]
 8002454:	f107 0310 	add.w	r3, r7, #16
 8002458:	ed83 3b00 	vstr	d3, [r3]
 800245c:	4bb7      	ldr	r3, [pc, #732]	; (800273c <G_q+0x31c>)
 800245e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002462:	443a      	add	r2, r7
 8002464:	4413      	add	r3, r2
 8002466:	ed83 4b00 	vstr	d4, [r3]
 800246a:	4bb5      	ldr	r3, [pc, #724]	; (8002740 <G_q+0x320>)
 800246c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002470:	443a      	add	r2, r7
 8002472:	4413      	add	r3, r2
 8002474:	6018      	str	r0, [r3, #0]
  double t74_re;
  double t74_im;
  double t76_re;
  double t58_im;
  double t60_re;
  if (isInitialized_G_q == false) {
 8002476:	4bb3      	ldr	r3, [pc, #716]	; (8002744 <G_q+0x324>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <G_q+0x62>
    G_q_initialize();
 800247e:	f010 f8cf 	bl	8012620 <G_q_initialize>
  }

  /*     This function was generated by the Symbolic Math Toolbox version 8.2. */
  /*     24-May-2020 14:27:08 */
  t299.re = theta2 * 0.0;
 8002482:	4bac      	ldr	r3, [pc, #688]	; (8002734 <G_q+0x314>)
 8002484:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002488:	443a      	add	r2, r7
 800248a:	4413      	add	r3, r2
 800248c:	ed93 7b00 	vldr	d7, [r3]
 8002490:	ed9f 6ba5 	vldr	d6, [pc, #660]	; 8002728 <G_q+0x308>
 8002494:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002498:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800249c:	ed83 7b00 	vstr	d7, [r3]
  t299.im = theta2;
 80024a0:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 80024a4:	4ba3      	ldr	r3, [pc, #652]	; (8002734 <G_q+0x314>)
 80024a6:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80024aa:	4439      	add	r1, r7
 80024ac:	440b      	add	r3, r1
 80024ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80024b2:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t298.re = -t299.re;
 80024b6:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80024ba:	ed93 7b00 	vldr	d7, [r3]
 80024be:	eeb1 7b47 	vneg.f64	d7, d7
 80024c2:	f241 2330 	movw	r3, #4656	; 0x1230
 80024c6:	443b      	add	r3, r7
 80024c8:	ed83 7b00 	vstr	d7, [r3]
  t298.im = -theta2;
 80024cc:	4b99      	ldr	r3, [pc, #612]	; (8002734 <G_q+0x314>)
 80024ce:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80024d2:	443a      	add	r2, r7
 80024d4:	4413      	add	r3, r2
 80024d6:	ed93 7b00 	vldr	d7, [r3]
 80024da:	eeb1 7b47 	vneg.f64	d7, d7
 80024de:	f241 2330 	movw	r3, #4656	; 0x1230
 80024e2:	443b      	add	r3, r7
 80024e4:	ed83 7b02 	vstr	d7, [r3, #8]
  t293.re = t299.re;
 80024e8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80024ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 80024f0:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 80024f4:	e9c2 3400 	strd	r3, r4, [r2]
  t293.im = theta2;
 80024f8:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 80024fc:	4b8d      	ldr	r3, [pc, #564]	; (8002734 <G_q+0x314>)
 80024fe:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002502:	4439      	add	r1, r7
 8002504:	440b      	add	r3, r1
 8002506:	e9d3 3400 	ldrd	r3, r4, [r3]
 800250a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t292.re = -t299.re;
 800250e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002512:	ed93 7b00 	vldr	d7, [r3]
 8002516:	eeb1 7b47 	vneg.f64	d7, d7
 800251a:	f241 2310 	movw	r3, #4624	; 0x1210
 800251e:	443b      	add	r3, r7
 8002520:	ed83 7b00 	vstr	d7, [r3]
  t292.im = -theta2;
 8002524:	4b83      	ldr	r3, [pc, #524]	; (8002734 <G_q+0x314>)
 8002526:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800252a:	443a      	add	r2, r7
 800252c:	4413      	add	r3, r2
 800252e:	ed93 7b00 	vldr	d7, [r3]
 8002532:	eeb1 7b47 	vneg.f64	d7, d7
 8002536:	f241 2310 	movw	r3, #4624	; 0x1210
 800253a:	443b      	add	r3, r7
 800253c:	ed83 7b02 	vstr	d7, [r3, #8]
  t291.re = t299.re;
 8002540:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002544:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002548:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 800254c:	e9c2 3400 	strd	r3, r4, [r2]
  t291.im = theta2;
 8002550:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8002554:	4b77      	ldr	r3, [pc, #476]	; (8002734 <G_q+0x314>)
 8002556:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800255a:	4439      	add	r1, r7
 800255c:	440b      	add	r3, r1
 800255e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002562:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t290.re = -t299.re;
 8002566:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800256a:	ed93 7b00 	vldr	d7, [r3]
 800256e:	eeb1 7b47 	vneg.f64	d7, d7
 8002572:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8002576:	443b      	add	r3, r7
 8002578:	ed83 7b00 	vstr	d7, [r3]
  t290.im = -theta2;
 800257c:	4b6d      	ldr	r3, [pc, #436]	; (8002734 <G_q+0x314>)
 800257e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002582:	443a      	add	r2, r7
 8002584:	4413      	add	r3, r2
 8002586:	ed93 7b00 	vldr	d7, [r3]
 800258a:	eeb1 7b47 	vneg.f64	d7, d7
 800258e:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8002592:	443b      	add	r3, r7
 8002594:	ed83 7b02 	vstr	d7, [r3, #8]
  t287.re = t299.re;
 8002598:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800259c:	e9d3 3400 	ldrd	r3, r4, [r3]
 80025a0:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 80025a4:	e9c2 3400 	strd	r3, r4, [r2]
  t287.im = theta2;
 80025a8:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 80025ac:	4b61      	ldr	r3, [pc, #388]	; (8002734 <G_q+0x314>)
 80025ae:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80025b2:	4439      	add	r1, r7
 80025b4:	440b      	add	r3, r1
 80025b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80025ba:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t286.re = -t299.re;
 80025be:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80025c2:	ed93 7b00 	vldr	d7, [r3]
 80025c6:	eeb1 7b47 	vneg.f64	d7, d7
 80025ca:	f241 13d0 	movw	r3, #4560	; 0x11d0
 80025ce:	443b      	add	r3, r7
 80025d0:	ed83 7b00 	vstr	d7, [r3]
  t286.im = -theta2;
 80025d4:	4b57      	ldr	r3, [pc, #348]	; (8002734 <G_q+0x314>)
 80025d6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80025da:	443a      	add	r2, r7
 80025dc:	4413      	add	r3, r2
 80025de:	ed93 7b00 	vldr	d7, [r3]
 80025e2:	eeb1 7b47 	vneg.f64	d7, d7
 80025e6:	f241 13d0 	movw	r3, #4560	; 0x11d0
 80025ea:	443b      	add	r3, r7
 80025ec:	ed83 7b02 	vstr	d7, [r3, #8]
  t281.re = t299.re;
 80025f0:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80025f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80025f8:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80025fc:	e9c2 3400 	strd	r3, r4, [r2]
  t281.im = theta2;
 8002600:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002604:	4b4b      	ldr	r3, [pc, #300]	; (8002734 <G_q+0x314>)
 8002606:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800260a:	4439      	add	r1, r7
 800260c:	440b      	add	r3, r1
 800260e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002612:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t280.re = -t299.re;
 8002616:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800261a:	ed93 7b00 	vldr	d7, [r3]
 800261e:	eeb1 7b47 	vneg.f64	d7, d7
 8002622:	f241 13b0 	movw	r3, #4528	; 0x11b0
 8002626:	443b      	add	r3, r7
 8002628:	ed83 7b00 	vstr	d7, [r3]
  t280.im = -theta2;
 800262c:	4b41      	ldr	r3, [pc, #260]	; (8002734 <G_q+0x314>)
 800262e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002632:	443a      	add	r2, r7
 8002634:	4413      	add	r3, r2
 8002636:	ed93 7b00 	vldr	d7, [r3]
 800263a:	eeb1 7b47 	vneg.f64	d7, d7
 800263e:	f241 13b0 	movw	r3, #4528	; 0x11b0
 8002642:	443b      	add	r3, r7
 8002644:	ed83 7b02 	vstr	d7, [r3, #8]
  t277.re = t299.re;
 8002648:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800264c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002650:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 8002654:	e9c2 3400 	strd	r3, r4, [r2]
  t277.im = theta2;
 8002658:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 800265c:	4b35      	ldr	r3, [pc, #212]	; (8002734 <G_q+0x314>)
 800265e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002662:	4439      	add	r1, r7
 8002664:	440b      	add	r3, r1
 8002666:	e9d3 3400 	ldrd	r3, r4, [r3]
 800266a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t276.re = -t299.re;
 800266e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002672:	ed93 7b00 	vldr	d7, [r3]
 8002676:	eeb1 7b47 	vneg.f64	d7, d7
 800267a:	f241 1390 	movw	r3, #4496	; 0x1190
 800267e:	443b      	add	r3, r7
 8002680:	ed83 7b00 	vstr	d7, [r3]
  t276.im = -theta2;
 8002684:	4b2b      	ldr	r3, [pc, #172]	; (8002734 <G_q+0x314>)
 8002686:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800268a:	443a      	add	r2, r7
 800268c:	4413      	add	r3, r2
 800268e:	ed93 7b00 	vldr	d7, [r3]
 8002692:	eeb1 7b47 	vneg.f64	d7, d7
 8002696:	f241 1390 	movw	r3, #4496	; 0x1190
 800269a:	443b      	add	r3, r7
 800269c:	ed83 7b02 	vstr	d7, [r3, #8]
  t273.re = t299.re;
 80026a0:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80026a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80026a8:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 80026ac:	e9c2 3400 	strd	r3, r4, [r2]
  t273.im = theta2;
 80026b0:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 80026b4:	4b1f      	ldr	r3, [pc, #124]	; (8002734 <G_q+0x314>)
 80026b6:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80026ba:	4439      	add	r1, r7
 80026bc:	440b      	add	r3, r1
 80026be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80026c2:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t272.re = -t299.re;
 80026c6:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80026ca:	ed93 7b00 	vldr	d7, [r3]
 80026ce:	eeb1 7b47 	vneg.f64	d7, d7
 80026d2:	f241 1370 	movw	r3, #4464	; 0x1170
 80026d6:	443b      	add	r3, r7
 80026d8:	ed83 7b00 	vstr	d7, [r3]
  t272.im = -theta2;
 80026dc:	4b15      	ldr	r3, [pc, #84]	; (8002734 <G_q+0x314>)
 80026de:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80026e2:	443a      	add	r2, r7
 80026e4:	4413      	add	r3, r2
 80026e6:	ed93 7b00 	vldr	d7, [r3]
 80026ea:	eeb1 7b47 	vneg.f64	d7, d7
 80026ee:	f241 1370 	movw	r3, #4464	; 0x1170
 80026f2:	443b      	add	r3, r7
 80026f4:	ed83 7b02 	vstr	d7, [r3, #8]
  t269.re = t299.re;
 80026f8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80026fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002700:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8002704:	e9c2 3400 	strd	r3, r4, [r2]
  t269.im = theta2;
 8002708:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 800270c:	4b09      	ldr	r3, [pc, #36]	; (8002734 <G_q+0x314>)
 800270e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002712:	4439      	add	r1, r7
 8002714:	440b      	add	r3, r1
 8002716:	e9d3 3400 	ldrd	r3, r4, [r3]
 800271a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t268.re = -t299.re;
 800271e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002722:	ed93 7b00 	vldr	d7, [r3]
 8002726:	e00f      	b.n	8002748 <G_q+0x328>
	...
 8002730:	ffffec58 	.word	0xffffec58
 8002734:	ffffec50 	.word	0xffffec50
 8002738:	ffffec48 	.word	0xffffec48
 800273c:	ffffec38 	.word	0xffffec38
 8002740:	ffffec34 	.word	0xffffec34
 8002744:	24000304 	.word	0x24000304
 8002748:	eeb1 7b47 	vneg.f64	d7, d7
 800274c:	f241 1350 	movw	r3, #4432	; 0x1150
 8002750:	443b      	add	r3, r7
 8002752:	ed83 7b00 	vstr	d7, [r3]
  t268.im = -theta2;
 8002756:	4bc0      	ldr	r3, [pc, #768]	; (8002a58 <G_q+0x638>)
 8002758:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800275c:	443a      	add	r2, r7
 800275e:	4413      	add	r3, r2
 8002760:	ed93 7b00 	vldr	d7, [r3]
 8002764:	eeb1 7b47 	vneg.f64	d7, d7
 8002768:	f241 1350 	movw	r3, #4432	; 0x1150
 800276c:	443b      	add	r3, r7
 800276e:	ed83 7b02 	vstr	d7, [r3, #8]
  t263.re = t299.re;
 8002772:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002776:	e9d3 3400 	ldrd	r3, r4, [r3]
 800277a:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 800277e:	e9c2 3400 	strd	r3, r4, [r2]
  t263.im = theta2;
 8002782:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8002786:	4bb4      	ldr	r3, [pc, #720]	; (8002a58 <G_q+0x638>)
 8002788:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800278c:	4439      	add	r1, r7
 800278e:	440b      	add	r3, r1
 8002790:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002794:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t262.re = -t299.re;
 8002798:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800279c:	ed93 7b00 	vldr	d7, [r3]
 80027a0:	eeb1 7b47 	vneg.f64	d7, d7
 80027a4:	f241 1330 	movw	r3, #4400	; 0x1130
 80027a8:	443b      	add	r3, r7
 80027aa:	ed83 7b00 	vstr	d7, [r3]
  t262.im = -theta2;
 80027ae:	4baa      	ldr	r3, [pc, #680]	; (8002a58 <G_q+0x638>)
 80027b0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80027b4:	443a      	add	r2, r7
 80027b6:	4413      	add	r3, r2
 80027b8:	ed93 7b00 	vldr	d7, [r3]
 80027bc:	eeb1 7b47 	vneg.f64	d7, d7
 80027c0:	f241 1330 	movw	r3, #4400	; 0x1130
 80027c4:	443b      	add	r3, r7
 80027c6:	ed83 7b02 	vstr	d7, [r3, #8]
  t259.re = t299.re;
 80027ca:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80027ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80027d2:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 80027d6:	e9c2 3400 	strd	r3, r4, [r2]
  t259.im = theta2;
 80027da:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 80027de:	4b9e      	ldr	r3, [pc, #632]	; (8002a58 <G_q+0x638>)
 80027e0:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80027e4:	4439      	add	r1, r7
 80027e6:	440b      	add	r3, r1
 80027e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80027ec:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t258.re = -t299.re;
 80027f0:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80027f4:	ed93 7b00 	vldr	d7, [r3]
 80027f8:	eeb1 7b47 	vneg.f64	d7, d7
 80027fc:	f241 1310 	movw	r3, #4368	; 0x1110
 8002800:	443b      	add	r3, r7
 8002802:	ed83 7b00 	vstr	d7, [r3]
  t258.im = -theta2;
 8002806:	4b94      	ldr	r3, [pc, #592]	; (8002a58 <G_q+0x638>)
 8002808:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800280c:	443a      	add	r2, r7
 800280e:	4413      	add	r3, r2
 8002810:	ed93 7b00 	vldr	d7, [r3]
 8002814:	eeb1 7b47 	vneg.f64	d7, d7
 8002818:	f241 1310 	movw	r3, #4368	; 0x1110
 800281c:	443b      	add	r3, r7
 800281e:	ed83 7b02 	vstr	d7, [r3, #8]
  t251.re = t299.re;
 8002822:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002826:	e9d3 3400 	ldrd	r3, r4, [r3]
 800282a:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 800282e:	e9c2 3400 	strd	r3, r4, [r2]
  t251.im = theta2;
 8002832:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8002836:	4b88      	ldr	r3, [pc, #544]	; (8002a58 <G_q+0x638>)
 8002838:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800283c:	4439      	add	r1, r7
 800283e:	440b      	add	r3, r1
 8002840:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002844:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t250.re = -t299.re;
 8002848:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800284c:	ed93 7b00 	vldr	d7, [r3]
 8002850:	eeb1 7b47 	vneg.f64	d7, d7
 8002854:	f241 03f0 	movw	r3, #4336	; 0x10f0
 8002858:	443b      	add	r3, r7
 800285a:	ed83 7b00 	vstr	d7, [r3]
  t250.im = -theta2;
 800285e:	4b7e      	ldr	r3, [pc, #504]	; (8002a58 <G_q+0x638>)
 8002860:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002864:	443a      	add	r2, r7
 8002866:	4413      	add	r3, r2
 8002868:	ed93 7b00 	vldr	d7, [r3]
 800286c:	eeb1 7b47 	vneg.f64	d7, d7
 8002870:	f241 03f0 	movw	r3, #4336	; 0x10f0
 8002874:	443b      	add	r3, r7
 8002876:	ed83 7b02 	vstr	d7, [r3, #8]
  t249.re = t299.re;
 800287a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800287e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002882:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8002886:	e9c2 3400 	strd	r3, r4, [r2]
  t249.im = theta2;
 800288a:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 800288e:	4b72      	ldr	r3, [pc, #456]	; (8002a58 <G_q+0x638>)
 8002890:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002894:	4439      	add	r1, r7
 8002896:	440b      	add	r3, r1
 8002898:	e9d3 3400 	ldrd	r3, r4, [r3]
 800289c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t248.re = -t299.re;
 80028a0:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80028a4:	ed93 7b00 	vldr	d7, [r3]
 80028a8:	eeb1 7b47 	vneg.f64	d7, d7
 80028ac:	f241 03d0 	movw	r3, #4304	; 0x10d0
 80028b0:	443b      	add	r3, r7
 80028b2:	ed83 7b00 	vstr	d7, [r3]
  t248.im = -theta2;
 80028b6:	4b68      	ldr	r3, [pc, #416]	; (8002a58 <G_q+0x638>)
 80028b8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80028bc:	443a      	add	r2, r7
 80028be:	4413      	add	r3, r2
 80028c0:	ed93 7b00 	vldr	d7, [r3]
 80028c4:	eeb1 7b47 	vneg.f64	d7, d7
 80028c8:	f241 03d0 	movw	r3, #4304	; 0x10d0
 80028cc:	443b      	add	r3, r7
 80028ce:	ed83 7b02 	vstr	d7, [r3, #8]
  t245.re = t299.re;
 80028d2:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80028d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80028da:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 80028de:	e9c2 3400 	strd	r3, r4, [r2]
  t245.im = theta2;
 80028e2:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 80028e6:	4b5c      	ldr	r3, [pc, #368]	; (8002a58 <G_q+0x638>)
 80028e8:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80028ec:	4439      	add	r1, r7
 80028ee:	440b      	add	r3, r1
 80028f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80028f4:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t244.re = -t299.re;
 80028f8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80028fc:	ed93 7b00 	vldr	d7, [r3]
 8002900:	eeb1 7b47 	vneg.f64	d7, d7
 8002904:	f241 03b0 	movw	r3, #4272	; 0x10b0
 8002908:	443b      	add	r3, r7
 800290a:	ed83 7b00 	vstr	d7, [r3]
  t244.im = -theta2;
 800290e:	4b52      	ldr	r3, [pc, #328]	; (8002a58 <G_q+0x638>)
 8002910:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002914:	443a      	add	r2, r7
 8002916:	4413      	add	r3, r2
 8002918:	ed93 7b00 	vldr	d7, [r3]
 800291c:	eeb1 7b47 	vneg.f64	d7, d7
 8002920:	f241 03b0 	movw	r3, #4272	; 0x10b0
 8002924:	443b      	add	r3, r7
 8002926:	ed83 7b02 	vstr	d7, [r3, #8]
  t239.re = t299.re;
 800292a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800292e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002932:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8002936:	e9c2 3400 	strd	r3, r4, [r2]
  t239.im = theta2;
 800293a:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 800293e:	4b46      	ldr	r3, [pc, #280]	; (8002a58 <G_q+0x638>)
 8002940:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002944:	4439      	add	r1, r7
 8002946:	440b      	add	r3, r1
 8002948:	e9d3 3400 	ldrd	r3, r4, [r3]
 800294c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t238.re = -t299.re;
 8002950:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002954:	ed93 7b00 	vldr	d7, [r3]
 8002958:	eeb1 7b47 	vneg.f64	d7, d7
 800295c:	f241 0390 	movw	r3, #4240	; 0x1090
 8002960:	443b      	add	r3, r7
 8002962:	ed83 7b00 	vstr	d7, [r3]
  t238.im = -theta2;
 8002966:	4b3c      	ldr	r3, [pc, #240]	; (8002a58 <G_q+0x638>)
 8002968:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800296c:	443a      	add	r2, r7
 800296e:	4413      	add	r3, r2
 8002970:	ed93 7b00 	vldr	d7, [r3]
 8002974:	eeb1 7b47 	vneg.f64	d7, d7
 8002978:	f241 0390 	movw	r3, #4240	; 0x1090
 800297c:	443b      	add	r3, r7
 800297e:	ed83 7b02 	vstr	d7, [r3, #8]
  t237.re = t299.re;
 8002982:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002986:	e9d3 3400 	ldrd	r3, r4, [r3]
 800298a:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800298e:	e9c2 3400 	strd	r3, r4, [r2]
  t237.im = theta2;
 8002992:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002996:	4b30      	ldr	r3, [pc, #192]	; (8002a58 <G_q+0x638>)
 8002998:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800299c:	4439      	add	r1, r7
 800299e:	440b      	add	r3, r1
 80029a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80029a4:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t236.re = -t299.re;
 80029a8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80029ac:	ed93 7b00 	vldr	d7, [r3]
 80029b0:	eeb1 7b47 	vneg.f64	d7, d7
 80029b4:	f241 0370 	movw	r3, #4208	; 0x1070
 80029b8:	443b      	add	r3, r7
 80029ba:	ed83 7b00 	vstr	d7, [r3]
  t236.im = -theta2;
 80029be:	4b26      	ldr	r3, [pc, #152]	; (8002a58 <G_q+0x638>)
 80029c0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80029c4:	443a      	add	r2, r7
 80029c6:	4413      	add	r3, r2
 80029c8:	ed93 7b00 	vldr	d7, [r3]
 80029cc:	eeb1 7b47 	vneg.f64	d7, d7
 80029d0:	f241 0370 	movw	r3, #4208	; 0x1070
 80029d4:	443b      	add	r3, r7
 80029d6:	ed83 7b02 	vstr	d7, [r3, #8]
  t233.re = t299.re;
 80029da:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80029de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80029e2:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80029e6:	e9c2 3400 	strd	r3, r4, [r2]
  t233.im = theta2;
 80029ea:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80029ee:	4b1a      	ldr	r3, [pc, #104]	; (8002a58 <G_q+0x638>)
 80029f0:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80029f4:	4439      	add	r1, r7
 80029f6:	440b      	add	r3, r1
 80029f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80029fc:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t232.re = -t299.re;
 8002a00:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002a04:	ed93 7b00 	vldr	d7, [r3]
 8002a08:	eeb1 7b47 	vneg.f64	d7, d7
 8002a0c:	f241 0350 	movw	r3, #4176	; 0x1050
 8002a10:	443b      	add	r3, r7
 8002a12:	ed83 7b00 	vstr	d7, [r3]
  t232.im = -theta2;
 8002a16:	4b10      	ldr	r3, [pc, #64]	; (8002a58 <G_q+0x638>)
 8002a18:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002a1c:	443a      	add	r2, r7
 8002a1e:	4413      	add	r3, r2
 8002a20:	ed93 7b00 	vldr	d7, [r3]
 8002a24:	eeb1 7b47 	vneg.f64	d7, d7
 8002a28:	f241 0350 	movw	r3, #4176	; 0x1050
 8002a2c:	443b      	add	r3, r7
 8002a2e:	ed83 7b02 	vstr	d7, [r3, #8]
  t227.re = t299.re;
 8002a32:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002a36:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002a3a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002a3e:	e9c2 3400 	strd	r3, r4, [r2]
  t227.im = theta2;
 8002a42:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002a46:	4b04      	ldr	r3, [pc, #16]	; (8002a58 <G_q+0x638>)
 8002a48:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002a4c:	4439      	add	r1, r7
 8002a4e:	440b      	add	r3, r1
 8002a50:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002a54:	e002      	b.n	8002a5c <G_q+0x63c>
 8002a56:	bf00      	nop
 8002a58:	ffffec50 	.word	0xffffec50
 8002a5c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t226.re = -t299.re;
 8002a60:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002a64:	ed93 7b00 	vldr	d7, [r3]
 8002a68:	eeb1 7b47 	vneg.f64	d7, d7
 8002a6c:	f241 0330 	movw	r3, #4144	; 0x1030
 8002a70:	443b      	add	r3, r7
 8002a72:	ed83 7b00 	vstr	d7, [r3]
  t226.im = -theta2;
 8002a76:	4bc4      	ldr	r3, [pc, #784]	; (8002d88 <G_q+0x968>)
 8002a78:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002a7c:	443a      	add	r2, r7
 8002a7e:	4413      	add	r3, r2
 8002a80:	ed93 7b00 	vldr	d7, [r3]
 8002a84:	eeb1 7b47 	vneg.f64	d7, d7
 8002a88:	f241 0330 	movw	r3, #4144	; 0x1030
 8002a8c:	443b      	add	r3, r7
 8002a8e:	ed83 7b02 	vstr	d7, [r3, #8]
  t223.re = t299.re;
 8002a92:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002a96:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002a9a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002a9e:	e9c2 3400 	strd	r3, r4, [r2]
  t223.im = theta2;
 8002aa2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002aa6:	4bb8      	ldr	r3, [pc, #736]	; (8002d88 <G_q+0x968>)
 8002aa8:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002aac:	4439      	add	r1, r7
 8002aae:	440b      	add	r3, r1
 8002ab0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002ab4:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t222.re = -t299.re;
 8002ab8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002abc:	ed93 7b00 	vldr	d7, [r3]
 8002ac0:	eeb1 7b47 	vneg.f64	d7, d7
 8002ac4:	f241 0310 	movw	r3, #4112	; 0x1010
 8002ac8:	443b      	add	r3, r7
 8002aca:	ed83 7b00 	vstr	d7, [r3]
  t222.im = -theta2;
 8002ace:	4bae      	ldr	r3, [pc, #696]	; (8002d88 <G_q+0x968>)
 8002ad0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002ad4:	443a      	add	r2, r7
 8002ad6:	4413      	add	r3, r2
 8002ad8:	ed93 7b00 	vldr	d7, [r3]
 8002adc:	eeb1 7b47 	vneg.f64	d7, d7
 8002ae0:	f241 0310 	movw	r3, #4112	; 0x1010
 8002ae4:	443b      	add	r3, r7
 8002ae6:	ed83 7b02 	vstr	d7, [r3, #8]
  t217.re = t299.re;
 8002aea:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002aee:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002af2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002af6:	e9c2 3400 	strd	r3, r4, [r2]
  t217.im = theta2;
 8002afa:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002afe:	4ba2      	ldr	r3, [pc, #648]	; (8002d88 <G_q+0x968>)
 8002b00:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002b04:	4439      	add	r1, r7
 8002b06:	440b      	add	r3, r1
 8002b08:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002b0c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t216.re = -t299.re;
 8002b10:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002b14:	ed93 7b00 	vldr	d7, [r3]
 8002b18:	eeb1 7b47 	vneg.f64	d7, d7
 8002b1c:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8002b20:	ed83 7b00 	vstr	d7, [r3]
  t216.im = -theta2;
 8002b24:	4b98      	ldr	r3, [pc, #608]	; (8002d88 <G_q+0x968>)
 8002b26:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002b2a:	443a      	add	r2, r7
 8002b2c:	4413      	add	r3, r2
 8002b2e:	ed93 7b00 	vldr	d7, [r3]
 8002b32:	eeb1 7b47 	vneg.f64	d7, d7
 8002b36:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8002b3a:	ed83 7b02 	vstr	d7, [r3, #8]
  t213.re = t299.re;
 8002b3e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002b42:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002b46:	f507 627e 	add.w	r2, r7, #4064	; 0xfe0
 8002b4a:	e9c2 3400 	strd	r3, r4, [r2]
  t213.im = theta2;
 8002b4e:	f507 627e 	add.w	r2, r7, #4064	; 0xfe0
 8002b52:	4b8d      	ldr	r3, [pc, #564]	; (8002d88 <G_q+0x968>)
 8002b54:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002b58:	4439      	add	r1, r7
 8002b5a:	440b      	add	r3, r1
 8002b5c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002b60:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t212.re = -t299.re;
 8002b64:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002b68:	ed93 7b00 	vldr	d7, [r3]
 8002b6c:	eeb1 7b47 	vneg.f64	d7, d7
 8002b70:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 8002b74:	ed83 7b00 	vstr	d7, [r3]
  t212.im = -theta2;
 8002b78:	4b83      	ldr	r3, [pc, #524]	; (8002d88 <G_q+0x968>)
 8002b7a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002b7e:	443a      	add	r2, r7
 8002b80:	4413      	add	r3, r2
 8002b82:	ed93 7b00 	vldr	d7, [r3]
 8002b86:	eeb1 7b47 	vneg.f64	d7, d7
 8002b8a:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 8002b8e:	ed83 7b02 	vstr	d7, [r3, #8]
  t205.re = t299.re;
 8002b92:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002b96:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002b9a:	f507 627c 	add.w	r2, r7, #4032	; 0xfc0
 8002b9e:	e9c2 3400 	strd	r3, r4, [r2]
  t205.im = theta2;
 8002ba2:	f507 627c 	add.w	r2, r7, #4032	; 0xfc0
 8002ba6:	4b78      	ldr	r3, [pc, #480]	; (8002d88 <G_q+0x968>)
 8002ba8:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002bac:	4439      	add	r1, r7
 8002bae:	440b      	add	r3, r1
 8002bb0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002bb4:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t204.re = -t299.re;
 8002bb8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002bbc:	ed93 7b00 	vldr	d7, [r3]
 8002bc0:	eeb1 7b47 	vneg.f64	d7, d7
 8002bc4:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 8002bc8:	ed83 7b00 	vstr	d7, [r3]
  t204.im = -theta2;
 8002bcc:	4b6e      	ldr	r3, [pc, #440]	; (8002d88 <G_q+0x968>)
 8002bce:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002bd2:	443a      	add	r2, r7
 8002bd4:	4413      	add	r3, r2
 8002bd6:	ed93 7b00 	vldr	d7, [r3]
 8002bda:	eeb1 7b47 	vneg.f64	d7, d7
 8002bde:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 8002be2:	ed83 7b02 	vstr	d7, [r3, #8]
  t203.re = t299.re;
 8002be6:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002bea:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002bee:	f507 627a 	add.w	r2, r7, #4000	; 0xfa0
 8002bf2:	e9c2 3400 	strd	r3, r4, [r2]
  t203.im = theta2;
 8002bf6:	f507 627a 	add.w	r2, r7, #4000	; 0xfa0
 8002bfa:	4b63      	ldr	r3, [pc, #396]	; (8002d88 <G_q+0x968>)
 8002bfc:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002c00:	4439      	add	r1, r7
 8002c02:	440b      	add	r3, r1
 8002c04:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002c08:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t202.re = -t299.re;
 8002c0c:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002c10:	ed93 7b00 	vldr	d7, [r3]
 8002c14:	eeb1 7b47 	vneg.f64	d7, d7
 8002c18:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 8002c1c:	ed83 7b00 	vstr	d7, [r3]
  t202.im = -theta2;
 8002c20:	4b59      	ldr	r3, [pc, #356]	; (8002d88 <G_q+0x968>)
 8002c22:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002c26:	443a      	add	r2, r7
 8002c28:	4413      	add	r3, r2
 8002c2a:	ed93 7b00 	vldr	d7, [r3]
 8002c2e:	eeb1 7b47 	vneg.f64	d7, d7
 8002c32:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 8002c36:	ed83 7b02 	vstr	d7, [r3, #8]
  t199.re = t299.re;
 8002c3a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002c3e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002c42:	f507 6278 	add.w	r2, r7, #3968	; 0xf80
 8002c46:	e9c2 3400 	strd	r3, r4, [r2]
  t199.im = theta2;
 8002c4a:	f507 6278 	add.w	r2, r7, #3968	; 0xf80
 8002c4e:	4b4e      	ldr	r3, [pc, #312]	; (8002d88 <G_q+0x968>)
 8002c50:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002c54:	4439      	add	r1, r7
 8002c56:	440b      	add	r3, r1
 8002c58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002c5c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t198.re = -t299.re;
 8002c60:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002c64:	ed93 7b00 	vldr	d7, [r3]
 8002c68:	eeb1 7b47 	vneg.f64	d7, d7
 8002c6c:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8002c70:	ed83 7b00 	vstr	d7, [r3]
  t198.im = -theta2;
 8002c74:	4b44      	ldr	r3, [pc, #272]	; (8002d88 <G_q+0x968>)
 8002c76:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002c7a:	443a      	add	r2, r7
 8002c7c:	4413      	add	r3, r2
 8002c7e:	ed93 7b00 	vldr	d7, [r3]
 8002c82:	eeb1 7b47 	vneg.f64	d7, d7
 8002c86:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8002c8a:	ed83 7b02 	vstr	d7, [r3, #8]
  t193.re = t299.re;
 8002c8e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002c92:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002c96:	f507 6276 	add.w	r2, r7, #3936	; 0xf60
 8002c9a:	e9c2 3400 	strd	r3, r4, [r2]
  t193.im = theta2;
 8002c9e:	f507 6276 	add.w	r2, r7, #3936	; 0xf60
 8002ca2:	4b39      	ldr	r3, [pc, #228]	; (8002d88 <G_q+0x968>)
 8002ca4:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002ca8:	4439      	add	r1, r7
 8002caa:	440b      	add	r3, r1
 8002cac:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002cb0:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t192.re = -t299.re;
 8002cb4:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002cb8:	ed93 7b00 	vldr	d7, [r3]
 8002cbc:	eeb1 7b47 	vneg.f64	d7, d7
 8002cc0:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 8002cc4:	ed83 7b00 	vstr	d7, [r3]
  t192.im = -theta2;
 8002cc8:	4b2f      	ldr	r3, [pc, #188]	; (8002d88 <G_q+0x968>)
 8002cca:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002cce:	443a      	add	r2, r7
 8002cd0:	4413      	add	r3, r2
 8002cd2:	ed93 7b00 	vldr	d7, [r3]
 8002cd6:	eeb1 7b47 	vneg.f64	d7, d7
 8002cda:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 8002cde:	ed83 7b02 	vstr	d7, [r3, #8]
  t189.re = t299.re;
 8002ce2:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002ce6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002cea:	f507 6274 	add.w	r2, r7, #3904	; 0xf40
 8002cee:	e9c2 3400 	strd	r3, r4, [r2]
  t189.im = theta2;
 8002cf2:	f507 6274 	add.w	r2, r7, #3904	; 0xf40
 8002cf6:	4b24      	ldr	r3, [pc, #144]	; (8002d88 <G_q+0x968>)
 8002cf8:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002cfc:	4439      	add	r1, r7
 8002cfe:	440b      	add	r3, r1
 8002d00:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002d04:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t188.re = -t299.re;
 8002d08:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002d0c:	ed93 7b00 	vldr	d7, [r3]
 8002d10:	eeb1 7b47 	vneg.f64	d7, d7
 8002d14:	f507 6373 	add.w	r3, r7, #3888	; 0xf30
 8002d18:	ed83 7b00 	vstr	d7, [r3]
  t188.im = -theta2;
 8002d1c:	4b1a      	ldr	r3, [pc, #104]	; (8002d88 <G_q+0x968>)
 8002d1e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002d22:	443a      	add	r2, r7
 8002d24:	4413      	add	r3, r2
 8002d26:	ed93 7b00 	vldr	d7, [r3]
 8002d2a:	eeb1 7b47 	vneg.f64	d7, d7
 8002d2e:	f507 6373 	add.w	r3, r7, #3888	; 0xf30
 8002d32:	ed83 7b02 	vstr	d7, [r3, #8]
  t181.re = t299.re;
 8002d36:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002d3a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002d3e:	f507 6272 	add.w	r2, r7, #3872	; 0xf20
 8002d42:	e9c2 3400 	strd	r3, r4, [r2]
  t181.im = theta2;
 8002d46:	f507 6272 	add.w	r2, r7, #3872	; 0xf20
 8002d4a:	4b0f      	ldr	r3, [pc, #60]	; (8002d88 <G_q+0x968>)
 8002d4c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002d50:	4439      	add	r1, r7
 8002d52:	440b      	add	r3, r1
 8002d54:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002d58:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t180.re = -t299.re;
 8002d5c:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002d60:	ed93 7b00 	vldr	d7, [r3]
 8002d64:	eeb1 7b47 	vneg.f64	d7, d7
 8002d68:	f507 6371 	add.w	r3, r7, #3856	; 0xf10
 8002d6c:	ed83 7b00 	vstr	d7, [r3]
  t180.im = -theta2;
 8002d70:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <G_q+0x968>)
 8002d72:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002d76:	443a      	add	r2, r7
 8002d78:	4413      	add	r3, r2
 8002d7a:	ed93 7b00 	vldr	d7, [r3]
 8002d7e:	eeb1 7b47 	vneg.f64	d7, d7
 8002d82:	f507 6371 	add.w	r3, r7, #3856	; 0xf10
 8002d86:	e001      	b.n	8002d8c <G_q+0x96c>
 8002d88:	ffffec50 	.word	0xffffec50
 8002d8c:	ed83 7b02 	vstr	d7, [r3, #8]
  t179.re = t299.re;
 8002d90:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002d94:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002d98:	f507 6270 	add.w	r2, r7, #3840	; 0xf00
 8002d9c:	e9c2 3400 	strd	r3, r4, [r2]
  t179.im = theta2;
 8002da0:	f507 6270 	add.w	r2, r7, #3840	; 0xf00
 8002da4:	4bc3      	ldr	r3, [pc, #780]	; (80030b4 <G_q+0xc94>)
 8002da6:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002daa:	4439      	add	r1, r7
 8002dac:	440b      	add	r3, r1
 8002dae:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002db2:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t178.re = -t299.re;
 8002db6:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002dba:	ed93 7b00 	vldr	d7, [r3]
 8002dbe:	eeb1 7b47 	vneg.f64	d7, d7
 8002dc2:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8002dc6:	ed83 7b00 	vstr	d7, [r3]
  t178.im = -theta2;
 8002dca:	4bba      	ldr	r3, [pc, #744]	; (80030b4 <G_q+0xc94>)
 8002dcc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002dd0:	443a      	add	r2, r7
 8002dd2:	4413      	add	r3, r2
 8002dd4:	ed93 7b00 	vldr	d7, [r3]
 8002dd8:	eeb1 7b47 	vneg.f64	d7, d7
 8002ddc:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8002de0:	ed83 7b02 	vstr	d7, [r3, #8]
  t175.re = t299.re;
 8002de4:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002de8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002dec:	f507 626e 	add.w	r2, r7, #3808	; 0xee0
 8002df0:	e9c2 3400 	strd	r3, r4, [r2]
  t175.im = theta2;
 8002df4:	f507 626e 	add.w	r2, r7, #3808	; 0xee0
 8002df8:	4bae      	ldr	r3, [pc, #696]	; (80030b4 <G_q+0xc94>)
 8002dfa:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002dfe:	4439      	add	r1, r7
 8002e00:	440b      	add	r3, r1
 8002e02:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002e06:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t174.re = -t299.re;
 8002e0a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002e0e:	ed93 7b00 	vldr	d7, [r3]
 8002e12:	eeb1 7b47 	vneg.f64	d7, d7
 8002e16:	f507 636d 	add.w	r3, r7, #3792	; 0xed0
 8002e1a:	ed83 7b00 	vstr	d7, [r3]
  t174.im = -theta2;
 8002e1e:	4ba5      	ldr	r3, [pc, #660]	; (80030b4 <G_q+0xc94>)
 8002e20:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002e24:	443a      	add	r2, r7
 8002e26:	4413      	add	r3, r2
 8002e28:	ed93 7b00 	vldr	d7, [r3]
 8002e2c:	eeb1 7b47 	vneg.f64	d7, d7
 8002e30:	f507 636d 	add.w	r3, r7, #3792	; 0xed0
 8002e34:	ed83 7b02 	vstr	d7, [r3, #8]
  t171.re = t299.re;
 8002e38:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002e3c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002e40:	f507 626c 	add.w	r2, r7, #3776	; 0xec0
 8002e44:	e9c2 3400 	strd	r3, r4, [r2]
  t171.im = theta2;
 8002e48:	f507 626c 	add.w	r2, r7, #3776	; 0xec0
 8002e4c:	4b99      	ldr	r3, [pc, #612]	; (80030b4 <G_q+0xc94>)
 8002e4e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002e52:	4439      	add	r1, r7
 8002e54:	440b      	add	r3, r1
 8002e56:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002e5a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t170.re = -t299.re;
 8002e5e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002e62:	ed93 7b00 	vldr	d7, [r3]
 8002e66:	eeb1 7b47 	vneg.f64	d7, d7
 8002e6a:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 8002e6e:	ed83 7b00 	vstr	d7, [r3]
  t170.im = -theta2;
 8002e72:	4b90      	ldr	r3, [pc, #576]	; (80030b4 <G_q+0xc94>)
 8002e74:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002e78:	443a      	add	r2, r7
 8002e7a:	4413      	add	r3, r2
 8002e7c:	ed93 7b00 	vldr	d7, [r3]
 8002e80:	eeb1 7b47 	vneg.f64	d7, d7
 8002e84:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 8002e88:	ed83 7b02 	vstr	d7, [r3, #8]
  t167.re = t299.re;
 8002e8c:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002e90:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002e94:	f507 626a 	add.w	r2, r7, #3744	; 0xea0
 8002e98:	e9c2 3400 	strd	r3, r4, [r2]
  t167.im = theta2;
 8002e9c:	f507 626a 	add.w	r2, r7, #3744	; 0xea0
 8002ea0:	4b84      	ldr	r3, [pc, #528]	; (80030b4 <G_q+0xc94>)
 8002ea2:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002ea6:	4439      	add	r1, r7
 8002ea8:	440b      	add	r3, r1
 8002eaa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002eae:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t166.re = -t299.re;
 8002eb2:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002eb6:	ed93 7b00 	vldr	d7, [r3]
 8002eba:	eeb1 7b47 	vneg.f64	d7, d7
 8002ebe:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 8002ec2:	ed83 7b00 	vstr	d7, [r3]
  t166.im = -theta2;
 8002ec6:	4b7b      	ldr	r3, [pc, #492]	; (80030b4 <G_q+0xc94>)
 8002ec8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002ecc:	443a      	add	r2, r7
 8002ece:	4413      	add	r3, r2
 8002ed0:	ed93 7b00 	vldr	d7, [r3]
 8002ed4:	eeb1 7b47 	vneg.f64	d7, d7
 8002ed8:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 8002edc:	ed83 7b02 	vstr	d7, [r3, #8]
  t161.re = t299.re;
 8002ee0:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002ee4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002ee8:	f507 6268 	add.w	r2, r7, #3712	; 0xe80
 8002eec:	e9c2 3400 	strd	r3, r4, [r2]
  t161.im = theta2;
 8002ef0:	f507 6268 	add.w	r2, r7, #3712	; 0xe80
 8002ef4:	4b6f      	ldr	r3, [pc, #444]	; (80030b4 <G_q+0xc94>)
 8002ef6:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002efa:	4439      	add	r1, r7
 8002efc:	440b      	add	r3, r1
 8002efe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002f02:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t160.re = -t299.re;
 8002f06:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002f0a:	ed93 7b00 	vldr	d7, [r3]
 8002f0e:	eeb1 7b47 	vneg.f64	d7, d7
 8002f12:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 8002f16:	ed83 7b00 	vstr	d7, [r3]
  t160.im = -theta2;
 8002f1a:	4b66      	ldr	r3, [pc, #408]	; (80030b4 <G_q+0xc94>)
 8002f1c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002f20:	443a      	add	r2, r7
 8002f22:	4413      	add	r3, r2
 8002f24:	ed93 7b00 	vldr	d7, [r3]
 8002f28:	eeb1 7b47 	vneg.f64	d7, d7
 8002f2c:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 8002f30:	ed83 7b02 	vstr	d7, [r3, #8]
  t157.re = t299.re;
 8002f34:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002f38:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002f3c:	f507 6266 	add.w	r2, r7, #3680	; 0xe60
 8002f40:	e9c2 3400 	strd	r3, r4, [r2]
  t157.im = theta2;
 8002f44:	f507 6266 	add.w	r2, r7, #3680	; 0xe60
 8002f48:	4b5a      	ldr	r3, [pc, #360]	; (80030b4 <G_q+0xc94>)
 8002f4a:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002f4e:	4439      	add	r1, r7
 8002f50:	440b      	add	r3, r1
 8002f52:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002f56:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t156.re = -t299.re;
 8002f5a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002f5e:	ed93 7b00 	vldr	d7, [r3]
 8002f62:	eeb1 7b47 	vneg.f64	d7, d7
 8002f66:	f507 6365 	add.w	r3, r7, #3664	; 0xe50
 8002f6a:	ed83 7b00 	vstr	d7, [r3]
  t156.im = -theta2;
 8002f6e:	4b51      	ldr	r3, [pc, #324]	; (80030b4 <G_q+0xc94>)
 8002f70:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002f74:	443a      	add	r2, r7
 8002f76:	4413      	add	r3, r2
 8002f78:	ed93 7b00 	vldr	d7, [r3]
 8002f7c:	eeb1 7b47 	vneg.f64	d7, d7
 8002f80:	f507 6365 	add.w	r3, r7, #3664	; 0xe50
 8002f84:	ed83 7b02 	vstr	d7, [r3, #8]
  t149.re = t299.re;
 8002f88:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002f8c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002f90:	f507 6264 	add.w	r2, r7, #3648	; 0xe40
 8002f94:	e9c2 3400 	strd	r3, r4, [r2]
  t149.im = theta2;
 8002f98:	f507 6264 	add.w	r2, r7, #3648	; 0xe40
 8002f9c:	4b45      	ldr	r3, [pc, #276]	; (80030b4 <G_q+0xc94>)
 8002f9e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002fa2:	4439      	add	r1, r7
 8002fa4:	440b      	add	r3, r1
 8002fa6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002faa:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t148.re = -t299.re;
 8002fae:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002fb2:	ed93 7b00 	vldr	d7, [r3]
 8002fb6:	eeb1 7b47 	vneg.f64	d7, d7
 8002fba:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 8002fbe:	ed83 7b00 	vstr	d7, [r3]
  t148.im = -theta2;
 8002fc2:	4b3c      	ldr	r3, [pc, #240]	; (80030b4 <G_q+0xc94>)
 8002fc4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002fc8:	443a      	add	r2, r7
 8002fca:	4413      	add	r3, r2
 8002fcc:	ed93 7b00 	vldr	d7, [r3]
 8002fd0:	eeb1 7b47 	vneg.f64	d7, d7
 8002fd4:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 8002fd8:	ed83 7b02 	vstr	d7, [r3, #8]
  t147.re = t299.re;
 8002fdc:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002fe0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002fe4:	f507 6262 	add.w	r2, r7, #3616	; 0xe20
 8002fe8:	e9c2 3400 	strd	r3, r4, [r2]
  t147.im = theta2;
 8002fec:	f507 6262 	add.w	r2, r7, #3616	; 0xe20
 8002ff0:	4b30      	ldr	r3, [pc, #192]	; (80030b4 <G_q+0xc94>)
 8002ff2:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002ff6:	4439      	add	r1, r7
 8002ff8:	440b      	add	r3, r1
 8002ffa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002ffe:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t146.re = -t299.re;
 8003002:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003006:	ed93 7b00 	vldr	d7, [r3]
 800300a:	eeb1 7b47 	vneg.f64	d7, d7
 800300e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8003012:	ed83 7b00 	vstr	d7, [r3]
  t146.im = -theta2;
 8003016:	4b27      	ldr	r3, [pc, #156]	; (80030b4 <G_q+0xc94>)
 8003018:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800301c:	443a      	add	r2, r7
 800301e:	4413      	add	r3, r2
 8003020:	ed93 7b00 	vldr	d7, [r3]
 8003024:	eeb1 7b47 	vneg.f64	d7, d7
 8003028:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 800302c:	ed83 7b02 	vstr	d7, [r3, #8]
  t143.re = t299.re;
 8003030:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003034:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003038:	f507 6260 	add.w	r2, r7, #3584	; 0xe00
 800303c:	e9c2 3400 	strd	r3, r4, [r2]
  t143.im = theta2;
 8003040:	f507 6260 	add.w	r2, r7, #3584	; 0xe00
 8003044:	4b1b      	ldr	r3, [pc, #108]	; (80030b4 <G_q+0xc94>)
 8003046:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800304a:	4439      	add	r1, r7
 800304c:	440b      	add	r3, r1
 800304e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003052:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t142.re = -t299.re;
 8003056:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800305a:	ed93 7b00 	vldr	d7, [r3]
 800305e:	eeb1 7b47 	vneg.f64	d7, d7
 8003062:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 8003066:	ed83 7b00 	vstr	d7, [r3]
  t142.im = -theta2;
 800306a:	4b12      	ldr	r3, [pc, #72]	; (80030b4 <G_q+0xc94>)
 800306c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003070:	443a      	add	r2, r7
 8003072:	4413      	add	r3, r2
 8003074:	ed93 7b00 	vldr	d7, [r3]
 8003078:	eeb1 7b47 	vneg.f64	d7, d7
 800307c:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 8003080:	ed83 7b02 	vstr	d7, [r3, #8]
  t139.re = t299.re;
 8003084:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003088:	e9d3 3400 	ldrd	r3, r4, [r3]
 800308c:	f507 625e 	add.w	r2, r7, #3552	; 0xde0
 8003090:	e9c2 3400 	strd	r3, r4, [r2]
  t139.im = theta2;
 8003094:	f507 625e 	add.w	r2, r7, #3552	; 0xde0
 8003098:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <G_q+0xc94>)
 800309a:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800309e:	4439      	add	r1, r7
 80030a0:	440b      	add	r3, r1
 80030a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80030a6:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t138.re = -t299.re;
 80030aa:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80030ae:	ed93 7b00 	vldr	d7, [r3]
 80030b2:	e001      	b.n	80030b8 <G_q+0xc98>
 80030b4:	ffffec50 	.word	0xffffec50
 80030b8:	eeb1 7b47 	vneg.f64	d7, d7
 80030bc:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 80030c0:	ed83 7b00 	vstr	d7, [r3]
  t138.im = -theta2;
 80030c4:	4bc4      	ldr	r3, [pc, #784]	; (80033d8 <G_q+0xfb8>)
 80030c6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80030ca:	443a      	add	r2, r7
 80030cc:	4413      	add	r3, r2
 80030ce:	ed93 7b00 	vldr	d7, [r3]
 80030d2:	eeb1 7b47 	vneg.f64	d7, d7
 80030d6:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 80030da:	ed83 7b02 	vstr	d7, [r3, #8]
  t133.re = t299.re;
 80030de:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80030e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80030e6:	f507 625c 	add.w	r2, r7, #3520	; 0xdc0
 80030ea:	e9c2 3400 	strd	r3, r4, [r2]
  t133.im = theta2;
 80030ee:	f507 625c 	add.w	r2, r7, #3520	; 0xdc0
 80030f2:	4bb9      	ldr	r3, [pc, #740]	; (80033d8 <G_q+0xfb8>)
 80030f4:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80030f8:	4439      	add	r1, r7
 80030fa:	440b      	add	r3, r1
 80030fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003100:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t132.re = -t299.re;
 8003104:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003108:	ed93 7b00 	vldr	d7, [r3]
 800310c:	eeb1 7b47 	vneg.f64	d7, d7
 8003110:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 8003114:	ed83 7b00 	vstr	d7, [r3]
  t132.im = -theta2;
 8003118:	4baf      	ldr	r3, [pc, #700]	; (80033d8 <G_q+0xfb8>)
 800311a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800311e:	443a      	add	r2, r7
 8003120:	4413      	add	r3, r2
 8003122:	ed93 7b00 	vldr	d7, [r3]
 8003126:	eeb1 7b47 	vneg.f64	d7, d7
 800312a:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 800312e:	ed83 7b02 	vstr	d7, [r3, #8]
  t127.re = t299.re;
 8003132:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003136:	e9d3 3400 	ldrd	r3, r4, [r3]
 800313a:	f507 625a 	add.w	r2, r7, #3488	; 0xda0
 800313e:	e9c2 3400 	strd	r3, r4, [r2]
  t127.im = theta2;
 8003142:	f507 625a 	add.w	r2, r7, #3488	; 0xda0
 8003146:	4ba4      	ldr	r3, [pc, #656]	; (80033d8 <G_q+0xfb8>)
 8003148:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800314c:	4439      	add	r1, r7
 800314e:	440b      	add	r3, r1
 8003150:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003154:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t126.re = -t299.re;
 8003158:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800315c:	ed93 7b00 	vldr	d7, [r3]
 8003160:	eeb1 7b47 	vneg.f64	d7, d7
 8003164:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 8003168:	ed83 7b00 	vstr	d7, [r3]
  t126.im = -theta2;
 800316c:	4b9a      	ldr	r3, [pc, #616]	; (80033d8 <G_q+0xfb8>)
 800316e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003172:	443a      	add	r2, r7
 8003174:	4413      	add	r3, r2
 8003176:	ed93 7b00 	vldr	d7, [r3]
 800317a:	eeb1 7b47 	vneg.f64	d7, d7
 800317e:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 8003182:	ed83 7b02 	vstr	d7, [r3, #8]
  t119.re = t299.re;
 8003186:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800318a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800318e:	f507 6258 	add.w	r2, r7, #3456	; 0xd80
 8003192:	e9c2 3400 	strd	r3, r4, [r2]
  t119.im = theta2;
 8003196:	f507 6258 	add.w	r2, r7, #3456	; 0xd80
 800319a:	4b8f      	ldr	r3, [pc, #572]	; (80033d8 <G_q+0xfb8>)
 800319c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80031a0:	4439      	add	r1, r7
 80031a2:	440b      	add	r3, r1
 80031a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80031a8:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t118.re = -t299.re;
 80031ac:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80031b0:	ed93 7b00 	vldr	d7, [r3]
 80031b4:	eeb1 7b47 	vneg.f64	d7, d7
 80031b8:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 80031bc:	ed83 7b00 	vstr	d7, [r3]
  t118.im = -theta2;
 80031c0:	4b85      	ldr	r3, [pc, #532]	; (80033d8 <G_q+0xfb8>)
 80031c2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80031c6:	443a      	add	r2, r7
 80031c8:	4413      	add	r3, r2
 80031ca:	ed93 7b00 	vldr	d7, [r3]
 80031ce:	eeb1 7b47 	vneg.f64	d7, d7
 80031d2:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 80031d6:	ed83 7b02 	vstr	d7, [r3, #8]
  t117.re = t299.re;
 80031da:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80031de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80031e2:	f507 6256 	add.w	r2, r7, #3424	; 0xd60
 80031e6:	e9c2 3400 	strd	r3, r4, [r2]
  t117.im = theta2;
 80031ea:	f507 6256 	add.w	r2, r7, #3424	; 0xd60
 80031ee:	4b7a      	ldr	r3, [pc, #488]	; (80033d8 <G_q+0xfb8>)
 80031f0:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80031f4:	4439      	add	r1, r7
 80031f6:	440b      	add	r3, r1
 80031f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80031fc:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t116.re = -t299.re;
 8003200:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003204:	ed93 7b00 	vldr	d7, [r3]
 8003208:	eeb1 7b47 	vneg.f64	d7, d7
 800320c:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8003210:	ed83 7b00 	vstr	d7, [r3]
  t116.im = -theta2;
 8003214:	4b70      	ldr	r3, [pc, #448]	; (80033d8 <G_q+0xfb8>)
 8003216:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800321a:	443a      	add	r2, r7
 800321c:	4413      	add	r3, r2
 800321e:	ed93 7b00 	vldr	d7, [r3]
 8003222:	eeb1 7b47 	vneg.f64	d7, d7
 8003226:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 800322a:	ed83 7b02 	vstr	d7, [r3, #8]
  t111.re = t299.re;
 800322e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003232:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003236:	f507 6254 	add.w	r2, r7, #3392	; 0xd40
 800323a:	e9c2 3400 	strd	r3, r4, [r2]
  t111.im = theta2;
 800323e:	f507 6254 	add.w	r2, r7, #3392	; 0xd40
 8003242:	4b65      	ldr	r3, [pc, #404]	; (80033d8 <G_q+0xfb8>)
 8003244:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003248:	4439      	add	r1, r7
 800324a:	440b      	add	r3, r1
 800324c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003250:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t110.re = -t299.re;
 8003254:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003258:	ed93 7b00 	vldr	d7, [r3]
 800325c:	eeb1 7b47 	vneg.f64	d7, d7
 8003260:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8003264:	ed83 7b00 	vstr	d7, [r3]
  t110.im = -theta2;
 8003268:	4b5b      	ldr	r3, [pc, #364]	; (80033d8 <G_q+0xfb8>)
 800326a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800326e:	443a      	add	r2, r7
 8003270:	4413      	add	r3, r2
 8003272:	ed93 7b00 	vldr	d7, [r3]
 8003276:	eeb1 7b47 	vneg.f64	d7, d7
 800327a:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800327e:	ed83 7b02 	vstr	d7, [r3, #8]
  t105.re = t299.re;
 8003282:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003286:	e9d3 3400 	ldrd	r3, r4, [r3]
 800328a:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 800328e:	e9c2 3400 	strd	r3, r4, [r2]
  t105.im = theta2;
 8003292:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8003296:	4b50      	ldr	r3, [pc, #320]	; (80033d8 <G_q+0xfb8>)
 8003298:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800329c:	4439      	add	r1, r7
 800329e:	440b      	add	r3, r1
 80032a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80032a4:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t104.re = -t299.re;
 80032a8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80032ac:	ed93 7b00 	vldr	d7, [r3]
 80032b0:	eeb1 7b47 	vneg.f64	d7, d7
 80032b4:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 80032b8:	ed83 7b00 	vstr	d7, [r3]
  t104.im = -theta2;
 80032bc:	4b46      	ldr	r3, [pc, #280]	; (80033d8 <G_q+0xfb8>)
 80032be:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80032c2:	443a      	add	r2, r7
 80032c4:	4413      	add	r3, r2
 80032c6:	ed93 7b00 	vldr	d7, [r3]
 80032ca:	eeb1 7b47 	vneg.f64	d7, d7
 80032ce:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 80032d2:	ed83 7b02 	vstr	d7, [r3, #8]
  t97.re = t299.re;
 80032d6:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80032da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80032de:	f507 6250 	add.w	r2, r7, #3328	; 0xd00
 80032e2:	e9c2 3400 	strd	r3, r4, [r2]
  t97.im = theta2;
 80032e6:	f507 6250 	add.w	r2, r7, #3328	; 0xd00
 80032ea:	4b3b      	ldr	r3, [pc, #236]	; (80033d8 <G_q+0xfb8>)
 80032ec:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80032f0:	4439      	add	r1, r7
 80032f2:	440b      	add	r3, r1
 80032f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80032f8:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t96.re = -t299.re;
 80032fc:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003300:	ed93 7b00 	vldr	d7, [r3]
 8003304:	eeb1 7b47 	vneg.f64	d7, d7
 8003308:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 800330c:	ed83 7b00 	vstr	d7, [r3]
  t96.im = -theta2;
 8003310:	4b31      	ldr	r3, [pc, #196]	; (80033d8 <G_q+0xfb8>)
 8003312:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003316:	443a      	add	r2, r7
 8003318:	4413      	add	r3, r2
 800331a:	ed93 7b00 	vldr	d7, [r3]
 800331e:	eeb1 7b47 	vneg.f64	d7, d7
 8003322:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8003326:	ed83 7b02 	vstr	d7, [r3, #8]
  t95.re = t299.re;
 800332a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800332e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003332:	f507 624e 	add.w	r2, r7, #3296	; 0xce0
 8003336:	e9c2 3400 	strd	r3, r4, [r2]
  t95.im = theta2;
 800333a:	f507 624e 	add.w	r2, r7, #3296	; 0xce0
 800333e:	4b26      	ldr	r3, [pc, #152]	; (80033d8 <G_q+0xfb8>)
 8003340:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003344:	4439      	add	r1, r7
 8003346:	440b      	add	r3, r1
 8003348:	e9d3 3400 	ldrd	r3, r4, [r3]
 800334c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t94.re = -t299.re;
 8003350:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003354:	ed93 7b00 	vldr	d7, [r3]
 8003358:	eeb1 7b47 	vneg.f64	d7, d7
 800335c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8003360:	ed83 7b00 	vstr	d7, [r3]
  t94.im = -theta2;
 8003364:	4b1c      	ldr	r3, [pc, #112]	; (80033d8 <G_q+0xfb8>)
 8003366:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800336a:	443a      	add	r2, r7
 800336c:	4413      	add	r3, r2
 800336e:	ed93 7b00 	vldr	d7, [r3]
 8003372:	eeb1 7b47 	vneg.f64	d7, d7
 8003376:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800337a:	ed83 7b02 	vstr	d7, [r3, #8]
  t83.re = t299.re;
 800337e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003382:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003386:	f507 624c 	add.w	r2, r7, #3264	; 0xcc0
 800338a:	e9c2 3400 	strd	r3, r4, [r2]
  t83.im = theta2;
 800338e:	f507 624c 	add.w	r2, r7, #3264	; 0xcc0
 8003392:	4b11      	ldr	r3, [pc, #68]	; (80033d8 <G_q+0xfb8>)
 8003394:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003398:	4439      	add	r1, r7
 800339a:	440b      	add	r3, r1
 800339c:	e9d3 3400 	ldrd	r3, r4, [r3]
 80033a0:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t82.re = -t299.re;
 80033a4:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80033a8:	ed93 7b00 	vldr	d7, [r3]
 80033ac:	eeb1 7b47 	vneg.f64	d7, d7
 80033b0:	f507 634b 	add.w	r3, r7, #3248	; 0xcb0
 80033b4:	ed83 7b00 	vstr	d7, [r3]
  t82.im = -theta2;
 80033b8:	4b07      	ldr	r3, [pc, #28]	; (80033d8 <G_q+0xfb8>)
 80033ba:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80033be:	443a      	add	r2, r7
 80033c0:	4413      	add	r3, r2
 80033c2:	ed93 7b00 	vldr	d7, [r3]
 80033c6:	eeb1 7b47 	vneg.f64	d7, d7
 80033ca:	f507 634b 	add.w	r3, r7, #3248	; 0xcb0
 80033ce:	ed83 7b02 	vstr	d7, [r3, #8]
  t79.re = t299.re;
 80033d2:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80033d6:	e001      	b.n	80033dc <G_q+0xfbc>
 80033d8:	ffffec50 	.word	0xffffec50
 80033dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80033e0:	f507 624a 	add.w	r2, r7, #3232	; 0xca0
 80033e4:	e9c2 3400 	strd	r3, r4, [r2]
  t79.im = theta2;
 80033e8:	f507 624a 	add.w	r2, r7, #3232	; 0xca0
 80033ec:	4bc3      	ldr	r3, [pc, #780]	; (80036fc <G_q+0x12dc>)
 80033ee:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80033f2:	4439      	add	r1, r7
 80033f4:	440b      	add	r3, r1
 80033f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80033fa:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t78.re = -t299.re;
 80033fe:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003402:	ed93 7b00 	vldr	d7, [r3]
 8003406:	eeb1 7b47 	vneg.f64	d7, d7
 800340a:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 800340e:	ed83 7b00 	vstr	d7, [r3]
  t78.im = -theta2;
 8003412:	4bba      	ldr	r3, [pc, #744]	; (80036fc <G_q+0x12dc>)
 8003414:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003418:	443a      	add	r2, r7
 800341a:	4413      	add	r3, r2
 800341c:	ed93 7b00 	vldr	d7, [r3]
 8003420:	eeb1 7b47 	vneg.f64	d7, d7
 8003424:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8003428:	ed83 7b02 	vstr	d7, [r3, #8]
  t77.re = t299.re;
 800342c:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003430:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003434:	f507 6248 	add.w	r2, r7, #3200	; 0xc80
 8003438:	e9c2 3400 	strd	r3, r4, [r2]
  t77.im = theta2;
 800343c:	f507 6248 	add.w	r2, r7, #3200	; 0xc80
 8003440:	4bae      	ldr	r3, [pc, #696]	; (80036fc <G_q+0x12dc>)
 8003442:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003446:	4439      	add	r1, r7
 8003448:	440b      	add	r3, r1
 800344a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800344e:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t76.re = -t299.re;
 8003452:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003456:	ed93 7b00 	vldr	d7, [r3]
 800345a:	eeb1 7b47 	vneg.f64	d7, d7
 800345e:	f507 6347 	add.w	r3, r7, #3184	; 0xc70
 8003462:	ed83 7b00 	vstr	d7, [r3]
  t76.im = -theta2;
 8003466:	4ba5      	ldr	r3, [pc, #660]	; (80036fc <G_q+0x12dc>)
 8003468:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800346c:	443a      	add	r2, r7
 800346e:	4413      	add	r3, r2
 8003470:	ed93 7b00 	vldr	d7, [r3]
 8003474:	eeb1 7b47 	vneg.f64	d7, d7
 8003478:	f507 6347 	add.w	r3, r7, #3184	; 0xc70
 800347c:	ed83 7b02 	vstr	d7, [r3, #8]
  t71.re = t299.re;
 8003480:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003484:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003488:	f507 6246 	add.w	r2, r7, #3168	; 0xc60
 800348c:	e9c2 3400 	strd	r3, r4, [r2]
  t71.im = theta2;
 8003490:	f507 6246 	add.w	r2, r7, #3168	; 0xc60
 8003494:	4b99      	ldr	r3, [pc, #612]	; (80036fc <G_q+0x12dc>)
 8003496:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800349a:	4439      	add	r1, r7
 800349c:	440b      	add	r3, r1
 800349e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80034a2:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t70.re = -t299.re;
 80034a6:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80034aa:	ed93 7b00 	vldr	d7, [r3]
 80034ae:	eeb1 7b47 	vneg.f64	d7, d7
 80034b2:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 80034b6:	ed83 7b00 	vstr	d7, [r3]
  t70.im = -theta2;
 80034ba:	4b90      	ldr	r3, [pc, #576]	; (80036fc <G_q+0x12dc>)
 80034bc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80034c0:	443a      	add	r2, r7
 80034c2:	4413      	add	r3, r2
 80034c4:	ed93 7b00 	vldr	d7, [r3]
 80034c8:	eeb1 7b47 	vneg.f64	d7, d7
 80034cc:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 80034d0:	ed83 7b02 	vstr	d7, [r3, #8]
  t67.re = t299.re;
 80034d4:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80034d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80034dc:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 80034e0:	e9c2 3400 	strd	r3, r4, [r2]
  t67.im = theta2;
 80034e4:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 80034e8:	4b84      	ldr	r3, [pc, #528]	; (80036fc <G_q+0x12dc>)
 80034ea:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80034ee:	4439      	add	r1, r7
 80034f0:	440b      	add	r3, r1
 80034f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80034f6:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t66.re = -t299.re;
 80034fa:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80034fe:	ed93 7b00 	vldr	d7, [r3]
 8003502:	eeb1 7b47 	vneg.f64	d7, d7
 8003506:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 800350a:	ed83 7b00 	vstr	d7, [r3]
  t66.im = -theta2;
 800350e:	4b7b      	ldr	r3, [pc, #492]	; (80036fc <G_q+0x12dc>)
 8003510:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003514:	443a      	add	r2, r7
 8003516:	4413      	add	r3, r2
 8003518:	ed93 7b00 	vldr	d7, [r3]
 800351c:	eeb1 7b47 	vneg.f64	d7, d7
 8003520:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003524:	ed83 7b02 	vstr	d7, [r3, #8]
  t63.re = t299.re;
 8003528:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800352c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003530:	f507 6242 	add.w	r2, r7, #3104	; 0xc20
 8003534:	e9c2 3400 	strd	r3, r4, [r2]
  t63.im = theta2;
 8003538:	f507 6242 	add.w	r2, r7, #3104	; 0xc20
 800353c:	4b6f      	ldr	r3, [pc, #444]	; (80036fc <G_q+0x12dc>)
 800353e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003542:	4439      	add	r1, r7
 8003544:	440b      	add	r3, r1
 8003546:	e9d3 3400 	ldrd	r3, r4, [r3]
 800354a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t62.re = -t299.re;
 800354e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003552:	ed93 7b00 	vldr	d7, [r3]
 8003556:	eeb1 7b47 	vneg.f64	d7, d7
 800355a:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 800355e:	ed83 7b00 	vstr	d7, [r3]
  t62.im = -theta2;
 8003562:	4b66      	ldr	r3, [pc, #408]	; (80036fc <G_q+0x12dc>)
 8003564:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003568:	443a      	add	r2, r7
 800356a:	4413      	add	r3, r2
 800356c:	ed93 7b00 	vldr	d7, [r3]
 8003570:	eeb1 7b47 	vneg.f64	d7, d7
 8003574:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8003578:	ed83 7b02 	vstr	d7, [r3, #8]
  t61.re = t299.re;
 800357c:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003580:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003584:	f507 6240 	add.w	r2, r7, #3072	; 0xc00
 8003588:	e9c2 3400 	strd	r3, r4, [r2]
  t61.im = theta2;
 800358c:	f507 6240 	add.w	r2, r7, #3072	; 0xc00
 8003590:	4b5a      	ldr	r3, [pc, #360]	; (80036fc <G_q+0x12dc>)
 8003592:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003596:	4439      	add	r1, r7
 8003598:	440b      	add	r3, r1
 800359a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800359e:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t60.re = -t299.re;
 80035a2:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80035a6:	ed93 7b00 	vldr	d7, [r3]
 80035aa:	eeb1 7b47 	vneg.f64	d7, d7
 80035ae:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 80035b2:	ed83 7b00 	vstr	d7, [r3]
  t60.im = -theta2;
 80035b6:	4b51      	ldr	r3, [pc, #324]	; (80036fc <G_q+0x12dc>)
 80035b8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80035bc:	443a      	add	r2, r7
 80035be:	4413      	add	r3, r2
 80035c0:	ed93 7b00 	vldr	d7, [r3]
 80035c4:	eeb1 7b47 	vneg.f64	d7, d7
 80035c8:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 80035cc:	ed83 7b02 	vstr	d7, [r3, #8]
  t57.re = t299.re;
 80035d0:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80035d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80035d8:	f507 623e 	add.w	r2, r7, #3040	; 0xbe0
 80035dc:	e9c2 3400 	strd	r3, r4, [r2]
  t57.im = theta2;
 80035e0:	f507 623e 	add.w	r2, r7, #3040	; 0xbe0
 80035e4:	4b45      	ldr	r3, [pc, #276]	; (80036fc <G_q+0x12dc>)
 80035e6:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80035ea:	4439      	add	r1, r7
 80035ec:	440b      	add	r3, r1
 80035ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80035f2:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t56.re = -t299.re;
 80035f6:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80035fa:	ed93 7b00 	vldr	d7, [r3]
 80035fe:	eeb1 7b47 	vneg.f64	d7, d7
 8003602:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8003606:	ed83 7b00 	vstr	d7, [r3]
  t56.im = -theta2;
 800360a:	4b3c      	ldr	r3, [pc, #240]	; (80036fc <G_q+0x12dc>)
 800360c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003610:	443a      	add	r2, r7
 8003612:	4413      	add	r3, r2
 8003614:	ed93 7b00 	vldr	d7, [r3]
 8003618:	eeb1 7b47 	vneg.f64	d7, d7
 800361c:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8003620:	ed83 7b02 	vstr	d7, [r3, #8]
  t50.re = t299.re;
 8003624:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003628:	e9d3 3400 	ldrd	r3, r4, [r3]
 800362c:	f507 623c 	add.w	r2, r7, #3008	; 0xbc0
 8003630:	e9c2 3400 	strd	r3, r4, [r2]
  t50.im = theta2;
 8003634:	f507 623c 	add.w	r2, r7, #3008	; 0xbc0
 8003638:	4b30      	ldr	r3, [pc, #192]	; (80036fc <G_q+0x12dc>)
 800363a:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800363e:	4439      	add	r1, r7
 8003640:	440b      	add	r3, r1
 8003642:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003646:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t49.re = -t299.re;
 800364a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800364e:	ed93 7b00 	vldr	d7, [r3]
 8003652:	eeb1 7b47 	vneg.f64	d7, d7
 8003656:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 800365a:	ed83 7b00 	vstr	d7, [r3]
  t49.im = -theta2;
 800365e:	4b27      	ldr	r3, [pc, #156]	; (80036fc <G_q+0x12dc>)
 8003660:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003664:	443a      	add	r2, r7
 8003666:	4413      	add	r3, r2
 8003668:	ed93 7b00 	vldr	d7, [r3]
 800366c:	eeb1 7b47 	vneg.f64	d7, d7
 8003670:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 8003674:	ed83 7b02 	vstr	d7, [r3, #8]
  t46.re = t299.re;
 8003678:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800367c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003680:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8003684:	e9c2 3400 	strd	r3, r4, [r2]
  t46.im = theta2;
 8003688:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 800368c:	4b1b      	ldr	r3, [pc, #108]	; (80036fc <G_q+0x12dc>)
 800368e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003692:	4439      	add	r1, r7
 8003694:	440b      	add	r3, r1
 8003696:	e9d3 3400 	ldrd	r3, r4, [r3]
 800369a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t45.re = -t299.re;
 800369e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80036a2:	ed93 7b00 	vldr	d7, [r3]
 80036a6:	eeb1 7b47 	vneg.f64	d7, d7
 80036aa:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 80036ae:	ed83 7b00 	vstr	d7, [r3]
  t45.im = -theta2;
 80036b2:	4b12      	ldr	r3, [pc, #72]	; (80036fc <G_q+0x12dc>)
 80036b4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80036b8:	443a      	add	r2, r7
 80036ba:	4413      	add	r3, r2
 80036bc:	ed93 7b00 	vldr	d7, [r3]
 80036c0:	eeb1 7b47 	vneg.f64	d7, d7
 80036c4:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 80036c8:	ed83 7b02 	vstr	d7, [r3, #8]
  t44.re = t299.re;
 80036cc:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80036d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80036d4:	f507 6238 	add.w	r2, r7, #2944	; 0xb80
 80036d8:	e9c2 3400 	strd	r3, r4, [r2]
  t44.im = theta2;
 80036dc:	f507 6238 	add.w	r2, r7, #2944	; 0xb80
 80036e0:	4b06      	ldr	r3, [pc, #24]	; (80036fc <G_q+0x12dc>)
 80036e2:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80036e6:	4439      	add	r1, r7
 80036e8:	440b      	add	r3, r1
 80036ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 80036ee:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t43.re = -t299.re;
 80036f2:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80036f6:	ed93 7b00 	vldr	d7, [r3]
 80036fa:	e001      	b.n	8003700 <G_q+0x12e0>
 80036fc:	ffffec50 	.word	0xffffec50
 8003700:	eeb1 7b47 	vneg.f64	d7, d7
 8003704:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8003708:	ed83 7b00 	vstr	d7, [r3]
  t43.im = -theta2;
 800370c:	4bc6      	ldr	r3, [pc, #792]	; (8003a28 <G_q+0x1608>)
 800370e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003712:	443a      	add	r2, r7
 8003714:	4413      	add	r3, r2
 8003716:	ed93 7b00 	vldr	d7, [r3]
 800371a:	eeb1 7b47 	vneg.f64	d7, d7
 800371e:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8003722:	ed83 7b02 	vstr	d7, [r3, #8]
  t40.re = t299.re;
 8003726:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800372a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800372e:	f507 6236 	add.w	r2, r7, #2912	; 0xb60
 8003732:	e9c2 3400 	strd	r3, r4, [r2]
  t40.im = theta2;
 8003736:	f507 6236 	add.w	r2, r7, #2912	; 0xb60
 800373a:	4bbb      	ldr	r3, [pc, #748]	; (8003a28 <G_q+0x1608>)
 800373c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003740:	4439      	add	r1, r7
 8003742:	440b      	add	r3, r1
 8003744:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003748:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t39.re = -t299.re;
 800374c:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003750:	ed93 7b00 	vldr	d7, [r3]
 8003754:	eeb1 7b47 	vneg.f64	d7, d7
 8003758:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 800375c:	ed83 7b00 	vstr	d7, [r3]
  t39.im = -theta2;
 8003760:	4bb1      	ldr	r3, [pc, #708]	; (8003a28 <G_q+0x1608>)
 8003762:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003766:	443a      	add	r2, r7
 8003768:	4413      	add	r3, r2
 800376a:	ed93 7b00 	vldr	d7, [r3]
 800376e:	eeb1 7b47 	vneg.f64	d7, d7
 8003772:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8003776:	ed83 7b02 	vstr	d7, [r3, #8]
  t34.re = t299.re;
 800377a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800377e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003782:	f507 6234 	add.w	r2, r7, #2880	; 0xb40
 8003786:	e9c2 3400 	strd	r3, r4, [r2]
  t34.im = theta2;
 800378a:	f507 6234 	add.w	r2, r7, #2880	; 0xb40
 800378e:	4ba6      	ldr	r3, [pc, #664]	; (8003a28 <G_q+0x1608>)
 8003790:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003794:	4439      	add	r1, r7
 8003796:	440b      	add	r3, r1
 8003798:	e9d3 3400 	ldrd	r3, r4, [r3]
 800379c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t33.re = -t299.re;
 80037a0:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80037a4:	ed93 7b00 	vldr	d7, [r3]
 80037a8:	eeb1 7b47 	vneg.f64	d7, d7
 80037ac:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 80037b0:	ed83 7b00 	vstr	d7, [r3]
  t33.im = -theta2;
 80037b4:	4b9c      	ldr	r3, [pc, #624]	; (8003a28 <G_q+0x1608>)
 80037b6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80037ba:	443a      	add	r2, r7
 80037bc:	4413      	add	r3, r2
 80037be:	ed93 7b00 	vldr	d7, [r3]
 80037c2:	eeb1 7b47 	vneg.f64	d7, d7
 80037c6:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 80037ca:	ed83 7b02 	vstr	d7, [r3, #8]
  t30.re = t299.re;
 80037ce:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80037d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80037d6:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 80037da:	e9c2 3400 	strd	r3, r4, [r2]
  t30.im = theta2;
 80037de:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 80037e2:	4b91      	ldr	r3, [pc, #580]	; (8003a28 <G_q+0x1608>)
 80037e4:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80037e8:	4439      	add	r1, r7
 80037ea:	440b      	add	r3, r1
 80037ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 80037f0:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t29.re = -t299.re;
 80037f4:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80037f8:	ed93 7b00 	vldr	d7, [r3]
 80037fc:	eeb1 7b47 	vneg.f64	d7, d7
 8003800:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 8003804:	ed83 7b00 	vstr	d7, [r3]
  t29.im = -theta2;
 8003808:	4b87      	ldr	r3, [pc, #540]	; (8003a28 <G_q+0x1608>)
 800380a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800380e:	443a      	add	r2, r7
 8003810:	4413      	add	r3, r2
 8003812:	ed93 7b00 	vldr	d7, [r3]
 8003816:	eeb1 7b47 	vneg.f64	d7, d7
 800381a:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 800381e:	ed83 7b02 	vstr	d7, [r3, #8]
  t26.re = t299.re;
 8003822:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003826:	e9d3 3400 	ldrd	r3, r4, [r3]
 800382a:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 800382e:	e9c2 3400 	strd	r3, r4, [r2]
  t26.im = theta2;
 8003832:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8003836:	4b7c      	ldr	r3, [pc, #496]	; (8003a28 <G_q+0x1608>)
 8003838:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800383c:	4439      	add	r1, r7
 800383e:	440b      	add	r3, r1
 8003840:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003844:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t25.re = -t299.re;
 8003848:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800384c:	ed93 7b00 	vldr	d7, [r3]
 8003850:	eeb1 7b47 	vneg.f64	d7, d7
 8003854:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8003858:	ed83 7b00 	vstr	d7, [r3]
  t25.im = -theta2;
 800385c:	4b72      	ldr	r3, [pc, #456]	; (8003a28 <G_q+0x1608>)
 800385e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003862:	443a      	add	r2, r7
 8003864:	4413      	add	r3, r2
 8003866:	ed93 7b00 	vldr	d7, [r3]
 800386a:	eeb1 7b47 	vneg.f64	d7, d7
 800386e:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8003872:	ed83 7b02 	vstr	d7, [r3, #8]
  t24.re = t299.re;
 8003876:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800387a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800387e:	f507 622e 	add.w	r2, r7, #2784	; 0xae0
 8003882:	e9c2 3400 	strd	r3, r4, [r2]
  t24.im = theta2;
 8003886:	f507 622e 	add.w	r2, r7, #2784	; 0xae0
 800388a:	4b67      	ldr	r3, [pc, #412]	; (8003a28 <G_q+0x1608>)
 800388c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003890:	4439      	add	r1, r7
 8003892:	440b      	add	r3, r1
 8003894:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003898:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t23.re = -t299.re;
 800389c:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80038a0:	ed93 7b00 	vldr	d7, [r3]
 80038a4:	eeb1 7b47 	vneg.f64	d7, d7
 80038a8:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 80038ac:	ed83 7b00 	vstr	d7, [r3]
  t23.im = -theta2;
 80038b0:	4b5d      	ldr	r3, [pc, #372]	; (8003a28 <G_q+0x1608>)
 80038b2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80038b6:	443a      	add	r2, r7
 80038b8:	4413      	add	r3, r2
 80038ba:	ed93 7b00 	vldr	d7, [r3]
 80038be:	eeb1 7b47 	vneg.f64	d7, d7
 80038c2:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 80038c6:	ed83 7b02 	vstr	d7, [r3, #8]
  t15.re = t299.re;
 80038ca:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80038ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80038d2:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 80038d6:	e9c2 3400 	strd	r3, r4, [r2]
  t15.im = theta2;
 80038da:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 80038de:	4b52      	ldr	r3, [pc, #328]	; (8003a28 <G_q+0x1608>)
 80038e0:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80038e4:	4439      	add	r1, r7
 80038e6:	440b      	add	r3, r1
 80038e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80038ec:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t14.re = -t299.re;
 80038f0:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80038f4:	ed93 7b00 	vldr	d7, [r3]
 80038f8:	eeb1 7b47 	vneg.f64	d7, d7
 80038fc:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8003900:	ed83 7b00 	vstr	d7, [r3]
  t14.im = -theta2;
 8003904:	4b48      	ldr	r3, [pc, #288]	; (8003a28 <G_q+0x1608>)
 8003906:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800390a:	443a      	add	r2, r7
 800390c:	4413      	add	r3, r2
 800390e:	ed93 7b00 	vldr	d7, [r3]
 8003912:	eeb1 7b47 	vneg.f64	d7, d7
 8003916:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800391a:	ed83 7b02 	vstr	d7, [r3, #8]
  t11.re = t299.re;
 800391e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003922:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003926:	f507 622a 	add.w	r2, r7, #2720	; 0xaa0
 800392a:	e9c2 3400 	strd	r3, r4, [r2]
  t11.im = theta2;
 800392e:	f507 622a 	add.w	r2, r7, #2720	; 0xaa0
 8003932:	4b3d      	ldr	r3, [pc, #244]	; (8003a28 <G_q+0x1608>)
 8003934:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003938:	4439      	add	r1, r7
 800393a:	440b      	add	r3, r1
 800393c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003940:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t10.re = -t299.re;
 8003944:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003948:	ed93 7b00 	vldr	d7, [r3]
 800394c:	eeb1 7b47 	vneg.f64	d7, d7
 8003950:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8003954:	ed83 7b00 	vstr	d7, [r3]
  t10.im = -theta2;
 8003958:	4b33      	ldr	r3, [pc, #204]	; (8003a28 <G_q+0x1608>)
 800395a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800395e:	443a      	add	r2, r7
 8003960:	4413      	add	r3, r2
 8003962:	ed93 7b00 	vldr	d7, [r3]
 8003966:	eeb1 7b47 	vneg.f64	d7, d7
 800396a:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800396e:	ed83 7b02 	vstr	d7, [r3, #8]
  t6.re = t299.re;
 8003972:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003976:	e9d3 3400 	ldrd	r3, r4, [r3]
 800397a:	f507 6228 	add.w	r2, r7, #2688	; 0xa80
 800397e:	e9c2 3400 	strd	r3, r4, [r2]
  t6.im = theta2;
 8003982:	f507 6228 	add.w	r2, r7, #2688	; 0xa80
 8003986:	4b28      	ldr	r3, [pc, #160]	; (8003a28 <G_q+0x1608>)
 8003988:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800398c:	4439      	add	r1, r7
 800398e:	440b      	add	r3, r1
 8003990:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003994:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t5.re = -t299.re;
 8003998:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800399c:	ed93 7b00 	vldr	d7, [r3]
 80039a0:	eeb1 7b47 	vneg.f64	d7, d7
 80039a4:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 80039a8:	ed83 7b00 	vstr	d7, [r3]
  t5.im = -theta2;
 80039ac:	4b1e      	ldr	r3, [pc, #120]	; (8003a28 <G_q+0x1608>)
 80039ae:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80039b2:	443a      	add	r2, r7
 80039b4:	4413      	add	r3, r2
 80039b6:	ed93 7b00 	vldr	d7, [r3]
 80039ba:	eeb1 7b47 	vneg.f64	d7, d7
 80039be:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 80039c2:	ed83 7b02 	vstr	d7, [r3, #8]
  t4.re = t299.re;
 80039c6:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80039ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80039ce:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 80039d2:	e9c2 3400 	strd	r3, r4, [r2]
  t4.im = theta2;
 80039d6:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 80039da:	4b13      	ldr	r3, [pc, #76]	; (8003a28 <G_q+0x1608>)
 80039dc:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80039e0:	4439      	add	r1, r7
 80039e2:	440b      	add	r3, r1
 80039e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80039e8:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t3.re = -t299.re;
 80039ec:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80039f0:	ed93 7b00 	vldr	d7, [r3]
 80039f4:	eeb1 7b47 	vneg.f64	d7, d7
 80039f8:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 80039fc:	ed83 7b00 	vstr	d7, [r3]
  t3.im = -theta2;
 8003a00:	4b09      	ldr	r3, [pc, #36]	; (8003a28 <G_q+0x1608>)
 8003a02:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003a06:	443a      	add	r2, r7
 8003a08:	4413      	add	r3, r2
 8003a0a:	ed93 7b00 	vldr	d7, [r3]
 8003a0e:	eeb1 7b47 	vneg.f64	d7, d7
 8003a12:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8003a16:	ed83 7b02 	vstr	d7, [r3, #8]
  b_exp(&t3);
 8003a1a:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f00e fe0a 	bl	8012638 <b_exp>
 8003a24:	e002      	b.n	8003a2c <G_q+0x160c>
 8003a26:	bf00      	nop
 8003a28:	ffffec50 	.word	0xffffec50
  t297.re = theta3 * 0.0;
 8003a2c:	4bc6      	ldr	r3, [pc, #792]	; (8003d48 <G_q+0x1928>)
 8003a2e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003a32:	443a      	add	r2, r7
 8003a34:	4413      	add	r3, r2
 8003a36:	ed93 7b00 	vldr	d7, [r3]
 8003a3a:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8003d40 <G_q+0x1920>
 8003a3e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003a42:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003a46:	ed83 7b00 	vstr	d7, [r3]
  t297.im = theta3;
 8003a4a:	f507 6224 	add.w	r2, r7, #2624	; 0xa40
 8003a4e:	4bbe      	ldr	r3, [pc, #760]	; (8003d48 <G_q+0x1928>)
 8003a50:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003a54:	4439      	add	r1, r7
 8003a56:	440b      	add	r3, r1
 8003a58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003a5c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t296.re = -t297.re;
 8003a60:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003a64:	ed93 7b00 	vldr	d7, [r3]
 8003a68:	eeb1 7b47 	vneg.f64	d7, d7
 8003a6c:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8003a70:	ed83 7b00 	vstr	d7, [r3]
  t296.im = -theta3;
 8003a74:	4bb4      	ldr	r3, [pc, #720]	; (8003d48 <G_q+0x1928>)
 8003a76:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003a7a:	443a      	add	r2, r7
 8003a7c:	4413      	add	r3, r2
 8003a7e:	ed93 7b00 	vldr	d7, [r3]
 8003a82:	eeb1 7b47 	vneg.f64	d7, d7
 8003a86:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8003a8a:	ed83 7b02 	vstr	d7, [r3, #8]
  t295.re = t297.re;
 8003a8e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003a92:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003a96:	f507 6222 	add.w	r2, r7, #2592	; 0xa20
 8003a9a:	e9c2 3400 	strd	r3, r4, [r2]
  t295.im = theta3;
 8003a9e:	f507 6222 	add.w	r2, r7, #2592	; 0xa20
 8003aa2:	4ba9      	ldr	r3, [pc, #676]	; (8003d48 <G_q+0x1928>)
 8003aa4:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003aa8:	4439      	add	r1, r7
 8003aaa:	440b      	add	r3, r1
 8003aac:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ab0:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t294.re = -t297.re;
 8003ab4:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003ab8:	ed93 7b00 	vldr	d7, [r3]
 8003abc:	eeb1 7b47 	vneg.f64	d7, d7
 8003ac0:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8003ac4:	ed83 7b00 	vstr	d7, [r3]
  t294.im = -theta3;
 8003ac8:	4b9f      	ldr	r3, [pc, #636]	; (8003d48 <G_q+0x1928>)
 8003aca:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003ace:	443a      	add	r2, r7
 8003ad0:	4413      	add	r3, r2
 8003ad2:	ed93 7b00 	vldr	d7, [r3]
 8003ad6:	eeb1 7b47 	vneg.f64	d7, d7
 8003ada:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8003ade:	ed83 7b02 	vstr	d7, [r3, #8]
  t289.re = t297.re;
 8003ae2:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003ae6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003aea:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 8003aee:	e9c2 3400 	strd	r3, r4, [r2]
  t289.im = theta3;
 8003af2:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 8003af6:	4b94      	ldr	r3, [pc, #592]	; (8003d48 <G_q+0x1928>)
 8003af8:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003afc:	4439      	add	r1, r7
 8003afe:	440b      	add	r3, r1
 8003b00:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003b04:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t288.re = -t297.re;
 8003b08:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003b0c:	ed93 7b00 	vldr	d7, [r3]
 8003b10:	eeb1 7b47 	vneg.f64	d7, d7
 8003b14:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8003b18:	ed83 7b00 	vstr	d7, [r3]
  t288.im = -theta3;
 8003b1c:	4b8a      	ldr	r3, [pc, #552]	; (8003d48 <G_q+0x1928>)
 8003b1e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003b22:	443a      	add	r2, r7
 8003b24:	4413      	add	r3, r2
 8003b26:	ed93 7b00 	vldr	d7, [r3]
 8003b2a:	eeb1 7b47 	vneg.f64	d7, d7
 8003b2e:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8003b32:	ed83 7b02 	vstr	d7, [r3, #8]
  t283.re = t297.re;
 8003b36:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003b3a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003b3e:	f507 621e 	add.w	r2, r7, #2528	; 0x9e0
 8003b42:	e9c2 3400 	strd	r3, r4, [r2]
  t283.im = theta3;
 8003b46:	f507 621e 	add.w	r2, r7, #2528	; 0x9e0
 8003b4a:	4b7f      	ldr	r3, [pc, #508]	; (8003d48 <G_q+0x1928>)
 8003b4c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003b50:	4439      	add	r1, r7
 8003b52:	440b      	add	r3, r1
 8003b54:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003b58:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t282.re = -t297.re;
 8003b5c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003b60:	ed93 7b00 	vldr	d7, [r3]
 8003b64:	eeb1 7b47 	vneg.f64	d7, d7
 8003b68:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8003b6c:	ed83 7b00 	vstr	d7, [r3]
  t282.im = -theta3;
 8003b70:	4b75      	ldr	r3, [pc, #468]	; (8003d48 <G_q+0x1928>)
 8003b72:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003b76:	443a      	add	r2, r7
 8003b78:	4413      	add	r3, r2
 8003b7a:	ed93 7b00 	vldr	d7, [r3]
 8003b7e:	eeb1 7b47 	vneg.f64	d7, d7
 8003b82:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8003b86:	ed83 7b02 	vstr	d7, [r3, #8]
  t275.re = t297.re;
 8003b8a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003b8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003b92:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8003b96:	e9c2 3400 	strd	r3, r4, [r2]
  t275.im = theta3;
 8003b9a:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8003b9e:	4b6a      	ldr	r3, [pc, #424]	; (8003d48 <G_q+0x1928>)
 8003ba0:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003ba4:	4439      	add	r1, r7
 8003ba6:	440b      	add	r3, r1
 8003ba8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003bac:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t274.re = -t297.re;
 8003bb0:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003bb4:	ed93 7b00 	vldr	d7, [r3]
 8003bb8:	eeb1 7b47 	vneg.f64	d7, d7
 8003bbc:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8003bc0:	ed83 7b00 	vstr	d7, [r3]
  t274.im = -theta3;
 8003bc4:	4b60      	ldr	r3, [pc, #384]	; (8003d48 <G_q+0x1928>)
 8003bc6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003bca:	443a      	add	r2, r7
 8003bcc:	4413      	add	r3, r2
 8003bce:	ed93 7b00 	vldr	d7, [r3]
 8003bd2:	eeb1 7b47 	vneg.f64	d7, d7
 8003bd6:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8003bda:	ed83 7b02 	vstr	d7, [r3, #8]
  t271.re = t297.re;
 8003bde:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003be2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003be6:	f507 621a 	add.w	r2, r7, #2464	; 0x9a0
 8003bea:	e9c2 3400 	strd	r3, r4, [r2]
  t271.im = theta3;
 8003bee:	f507 621a 	add.w	r2, r7, #2464	; 0x9a0
 8003bf2:	4b55      	ldr	r3, [pc, #340]	; (8003d48 <G_q+0x1928>)
 8003bf4:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003bf8:	4439      	add	r1, r7
 8003bfa:	440b      	add	r3, r1
 8003bfc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003c00:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t270.re = -t297.re;
 8003c04:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003c08:	ed93 7b00 	vldr	d7, [r3]
 8003c0c:	eeb1 7b47 	vneg.f64	d7, d7
 8003c10:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 8003c14:	ed83 7b00 	vstr	d7, [r3]
  t270.im = -theta3;
 8003c18:	4b4b      	ldr	r3, [pc, #300]	; (8003d48 <G_q+0x1928>)
 8003c1a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003c1e:	443a      	add	r2, r7
 8003c20:	4413      	add	r3, r2
 8003c22:	ed93 7b00 	vldr	d7, [r3]
 8003c26:	eeb1 7b47 	vneg.f64	d7, d7
 8003c2a:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 8003c2e:	ed83 7b02 	vstr	d7, [r3, #8]
  t261.re = t297.re;
 8003c32:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003c36:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003c3a:	f507 6218 	add.w	r2, r7, #2432	; 0x980
 8003c3e:	e9c2 3400 	strd	r3, r4, [r2]
  t261.im = theta3;
 8003c42:	f507 6218 	add.w	r2, r7, #2432	; 0x980
 8003c46:	4b40      	ldr	r3, [pc, #256]	; (8003d48 <G_q+0x1928>)
 8003c48:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003c4c:	4439      	add	r1, r7
 8003c4e:	440b      	add	r3, r1
 8003c50:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003c54:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t260.re = -t297.re;
 8003c58:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003c5c:	ed93 7b00 	vldr	d7, [r3]
 8003c60:	eeb1 7b47 	vneg.f64	d7, d7
 8003c64:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 8003c68:	ed83 7b00 	vstr	d7, [r3]
  t260.im = -theta3;
 8003c6c:	4b36      	ldr	r3, [pc, #216]	; (8003d48 <G_q+0x1928>)
 8003c6e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003c72:	443a      	add	r2, r7
 8003c74:	4413      	add	r3, r2
 8003c76:	ed93 7b00 	vldr	d7, [r3]
 8003c7a:	eeb1 7b47 	vneg.f64	d7, d7
 8003c7e:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 8003c82:	ed83 7b02 	vstr	d7, [r3, #8]
  t257.re = t297.re;
 8003c86:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003c8a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003c8e:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 8003c92:	e9c2 3400 	strd	r3, r4, [r2]
  t257.im = theta3;
 8003c96:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 8003c9a:	4b2b      	ldr	r3, [pc, #172]	; (8003d48 <G_q+0x1928>)
 8003c9c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003ca0:	4439      	add	r1, r7
 8003ca2:	440b      	add	r3, r1
 8003ca4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ca8:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t256.re = -t297.re;
 8003cac:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003cb0:	ed93 7b00 	vldr	d7, [r3]
 8003cb4:	eeb1 7b47 	vneg.f64	d7, d7
 8003cb8:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8003cbc:	ed83 7b00 	vstr	d7, [r3]
  t256.im = -theta3;
 8003cc0:	4b21      	ldr	r3, [pc, #132]	; (8003d48 <G_q+0x1928>)
 8003cc2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003cc6:	443a      	add	r2, r7
 8003cc8:	4413      	add	r3, r2
 8003cca:	ed93 7b00 	vldr	d7, [r3]
 8003cce:	eeb1 7b47 	vneg.f64	d7, d7
 8003cd2:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8003cd6:	ed83 7b02 	vstr	d7, [r3, #8]
  t253.re = t297.re;
 8003cda:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003cde:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ce2:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8003ce6:	e9c2 3400 	strd	r3, r4, [r2]
  t253.im = theta3;
 8003cea:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8003cee:	4b16      	ldr	r3, [pc, #88]	; (8003d48 <G_q+0x1928>)
 8003cf0:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003cf4:	4439      	add	r1, r7
 8003cf6:	440b      	add	r3, r1
 8003cf8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003cfc:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t252.re = -t297.re;
 8003d00:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003d04:	ed93 7b00 	vldr	d7, [r3]
 8003d08:	eeb1 7b47 	vneg.f64	d7, d7
 8003d0c:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8003d10:	ed83 7b00 	vstr	d7, [r3]
  t252.im = -theta3;
 8003d14:	4b0c      	ldr	r3, [pc, #48]	; (8003d48 <G_q+0x1928>)
 8003d16:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003d1a:	443a      	add	r2, r7
 8003d1c:	4413      	add	r3, r2
 8003d1e:	ed93 7b00 	vldr	d7, [r3]
 8003d22:	eeb1 7b47 	vneg.f64	d7, d7
 8003d26:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8003d2a:	ed83 7b02 	vstr	d7, [r3, #8]
  t247.re = t297.re;
 8003d2e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003d32:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d36:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8003d3a:	e007      	b.n	8003d4c <G_q+0x192c>
 8003d3c:	f3af 8000 	nop.w
	...
 8003d48:	ffffec48 	.word	0xffffec48
 8003d4c:	e9c2 3400 	strd	r3, r4, [r2]
  t247.im = theta3;
 8003d50:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8003d54:	4bc3      	ldr	r3, [pc, #780]	; (8004064 <G_q+0x1c44>)
 8003d56:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003d5a:	4439      	add	r1, r7
 8003d5c:	440b      	add	r3, r1
 8003d5e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d62:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t246.re = -t297.re;
 8003d66:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003d6a:	ed93 7b00 	vldr	d7, [r3]
 8003d6e:	eeb1 7b47 	vneg.f64	d7, d7
 8003d72:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8003d76:	ed83 7b00 	vstr	d7, [r3]
  t246.im = -theta3;
 8003d7a:	4bba      	ldr	r3, [pc, #744]	; (8004064 <G_q+0x1c44>)
 8003d7c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003d80:	443a      	add	r2, r7
 8003d82:	4413      	add	r3, r2
 8003d84:	ed93 7b00 	vldr	d7, [r3]
 8003d88:	eeb1 7b47 	vneg.f64	d7, d7
 8003d8c:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8003d90:	ed83 7b02 	vstr	d7, [r3, #8]
  t241.re = t297.re;
 8003d94:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003d98:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d9c:	f507 6210 	add.w	r2, r7, #2304	; 0x900
 8003da0:	e9c2 3400 	strd	r3, r4, [r2]
  t241.im = theta3;
 8003da4:	f507 6210 	add.w	r2, r7, #2304	; 0x900
 8003da8:	4bae      	ldr	r3, [pc, #696]	; (8004064 <G_q+0x1c44>)
 8003daa:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003dae:	4439      	add	r1, r7
 8003db0:	440b      	add	r3, r1
 8003db2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003db6:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t240.re = -t297.re;
 8003dba:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003dbe:	ed93 7b00 	vldr	d7, [r3]
 8003dc2:	eeb1 7b47 	vneg.f64	d7, d7
 8003dc6:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8003dca:	ed83 7b00 	vstr	d7, [r3]
  t240.im = -theta3;
 8003dce:	4ba5      	ldr	r3, [pc, #660]	; (8004064 <G_q+0x1c44>)
 8003dd0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003dd4:	443a      	add	r2, r7
 8003dd6:	4413      	add	r3, r2
 8003dd8:	ed93 7b00 	vldr	d7, [r3]
 8003ddc:	eeb1 7b47 	vneg.f64	d7, d7
 8003de0:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8003de4:	ed83 7b02 	vstr	d7, [r3, #8]
  t235.re = t297.re;
 8003de8:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003dec:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003df0:	f507 620e 	add.w	r2, r7, #2272	; 0x8e0
 8003df4:	e9c2 3400 	strd	r3, r4, [r2]
  t235.im = theta3;
 8003df8:	f507 620e 	add.w	r2, r7, #2272	; 0x8e0
 8003dfc:	4b99      	ldr	r3, [pc, #612]	; (8004064 <G_q+0x1c44>)
 8003dfe:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003e02:	4439      	add	r1, r7
 8003e04:	440b      	add	r3, r1
 8003e06:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e0a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t234.re = -t297.re;
 8003e0e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003e12:	ed93 7b00 	vldr	d7, [r3]
 8003e16:	eeb1 7b47 	vneg.f64	d7, d7
 8003e1a:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8003e1e:	ed83 7b00 	vstr	d7, [r3]
  t234.im = -theta3;
 8003e22:	4b90      	ldr	r3, [pc, #576]	; (8004064 <G_q+0x1c44>)
 8003e24:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003e28:	443a      	add	r2, r7
 8003e2a:	4413      	add	r3, r2
 8003e2c:	ed93 7b00 	vldr	d7, [r3]
 8003e30:	eeb1 7b47 	vneg.f64	d7, d7
 8003e34:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8003e38:	ed83 7b02 	vstr	d7, [r3, #8]
  t225.re = t297.re;
 8003e3c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003e40:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e44:	f507 620c 	add.w	r2, r7, #2240	; 0x8c0
 8003e48:	e9c2 3400 	strd	r3, r4, [r2]
  t225.im = theta3;
 8003e4c:	f507 620c 	add.w	r2, r7, #2240	; 0x8c0
 8003e50:	4b84      	ldr	r3, [pc, #528]	; (8004064 <G_q+0x1c44>)
 8003e52:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003e56:	4439      	add	r1, r7
 8003e58:	440b      	add	r3, r1
 8003e5a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e5e:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t224.re = -t297.re;
 8003e62:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003e66:	ed93 7b00 	vldr	d7, [r3]
 8003e6a:	eeb1 7b47 	vneg.f64	d7, d7
 8003e6e:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8003e72:	ed83 7b00 	vstr	d7, [r3]
  t224.im = -theta3;
 8003e76:	4b7b      	ldr	r3, [pc, #492]	; (8004064 <G_q+0x1c44>)
 8003e78:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003e7c:	443a      	add	r2, r7
 8003e7e:	4413      	add	r3, r2
 8003e80:	ed93 7b00 	vldr	d7, [r3]
 8003e84:	eeb1 7b47 	vneg.f64	d7, d7
 8003e88:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8003e8c:	ed83 7b02 	vstr	d7, [r3, #8]
  t221.re = t297.re;
 8003e90:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003e94:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e98:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 8003e9c:	e9c2 3400 	strd	r3, r4, [r2]
  t221.im = theta3;
 8003ea0:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 8003ea4:	4b6f      	ldr	r3, [pc, #444]	; (8004064 <G_q+0x1c44>)
 8003ea6:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003eaa:	4439      	add	r1, r7
 8003eac:	440b      	add	r3, r1
 8003eae:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003eb2:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t220.re = -t297.re;
 8003eb6:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003eba:	ed93 7b00 	vldr	d7, [r3]
 8003ebe:	eeb1 7b47 	vneg.f64	d7, d7
 8003ec2:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8003ec6:	ed83 7b00 	vstr	d7, [r3]
  t220.im = -theta3;
 8003eca:	4b66      	ldr	r3, [pc, #408]	; (8004064 <G_q+0x1c44>)
 8003ecc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003ed0:	443a      	add	r2, r7
 8003ed2:	4413      	add	r3, r2
 8003ed4:	ed93 7b00 	vldr	d7, [r3]
 8003ed8:	eeb1 7b47 	vneg.f64	d7, d7
 8003edc:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8003ee0:	ed83 7b02 	vstr	d7, [r3, #8]
  t215.re = t297.re;
 8003ee4:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003ee8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003eec:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8003ef0:	e9c2 3400 	strd	r3, r4, [r2]
  t215.im = theta3;
 8003ef4:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8003ef8:	4b5a      	ldr	r3, [pc, #360]	; (8004064 <G_q+0x1c44>)
 8003efa:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003efe:	4439      	add	r1, r7
 8003f00:	440b      	add	r3, r1
 8003f02:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f06:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t214.re = -t297.re;
 8003f0a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003f0e:	ed93 7b00 	vldr	d7, [r3]
 8003f12:	eeb1 7b47 	vneg.f64	d7, d7
 8003f16:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8003f1a:	ed83 7b00 	vstr	d7, [r3]
  t214.im = -theta3;
 8003f1e:	4b51      	ldr	r3, [pc, #324]	; (8004064 <G_q+0x1c44>)
 8003f20:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003f24:	443a      	add	r2, r7
 8003f26:	4413      	add	r3, r2
 8003f28:	ed93 7b00 	vldr	d7, [r3]
 8003f2c:	eeb1 7b47 	vneg.f64	d7, d7
 8003f30:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8003f34:	ed83 7b02 	vstr	d7, [r3, #8]
  t211.re = t297.re;
 8003f38:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003f3c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f40:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 8003f44:	e9c2 3400 	strd	r3, r4, [r2]
  t211.im = theta3;
 8003f48:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 8003f4c:	4b45      	ldr	r3, [pc, #276]	; (8004064 <G_q+0x1c44>)
 8003f4e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003f52:	4439      	add	r1, r7
 8003f54:	440b      	add	r3, r1
 8003f56:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f5a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t210.re = -t297.re;
 8003f5e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003f62:	ed93 7b00 	vldr	d7, [r3]
 8003f66:	eeb1 7b47 	vneg.f64	d7, d7
 8003f6a:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 8003f6e:	ed83 7b00 	vstr	d7, [r3]
  t210.im = -theta3;
 8003f72:	4b3c      	ldr	r3, [pc, #240]	; (8004064 <G_q+0x1c44>)
 8003f74:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003f78:	443a      	add	r2, r7
 8003f7a:	4413      	add	r3, r2
 8003f7c:	ed93 7b00 	vldr	d7, [r3]
 8003f80:	eeb1 7b47 	vneg.f64	d7, d7
 8003f84:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 8003f88:	ed83 7b02 	vstr	d7, [r3, #8]
  t207.re = t297.re;
 8003f8c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003f90:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f94:	f507 6204 	add.w	r2, r7, #2112	; 0x840
 8003f98:	e9c2 3400 	strd	r3, r4, [r2]
  t207.im = theta3;
 8003f9c:	f507 6204 	add.w	r2, r7, #2112	; 0x840
 8003fa0:	4b30      	ldr	r3, [pc, #192]	; (8004064 <G_q+0x1c44>)
 8003fa2:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003fa6:	4439      	add	r1, r7
 8003fa8:	440b      	add	r3, r1
 8003faa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003fae:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t206.re = -t297.re;
 8003fb2:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003fb6:	ed93 7b00 	vldr	d7, [r3]
 8003fba:	eeb1 7b47 	vneg.f64	d7, d7
 8003fbe:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8003fc2:	ed83 7b00 	vstr	d7, [r3]
  t206.im = -theta3;
 8003fc6:	4b27      	ldr	r3, [pc, #156]	; (8004064 <G_q+0x1c44>)
 8003fc8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003fcc:	443a      	add	r2, r7
 8003fce:	4413      	add	r3, r2
 8003fd0:	ed93 7b00 	vldr	d7, [r3]
 8003fd4:	eeb1 7b47 	vneg.f64	d7, d7
 8003fd8:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8003fdc:	ed83 7b02 	vstr	d7, [r3, #8]
  t201.re = t297.re;
 8003fe0:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003fe4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003fe8:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 8003fec:	e9c2 3400 	strd	r3, r4, [r2]
  t201.im = theta3;
 8003ff0:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 8003ff4:	4b1b      	ldr	r3, [pc, #108]	; (8004064 <G_q+0x1c44>)
 8003ff6:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003ffa:	4439      	add	r1, r7
 8003ffc:	440b      	add	r3, r1
 8003ffe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004002:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t200.re = -t297.re;
 8004006:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800400a:	ed93 7b00 	vldr	d7, [r3]
 800400e:	eeb1 7b47 	vneg.f64	d7, d7
 8004012:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8004016:	ed83 7b00 	vstr	d7, [r3]
  t200.im = -theta3;
 800401a:	4b12      	ldr	r3, [pc, #72]	; (8004064 <G_q+0x1c44>)
 800401c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004020:	443a      	add	r2, r7
 8004022:	4413      	add	r3, r2
 8004024:	ed93 7b00 	vldr	d7, [r3]
 8004028:	eeb1 7b47 	vneg.f64	d7, d7
 800402c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8004030:	ed83 7b02 	vstr	d7, [r3, #8]
  t191.re = t297.re;
 8004034:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004038:	e9d3 3400 	ldrd	r3, r4, [r3]
 800403c:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 8004040:	e9c2 3400 	strd	r3, r4, [r2]
  t191.im = theta3;
 8004044:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 8004048:	4b06      	ldr	r3, [pc, #24]	; (8004064 <G_q+0x1c44>)
 800404a:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800404e:	4439      	add	r1, r7
 8004050:	440b      	add	r3, r1
 8004052:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004056:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t190.re = -t297.re;
 800405a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800405e:	ed93 7b00 	vldr	d7, [r3]
 8004062:	e001      	b.n	8004068 <G_q+0x1c48>
 8004064:	ffffec48 	.word	0xffffec48
 8004068:	eeb1 7b47 	vneg.f64	d7, d7
 800406c:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8004070:	ed83 7b00 	vstr	d7, [r3]
  t190.im = -theta3;
 8004074:	4bc4      	ldr	r3, [pc, #784]	; (8004388 <G_q+0x1f68>)
 8004076:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800407a:	443a      	add	r2, r7
 800407c:	4413      	add	r3, r2
 800407e:	ed93 7b00 	vldr	d7, [r3]
 8004082:	eeb1 7b47 	vneg.f64	d7, d7
 8004086:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800408a:	ed83 7b02 	vstr	d7, [r3, #8]
  t187.re = t297.re;
 800408e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004092:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004096:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800409a:	e9c2 3400 	strd	r3, r4, [r2]
  t187.im = theta3;
 800409e:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 80040a2:	4bb9      	ldr	r3, [pc, #740]	; (8004388 <G_q+0x1f68>)
 80040a4:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80040a8:	4439      	add	r1, r7
 80040aa:	440b      	add	r3, r1
 80040ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 80040b0:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t186.re = -t297.re;
 80040b4:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80040b8:	ed93 7b00 	vldr	d7, [r3]
 80040bc:	eeb1 7b47 	vneg.f64	d7, d7
 80040c0:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 80040c4:	ed83 7b00 	vstr	d7, [r3]
  t186.im = -theta3;
 80040c8:	4baf      	ldr	r3, [pc, #700]	; (8004388 <G_q+0x1f68>)
 80040ca:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80040ce:	443a      	add	r2, r7
 80040d0:	4413      	add	r3, r2
 80040d2:	ed93 7b00 	vldr	d7, [r3]
 80040d6:	eeb1 7b47 	vneg.f64	d7, d7
 80040da:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 80040de:	ed83 7b02 	vstr	d7, [r3, #8]
  t183.re = t297.re;
 80040e2:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80040e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80040ea:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 80040ee:	e9c2 3400 	strd	r3, r4, [r2]
  t183.im = theta3;
 80040f2:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 80040f6:	4ba4      	ldr	r3, [pc, #656]	; (8004388 <G_q+0x1f68>)
 80040f8:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80040fc:	4439      	add	r1, r7
 80040fe:	440b      	add	r3, r1
 8004100:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004104:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t182.re = -t297.re;
 8004108:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800410c:	ed93 7b00 	vldr	d7, [r3]
 8004110:	eeb1 7b47 	vneg.f64	d7, d7
 8004114:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 8004118:	ed83 7b00 	vstr	d7, [r3]
  t182.im = -theta3;
 800411c:	4b9a      	ldr	r3, [pc, #616]	; (8004388 <G_q+0x1f68>)
 800411e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004122:	443a      	add	r2, r7
 8004124:	4413      	add	r3, r2
 8004126:	ed93 7b00 	vldr	d7, [r3]
 800412a:	eeb1 7b47 	vneg.f64	d7, d7
 800412e:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 8004132:	ed83 7b02 	vstr	d7, [r3, #8]
  t177.re = t297.re;
 8004136:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800413a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800413e:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 8004142:	e9c2 3400 	strd	r3, r4, [r2]
  t177.im = theta3;
 8004146:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 800414a:	4b8f      	ldr	r3, [pc, #572]	; (8004388 <G_q+0x1f68>)
 800414c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004150:	4439      	add	r1, r7
 8004152:	440b      	add	r3, r1
 8004154:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004158:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t176.re = -t297.re;
 800415c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004160:	ed93 7b00 	vldr	d7, [r3]
 8004164:	eeb1 7b47 	vneg.f64	d7, d7
 8004168:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 800416c:	ed83 7b00 	vstr	d7, [r3]
  t176.im = -theta3;
 8004170:	4b85      	ldr	r3, [pc, #532]	; (8004388 <G_q+0x1f68>)
 8004172:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004176:	443a      	add	r2, r7
 8004178:	4413      	add	r3, r2
 800417a:	ed93 7b00 	vldr	d7, [r3]
 800417e:	eeb1 7b47 	vneg.f64	d7, d7
 8004182:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 8004186:	ed83 7b02 	vstr	d7, [r3, #8]
  t169.re = t297.re;
 800418a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800418e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004192:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 8004196:	e9c2 3400 	strd	r3, r4, [r2]
  t169.im = theta3;
 800419a:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 800419e:	4b7a      	ldr	r3, [pc, #488]	; (8004388 <G_q+0x1f68>)
 80041a0:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80041a4:	4439      	add	r1, r7
 80041a6:	440b      	add	r3, r1
 80041a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80041ac:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t168.re = -t297.re;
 80041b0:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80041b4:	ed93 7b00 	vldr	d7, [r3]
 80041b8:	eeb1 7b47 	vneg.f64	d7, d7
 80041bc:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 80041c0:	ed83 7b00 	vstr	d7, [r3]
  t168.im = -theta3;
 80041c4:	4b70      	ldr	r3, [pc, #448]	; (8004388 <G_q+0x1f68>)
 80041c6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80041ca:	443a      	add	r2, r7
 80041cc:	4413      	add	r3, r2
 80041ce:	ed93 7b00 	vldr	d7, [r3]
 80041d2:	eeb1 7b47 	vneg.f64	d7, d7
 80041d6:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 80041da:	ed83 7b02 	vstr	d7, [r3, #8]
  t165.re = t297.re;
 80041de:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80041e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80041e6:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 80041ea:	e9c2 3400 	strd	r3, r4, [r2]
  t165.im = theta3;
 80041ee:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 80041f2:	4b65      	ldr	r3, [pc, #404]	; (8004388 <G_q+0x1f68>)
 80041f4:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80041f8:	4439      	add	r1, r7
 80041fa:	440b      	add	r3, r1
 80041fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004200:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t164.re = -t297.re;
 8004204:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004208:	ed93 7b00 	vldr	d7, [r3]
 800420c:	eeb1 7b47 	vneg.f64	d7, d7
 8004210:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8004214:	ed83 7b00 	vstr	d7, [r3]
  t164.im = -theta3;
 8004218:	4b5b      	ldr	r3, [pc, #364]	; (8004388 <G_q+0x1f68>)
 800421a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800421e:	443a      	add	r2, r7
 8004220:	4413      	add	r3, r2
 8004222:	ed93 7b00 	vldr	d7, [r3]
 8004226:	eeb1 7b47 	vneg.f64	d7, d7
 800422a:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800422e:	ed83 7b02 	vstr	d7, [r3, #8]
  t163.re = t297.re;
 8004232:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004236:	e9d3 3400 	ldrd	r3, r4, [r3]
 800423a:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 800423e:	e9c2 3400 	strd	r3, r4, [r2]
  t163.im = theta3;
 8004242:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 8004246:	4b50      	ldr	r3, [pc, #320]	; (8004388 <G_q+0x1f68>)
 8004248:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800424c:	4439      	add	r1, r7
 800424e:	440b      	add	r3, r1
 8004250:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004254:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t162.re = -t297.re;
 8004258:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800425c:	ed93 7b00 	vldr	d7, [r3]
 8004260:	eeb1 7b47 	vneg.f64	d7, d7
 8004264:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8004268:	ed83 7b00 	vstr	d7, [r3]
  t162.im = -theta3;
 800426c:	4b46      	ldr	r3, [pc, #280]	; (8004388 <G_q+0x1f68>)
 800426e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004272:	443a      	add	r2, r7
 8004274:	4413      	add	r3, r2
 8004276:	ed93 7b00 	vldr	d7, [r3]
 800427a:	eeb1 7b47 	vneg.f64	d7, d7
 800427e:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8004282:	ed83 7b02 	vstr	d7, [r3, #8]
  t155.re = t297.re;
 8004286:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800428a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800428e:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 8004292:	e9c2 3400 	strd	r3, r4, [r2]
  t155.im = theta3;
 8004296:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 800429a:	4b3b      	ldr	r3, [pc, #236]	; (8004388 <G_q+0x1f68>)
 800429c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80042a0:	4439      	add	r1, r7
 80042a2:	440b      	add	r3, r1
 80042a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80042a8:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t154.re = -t297.re;
 80042ac:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80042b0:	ed93 7b00 	vldr	d7, [r3]
 80042b4:	eeb1 7b47 	vneg.f64	d7, d7
 80042b8:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 80042bc:	ed83 7b00 	vstr	d7, [r3]
  t154.im = -theta3;
 80042c0:	4b31      	ldr	r3, [pc, #196]	; (8004388 <G_q+0x1f68>)
 80042c2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80042c6:	443a      	add	r2, r7
 80042c8:	4413      	add	r3, r2
 80042ca:	ed93 7b00 	vldr	d7, [r3]
 80042ce:	eeb1 7b47 	vneg.f64	d7, d7
 80042d2:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 80042d6:	ed83 7b02 	vstr	d7, [r3, #8]
  t151.re = t297.re;
 80042da:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80042de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80042e2:	f507 62e0 	add.w	r2, r7, #1792	; 0x700
 80042e6:	e9c2 3400 	strd	r3, r4, [r2]
  t151.im = theta3;
 80042ea:	f507 62e0 	add.w	r2, r7, #1792	; 0x700
 80042ee:	4b26      	ldr	r3, [pc, #152]	; (8004388 <G_q+0x1f68>)
 80042f0:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80042f4:	4439      	add	r1, r7
 80042f6:	440b      	add	r3, r1
 80042f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80042fc:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t150.re = -t297.re;
 8004300:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004304:	ed93 7b00 	vldr	d7, [r3]
 8004308:	eeb1 7b47 	vneg.f64	d7, d7
 800430c:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8004310:	ed83 7b00 	vstr	d7, [r3]
  t150.im = -theta3;
 8004314:	4b1c      	ldr	r3, [pc, #112]	; (8004388 <G_q+0x1f68>)
 8004316:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800431a:	443a      	add	r2, r7
 800431c:	4413      	add	r3, r2
 800431e:	ed93 7b00 	vldr	d7, [r3]
 8004322:	eeb1 7b47 	vneg.f64	d7, d7
 8004326:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800432a:	ed83 7b02 	vstr	d7, [r3, #8]
  t145.re = t297.re;
 800432e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004332:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004336:	f507 62dc 	add.w	r2, r7, #1760	; 0x6e0
 800433a:	e9c2 3400 	strd	r3, r4, [r2]
  t145.im = theta3;
 800433e:	f507 62dc 	add.w	r2, r7, #1760	; 0x6e0
 8004342:	4b11      	ldr	r3, [pc, #68]	; (8004388 <G_q+0x1f68>)
 8004344:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004348:	4439      	add	r1, r7
 800434a:	440b      	add	r3, r1
 800434c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004350:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t144.re = -t297.re;
 8004354:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004358:	ed93 7b00 	vldr	d7, [r3]
 800435c:	eeb1 7b47 	vneg.f64	d7, d7
 8004360:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 8004364:	ed83 7b00 	vstr	d7, [r3]
  t144.im = -theta3;
 8004368:	4b07      	ldr	r3, [pc, #28]	; (8004388 <G_q+0x1f68>)
 800436a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800436e:	443a      	add	r2, r7
 8004370:	4413      	add	r3, r2
 8004372:	ed93 7b00 	vldr	d7, [r3]
 8004376:	eeb1 7b47 	vneg.f64	d7, d7
 800437a:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 800437e:	ed83 7b02 	vstr	d7, [r3, #8]
  t141.re = t297.re;
 8004382:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004386:	e001      	b.n	800438c <G_q+0x1f6c>
 8004388:	ffffec48 	.word	0xffffec48
 800438c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004390:	f507 62d8 	add.w	r2, r7, #1728	; 0x6c0
 8004394:	e9c2 3400 	strd	r3, r4, [r2]
  t141.im = theta3;
 8004398:	f507 62d8 	add.w	r2, r7, #1728	; 0x6c0
 800439c:	4bc3      	ldr	r3, [pc, #780]	; (80046ac <G_q+0x228c>)
 800439e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80043a2:	4439      	add	r1, r7
 80043a4:	440b      	add	r3, r1
 80043a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80043aa:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t140.re = -t297.re;
 80043ae:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80043b2:	ed93 7b00 	vldr	d7, [r3]
 80043b6:	eeb1 7b47 	vneg.f64	d7, d7
 80043ba:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 80043be:	ed83 7b00 	vstr	d7, [r3]
  t140.im = -theta3;
 80043c2:	4bba      	ldr	r3, [pc, #744]	; (80046ac <G_q+0x228c>)
 80043c4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80043c8:	443a      	add	r2, r7
 80043ca:	4413      	add	r3, r2
 80043cc:	ed93 7b00 	vldr	d7, [r3]
 80043d0:	eeb1 7b47 	vneg.f64	d7, d7
 80043d4:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 80043d8:	ed83 7b02 	vstr	d7, [r3, #8]
  t137.re = t297.re;
 80043dc:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80043e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80043e4:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80043e8:	e9c2 3400 	strd	r3, r4, [r2]
  t137.im = theta3;
 80043ec:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80043f0:	4bae      	ldr	r3, [pc, #696]	; (80046ac <G_q+0x228c>)
 80043f2:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80043f6:	4439      	add	r1, r7
 80043f8:	440b      	add	r3, r1
 80043fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80043fe:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t136.re = -t297.re;
 8004402:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004406:	ed93 7b00 	vldr	d7, [r3]
 800440a:	eeb1 7b47 	vneg.f64	d7, d7
 800440e:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8004412:	ed83 7b00 	vstr	d7, [r3]
  t136.im = -theta3;
 8004416:	4ba5      	ldr	r3, [pc, #660]	; (80046ac <G_q+0x228c>)
 8004418:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800441c:	443a      	add	r2, r7
 800441e:	4413      	add	r3, r2
 8004420:	ed93 7b00 	vldr	d7, [r3]
 8004424:	eeb1 7b47 	vneg.f64	d7, d7
 8004428:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800442c:	ed83 7b02 	vstr	d7, [r3, #8]
  t131.re = t297.re;
 8004430:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004434:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004438:	f507 62d0 	add.w	r2, r7, #1664	; 0x680
 800443c:	e9c2 3400 	strd	r3, r4, [r2]
  t131.im = theta3;
 8004440:	f507 62d0 	add.w	r2, r7, #1664	; 0x680
 8004444:	4b99      	ldr	r3, [pc, #612]	; (80046ac <G_q+0x228c>)
 8004446:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800444a:	4439      	add	r1, r7
 800444c:	440b      	add	r3, r1
 800444e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004452:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t130.re = -t297.re;
 8004456:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800445a:	ed93 7b00 	vldr	d7, [r3]
 800445e:	eeb1 7b47 	vneg.f64	d7, d7
 8004462:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8004466:	ed83 7b00 	vstr	d7, [r3]
  t130.im = -theta3;
 800446a:	4b90      	ldr	r3, [pc, #576]	; (80046ac <G_q+0x228c>)
 800446c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004470:	443a      	add	r2, r7
 8004472:	4413      	add	r3, r2
 8004474:	ed93 7b00 	vldr	d7, [r3]
 8004478:	eeb1 7b47 	vneg.f64	d7, d7
 800447c:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8004480:	ed83 7b02 	vstr	d7, [r3, #8]
  t129.re = t297.re;
 8004484:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004488:	e9d3 3400 	ldrd	r3, r4, [r3]
 800448c:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 8004490:	e9c2 3400 	strd	r3, r4, [r2]
  t129.im = theta3;
 8004494:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 8004498:	4b84      	ldr	r3, [pc, #528]	; (80046ac <G_q+0x228c>)
 800449a:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800449e:	4439      	add	r1, r7
 80044a0:	440b      	add	r3, r1
 80044a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80044a6:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t128.re = -t297.re;
 80044aa:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80044ae:	ed93 7b00 	vldr	d7, [r3]
 80044b2:	eeb1 7b47 	vneg.f64	d7, d7
 80044b6:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80044ba:	ed83 7b00 	vstr	d7, [r3]
  t128.im = -theta3;
 80044be:	4b7b      	ldr	r3, [pc, #492]	; (80046ac <G_q+0x228c>)
 80044c0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80044c4:	443a      	add	r2, r7
 80044c6:	4413      	add	r3, r2
 80044c8:	ed93 7b00 	vldr	d7, [r3]
 80044cc:	eeb1 7b47 	vneg.f64	d7, d7
 80044d0:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80044d4:	ed83 7b02 	vstr	d7, [r3, #8]
  t121.re = t297.re;
 80044d8:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80044dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80044e0:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 80044e4:	e9c2 3400 	strd	r3, r4, [r2]
  t121.im = theta3;
 80044e8:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 80044ec:	4b6f      	ldr	r3, [pc, #444]	; (80046ac <G_q+0x228c>)
 80044ee:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80044f2:	4439      	add	r1, r7
 80044f4:	440b      	add	r3, r1
 80044f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80044fa:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t120.re = -t297.re;
 80044fe:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004502:	ed93 7b00 	vldr	d7, [r3]
 8004506:	eeb1 7b47 	vneg.f64	d7, d7
 800450a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800450e:	ed83 7b00 	vstr	d7, [r3]
  t120.im = -theta3;
 8004512:	4b66      	ldr	r3, [pc, #408]	; (80046ac <G_q+0x228c>)
 8004514:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004518:	443a      	add	r2, r7
 800451a:	4413      	add	r3, r2
 800451c:	ed93 7b00 	vldr	d7, [r3]
 8004520:	eeb1 7b47 	vneg.f64	d7, d7
 8004524:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8004528:	ed83 7b02 	vstr	d7, [r3, #8]
  t115.re = t297.re;
 800452c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004530:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004534:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 8004538:	e9c2 3400 	strd	r3, r4, [r2]
  t115.im = theta3;
 800453c:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 8004540:	4b5a      	ldr	r3, [pc, #360]	; (80046ac <G_q+0x228c>)
 8004542:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004546:	4439      	add	r1, r7
 8004548:	440b      	add	r3, r1
 800454a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800454e:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t114.re = -t297.re;
 8004552:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004556:	ed93 7b00 	vldr	d7, [r3]
 800455a:	eeb1 7b47 	vneg.f64	d7, d7
 800455e:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8004562:	ed83 7b00 	vstr	d7, [r3]
  t114.im = -theta3;
 8004566:	4b51      	ldr	r3, [pc, #324]	; (80046ac <G_q+0x228c>)
 8004568:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800456c:	443a      	add	r2, r7
 800456e:	4413      	add	r3, r2
 8004570:	ed93 7b00 	vldr	d7, [r3]
 8004574:	eeb1 7b47 	vneg.f64	d7, d7
 8004578:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 800457c:	ed83 7b02 	vstr	d7, [r3, #8]
  t109.re = t297.re;
 8004580:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004584:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004588:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 800458c:	e9c2 3400 	strd	r3, r4, [r2]
  t109.im = theta3;
 8004590:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8004594:	4b45      	ldr	r3, [pc, #276]	; (80046ac <G_q+0x228c>)
 8004596:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800459a:	4439      	add	r1, r7
 800459c:	440b      	add	r3, r1
 800459e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80045a2:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t108.re = -t297.re;
 80045a6:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80045aa:	ed93 7b00 	vldr	d7, [r3]
 80045ae:	eeb1 7b47 	vneg.f64	d7, d7
 80045b2:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 80045b6:	ed83 7b00 	vstr	d7, [r3]
  t108.im = -theta3;
 80045ba:	4b3c      	ldr	r3, [pc, #240]	; (80046ac <G_q+0x228c>)
 80045bc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80045c0:	443a      	add	r2, r7
 80045c2:	4413      	add	r3, r2
 80045c4:	ed93 7b00 	vldr	d7, [r3]
 80045c8:	eeb1 7b47 	vneg.f64	d7, d7
 80045cc:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 80045d0:	ed83 7b02 	vstr	d7, [r3, #8]
  t107.re = t297.re;
 80045d4:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80045d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80045dc:	f507 62bc 	add.w	r2, r7, #1504	; 0x5e0
 80045e0:	e9c2 3400 	strd	r3, r4, [r2]
  t107.im = theta3;
 80045e4:	f507 62bc 	add.w	r2, r7, #1504	; 0x5e0
 80045e8:	4b30      	ldr	r3, [pc, #192]	; (80046ac <G_q+0x228c>)
 80045ea:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80045ee:	4439      	add	r1, r7
 80045f0:	440b      	add	r3, r1
 80045f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80045f6:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t106.re = -t297.re;
 80045fa:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80045fe:	ed93 7b00 	vldr	d7, [r3]
 8004602:	eeb1 7b47 	vneg.f64	d7, d7
 8004606:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800460a:	ed83 7b00 	vstr	d7, [r3]
  t106.im = -theta3;
 800460e:	4b27      	ldr	r3, [pc, #156]	; (80046ac <G_q+0x228c>)
 8004610:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004614:	443a      	add	r2, r7
 8004616:	4413      	add	r3, r2
 8004618:	ed93 7b00 	vldr	d7, [r3]
 800461c:	eeb1 7b47 	vneg.f64	d7, d7
 8004620:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8004624:	ed83 7b02 	vstr	d7, [r3, #8]
  t99.re = t297.re;
 8004628:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800462c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004630:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 8004634:	e9c2 3400 	strd	r3, r4, [r2]
  t99.im = theta3;
 8004638:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 800463c:	4b1b      	ldr	r3, [pc, #108]	; (80046ac <G_q+0x228c>)
 800463e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004642:	4439      	add	r1, r7
 8004644:	440b      	add	r3, r1
 8004646:	e9d3 3400 	ldrd	r3, r4, [r3]
 800464a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t98.re = -t297.re;
 800464e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004652:	ed93 7b00 	vldr	d7, [r3]
 8004656:	eeb1 7b47 	vneg.f64	d7, d7
 800465a:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 800465e:	ed83 7b00 	vstr	d7, [r3]
  t98.im = -theta3;
 8004662:	4b12      	ldr	r3, [pc, #72]	; (80046ac <G_q+0x228c>)
 8004664:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004668:	443a      	add	r2, r7
 800466a:	4413      	add	r3, r2
 800466c:	ed93 7b00 	vldr	d7, [r3]
 8004670:	eeb1 7b47 	vneg.f64	d7, d7
 8004674:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 8004678:	ed83 7b02 	vstr	d7, [r3, #8]
  t93.re = t297.re;
 800467c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004680:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004684:	f507 62b4 	add.w	r2, r7, #1440	; 0x5a0
 8004688:	e9c2 3400 	strd	r3, r4, [r2]
  t93.im = theta3;
 800468c:	f507 62b4 	add.w	r2, r7, #1440	; 0x5a0
 8004690:	4b06      	ldr	r3, [pc, #24]	; (80046ac <G_q+0x228c>)
 8004692:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004696:	4439      	add	r1, r7
 8004698:	440b      	add	r3, r1
 800469a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800469e:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t92.re = -t297.re;
 80046a2:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80046a6:	ed93 7b00 	vldr	d7, [r3]
 80046aa:	e001      	b.n	80046b0 <G_q+0x2290>
 80046ac:	ffffec48 	.word	0xffffec48
 80046b0:	eeb1 7b47 	vneg.f64	d7, d7
 80046b4:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 80046b8:	ed83 7b00 	vstr	d7, [r3]
  t92.im = -theta3;
 80046bc:	4bc4      	ldr	r3, [pc, #784]	; (80049d0 <G_q+0x25b0>)
 80046be:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80046c2:	443a      	add	r2, r7
 80046c4:	4413      	add	r3, r2
 80046c6:	ed93 7b00 	vldr	d7, [r3]
 80046ca:	eeb1 7b47 	vneg.f64	d7, d7
 80046ce:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 80046d2:	ed83 7b02 	vstr	d7, [r3, #8]
  t85.re = t297.re;
 80046d6:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80046da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80046de:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80046e2:	e9c2 3400 	strd	r3, r4, [r2]
  t85.im = theta3;
 80046e6:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80046ea:	4bb9      	ldr	r3, [pc, #740]	; (80049d0 <G_q+0x25b0>)
 80046ec:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80046f0:	4439      	add	r1, r7
 80046f2:	440b      	add	r3, r1
 80046f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80046f8:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t84.re = -t297.re;
 80046fc:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004700:	ed93 7b00 	vldr	d7, [r3]
 8004704:	eeb1 7b47 	vneg.f64	d7, d7
 8004708:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 800470c:	ed83 7b00 	vstr	d7, [r3]
  t84.im = -theta3;
 8004710:	4baf      	ldr	r3, [pc, #700]	; (80049d0 <G_q+0x25b0>)
 8004712:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004716:	443a      	add	r2, r7
 8004718:	4413      	add	r3, r2
 800471a:	ed93 7b00 	vldr	d7, [r3]
 800471e:	eeb1 7b47 	vneg.f64	d7, d7
 8004722:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8004726:	ed83 7b02 	vstr	d7, [r3, #8]
  t81.re = t297.re;
 800472a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800472e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004732:	f507 62ac 	add.w	r2, r7, #1376	; 0x560
 8004736:	e9c2 3400 	strd	r3, r4, [r2]
  t81.im = theta3;
 800473a:	f507 62ac 	add.w	r2, r7, #1376	; 0x560
 800473e:	4ba4      	ldr	r3, [pc, #656]	; (80049d0 <G_q+0x25b0>)
 8004740:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004744:	4439      	add	r1, r7
 8004746:	440b      	add	r3, r1
 8004748:	e9d3 3400 	ldrd	r3, r4, [r3]
 800474c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t80.re = -t297.re;
 8004750:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004754:	ed93 7b00 	vldr	d7, [r3]
 8004758:	eeb1 7b47 	vneg.f64	d7, d7
 800475c:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8004760:	ed83 7b00 	vstr	d7, [r3]
  t80.im = -theta3;
 8004764:	4b9a      	ldr	r3, [pc, #616]	; (80049d0 <G_q+0x25b0>)
 8004766:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800476a:	443a      	add	r2, r7
 800476c:	4413      	add	r3, r2
 800476e:	ed93 7b00 	vldr	d7, [r3]
 8004772:	eeb1 7b47 	vneg.f64	d7, d7
 8004776:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800477a:	ed83 7b02 	vstr	d7, [r3, #8]
  t75.re = t297.re;
 800477e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004782:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004786:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
 800478a:	e9c2 3400 	strd	r3, r4, [r2]
  t75.im = theta3;
 800478e:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
 8004792:	4b8f      	ldr	r3, [pc, #572]	; (80049d0 <G_q+0x25b0>)
 8004794:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004798:	4439      	add	r1, r7
 800479a:	440b      	add	r3, r1
 800479c:	e9d3 3400 	ldrd	r3, r4, [r3]
 80047a0:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t74.re = -t297.re;
 80047a4:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80047a8:	ed93 7b00 	vldr	d7, [r3]
 80047ac:	eeb1 7b47 	vneg.f64	d7, d7
 80047b0:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 80047b4:	ed83 7b00 	vstr	d7, [r3]
  t74.im = -theta3;
 80047b8:	4b85      	ldr	r3, [pc, #532]	; (80049d0 <G_q+0x25b0>)
 80047ba:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80047be:	443a      	add	r2, r7
 80047c0:	4413      	add	r3, r2
 80047c2:	ed93 7b00 	vldr	d7, [r3]
 80047c6:	eeb1 7b47 	vneg.f64	d7, d7
 80047ca:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 80047ce:	ed83 7b02 	vstr	d7, [r3, #8]
  t73.re = t297.re;
 80047d2:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80047d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80047da:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 80047de:	e9c2 3400 	strd	r3, r4, [r2]
  t73.im = theta3;
 80047e2:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 80047e6:	4b7a      	ldr	r3, [pc, #488]	; (80049d0 <G_q+0x25b0>)
 80047e8:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80047ec:	4439      	add	r1, r7
 80047ee:	440b      	add	r3, r1
 80047f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80047f4:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t72.re = -t297.re;
 80047f8:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80047fc:	ed93 7b00 	vldr	d7, [r3]
 8004800:	eeb1 7b47 	vneg.f64	d7, d7
 8004804:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8004808:	ed83 7b00 	vstr	d7, [r3]
  t72.im = -theta3;
 800480c:	4b70      	ldr	r3, [pc, #448]	; (80049d0 <G_q+0x25b0>)
 800480e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004812:	443a      	add	r2, r7
 8004814:	4413      	add	r3, r2
 8004816:	ed93 7b00 	vldr	d7, [r3]
 800481a:	eeb1 7b47 	vneg.f64	d7, d7
 800481e:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8004822:	ed83 7b02 	vstr	d7, [r3, #8]
  t69.re = t297.re;
 8004826:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800482a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800482e:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 8004832:	e9c2 3400 	strd	r3, r4, [r2]
  t69.im = theta3;
 8004836:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 800483a:	4b65      	ldr	r3, [pc, #404]	; (80049d0 <G_q+0x25b0>)
 800483c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004840:	4439      	add	r1, r7
 8004842:	440b      	add	r3, r1
 8004844:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004848:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t68.re = -t297.re;
 800484c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004850:	ed93 7b00 	vldr	d7, [r3]
 8004854:	eeb1 7b47 	vneg.f64	d7, d7
 8004858:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800485c:	ed83 7b00 	vstr	d7, [r3]
  t68.im = -theta3;
 8004860:	4b5b      	ldr	r3, [pc, #364]	; (80049d0 <G_q+0x25b0>)
 8004862:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004866:	443a      	add	r2, r7
 8004868:	4413      	add	r3, r2
 800486a:	ed93 7b00 	vldr	d7, [r3]
 800486e:	eeb1 7b47 	vneg.f64	d7, d7
 8004872:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8004876:	ed83 7b02 	vstr	d7, [r3, #8]
  t65.re = t297.re;
 800487a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800487e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004882:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 8004886:	e9c2 3400 	strd	r3, r4, [r2]
  t65.im = theta3;
 800488a:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 800488e:	4b50      	ldr	r3, [pc, #320]	; (80049d0 <G_q+0x25b0>)
 8004890:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004894:	4439      	add	r1, r7
 8004896:	440b      	add	r3, r1
 8004898:	e9d3 3400 	ldrd	r3, r4, [r3]
 800489c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t64.re = -t297.re;
 80048a0:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80048a4:	ed93 7b00 	vldr	d7, [r3]
 80048a8:	eeb1 7b47 	vneg.f64	d7, d7
 80048ac:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 80048b0:	ed83 7b00 	vstr	d7, [r3]
  t64.im = -theta3;
 80048b4:	4b46      	ldr	r3, [pc, #280]	; (80049d0 <G_q+0x25b0>)
 80048b6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80048ba:	443a      	add	r2, r7
 80048bc:	4413      	add	r3, r2
 80048be:	ed93 7b00 	vldr	d7, [r3]
 80048c2:	eeb1 7b47 	vneg.f64	d7, d7
 80048c6:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 80048ca:	ed83 7b02 	vstr	d7, [r3, #8]
  t52.re = t297.re;
 80048ce:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80048d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80048d6:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 80048da:	e9c2 3400 	strd	r3, r4, [r2]
  t52.im = theta3;
 80048de:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 80048e2:	4b3b      	ldr	r3, [pc, #236]	; (80049d0 <G_q+0x25b0>)
 80048e4:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80048e8:	4439      	add	r1, r7
 80048ea:	440b      	add	r3, r1
 80048ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 80048f0:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t51.re = -t297.re;
 80048f4:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80048f8:	ed93 7b00 	vldr	d7, [r3]
 80048fc:	eeb1 7b47 	vneg.f64	d7, d7
 8004900:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8004904:	ed83 7b00 	vstr	d7, [r3]
  t51.im = -theta3;
 8004908:	4b31      	ldr	r3, [pc, #196]	; (80049d0 <G_q+0x25b0>)
 800490a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800490e:	443a      	add	r2, r7
 8004910:	4413      	add	r3, r2
 8004912:	ed93 7b00 	vldr	d7, [r3]
 8004916:	eeb1 7b47 	vneg.f64	d7, d7
 800491a:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800491e:	ed83 7b02 	vstr	d7, [r3, #8]
  t48.re = t297.re;
 8004922:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004926:	e9d3 3400 	ldrd	r3, r4, [r3]
 800492a:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 800492e:	e9c2 3400 	strd	r3, r4, [r2]
  t48.im = theta3;
 8004932:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 8004936:	4b26      	ldr	r3, [pc, #152]	; (80049d0 <G_q+0x25b0>)
 8004938:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800493c:	4439      	add	r1, r7
 800493e:	440b      	add	r3, r1
 8004940:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004944:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t47.re = -t297.re;
 8004948:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800494c:	ed93 7b00 	vldr	d7, [r3]
 8004950:	eeb1 7b47 	vneg.f64	d7, d7
 8004954:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8004958:	ed83 7b00 	vstr	d7, [r3]
  t47.im = -theta3;
 800495c:	4b1c      	ldr	r3, [pc, #112]	; (80049d0 <G_q+0x25b0>)
 800495e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004962:	443a      	add	r2, r7
 8004964:	4413      	add	r3, r2
 8004966:	ed93 7b00 	vldr	d7, [r3]
 800496a:	eeb1 7b47 	vneg.f64	d7, d7
 800496e:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8004972:	ed83 7b02 	vstr	d7, [r3, #8]
  t38.re = t297.re;
 8004976:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800497a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800497e:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 8004982:	e9c2 3400 	strd	r3, r4, [r2]
  t38.im = theta3;
 8004986:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 800498a:	4b11      	ldr	r3, [pc, #68]	; (80049d0 <G_q+0x25b0>)
 800498c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004990:	4439      	add	r1, r7
 8004992:	440b      	add	r3, r1
 8004994:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004998:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t37.re = -t297.re;
 800499c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80049a0:	ed93 7b00 	vldr	d7, [r3]
 80049a4:	eeb1 7b47 	vneg.f64	d7, d7
 80049a8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80049ac:	ed83 7b00 	vstr	d7, [r3]
  t37.im = -theta3;
 80049b0:	4b07      	ldr	r3, [pc, #28]	; (80049d0 <G_q+0x25b0>)
 80049b2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80049b6:	443a      	add	r2, r7
 80049b8:	4413      	add	r3, r2
 80049ba:	ed93 7b00 	vldr	d7, [r3]
 80049be:	eeb1 7b47 	vneg.f64	d7, d7
 80049c2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80049c6:	ed83 7b02 	vstr	d7, [r3, #8]
  t36.re = t297.re;
 80049ca:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80049ce:	e001      	b.n	80049d4 <G_q+0x25b4>
 80049d0:	ffffec48 	.word	0xffffec48
 80049d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80049d8:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 80049dc:	e9c2 3400 	strd	r3, r4, [r2]
  t36.im = theta3;
 80049e0:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 80049e4:	4bc4      	ldr	r3, [pc, #784]	; (8004cf8 <G_q+0x28d8>)
 80049e6:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80049ea:	4439      	add	r1, r7
 80049ec:	440b      	add	r3, r1
 80049ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80049f2:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t35.re = -t297.re;
 80049f6:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80049fa:	ed93 7b00 	vldr	d7, [r3]
 80049fe:	eeb1 7b47 	vneg.f64	d7, d7
 8004a02:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8004a06:	ed83 7b00 	vstr	d7, [r3]
  t35.im = -theta3;
 8004a0a:	4bbb      	ldr	r3, [pc, #748]	; (8004cf8 <G_q+0x28d8>)
 8004a0c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004a10:	443a      	add	r2, r7
 8004a12:	4413      	add	r3, r2
 8004a14:	ed93 7b00 	vldr	d7, [r3]
 8004a18:	eeb1 7b47 	vneg.f64	d7, d7
 8004a1c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8004a20:	ed83 7b02 	vstr	d7, [r3, #8]
  t32.re = t297.re;
 8004a24:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004a28:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004a2c:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8004a30:	e9c2 3400 	strd	r3, r4, [r2]
  t32.im = theta3;
 8004a34:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8004a38:	4baf      	ldr	r3, [pc, #700]	; (8004cf8 <G_q+0x28d8>)
 8004a3a:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004a3e:	4439      	add	r1, r7
 8004a40:	440b      	add	r3, r1
 8004a42:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004a46:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t31.re = -t297.re;
 8004a4a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004a4e:	ed93 7b00 	vldr	d7, [r3]
 8004a52:	eeb1 7b47 	vneg.f64	d7, d7
 8004a56:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8004a5a:	ed83 7b00 	vstr	d7, [r3]
  t31.im = -theta3;
 8004a5e:	4ba6      	ldr	r3, [pc, #664]	; (8004cf8 <G_q+0x28d8>)
 8004a60:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004a64:	443a      	add	r2, r7
 8004a66:	4413      	add	r3, r2
 8004a68:	ed93 7b00 	vldr	d7, [r3]
 8004a6c:	eeb1 7b47 	vneg.f64	d7, d7
 8004a70:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8004a74:	ed83 7b02 	vstr	d7, [r3, #8]
  t28.re = t297.re;
 8004a78:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004a7c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004a80:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8004a84:	e9c2 3400 	strd	r3, r4, [r2]
  t28.im = theta3;
 8004a88:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8004a8c:	4b9a      	ldr	r3, [pc, #616]	; (8004cf8 <G_q+0x28d8>)
 8004a8e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004a92:	4439      	add	r1, r7
 8004a94:	440b      	add	r3, r1
 8004a96:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004a9a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t27.re = -t297.re;
 8004a9e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004aa2:	ed93 7b00 	vldr	d7, [r3]
 8004aa6:	eeb1 7b47 	vneg.f64	d7, d7
 8004aaa:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004aae:	ed83 7b00 	vstr	d7, [r3]
  t27.im = -theta3;
 8004ab2:	4b91      	ldr	r3, [pc, #580]	; (8004cf8 <G_q+0x28d8>)
 8004ab4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004ab8:	443a      	add	r2, r7
 8004aba:	4413      	add	r3, r2
 8004abc:	ed93 7b00 	vldr	d7, [r3]
 8004ac0:	eeb1 7b47 	vneg.f64	d7, d7
 8004ac4:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004ac8:	ed83 7b02 	vstr	d7, [r3, #8]
  t17.re = t297.re;
 8004acc:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004ad0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004ad4:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8004ad8:	e9c2 3400 	strd	r3, r4, [r2]
  t17.im = theta3;
 8004adc:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8004ae0:	4b85      	ldr	r3, [pc, #532]	; (8004cf8 <G_q+0x28d8>)
 8004ae2:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004ae6:	4439      	add	r1, r7
 8004ae8:	440b      	add	r3, r1
 8004aea:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004aee:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t16.re = -t297.re;
 8004af2:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004af6:	ed93 7b00 	vldr	d7, [r3]
 8004afa:	eeb1 7b47 	vneg.f64	d7, d7
 8004afe:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8004b02:	ed83 7b00 	vstr	d7, [r3]
  t16.im = -theta3;
 8004b06:	4b7c      	ldr	r3, [pc, #496]	; (8004cf8 <G_q+0x28d8>)
 8004b08:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004b0c:	443a      	add	r2, r7
 8004b0e:	4413      	add	r3, r2
 8004b10:	ed93 7b00 	vldr	d7, [r3]
 8004b14:	eeb1 7b47 	vneg.f64	d7, d7
 8004b18:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8004b1c:	ed83 7b02 	vstr	d7, [r3, #8]
  t13.re = t297.re;
 8004b20:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004b24:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004b28:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8004b2c:	e9c2 3400 	strd	r3, r4, [r2]
  t13.im = theta3;
 8004b30:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8004b34:	4b70      	ldr	r3, [pc, #448]	; (8004cf8 <G_q+0x28d8>)
 8004b36:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004b3a:	4439      	add	r1, r7
 8004b3c:	440b      	add	r3, r1
 8004b3e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004b42:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t12.re = -t297.re;
 8004b46:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004b4a:	ed93 7b00 	vldr	d7, [r3]
 8004b4e:	eeb1 7b47 	vneg.f64	d7, d7
 8004b52:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8004b56:	ed83 7b00 	vstr	d7, [r3]
  t12.im = -theta3;
 8004b5a:	4b67      	ldr	r3, [pc, #412]	; (8004cf8 <G_q+0x28d8>)
 8004b5c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004b60:	443a      	add	r2, r7
 8004b62:	4413      	add	r3, r2
 8004b64:	ed93 7b00 	vldr	d7, [r3]
 8004b68:	eeb1 7b47 	vneg.f64	d7, d7
 8004b6c:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8004b70:	ed83 7b02 	vstr	d7, [r3, #8]
  t9.re = t297.re;
 8004b74:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004b78:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004b7c:	4b5f      	ldr	r3, [pc, #380]	; (8004cfc <G_q+0x28dc>)
 8004b7e:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8004b82:	4438      	add	r0, r7
 8004b84:	4403      	add	r3, r0
 8004b86:	e9c3 1200 	strd	r1, r2, [r3]
  t9.im = theta3;
 8004b8a:	4b5c      	ldr	r3, [pc, #368]	; (8004cfc <G_q+0x28dc>)
 8004b8c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004b90:	443a      	add	r2, r7
 8004b92:	4413      	add	r3, r2
 8004b94:	4a58      	ldr	r2, [pc, #352]	; (8004cf8 <G_q+0x28d8>)
 8004b96:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004b9a:	4439      	add	r1, r7
 8004b9c:	440a      	add	r2, r1
 8004b9e:	e9d2 1200 	ldrd	r1, r2, [r2]
 8004ba2:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t8.re = -t297.re;
 8004ba6:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004baa:	ed93 7b00 	vldr	d7, [r3]
 8004bae:	eeb1 7b47 	vneg.f64	d7, d7
 8004bb2:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8004bb6:	ed83 7b00 	vstr	d7, [r3]
  t8.im = -theta3;
 8004bba:	4b4f      	ldr	r3, [pc, #316]	; (8004cf8 <G_q+0x28d8>)
 8004bbc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004bc0:	443a      	add	r2, r7
 8004bc2:	4413      	add	r3, r2
 8004bc4:	ed93 7b00 	vldr	d7, [r3]
 8004bc8:	eeb1 7b47 	vneg.f64	d7, d7
 8004bcc:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8004bd0:	ed83 7b02 	vstr	d7, [r3, #8]
  b_exp(&t8);
 8004bd4:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f00d fd2d 	bl	8012638 <b_exp>
  t285.re = theta4 * 0.0;
 8004bde:	f107 0310 	add.w	r3, r7, #16
 8004be2:	ed93 7b00 	vldr	d7, [r3]
 8004be6:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8004cf0 <G_q+0x28d0>
 8004bea:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004bee:	4b44      	ldr	r3, [pc, #272]	; (8004d00 <G_q+0x28e0>)
 8004bf0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004bf4:	443a      	add	r2, r7
 8004bf6:	4413      	add	r3, r2
 8004bf8:	ed83 7b00 	vstr	d7, [r3]
  t285.im = theta4;
 8004bfc:	4b40      	ldr	r3, [pc, #256]	; (8004d00 <G_q+0x28e0>)
 8004bfe:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004c02:	443a      	add	r2, r7
 8004c04:	4413      	add	r3, r2
 8004c06:	f107 0210 	add.w	r2, r7, #16
 8004c0a:	e9d2 1200 	ldrd	r1, r2, [r2]
 8004c0e:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t284.re = -t285.re;
 8004c12:	4b3b      	ldr	r3, [pc, #236]	; (8004d00 <G_q+0x28e0>)
 8004c14:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004c18:	443a      	add	r2, r7
 8004c1a:	4413      	add	r3, r2
 8004c1c:	ed93 7b00 	vldr	d7, [r3]
 8004c20:	eeb1 7b47 	vneg.f64	d7, d7
 8004c24:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8004c28:	ed83 7b00 	vstr	d7, [r3]
  t284.im = -theta4;
 8004c2c:	f107 0310 	add.w	r3, r7, #16
 8004c30:	ed93 7b00 	vldr	d7, [r3]
 8004c34:	eeb1 7b47 	vneg.f64	d7, d7
 8004c38:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8004c3c:	ed83 7b02 	vstr	d7, [r3, #8]
  t279.re = t285.re;
 8004c40:	4b2f      	ldr	r3, [pc, #188]	; (8004d00 <G_q+0x28e0>)
 8004c42:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004c46:	443a      	add	r2, r7
 8004c48:	4413      	add	r3, r2
 8004c4a:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004c4e:	4b2d      	ldr	r3, [pc, #180]	; (8004d04 <G_q+0x28e4>)
 8004c50:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8004c54:	4438      	add	r0, r7
 8004c56:	4403      	add	r3, r0
 8004c58:	e9c3 1200 	strd	r1, r2, [r3]
  t279.im = theta4;
 8004c5c:	4b29      	ldr	r3, [pc, #164]	; (8004d04 <G_q+0x28e4>)
 8004c5e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004c62:	443a      	add	r2, r7
 8004c64:	4413      	add	r3, r2
 8004c66:	f107 0210 	add.w	r2, r7, #16
 8004c6a:	e9d2 1200 	ldrd	r1, r2, [r2]
 8004c6e:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t278.re = -t285.re;
 8004c72:	4b23      	ldr	r3, [pc, #140]	; (8004d00 <G_q+0x28e0>)
 8004c74:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004c78:	443a      	add	r2, r7
 8004c7a:	4413      	add	r3, r2
 8004c7c:	ed93 7b00 	vldr	d7, [r3]
 8004c80:	eeb1 7b47 	vneg.f64	d7, d7
 8004c84:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004c88:	ed83 7b00 	vstr	d7, [r3]
  t278.im = -theta4;
 8004c8c:	f107 0310 	add.w	r3, r7, #16
 8004c90:	ed93 7b00 	vldr	d7, [r3]
 8004c94:	eeb1 7b47 	vneg.f64	d7, d7
 8004c98:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004c9c:	ed83 7b02 	vstr	d7, [r3, #8]
  t255.re = t285.re;
 8004ca0:	4b17      	ldr	r3, [pc, #92]	; (8004d00 <G_q+0x28e0>)
 8004ca2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004ca6:	443a      	add	r2, r7
 8004ca8:	4413      	add	r3, r2
 8004caa:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004cae:	4b16      	ldr	r3, [pc, #88]	; (8004d08 <G_q+0x28e8>)
 8004cb0:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8004cb4:	4438      	add	r0, r7
 8004cb6:	4403      	add	r3, r0
 8004cb8:	e9c3 1200 	strd	r1, r2, [r3]
  t255.im = theta4;
 8004cbc:	4b12      	ldr	r3, [pc, #72]	; (8004d08 <G_q+0x28e8>)
 8004cbe:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004cc2:	443a      	add	r2, r7
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f107 0210 	add.w	r2, r7, #16
 8004cca:	e9d2 1200 	ldrd	r1, r2, [r2]
 8004cce:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t254.re = -t285.re;
 8004cd2:	4b0b      	ldr	r3, [pc, #44]	; (8004d00 <G_q+0x28e0>)
 8004cd4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004cd8:	443a      	add	r2, r7
 8004cda:	4413      	add	r3, r2
 8004cdc:	ed93 7b00 	vldr	d7, [r3]
 8004ce0:	eeb1 7b47 	vneg.f64	d7, d7
 8004ce4:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8004ce8:	ed83 7b00 	vstr	d7, [r3]
 8004cec:	e00e      	b.n	8004d0c <G_q+0x28ec>
 8004cee:	bf00      	nop
	...
 8004cf8:	ffffec48 	.word	0xffffec48
 8004cfc:	ffffeff0 	.word	0xffffeff0
 8004d00:	ffffefd0 	.word	0xffffefd0
 8004d04:	ffffefb0 	.word	0xffffefb0
 8004d08:	ffffef90 	.word	0xffffef90
  t254.im = -theta4;
 8004d0c:	f107 0310 	add.w	r3, r7, #16
 8004d10:	ed93 7b00 	vldr	d7, [r3]
 8004d14:	eeb1 7b47 	vneg.f64	d7, d7
 8004d18:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8004d1c:	ed83 7b02 	vstr	d7, [r3, #8]
  t243.re = t285.re;
 8004d20:	4bbd      	ldr	r3, [pc, #756]	; (8005018 <G_q+0x2bf8>)
 8004d22:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004d26:	443a      	add	r2, r7
 8004d28:	4413      	add	r3, r2
 8004d2a:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004d2e:	4bbb      	ldr	r3, [pc, #748]	; (800501c <G_q+0x2bfc>)
 8004d30:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8004d34:	4438      	add	r0, r7
 8004d36:	4403      	add	r3, r0
 8004d38:	e9c3 1200 	strd	r1, r2, [r3]
  t243.im = theta4;
 8004d3c:	4bb7      	ldr	r3, [pc, #732]	; (800501c <G_q+0x2bfc>)
 8004d3e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004d42:	443a      	add	r2, r7
 8004d44:	4413      	add	r3, r2
 8004d46:	f107 0210 	add.w	r2, r7, #16
 8004d4a:	e9d2 1200 	ldrd	r1, r2, [r2]
 8004d4e:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t242.re = -t285.re;
 8004d52:	4bb1      	ldr	r3, [pc, #708]	; (8005018 <G_q+0x2bf8>)
 8004d54:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004d58:	443a      	add	r2, r7
 8004d5a:	4413      	add	r3, r2
 8004d5c:	ed93 7b00 	vldr	d7, [r3]
 8004d60:	eeb1 7b47 	vneg.f64	d7, d7
 8004d64:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8004d68:	ed83 7b00 	vstr	d7, [r3]
  t242.im = -theta4;
 8004d6c:	f107 0310 	add.w	r3, r7, #16
 8004d70:	ed93 7b00 	vldr	d7, [r3]
 8004d74:	eeb1 7b47 	vneg.f64	d7, d7
 8004d78:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8004d7c:	ed83 7b02 	vstr	d7, [r3, #8]
  t231.re = t285.re;
 8004d80:	4ba5      	ldr	r3, [pc, #660]	; (8005018 <G_q+0x2bf8>)
 8004d82:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004d86:	443a      	add	r2, r7
 8004d88:	4413      	add	r3, r2
 8004d8a:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004d8e:	4ba4      	ldr	r3, [pc, #656]	; (8005020 <G_q+0x2c00>)
 8004d90:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8004d94:	4438      	add	r0, r7
 8004d96:	4403      	add	r3, r0
 8004d98:	e9c3 1200 	strd	r1, r2, [r3]
  t231.im = theta4;
 8004d9c:	4ba0      	ldr	r3, [pc, #640]	; (8005020 <G_q+0x2c00>)
 8004d9e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004da2:	443a      	add	r2, r7
 8004da4:	4413      	add	r3, r2
 8004da6:	f107 0210 	add.w	r2, r7, #16
 8004daa:	e9d2 1200 	ldrd	r1, r2, [r2]
 8004dae:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t230.re = -t285.re;
 8004db2:	4b99      	ldr	r3, [pc, #612]	; (8005018 <G_q+0x2bf8>)
 8004db4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004db8:	443a      	add	r2, r7
 8004dba:	4413      	add	r3, r2
 8004dbc:	ed93 7b00 	vldr	d7, [r3]
 8004dc0:	eeb1 7b47 	vneg.f64	d7, d7
 8004dc4:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8004dc8:	ed83 7b00 	vstr	d7, [r3]
  t230.im = -theta4;
 8004dcc:	f107 0310 	add.w	r3, r7, #16
 8004dd0:	ed93 7b00 	vldr	d7, [r3]
 8004dd4:	eeb1 7b47 	vneg.f64	d7, d7
 8004dd8:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8004ddc:	ed83 7b02 	vstr	d7, [r3, #8]
  t229.re = t285.re;
 8004de0:	4b8d      	ldr	r3, [pc, #564]	; (8005018 <G_q+0x2bf8>)
 8004de2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004de6:	443a      	add	r2, r7
 8004de8:	4413      	add	r3, r2
 8004dea:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004dee:	4b8d      	ldr	r3, [pc, #564]	; (8005024 <G_q+0x2c04>)
 8004df0:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8004df4:	4438      	add	r0, r7
 8004df6:	4403      	add	r3, r0
 8004df8:	e9c3 1200 	strd	r1, r2, [r3]
  t229.im = theta4;
 8004dfc:	4b89      	ldr	r3, [pc, #548]	; (8005024 <G_q+0x2c04>)
 8004dfe:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004e02:	443a      	add	r2, r7
 8004e04:	4413      	add	r3, r2
 8004e06:	f107 0210 	add.w	r2, r7, #16
 8004e0a:	e9d2 1200 	ldrd	r1, r2, [r2]
 8004e0e:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t228.re = -t285.re;
 8004e12:	4b81      	ldr	r3, [pc, #516]	; (8005018 <G_q+0x2bf8>)
 8004e14:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004e18:	443a      	add	r2, r7
 8004e1a:	4413      	add	r3, r2
 8004e1c:	ed93 7b00 	vldr	d7, [r3]
 8004e20:	eeb1 7b47 	vneg.f64	d7, d7
 8004e24:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8004e28:	ed83 7b00 	vstr	d7, [r3]
  t228.im = -theta4;
 8004e2c:	f107 0310 	add.w	r3, r7, #16
 8004e30:	ed93 7b00 	vldr	d7, [r3]
 8004e34:	eeb1 7b47 	vneg.f64	d7, d7
 8004e38:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8004e3c:	ed83 7b02 	vstr	d7, [r3, #8]
  t209.re = t285.re;
 8004e40:	4b75      	ldr	r3, [pc, #468]	; (8005018 <G_q+0x2bf8>)
 8004e42:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004e46:	443a      	add	r2, r7
 8004e48:	4413      	add	r3, r2
 8004e4a:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004e4e:	4b76      	ldr	r3, [pc, #472]	; (8005028 <G_q+0x2c08>)
 8004e50:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8004e54:	4438      	add	r0, r7
 8004e56:	4403      	add	r3, r0
 8004e58:	e9c3 1200 	strd	r1, r2, [r3]
  t209.im = theta4;
 8004e5c:	4b72      	ldr	r3, [pc, #456]	; (8005028 <G_q+0x2c08>)
 8004e5e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004e62:	443a      	add	r2, r7
 8004e64:	4413      	add	r3, r2
 8004e66:	f107 0210 	add.w	r2, r7, #16
 8004e6a:	e9d2 1200 	ldrd	r1, r2, [r2]
 8004e6e:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t208.re = -t285.re;
 8004e72:	4b69      	ldr	r3, [pc, #420]	; (8005018 <G_q+0x2bf8>)
 8004e74:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004e78:	443a      	add	r2, r7
 8004e7a:	4413      	add	r3, r2
 8004e7c:	ed93 7b00 	vldr	d7, [r3]
 8004e80:	eeb1 7b47 	vneg.f64	d7, d7
 8004e84:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004e88:	ed83 7b00 	vstr	d7, [r3]
  t208.im = -theta4;
 8004e8c:	f107 0310 	add.w	r3, r7, #16
 8004e90:	ed93 7b00 	vldr	d7, [r3]
 8004e94:	eeb1 7b47 	vneg.f64	d7, d7
 8004e98:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004e9c:	ed83 7b02 	vstr	d7, [r3, #8]
  t197.re = t285.re;
 8004ea0:	4b5d      	ldr	r3, [pc, #372]	; (8005018 <G_q+0x2bf8>)
 8004ea2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004ea6:	443a      	add	r2, r7
 8004ea8:	4413      	add	r3, r2
 8004eaa:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004eae:	4b5f      	ldr	r3, [pc, #380]	; (800502c <G_q+0x2c0c>)
 8004eb0:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8004eb4:	4438      	add	r0, r7
 8004eb6:	4403      	add	r3, r0
 8004eb8:	e9c3 1200 	strd	r1, r2, [r3]
  t197.im = theta4;
 8004ebc:	4b5b      	ldr	r3, [pc, #364]	; (800502c <G_q+0x2c0c>)
 8004ebe:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004ec2:	443a      	add	r2, r7
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f107 0210 	add.w	r2, r7, #16
 8004eca:	e9d2 1200 	ldrd	r1, r2, [r2]
 8004ece:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t196.re = -t285.re;
 8004ed2:	4b51      	ldr	r3, [pc, #324]	; (8005018 <G_q+0x2bf8>)
 8004ed4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004ed8:	443a      	add	r2, r7
 8004eda:	4413      	add	r3, r2
 8004edc:	ed93 7b00 	vldr	d7, [r3]
 8004ee0:	eeb1 7b47 	vneg.f64	d7, d7
 8004ee4:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8004ee8:	ed83 7b00 	vstr	d7, [r3]
  t196.im = -theta4;
 8004eec:	f107 0310 	add.w	r3, r7, #16
 8004ef0:	ed93 7b00 	vldr	d7, [r3]
 8004ef4:	eeb1 7b47 	vneg.f64	d7, d7
 8004ef8:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8004efc:	ed83 7b02 	vstr	d7, [r3, #8]
  t185.re = t285.re;
 8004f00:	4b45      	ldr	r3, [pc, #276]	; (8005018 <G_q+0x2bf8>)
 8004f02:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004f06:	443a      	add	r2, r7
 8004f08:	4413      	add	r3, r2
 8004f0a:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004f0e:	4b48      	ldr	r3, [pc, #288]	; (8005030 <G_q+0x2c10>)
 8004f10:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8004f14:	4438      	add	r0, r7
 8004f16:	4403      	add	r3, r0
 8004f18:	e9c3 1200 	strd	r1, r2, [r3]
  t185.im = theta4;
 8004f1c:	4b44      	ldr	r3, [pc, #272]	; (8005030 <G_q+0x2c10>)
 8004f1e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004f22:	443a      	add	r2, r7
 8004f24:	4413      	add	r3, r2
 8004f26:	f107 0210 	add.w	r2, r7, #16
 8004f2a:	e9d2 1200 	ldrd	r1, r2, [r2]
 8004f2e:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t184.re = -t285.re;
 8004f32:	4b39      	ldr	r3, [pc, #228]	; (8005018 <G_q+0x2bf8>)
 8004f34:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004f38:	443a      	add	r2, r7
 8004f3a:	4413      	add	r3, r2
 8004f3c:	ed93 7b00 	vldr	d7, [r3]
 8004f40:	eeb1 7b47 	vneg.f64	d7, d7
 8004f44:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8004f48:	ed83 7b00 	vstr	d7, [r3]
  t184.im = -theta4;
 8004f4c:	f107 0310 	add.w	r3, r7, #16
 8004f50:	ed93 7b00 	vldr	d7, [r3]
 8004f54:	eeb1 7b47 	vneg.f64	d7, d7
 8004f58:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8004f5c:	ed83 7b02 	vstr	d7, [r3, #8]
  t173.re = t285.re;
 8004f60:	4b2d      	ldr	r3, [pc, #180]	; (8005018 <G_q+0x2bf8>)
 8004f62:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004f66:	443a      	add	r2, r7
 8004f68:	4413      	add	r3, r2
 8004f6a:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004f6e:	4b31      	ldr	r3, [pc, #196]	; (8005034 <G_q+0x2c14>)
 8004f70:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8004f74:	4438      	add	r0, r7
 8004f76:	4403      	add	r3, r0
 8004f78:	e9c3 1200 	strd	r1, r2, [r3]
  t173.im = theta4;
 8004f7c:	4b2d      	ldr	r3, [pc, #180]	; (8005034 <G_q+0x2c14>)
 8004f7e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004f82:	443a      	add	r2, r7
 8004f84:	4413      	add	r3, r2
 8004f86:	f107 0210 	add.w	r2, r7, #16
 8004f8a:	e9d2 1200 	ldrd	r1, r2, [r2]
 8004f8e:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t172.re = -t285.re;
 8004f92:	4b21      	ldr	r3, [pc, #132]	; (8005018 <G_q+0x2bf8>)
 8004f94:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004f98:	443a      	add	r2, r7
 8004f9a:	4413      	add	r3, r2
 8004f9c:	ed93 7b00 	vldr	d7, [r3]
 8004fa0:	eeb1 7b47 	vneg.f64	d7, d7
 8004fa4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8004fa8:	ed83 7b00 	vstr	d7, [r3]
  t172.im = -theta4;
 8004fac:	f107 0310 	add.w	r3, r7, #16
 8004fb0:	ed93 7b00 	vldr	d7, [r3]
 8004fb4:	eeb1 7b47 	vneg.f64	d7, d7
 8004fb8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8004fbc:	ed83 7b02 	vstr	d7, [r3, #8]
  t159.re = t285.re;
 8004fc0:	4b15      	ldr	r3, [pc, #84]	; (8005018 <G_q+0x2bf8>)
 8004fc2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004fc6:	443a      	add	r2, r7
 8004fc8:	4413      	add	r3, r2
 8004fca:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004fce:	4b1a      	ldr	r3, [pc, #104]	; (8005038 <G_q+0x2c18>)
 8004fd0:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8004fd4:	4438      	add	r0, r7
 8004fd6:	4403      	add	r3, r0
 8004fd8:	e9c3 1200 	strd	r1, r2, [r3]
  t159.im = theta4;
 8004fdc:	4b16      	ldr	r3, [pc, #88]	; (8005038 <G_q+0x2c18>)
 8004fde:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004fe2:	443a      	add	r2, r7
 8004fe4:	4413      	add	r3, r2
 8004fe6:	f107 0210 	add.w	r2, r7, #16
 8004fea:	e9d2 1200 	ldrd	r1, r2, [r2]
 8004fee:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t158.re = -t285.re;
 8004ff2:	4b09      	ldr	r3, [pc, #36]	; (8005018 <G_q+0x2bf8>)
 8004ff4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004ff8:	443a      	add	r2, r7
 8004ffa:	4413      	add	r3, r2
 8004ffc:	ed93 7b00 	vldr	d7, [r3]
 8005000:	eeb1 7b47 	vneg.f64	d7, d7
 8005004:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005008:	ed83 7b00 	vstr	d7, [r3]
  t158.im = -theta4;
 800500c:	f107 0310 	add.w	r3, r7, #16
 8005010:	ed93 7b00 	vldr	d7, [r3]
 8005014:	e012      	b.n	800503c <G_q+0x2c1c>
 8005016:	bf00      	nop
 8005018:	ffffefd0 	.word	0xffffefd0
 800501c:	ffffef70 	.word	0xffffef70
 8005020:	ffffef50 	.word	0xffffef50
 8005024:	ffffef30 	.word	0xffffef30
 8005028:	ffffef10 	.word	0xffffef10
 800502c:	ffffeef0 	.word	0xffffeef0
 8005030:	ffffeed0 	.word	0xffffeed0
 8005034:	ffffeeb0 	.word	0xffffeeb0
 8005038:	ffffee90 	.word	0xffffee90
 800503c:	eeb1 7b47 	vneg.f64	d7, d7
 8005040:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005044:	ed83 7b02 	vstr	d7, [r3, #8]
  t153.re = t285.re;
 8005048:	4bbd      	ldr	r3, [pc, #756]	; (8005340 <G_q+0x2f20>)
 800504a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800504e:	443a      	add	r2, r7
 8005050:	4413      	add	r3, r2
 8005052:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005056:	4bbb      	ldr	r3, [pc, #748]	; (8005344 <G_q+0x2f24>)
 8005058:	f241 30d0 	movw	r0, #5072	; 0x13d0
 800505c:	4438      	add	r0, r7
 800505e:	4403      	add	r3, r0
 8005060:	e9c3 1200 	strd	r1, r2, [r3]
  t153.im = theta4;
 8005064:	4bb7      	ldr	r3, [pc, #732]	; (8005344 <G_q+0x2f24>)
 8005066:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800506a:	443a      	add	r2, r7
 800506c:	4413      	add	r3, r2
 800506e:	f107 0210 	add.w	r2, r7, #16
 8005072:	e9d2 1200 	ldrd	r1, r2, [r2]
 8005076:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t152.re = -t285.re;
 800507a:	4bb1      	ldr	r3, [pc, #708]	; (8005340 <G_q+0x2f20>)
 800507c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005080:	443a      	add	r2, r7
 8005082:	4413      	add	r3, r2
 8005084:	ed93 7b00 	vldr	d7, [r3]
 8005088:	eeb1 7b47 	vneg.f64	d7, d7
 800508c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8005090:	ed83 7b00 	vstr	d7, [r3]
  t152.im = -theta4;
 8005094:	f107 0310 	add.w	r3, r7, #16
 8005098:	ed93 7b00 	vldr	d7, [r3]
 800509c:	eeb1 7b47 	vneg.f64	d7, d7
 80050a0:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80050a4:	ed83 7b02 	vstr	d7, [r3, #8]
  t135.re = t285.re;
 80050a8:	4ba5      	ldr	r3, [pc, #660]	; (8005340 <G_q+0x2f20>)
 80050aa:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80050ae:	443a      	add	r2, r7
 80050b0:	4413      	add	r3, r2
 80050b2:	e9d3 1200 	ldrd	r1, r2, [r3]
 80050b6:	4ba4      	ldr	r3, [pc, #656]	; (8005348 <G_q+0x2f28>)
 80050b8:	f241 30d0 	movw	r0, #5072	; 0x13d0
 80050bc:	4438      	add	r0, r7
 80050be:	4403      	add	r3, r0
 80050c0:	e9c3 1200 	strd	r1, r2, [r3]
  t135.im = theta4;
 80050c4:	4ba0      	ldr	r3, [pc, #640]	; (8005348 <G_q+0x2f28>)
 80050c6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80050ca:	443a      	add	r2, r7
 80050cc:	4413      	add	r3, r2
 80050ce:	f107 0210 	add.w	r2, r7, #16
 80050d2:	e9d2 1200 	ldrd	r1, r2, [r2]
 80050d6:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t134.re = -t285.re;
 80050da:	4b99      	ldr	r3, [pc, #612]	; (8005340 <G_q+0x2f20>)
 80050dc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80050e0:	443a      	add	r2, r7
 80050e2:	4413      	add	r3, r2
 80050e4:	ed93 7b00 	vldr	d7, [r3]
 80050e8:	eeb1 7b47 	vneg.f64	d7, d7
 80050ec:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80050f0:	ed83 7b00 	vstr	d7, [r3]
  t134.im = -theta4;
 80050f4:	f107 0310 	add.w	r3, r7, #16
 80050f8:	ed93 7b00 	vldr	d7, [r3]
 80050fc:	eeb1 7b47 	vneg.f64	d7, d7
 8005100:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8005104:	ed83 7b02 	vstr	d7, [r3, #8]
  t123.re = t285.re;
 8005108:	4b8d      	ldr	r3, [pc, #564]	; (8005340 <G_q+0x2f20>)
 800510a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800510e:	443a      	add	r2, r7
 8005110:	4413      	add	r3, r2
 8005112:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005116:	4b8d      	ldr	r3, [pc, #564]	; (800534c <G_q+0x2f2c>)
 8005118:	f241 30d0 	movw	r0, #5072	; 0x13d0
 800511c:	4438      	add	r0, r7
 800511e:	4403      	add	r3, r0
 8005120:	e9c3 1200 	strd	r1, r2, [r3]
  t123.im = theta4;
 8005124:	4b89      	ldr	r3, [pc, #548]	; (800534c <G_q+0x2f2c>)
 8005126:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800512a:	443a      	add	r2, r7
 800512c:	4413      	add	r3, r2
 800512e:	f107 0210 	add.w	r2, r7, #16
 8005132:	e9d2 1200 	ldrd	r1, r2, [r2]
 8005136:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t122.re = -t285.re;
 800513a:	4b81      	ldr	r3, [pc, #516]	; (8005340 <G_q+0x2f20>)
 800513c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005140:	443a      	add	r2, r7
 8005142:	4413      	add	r3, r2
 8005144:	ed93 7b00 	vldr	d7, [r3]
 8005148:	eeb1 7b47 	vneg.f64	d7, d7
 800514c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8005150:	ed83 7b00 	vstr	d7, [r3]
  t122.im = -theta4;
 8005154:	f107 0310 	add.w	r3, r7, #16
 8005158:	ed93 7b00 	vldr	d7, [r3]
 800515c:	eeb1 7b47 	vneg.f64	d7, d7
 8005160:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8005164:	ed83 7b02 	vstr	d7, [r3, #8]
  t103.re = t285.re;
 8005168:	4b75      	ldr	r3, [pc, #468]	; (8005340 <G_q+0x2f20>)
 800516a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800516e:	443a      	add	r2, r7
 8005170:	4413      	add	r3, r2
 8005172:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005176:	4b76      	ldr	r3, [pc, #472]	; (8005350 <G_q+0x2f30>)
 8005178:	f241 30d0 	movw	r0, #5072	; 0x13d0
 800517c:	4438      	add	r0, r7
 800517e:	4403      	add	r3, r0
 8005180:	e9c3 1200 	strd	r1, r2, [r3]
  t103.im = theta4;
 8005184:	4b72      	ldr	r3, [pc, #456]	; (8005350 <G_q+0x2f30>)
 8005186:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800518a:	443a      	add	r2, r7
 800518c:	4413      	add	r3, r2
 800518e:	f107 0210 	add.w	r2, r7, #16
 8005192:	e9d2 1200 	ldrd	r1, r2, [r2]
 8005196:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t102.re = -t285.re;
 800519a:	4b69      	ldr	r3, [pc, #420]	; (8005340 <G_q+0x2f20>)
 800519c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80051a0:	443a      	add	r2, r7
 80051a2:	4413      	add	r3, r2
 80051a4:	ed93 7b00 	vldr	d7, [r3]
 80051a8:	eeb1 7b47 	vneg.f64	d7, d7
 80051ac:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80051b0:	ed83 7b00 	vstr	d7, [r3]
  t102.im = -theta4;
 80051b4:	f107 0310 	add.w	r3, r7, #16
 80051b8:	ed93 7b00 	vldr	d7, [r3]
 80051bc:	eeb1 7b47 	vneg.f64	d7, d7
 80051c0:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80051c4:	ed83 7b02 	vstr	d7, [r3, #8]
  t101.re = t285.re;
 80051c8:	4b5d      	ldr	r3, [pc, #372]	; (8005340 <G_q+0x2f20>)
 80051ca:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80051ce:	443a      	add	r2, r7
 80051d0:	4413      	add	r3, r2
 80051d2:	e9d3 1200 	ldrd	r1, r2, [r3]
 80051d6:	4b5f      	ldr	r3, [pc, #380]	; (8005354 <G_q+0x2f34>)
 80051d8:	f241 30d0 	movw	r0, #5072	; 0x13d0
 80051dc:	4438      	add	r0, r7
 80051de:	4403      	add	r3, r0
 80051e0:	e9c3 1200 	strd	r1, r2, [r3]
  t101.im = theta4;
 80051e4:	4b5b      	ldr	r3, [pc, #364]	; (8005354 <G_q+0x2f34>)
 80051e6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80051ea:	443a      	add	r2, r7
 80051ec:	4413      	add	r3, r2
 80051ee:	f107 0210 	add.w	r2, r7, #16
 80051f2:	e9d2 1200 	ldrd	r1, r2, [r2]
 80051f6:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t100.re = -t285.re;
 80051fa:	4b51      	ldr	r3, [pc, #324]	; (8005340 <G_q+0x2f20>)
 80051fc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005200:	443a      	add	r2, r7
 8005202:	4413      	add	r3, r2
 8005204:	ed93 7b00 	vldr	d7, [r3]
 8005208:	eeb1 7b47 	vneg.f64	d7, d7
 800520c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8005210:	ed83 7b00 	vstr	d7, [r3]
  t100.im = -theta4;
 8005214:	f107 0310 	add.w	r3, r7, #16
 8005218:	ed93 7b00 	vldr	d7, [r3]
 800521c:	eeb1 7b47 	vneg.f64	d7, d7
 8005220:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8005224:	ed83 7b02 	vstr	d7, [r3, #8]
  t87.re = t285.re;
 8005228:	4b45      	ldr	r3, [pc, #276]	; (8005340 <G_q+0x2f20>)
 800522a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800522e:	443a      	add	r2, r7
 8005230:	4413      	add	r3, r2
 8005232:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005236:	4b48      	ldr	r3, [pc, #288]	; (8005358 <G_q+0x2f38>)
 8005238:	f241 30d0 	movw	r0, #5072	; 0x13d0
 800523c:	4438      	add	r0, r7
 800523e:	4403      	add	r3, r0
 8005240:	e9c3 1200 	strd	r1, r2, [r3]
  t87.im = theta4;
 8005244:	4b44      	ldr	r3, [pc, #272]	; (8005358 <G_q+0x2f38>)
 8005246:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800524a:	443a      	add	r2, r7
 800524c:	4413      	add	r3, r2
 800524e:	f107 0210 	add.w	r2, r7, #16
 8005252:	e9d2 1200 	ldrd	r1, r2, [r2]
 8005256:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t86.re = -t285.re;
 800525a:	4b39      	ldr	r3, [pc, #228]	; (8005340 <G_q+0x2f20>)
 800525c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005260:	443a      	add	r2, r7
 8005262:	4413      	add	r3, r2
 8005264:	ed93 7b00 	vldr	d7, [r3]
 8005268:	eeb1 7b47 	vneg.f64	d7, d7
 800526c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8005270:	ed83 7b00 	vstr	d7, [r3]
  t86.im = -theta4;
 8005274:	f107 0310 	add.w	r3, r7, #16
 8005278:	ed93 7b00 	vldr	d7, [r3]
 800527c:	eeb1 7b47 	vneg.f64	d7, d7
 8005280:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8005284:	ed83 7b02 	vstr	d7, [r3, #8]
  t59.re = t285.re;
 8005288:	4b2d      	ldr	r3, [pc, #180]	; (8005340 <G_q+0x2f20>)
 800528a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800528e:	443a      	add	r2, r7
 8005290:	4413      	add	r3, r2
 8005292:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005296:	4b31      	ldr	r3, [pc, #196]	; (800535c <G_q+0x2f3c>)
 8005298:	f241 30d0 	movw	r0, #5072	; 0x13d0
 800529c:	4438      	add	r0, r7
 800529e:	4403      	add	r3, r0
 80052a0:	e9c3 1200 	strd	r1, r2, [r3]
  t59.im = theta4;
 80052a4:	4b2d      	ldr	r3, [pc, #180]	; (800535c <G_q+0x2f3c>)
 80052a6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80052aa:	443a      	add	r2, r7
 80052ac:	4413      	add	r3, r2
 80052ae:	f107 0210 	add.w	r2, r7, #16
 80052b2:	e9d2 1200 	ldrd	r1, r2, [r2]
 80052b6:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t58.re = -t285.re;
 80052ba:	4b21      	ldr	r3, [pc, #132]	; (8005340 <G_q+0x2f20>)
 80052bc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80052c0:	443a      	add	r2, r7
 80052c2:	4413      	add	r3, r2
 80052c4:	ed93 7b00 	vldr	d7, [r3]
 80052c8:	eeb1 7b47 	vneg.f64	d7, d7
 80052cc:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80052d0:	ed83 7b00 	vstr	d7, [r3]
  t58.im = -theta4;
 80052d4:	f107 0310 	add.w	r3, r7, #16
 80052d8:	ed93 7b00 	vldr	d7, [r3]
 80052dc:	eeb1 7b47 	vneg.f64	d7, d7
 80052e0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80052e4:	ed83 7b02 	vstr	d7, [r3, #8]
  t42.re = t285.re;
 80052e8:	4b15      	ldr	r3, [pc, #84]	; (8005340 <G_q+0x2f20>)
 80052ea:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80052ee:	443a      	add	r2, r7
 80052f0:	4413      	add	r3, r2
 80052f2:	e9d3 1200 	ldrd	r1, r2, [r3]
 80052f6:	4b1a      	ldr	r3, [pc, #104]	; (8005360 <G_q+0x2f40>)
 80052f8:	f241 30d0 	movw	r0, #5072	; 0x13d0
 80052fc:	4438      	add	r0, r7
 80052fe:	4403      	add	r3, r0
 8005300:	e9c3 1200 	strd	r1, r2, [r3]
  t42.im = theta4;
 8005304:	4b16      	ldr	r3, [pc, #88]	; (8005360 <G_q+0x2f40>)
 8005306:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800530a:	443a      	add	r2, r7
 800530c:	4413      	add	r3, r2
 800530e:	f107 0210 	add.w	r2, r7, #16
 8005312:	e9d2 1200 	ldrd	r1, r2, [r2]
 8005316:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t41.re = -t285.re;
 800531a:	4b09      	ldr	r3, [pc, #36]	; (8005340 <G_q+0x2f20>)
 800531c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005320:	443a      	add	r2, r7
 8005322:	4413      	add	r3, r2
 8005324:	ed93 7b00 	vldr	d7, [r3]
 8005328:	eeb1 7b47 	vneg.f64	d7, d7
 800532c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005330:	ed83 7b00 	vstr	d7, [r3]
  t41.im = -theta4;
 8005334:	f107 0310 	add.w	r3, r7, #16
 8005338:	ed93 7b00 	vldr	d7, [r3]
 800533c:	e012      	b.n	8005364 <G_q+0x2f44>
 800533e:	bf00      	nop
 8005340:	ffffefd0 	.word	0xffffefd0
 8005344:	ffffee70 	.word	0xffffee70
 8005348:	ffffee50 	.word	0xffffee50
 800534c:	ffffee30 	.word	0xffffee30
 8005350:	ffffee10 	.word	0xffffee10
 8005354:	ffffedf0 	.word	0xffffedf0
 8005358:	ffffedd0 	.word	0xffffedd0
 800535c:	ffffedb0 	.word	0xffffedb0
 8005360:	ffffed90 	.word	0xffffed90
 8005364:	eeb1 7b47 	vneg.f64	d7, d7
 8005368:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800536c:	ed83 7b02 	vstr	d7, [r3, #8]
  t22.re = t285.re;
 8005370:	4bbd      	ldr	r3, [pc, #756]	; (8005668 <G_q+0x3248>)
 8005372:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005376:	443a      	add	r2, r7
 8005378:	4413      	add	r3, r2
 800537a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800537e:	4bbb      	ldr	r3, [pc, #748]	; (800566c <G_q+0x324c>)
 8005380:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8005384:	4438      	add	r0, r7
 8005386:	4403      	add	r3, r0
 8005388:	e9c3 1200 	strd	r1, r2, [r3]
  t22.im = theta4;
 800538c:	4bb7      	ldr	r3, [pc, #732]	; (800566c <G_q+0x324c>)
 800538e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005392:	443a      	add	r2, r7
 8005394:	4413      	add	r3, r2
 8005396:	f107 0210 	add.w	r2, r7, #16
 800539a:	e9d2 1200 	ldrd	r1, r2, [r2]
 800539e:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t21.re = -t285.re;
 80053a2:	4bb1      	ldr	r3, [pc, #708]	; (8005668 <G_q+0x3248>)
 80053a4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80053a8:	443a      	add	r2, r7
 80053aa:	4413      	add	r3, r2
 80053ac:	ed93 7b00 	vldr	d7, [r3]
 80053b0:	eeb1 7b47 	vneg.f64	d7, d7
 80053b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053b8:	ed83 7b00 	vstr	d7, [r3]
  t21.im = -theta4;
 80053bc:	f107 0310 	add.w	r3, r7, #16
 80053c0:	ed93 7b00 	vldr	d7, [r3]
 80053c4:	eeb1 7b47 	vneg.f64	d7, d7
 80053c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053cc:	ed83 7b02 	vstr	d7, [r3, #8]
  t20.re = t285.re;
 80053d0:	4ba5      	ldr	r3, [pc, #660]	; (8005668 <G_q+0x3248>)
 80053d2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80053d6:	443a      	add	r2, r7
 80053d8:	4413      	add	r3, r2
 80053da:	e9d3 1200 	ldrd	r1, r2, [r3]
 80053de:	4ba4      	ldr	r3, [pc, #656]	; (8005670 <G_q+0x3250>)
 80053e0:	f241 30d0 	movw	r0, #5072	; 0x13d0
 80053e4:	4438      	add	r0, r7
 80053e6:	4403      	add	r3, r0
 80053e8:	e9c3 1200 	strd	r1, r2, [r3]
  t20.im = theta4;
 80053ec:	4ba0      	ldr	r3, [pc, #640]	; (8005670 <G_q+0x3250>)
 80053ee:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80053f2:	443a      	add	r2, r7
 80053f4:	4413      	add	r3, r2
 80053f6:	f107 0210 	add.w	r2, r7, #16
 80053fa:	e9d2 1200 	ldrd	r1, r2, [r2]
 80053fe:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t19.re = -t285.re;
 8005402:	4b99      	ldr	r3, [pc, #612]	; (8005668 <G_q+0x3248>)
 8005404:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005408:	443a      	add	r2, r7
 800540a:	4413      	add	r3, r2
 800540c:	ed93 7b00 	vldr	d7, [r3]
 8005410:	eeb1 7b47 	vneg.f64	d7, d7
 8005414:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005418:	ed83 7b00 	vstr	d7, [r3]
  t19.im = -theta4;
 800541c:	f107 0310 	add.w	r3, r7, #16
 8005420:	ed93 7b00 	vldr	d7, [r3]
 8005424:	eeb1 7b47 	vneg.f64	d7, d7
 8005428:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800542c:	ed83 7b02 	vstr	d7, [r3, #8]
  b_exp(&t19);
 8005430:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005434:	4618      	mov	r0, r3
 8005436:	f00d f8ff 	bl	8012638 <b_exp>
  t267.re = theta5 * 0.0;
 800543a:	4b8e      	ldr	r3, [pc, #568]	; (8005674 <G_q+0x3254>)
 800543c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005440:	443a      	add	r2, r7
 8005442:	4413      	add	r3, r2
 8005444:	ed93 7b00 	vldr	d7, [r3]
 8005448:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8005660 <G_q+0x3240>
 800544c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005450:	4b89      	ldr	r3, [pc, #548]	; (8005678 <G_q+0x3258>)
 8005452:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005456:	443a      	add	r2, r7
 8005458:	4413      	add	r3, r2
 800545a:	ed83 7b00 	vstr	d7, [r3]
  t267.im = theta5;
 800545e:	4b86      	ldr	r3, [pc, #536]	; (8005678 <G_q+0x3258>)
 8005460:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005464:	443a      	add	r2, r7
 8005466:	4413      	add	r3, r2
 8005468:	4a82      	ldr	r2, [pc, #520]	; (8005674 <G_q+0x3254>)
 800546a:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800546e:	4439      	add	r1, r7
 8005470:	440a      	add	r2, r1
 8005472:	e9d2 1200 	ldrd	r1, r2, [r2]
 8005476:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t266.re = -t267.re;
 800547a:	4b7f      	ldr	r3, [pc, #508]	; (8005678 <G_q+0x3258>)
 800547c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005480:	443a      	add	r2, r7
 8005482:	4413      	add	r3, r2
 8005484:	ed93 7b00 	vldr	d7, [r3]
 8005488:	eeb1 7b47 	vneg.f64	d7, d7
 800548c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005490:	ed83 7b00 	vstr	d7, [r3]
  t266.im = -theta5;
 8005494:	4b77      	ldr	r3, [pc, #476]	; (8005674 <G_q+0x3254>)
 8005496:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800549a:	443a      	add	r2, r7
 800549c:	4413      	add	r3, r2
 800549e:	ed93 7b00 	vldr	d7, [r3]
 80054a2:	eeb1 7b47 	vneg.f64	d7, d7
 80054a6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80054aa:	ed83 7b02 	vstr	d7, [r3, #8]
  t265.re = t267.re;
 80054ae:	4b72      	ldr	r3, [pc, #456]	; (8005678 <G_q+0x3258>)
 80054b0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80054b4:	443a      	add	r2, r7
 80054b6:	4413      	add	r3, r2
 80054b8:	e9d3 1200 	ldrd	r1, r2, [r3]
 80054bc:	4b6f      	ldr	r3, [pc, #444]	; (800567c <G_q+0x325c>)
 80054be:	f241 30d0 	movw	r0, #5072	; 0x13d0
 80054c2:	4438      	add	r0, r7
 80054c4:	4403      	add	r3, r0
 80054c6:	e9c3 1200 	strd	r1, r2, [r3]
  t265.im = theta5;
 80054ca:	4b6c      	ldr	r3, [pc, #432]	; (800567c <G_q+0x325c>)
 80054cc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80054d0:	443a      	add	r2, r7
 80054d2:	4413      	add	r3, r2
 80054d4:	4a67      	ldr	r2, [pc, #412]	; (8005674 <G_q+0x3254>)
 80054d6:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80054da:	4439      	add	r1, r7
 80054dc:	440a      	add	r2, r1
 80054de:	e9d2 1200 	ldrd	r1, r2, [r2]
 80054e2:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t264.re = -t267.re;
 80054e6:	4b64      	ldr	r3, [pc, #400]	; (8005678 <G_q+0x3258>)
 80054e8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80054ec:	443a      	add	r2, r7
 80054ee:	4413      	add	r3, r2
 80054f0:	ed93 7b00 	vldr	d7, [r3]
 80054f4:	eeb1 7b47 	vneg.f64	d7, d7
 80054f8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80054fc:	ed83 7b00 	vstr	d7, [r3]
  t264.im = -theta5;
 8005500:	4b5c      	ldr	r3, [pc, #368]	; (8005674 <G_q+0x3254>)
 8005502:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005506:	443a      	add	r2, r7
 8005508:	4413      	add	r3, r2
 800550a:	ed93 7b00 	vldr	d7, [r3]
 800550e:	eeb1 7b47 	vneg.f64	d7, d7
 8005512:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005516:	ed83 7b02 	vstr	d7, [r3, #8]
  t219.re = t267.re;
 800551a:	4b57      	ldr	r3, [pc, #348]	; (8005678 <G_q+0x3258>)
 800551c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005520:	443a      	add	r2, r7
 8005522:	4413      	add	r3, r2
 8005524:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005528:	4b55      	ldr	r3, [pc, #340]	; (8005680 <G_q+0x3260>)
 800552a:	f241 30d0 	movw	r0, #5072	; 0x13d0
 800552e:	4438      	add	r0, r7
 8005530:	4403      	add	r3, r0
 8005532:	e9c3 1200 	strd	r1, r2, [r3]
  t219.im = theta5;
 8005536:	4b52      	ldr	r3, [pc, #328]	; (8005680 <G_q+0x3260>)
 8005538:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800553c:	443a      	add	r2, r7
 800553e:	4413      	add	r3, r2
 8005540:	4a4c      	ldr	r2, [pc, #304]	; (8005674 <G_q+0x3254>)
 8005542:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8005546:	4439      	add	r1, r7
 8005548:	440a      	add	r2, r1
 800554a:	e9d2 1200 	ldrd	r1, r2, [r2]
 800554e:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t218.re = -t267.re;
 8005552:	4b49      	ldr	r3, [pc, #292]	; (8005678 <G_q+0x3258>)
 8005554:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005558:	443a      	add	r2, r7
 800555a:	4413      	add	r3, r2
 800555c:	ed93 7b00 	vldr	d7, [r3]
 8005560:	eeb1 7b47 	vneg.f64	d7, d7
 8005564:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005568:	ed83 7b00 	vstr	d7, [r3]
  t218.im = -theta5;
 800556c:	4b41      	ldr	r3, [pc, #260]	; (8005674 <G_q+0x3254>)
 800556e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005572:	443a      	add	r2, r7
 8005574:	4413      	add	r3, r2
 8005576:	ed93 7b00 	vldr	d7, [r3]
 800557a:	eeb1 7b47 	vneg.f64	d7, d7
 800557e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005582:	ed83 7b02 	vstr	d7, [r3, #8]
  t195.re = t267.re;
 8005586:	4b3c      	ldr	r3, [pc, #240]	; (8005678 <G_q+0x3258>)
 8005588:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800558c:	443a      	add	r2, r7
 800558e:	4413      	add	r3, r2
 8005590:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005594:	4b3b      	ldr	r3, [pc, #236]	; (8005684 <G_q+0x3264>)
 8005596:	f241 30d0 	movw	r0, #5072	; 0x13d0
 800559a:	4438      	add	r0, r7
 800559c:	4403      	add	r3, r0
 800559e:	e9c3 1200 	strd	r1, r2, [r3]
  t195.im = theta5;
 80055a2:	4b38      	ldr	r3, [pc, #224]	; (8005684 <G_q+0x3264>)
 80055a4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80055a8:	443a      	add	r2, r7
 80055aa:	4413      	add	r3, r2
 80055ac:	4a31      	ldr	r2, [pc, #196]	; (8005674 <G_q+0x3254>)
 80055ae:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80055b2:	4439      	add	r1, r7
 80055b4:	440a      	add	r2, r1
 80055b6:	e9d2 1200 	ldrd	r1, r2, [r2]
 80055ba:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t194.re = -t267.re;
 80055be:	4b2e      	ldr	r3, [pc, #184]	; (8005678 <G_q+0x3258>)
 80055c0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80055c4:	443a      	add	r2, r7
 80055c6:	4413      	add	r3, r2
 80055c8:	ed93 7b00 	vldr	d7, [r3]
 80055cc:	eeb1 7b47 	vneg.f64	d7, d7
 80055d0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80055d4:	ed83 7b00 	vstr	d7, [r3]
  t194.im = -theta5;
 80055d8:	4b26      	ldr	r3, [pc, #152]	; (8005674 <G_q+0x3254>)
 80055da:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80055de:	443a      	add	r2, r7
 80055e0:	4413      	add	r3, r2
 80055e2:	ed93 7b00 	vldr	d7, [r3]
 80055e6:	eeb1 7b47 	vneg.f64	d7, d7
 80055ea:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80055ee:	ed83 7b02 	vstr	d7, [r3, #8]
  t125.re = t267.re;
 80055f2:	4b21      	ldr	r3, [pc, #132]	; (8005678 <G_q+0x3258>)
 80055f4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80055f8:	443a      	add	r2, r7
 80055fa:	4413      	add	r3, r2
 80055fc:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005600:	4b21      	ldr	r3, [pc, #132]	; (8005688 <G_q+0x3268>)
 8005602:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8005606:	4438      	add	r0, r7
 8005608:	4403      	add	r3, r0
 800560a:	e9c3 1200 	strd	r1, r2, [r3]
  t125.im = theta5;
 800560e:	4b1e      	ldr	r3, [pc, #120]	; (8005688 <G_q+0x3268>)
 8005610:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005614:	443a      	add	r2, r7
 8005616:	4413      	add	r3, r2
 8005618:	4a16      	ldr	r2, [pc, #88]	; (8005674 <G_q+0x3254>)
 800561a:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800561e:	4439      	add	r1, r7
 8005620:	440a      	add	r2, r1
 8005622:	e9d2 1200 	ldrd	r1, r2, [r2]
 8005626:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t124.re = -t267.re;
 800562a:	4b13      	ldr	r3, [pc, #76]	; (8005678 <G_q+0x3258>)
 800562c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005630:	443a      	add	r2, r7
 8005632:	4413      	add	r3, r2
 8005634:	ed93 7b00 	vldr	d7, [r3]
 8005638:	eeb1 7b47 	vneg.f64	d7, d7
 800563c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005640:	ed83 7b00 	vstr	d7, [r3]
  t124.im = -theta5;
 8005644:	4b0b      	ldr	r3, [pc, #44]	; (8005674 <G_q+0x3254>)
 8005646:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800564a:	443a      	add	r2, r7
 800564c:	4413      	add	r3, r2
 800564e:	ed93 7b00 	vldr	d7, [r3]
 8005652:	eeb1 7b47 	vneg.f64	d7, d7
 8005656:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800565a:	e017      	b.n	800568c <G_q+0x326c>
 800565c:	f3af 8000 	nop.w
	...
 8005668:	ffffefd0 	.word	0xffffefd0
 800566c:	ffffed70 	.word	0xffffed70
 8005670:	ffffed50 	.word	0xffffed50
 8005674:	ffffec38 	.word	0xffffec38
 8005678:	ffffed30 	.word	0xffffed30
 800567c:	ffffed10 	.word	0xffffed10
 8005680:	ffffecf0 	.word	0xffffecf0
 8005684:	ffffecd0 	.word	0xffffecd0
 8005688:	ffffecb0 	.word	0xffffecb0
 800568c:	ed83 7b02 	vstr	d7, [r3, #8]
  t113.re = t267.re;
 8005690:	4be2      	ldr	r3, [pc, #904]	; (8005a1c <G_q+0x35fc>)
 8005692:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005696:	443a      	add	r2, r7
 8005698:	4413      	add	r3, r2
 800569a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800569e:	4be0      	ldr	r3, [pc, #896]	; (8005a20 <G_q+0x3600>)
 80056a0:	f241 30d0 	movw	r0, #5072	; 0x13d0
 80056a4:	4438      	add	r0, r7
 80056a6:	4403      	add	r3, r0
 80056a8:	e9c3 1200 	strd	r1, r2, [r3]
  t113.im = theta5;
 80056ac:	4bdc      	ldr	r3, [pc, #880]	; (8005a20 <G_q+0x3600>)
 80056ae:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80056b2:	443a      	add	r2, r7
 80056b4:	4413      	add	r3, r2
 80056b6:	4adb      	ldr	r2, [pc, #876]	; (8005a24 <G_q+0x3604>)
 80056b8:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80056bc:	4439      	add	r1, r7
 80056be:	440a      	add	r2, r1
 80056c0:	e9d2 1200 	ldrd	r1, r2, [r2]
 80056c4:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t112.re = -t267.re;
 80056c8:	4bd4      	ldr	r3, [pc, #848]	; (8005a1c <G_q+0x35fc>)
 80056ca:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80056ce:	443a      	add	r2, r7
 80056d0:	4413      	add	r3, r2
 80056d2:	ed93 7b00 	vldr	d7, [r3]
 80056d6:	eeb1 7b47 	vneg.f64	d7, d7
 80056da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80056de:	ed83 7b00 	vstr	d7, [r3]
  t112.im = -theta5;
 80056e2:	4bd0      	ldr	r3, [pc, #832]	; (8005a24 <G_q+0x3604>)
 80056e4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80056e8:	443a      	add	r2, r7
 80056ea:	4413      	add	r3, r2
 80056ec:	ed93 7b00 	vldr	d7, [r3]
 80056f0:	eeb1 7b47 	vneg.f64	d7, d7
 80056f4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80056f8:	ed83 7b02 	vstr	d7, [r3, #8]
  t55.re = t267.re;
 80056fc:	4bc7      	ldr	r3, [pc, #796]	; (8005a1c <G_q+0x35fc>)
 80056fe:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005702:	443a      	add	r2, r7
 8005704:	4413      	add	r3, r2
 8005706:	e9d3 1200 	ldrd	r1, r2, [r3]
 800570a:	4bc7      	ldr	r3, [pc, #796]	; (8005a28 <G_q+0x3608>)
 800570c:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8005710:	4438      	add	r0, r7
 8005712:	4403      	add	r3, r0
 8005714:	e9c3 1200 	strd	r1, r2, [r3]
  t55.im = theta5;
 8005718:	4bc3      	ldr	r3, [pc, #780]	; (8005a28 <G_q+0x3608>)
 800571a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800571e:	443a      	add	r2, r7
 8005720:	4413      	add	r3, r2
 8005722:	4ac0      	ldr	r2, [pc, #768]	; (8005a24 <G_q+0x3604>)
 8005724:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8005728:	4439      	add	r1, r7
 800572a:	440a      	add	r2, r1
 800572c:	e9d2 1200 	ldrd	r1, r2, [r2]
 8005730:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t54.re = -t267.re;
 8005734:	4bb9      	ldr	r3, [pc, #740]	; (8005a1c <G_q+0x35fc>)
 8005736:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800573a:	443a      	add	r2, r7
 800573c:	4413      	add	r3, r2
 800573e:	ed93 7b00 	vldr	d7, [r3]
 8005742:	eeb1 7b47 	vneg.f64	d7, d7
 8005746:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800574a:	ed83 7b00 	vstr	d7, [r3]
  t54.im = -theta5;
 800574e:	4bb5      	ldr	r3, [pc, #724]	; (8005a24 <G_q+0x3604>)
 8005750:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005754:	443a      	add	r2, r7
 8005756:	4413      	add	r3, r2
 8005758:	ed93 7b00 	vldr	d7, [r3]
 800575c:	eeb1 7b47 	vneg.f64	d7, d7
 8005760:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005764:	ed83 7b02 	vstr	d7, [r3, #8]
  b_exp(&t54);
 8005768:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800576c:	4618      	mov	r0, r3
 800576e:	f00c ff63 	bl	8012638 <b_exp>
  b_exp(&t87);
 8005772:	4bae      	ldr	r3, [pc, #696]	; (8005a2c <G_q+0x360c>)
 8005774:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005778:	443a      	add	r2, r7
 800577a:	4413      	add	r3, r2
 800577c:	4618      	mov	r0, r3
 800577e:	f00c ff5b 	bl	8012638 <b_exp>
  b_exp(&t83);
 8005782:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8005786:	4618      	mov	r0, r3
 8005788:	f00c ff56 	bl	8012638 <b_exp>
  b_exp(&t85);
 800578c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8005790:	4618      	mov	r0, r3
 8005792:	f00c ff51 	bl	8012638 <b_exp>
  b_exp(&t55);
 8005796:	4ba4      	ldr	r3, [pc, #656]	; (8005a28 <G_q+0x3608>)
 8005798:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800579c:	443a      	add	r2, r7
 800579e:	4413      	add	r3, r2
 80057a0:	4618      	mov	r0, r3
 80057a2:	f00c ff49 	bl	8012638 <b_exp>
  b_exp(&t33);
 80057a6:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 80057aa:	4618      	mov	r0, r3
 80057ac:	f00c ff44 	bl	8012638 <b_exp>
  b_exp(&t34);
 80057b0:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 80057b4:	4618      	mov	r0, r3
 80057b6:	f00c ff3f 	bl	8012638 <b_exp>
  b_exp(&t35);
 80057ba:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80057be:	4618      	mov	r0, r3
 80057c0:	f00c ff3a 	bl	8012638 <b_exp>
  b_exp(&t36);
 80057c4:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80057c8:	4618      	mov	r0, r3
 80057ca:	f00c ff35 	bl	8012638 <b_exp>
  b_exp(&t37);
 80057ce:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80057d2:	4618      	mov	r0, r3
 80057d4:	f00c ff30 	bl	8012638 <b_exp>
  b_exp(&t38);
 80057d8:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80057dc:	4618      	mov	r0, r3
 80057de:	f00c ff2b 	bl	8012638 <b_exp>
  b_exp(&t39);
 80057e2:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 80057e6:	4618      	mov	r0, r3
 80057e8:	f00c ff26 	bl	8012638 <b_exp>
  b_exp(&t40);
 80057ec:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 80057f0:	4618      	mov	r0, r3
 80057f2:	f00c ff21 	bl	8012638 <b_exp>
  b_exp(&t10);
 80057f6:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80057fa:	4618      	mov	r0, r3
 80057fc:	f00c ff1c 	bl	8012638 <b_exp>
  b_exp(&t11);
 8005800:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8005804:	4618      	mov	r0, r3
 8005806:	f00c ff17 	bl	8012638 <b_exp>
  b_exp(&t12);
 800580a:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 800580e:	4618      	mov	r0, r3
 8005810:	f00c ff12 	bl	8012638 <b_exp>
  b_exp(&t13);
 8005814:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8005818:	4618      	mov	r0, r3
 800581a:	f00c ff0d 	bl	8012638 <b_exp>
  b_exp(&t14);
 800581e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8005822:	4618      	mov	r0, r3
 8005824:	f00c ff08 	bl	8012638 <b_exp>
  b_exp(&t15);
 8005828:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 800582c:	4618      	mov	r0, r3
 800582e:	f00c ff03 	bl	8012638 <b_exp>
  b_exp(&t16);
 8005832:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8005836:	4618      	mov	r0, r3
 8005838:	f00c fefe 	bl	8012638 <b_exp>
  b_exp(&t17);
 800583c:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8005840:	4618      	mov	r0, r3
 8005842:	f00c fef9 	bl	8012638 <b_exp>
  b_exp(&t20);
 8005846:	4b7a      	ldr	r3, [pc, #488]	; (8005a30 <G_q+0x3610>)
 8005848:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800584c:	443a      	add	r2, r7
 800584e:	4413      	add	r3, r2
 8005850:	4618      	mov	r0, r3
 8005852:	f00c fef1 	bl	8012638 <b_exp>
  b_exp(&t21);
 8005856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800585a:	4618      	mov	r0, r3
 800585c:	f00c feec 	bl	8012638 <b_exp>
  b_exp(&t22);
 8005860:	4b74      	ldr	r3, [pc, #464]	; (8005a34 <G_q+0x3614>)
 8005862:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005866:	443a      	add	r2, r7
 8005868:	4413      	add	r3, r2
 800586a:	4618      	mov	r0, r3
 800586c:	f00c fee4 	bl	8012638 <b_exp>
  b_exp(&t23);
 8005870:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8005874:	4618      	mov	r0, r3
 8005876:	f00c fedf 	bl	8012638 <b_exp>
  b_exp(&t24);
 800587a:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 800587e:	4618      	mov	r0, r3
 8005880:	f00c feda 	bl	8012638 <b_exp>
  b_exp(&t27);
 8005884:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8005888:	4618      	mov	r0, r3
 800588a:	f00c fed5 	bl	8012638 <b_exp>
  b_exp(&t28);
 800588e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8005892:	4618      	mov	r0, r3
 8005894:	f00c fed0 	bl	8012638 <b_exp>
  b_exp(&t25);
 8005898:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 800589c:	4618      	mov	r0, r3
 800589e:	f00c fecb 	bl	8012638 <b_exp>
  b_exp(&t26);
 80058a2:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80058a6:	4618      	mov	r0, r3
 80058a8:	f00c fec6 	bl	8012638 <b_exp>
  b_exp(&t31);
 80058ac:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80058b0:	4618      	mov	r0, r3
 80058b2:	f00c fec1 	bl	8012638 <b_exp>
  b_exp(&t32);
 80058b6:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80058ba:	4618      	mov	r0, r3
 80058bc:	f00c febc 	bl	8012638 <b_exp>
  b_exp(&t29);
 80058c0:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 80058c4:	4618      	mov	r0, r3
 80058c6:	f00c feb7 	bl	8012638 <b_exp>
  b_exp(&t30);
 80058ca:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 80058ce:	4618      	mov	r0, r3
 80058d0:	f00c feb2 	bl	8012638 <b_exp>
  b_exp(&t9);
 80058d4:	4b58      	ldr	r3, [pc, #352]	; (8005a38 <G_q+0x3618>)
 80058d6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80058da:	443a      	add	r2, r7
 80058dc:	4413      	add	r3, r2
 80058de:	4618      	mov	r0, r3
 80058e0:	f00c feaa 	bl	8012638 <b_exp>
  b_exp(&t5);
 80058e4:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 80058e8:	4618      	mov	r0, r3
 80058ea:	f00c fea5 	bl	8012638 <b_exp>
  b_exp(&t6);
 80058ee:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80058f2:	4618      	mov	r0, r3
 80058f4:	f00c fea0 	bl	8012638 <b_exp>
  b_exp(&t4);
 80058f8:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80058fc:	4618      	mov	r0, r3
 80058fe:	f00c fe9b 	bl	8012638 <b_exp>
  b_exp(&t41);
 8005902:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005906:	4618      	mov	r0, r3
 8005908:	f00c fe96 	bl	8012638 <b_exp>
  b_exp(&t42);
 800590c:	4b4b      	ldr	r3, [pc, #300]	; (8005a3c <G_q+0x361c>)
 800590e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005912:	443a      	add	r2, r7
 8005914:	4413      	add	r3, r2
 8005916:	4618      	mov	r0, r3
 8005918:	f00c fe8e 	bl	8012638 <b_exp>
  b_exp(&t43);
 800591c:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8005920:	4618      	mov	r0, r3
 8005922:	f00c fe89 	bl	8012638 <b_exp>
  b_exp(&t44);
 8005926:	f507 6338 	add.w	r3, r7, #2944	; 0xb80
 800592a:	4618      	mov	r0, r3
 800592c:	f00c fe84 	bl	8012638 <b_exp>
  b_exp(&t47);
 8005930:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8005934:	4618      	mov	r0, r3
 8005936:	f00c fe7f 	bl	8012638 <b_exp>
  b_exp(&t48);
 800593a:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800593e:	4618      	mov	r0, r3
 8005940:	f00c fe7a 	bl	8012638 <b_exp>
  b_exp(&t45);
 8005944:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8005948:	4618      	mov	r0, r3
 800594a:	f00c fe75 	bl	8012638 <b_exp>
  b_exp(&t46);
 800594e:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 8005952:	4618      	mov	r0, r3
 8005954:	f00c fe70 	bl	8012638 <b_exp>
  b_exp(&t51);
 8005958:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800595c:	4618      	mov	r0, r3
 800595e:	f00c fe6b 	bl	8012638 <b_exp>
  b_exp(&t52);
 8005962:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8005966:	4618      	mov	r0, r3
 8005968:	f00c fe66 	bl	8012638 <b_exp>
  b_exp(&t49);
 800596c:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 8005970:	4618      	mov	r0, r3
 8005972:	f00c fe61 	bl	8012638 <b_exp>
  b_exp(&t50);
 8005976:	f507 633c 	add.w	r3, r7, #3008	; 0xbc0
 800597a:	4618      	mov	r0, r3
 800597c:	f00c fe5c 	bl	8012638 <b_exp>
  b_exp(&t56);
 8005980:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8005984:	4618      	mov	r0, r3
 8005986:	f00c fe57 	bl	8012638 <b_exp>
  b_exp(&t57);
 800598a:	f507 633e 	add.w	r3, r7, #3040	; 0xbe0
 800598e:	4618      	mov	r0, r3
 8005990:	f00c fe52 	bl	8012638 <b_exp>
  b_exp(&t70);
 8005994:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 8005998:	4618      	mov	r0, r3
 800599a:	f00c fe4d 	bl	8012638 <b_exp>
  b_exp(&t71);
 800599e:	f507 6346 	add.w	r3, r7, #3168	; 0xc60
 80059a2:	4618      	mov	r0, r3
 80059a4:	f00c fe48 	bl	8012638 <b_exp>
  b_exp(&t72);
 80059a8:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80059ac:	4618      	mov	r0, r3
 80059ae:	f00c fe43 	bl	8012638 <b_exp>
  b_exp(&t73);
 80059b2:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80059b6:	4618      	mov	r0, r3
 80059b8:	f00c fe3e 	bl	8012638 <b_exp>
  b_exp(&t74);
 80059bc:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 80059c0:	4618      	mov	r0, r3
 80059c2:	f00c fe39 	bl	8012638 <b_exp>
  b_exp(&t75);
 80059c6:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 80059ca:	4618      	mov	r0, r3
 80059cc:	f00c fe34 	bl	8012638 <b_exp>
  b_exp(&t76);
 80059d0:	f507 6347 	add.w	r3, r7, #3184	; 0xc70
 80059d4:	4618      	mov	r0, r3
 80059d6:	f00c fe2f 	bl	8012638 <b_exp>
  b_exp(&t77);
 80059da:	f507 6348 	add.w	r3, r7, #3200	; 0xc80
 80059de:	4618      	mov	r0, r3
 80059e0:	f00c fe2a 	bl	8012638 <b_exp>
  b_exp(&t58);
 80059e4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80059e8:	4618      	mov	r0, r3
 80059ea:	f00c fe25 	bl	8012638 <b_exp>
  b_exp(&t59);
 80059ee:	4b14      	ldr	r3, [pc, #80]	; (8005a40 <G_q+0x3620>)
 80059f0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80059f4:	443a      	add	r2, r7
 80059f6:	4413      	add	r3, r2
 80059f8:	4618      	mov	r0, r3
 80059fa:	f00c fe1d 	bl	8012638 <b_exp>
  b_exp(&t60);
 80059fe:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 8005a02:	4618      	mov	r0, r3
 8005a04:	f00c fe18 	bl	8012638 <b_exp>
  b_exp(&t61);
 8005a08:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f00c fe13 	bl	8012638 <b_exp>
  b_exp(&t64);
 8005a12:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8005a16:	4618      	mov	r0, r3
 8005a18:	e014      	b.n	8005a44 <G_q+0x3624>
 8005a1a:	bf00      	nop
 8005a1c:	ffffed30 	.word	0xffffed30
 8005a20:	ffffec90 	.word	0xffffec90
 8005a24:	ffffec38 	.word	0xffffec38
 8005a28:	ffffec70 	.word	0xffffec70
 8005a2c:	ffffedd0 	.word	0xffffedd0
 8005a30:	ffffed50 	.word	0xffffed50
 8005a34:	ffffed70 	.word	0xffffed70
 8005a38:	ffffeff0 	.word	0xffffeff0
 8005a3c:	ffffed90 	.word	0xffffed90
 8005a40:	ffffedb0 	.word	0xffffedb0
 8005a44:	f00c fdf8 	bl	8012638 <b_exp>
  b_exp(&t65);
 8005a48:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f00c fdf3 	bl	8012638 <b_exp>
  b_exp(&t62);
 8005a52:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8005a56:	4618      	mov	r0, r3
 8005a58:	f00c fdee 	bl	8012638 <b_exp>
  b_exp(&t63);
 8005a5c:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8005a60:	4618      	mov	r0, r3
 8005a62:	f00c fde9 	bl	8012638 <b_exp>
  b_exp(&t68);
 8005a66:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f00c fde4 	bl	8012638 <b_exp>
  b_exp(&t69);
 8005a70:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8005a74:	4618      	mov	r0, r3
 8005a76:	f00c fddf 	bl	8012638 <b_exp>
  b_exp(&t66);
 8005a7a:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f00c fdda 	bl	8012638 <b_exp>
  b_exp(&t67);
 8005a84:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f00c fdd5 	bl	8012638 <b_exp>
  b_exp(&t78);
 8005a8e:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8005a92:	4618      	mov	r0, r3
 8005a94:	f00c fdd0 	bl	8012638 <b_exp>
  b_exp(&t79);
 8005a98:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f00c fdcb 	bl	8012638 <b_exp>
  b_exp(&t80);
 8005aa2:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f00c fdc6 	bl	8012638 <b_exp>
  b_exp(&t81);
 8005aac:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f00c fdc1 	bl	8012638 <b_exp>
  b_exp(&t82);
 8005ab6:	f507 634b 	add.w	r3, r7, #3248	; 0xcb0
 8005aba:	4618      	mov	r0, r3
 8005abc:	f00c fdbc 	bl	8012638 <b_exp>
  b_exp(&t84);
 8005ac0:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f00c fdb7 	bl	8012638 <b_exp>
  b_exp(&t86);
 8005aca:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f00c fdb2 	bl	8012638 <b_exp>
  b_exp(&t154);
 8005ad4:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f00c fdad 	bl	8012638 <b_exp>
  b_exp(&t155);
 8005ade:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f00c fda8 	bl	8012638 <b_exp>
  b_exp(&t156);
 8005ae8:	f507 6365 	add.w	r3, r7, #3664	; 0xe50
 8005aec:	4618      	mov	r0, r3
 8005aee:	f00c fda3 	bl	8012638 <b_exp>
  b_exp(&t157);
 8005af2:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8005af6:	4618      	mov	r0, r3
 8005af8:	f00c fd9e 	bl	8012638 <b_exp>
  b_exp(&t112);
 8005afc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005b00:	4618      	mov	r0, r3
 8005b02:	f00c fd99 	bl	8012638 <b_exp>
  b_exp(&t113);
 8005b06:	4bf3      	ldr	r3, [pc, #972]	; (8005ed4 <G_q+0x3ab4>)
 8005b08:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005b0c:	443a      	add	r2, r7
 8005b0e:	4413      	add	r3, r2
 8005b10:	4618      	mov	r0, r3
 8005b12:	f00c fd91 	bl	8012638 <b_exp>
  b_exp(&t98);
 8005b16:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f00c fd8c 	bl	8012638 <b_exp>
  b_exp(&t99);
 8005b20:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8005b24:	4618      	mov	r0, r3
 8005b26:	f00c fd87 	bl	8012638 <b_exp>
  b_exp(&t96);
 8005b2a:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f00c fd82 	bl	8012638 <b_exp>
  b_exp(&t97);
 8005b34:	f507 6350 	add.w	r3, r7, #3328	; 0xd00
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f00c fd7d 	bl	8012638 <b_exp>
  b_exp(&t92);
 8005b3e:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8005b42:	4618      	mov	r0, r3
 8005b44:	f00c fd78 	bl	8012638 <b_exp>
  b_exp(&t93);
 8005b48:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f00c fd73 	bl	8012638 <b_exp>
  b_exp(&t94);
 8005b52:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8005b56:	4618      	mov	r0, r3
 8005b58:	f00c fd6e 	bl	8012638 <b_exp>
  b_exp(&t95);
 8005b5c:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 8005b60:	4618      	mov	r0, r3
 8005b62:	f00c fd69 	bl	8012638 <b_exp>
  b_exp(&t100);
 8005b66:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f00c fd64 	bl	8012638 <b_exp>
  b_exp(&t101);
 8005b70:	4bd9      	ldr	r3, [pc, #868]	; (8005ed8 <G_q+0x3ab8>)
 8005b72:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005b76:	443a      	add	r2, r7
 8005b78:	4413      	add	r3, r2
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f00c fd5c 	bl	8012638 <b_exp>
  b_exp(&t104);
 8005b80:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8005b84:	4618      	mov	r0, r3
 8005b86:	f00c fd57 	bl	8012638 <b_exp>
  b_exp(&t105);
 8005b8a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f00c fd52 	bl	8012638 <b_exp>
  b_exp(&t106);
 8005b94:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f00c fd4d 	bl	8012638 <b_exp>
  b_exp(&t107);
 8005b9e:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f00c fd48 	bl	8012638 <b_exp>
  b_exp(&t108);
 8005ba8:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8005bac:	4618      	mov	r0, r3
 8005bae:	f00c fd43 	bl	8012638 <b_exp>
  b_exp(&t109);
 8005bb2:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f00c fd3e 	bl	8012638 <b_exp>
  b_exp(&t110);
 8005bbc:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f00c fd39 	bl	8012638 <b_exp>
  b_exp(&t111);
 8005bc6:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f00c fd34 	bl	8012638 <b_exp>
  b_exp(&t102);
 8005bd0:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f00c fd2f 	bl	8012638 <b_exp>
  b_exp(&t103);
 8005bda:	4bc0      	ldr	r3, [pc, #768]	; (8005edc <G_q+0x3abc>)
 8005bdc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005be0:	443a      	add	r2, r7
 8005be2:	4413      	add	r3, r2
 8005be4:	4618      	mov	r0, r3
 8005be6:	f00c fd27 	bl	8012638 <b_exp>
  b_exp(&t124);
 8005bea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f00c fd22 	bl	8012638 <b_exp>
  b_exp(&t125);
 8005bf4:	4bba      	ldr	r3, [pc, #744]	; (8005ee0 <G_q+0x3ac0>)
 8005bf6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005bfa:	443a      	add	r2, r7
 8005bfc:	4413      	add	r3, r2
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f00c fd1a 	bl	8012638 <b_exp>
  b_exp(&t136);
 8005c04:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f00c fd15 	bl	8012638 <b_exp>
  b_exp(&t137);
 8005c0e:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8005c12:	4618      	mov	r0, r3
 8005c14:	f00c fd10 	bl	8012638 <b_exp>
  b_exp(&t138);
 8005c18:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f00c fd0b 	bl	8012638 <b_exp>
  b_exp(&t139);
 8005c22:	f507 635e 	add.w	r3, r7, #3552	; 0xde0
 8005c26:	4618      	mov	r0, r3
 8005c28:	f00c fd06 	bl	8012638 <b_exp>
  b_exp(&t152);
 8005c2c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8005c30:	4618      	mov	r0, r3
 8005c32:	f00c fd01 	bl	8012638 <b_exp>
  b_exp(&t153);
 8005c36:	4bab      	ldr	r3, [pc, #684]	; (8005ee4 <G_q+0x3ac4>)
 8005c38:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005c3c:	443a      	add	r2, r7
 8005c3e:	4413      	add	r3, r2
 8005c40:	4618      	mov	r0, r3
 8005c42:	f00c fcf9 	bl	8012638 <b_exp>
  b_exp(&t150);
 8005c46:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f00c fcf4 	bl	8012638 <b_exp>
  b_exp(&t151);
 8005c50:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 8005c54:	4618      	mov	r0, r3
 8005c56:	f00c fcef 	bl	8012638 <b_exp>
  b_exp(&t148);
 8005c5a:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f00c fcea 	bl	8012638 <b_exp>
  b_exp(&t149);
 8005c64:	f507 6364 	add.w	r3, r7, #3648	; 0xe40
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f00c fce5 	bl	8012638 <b_exp>
  b_exp(&t144);
 8005c6e:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 8005c72:	4618      	mov	r0, r3
 8005c74:	f00c fce0 	bl	8012638 <b_exp>
  b_exp(&t145);
 8005c78:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f00c fcdb 	bl	8012638 <b_exp>
  b_exp(&t146);
 8005c82:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8005c86:	4618      	mov	r0, r3
 8005c88:	f00c fcd6 	bl	8012638 <b_exp>
  b_exp(&t147);
 8005c8c:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 8005c90:	4618      	mov	r0, r3
 8005c92:	f00c fcd1 	bl	8012638 <b_exp>
  b_exp(&t134);
 8005c96:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f00c fccc 	bl	8012638 <b_exp>
  b_exp(&t135);
 8005ca0:	4b91      	ldr	r3, [pc, #580]	; (8005ee8 <G_q+0x3ac8>)
 8005ca2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005ca6:	443a      	add	r2, r7
 8005ca8:	4413      	add	r3, r2
 8005caa:	4618      	mov	r0, r3
 8005cac:	f00c fcc4 	bl	8012638 <b_exp>
  b_exp(&t126);
 8005cb0:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f00c fcbf 	bl	8012638 <b_exp>
  b_exp(&t127);
 8005cba:	f507 635a 	add.w	r3, r7, #3488	; 0xda0
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f00c fcba 	bl	8012638 <b_exp>
  b_exp(&t128);
 8005cc4:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f00c fcb5 	bl	8012638 <b_exp>
  b_exp(&t129);
 8005cce:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f00c fcb0 	bl	8012638 <b_exp>
  b_exp(&t130);
 8005cd8:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f00c fcab 	bl	8012638 <b_exp>
  b_exp(&t131);
 8005ce2:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f00c fca6 	bl	8012638 <b_exp>
  b_exp(&t132);
 8005cec:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f00c fca1 	bl	8012638 <b_exp>
  b_exp(&t133);
 8005cf6:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f00c fc9c 	bl	8012638 <b_exp>
  b_exp(&t140);
 8005d00:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8005d04:	4618      	mov	r0, r3
 8005d06:	f00c fc97 	bl	8012638 <b_exp>
  b_exp(&t141);
 8005d0a:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f00c fc92 	bl	8012638 <b_exp>
  b_exp(&t142);
 8005d14:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f00c fc8d 	bl	8012638 <b_exp>
  b_exp(&t143);
 8005d1e:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8005d22:	4618      	mov	r0, r3
 8005d24:	f00c fc88 	bl	8012638 <b_exp>
  b_exp(&t168);
 8005d28:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f00c fc83 	bl	8012638 <b_exp>
  b_exp(&t169);
 8005d32:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8005d36:	4618      	mov	r0, r3
 8005d38:	f00c fc7e 	bl	8012638 <b_exp>
  b_exp(&t170);
 8005d3c:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 8005d40:	4618      	mov	r0, r3
 8005d42:	f00c fc79 	bl	8012638 <b_exp>
  b_exp(&t171);
 8005d46:	f507 636c 	add.w	r3, r7, #3776	; 0xec0
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f00c fc74 	bl	8012638 <b_exp>
  b_exp(&t120);
 8005d50:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8005d54:	4618      	mov	r0, r3
 8005d56:	f00c fc6f 	bl	8012638 <b_exp>
  b_exp(&t121);
 8005d5a:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f00c fc6a 	bl	8012638 <b_exp>
  b_exp(&t118);
 8005d64:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f00c fc65 	bl	8012638 <b_exp>
  b_exp(&t119);
 8005d6e:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 8005d72:	4618      	mov	r0, r3
 8005d74:	f00c fc60 	bl	8012638 <b_exp>
  b_exp(&t114);
 8005d78:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f00c fc5b 	bl	8012638 <b_exp>
  b_exp(&t115);
 8005d82:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8005d86:	4618      	mov	r0, r3
 8005d88:	f00c fc56 	bl	8012638 <b_exp>
  b_exp(&t116);
 8005d8c:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8005d90:	4618      	mov	r0, r3
 8005d92:	f00c fc51 	bl	8012638 <b_exp>
  b_exp(&t117);
 8005d96:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f00c fc4c 	bl	8012638 <b_exp>
  b_exp(&t122);
 8005da0:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8005da4:	4618      	mov	r0, r3
 8005da6:	f00c fc47 	bl	8012638 <b_exp>
  b_exp(&t123);
 8005daa:	4b50      	ldr	r3, [pc, #320]	; (8005eec <G_q+0x3acc>)
 8005dac:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005db0:	443a      	add	r2, r7
 8005db2:	4413      	add	r3, r2
 8005db4:	4618      	mov	r0, r3
 8005db6:	f00c fc3f 	bl	8012638 <b_exp>
  b_exp(&t160);
 8005dba:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f00c fc3a 	bl	8012638 <b_exp>
  b_exp(&t161);
 8005dc4:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f00c fc35 	bl	8012638 <b_exp>
  b_exp(&t162);
 8005dce:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f00c fc30 	bl	8012638 <b_exp>
  b_exp(&t163);
 8005dd8:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f00c fc2b 	bl	8012638 <b_exp>
  b_exp(&t164);
 8005de2:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8005de6:	4618      	mov	r0, r3
 8005de8:	f00c fc26 	bl	8012638 <b_exp>
  b_exp(&t165);
 8005dec:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 8005df0:	4618      	mov	r0, r3
 8005df2:	f00c fc21 	bl	8012638 <b_exp>
  b_exp(&t166);
 8005df6:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f00c fc1c 	bl	8012638 <b_exp>
  b_exp(&t167);
 8005e00:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8005e04:	4618      	mov	r0, r3
 8005e06:	f00c fc17 	bl	8012638 <b_exp>
  b_exp(&t158);
 8005e0a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f00c fc12 	bl	8012638 <b_exp>
  b_exp(&t159);
 8005e14:	4b36      	ldr	r3, [pc, #216]	; (8005ef0 <G_q+0x3ad0>)
 8005e16:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005e1a:	443a      	add	r2, r7
 8005e1c:	4413      	add	r3, r2
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f00c fc0a 	bl	8012638 <b_exp>
  b_exp(&t194);
 8005e24:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f00c fc05 	bl	8012638 <b_exp>
  b_exp(&t195);
 8005e2e:	4b31      	ldr	r3, [pc, #196]	; (8005ef4 <G_q+0x3ad4>)
 8005e30:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005e34:	443a      	add	r2, r7
 8005e36:	4413      	add	r3, r2
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f00c fbfd 	bl	8012638 <b_exp>
  b_exp(&t172);
 8005e3e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8005e42:	4618      	mov	r0, r3
 8005e44:	f00c fbf8 	bl	8012638 <b_exp>
  b_exp(&t173);
 8005e48:	4b2b      	ldr	r3, [pc, #172]	; (8005ef8 <G_q+0x3ad8>)
 8005e4a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005e4e:	443a      	add	r2, r7
 8005e50:	4413      	add	r3, r2
 8005e52:	4618      	mov	r0, r3
 8005e54:	f00c fbf0 	bl	8012638 <b_exp>
  b_exp(&t174);
 8005e58:	f507 636d 	add.w	r3, r7, #3792	; 0xed0
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f00c fbeb 	bl	8012638 <b_exp>
  b_exp(&t175);
 8005e62:	f507 636e 	add.w	r3, r7, #3808	; 0xee0
 8005e66:	4618      	mov	r0, r3
 8005e68:	f00c fbe6 	bl	8012638 <b_exp>
  b_exp(&t182);
 8005e6c:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 8005e70:	4618      	mov	r0, r3
 8005e72:	f00c fbe1 	bl	8012638 <b_exp>
  b_exp(&t183);
 8005e76:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f00c fbdc 	bl	8012638 <b_exp>
  b_exp(&t180);
 8005e80:	f507 6371 	add.w	r3, r7, #3856	; 0xf10
 8005e84:	4618      	mov	r0, r3
 8005e86:	f00c fbd7 	bl	8012638 <b_exp>
  b_exp(&t181);
 8005e8a:	f507 6372 	add.w	r3, r7, #3872	; 0xf20
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f00c fbd2 	bl	8012638 <b_exp>
  b_exp(&t176);
 8005e94:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f00c fbcd 	bl	8012638 <b_exp>
  b_exp(&t177);
 8005e9e:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f00c fbc8 	bl	8012638 <b_exp>
  b_exp(&t178);
 8005ea8:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8005eac:	4618      	mov	r0, r3
 8005eae:	f00c fbc3 	bl	8012638 <b_exp>
  b_exp(&t179);
 8005eb2:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f00c fbbe 	bl	8012638 <b_exp>
  b_exp(&t186);
 8005ebc:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f00c fbb9 	bl	8012638 <b_exp>
  b_exp(&t187);
 8005ec6:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f00c fbb4 	bl	8012638 <b_exp>
 8005ed0:	e014      	b.n	8005efc <G_q+0x3adc>
 8005ed2:	bf00      	nop
 8005ed4:	ffffec90 	.word	0xffffec90
 8005ed8:	ffffedf0 	.word	0xffffedf0
 8005edc:	ffffee10 	.word	0xffffee10
 8005ee0:	ffffecb0 	.word	0xffffecb0
 8005ee4:	ffffee70 	.word	0xffffee70
 8005ee8:	ffffee50 	.word	0xffffee50
 8005eec:	ffffee30 	.word	0xffffee30
 8005ef0:	ffffee90 	.word	0xffffee90
 8005ef4:	ffffecd0 	.word	0xffffecd0
 8005ef8:	ffffeeb0 	.word	0xffffeeb0
  b_exp(&t188);
 8005efc:	f507 6373 	add.w	r3, r7, #3888	; 0xf30
 8005f00:	4618      	mov	r0, r3
 8005f02:	f00c fb99 	bl	8012638 <b_exp>
  b_exp(&t189);
 8005f06:	f507 6374 	add.w	r3, r7, #3904	; 0xf40
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f00c fb94 	bl	8012638 <b_exp>
  b_exp(&t190);
 8005f10:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8005f14:	4618      	mov	r0, r3
 8005f16:	f00c fb8f 	bl	8012638 <b_exp>
  b_exp(&t191);
 8005f1a:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f00c fb8a 	bl	8012638 <b_exp>
  b_exp(&t192);
 8005f24:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f00c fb85 	bl	8012638 <b_exp>
  b_exp(&t193);
 8005f2e:	f507 6376 	add.w	r3, r7, #3936	; 0xf60
 8005f32:	4618      	mov	r0, r3
 8005f34:	f00c fb80 	bl	8012638 <b_exp>
  b_exp(&t184);
 8005f38:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f00c fb7b 	bl	8012638 <b_exp>
  b_exp(&t185);
 8005f42:	4bec      	ldr	r3, [pc, #944]	; (80062f4 <G_q+0x3ed4>)
 8005f44:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005f48:	443a      	add	r2, r7
 8005f4a:	4413      	add	r3, r2
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f00c fb73 	bl	8012638 <b_exp>
  b_exp(&t196);
 8005f52:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8005f56:	4618      	mov	r0, r3
 8005f58:	f00c fb6e 	bl	8012638 <b_exp>
  b_exp(&t197);
 8005f5c:	4be6      	ldr	r3, [pc, #920]	; (80062f8 <G_q+0x3ed8>)
 8005f5e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005f62:	443a      	add	r2, r7
 8005f64:	4413      	add	r3, r2
 8005f66:	4618      	mov	r0, r3
 8005f68:	f00c fb66 	bl	8012638 <b_exp>
  b_exp(&t198);
 8005f6c:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8005f70:	4618      	mov	r0, r3
 8005f72:	f00c fb61 	bl	8012638 <b_exp>
  b_exp(&t199);
 8005f76:	f507 6378 	add.w	r3, r7, #3968	; 0xf80
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f00c fb5c 	bl	8012638 <b_exp>
  b_exp(&t206);
 8005f80:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8005f84:	4618      	mov	r0, r3
 8005f86:	f00c fb57 	bl	8012638 <b_exp>
  b_exp(&t207);
 8005f8a:	f507 6304 	add.w	r3, r7, #2112	; 0x840
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f00c fb52 	bl	8012638 <b_exp>
  b_exp(&t204);
 8005f94:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f00c fb4d 	bl	8012638 <b_exp>
  b_exp(&t205);
 8005f9e:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f00c fb48 	bl	8012638 <b_exp>
  b_exp(&t200);
 8005fa8:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8005fac:	4618      	mov	r0, r3
 8005fae:	f00c fb43 	bl	8012638 <b_exp>
  b_exp(&t201);
 8005fb2:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f00c fb3e 	bl	8012638 <b_exp>
  b_exp(&t202);
 8005fbc:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f00c fb39 	bl	8012638 <b_exp>
  b_exp(&t203);
 8005fc6:	f507 637a 	add.w	r3, r7, #4000	; 0xfa0
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f00c fb34 	bl	8012638 <b_exp>
  b_exp(&t210);
 8005fd0:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f00c fb2f 	bl	8012638 <b_exp>
  b_exp(&t211);
 8005fda:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f00c fb2a 	bl	8012638 <b_exp>
  b_exp(&t212);
 8005fe4:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f00c fb25 	bl	8012638 <b_exp>
  b_exp(&t213);
 8005fee:	f507 637e 	add.w	r3, r7, #4064	; 0xfe0
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f00c fb20 	bl	8012638 <b_exp>
  b_exp(&t214);
 8005ff8:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f00c fb1b 	bl	8012638 <b_exp>
  b_exp(&t215);
 8006002:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8006006:	4618      	mov	r0, r3
 8006008:	f00c fb16 	bl	8012638 <b_exp>
  b_exp(&t216);
 800600c:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8006010:	4618      	mov	r0, r3
 8006012:	f00c fb11 	bl	8012638 <b_exp>
  b_exp(&t217);
 8006016:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800601a:	4618      	mov	r0, r3
 800601c:	f00c fb0c 	bl	8012638 <b_exp>
  b_exp(&t208);
 8006020:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8006024:	4618      	mov	r0, r3
 8006026:	f00c fb07 	bl	8012638 <b_exp>
  b_exp(&t209);
 800602a:	4bb4      	ldr	r3, [pc, #720]	; (80062fc <G_q+0x3edc>)
 800602c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006030:	443a      	add	r2, r7
 8006032:	4413      	add	r3, r2
 8006034:	4618      	mov	r0, r3
 8006036:	f00c faff 	bl	8012638 <b_exp>
  b_exp(&t230);
 800603a:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800603e:	4618      	mov	r0, r3
 8006040:	f00c fafa 	bl	8012638 <b_exp>
  b_exp(&t231);
 8006044:	4bae      	ldr	r3, [pc, #696]	; (8006300 <G_q+0x3ee0>)
 8006046:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800604a:	443a      	add	r2, r7
 800604c:	4413      	add	r3, r2
 800604e:	4618      	mov	r0, r3
 8006050:	f00c faf2 	bl	8012638 <b_exp>
  b_exp(&t232);
 8006054:	f241 0350 	movw	r3, #4176	; 0x1050
 8006058:	443b      	add	r3, r7
 800605a:	4618      	mov	r0, r3
 800605c:	f00c faec 	bl	8012638 <b_exp>
  b_exp(&t233);
 8006060:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8006064:	4618      	mov	r0, r3
 8006066:	f00c fae7 	bl	8012638 <b_exp>
  b_exp(&t240);
 800606a:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800606e:	4618      	mov	r0, r3
 8006070:	f00c fae2 	bl	8012638 <b_exp>
  b_exp(&t241);
 8006074:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 8006078:	4618      	mov	r0, r3
 800607a:	f00c fadd 	bl	8012638 <b_exp>
  b_exp(&t238);
 800607e:	f241 0390 	movw	r3, #4240	; 0x1090
 8006082:	443b      	add	r3, r7
 8006084:	4618      	mov	r0, r3
 8006086:	f00c fad7 	bl	8012638 <b_exp>
  b_exp(&t239);
 800608a:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800608e:	4618      	mov	r0, r3
 8006090:	f00c fad2 	bl	8012638 <b_exp>
  b_exp(&t234);
 8006094:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8006098:	4618      	mov	r0, r3
 800609a:	f00c facd 	bl	8012638 <b_exp>
  b_exp(&t235);
 800609e:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 80060a2:	4618      	mov	r0, r3
 80060a4:	f00c fac8 	bl	8012638 <b_exp>
  b_exp(&t236);
 80060a8:	f241 0370 	movw	r3, #4208	; 0x1070
 80060ac:	443b      	add	r3, r7
 80060ae:	4618      	mov	r0, r3
 80060b0:	f00c fac2 	bl	8012638 <b_exp>
  b_exp(&t237);
 80060b4:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80060b8:	4618      	mov	r0, r3
 80060ba:	f00c fabd 	bl	8012638 <b_exp>
  b_exp(&t228);
 80060be:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80060c2:	4618      	mov	r0, r3
 80060c4:	f00c fab8 	bl	8012638 <b_exp>
  b_exp(&t229);
 80060c8:	4b8e      	ldr	r3, [pc, #568]	; (8006304 <G_q+0x3ee4>)
 80060ca:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80060ce:	443a      	add	r2, r7
 80060d0:	4413      	add	r3, r2
 80060d2:	4618      	mov	r0, r3
 80060d4:	f00c fab0 	bl	8012638 <b_exp>
  b_exp(&t220);
 80060d8:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 80060dc:	4618      	mov	r0, r3
 80060de:	f00c faab 	bl	8012638 <b_exp>
  b_exp(&t221);
 80060e2:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 80060e6:	4618      	mov	r0, r3
 80060e8:	f00c faa6 	bl	8012638 <b_exp>
  b_exp(&t222);
 80060ec:	f241 0310 	movw	r3, #4112	; 0x1010
 80060f0:	443b      	add	r3, r7
 80060f2:	4618      	mov	r0, r3
 80060f4:	f00c faa0 	bl	8012638 <b_exp>
  b_exp(&t223);
 80060f8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80060fc:	4618      	mov	r0, r3
 80060fe:	f00c fa9b 	bl	8012638 <b_exp>
  b_exp(&t224);
 8006102:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8006106:	4618      	mov	r0, r3
 8006108:	f00c fa96 	bl	8012638 <b_exp>
  b_exp(&t225);
 800610c:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 8006110:	4618      	mov	r0, r3
 8006112:	f00c fa91 	bl	8012638 <b_exp>
  b_exp(&t226);
 8006116:	f241 0330 	movw	r3, #4144	; 0x1030
 800611a:	443b      	add	r3, r7
 800611c:	4618      	mov	r0, r3
 800611e:	f00c fa8b 	bl	8012638 <b_exp>
  b_exp(&t227);
 8006122:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006126:	4618      	mov	r0, r3
 8006128:	f00c fa86 	bl	8012638 <b_exp>
  b_exp(&t218);
 800612c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006130:	4618      	mov	r0, r3
 8006132:	f00c fa81 	bl	8012638 <b_exp>
  b_exp(&t219);
 8006136:	4b74      	ldr	r3, [pc, #464]	; (8006308 <G_q+0x3ee8>)
 8006138:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800613c:	443a      	add	r2, r7
 800613e:	4413      	add	r3, r2
 8006140:	4618      	mov	r0, r3
 8006142:	f00c fa79 	bl	8012638 <b_exp>
  b_exp(&t264);
 8006146:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800614a:	4618      	mov	r0, r3
 800614c:	f00c fa74 	bl	8012638 <b_exp>
  b_exp(&t265);
 8006150:	4b6e      	ldr	r3, [pc, #440]	; (800630c <G_q+0x3eec>)
 8006152:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006156:	443a      	add	r2, r7
 8006158:	4413      	add	r3, r2
 800615a:	4618      	mov	r0, r3
 800615c:	f00c fa6c 	bl	8012638 <b_exp>
  b_exp(&t242);
 8006160:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8006164:	4618      	mov	r0, r3
 8006166:	f00c fa67 	bl	8012638 <b_exp>
  b_exp(&t243);
 800616a:	4b69      	ldr	r3, [pc, #420]	; (8006310 <G_q+0x3ef0>)
 800616c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006170:	443a      	add	r2, r7
 8006172:	4413      	add	r3, r2
 8006174:	4618      	mov	r0, r3
 8006176:	f00c fa5f 	bl	8012638 <b_exp>
  b_exp(&t244);
 800617a:	f241 03b0 	movw	r3, #4272	; 0x10b0
 800617e:	443b      	add	r3, r7
 8006180:	4618      	mov	r0, r3
 8006182:	f00c fa59 	bl	8012638 <b_exp>
  b_exp(&t245);
 8006186:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 800618a:	4618      	mov	r0, r3
 800618c:	f00c fa54 	bl	8012638 <b_exp>
  b_exp(&t252);
 8006190:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8006194:	4618      	mov	r0, r3
 8006196:	f00c fa4f 	bl	8012638 <b_exp>
  b_exp(&t253);
 800619a:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800619e:	4618      	mov	r0, r3
 80061a0:	f00c fa4a 	bl	8012638 <b_exp>
  b_exp(&t250);
 80061a4:	f241 03f0 	movw	r3, #4336	; 0x10f0
 80061a8:	443b      	add	r3, r7
 80061aa:	4618      	mov	r0, r3
 80061ac:	f00c fa44 	bl	8012638 <b_exp>
  b_exp(&t251);
 80061b0:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80061b4:	4618      	mov	r0, r3
 80061b6:	f00c fa3f 	bl	8012638 <b_exp>
  b_exp(&t246);
 80061ba:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80061be:	4618      	mov	r0, r3
 80061c0:	f00c fa3a 	bl	8012638 <b_exp>
  b_exp(&t247);
 80061c4:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 80061c8:	4618      	mov	r0, r3
 80061ca:	f00c fa35 	bl	8012638 <b_exp>
  b_exp(&t248);
 80061ce:	f241 03d0 	movw	r3, #4304	; 0x10d0
 80061d2:	443b      	add	r3, r7
 80061d4:	4618      	mov	r0, r3
 80061d6:	f00c fa2f 	bl	8012638 <b_exp>
  b_exp(&t249);
 80061da:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 80061de:	4618      	mov	r0, r3
 80061e0:	f00c fa2a 	bl	8012638 <b_exp>
  b_exp(&t256);
 80061e4:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 80061e8:	4618      	mov	r0, r3
 80061ea:	f00c fa25 	bl	8012638 <b_exp>
  b_exp(&t257);
 80061ee:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 80061f2:	4618      	mov	r0, r3
 80061f4:	f00c fa20 	bl	8012638 <b_exp>
  b_exp(&t258);
 80061f8:	f241 1310 	movw	r3, #4368	; 0x1110
 80061fc:	443b      	add	r3, r7
 80061fe:	4618      	mov	r0, r3
 8006200:	f00c fa1a 	bl	8012638 <b_exp>
  b_exp(&t259);
 8006204:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8006208:	4618      	mov	r0, r3
 800620a:	f00c fa15 	bl	8012638 <b_exp>
  b_exp(&t260);
 800620e:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 8006212:	4618      	mov	r0, r3
 8006214:	f00c fa10 	bl	8012638 <b_exp>
  b_exp(&t261);
 8006218:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 800621c:	4618      	mov	r0, r3
 800621e:	f00c fa0b 	bl	8012638 <b_exp>
  b_exp(&t262);
 8006222:	f241 1330 	movw	r3, #4400	; 0x1130
 8006226:	443b      	add	r3, r7
 8006228:	4618      	mov	r0, r3
 800622a:	f00c fa05 	bl	8012638 <b_exp>
  b_exp(&t263);
 800622e:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8006232:	4618      	mov	r0, r3
 8006234:	f00c fa00 	bl	8012638 <b_exp>
  b_exp(&t254);
 8006238:	f507 7354 	add.w	r3, r7, #848	; 0x350
 800623c:	4618      	mov	r0, r3
 800623e:	f00c f9fb 	bl	8012638 <b_exp>
  b_exp(&t255);
 8006242:	4b34      	ldr	r3, [pc, #208]	; (8006314 <G_q+0x3ef4>)
 8006244:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006248:	443a      	add	r2, r7
 800624a:	4413      	add	r3, r2
 800624c:	4618      	mov	r0, r3
 800624e:	f00c f9f3 	bl	8012638 <b_exp>
  b_exp(&t266);
 8006252:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8006256:	4618      	mov	r0, r3
 8006258:	f00c f9ee 	bl	8012638 <b_exp>
  b_exp(&t267);
 800625c:	4b2e      	ldr	r3, [pc, #184]	; (8006318 <G_q+0x3ef8>)
 800625e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006262:	443a      	add	r2, r7
 8006264:	4413      	add	r3, r2
 8006266:	4618      	mov	r0, r3
 8006268:	f00c f9e6 	bl	8012638 <b_exp>
  b_exp(&t268);
 800626c:	f241 1350 	movw	r3, #4432	; 0x1150
 8006270:	443b      	add	r3, r7
 8006272:	4618      	mov	r0, r3
 8006274:	f00c f9e0 	bl	8012638 <b_exp>
  b_exp(&t269);
 8006278:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 800627c:	4618      	mov	r0, r3
 800627e:	f00c f9db 	bl	8012638 <b_exp>
  b_exp(&t280);
 8006282:	f241 13b0 	movw	r3, #4528	; 0x11b0
 8006286:	443b      	add	r3, r7
 8006288:	4618      	mov	r0, r3
 800628a:	f00c f9d5 	bl	8012638 <b_exp>
  b_exp(&t281);
 800628e:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8006292:	4618      	mov	r0, r3
 8006294:	f00c f9d0 	bl	8012638 <b_exp>
  b_exp(&t282);
 8006298:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 800629c:	4618      	mov	r0, r3
 800629e:	f00c f9cb 	bl	8012638 <b_exp>
  b_exp(&t283);
 80062a2:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80062a6:	4618      	mov	r0, r3
 80062a8:	f00c f9c6 	bl	8012638 <b_exp>
  b_exp(&t284);
 80062ac:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80062b0:	4618      	mov	r0, r3
 80062b2:	f00c f9c1 	bl	8012638 <b_exp>
  b_exp(&t285);
 80062b6:	4b19      	ldr	r3, [pc, #100]	; (800631c <G_q+0x3efc>)
 80062b8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80062bc:	443a      	add	r2, r7
 80062be:	4413      	add	r3, r2
 80062c0:	4618      	mov	r0, r3
 80062c2:	f00c f9b9 	bl	8012638 <b_exp>
  b_exp(&t286);
 80062c6:	f241 13d0 	movw	r3, #4560	; 0x11d0
 80062ca:	443b      	add	r3, r7
 80062cc:	4618      	mov	r0, r3
 80062ce:	f00c f9b3 	bl	8012638 <b_exp>
  b_exp(&t287);
 80062d2:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 80062d6:	4618      	mov	r0, r3
 80062d8:	f00c f9ae 	bl	8012638 <b_exp>
  b_exp(&t294);
 80062dc:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80062e0:	4618      	mov	r0, r3
 80062e2:	f00c f9a9 	bl	8012638 <b_exp>
  b_exp(&t295);
 80062e6:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 80062ea:	4618      	mov	r0, r3
 80062ec:	f00c f9a4 	bl	8012638 <b_exp>
 80062f0:	e016      	b.n	8006320 <G_q+0x3f00>
 80062f2:	bf00      	nop
 80062f4:	ffffeed0 	.word	0xffffeed0
 80062f8:	ffffeef0 	.word	0xffffeef0
 80062fc:	ffffef10 	.word	0xffffef10
 8006300:	ffffef50 	.word	0xffffef50
 8006304:	ffffef30 	.word	0xffffef30
 8006308:	ffffecf0 	.word	0xffffecf0
 800630c:	ffffed10 	.word	0xffffed10
 8006310:	ffffef70 	.word	0xffffef70
 8006314:	ffffef90 	.word	0xffffef90
 8006318:	ffffed30 	.word	0xffffed30
 800631c:	ffffefd0 	.word	0xffffefd0
  b_exp(&t292);
 8006320:	f241 2310 	movw	r3, #4624	; 0x1210
 8006324:	443b      	add	r3, r7
 8006326:	4618      	mov	r0, r3
 8006328:	f00c f986 	bl	8012638 <b_exp>
  b_exp(&t293);
 800632c:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8006330:	4618      	mov	r0, r3
 8006332:	f00c f981 	bl	8012638 <b_exp>
  b_exp(&t288);
 8006336:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 800633a:	4618      	mov	r0, r3
 800633c:	f00c f97c 	bl	8012638 <b_exp>
  b_exp(&t289);
 8006340:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8006344:	4618      	mov	r0, r3
 8006346:	f00c f977 	bl	8012638 <b_exp>
  b_exp(&t290);
 800634a:	f241 13f0 	movw	r3, #4592	; 0x11f0
 800634e:	443b      	add	r3, r7
 8006350:	4618      	mov	r0, r3
 8006352:	f00c f971 	bl	8012638 <b_exp>
  b_exp(&t291);
 8006356:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 800635a:	4618      	mov	r0, r3
 800635c:	f00c f96c 	bl	8012638 <b_exp>
  b_exp(&t278);
 8006360:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8006364:	4618      	mov	r0, r3
 8006366:	f00c f967 	bl	8012638 <b_exp>
  b_exp(&t279);
 800636a:	4bd5      	ldr	r3, [pc, #852]	; (80066c0 <G_q+0x42a0>)
 800636c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006370:	443a      	add	r2, r7
 8006372:	4413      	add	r3, r2
 8006374:	4618      	mov	r0, r3
 8006376:	f00c f95f 	bl	8012638 <b_exp>
  b_exp(&t270);
 800637a:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 800637e:	4618      	mov	r0, r3
 8006380:	f00c f95a 	bl	8012638 <b_exp>
  b_exp(&t271);
 8006384:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 8006388:	4618      	mov	r0, r3
 800638a:	f00c f955 	bl	8012638 <b_exp>
  b_exp(&t272);
 800638e:	f241 1370 	movw	r3, #4464	; 0x1170
 8006392:	443b      	add	r3, r7
 8006394:	4618      	mov	r0, r3
 8006396:	f00c f94f 	bl	8012638 <b_exp>
  b_exp(&t273);
 800639a:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 800639e:	4618      	mov	r0, r3
 80063a0:	f00c f94a 	bl	8012638 <b_exp>
  b_exp(&t274);
 80063a4:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80063a8:	4618      	mov	r0, r3
 80063aa:	f00c f945 	bl	8012638 <b_exp>
  b_exp(&t275);
 80063ae:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 80063b2:	4618      	mov	r0, r3
 80063b4:	f00c f940 	bl	8012638 <b_exp>
  b_exp(&t276);
 80063b8:	f241 1390 	movw	r3, #4496	; 0x1190
 80063bc:	443b      	add	r3, r7
 80063be:	4618      	mov	r0, r3
 80063c0:	f00c f93a 	bl	8012638 <b_exp>
  b_exp(&t277);
 80063c4:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 80063c8:	4618      	mov	r0, r3
 80063ca:	f00c f935 	bl	8012638 <b_exp>
  b_exp(&t296);
 80063ce:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 80063d2:	4618      	mov	r0, r3
 80063d4:	f00c f930 	bl	8012638 <b_exp>
  b_exp(&t297);
 80063d8:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80063dc:	4618      	mov	r0, r3
 80063de:	f00c f92b 	bl	8012638 <b_exp>
  b_exp(&t298);
 80063e2:	f241 2330 	movw	r3, #4656	; 0x1230
 80063e6:	443b      	add	r3, r7
 80063e8:	4618      	mov	r0, r3
 80063ea:	f00c f925 	bl	8012638 <b_exp>
  b_exp(&t299);
 80063ee:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80063f2:	4618      	mov	r0, r3
 80063f4:	f00c f920 	bl	8012638 <b_exp>
  b_G_q[0].re = 0.0;
 80063f8:	4bb2      	ldr	r3, [pc, #712]	; (80066c4 <G_q+0x42a4>)
 80063fa:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80063fe:	443a      	add	r2, r7
 8006400:	4413      	add	r3, r2
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	f04f 0300 	mov.w	r3, #0
 8006408:	f04f 0400 	mov.w	r4, #0
 800640c:	e9c2 3400 	strd	r3, r4, [r2]
  b_G_q[0].im = 0.0;
 8006410:	4bac      	ldr	r3, [pc, #688]	; (80066c4 <G_q+0x42a4>)
 8006412:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006416:	443a      	add	r2, r7
 8006418:	4413      	add	r3, r2
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	f04f 0300 	mov.w	r3, #0
 8006420:	f04f 0400 	mov.w	r4, #0
 8006424:	e9c2 3402 	strd	r3, r4, [r2, #8]
  if (t33.im == 0.0) {
 8006428:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 800642c:	ed93 7b02 	vldr	d7, [r3, #8]
 8006430:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006438:	d115      	bne.n	8006466 <G_q+0x4046>
    t33_re = t33.re / 2.0;
 800643a:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 800643e:	ed93 6b00 	vldr	d6, [r3]
 8006442:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006446:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800644a:	f241 33c8 	movw	r3, #5064	; 0x13c8
 800644e:	443b      	add	r3, r7
 8006450:	ed83 7b00 	vstr	d7, [r3]
    t33_im = 0.0;
 8006454:	f04f 0300 	mov.w	r3, #0
 8006458:	f04f 0400 	mov.w	r4, #0
 800645c:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 8006460:	e9c2 3400 	strd	r3, r4, [r2]
 8006464:	e037      	b.n	80064d6 <G_q+0x40b6>
  } else if (t33.re == 0.0) {
 8006466:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 800646a:	ed93 7b00 	vldr	d7, [r3]
 800646e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006476:	d115      	bne.n	80064a4 <G_q+0x4084>
    t33_re = 0.0;
 8006478:	f04f 0300 	mov.w	r3, #0
 800647c:	f04f 0400 	mov.w	r4, #0
 8006480:	f241 32c8 	movw	r2, #5064	; 0x13c8
 8006484:	443a      	add	r2, r7
 8006486:	e9c2 3400 	strd	r3, r4, [r2]
    t33_im = t33.im / 2.0;
 800648a:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 800648e:	ed93 6b02 	vldr	d6, [r3, #8]
 8006492:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006496:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800649a:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 800649e:	ed83 7b00 	vstr	d7, [r3]
 80064a2:	e018      	b.n	80064d6 <G_q+0x40b6>
  } else {
    t33_re = t33.re / 2.0;
 80064a4:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 80064a8:	ed93 6b00 	vldr	d6, [r3]
 80064ac:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80064b0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80064b4:	f241 33c8 	movw	r3, #5064	; 0x13c8
 80064b8:	443b      	add	r3, r7
 80064ba:	ed83 7b00 	vstr	d7, [r3]
    t33_im = t33.im / 2.0;
 80064be:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 80064c2:	ed93 6b02 	vldr	d6, [r3, #8]
 80064c6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80064ca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80064ce:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80064d2:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t34.im == 0.0) {
 80064d6:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 80064da:	ed93 7b02 	vldr	d7, [r3, #8]
 80064de:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80064e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064e6:	d116      	bne.n	8006516 <G_q+0x40f6>
    t34_re = t34.re / 2.0;
 80064e8:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 80064ec:	ed93 6b00 	vldr	d6, [r3]
 80064f0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80064f4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80064f8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80064fc:	443b      	add	r3, r7
 80064fe:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8006502:	f04f 0300 	mov.w	r3, #0
 8006506:	f04f 0400 	mov.w	r4, #0
 800650a:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800650e:	443a      	add	r2, r7
 8006510:	e9c2 3400 	strd	r3, r4, [r2]
 8006514:	e039      	b.n	800658a <G_q+0x416a>
  } else if (t34.re == 0.0) {
 8006516:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 800651a:	ed93 7b00 	vldr	d7, [r3]
 800651e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006526:	d116      	bne.n	8006556 <G_q+0x4136>
    t34_re = 0.0;
 8006528:	f04f 0300 	mov.w	r3, #0
 800652c:	f04f 0400 	mov.w	r4, #0
 8006530:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8006534:	443a      	add	r2, r7
 8006536:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t34.im / 2.0;
 800653a:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 800653e:	ed93 6b02 	vldr	d6, [r3, #8]
 8006542:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006546:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800654a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800654e:	443b      	add	r3, r7
 8006550:	ed83 7b00 	vstr	d7, [r3]
 8006554:	e019      	b.n	800658a <G_q+0x416a>
  } else {
    t34_re = t34.re / 2.0;
 8006556:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 800655a:	ed93 6b00 	vldr	d6, [r3]
 800655e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006562:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006566:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800656a:	443b      	add	r3, r7
 800656c:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t34.im / 2.0;
 8006570:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8006574:	ed93 6b02 	vldr	d6, [r3, #8]
 8006578:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800657c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006580:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8006584:	443b      	add	r3, r7
 8006586:	ed83 7b00 	vstr	d7, [r3]
  }

  t33_re += t34_re;
 800658a:	f241 33c8 	movw	r3, #5064	; 0x13c8
 800658e:	443b      	add	r3, r7
 8006590:	ed93 6b00 	vldr	d6, [r3]
 8006594:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8006598:	443b      	add	r3, r7
 800659a:	ed93 7b00 	vldr	d7, [r3]
 800659e:	ee36 7b07 	vadd.f64	d7, d6, d7
 80065a2:	f241 33c8 	movw	r3, #5064	; 0x13c8
 80065a6:	443b      	add	r3, r7
 80065a8:	ed83 7b00 	vstr	d7, [r3]
  t33_im += t34_im;
 80065ac:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80065b0:	ed93 6b00 	vldr	d6, [r3]
 80065b4:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80065b8:	443b      	add	r3, r7
 80065ba:	ed93 7b00 	vldr	d7, [r3]
 80065be:	ee36 7b07 	vadd.f64	d7, d6, d7
 80065c2:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80065c6:	ed83 7b00 	vstr	d7, [r3]
  t35_re = (t35.re * 0.0 - t35.im * 0.5) - (t36.re * 0.0 - t36.im * 0.5);
 80065ca:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80065ce:	ed93 7b00 	vldr	d7, [r3]
 80065d2:	ed9f 6b39 	vldr	d6, [pc, #228]	; 80066b8 <G_q+0x4298>
 80065d6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80065da:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80065de:	ed93 7b02 	vldr	d7, [r3, #8]
 80065e2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80065e6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80065ea:	ee36 6b47 	vsub.f64	d6, d6, d7
 80065ee:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80065f2:	ed93 7b00 	vldr	d7, [r3]
 80065f6:	ed9f 5b30 	vldr	d5, [pc, #192]	; 80066b8 <G_q+0x4298>
 80065fa:	ee27 5b05 	vmul.f64	d5, d7, d5
 80065fe:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8006602:	ed93 7b02 	vldr	d7, [r3, #8]
 8006606:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800660a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800660e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006612:	f241 2398 	movw	r3, #4760	; 0x1298
 8006616:	443b      	add	r3, r7
 8006618:	ee36 7b47 	vsub.f64	d7, d6, d7
 800661c:	ed83 7b00 	vstr	d7, [r3]
  t35_im = (t35.re * 0.5 + t35.im * 0.0) - (t36.re * 0.5 + t36.im * 0.0);
 8006620:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8006624:	ed93 7b00 	vldr	d7, [r3]
 8006628:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800662c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006630:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8006634:	ed93 7b02 	vldr	d7, [r3, #8]
 8006638:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 80066b8 <G_q+0x4298>
 800663c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006640:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006644:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8006648:	ed93 7b00 	vldr	d7, [r3]
 800664c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006650:	ee27 5b05 	vmul.f64	d5, d7, d5
 8006654:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8006658:	ed93 7b02 	vldr	d7, [r3, #8]
 800665c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80066b8 <G_q+0x4298>
 8006660:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006664:	ee35 7b07 	vadd.f64	d7, d5, d7
 8006668:	f241 2390 	movw	r3, #4752	; 0x1290
 800666c:	443b      	add	r3, r7
 800666e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006672:	ed83 7b00 	vstr	d7, [r3]
  if (t37.im == 0.0) {
 8006676:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800667a:	ed93 7b02 	vldr	d7, [r3, #8]
 800667e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006686:	d11f      	bne.n	80066c8 <G_q+0x42a8>
    t37_re = t37.re / 2.0;
 8006688:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800668c:	ed93 6b00 	vldr	d6, [r3]
 8006690:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006694:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006698:	f241 33a8 	movw	r3, #5032	; 0x13a8
 800669c:	443b      	add	r3, r7
 800669e:	ed83 7b00 	vstr	d7, [r3]
    t37_im = 0.0;
 80066a2:	f04f 0300 	mov.w	r3, #0
 80066a6:	f04f 0400 	mov.w	r4, #0
 80066aa:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 80066ae:	e9c2 3400 	strd	r3, r4, [r2]
 80066b2:	e041      	b.n	8006738 <G_q+0x4318>
 80066b4:	f3af 8000 	nop.w
	...
 80066c0:	ffffefb0 	.word	0xffffefb0
 80066c4:	ffffec34 	.word	0xffffec34
  } else if (t37.re == 0.0) {
 80066c8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80066cc:	ed93 7b00 	vldr	d7, [r3]
 80066d0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80066d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066d8:	d115      	bne.n	8006706 <G_q+0x42e6>
    t37_re = 0.0;
 80066da:	f04f 0300 	mov.w	r3, #0
 80066de:	f04f 0400 	mov.w	r4, #0
 80066e2:	f241 32a8 	movw	r2, #5032	; 0x13a8
 80066e6:	443a      	add	r2, r7
 80066e8:	e9c2 3400 	strd	r3, r4, [r2]
    t37_im = t37.im / 2.0;
 80066ec:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80066f0:	ed93 6b02 	vldr	d6, [r3, #8]
 80066f4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80066f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80066fc:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8006700:	ed83 7b00 	vstr	d7, [r3]
 8006704:	e018      	b.n	8006738 <G_q+0x4318>
  } else {
    t37_re = t37.re / 2.0;
 8006706:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800670a:	ed93 6b00 	vldr	d6, [r3]
 800670e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006712:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006716:	f241 33a8 	movw	r3, #5032	; 0x13a8
 800671a:	443b      	add	r3, r7
 800671c:	ed83 7b00 	vstr	d7, [r3]
    t37_im = t37.im / 2.0;
 8006720:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006724:	ed93 6b02 	vldr	d6, [r3, #8]
 8006728:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800672c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006730:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8006734:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t38.im == 0.0) {
 8006738:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800673c:	ed93 7b02 	vldr	d7, [r3, #8]
 8006740:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006748:	d116      	bne.n	8006778 <G_q+0x4358>
    t34_re = t38.re / 2.0;
 800674a:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800674e:	ed93 6b00 	vldr	d6, [r3]
 8006752:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006756:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800675a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800675e:	443b      	add	r3, r7
 8006760:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8006764:	f04f 0300 	mov.w	r3, #0
 8006768:	f04f 0400 	mov.w	r4, #0
 800676c:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8006770:	443a      	add	r2, r7
 8006772:	e9c2 3400 	strd	r3, r4, [r2]
 8006776:	e039      	b.n	80067ec <G_q+0x43cc>
  } else if (t38.re == 0.0) {
 8006778:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800677c:	ed93 7b00 	vldr	d7, [r3]
 8006780:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006788:	d116      	bne.n	80067b8 <G_q+0x4398>
    t34_re = 0.0;
 800678a:	f04f 0300 	mov.w	r3, #0
 800678e:	f04f 0400 	mov.w	r4, #0
 8006792:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8006796:	443a      	add	r2, r7
 8006798:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t38.im / 2.0;
 800679c:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80067a0:	ed93 6b02 	vldr	d6, [r3, #8]
 80067a4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80067a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80067ac:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80067b0:	443b      	add	r3, r7
 80067b2:	ed83 7b00 	vstr	d7, [r3]
 80067b6:	e019      	b.n	80067ec <G_q+0x43cc>
  } else {
    t34_re = t38.re / 2.0;
 80067b8:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80067bc:	ed93 6b00 	vldr	d6, [r3]
 80067c0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80067c4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80067c8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80067cc:	443b      	add	r3, r7
 80067ce:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t38.im / 2.0;
 80067d2:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80067d6:	ed93 6b02 	vldr	d6, [r3, #8]
 80067da:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80067de:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80067e2:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80067e6:	443b      	add	r3, r7
 80067e8:	ed83 7b00 	vstr	d7, [r3]
  }

  t37_re += t34_re;
 80067ec:	f241 33a8 	movw	r3, #5032	; 0x13a8
 80067f0:	443b      	add	r3, r7
 80067f2:	ed93 6b00 	vldr	d6, [r3]
 80067f6:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80067fa:	443b      	add	r3, r7
 80067fc:	ed93 7b00 	vldr	d7, [r3]
 8006800:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006804:	f241 33a8 	movw	r3, #5032	; 0x13a8
 8006808:	443b      	add	r3, r7
 800680a:	ed83 7b00 	vstr	d7, [r3]
  t37_im += t34_im;
 800680e:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8006812:	ed93 6b00 	vldr	d6, [r3]
 8006816:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800681a:	443b      	add	r3, r7
 800681c:	ed93 7b00 	vldr	d7, [r3]
 8006820:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006824:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8006828:	ed83 7b00 	vstr	d7, [r3]
  t39_re = (t39.re * 0.0 - t39.im * 0.5) - (t40.re * 0.0 - t40.im * 0.5);
 800682c:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8006830:	ed93 7b00 	vldr	d7, [r3]
 8006834:	ed9f 6bce 	vldr	d6, [pc, #824]	; 8006b70 <G_q+0x4750>
 8006838:	ee27 6b06 	vmul.f64	d6, d7, d6
 800683c:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8006840:	ed93 7b02 	vldr	d7, [r3, #8]
 8006844:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006848:	ee27 7b05 	vmul.f64	d7, d7, d5
 800684c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006850:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 8006854:	ed93 7b00 	vldr	d7, [r3]
 8006858:	ed9f 5bc5 	vldr	d5, [pc, #788]	; 8006b70 <G_q+0x4750>
 800685c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8006860:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 8006864:	ed93 7b02 	vldr	d7, [r3, #8]
 8006868:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800686c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006870:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006874:	f241 2388 	movw	r3, #4744	; 0x1288
 8006878:	443b      	add	r3, r7
 800687a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800687e:	ed83 7b00 	vstr	d7, [r3]
  t39_im = (t39.re * 0.5 + t39.im * 0.0) - (t40.re * 0.5 + t40.im * 0.0);
 8006882:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8006886:	ed93 7b00 	vldr	d7, [r3]
 800688a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800688e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006892:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8006896:	ed93 7b02 	vldr	d7, [r3, #8]
 800689a:	ed9f 5bb5 	vldr	d5, [pc, #724]	; 8006b70 <G_q+0x4750>
 800689e:	ee27 7b05 	vmul.f64	d7, d7, d5
 80068a2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80068a6:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 80068aa:	ed93 7b00 	vldr	d7, [r3]
 80068ae:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80068b2:	ee27 5b05 	vmul.f64	d5, d7, d5
 80068b6:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 80068ba:	ed93 7b02 	vldr	d7, [r3, #8]
 80068be:	ed9f 4bac 	vldr	d4, [pc, #688]	; 8006b70 <G_q+0x4750>
 80068c2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80068c6:	ee35 7b07 	vadd.f64	d7, d5, d7
 80068ca:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 80068ce:	ee36 7b47 	vsub.f64	d7, d6, d7
 80068d2:	ed83 7b00 	vstr	d7, [r3]
  if (t10.im == 0.0) {
 80068d6:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80068da:	ed93 7b02 	vldr	d7, [r3, #8]
 80068de:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80068e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068e6:	d116      	bne.n	8006916 <G_q+0x44f6>
    t10_re = t10.re / 2.0;
 80068e8:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80068ec:	ed93 6b00 	vldr	d6, [r3]
 80068f0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80068f4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80068f8:	f241 3398 	movw	r3, #5016	; 0x1398
 80068fc:	443b      	add	r3, r7
 80068fe:	ed83 7b00 	vstr	d7, [r3]
    t10_im = 0.0;
 8006902:	f04f 0300 	mov.w	r3, #0
 8006906:	f04f 0400 	mov.w	r4, #0
 800690a:	f241 3290 	movw	r2, #5008	; 0x1390
 800690e:	443a      	add	r2, r7
 8006910:	e9c2 3400 	strd	r3, r4, [r2]
 8006914:	e039      	b.n	800698a <G_q+0x456a>
  } else if (t10.re == 0.0) {
 8006916:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800691a:	ed93 7b00 	vldr	d7, [r3]
 800691e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006926:	d116      	bne.n	8006956 <G_q+0x4536>
    t10_re = 0.0;
 8006928:	f04f 0300 	mov.w	r3, #0
 800692c:	f04f 0400 	mov.w	r4, #0
 8006930:	f241 3298 	movw	r2, #5016	; 0x1398
 8006934:	443a      	add	r2, r7
 8006936:	e9c2 3400 	strd	r3, r4, [r2]
    t10_im = t10.im / 2.0;
 800693a:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800693e:	ed93 6b02 	vldr	d6, [r3, #8]
 8006942:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006946:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800694a:	f241 3390 	movw	r3, #5008	; 0x1390
 800694e:	443b      	add	r3, r7
 8006950:	ed83 7b00 	vstr	d7, [r3]
 8006954:	e019      	b.n	800698a <G_q+0x456a>
  } else {
    t10_re = t10.re / 2.0;
 8006956:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800695a:	ed93 6b00 	vldr	d6, [r3]
 800695e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006962:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006966:	f241 3398 	movw	r3, #5016	; 0x1398
 800696a:	443b      	add	r3, r7
 800696c:	ed83 7b00 	vstr	d7, [r3]
    t10_im = t10.im / 2.0;
 8006970:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8006974:	ed93 6b02 	vldr	d6, [r3, #8]
 8006978:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800697c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006980:	f241 3390 	movw	r3, #5008	; 0x1390
 8006984:	443b      	add	r3, r7
 8006986:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t11.im == 0.0) {
 800698a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800698e:	ed93 7b02 	vldr	d7, [r3, #8]
 8006992:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800699a:	d116      	bne.n	80069ca <G_q+0x45aa>
    t34_re = t11.re / 2.0;
 800699c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80069a0:	ed93 6b00 	vldr	d6, [r3]
 80069a4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80069a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80069ac:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80069b0:	443b      	add	r3, r7
 80069b2:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 80069b6:	f04f 0300 	mov.w	r3, #0
 80069ba:	f04f 0400 	mov.w	r4, #0
 80069be:	f241 32b0 	movw	r2, #5040	; 0x13b0
 80069c2:	443a      	add	r2, r7
 80069c4:	e9c2 3400 	strd	r3, r4, [r2]
 80069c8:	e039      	b.n	8006a3e <G_q+0x461e>
  } else if (t11.re == 0.0) {
 80069ca:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80069ce:	ed93 7b00 	vldr	d7, [r3]
 80069d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80069d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069da:	d116      	bne.n	8006a0a <G_q+0x45ea>
    t34_re = 0.0;
 80069dc:	f04f 0300 	mov.w	r3, #0
 80069e0:	f04f 0400 	mov.w	r4, #0
 80069e4:	f241 32b8 	movw	r2, #5048	; 0x13b8
 80069e8:	443a      	add	r2, r7
 80069ea:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t11.im / 2.0;
 80069ee:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80069f2:	ed93 6b02 	vldr	d6, [r3, #8]
 80069f6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80069fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80069fe:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8006a02:	443b      	add	r3, r7
 8006a04:	ed83 7b00 	vstr	d7, [r3]
 8006a08:	e019      	b.n	8006a3e <G_q+0x461e>
  } else {
    t34_re = t11.re / 2.0;
 8006a0a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8006a0e:	ed93 6b00 	vldr	d6, [r3]
 8006a12:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006a16:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006a1a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8006a1e:	443b      	add	r3, r7
 8006a20:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t11.im / 2.0;
 8006a24:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8006a28:	ed93 6b02 	vldr	d6, [r3, #8]
 8006a2c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006a30:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006a34:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8006a38:	443b      	add	r3, r7
 8006a3a:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t12.im == 0.0) {
 8006a3e:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8006a42:	ed93 7b02 	vldr	d7, [r3, #8]
 8006a46:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a4e:	d115      	bne.n	8006a7c <G_q+0x465c>
    t12_re = t12.re / 2.0;
 8006a50:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8006a54:	ed93 6b00 	vldr	d6, [r3]
 8006a58:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006a5c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006a60:	f241 3388 	movw	r3, #5000	; 0x1388
 8006a64:	443b      	add	r3, r7
 8006a66:	ed83 7b00 	vstr	d7, [r3]
    t12_im = 0.0;
 8006a6a:	f04f 0300 	mov.w	r3, #0
 8006a6e:	f04f 0400 	mov.w	r4, #0
 8006a72:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8006a76:	e9c2 3400 	strd	r3, r4, [r2]
 8006a7a:	e037      	b.n	8006aec <G_q+0x46cc>
  } else if (t12.re == 0.0) {
 8006a7c:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8006a80:	ed93 7b00 	vldr	d7, [r3]
 8006a84:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a8c:	d115      	bne.n	8006aba <G_q+0x469a>
    t12_re = 0.0;
 8006a8e:	f04f 0300 	mov.w	r3, #0
 8006a92:	f04f 0400 	mov.w	r4, #0
 8006a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a9a:	443a      	add	r2, r7
 8006a9c:	e9c2 3400 	strd	r3, r4, [r2]
    t12_im = t12.im / 2.0;
 8006aa0:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8006aa4:	ed93 6b02 	vldr	d6, [r3, #8]
 8006aa8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006aac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006ab0:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8006ab4:	ed83 7b00 	vstr	d7, [r3]
 8006ab8:	e018      	b.n	8006aec <G_q+0x46cc>
  } else {
    t12_re = t12.re / 2.0;
 8006aba:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8006abe:	ed93 6b00 	vldr	d6, [r3]
 8006ac2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006ac6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006aca:	f241 3388 	movw	r3, #5000	; 0x1388
 8006ace:	443b      	add	r3, r7
 8006ad0:	ed83 7b00 	vstr	d7, [r3]
    t12_im = t12.im / 2.0;
 8006ad4:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8006ad8:	ed93 6b02 	vldr	d6, [r3, #8]
 8006adc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006ae0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006ae4:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8006ae8:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t13.im == 0.0) {
 8006aec:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8006af0:	ed93 7b02 	vldr	d7, [r3, #8]
 8006af4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006afc:	d116      	bne.n	8006b2c <G_q+0x470c>
    t13_re = t13.re / 2.0;
 8006afe:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8006b02:	ed93 6b00 	vldr	d6, [r3]
 8006b06:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006b0a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006b0e:	f241 3378 	movw	r3, #4984	; 0x1378
 8006b12:	443b      	add	r3, r7
 8006b14:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 8006b18:	f04f 0300 	mov.w	r3, #0
 8006b1c:	f04f 0400 	mov.w	r4, #0
 8006b20:	f241 3270 	movw	r2, #4976	; 0x1370
 8006b24:	443a      	add	r2, r7
 8006b26:	e9c2 3400 	strd	r3, r4, [r2]
 8006b2a:	e03f      	b.n	8006bac <G_q+0x478c>
  } else if (t13.re == 0.0) {
 8006b2c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8006b30:	ed93 7b00 	vldr	d7, [r3]
 8006b34:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b3c:	d11c      	bne.n	8006b78 <G_q+0x4758>
    t13_re = 0.0;
 8006b3e:	f04f 0300 	mov.w	r3, #0
 8006b42:	f04f 0400 	mov.w	r4, #0
 8006b46:	f241 3278 	movw	r2, #4984	; 0x1378
 8006b4a:	443a      	add	r2, r7
 8006b4c:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t13.im / 2.0;
 8006b50:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8006b54:	ed93 6b02 	vldr	d6, [r3, #8]
 8006b58:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006b5c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006b60:	f241 3370 	movw	r3, #4976	; 0x1370
 8006b64:	443b      	add	r3, r7
 8006b66:	ed83 7b00 	vstr	d7, [r3]
 8006b6a:	e01f      	b.n	8006bac <G_q+0x478c>
 8006b6c:	f3af 8000 	nop.w
	...
  } else {
    t13_re = t13.re / 2.0;
 8006b78:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8006b7c:	ed93 6b00 	vldr	d6, [r3]
 8006b80:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006b84:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006b88:	f241 3378 	movw	r3, #4984	; 0x1378
 8006b8c:	443b      	add	r3, r7
 8006b8e:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t13.im / 2.0;
 8006b92:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8006b96:	ed93 6b02 	vldr	d6, [r3, #8]
 8006b9a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006b9e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006ba2:	f241 3370 	movw	r3, #4976	; 0x1370
 8006ba6:	443b      	add	r3, r7
 8006ba8:	ed83 7b00 	vstr	d7, [r3]
  }

  t10_re += t34_re;
 8006bac:	f241 3398 	movw	r3, #5016	; 0x1398
 8006bb0:	443b      	add	r3, r7
 8006bb2:	ed93 6b00 	vldr	d6, [r3]
 8006bb6:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8006bba:	443b      	add	r3, r7
 8006bbc:	ed93 7b00 	vldr	d7, [r3]
 8006bc0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006bc4:	f241 3398 	movw	r3, #5016	; 0x1398
 8006bc8:	443b      	add	r3, r7
 8006bca:	ed83 7b00 	vstr	d7, [r3]
  t10_im += t34_im;
 8006bce:	f241 3390 	movw	r3, #5008	; 0x1390
 8006bd2:	443b      	add	r3, r7
 8006bd4:	ed93 6b00 	vldr	d6, [r3]
 8006bd8:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8006bdc:	443b      	add	r3, r7
 8006bde:	ed93 7b00 	vldr	d7, [r3]
 8006be2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006be6:	f241 3390 	movw	r3, #5008	; 0x1390
 8006bea:	443b      	add	r3, r7
 8006bec:	ed83 7b00 	vstr	d7, [r3]
  t12_re += t13_re;
 8006bf0:	f241 3388 	movw	r3, #5000	; 0x1388
 8006bf4:	443b      	add	r3, r7
 8006bf6:	ed93 6b00 	vldr	d6, [r3]
 8006bfa:	f241 3378 	movw	r3, #4984	; 0x1378
 8006bfe:	443b      	add	r3, r7
 8006c00:	ed93 7b00 	vldr	d7, [r3]
 8006c04:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006c08:	f241 3388 	movw	r3, #5000	; 0x1388
 8006c0c:	443b      	add	r3, r7
 8006c0e:	ed83 7b00 	vstr	d7, [r3]
  t12_im += t13_im;
 8006c12:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8006c16:	ed93 6b00 	vldr	d6, [r3]
 8006c1a:	f241 3370 	movw	r3, #4976	; 0x1370
 8006c1e:	443b      	add	r3, r7
 8006c20:	ed93 7b00 	vldr	d7, [r3]
 8006c24:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006c28:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8006c2c:	ed83 7b00 	vstr	d7, [r3]
  t34_re = (t14.re * 0.0 - t14.im * 0.5) - (t15.re * 0.0 - t15.im * 0.5);
 8006c30:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8006c34:	ed93 7b00 	vldr	d7, [r3]
 8006c38:	ed1f 6b33 	vldr	d6, [pc, #-204]	; 8006b70 <G_q+0x4750>
 8006c3c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006c40:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8006c44:	ed93 7b02 	vldr	d7, [r3, #8]
 8006c48:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006c4c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006c50:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006c54:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8006c58:	ed93 7b00 	vldr	d7, [r3]
 8006c5c:	ed1f 5b3c 	vldr	d5, [pc, #-240]	; 8006b70 <G_q+0x4750>
 8006c60:	ee27 5b05 	vmul.f64	d5, d7, d5
 8006c64:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8006c68:	ed93 7b02 	vldr	d7, [r3, #8]
 8006c6c:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8006c70:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006c74:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006c78:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006c7c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8006c80:	443b      	add	r3, r7
 8006c82:	ed83 7b00 	vstr	d7, [r3]
  t34_im = (t14.re * 0.5 + t14.im * 0.0) - (t15.re * 0.5 + t15.im * 0.0);
 8006c86:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8006c8a:	ed93 7b00 	vldr	d7, [r3]
 8006c8e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8006c92:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006c96:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8006c9a:	ed93 7b02 	vldr	d7, [r3, #8]
 8006c9e:	ed1f 5b4c 	vldr	d5, [pc, #-304]	; 8006b70 <G_q+0x4750>
 8006ca2:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006ca6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006caa:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8006cae:	ed93 7b00 	vldr	d7, [r3]
 8006cb2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006cb6:	ee27 5b05 	vmul.f64	d5, d7, d5
 8006cba:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8006cbe:	ed93 7b02 	vldr	d7, [r3, #8]
 8006cc2:	ed1f 4b55 	vldr	d4, [pc, #-340]	; 8006b70 <G_q+0x4750>
 8006cc6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006cca:	ee35 7b07 	vadd.f64	d7, d5, d7
 8006cce:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006cd2:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8006cd6:	443b      	add	r3, r7
 8006cd8:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t16.re * 0.0 - t16.im * 0.5) - (t17.re * 0.0 - t17.im * 0.5);
 8006cdc:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8006ce0:	ed93 7b00 	vldr	d7, [r3]
 8006ce4:	ed1f 6b5e 	vldr	d6, [pc, #-376]	; 8006b70 <G_q+0x4750>
 8006ce8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006cec:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8006cf0:	ed93 7b02 	vldr	d7, [r3, #8]
 8006cf4:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006cf8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006cfc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006d00:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8006d04:	ed93 7b00 	vldr	d7, [r3]
 8006d08:	ed1f 5b67 	vldr	d5, [pc, #-412]	; 8006b70 <G_q+0x4750>
 8006d0c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8006d10:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8006d14:	ed93 7b02 	vldr	d7, [r3, #8]
 8006d18:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8006d1c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006d20:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006d24:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006d28:	f241 3368 	movw	r3, #4968	; 0x1368
 8006d2c:	443b      	add	r3, r7
 8006d2e:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t16.re * 0.5 + t16.im * 0.0) - (t17.re * 0.5 + t17.im * 0.0);
 8006d32:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8006d36:	ed93 7b00 	vldr	d7, [r3]
 8006d3a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8006d3e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006d42:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8006d46:	ed93 7b02 	vldr	d7, [r3, #8]
 8006d4a:	ed1f 5b77 	vldr	d5, [pc, #-476]	; 8006b70 <G_q+0x4750>
 8006d4e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006d52:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006d56:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8006d5a:	ed93 7b00 	vldr	d7, [r3]
 8006d5e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006d62:	ee27 5b05 	vmul.f64	d5, d7, d5
 8006d66:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8006d6a:	ed93 7b02 	vldr	d7, [r3, #8]
 8006d6e:	ed1f 4b80 	vldr	d4, [pc, #-512]	; 8006b70 <G_q+0x4750>
 8006d72:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006d76:	ee35 7b07 	vadd.f64	d7, d5, d7
 8006d7a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006d7e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8006d82:	ed83 7b00 	vstr	d7, [r3]
  if (t19.im == 0.0) {
 8006d86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006d8a:	ed93 7b02 	vldr	d7, [r3, #8]
 8006d8e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d96:	d116      	bne.n	8006dc6 <G_q+0x49a6>
    t19_re = t19.re / 2.0;
 8006d98:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006d9c:	ed93 6b00 	vldr	d6, [r3]
 8006da0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006da4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006da8:	f241 3358 	movw	r3, #4952	; 0x1358
 8006dac:	443b      	add	r3, r7
 8006dae:	ed83 7b00 	vstr	d7, [r3]
    t19_im = 0.0;
 8006db2:	f04f 0300 	mov.w	r3, #0
 8006db6:	f04f 0400 	mov.w	r4, #0
 8006dba:	f241 3250 	movw	r2, #4944	; 0x1350
 8006dbe:	443a      	add	r2, r7
 8006dc0:	e9c2 3400 	strd	r3, r4, [r2]
 8006dc4:	e039      	b.n	8006e3a <G_q+0x4a1a>
  } else if (t19.re == 0.0) {
 8006dc6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006dca:	ed93 7b00 	vldr	d7, [r3]
 8006dce:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dd6:	d116      	bne.n	8006e06 <G_q+0x49e6>
    t19_re = 0.0;
 8006dd8:	f04f 0300 	mov.w	r3, #0
 8006ddc:	f04f 0400 	mov.w	r4, #0
 8006de0:	f241 3258 	movw	r2, #4952	; 0x1358
 8006de4:	443a      	add	r2, r7
 8006de6:	e9c2 3400 	strd	r3, r4, [r2]
    t19_im = t19.im / 2.0;
 8006dea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006dee:	ed93 6b02 	vldr	d6, [r3, #8]
 8006df2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006df6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006dfa:	f241 3350 	movw	r3, #4944	; 0x1350
 8006dfe:	443b      	add	r3, r7
 8006e00:	ed83 7b00 	vstr	d7, [r3]
 8006e04:	e019      	b.n	8006e3a <G_q+0x4a1a>
  } else {
    t19_re = t19.re / 2.0;
 8006e06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e0a:	ed93 6b00 	vldr	d6, [r3]
 8006e0e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006e12:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006e16:	f241 3358 	movw	r3, #4952	; 0x1358
 8006e1a:	443b      	add	r3, r7
 8006e1c:	ed83 7b00 	vstr	d7, [r3]
    t19_im = t19.im / 2.0;
 8006e20:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e24:	ed93 6b02 	vldr	d6, [r3, #8]
 8006e28:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006e2c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006e30:	f241 3350 	movw	r3, #4944	; 0x1350
 8006e34:	443b      	add	r3, r7
 8006e36:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t20.im == 0.0) {
 8006e3a:	4bcb      	ldr	r3, [pc, #812]	; (8007168 <G_q+0x4d48>)
 8006e3c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006e40:	443a      	add	r2, r7
 8006e42:	4413      	add	r3, r2
 8006e44:	ed93 7b02 	vldr	d7, [r3, #8]
 8006e48:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e50:	d118      	bne.n	8006e84 <G_q+0x4a64>
    t20_re = t20.re / 2.0;
 8006e52:	4bc5      	ldr	r3, [pc, #788]	; (8007168 <G_q+0x4d48>)
 8006e54:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006e58:	443a      	add	r2, r7
 8006e5a:	4413      	add	r3, r2
 8006e5c:	ed93 6b00 	vldr	d6, [r3]
 8006e60:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006e64:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006e68:	f241 3348 	movw	r3, #4936	; 0x1348
 8006e6c:	443b      	add	r3, r7
 8006e6e:	ed83 7b00 	vstr	d7, [r3]
    t20_im = 0.0;
 8006e72:	f04f 0300 	mov.w	r3, #0
 8006e76:	f04f 0400 	mov.w	r4, #0
 8006e7a:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8006e7e:	e9c2 3400 	strd	r3, r4, [r2]
 8006e82:	e043      	b.n	8006f0c <G_q+0x4aec>
  } else if (t20.re == 0.0) {
 8006e84:	4bb8      	ldr	r3, [pc, #736]	; (8007168 <G_q+0x4d48>)
 8006e86:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006e8a:	443a      	add	r2, r7
 8006e8c:	4413      	add	r3, r2
 8006e8e:	ed93 7b00 	vldr	d7, [r3]
 8006e92:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e9a:	d118      	bne.n	8006ece <G_q+0x4aae>
    t20_re = 0.0;
 8006e9c:	f04f 0300 	mov.w	r3, #0
 8006ea0:	f04f 0400 	mov.w	r4, #0
 8006ea4:	f241 3248 	movw	r2, #4936	; 0x1348
 8006ea8:	443a      	add	r2, r7
 8006eaa:	e9c2 3400 	strd	r3, r4, [r2]
    t20_im = t20.im / 2.0;
 8006eae:	4bae      	ldr	r3, [pc, #696]	; (8007168 <G_q+0x4d48>)
 8006eb0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006eb4:	443a      	add	r2, r7
 8006eb6:	4413      	add	r3, r2
 8006eb8:	ed93 6b02 	vldr	d6, [r3, #8]
 8006ebc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006ec0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006ec4:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8006ec8:	ed83 7b00 	vstr	d7, [r3]
 8006ecc:	e01e      	b.n	8006f0c <G_q+0x4aec>
  } else {
    t20_re = t20.re / 2.0;
 8006ece:	4ba6      	ldr	r3, [pc, #664]	; (8007168 <G_q+0x4d48>)
 8006ed0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006ed4:	443a      	add	r2, r7
 8006ed6:	4413      	add	r3, r2
 8006ed8:	ed93 6b00 	vldr	d6, [r3]
 8006edc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006ee0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006ee4:	f241 3348 	movw	r3, #4936	; 0x1348
 8006ee8:	443b      	add	r3, r7
 8006eea:	ed83 7b00 	vstr	d7, [r3]
    t20_im = t20.im / 2.0;
 8006eee:	4b9e      	ldr	r3, [pc, #632]	; (8007168 <G_q+0x4d48>)
 8006ef0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006ef4:	443a      	add	r2, r7
 8006ef6:	4413      	add	r3, r2
 8006ef8:	ed93 6b02 	vldr	d6, [r3, #8]
 8006efc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006f00:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006f04:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8006f08:	ed83 7b00 	vstr	d7, [r3]
  }

  b_t10_re = (t10_re * t12_re - t10_im * t12_im) + (t34_re * t16_re - t34_im *
 8006f0c:	f241 3398 	movw	r3, #5016	; 0x1398
 8006f10:	443b      	add	r3, r7
 8006f12:	ed93 6b00 	vldr	d6, [r3]
 8006f16:	f241 3388 	movw	r3, #5000	; 0x1388
 8006f1a:	443b      	add	r3, r7
 8006f1c:	ed93 7b00 	vldr	d7, [r3]
 8006f20:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006f24:	f241 3390 	movw	r3, #5008	; 0x1390
 8006f28:	443b      	add	r3, r7
 8006f2a:	ed93 5b00 	vldr	d5, [r3]
 8006f2e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8006f32:	ed93 7b00 	vldr	d7, [r3]
 8006f36:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006f3a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006f3e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8006f42:	443b      	add	r3, r7
 8006f44:	ed93 5b00 	vldr	d5, [r3]
 8006f48:	f241 3368 	movw	r3, #4968	; 0x1368
 8006f4c:	443b      	add	r3, r7
 8006f4e:	ed93 7b00 	vldr	d7, [r3]
 8006f52:	ee25 5b07 	vmul.f64	d5, d5, d7
 8006f56:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8006f5a:	443b      	add	r3, r7
 8006f5c:	ed93 4b00 	vldr	d4, [r3]
 8006f60:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8006f64:	ed93 7b00 	vldr	d7, [r3]
 8006f68:	ee24 7b07 	vmul.f64	d7, d4, d7
 8006f6c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006f70:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006f74:	f241 3338 	movw	r3, #4920	; 0x1338
 8006f78:	443b      	add	r3, r7
 8006f7a:	ed83 7b00 	vstr	d7, [r3]
    t16_im);
  t10_im = (t10_re * t12_im + t10_im * t12_re) + (t34_re * t16_im + t34_im *
 8006f7e:	f241 3398 	movw	r3, #5016	; 0x1398
 8006f82:	443b      	add	r3, r7
 8006f84:	ed93 6b00 	vldr	d6, [r3]
 8006f88:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8006f8c:	ed93 7b00 	vldr	d7, [r3]
 8006f90:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006f94:	f241 3390 	movw	r3, #5008	; 0x1390
 8006f98:	443b      	add	r3, r7
 8006f9a:	ed93 5b00 	vldr	d5, [r3]
 8006f9e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006fa2:	443b      	add	r3, r7
 8006fa4:	ed93 7b00 	vldr	d7, [r3]
 8006fa8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006fac:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006fb0:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8006fb4:	443b      	add	r3, r7
 8006fb6:	ed93 5b00 	vldr	d5, [r3]
 8006fba:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8006fbe:	ed93 7b00 	vldr	d7, [r3]
 8006fc2:	ee25 5b07 	vmul.f64	d5, d5, d7
 8006fc6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8006fca:	443b      	add	r3, r7
 8006fcc:	ed93 4b00 	vldr	d4, [r3]
 8006fd0:	f241 3368 	movw	r3, #4968	; 0x1368
 8006fd4:	443b      	add	r3, r7
 8006fd6:	ed93 7b00 	vldr	d7, [r3]
 8006fda:	ee24 7b07 	vmul.f64	d7, d4, d7
 8006fde:	ee35 7b07 	vadd.f64	d7, d5, d7
 8006fe2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006fe6:	f241 3390 	movw	r3, #5008	; 0x1390
 8006fea:	443b      	add	r3, r7
 8006fec:	ed83 7b00 	vstr	d7, [r3]
    t16_re);
  t19_re += t20_re;
 8006ff0:	f241 3358 	movw	r3, #4952	; 0x1358
 8006ff4:	443b      	add	r3, r7
 8006ff6:	ed93 6b00 	vldr	d6, [r3]
 8006ffa:	f241 3348 	movw	r3, #4936	; 0x1348
 8006ffe:	443b      	add	r3, r7
 8007000:	ed93 7b00 	vldr	d7, [r3]
 8007004:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007008:	f241 3358 	movw	r3, #4952	; 0x1358
 800700c:	443b      	add	r3, r7
 800700e:	ed83 7b00 	vstr	d7, [r3]
  t19_im += t20_im;
 8007012:	f241 3350 	movw	r3, #4944	; 0x1350
 8007016:	443b      	add	r3, r7
 8007018:	ed93 6b00 	vldr	d6, [r3]
 800701c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8007020:	ed93 7b00 	vldr	d7, [r3]
 8007024:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007028:	f241 3350 	movw	r3, #4944	; 0x1350
 800702c:	443b      	add	r3, r7
 800702e:	ed83 7b00 	vstr	d7, [r3]
  if (t25.im == 0.0) {
 8007032:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8007036:	ed93 7b02 	vldr	d7, [r3, #8]
 800703a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800703e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007042:	d116      	bne.n	8007072 <G_q+0x4c52>
    t13_re = t25.re / 2.0;
 8007044:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8007048:	ed93 6b00 	vldr	d6, [r3]
 800704c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007050:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007054:	f241 3378 	movw	r3, #4984	; 0x1378
 8007058:	443b      	add	r3, r7
 800705a:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 800705e:	f04f 0300 	mov.w	r3, #0
 8007062:	f04f 0400 	mov.w	r4, #0
 8007066:	f241 3270 	movw	r2, #4976	; 0x1370
 800706a:	443a      	add	r2, r7
 800706c:	e9c2 3400 	strd	r3, r4, [r2]
 8007070:	e039      	b.n	80070e6 <G_q+0x4cc6>
  } else if (t25.re == 0.0) {
 8007072:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8007076:	ed93 7b00 	vldr	d7, [r3]
 800707a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800707e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007082:	d116      	bne.n	80070b2 <G_q+0x4c92>
    t13_re = 0.0;
 8007084:	f04f 0300 	mov.w	r3, #0
 8007088:	f04f 0400 	mov.w	r4, #0
 800708c:	f241 3278 	movw	r2, #4984	; 0x1378
 8007090:	443a      	add	r2, r7
 8007092:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t25.im / 2.0;
 8007096:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 800709a:	ed93 6b02 	vldr	d6, [r3, #8]
 800709e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80070a2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80070a6:	f241 3370 	movw	r3, #4976	; 0x1370
 80070aa:	443b      	add	r3, r7
 80070ac:	ed83 7b00 	vstr	d7, [r3]
 80070b0:	e019      	b.n	80070e6 <G_q+0x4cc6>
  } else {
    t13_re = t25.re / 2.0;
 80070b2:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 80070b6:	ed93 6b00 	vldr	d6, [r3]
 80070ba:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80070be:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80070c2:	f241 3378 	movw	r3, #4984	; 0x1378
 80070c6:	443b      	add	r3, r7
 80070c8:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t25.im / 2.0;
 80070cc:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 80070d0:	ed93 6b02 	vldr	d6, [r3, #8]
 80070d4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80070d8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80070dc:	f241 3370 	movw	r3, #4976	; 0x1370
 80070e0:	443b      	add	r3, r7
 80070e2:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t26.im == 0.0) {
 80070e6:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80070ea:	ed93 7b02 	vldr	d7, [r3, #8]
 80070ee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80070f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070f6:	d116      	bne.n	8007126 <G_q+0x4d06>
    t34_re = t26.re / 2.0;
 80070f8:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80070fc:	ed93 6b00 	vldr	d6, [r3]
 8007100:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007104:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007108:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800710c:	443b      	add	r3, r7
 800710e:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8007112:	f04f 0300 	mov.w	r3, #0
 8007116:	f04f 0400 	mov.w	r4, #0
 800711a:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800711e:	443a      	add	r2, r7
 8007120:	e9c2 3400 	strd	r3, r4, [r2]
 8007124:	e03c      	b.n	80071a0 <G_q+0x4d80>
  } else if (t26.re == 0.0) {
 8007126:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800712a:	ed93 7b00 	vldr	d7, [r3]
 800712e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007136:	d119      	bne.n	800716c <G_q+0x4d4c>
    t34_re = 0.0;
 8007138:	f04f 0300 	mov.w	r3, #0
 800713c:	f04f 0400 	mov.w	r4, #0
 8007140:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8007144:	443a      	add	r2, r7
 8007146:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t26.im / 2.0;
 800714a:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800714e:	ed93 6b02 	vldr	d6, [r3, #8]
 8007152:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007156:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800715a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800715e:	443b      	add	r3, r7
 8007160:	ed83 7b00 	vstr	d7, [r3]
 8007164:	e01c      	b.n	80071a0 <G_q+0x4d80>
 8007166:	bf00      	nop
 8007168:	ffffed50 	.word	0xffffed50
  } else {
    t34_re = t26.re / 2.0;
 800716c:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8007170:	ed93 6b00 	vldr	d6, [r3]
 8007174:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007178:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800717c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8007180:	443b      	add	r3, r7
 8007182:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t26.im / 2.0;
 8007186:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800718a:	ed93 6b02 	vldr	d6, [r3, #8]
 800718e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007192:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007196:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800719a:	443b      	add	r3, r7
 800719c:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re = (t27.re * 0.0 - t27.im * 3.061616997868383E-17) - (t28.re * 0.0 -
 80071a0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80071a4:	ed93 7b00 	vldr	d7, [r3]
 80071a8:	ed9f 6bf1 	vldr	d6, [pc, #964]	; 8007570 <G_q+0x5150>
 80071ac:	ee27 6b06 	vmul.f64	d6, d7, d6
 80071b0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80071b4:	ed93 7b02 	vldr	d7, [r3, #8]
 80071b8:	ed9f 5bef 	vldr	d5, [pc, #956]	; 8007578 <G_q+0x5158>
 80071bc:	ee27 7b05 	vmul.f64	d7, d7, d5
 80071c0:	ee36 6b47 	vsub.f64	d6, d6, d7
 80071c4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80071c8:	ed93 7b00 	vldr	d7, [r3]
 80071cc:	ed9f 5be8 	vldr	d5, [pc, #928]	; 8007570 <G_q+0x5150>
 80071d0:	ee27 5b05 	vmul.f64	d5, d7, d5
    t28.im * 3.061616997868383E-17);
 80071d4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80071d8:	ed93 7b02 	vldr	d7, [r3, #8]
 80071dc:	ed9f 4be6 	vldr	d4, [pc, #920]	; 8007578 <G_q+0x5158>
 80071e0:	ee27 7b04 	vmul.f64	d7, d7, d4
  t16_re = (t27.re * 0.0 - t27.im * 3.061616997868383E-17) - (t28.re * 0.0 -
 80071e4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80071e8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80071ec:	f241 3368 	movw	r3, #4968	; 0x1368
 80071f0:	443b      	add	r3, r7
 80071f2:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t27.re * 3.061616997868383E-17 + t27.im * 0.0) - (t28.re *
 80071f6:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80071fa:	ed93 7b00 	vldr	d7, [r3]
 80071fe:	ed9f 6bde 	vldr	d6, [pc, #888]	; 8007578 <G_q+0x5158>
 8007202:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007206:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800720a:	ed93 7b02 	vldr	d7, [r3, #8]
 800720e:	ed9f 5bd8 	vldr	d5, [pc, #864]	; 8007570 <G_q+0x5150>
 8007212:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007216:	ee36 6b07 	vadd.f64	d6, d6, d7
 800721a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800721e:	ed93 7b00 	vldr	d7, [r3]
 8007222:	ed9f 5bd5 	vldr	d5, [pc, #852]	; 8007578 <G_q+0x5158>
 8007226:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t28.im * 0.0);
 800722a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800722e:	ed93 7b02 	vldr	d7, [r3, #8]
 8007232:	ed9f 4bcf 	vldr	d4, [pc, #828]	; 8007570 <G_q+0x5150>
 8007236:	ee27 7b04 	vmul.f64	d7, d7, d4
 800723a:	ee35 7b07 	vadd.f64	d7, d5, d7
  t16_im = (t27.re * 3.061616997868383E-17 + t27.im * 0.0) - (t28.re *
 800723e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007242:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8007246:	ed83 7b00 	vstr	d7, [r3]
  t13_re += t34_re;
 800724a:	f241 3378 	movw	r3, #4984	; 0x1378
 800724e:	443b      	add	r3, r7
 8007250:	ed93 6b00 	vldr	d6, [r3]
 8007254:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8007258:	443b      	add	r3, r7
 800725a:	ed93 7b00 	vldr	d7, [r3]
 800725e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007262:	f241 3378 	movw	r3, #4984	; 0x1378
 8007266:	443b      	add	r3, r7
 8007268:	ed83 7b00 	vstr	d7, [r3]
  t13_im += t34_im;
 800726c:	f241 3370 	movw	r3, #4976	; 0x1370
 8007270:	443b      	add	r3, r7
 8007272:	ed93 6b00 	vldr	d6, [r3]
 8007276:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800727a:	443b      	add	r3, r7
 800727c:	ed93 7b00 	vldr	d7, [r3]
 8007280:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007284:	f241 3370 	movw	r3, #4976	; 0x1370
 8007288:	443b      	add	r3, r7
 800728a:	ed83 7b00 	vstr	d7, [r3]
  t34_re = t31.re * 3.061616997868383E-17 + t32.re * 3.061616997868383E-17;
 800728e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007292:	ed93 7b00 	vldr	d7, [r3]
 8007296:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 8007578 <G_q+0x5158>
 800729a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800729e:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80072a2:	ed93 7b00 	vldr	d7, [r3]
 80072a6:	ed9f 5bb4 	vldr	d5, [pc, #720]	; 8007578 <G_q+0x5158>
 80072aa:	ee27 7b05 	vmul.f64	d7, d7, d5
 80072ae:	ee36 7b07 	vadd.f64	d7, d6, d7
 80072b2:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80072b6:	443b      	add	r3, r7
 80072b8:	ed83 7b00 	vstr	d7, [r3]
  t34_im = t31.im * 3.061616997868383E-17 + t32.im * 3.061616997868383E-17;
 80072bc:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80072c0:	ed93 7b02 	vldr	d7, [r3, #8]
 80072c4:	ed9f 6bac 	vldr	d6, [pc, #688]	; 8007578 <G_q+0x5158>
 80072c8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80072cc:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80072d0:	ed93 7b02 	vldr	d7, [r3, #8]
 80072d4:	ed9f 5ba8 	vldr	d5, [pc, #672]	; 8007578 <G_q+0x5158>
 80072d8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80072dc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80072e0:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80072e4:	443b      	add	r3, r7
 80072e6:	ed83 7b00 	vstr	d7, [r3]
  t12_re = (t29.re * 0.0 - t29.im * 0.5) - (t30.re * 0.0 - t30.im * 0.5);
 80072ea:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 80072ee:	ed93 7b00 	vldr	d7, [r3]
 80072f2:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 8007570 <G_q+0x5150>
 80072f6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80072fa:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 80072fe:	ed93 7b02 	vldr	d7, [r3, #8]
 8007302:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007306:	ee27 7b05 	vmul.f64	d7, d7, d5
 800730a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800730e:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8007312:	ed93 7b00 	vldr	d7, [r3]
 8007316:	ed9f 5b96 	vldr	d5, [pc, #600]	; 8007570 <G_q+0x5150>
 800731a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800731e:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8007322:	ed93 7b02 	vldr	d7, [r3, #8]
 8007326:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800732a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800732e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007332:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007336:	f241 3388 	movw	r3, #5000	; 0x1388
 800733a:	443b      	add	r3, r7
 800733c:	ed83 7b00 	vstr	d7, [r3]
  t12_im = (t29.re * 0.5 + t29.im * 0.0) - (t30.re * 0.5 + t30.im * 0.0);
 8007340:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 8007344:	ed93 7b00 	vldr	d7, [r3]
 8007348:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800734c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007350:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 8007354:	ed93 7b02 	vldr	d7, [r3, #8]
 8007358:	ed9f 5b85 	vldr	d5, [pc, #532]	; 8007570 <G_q+0x5150>
 800735c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007360:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007364:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8007368:	ed93 7b00 	vldr	d7, [r3]
 800736c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007370:	ee27 5b05 	vmul.f64	d5, d7, d5
 8007374:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8007378:	ed93 7b02 	vldr	d7, [r3, #8]
 800737c:	ed9f 4b7c 	vldr	d4, [pc, #496]	; 8007570 <G_q+0x5150>
 8007380:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007384:	ee35 7b07 	vadd.f64	d7, d5, d7
 8007388:	ee36 7b47 	vsub.f64	d7, d6, d7
 800738c:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8007390:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t21.re * 0.0 - t21.im * 0.5) - (t22.re * 0.0 - t22.im * 0.5);
 8007394:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007398:	ed93 7b00 	vldr	d7, [r3]
 800739c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8007570 <G_q+0x5150>
 80073a0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80073a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073a8:	ed93 7b02 	vldr	d7, [r3, #8]
 80073ac:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80073b0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80073b4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80073b8:	4b73      	ldr	r3, [pc, #460]	; (8007588 <G_q+0x5168>)
 80073ba:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80073be:	443a      	add	r2, r7
 80073c0:	4413      	add	r3, r2
 80073c2:	ed93 7b00 	vldr	d7, [r3]
 80073c6:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8007570 <G_q+0x5150>
 80073ca:	ee27 5b05 	vmul.f64	d5, d7, d5
 80073ce:	4b6e      	ldr	r3, [pc, #440]	; (8007588 <G_q+0x5168>)
 80073d0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80073d4:	443a      	add	r2, r7
 80073d6:	4413      	add	r3, r2
 80073d8:	ed93 7b02 	vldr	d7, [r3, #8]
 80073dc:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80073e0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80073e4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80073e8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80073ec:	f241 3348 	movw	r3, #4936	; 0x1348
 80073f0:	443b      	add	r3, r7
 80073f2:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t21.re * 0.5 + t21.im * 0.0) - (t22.re * 0.5 + t22.im * 0.0);
 80073f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073fa:	ed93 7b00 	vldr	d7, [r3]
 80073fe:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8007402:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007406:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800740a:	ed93 7b02 	vldr	d7, [r3, #8]
 800740e:	ed9f 5b58 	vldr	d5, [pc, #352]	; 8007570 <G_q+0x5150>
 8007412:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007416:	ee36 6b07 	vadd.f64	d6, d6, d7
 800741a:	4b5b      	ldr	r3, [pc, #364]	; (8007588 <G_q+0x5168>)
 800741c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007420:	443a      	add	r2, r7
 8007422:	4413      	add	r3, r2
 8007424:	ed93 7b00 	vldr	d7, [r3]
 8007428:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800742c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8007430:	4b55      	ldr	r3, [pc, #340]	; (8007588 <G_q+0x5168>)
 8007432:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007436:	443a      	add	r2, r7
 8007438:	4413      	add	r3, r2
 800743a:	ed93 7b02 	vldr	d7, [r3, #8]
 800743e:	ed9f 4b4c 	vldr	d4, [pc, #304]	; 8007570 <G_q+0x5150>
 8007442:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007446:	ee35 7b07 	vadd.f64	d7, d5, d7
 800744a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800744e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8007452:	ed83 7b00 	vstr	d7, [r3]
  t23_re = (((t23.re * 0.0 - t23.im * 6.123233995736766E-17) - (t24.re * 0.0 -
 8007456:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 800745a:	ed93 7b00 	vldr	d7, [r3]
 800745e:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8007570 <G_q+0x5150>
 8007462:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007466:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 800746a:	ed93 7b02 	vldr	d7, [r3, #8]
 800746e:	ed9f 5b44 	vldr	d5, [pc, #272]	; 8007580 <G_q+0x5160>
 8007472:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007476:	ee36 6b47 	vsub.f64	d6, d6, d7
 800747a:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 800747e:	ed93 7b00 	vldr	d7, [r3]
 8007482:	ed9f 5b3b 	vldr	d5, [pc, #236]	; 8007570 <G_q+0x5150>
 8007486:	ee27 5b05 	vmul.f64	d5, d7, d5
              t24.im * 6.123233995736766E-17)) - (t16_re * t13_re - t16_im *
 800748a:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 800748e:	ed93 7b02 	vldr	d7, [r3, #8]
 8007492:	ed9f 4b3b 	vldr	d4, [pc, #236]	; 8007580 <G_q+0x5160>
 8007496:	ee27 7b04 	vmul.f64	d7, d7, d4
  t23_re = (((t23.re * 0.0 - t23.im * 6.123233995736766E-17) - (t24.re * 0.0 -
 800749a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800749e:	ee36 6b47 	vsub.f64	d6, d6, d7
              t24.im * 6.123233995736766E-17)) - (t16_re * t13_re - t16_im *
 80074a2:	f241 3368 	movw	r3, #4968	; 0x1368
 80074a6:	443b      	add	r3, r7
 80074a8:	ed93 5b00 	vldr	d5, [r3]
 80074ac:	f241 3378 	movw	r3, #4984	; 0x1378
 80074b0:	443b      	add	r3, r7
 80074b2:	ed93 7b00 	vldr	d7, [r3]
 80074b6:	ee25 5b07 	vmul.f64	d5, d5, d7
 80074ba:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80074be:	ed93 4b00 	vldr	d4, [r3]
 80074c2:	f241 3370 	movw	r3, #4976	; 0x1370
 80074c6:	443b      	add	r3, r7
 80074c8:	ed93 7b00 	vldr	d7, [r3]
 80074cc:	ee24 7b07 	vmul.f64	d7, d4, d7
 80074d0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80074d4:	ee36 6b47 	vsub.f64	d6, d6, d7
             t13_im)) + (t34_re * t12_re - t34_im * t12_im);
 80074d8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80074dc:	443b      	add	r3, r7
 80074de:	ed93 5b00 	vldr	d5, [r3]
 80074e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80074e6:	443b      	add	r3, r7
 80074e8:	ed93 7b00 	vldr	d7, [r3]
 80074ec:	ee25 5b07 	vmul.f64	d5, d5, d7
 80074f0:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80074f4:	443b      	add	r3, r7
 80074f6:	ed93 4b00 	vldr	d4, [r3]
 80074fa:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80074fe:	ed93 7b00 	vldr	d7, [r3]
 8007502:	ee24 7b07 	vmul.f64	d7, d4, d7
 8007506:	ee35 7b47 	vsub.f64	d7, d5, d7
  t23_re = (((t23.re * 0.0 - t23.im * 6.123233995736766E-17) - (t24.re * 0.0 -
 800750a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800750e:	f241 3330 	movw	r3, #4912	; 0x1330
 8007512:	443b      	add	r3, r7
 8007514:	ed83 7b00 	vstr	d7, [r3]
  t34_re = (((t23.re * 6.123233995736766E-17 + t23.im * 0.0) - (t24.re *
 8007518:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 800751c:	ed93 7b00 	vldr	d7, [r3]
 8007520:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8007580 <G_q+0x5160>
 8007524:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007528:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 800752c:	ed93 7b02 	vldr	d7, [r3, #8]
 8007530:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 8007570 <G_q+0x5150>
 8007534:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007538:	ee36 6b07 	vadd.f64	d6, d6, d7
 800753c:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8007540:	ed93 7b00 	vldr	d7, [r3]
 8007544:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 8007580 <G_q+0x5160>
 8007548:	ee27 5b05 	vmul.f64	d5, d7, d5
              6.123233995736766E-17 + t24.im * 0.0)) - (t16_re * t13_im + t16_im
 800754c:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8007550:	ed93 7b02 	vldr	d7, [r3, #8]
 8007554:	ed9f 4b06 	vldr	d4, [pc, #24]	; 8007570 <G_q+0x5150>
 8007558:	ee27 7b04 	vmul.f64	d7, d7, d4
 800755c:	ee35 7b07 	vadd.f64	d7, d5, d7
  t34_re = (((t23.re * 6.123233995736766E-17 + t23.im * 0.0) - (t24.re *
 8007560:	ee36 6b47 	vsub.f64	d6, d6, d7
              6.123233995736766E-17 + t24.im * 0.0)) - (t16_re * t13_im + t16_im
 8007564:	f241 3368 	movw	r3, #4968	; 0x1368
 8007568:	e010      	b.n	800758c <G_q+0x516c>
 800756a:	bf00      	nop
 800756c:	f3af 8000 	nop.w
	...
 8007578:	33145c07 	.word	0x33145c07
 800757c:	3c81a626 	.word	0x3c81a626
 8007580:	33145c07 	.word	0x33145c07
 8007584:	3c91a626 	.word	0x3c91a626
 8007588:	ffffed70 	.word	0xffffed70
 800758c:	443b      	add	r3, r7
 800758e:	ed93 5b00 	vldr	d5, [r3]
 8007592:	f241 3370 	movw	r3, #4976	; 0x1370
 8007596:	443b      	add	r3, r7
 8007598:	ed93 7b00 	vldr	d7, [r3]
 800759c:	ee25 5b07 	vmul.f64	d5, d5, d7
             * t13_re)) + (t34_re * t12_im + t34_im * t12_re);
 80075a0:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80075a4:	ed93 4b00 	vldr	d4, [r3]
 80075a8:	f241 3378 	movw	r3, #4984	; 0x1378
 80075ac:	443b      	add	r3, r7
 80075ae:	ed93 7b00 	vldr	d7, [r3]
 80075b2:	ee24 7b07 	vmul.f64	d7, d4, d7
              6.123233995736766E-17 + t24.im * 0.0)) - (t16_re * t13_im + t16_im
 80075b6:	ee35 7b07 	vadd.f64	d7, d5, d7
 80075ba:	ee36 6b47 	vsub.f64	d6, d6, d7
             * t13_re)) + (t34_re * t12_im + t34_im * t12_re);
 80075be:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80075c2:	443b      	add	r3, r7
 80075c4:	ed93 5b00 	vldr	d5, [r3]
 80075c8:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80075cc:	ed93 7b00 	vldr	d7, [r3]
 80075d0:	ee25 5b07 	vmul.f64	d5, d5, d7
 80075d4:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80075d8:	443b      	add	r3, r7
 80075da:	ed93 4b00 	vldr	d4, [r3]
 80075de:	f241 3388 	movw	r3, #5000	; 0x1388
 80075e2:	443b      	add	r3, r7
 80075e4:	ed93 7b00 	vldr	d7, [r3]
 80075e8:	ee24 7b07 	vmul.f64	d7, d4, d7
 80075ec:	ee35 7b07 	vadd.f64	d7, d5, d7
  t34_re = (((t23.re * 6.123233995736766E-17 + t23.im * 0.0) - (t24.re *
 80075f0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80075f4:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80075f8:	443b      	add	r3, r7
 80075fa:	ed83 7b00 	vstr	d7, [r3]
  t54_re = (t54.re * 0.0 - t54.im * 0.5) - (t55.re * 0.0 - t55.im * 0.5);
 80075fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007602:	ed93 7b00 	vldr	d7, [r3]
 8007606:	ed9f 6be4 	vldr	d6, [pc, #912]	; 8007998 <G_q+0x5578>
 800760a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800760e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007612:	ed93 7b02 	vldr	d7, [r3, #8]
 8007616:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800761a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800761e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007622:	4bdf      	ldr	r3, [pc, #892]	; (80079a0 <G_q+0x5580>)
 8007624:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007628:	443a      	add	r2, r7
 800762a:	4413      	add	r3, r2
 800762c:	ed93 7b00 	vldr	d7, [r3]
 8007630:	ed9f 5bd9 	vldr	d5, [pc, #868]	; 8007998 <G_q+0x5578>
 8007634:	ee27 5b05 	vmul.f64	d5, d7, d5
 8007638:	4bd9      	ldr	r3, [pc, #868]	; (80079a0 <G_q+0x5580>)
 800763a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800763e:	443a      	add	r2, r7
 8007640:	4413      	add	r3, r2
 8007642:	ed93 7b02 	vldr	d7, [r3, #8]
 8007646:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800764a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800764e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007652:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007656:	f241 3328 	movw	r3, #4904	; 0x1328
 800765a:	443b      	add	r3, r7
 800765c:	ed83 7b00 	vstr	d7, [r3]
  t54_im = (t54.re * 0.5 + t54.im * 0.0) - (t55.re * 0.5 + t55.im * 0.0);
 8007660:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007664:	ed93 7b00 	vldr	d7, [r3]
 8007668:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800766c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007670:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007674:	ed93 7b02 	vldr	d7, [r3, #8]
 8007678:	ed9f 5bc7 	vldr	d5, [pc, #796]	; 8007998 <G_q+0x5578>
 800767c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007680:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007684:	4bc6      	ldr	r3, [pc, #792]	; (80079a0 <G_q+0x5580>)
 8007686:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800768a:	443a      	add	r2, r7
 800768c:	4413      	add	r3, r2
 800768e:	ed93 7b00 	vldr	d7, [r3]
 8007692:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007696:	ee27 5b05 	vmul.f64	d5, d7, d5
 800769a:	4bc1      	ldr	r3, [pc, #772]	; (80079a0 <G_q+0x5580>)
 800769c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80076a0:	443a      	add	r2, r7
 80076a2:	4413      	add	r3, r2
 80076a4:	ed93 7b02 	vldr	d7, [r3, #8]
 80076a8:	ed9f 4bbb 	vldr	d4, [pc, #748]	; 8007998 <G_q+0x5578>
 80076ac:	ee27 7b04 	vmul.f64	d7, d7, d4
 80076b0:	ee35 7b07 	vadd.f64	d7, d5, d7
 80076b4:	f241 2378 	movw	r3, #4728	; 0x1278
 80076b8:	443b      	add	r3, r7
 80076ba:	ee36 7b47 	vsub.f64	d7, d6, d7
 80076be:	ed83 7b00 	vstr	d7, [r3]
  t10_re = (b_t10_re * t19_re - t10_im * t19_im) + (t20_re * t23_re - t20_im *
 80076c2:	f241 3338 	movw	r3, #4920	; 0x1338
 80076c6:	443b      	add	r3, r7
 80076c8:	ed93 6b00 	vldr	d6, [r3]
 80076cc:	f241 3358 	movw	r3, #4952	; 0x1358
 80076d0:	443b      	add	r3, r7
 80076d2:	ed93 7b00 	vldr	d7, [r3]
 80076d6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80076da:	f241 3390 	movw	r3, #5008	; 0x1390
 80076de:	443b      	add	r3, r7
 80076e0:	ed93 5b00 	vldr	d5, [r3]
 80076e4:	f241 3350 	movw	r3, #4944	; 0x1350
 80076e8:	443b      	add	r3, r7
 80076ea:	ed93 7b00 	vldr	d7, [r3]
 80076ee:	ee25 7b07 	vmul.f64	d7, d5, d7
 80076f2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80076f6:	f241 3348 	movw	r3, #4936	; 0x1348
 80076fa:	443b      	add	r3, r7
 80076fc:	ed93 5b00 	vldr	d5, [r3]
 8007700:	f241 3330 	movw	r3, #4912	; 0x1330
 8007704:	443b      	add	r3, r7
 8007706:	ed93 7b00 	vldr	d7, [r3]
 800770a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800770e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8007712:	ed93 4b00 	vldr	d4, [r3]
 8007716:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800771a:	443b      	add	r3, r7
 800771c:	ed93 7b00 	vldr	d7, [r3]
 8007720:	ee24 7b07 	vmul.f64	d7, d4, d7
 8007724:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007728:	ee36 7b07 	vadd.f64	d7, d6, d7
 800772c:	f241 3398 	movw	r3, #5016	; 0x1398
 8007730:	443b      	add	r3, r7
 8007732:	ed83 7b00 	vstr	d7, [r3]
    t34_re);
  t10_im = (b_t10_re * t19_im + t10_im * t19_re) + (t20_re * t34_re + t20_im *
 8007736:	f241 3338 	movw	r3, #4920	; 0x1338
 800773a:	443b      	add	r3, r7
 800773c:	ed93 6b00 	vldr	d6, [r3]
 8007740:	f241 3350 	movw	r3, #4944	; 0x1350
 8007744:	443b      	add	r3, r7
 8007746:	ed93 7b00 	vldr	d7, [r3]
 800774a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800774e:	f241 3390 	movw	r3, #5008	; 0x1390
 8007752:	443b      	add	r3, r7
 8007754:	ed93 5b00 	vldr	d5, [r3]
 8007758:	f241 3358 	movw	r3, #4952	; 0x1358
 800775c:	443b      	add	r3, r7
 800775e:	ed93 7b00 	vldr	d7, [r3]
 8007762:	ee25 7b07 	vmul.f64	d7, d5, d7
 8007766:	ee36 6b07 	vadd.f64	d6, d6, d7
 800776a:	f241 3348 	movw	r3, #4936	; 0x1348
 800776e:	443b      	add	r3, r7
 8007770:	ed93 5b00 	vldr	d5, [r3]
 8007774:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8007778:	443b      	add	r3, r7
 800777a:	ed93 7b00 	vldr	d7, [r3]
 800777e:	ee25 5b07 	vmul.f64	d5, d5, d7
 8007782:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8007786:	ed93 4b00 	vldr	d4, [r3]
 800778a:	f241 3330 	movw	r3, #4912	; 0x1330
 800778e:	443b      	add	r3, r7
 8007790:	ed93 7b00 	vldr	d7, [r3]
 8007794:	ee24 7b07 	vmul.f64	d7, d4, d7
 8007798:	ee35 7b07 	vadd.f64	d7, d5, d7
 800779c:	ee36 7b07 	vadd.f64	d7, d6, d7
 80077a0:	f241 3390 	movw	r3, #5008	; 0x1390
 80077a4:	443b      	add	r3, r7
 80077a6:	ed83 7b00 	vstr	d7, [r3]
    t23_re);
  t13_re = (t8.re * 0.0 - t8.im * 0.5) - (t9.re * 0.0 - t9.im * 0.5);
 80077aa:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80077ae:	ed93 7b00 	vldr	d7, [r3]
 80077b2:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8007998 <G_q+0x5578>
 80077b6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80077ba:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80077be:	ed93 7b02 	vldr	d7, [r3, #8]
 80077c2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80077c6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80077ca:	ee36 6b47 	vsub.f64	d6, d6, d7
 80077ce:	4b75      	ldr	r3, [pc, #468]	; (80079a4 <G_q+0x5584>)
 80077d0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80077d4:	443a      	add	r2, r7
 80077d6:	4413      	add	r3, r2
 80077d8:	ed93 7b00 	vldr	d7, [r3]
 80077dc:	ed9f 5b6e 	vldr	d5, [pc, #440]	; 8007998 <G_q+0x5578>
 80077e0:	ee27 5b05 	vmul.f64	d5, d7, d5
 80077e4:	4b6f      	ldr	r3, [pc, #444]	; (80079a4 <G_q+0x5584>)
 80077e6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80077ea:	443a      	add	r2, r7
 80077ec:	4413      	add	r3, r2
 80077ee:	ed93 7b02 	vldr	d7, [r3, #8]
 80077f2:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80077f6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80077fa:	ee35 7b47 	vsub.f64	d7, d5, d7
 80077fe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007802:	f241 3378 	movw	r3, #4984	; 0x1378
 8007806:	443b      	add	r3, r7
 8007808:	ed83 7b00 	vstr	d7, [r3]
  t8_im = (t8.re * 0.5 + t8.im * 0.0) - (t9.re * 0.5 + t9.im * 0.0);
 800780c:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8007810:	ed93 7b00 	vldr	d7, [r3]
 8007814:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8007818:	ee27 6b06 	vmul.f64	d6, d7, d6
 800781c:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8007820:	ed93 7b02 	vldr	d7, [r3, #8]
 8007824:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 8007998 <G_q+0x5578>
 8007828:	ee27 7b05 	vmul.f64	d7, d7, d5
 800782c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007830:	4b5c      	ldr	r3, [pc, #368]	; (80079a4 <G_q+0x5584>)
 8007832:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007836:	443a      	add	r2, r7
 8007838:	4413      	add	r3, r2
 800783a:	ed93 7b00 	vldr	d7, [r3]
 800783e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007842:	ee27 5b05 	vmul.f64	d5, d7, d5
 8007846:	4b57      	ldr	r3, [pc, #348]	; (80079a4 <G_q+0x5584>)
 8007848:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800784c:	443a      	add	r2, r7
 800784e:	4413      	add	r3, r2
 8007850:	ed93 7b02 	vldr	d7, [r3, #8]
 8007854:	ed9f 4b50 	vldr	d4, [pc, #320]	; 8007998 <G_q+0x5578>
 8007858:	ee27 7b04 	vmul.f64	d7, d7, d4
 800785c:	ee35 7b07 	vadd.f64	d7, d5, d7
 8007860:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007864:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8007868:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t5.re * 0.0 - t5.im * 0.5) - (t6.re * 0.0 - t6.im * 0.5);
 800786c:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8007870:	ed93 7b00 	vldr	d7, [r3]
 8007874:	ed9f 6b48 	vldr	d6, [pc, #288]	; 8007998 <G_q+0x5578>
 8007878:	ee27 6b06 	vmul.f64	d6, d7, d6
 800787c:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8007880:	ed93 7b02 	vldr	d7, [r3, #8]
 8007884:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007888:	ee27 7b05 	vmul.f64	d7, d7, d5
 800788c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007890:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8007894:	ed93 7b00 	vldr	d7, [r3]
 8007898:	ed9f 5b3f 	vldr	d5, [pc, #252]	; 8007998 <G_q+0x5578>
 800789c:	ee27 5b05 	vmul.f64	d5, d7, d5
 80078a0:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80078a4:	ed93 7b02 	vldr	d7, [r3, #8]
 80078a8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80078ac:	ee27 7b04 	vmul.f64	d7, d7, d4
 80078b0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80078b4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80078b8:	f241 3370 	movw	r3, #4976	; 0x1370
 80078bc:	443b      	add	r3, r7
 80078be:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t5.re * 0.5 + t5.im * 0.0) - (t6.re * 0.5 + t6.im * 0.0);
 80078c2:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 80078c6:	ed93 7b00 	vldr	d7, [r3]
 80078ca:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80078ce:	ee27 6b06 	vmul.f64	d6, d7, d6
 80078d2:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 80078d6:	ed93 7b02 	vldr	d7, [r3, #8]
 80078da:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8007998 <G_q+0x5578>
 80078de:	ee27 7b05 	vmul.f64	d7, d7, d5
 80078e2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80078e6:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80078ea:	ed93 7b00 	vldr	d7, [r3]
 80078ee:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80078f2:	ee27 5b05 	vmul.f64	d5, d7, d5
 80078f6:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80078fa:	ed93 7b02 	vldr	d7, [r3, #8]
 80078fe:	ed9f 4b26 	vldr	d4, [pc, #152]	; 8007998 <G_q+0x5578>
 8007902:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007906:	ee35 7b07 	vadd.f64	d7, d5, d7
 800790a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800790e:	f241 3368 	movw	r3, #4968	; 0x1368
 8007912:	443b      	add	r3, r7
 8007914:	ed83 7b00 	vstr	d7, [r3]
  if (t8.im == 0.0) {
 8007918:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800791c:	ed93 7b02 	vldr	d7, [r3, #8]
 8007920:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007928:	d115      	bne.n	8007956 <G_q+0x5536>
    t16_im = t8.re / 2.0;
 800792a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800792e:	ed93 6b00 	vldr	d6, [r3]
 8007932:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007936:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800793a:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800793e:	ed83 7b00 	vstr	d7, [r3]
    t20_re = 0.0;
 8007942:	f04f 0300 	mov.w	r3, #0
 8007946:	f04f 0400 	mov.w	r4, #0
 800794a:	f241 3248 	movw	r2, #4936	; 0x1348
 800794e:	443a      	add	r2, r7
 8007950:	e9c2 3400 	strd	r3, r4, [r2]
 8007954:	e041      	b.n	80079da <G_q+0x55ba>
  } else if (t8.re == 0.0) {
 8007956:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800795a:	ed93 7b00 	vldr	d7, [r3]
 800795e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007966:	d11f      	bne.n	80079a8 <G_q+0x5588>
    t16_im = 0.0;
 8007968:	f04f 0300 	mov.w	r3, #0
 800796c:	f04f 0400 	mov.w	r4, #0
 8007970:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8007974:	e9c2 3400 	strd	r3, r4, [r2]
    t20_re = t8.im / 2.0;
 8007978:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800797c:	ed93 6b02 	vldr	d6, [r3, #8]
 8007980:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007984:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007988:	f241 3348 	movw	r3, #4936	; 0x1348
 800798c:	443b      	add	r3, r7
 800798e:	ed83 7b00 	vstr	d7, [r3]
 8007992:	e022      	b.n	80079da <G_q+0x55ba>
 8007994:	f3af 8000 	nop.w
	...
 80079a0:	ffffec70 	.word	0xffffec70
 80079a4:	ffffeff0 	.word	0xffffeff0
  } else {
    t16_im = t8.re / 2.0;
 80079a8:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80079ac:	ed93 6b00 	vldr	d6, [r3]
 80079b0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80079b4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80079b8:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80079bc:	ed83 7b00 	vstr	d7, [r3]
    t20_re = t8.im / 2.0;
 80079c0:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80079c4:	ed93 6b02 	vldr	d6, [r3, #8]
 80079c8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80079cc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80079d0:	f241 3348 	movw	r3, #4936	; 0x1348
 80079d4:	443b      	add	r3, r7
 80079d6:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t85.im == 0.0) {
 80079da:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80079de:	ed93 7b02 	vldr	d7, [r3, #8]
 80079e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80079e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079ea:	d115      	bne.n	8007a18 <G_q+0x55f8>
    t12_im = t85.re / 2.0;
 80079ec:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80079f0:	ed93 6b00 	vldr	d6, [r3]
 80079f4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80079f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80079fc:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8007a00:	ed83 7b00 	vstr	d7, [r3]
    t85_im = 0.0;
 8007a04:	f04f 0300 	mov.w	r3, #0
 8007a08:	f04f 0400 	mov.w	r4, #0
 8007a0c:	f241 3218 	movw	r2, #4888	; 0x1318
 8007a10:	443a      	add	r2, r7
 8007a12:	e9c2 3400 	strd	r3, r4, [r2]
 8007a16:	e037      	b.n	8007a88 <G_q+0x5668>
  } else if (t85.re == 0.0) {
 8007a18:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8007a1c:	ed93 7b00 	vldr	d7, [r3]
 8007a20:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a28:	d115      	bne.n	8007a56 <G_q+0x5636>
    t12_im = 0.0;
 8007a2a:	f04f 0300 	mov.w	r3, #0
 8007a2e:	f04f 0400 	mov.w	r4, #0
 8007a32:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8007a36:	e9c2 3400 	strd	r3, r4, [r2]
    t85_im = t85.im / 2.0;
 8007a3a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8007a3e:	ed93 6b02 	vldr	d6, [r3, #8]
 8007a42:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007a46:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007a4a:	f241 3318 	movw	r3, #4888	; 0x1318
 8007a4e:	443b      	add	r3, r7
 8007a50:	ed83 7b00 	vstr	d7, [r3]
 8007a54:	e018      	b.n	8007a88 <G_q+0x5668>
  } else {
    t12_im = t85.re / 2.0;
 8007a56:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8007a5a:	ed93 6b00 	vldr	d6, [r3]
 8007a5e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007a62:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007a66:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8007a6a:	ed83 7b00 	vstr	d7, [r3]
    t85_im = t85.im / 2.0;
 8007a6e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8007a72:	ed93 6b02 	vldr	d6, [r3, #8]
 8007a76:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007a7a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007a7e:	f241 3318 	movw	r3, #4888	; 0x1318
 8007a82:	443b      	add	r3, r7
 8007a84:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t3.im == 0.0) {
 8007a88:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8007a8c:	ed93 7b02 	vldr	d7, [r3, #8]
 8007a90:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a98:	d115      	bne.n	8007ac6 <G_q+0x56a6>
    t20_im = t3.re / 2.0;
 8007a9a:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8007a9e:	ed93 6b00 	vldr	d6, [r3]
 8007aa2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007aa6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007aaa:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8007aae:	ed83 7b00 	vstr	d7, [r3]
    t3_im = 0.0;
 8007ab2:	f04f 0300 	mov.w	r3, #0
 8007ab6:	f04f 0400 	mov.w	r4, #0
 8007aba:	f241 3210 	movw	r2, #4880	; 0x1310
 8007abe:	443a      	add	r2, r7
 8007ac0:	e9c2 3400 	strd	r3, r4, [r2]
 8007ac4:	e037      	b.n	8007b36 <G_q+0x5716>
  } else if (t3.re == 0.0) {
 8007ac6:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8007aca:	ed93 7b00 	vldr	d7, [r3]
 8007ace:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ad6:	d115      	bne.n	8007b04 <G_q+0x56e4>
    t20_im = 0.0;
 8007ad8:	f04f 0300 	mov.w	r3, #0
 8007adc:	f04f 0400 	mov.w	r4, #0
 8007ae0:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8007ae4:	e9c2 3400 	strd	r3, r4, [r2]
    t3_im = t3.im / 2.0;
 8007ae8:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8007aec:	ed93 6b02 	vldr	d6, [r3, #8]
 8007af0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007af4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007af8:	f241 3310 	movw	r3, #4880	; 0x1310
 8007afc:	443b      	add	r3, r7
 8007afe:	ed83 7b00 	vstr	d7, [r3]
 8007b02:	e018      	b.n	8007b36 <G_q+0x5716>
  } else {
    t20_im = t3.re / 2.0;
 8007b04:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8007b08:	ed93 6b00 	vldr	d6, [r3]
 8007b0c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007b10:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007b14:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8007b18:	ed83 7b00 	vstr	d7, [r3]
    t3_im = t3.im / 2.0;
 8007b1c:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8007b20:	ed93 6b02 	vldr	d6, [r3, #8]
 8007b24:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007b28:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007b2c:	f241 3310 	movw	r3, #4880	; 0x1310
 8007b30:	443b      	add	r3, r7
 8007b32:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t4.im == 0.0) {
 8007b36:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8007b3a:	ed93 7b02 	vldr	d7, [r3, #8]
 8007b3e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b46:	d116      	bne.n	8007b76 <G_q+0x5756>
    t34_re = t4.re / 2.0;
 8007b48:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8007b4c:	ed93 6b00 	vldr	d6, [r3]
 8007b50:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007b54:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007b58:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8007b5c:	443b      	add	r3, r7
 8007b5e:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8007b62:	f04f 0300 	mov.w	r3, #0
 8007b66:	f04f 0400 	mov.w	r4, #0
 8007b6a:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8007b6e:	443a      	add	r2, r7
 8007b70:	e9c2 3400 	strd	r3, r4, [r2]
 8007b74:	e039      	b.n	8007bea <G_q+0x57ca>
  } else if (t4.re == 0.0) {
 8007b76:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8007b7a:	ed93 7b00 	vldr	d7, [r3]
 8007b7e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b86:	d116      	bne.n	8007bb6 <G_q+0x5796>
    t34_re = 0.0;
 8007b88:	f04f 0300 	mov.w	r3, #0
 8007b8c:	f04f 0400 	mov.w	r4, #0
 8007b90:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8007b94:	443a      	add	r2, r7
 8007b96:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t4.im / 2.0;
 8007b9a:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8007b9e:	ed93 6b02 	vldr	d6, [r3, #8]
 8007ba2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007ba6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007baa:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8007bae:	443b      	add	r3, r7
 8007bb0:	ed83 7b00 	vstr	d7, [r3]
 8007bb4:	e019      	b.n	8007bea <G_q+0x57ca>
  } else {
    t34_re = t4.re / 2.0;
 8007bb6:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8007bba:	ed93 6b00 	vldr	d6, [r3]
 8007bbe:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007bc2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007bc6:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8007bca:	443b      	add	r3, r7
 8007bcc:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t4.im / 2.0;
 8007bd0:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8007bd4:	ed93 6b02 	vldr	d6, [r3, #8]
 8007bd8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007bdc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007be0:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8007be4:	443b      	add	r3, r7
 8007be6:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_im += t12_im;
 8007bea:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8007bee:	ed93 6b00 	vldr	d6, [r3]
 8007bf2:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8007bf6:	ed93 7b00 	vldr	d7, [r3]
 8007bfa:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007bfe:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8007c02:	ed83 7b00 	vstr	d7, [r3]
  t20_re += t85_im;
 8007c06:	f241 3348 	movw	r3, #4936	; 0x1348
 8007c0a:	443b      	add	r3, r7
 8007c0c:	ed93 6b00 	vldr	d6, [r3]
 8007c10:	f241 3318 	movw	r3, #4888	; 0x1318
 8007c14:	443b      	add	r3, r7
 8007c16:	ed93 7b00 	vldr	d7, [r3]
 8007c1a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007c1e:	f241 3348 	movw	r3, #4936	; 0x1348
 8007c22:	443b      	add	r3, r7
 8007c24:	ed83 7b00 	vstr	d7, [r3]
  t20_im += t34_re;
 8007c28:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8007c2c:	ed93 6b00 	vldr	d6, [r3]
 8007c30:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8007c34:	443b      	add	r3, r7
 8007c36:	ed93 7b00 	vldr	d7, [r3]
 8007c3a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007c3e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8007c42:	ed83 7b00 	vstr	d7, [r3]
  t3_im += t34_im;
 8007c46:	f241 3310 	movw	r3, #4880	; 0x1310
 8007c4a:	443b      	add	r3, r7
 8007c4c:	ed93 6b00 	vldr	d6, [r3]
 8007c50:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8007c54:	443b      	add	r3, r7
 8007c56:	ed93 7b00 	vldr	d7, [r3]
 8007c5a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007c5e:	f241 3310 	movw	r3, #4880	; 0x1310
 8007c62:	443b      	add	r3, r7
 8007c64:	ed83 7b00 	vstr	d7, [r3]
  t19_re_tmp = t87.re * 0.0;
 8007c68:	4bc5      	ldr	r3, [pc, #788]	; (8007f80 <G_q+0x5b60>)
 8007c6a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007c6e:	443a      	add	r2, r7
 8007c70:	4413      	add	r3, r2
 8007c72:	ed93 7b00 	vldr	d7, [r3]
 8007c76:	f241 2370 	movw	r3, #4720	; 0x1270
 8007c7a:	443b      	add	r3, r7
 8007c7c:	ed9f 6bbe 	vldr	d6, [pc, #760]	; 8007f78 <G_q+0x5b58>
 8007c80:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007c84:	ed83 7b00 	vstr	d7, [r3]
  t19_re = (t19.re * 0.0 - t19.im * 0.5) - (t19_re_tmp - t87.im * 0.5);
 8007c88:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c8c:	ed93 7b00 	vldr	d7, [r3]
 8007c90:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8007f78 <G_q+0x5b58>
 8007c94:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007c98:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c9c:	ed93 7b02 	vldr	d7, [r3, #8]
 8007ca0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007ca4:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007ca8:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007cac:	4bb4      	ldr	r3, [pc, #720]	; (8007f80 <G_q+0x5b60>)
 8007cae:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007cb2:	443a      	add	r2, r7
 8007cb4:	4413      	add	r3, r2
 8007cb6:	ed93 7b02 	vldr	d7, [r3, #8]
 8007cba:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007cbe:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007cc2:	f241 2370 	movw	r3, #4720	; 0x1270
 8007cc6:	443b      	add	r3, r7
 8007cc8:	ed93 5b00 	vldr	d5, [r3]
 8007ccc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007cd0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007cd4:	f241 3358 	movw	r3, #4952	; 0x1358
 8007cd8:	443b      	add	r3, r7
 8007cda:	ed83 7b00 	vstr	d7, [r3]
  t19_im_tmp = t87.im * 0.0;
 8007cde:	4ba8      	ldr	r3, [pc, #672]	; (8007f80 <G_q+0x5b60>)
 8007ce0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007ce4:	443a      	add	r2, r7
 8007ce6:	4413      	add	r3, r2
 8007ce8:	ed93 7b02 	vldr	d7, [r3, #8]
 8007cec:	f241 2368 	movw	r3, #4712	; 0x1268
 8007cf0:	443b      	add	r3, r7
 8007cf2:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 8007f78 <G_q+0x5b58>
 8007cf6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007cfa:	ed83 7b00 	vstr	d7, [r3]
  t19_im = (t19.re * 0.5 + t19.im * 0.0) - (t87.re * 0.5 + t19_im_tmp);
 8007cfe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d02:	ed93 7b00 	vldr	d7, [r3]
 8007d06:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8007d0a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007d0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d12:	ed93 7b02 	vldr	d7, [r3, #8]
 8007d16:	ed9f 5b98 	vldr	d5, [pc, #608]	; 8007f78 <G_q+0x5b58>
 8007d1a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007d1e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007d22:	4b97      	ldr	r3, [pc, #604]	; (8007f80 <G_q+0x5b60>)
 8007d24:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007d28:	443a      	add	r2, r7
 8007d2a:	4413      	add	r3, r2
 8007d2c:	ed93 7b00 	vldr	d7, [r3]
 8007d30:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007d34:	ee27 5b05 	vmul.f64	d5, d7, d5
 8007d38:	f241 2368 	movw	r3, #4712	; 0x1268
 8007d3c:	443b      	add	r3, r7
 8007d3e:	ed93 7b00 	vldr	d7, [r3]
 8007d42:	ee35 7b07 	vadd.f64	d7, d5, d7
 8007d46:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007d4a:	f241 3350 	movw	r3, #4944	; 0x1350
 8007d4e:	443b      	add	r3, r7
 8007d50:	ed83 7b00 	vstr	d7, [r3]
  t8_re = (t13_re * t13_im - t8_im * t16_re) + (t16_im * t20_im - t20_re * t3_im);
 8007d54:	f241 3378 	movw	r3, #4984	; 0x1378
 8007d58:	443b      	add	r3, r7
 8007d5a:	ed93 6b00 	vldr	d6, [r3]
 8007d5e:	f241 3370 	movw	r3, #4976	; 0x1370
 8007d62:	443b      	add	r3, r7
 8007d64:	ed93 7b00 	vldr	d7, [r3]
 8007d68:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007d6c:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8007d70:	ed93 5b00 	vldr	d5, [r3]
 8007d74:	f241 3368 	movw	r3, #4968	; 0x1368
 8007d78:	443b      	add	r3, r7
 8007d7a:	ed93 7b00 	vldr	d7, [r3]
 8007d7e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8007d82:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007d86:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8007d8a:	ed93 5b00 	vldr	d5, [r3]
 8007d8e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8007d92:	ed93 7b00 	vldr	d7, [r3]
 8007d96:	ee25 5b07 	vmul.f64	d5, d5, d7
 8007d9a:	f241 3348 	movw	r3, #4936	; 0x1348
 8007d9e:	443b      	add	r3, r7
 8007da0:	ed93 4b00 	vldr	d4, [r3]
 8007da4:	f241 3310 	movw	r3, #4880	; 0x1310
 8007da8:	443b      	add	r3, r7
 8007daa:	ed93 7b00 	vldr	d7, [r3]
 8007dae:	ee24 7b07 	vmul.f64	d7, d4, d7
 8007db2:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007db6:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8007dba:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007dbe:	ed83 7b00 	vstr	d7, [r3]
  t8_im = (t13_re * t16_re + t8_im * t13_im) + (t16_im * t3_im + t20_re * t20_im);
 8007dc2:	f241 3378 	movw	r3, #4984	; 0x1378
 8007dc6:	443b      	add	r3, r7
 8007dc8:	ed93 6b00 	vldr	d6, [r3]
 8007dcc:	f241 3368 	movw	r3, #4968	; 0x1368
 8007dd0:	443b      	add	r3, r7
 8007dd2:	ed93 7b00 	vldr	d7, [r3]
 8007dd6:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007dda:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8007dde:	ed93 5b00 	vldr	d5, [r3]
 8007de2:	f241 3370 	movw	r3, #4976	; 0x1370
 8007de6:	443b      	add	r3, r7
 8007de8:	ed93 7b00 	vldr	d7, [r3]
 8007dec:	ee25 7b07 	vmul.f64	d7, d5, d7
 8007df0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007df4:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8007df8:	ed93 5b00 	vldr	d5, [r3]
 8007dfc:	f241 3310 	movw	r3, #4880	; 0x1310
 8007e00:	443b      	add	r3, r7
 8007e02:	ed93 7b00 	vldr	d7, [r3]
 8007e06:	ee25 5b07 	vmul.f64	d5, d5, d7
 8007e0a:	f241 3348 	movw	r3, #4936	; 0x1348
 8007e0e:	443b      	add	r3, r7
 8007e10:	ed93 4b00 	vldr	d4, [r3]
 8007e14:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8007e18:	ed93 7b00 	vldr	d7, [r3]
 8007e1c:	ee24 7b07 	vmul.f64	d7, d4, d7
 8007e20:	ee35 7b07 	vadd.f64	d7, d5, d7
 8007e24:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007e28:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8007e2c:	ed83 7b00 	vstr	d7, [r3]
  if (t41.im == 0.0) {
 8007e30:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8007e34:	ed93 7b02 	vldr	d7, [r3, #8]
 8007e38:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e40:	d115      	bne.n	8007e6e <G_q+0x5a4e>
    t41_re = t41.re / 2.0;
 8007e42:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8007e46:	ed93 6b00 	vldr	d6, [r3]
 8007e4a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007e4e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007e52:	f241 3308 	movw	r3, #4872	; 0x1308
 8007e56:	443b      	add	r3, r7
 8007e58:	ed83 7b00 	vstr	d7, [r3]
    t41_im = 0.0;
 8007e5c:	f04f 0300 	mov.w	r3, #0
 8007e60:	f04f 0400 	mov.w	r4, #0
 8007e64:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8007e68:	e9c2 3400 	strd	r3, r4, [r2]
 8007e6c:	e037      	b.n	8007ede <G_q+0x5abe>
  } else if (t41.re == 0.0) {
 8007e6e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8007e72:	ed93 7b00 	vldr	d7, [r3]
 8007e76:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e7e:	d115      	bne.n	8007eac <G_q+0x5a8c>
    t41_re = 0.0;
 8007e80:	f04f 0300 	mov.w	r3, #0
 8007e84:	f04f 0400 	mov.w	r4, #0
 8007e88:	f241 3208 	movw	r2, #4872	; 0x1308
 8007e8c:	443a      	add	r2, r7
 8007e8e:	e9c2 3400 	strd	r3, r4, [r2]
    t41_im = t41.im / 2.0;
 8007e92:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8007e96:	ed93 6b02 	vldr	d6, [r3, #8]
 8007e9a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007e9e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007ea2:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8007ea6:	ed83 7b00 	vstr	d7, [r3]
 8007eaa:	e018      	b.n	8007ede <G_q+0x5abe>
  } else {
    t41_re = t41.re / 2.0;
 8007eac:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8007eb0:	ed93 6b00 	vldr	d6, [r3]
 8007eb4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007eb8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007ebc:	f241 3308 	movw	r3, #4872	; 0x1308
 8007ec0:	443b      	add	r3, r7
 8007ec2:	ed83 7b00 	vstr	d7, [r3]
    t41_im = t41.im / 2.0;
 8007ec6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8007eca:	ed93 6b02 	vldr	d6, [r3, #8]
 8007ece:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007ed2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007ed6:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8007eda:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t42.im == 0.0) {
 8007ede:	4b29      	ldr	r3, [pc, #164]	; (8007f84 <G_q+0x5b64>)
 8007ee0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007ee4:	443a      	add	r2, r7
 8007ee6:	4413      	add	r3, r2
 8007ee8:	ed93 7b02 	vldr	d7, [r3, #8]
 8007eec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ef4:	d118      	bne.n	8007f28 <G_q+0x5b08>
    t16_re = t42.re / 2.0;
 8007ef6:	4b23      	ldr	r3, [pc, #140]	; (8007f84 <G_q+0x5b64>)
 8007ef8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007efc:	443a      	add	r2, r7
 8007efe:	4413      	add	r3, r2
 8007f00:	ed93 6b00 	vldr	d6, [r3]
 8007f04:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007f08:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007f0c:	f241 3368 	movw	r3, #4968	; 0x1368
 8007f10:	443b      	add	r3, r7
 8007f12:	ed83 7b00 	vstr	d7, [r3]
    t16_im = 0.0;
 8007f16:	f04f 0300 	mov.w	r3, #0
 8007f1a:	f04f 0400 	mov.w	r4, #0
 8007f1e:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8007f22:	e9c2 3400 	strd	r3, r4, [r2]
 8007f26:	e04e      	b.n	8007fc6 <G_q+0x5ba6>
  } else if (t42.re == 0.0) {
 8007f28:	4b16      	ldr	r3, [pc, #88]	; (8007f84 <G_q+0x5b64>)
 8007f2a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007f2e:	443a      	add	r2, r7
 8007f30:	4413      	add	r3, r2
 8007f32:	ed93 7b00 	vldr	d7, [r3]
 8007f36:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f3e:	d123      	bne.n	8007f88 <G_q+0x5b68>
    t16_re = 0.0;
 8007f40:	f04f 0300 	mov.w	r3, #0
 8007f44:	f04f 0400 	mov.w	r4, #0
 8007f48:	f241 3268 	movw	r2, #4968	; 0x1368
 8007f4c:	443a      	add	r2, r7
 8007f4e:	e9c2 3400 	strd	r3, r4, [r2]
    t16_im = t42.im / 2.0;
 8007f52:	4b0c      	ldr	r3, [pc, #48]	; (8007f84 <G_q+0x5b64>)
 8007f54:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007f58:	443a      	add	r2, r7
 8007f5a:	4413      	add	r3, r2
 8007f5c:	ed93 6b02 	vldr	d6, [r3, #8]
 8007f60:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007f64:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007f68:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8007f6c:	ed83 7b00 	vstr	d7, [r3]
 8007f70:	e029      	b.n	8007fc6 <G_q+0x5ba6>
 8007f72:	bf00      	nop
 8007f74:	f3af 8000 	nop.w
	...
 8007f80:	ffffedd0 	.word	0xffffedd0
 8007f84:	ffffed90 	.word	0xffffed90
  } else {
    t16_re = t42.re / 2.0;
 8007f88:	4b5a      	ldr	r3, [pc, #360]	; (80080f4 <G_q+0x5cd4>)
 8007f8a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007f8e:	443a      	add	r2, r7
 8007f90:	4413      	add	r3, r2
 8007f92:	ed93 6b00 	vldr	d6, [r3]
 8007f96:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007f9a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007f9e:	f241 3368 	movw	r3, #4968	; 0x1368
 8007fa2:	443b      	add	r3, r7
 8007fa4:	ed83 7b00 	vstr	d7, [r3]
    t16_im = t42.im / 2.0;
 8007fa8:	4b52      	ldr	r3, [pc, #328]	; (80080f4 <G_q+0x5cd4>)
 8007faa:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007fae:	443a      	add	r2, r7
 8007fb0:	4413      	add	r3, r2
 8007fb2:	ed93 6b02 	vldr	d6, [r3, #8]
 8007fb6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007fba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007fbe:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8007fc2:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t45.im == 0.0) {
 8007fc6:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8007fca:	ed93 7b02 	vldr	d7, [r3, #8]
 8007fce:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fd6:	d115      	bne.n	8008004 <G_q+0x5be4>
    t20_re = t45.re / 2.0;
 8007fd8:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8007fdc:	ed93 6b00 	vldr	d6, [r3]
 8007fe0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007fe4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007fe8:	f241 3348 	movw	r3, #4936	; 0x1348
 8007fec:	443b      	add	r3, r7
 8007fee:	ed83 7b00 	vstr	d7, [r3]
    t20_im = 0.0;
 8007ff2:	f04f 0300 	mov.w	r3, #0
 8007ff6:	f04f 0400 	mov.w	r4, #0
 8007ffa:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8007ffe:	e9c2 3400 	strd	r3, r4, [r2]
 8008002:	e037      	b.n	8008074 <G_q+0x5c54>
  } else if (t45.re == 0.0) {
 8008004:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8008008:	ed93 7b00 	vldr	d7, [r3]
 800800c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008014:	d115      	bne.n	8008042 <G_q+0x5c22>
    t20_re = 0.0;
 8008016:	f04f 0300 	mov.w	r3, #0
 800801a:	f04f 0400 	mov.w	r4, #0
 800801e:	f241 3248 	movw	r2, #4936	; 0x1348
 8008022:	443a      	add	r2, r7
 8008024:	e9c2 3400 	strd	r3, r4, [r2]
    t20_im = t45.im / 2.0;
 8008028:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 800802c:	ed93 6b02 	vldr	d6, [r3, #8]
 8008030:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008034:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008038:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800803c:	ed83 7b00 	vstr	d7, [r3]
 8008040:	e018      	b.n	8008074 <G_q+0x5c54>
  } else {
    t20_re = t45.re / 2.0;
 8008042:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8008046:	ed93 6b00 	vldr	d6, [r3]
 800804a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800804e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008052:	f241 3348 	movw	r3, #4936	; 0x1348
 8008056:	443b      	add	r3, r7
 8008058:	ed83 7b00 	vstr	d7, [r3]
    t20_im = t45.im / 2.0;
 800805c:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8008060:	ed93 6b02 	vldr	d6, [r3, #8]
 8008064:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008068:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800806c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8008070:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t46.im == 0.0) {
 8008074:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 8008078:	ed93 7b02 	vldr	d7, [r3, #8]
 800807c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008084:	d116      	bne.n	80080b4 <G_q+0x5c94>
    t34_re = t46.re / 2.0;
 8008086:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 800808a:	ed93 6b00 	vldr	d6, [r3]
 800808e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008092:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008096:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800809a:	443b      	add	r3, r7
 800809c:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 80080a0:	f04f 0300 	mov.w	r3, #0
 80080a4:	f04f 0400 	mov.w	r4, #0
 80080a8:	f241 32b0 	movw	r2, #5040	; 0x13b0
 80080ac:	443a      	add	r2, r7
 80080ae:	e9c2 3400 	strd	r3, r4, [r2]
 80080b2:	e03b      	b.n	800812c <G_q+0x5d0c>
  } else if (t46.re == 0.0) {
 80080b4:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 80080b8:	ed93 7b00 	vldr	d7, [r3]
 80080bc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80080c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080c4:	d118      	bne.n	80080f8 <G_q+0x5cd8>
    t34_re = 0.0;
 80080c6:	f04f 0300 	mov.w	r3, #0
 80080ca:	f04f 0400 	mov.w	r4, #0
 80080ce:	f241 32b8 	movw	r2, #5048	; 0x13b8
 80080d2:	443a      	add	r2, r7
 80080d4:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t46.im / 2.0;
 80080d8:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 80080dc:	ed93 6b02 	vldr	d6, [r3, #8]
 80080e0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80080e4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80080e8:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80080ec:	443b      	add	r3, r7
 80080ee:	ed83 7b00 	vstr	d7, [r3]
 80080f2:	e01b      	b.n	800812c <G_q+0x5d0c>
 80080f4:	ffffed90 	.word	0xffffed90
  } else {
    t34_re = t46.re / 2.0;
 80080f8:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 80080fc:	ed93 6b00 	vldr	d6, [r3]
 8008100:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008104:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008108:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800810c:	443b      	add	r3, r7
 800810e:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t46.im / 2.0;
 8008112:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 8008116:	ed93 6b02 	vldr	d6, [r3, #8]
 800811a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800811e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008122:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008126:	443b      	add	r3, r7
 8008128:	ed83 7b00 	vstr	d7, [r3]
  }

  t12_re = (t47.re * 0.0 - t47.im * 3.061616997868383E-17) - (t48.re * 0.0 -
 800812c:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8008130:	ed93 7b00 	vldr	d7, [r3]
 8008134:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 80084f8 <G_q+0x60d8>
 8008138:	ee27 6b06 	vmul.f64	d6, d7, d6
 800813c:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8008140:	ed93 7b02 	vldr	d7, [r3, #8]
 8008144:	ed9f 5bee 	vldr	d5, [pc, #952]	; 8008500 <G_q+0x60e0>
 8008148:	ee27 7b05 	vmul.f64	d7, d7, d5
 800814c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008150:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8008154:	ed93 7b00 	vldr	d7, [r3]
 8008158:	ed9f 5be7 	vldr	d5, [pc, #924]	; 80084f8 <G_q+0x60d8>
 800815c:	ee27 5b05 	vmul.f64	d5, d7, d5
    t48.im * 3.061616997868383E-17);
 8008160:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8008164:	ed93 7b02 	vldr	d7, [r3, #8]
 8008168:	ed9f 4be5 	vldr	d4, [pc, #916]	; 8008500 <G_q+0x60e0>
 800816c:	ee27 7b04 	vmul.f64	d7, d7, d4
  t12_re = (t47.re * 0.0 - t47.im * 3.061616997868383E-17) - (t48.re * 0.0 -
 8008170:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008174:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008178:	f241 3388 	movw	r3, #5000	; 0x1388
 800817c:	443b      	add	r3, r7
 800817e:	ed83 7b00 	vstr	d7, [r3]
  t12_im = (t47.re * 3.061616997868383E-17 + t47.im * 0.0) - (t48.re *
 8008182:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8008186:	ed93 7b00 	vldr	d7, [r3]
 800818a:	ed9f 6bdd 	vldr	d6, [pc, #884]	; 8008500 <G_q+0x60e0>
 800818e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008192:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8008196:	ed93 7b02 	vldr	d7, [r3, #8]
 800819a:	ed9f 5bd7 	vldr	d5, [pc, #860]	; 80084f8 <G_q+0x60d8>
 800819e:	ee27 7b05 	vmul.f64	d7, d7, d5
 80081a2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80081a6:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80081aa:	ed93 7b00 	vldr	d7, [r3]
 80081ae:	ed9f 5bd4 	vldr	d5, [pc, #848]	; 8008500 <G_q+0x60e0>
 80081b2:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t48.im * 0.0);
 80081b6:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80081ba:	ed93 7b02 	vldr	d7, [r3, #8]
 80081be:	ed9f 4bce 	vldr	d4, [pc, #824]	; 80084f8 <G_q+0x60d8>
 80081c2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80081c6:	ee35 7b07 	vadd.f64	d7, d5, d7
  t12_im = (t47.re * 3.061616997868383E-17 + t47.im * 0.0) - (t48.re *
 80081ca:	ee36 7b47 	vsub.f64	d7, d6, d7
 80081ce:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80081d2:	ed83 7b00 	vstr	d7, [r3]
  t20_re += t34_re;
 80081d6:	f241 3348 	movw	r3, #4936	; 0x1348
 80081da:	443b      	add	r3, r7
 80081dc:	ed93 6b00 	vldr	d6, [r3]
 80081e0:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80081e4:	443b      	add	r3, r7
 80081e6:	ed93 7b00 	vldr	d7, [r3]
 80081ea:	ee36 7b07 	vadd.f64	d7, d6, d7
 80081ee:	f241 3348 	movw	r3, #4936	; 0x1348
 80081f2:	443b      	add	r3, r7
 80081f4:	ed83 7b00 	vstr	d7, [r3]
  t20_im += t34_im;
 80081f8:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80081fc:	ed93 6b00 	vldr	d6, [r3]
 8008200:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008204:	443b      	add	r3, r7
 8008206:	ed93 7b00 	vldr	d7, [r3]
 800820a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800820e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8008212:	ed83 7b00 	vstr	d7, [r3]
  t34_re = t51.re * 3.061616997868383E-17 + t52.re * 3.061616997868383E-17;
 8008216:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800821a:	ed93 7b00 	vldr	d7, [r3]
 800821e:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 8008500 <G_q+0x60e0>
 8008222:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008226:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800822a:	ed93 7b00 	vldr	d7, [r3]
 800822e:	ed9f 5bb4 	vldr	d5, [pc, #720]	; 8008500 <G_q+0x60e0>
 8008232:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008236:	ee36 7b07 	vadd.f64	d7, d6, d7
 800823a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800823e:	443b      	add	r3, r7
 8008240:	ed83 7b00 	vstr	d7, [r3]
  t34_im = t51.im * 3.061616997868383E-17 + t52.im * 3.061616997868383E-17;
 8008244:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8008248:	ed93 7b02 	vldr	d7, [r3, #8]
 800824c:	ed9f 6bac 	vldr	d6, [pc, #688]	; 8008500 <G_q+0x60e0>
 8008250:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008254:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8008258:	ed93 7b02 	vldr	d7, [r3, #8]
 800825c:	ed9f 5ba8 	vldr	d5, [pc, #672]	; 8008500 <G_q+0x60e0>
 8008260:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008264:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008268:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800826c:	443b      	add	r3, r7
 800826e:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t49.re * 0.0 - t49.im * 0.5) - (t50.re * 0.0 - t50.im * 0.5);
 8008272:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 8008276:	ed93 7b00 	vldr	d7, [r3]
 800827a:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 80084f8 <G_q+0x60d8>
 800827e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008282:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 8008286:	ed93 7b02 	vldr	d7, [r3, #8]
 800828a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800828e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008292:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008296:	f507 633c 	add.w	r3, r7, #3008	; 0xbc0
 800829a:	ed93 7b00 	vldr	d7, [r3]
 800829e:	ed9f 5b96 	vldr	d5, [pc, #600]	; 80084f8 <G_q+0x60d8>
 80082a2:	ee27 5b05 	vmul.f64	d5, d7, d5
 80082a6:	f507 633c 	add.w	r3, r7, #3008	; 0xbc0
 80082aa:	ed93 7b02 	vldr	d7, [r3, #8]
 80082ae:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80082b2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80082b6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80082ba:	ee36 7b47 	vsub.f64	d7, d6, d7
 80082be:	f241 3378 	movw	r3, #4984	; 0x1378
 80082c2:	443b      	add	r3, r7
 80082c4:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t49.re * 0.5 + t49.im * 0.0) - (t50.re * 0.5 + t50.im * 0.0);
 80082c8:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 80082cc:	ed93 7b00 	vldr	d7, [r3]
 80082d0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80082d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80082d8:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 80082dc:	ed93 7b02 	vldr	d7, [r3, #8]
 80082e0:	ed9f 5b85 	vldr	d5, [pc, #532]	; 80084f8 <G_q+0x60d8>
 80082e4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80082e8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80082ec:	f507 633c 	add.w	r3, r7, #3008	; 0xbc0
 80082f0:	ed93 7b00 	vldr	d7, [r3]
 80082f4:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80082f8:	ee27 5b05 	vmul.f64	d5, d7, d5
 80082fc:	f507 633c 	add.w	r3, r7, #3008	; 0xbc0
 8008300:	ed93 7b02 	vldr	d7, [r3, #8]
 8008304:	ed9f 4b7c 	vldr	d4, [pc, #496]	; 80084f8 <G_q+0x60d8>
 8008308:	ee27 7b04 	vmul.f64	d7, d7, d4
 800830c:	ee35 7b07 	vadd.f64	d7, d5, d7
 8008310:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008314:	f241 3370 	movw	r3, #4976	; 0x1370
 8008318:	443b      	add	r3, r7
 800831a:	ed83 7b00 	vstr	d7, [r3]
  t41_re += t16_re;
 800831e:	f241 3308 	movw	r3, #4872	; 0x1308
 8008322:	443b      	add	r3, r7
 8008324:	ed93 6b00 	vldr	d6, [r3]
 8008328:	f241 3368 	movw	r3, #4968	; 0x1368
 800832c:	443b      	add	r3, r7
 800832e:	ed93 7b00 	vldr	d7, [r3]
 8008332:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008336:	f241 3308 	movw	r3, #4872	; 0x1308
 800833a:	443b      	add	r3, r7
 800833c:	ed83 7b00 	vstr	d7, [r3]
  t41_im += t16_im;
 8008340:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8008344:	ed93 6b00 	vldr	d6, [r3]
 8008348:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800834c:	ed93 7b00 	vldr	d7, [r3]
 8008350:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008354:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8008358:	ed83 7b00 	vstr	d7, [r3]
  t43_re = (((t43.re * 0.0 - t43.im * 6.123233995736766E-17) - (t44.re * 0.0 -
 800835c:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8008360:	ed93 7b00 	vldr	d7, [r3]
 8008364:	ed9f 6b64 	vldr	d6, [pc, #400]	; 80084f8 <G_q+0x60d8>
 8008368:	ee27 6b06 	vmul.f64	d6, d7, d6
 800836c:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8008370:	ed93 7b02 	vldr	d7, [r3, #8]
 8008374:	ed9f 5b64 	vldr	d5, [pc, #400]	; 8008508 <G_q+0x60e8>
 8008378:	ee27 7b05 	vmul.f64	d7, d7, d5
 800837c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008380:	f507 6338 	add.w	r3, r7, #2944	; 0xb80
 8008384:	ed93 7b00 	vldr	d7, [r3]
 8008388:	ed9f 5b5b 	vldr	d5, [pc, #364]	; 80084f8 <G_q+0x60d8>
 800838c:	ee27 5b05 	vmul.f64	d5, d7, d5
              t44.im * 6.123233995736766E-17)) - (t12_re * t20_re - t12_im *
 8008390:	f507 6338 	add.w	r3, r7, #2944	; 0xb80
 8008394:	ed93 7b02 	vldr	d7, [r3, #8]
 8008398:	ed9f 4b5b 	vldr	d4, [pc, #364]	; 8008508 <G_q+0x60e8>
 800839c:	ee27 7b04 	vmul.f64	d7, d7, d4
  t43_re = (((t43.re * 0.0 - t43.im * 6.123233995736766E-17) - (t44.re * 0.0 -
 80083a0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80083a4:	ee36 6b47 	vsub.f64	d6, d6, d7
              t44.im * 6.123233995736766E-17)) - (t12_re * t20_re - t12_im *
 80083a8:	f241 3388 	movw	r3, #5000	; 0x1388
 80083ac:	443b      	add	r3, r7
 80083ae:	ed93 5b00 	vldr	d5, [r3]
 80083b2:	f241 3348 	movw	r3, #4936	; 0x1348
 80083b6:	443b      	add	r3, r7
 80083b8:	ed93 7b00 	vldr	d7, [r3]
 80083bc:	ee25 5b07 	vmul.f64	d5, d5, d7
 80083c0:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80083c4:	ed93 4b00 	vldr	d4, [r3]
 80083c8:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80083cc:	ed93 7b00 	vldr	d7, [r3]
 80083d0:	ee24 7b07 	vmul.f64	d7, d4, d7
 80083d4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80083d8:	ee36 6b47 	vsub.f64	d6, d6, d7
             t20_im)) + (t34_re * t13_re - t34_im * t13_im);
 80083dc:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80083e0:	443b      	add	r3, r7
 80083e2:	ed93 5b00 	vldr	d5, [r3]
 80083e6:	f241 3378 	movw	r3, #4984	; 0x1378
 80083ea:	443b      	add	r3, r7
 80083ec:	ed93 7b00 	vldr	d7, [r3]
 80083f0:	ee25 5b07 	vmul.f64	d5, d5, d7
 80083f4:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80083f8:	443b      	add	r3, r7
 80083fa:	ed93 4b00 	vldr	d4, [r3]
 80083fe:	f241 3370 	movw	r3, #4976	; 0x1370
 8008402:	443b      	add	r3, r7
 8008404:	ed93 7b00 	vldr	d7, [r3]
 8008408:	ee24 7b07 	vmul.f64	d7, d4, d7
 800840c:	ee35 7b47 	vsub.f64	d7, d5, d7
  t43_re = (((t43.re * 0.0 - t43.im * 6.123233995736766E-17) - (t44.re * 0.0 -
 8008410:	f241 2358 	movw	r3, #4696	; 0x1258
 8008414:	443b      	add	r3, r7
 8008416:	ee36 7b07 	vadd.f64	d7, d6, d7
 800841a:	ed83 7b00 	vstr	d7, [r3]
  t43_im = (((t43.re * 6.123233995736766E-17 + t43.im * 0.0) - (t44.re *
 800841e:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8008422:	ed93 7b00 	vldr	d7, [r3]
 8008426:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8008508 <G_q+0x60e8>
 800842a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800842e:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8008432:	ed93 7b02 	vldr	d7, [r3, #8]
 8008436:	ed9f 5b30 	vldr	d5, [pc, #192]	; 80084f8 <G_q+0x60d8>
 800843a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800843e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008442:	f507 6338 	add.w	r3, r7, #2944	; 0xb80
 8008446:	ed93 7b00 	vldr	d7, [r3]
 800844a:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8008508 <G_q+0x60e8>
 800844e:	ee27 5b05 	vmul.f64	d5, d7, d5
              6.123233995736766E-17 + t44.im * 0.0)) - (t12_re * t20_im + t12_im
 8008452:	f507 6338 	add.w	r3, r7, #2944	; 0xb80
 8008456:	ed93 7b02 	vldr	d7, [r3, #8]
 800845a:	ed9f 4b27 	vldr	d4, [pc, #156]	; 80084f8 <G_q+0x60d8>
 800845e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008462:	ee35 7b07 	vadd.f64	d7, d5, d7
  t43_im = (((t43.re * 6.123233995736766E-17 + t43.im * 0.0) - (t44.re *
 8008466:	ee36 6b47 	vsub.f64	d6, d6, d7
              6.123233995736766E-17 + t44.im * 0.0)) - (t12_re * t20_im + t12_im
 800846a:	f241 3388 	movw	r3, #5000	; 0x1388
 800846e:	443b      	add	r3, r7
 8008470:	ed93 5b00 	vldr	d5, [r3]
 8008474:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8008478:	ed93 7b00 	vldr	d7, [r3]
 800847c:	ee25 5b07 	vmul.f64	d5, d5, d7
             * t20_re)) + (t34_re * t13_im + t34_im * t13_re);
 8008480:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8008484:	ed93 4b00 	vldr	d4, [r3]
 8008488:	f241 3348 	movw	r3, #4936	; 0x1348
 800848c:	443b      	add	r3, r7
 800848e:	ed93 7b00 	vldr	d7, [r3]
 8008492:	ee24 7b07 	vmul.f64	d7, d4, d7
              6.123233995736766E-17 + t44.im * 0.0)) - (t12_re * t20_im + t12_im
 8008496:	ee35 7b07 	vadd.f64	d7, d5, d7
 800849a:	ee36 6b47 	vsub.f64	d6, d6, d7
             * t20_re)) + (t34_re * t13_im + t34_im * t13_re);
 800849e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80084a2:	443b      	add	r3, r7
 80084a4:	ed93 5b00 	vldr	d5, [r3]
 80084a8:	f241 3370 	movw	r3, #4976	; 0x1370
 80084ac:	443b      	add	r3, r7
 80084ae:	ed93 7b00 	vldr	d7, [r3]
 80084b2:	ee25 5b07 	vmul.f64	d5, d5, d7
 80084b6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80084ba:	443b      	add	r3, r7
 80084bc:	ed93 4b00 	vldr	d4, [r3]
 80084c0:	f241 3378 	movw	r3, #4984	; 0x1378
 80084c4:	443b      	add	r3, r7
 80084c6:	ed93 7b00 	vldr	d7, [r3]
 80084ca:	ee24 7b07 	vmul.f64	d7, d4, d7
 80084ce:	ee35 7b07 	vadd.f64	d7, d5, d7
  t43_im = (((t43.re * 6.123233995736766E-17 + t43.im * 0.0) - (t44.re *
 80084d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80084d6:	f241 23f8 	movw	r3, #4856	; 0x12f8
 80084da:	443b      	add	r3, r7
 80084dc:	ed83 7b00 	vstr	d7, [r3]
  if (t54.im == 0.0) {
 80084e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80084e4:	ed93 7b02 	vldr	d7, [r3, #8]
 80084e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80084ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084f0:	d125      	bne.n	800853e <G_q+0x611e>
 80084f2:	e00d      	b.n	8008510 <G_q+0x60f0>
 80084f4:	f3af 8000 	nop.w
	...
 8008500:	33145c07 	.word	0x33145c07
 8008504:	3c81a626 	.word	0x3c81a626
 8008508:	33145c07 	.word	0x33145c07
 800850c:	3c91a626 	.word	0x3c91a626
    b_t54_re = t54.re / 2.0;
 8008510:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008514:	ed93 6b00 	vldr	d6, [r3]
 8008518:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800851c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008520:	f241 23f0 	movw	r3, #4848	; 0x12f0
 8008524:	443b      	add	r3, r7
 8008526:	ed83 7b00 	vstr	d7, [r3]
    b_t54_im = 0.0;
 800852a:	f04f 0300 	mov.w	r3, #0
 800852e:	f04f 0400 	mov.w	r4, #0
 8008532:	f241 22e8 	movw	r2, #4840	; 0x12e8
 8008536:	443a      	add	r2, r7
 8008538:	e9c2 3400 	strd	r3, r4, [r2]
 800853c:	e039      	b.n	80085b2 <G_q+0x6192>
  } else if (t54.re == 0.0) {
 800853e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008542:	ed93 7b00 	vldr	d7, [r3]
 8008546:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800854a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800854e:	d116      	bne.n	800857e <G_q+0x615e>
    b_t54_re = 0.0;
 8008550:	f04f 0300 	mov.w	r3, #0
 8008554:	f04f 0400 	mov.w	r4, #0
 8008558:	f241 22f0 	movw	r2, #4848	; 0x12f0
 800855c:	443a      	add	r2, r7
 800855e:	e9c2 3400 	strd	r3, r4, [r2]
    b_t54_im = t54.im / 2.0;
 8008562:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008566:	ed93 6b02 	vldr	d6, [r3, #8]
 800856a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800856e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008572:	f241 23e8 	movw	r3, #4840	; 0x12e8
 8008576:	443b      	add	r3, r7
 8008578:	ed83 7b00 	vstr	d7, [r3]
 800857c:	e019      	b.n	80085b2 <G_q+0x6192>
  } else {
    b_t54_re = t54.re / 2.0;
 800857e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008582:	ed93 6b00 	vldr	d6, [r3]
 8008586:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800858a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800858e:	f241 23f0 	movw	r3, #4848	; 0x12f0
 8008592:	443b      	add	r3, r7
 8008594:	ed83 7b00 	vstr	d7, [r3]
    b_t54_im = t54.im / 2.0;
 8008598:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800859c:	ed93 6b02 	vldr	d6, [r3, #8]
 80085a0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80085a4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80085a8:	f241 23e8 	movw	r3, #4840	; 0x12e8
 80085ac:	443b      	add	r3, r7
 80085ae:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t55.im == 0.0) {
 80085b2:	4bdd      	ldr	r3, [pc, #884]	; (8008928 <G_q+0x6508>)
 80085b4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80085b8:	443a      	add	r2, r7
 80085ba:	4413      	add	r3, r2
 80085bc:	ed93 7b02 	vldr	d7, [r3, #8]
 80085c0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80085c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085c8:	d118      	bne.n	80085fc <G_q+0x61dc>
    t55_re = t55.re / 2.0;
 80085ca:	4bd7      	ldr	r3, [pc, #860]	; (8008928 <G_q+0x6508>)
 80085cc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80085d0:	443a      	add	r2, r7
 80085d2:	4413      	add	r3, r2
 80085d4:	ed93 6b00 	vldr	d6, [r3]
 80085d8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80085dc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80085e0:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 80085e4:	ed83 7b00 	vstr	d7, [r3]
    t55_im = 0.0;
 80085e8:	f04f 0300 	mov.w	r3, #0
 80085ec:	f04f 0400 	mov.w	r4, #0
 80085f0:	f241 22d8 	movw	r2, #4824	; 0x12d8
 80085f4:	443a      	add	r2, r7
 80085f6:	e9c2 3400 	strd	r3, r4, [r2]
 80085fa:	e043      	b.n	8008684 <G_q+0x6264>
  } else if (t55.re == 0.0) {
 80085fc:	4bca      	ldr	r3, [pc, #808]	; (8008928 <G_q+0x6508>)
 80085fe:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8008602:	443a      	add	r2, r7
 8008604:	4413      	add	r3, r2
 8008606:	ed93 7b00 	vldr	d7, [r3]
 800860a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800860e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008612:	d118      	bne.n	8008646 <G_q+0x6226>
    t55_re = 0.0;
 8008614:	f04f 0300 	mov.w	r3, #0
 8008618:	f04f 0400 	mov.w	r4, #0
 800861c:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 8008620:	e9c2 3400 	strd	r3, r4, [r2]
    t55_im = t55.im / 2.0;
 8008624:	4bc0      	ldr	r3, [pc, #768]	; (8008928 <G_q+0x6508>)
 8008626:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800862a:	443a      	add	r2, r7
 800862c:	4413      	add	r3, r2
 800862e:	ed93 6b02 	vldr	d6, [r3, #8]
 8008632:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008636:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800863a:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800863e:	443b      	add	r3, r7
 8008640:	ed83 7b00 	vstr	d7, [r3]
 8008644:	e01e      	b.n	8008684 <G_q+0x6264>
  } else {
    t55_re = t55.re / 2.0;
 8008646:	4bb8      	ldr	r3, [pc, #736]	; (8008928 <G_q+0x6508>)
 8008648:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800864c:	443a      	add	r2, r7
 800864e:	4413      	add	r3, r2
 8008650:	ed93 6b00 	vldr	d6, [r3]
 8008654:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008658:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800865c:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8008660:	ed83 7b00 	vstr	d7, [r3]
    t55_im = t55.im / 2.0;
 8008664:	4bb0      	ldr	r3, [pc, #704]	; (8008928 <G_q+0x6508>)
 8008666:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800866a:	443a      	add	r2, r7
 800866c:	4413      	add	r3, r2
 800866e:	ed93 6b02 	vldr	d6, [r3, #8]
 8008672:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008676:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800867a:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800867e:	443b      	add	r3, r7
 8008680:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t70.im == 0.0) {
 8008684:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 8008688:	ed93 7b02 	vldr	d7, [r3, #8]
 800868c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008694:	d116      	bne.n	80086c4 <G_q+0x62a4>
    t70_re = t70.re / 2.0;
 8008696:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 800869a:	ed93 6b00 	vldr	d6, [r3]
 800869e:	f241 23d0 	movw	r3, #4816	; 0x12d0
 80086a2:	443b      	add	r3, r7
 80086a4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80086a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80086ac:	ed83 7b00 	vstr	d7, [r3]
    t70_im = 0.0;
 80086b0:	f241 22c8 	movw	r2, #4808	; 0x12c8
 80086b4:	443a      	add	r2, r7
 80086b6:	f04f 0300 	mov.w	r3, #0
 80086ba:	f04f 0400 	mov.w	r4, #0
 80086be:	e9c2 3400 	strd	r3, r4, [r2]
 80086c2:	e039      	b.n	8008738 <G_q+0x6318>
  } else if (t70.re == 0.0) {
 80086c4:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 80086c8:	ed93 7b00 	vldr	d7, [r3]
 80086cc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80086d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086d4:	d116      	bne.n	8008704 <G_q+0x62e4>
    t70_re = 0.0;
 80086d6:	f241 22d0 	movw	r2, #4816	; 0x12d0
 80086da:	443a      	add	r2, r7
 80086dc:	f04f 0300 	mov.w	r3, #0
 80086e0:	f04f 0400 	mov.w	r4, #0
 80086e4:	e9c2 3400 	strd	r3, r4, [r2]
    t70_im = t70.im / 2.0;
 80086e8:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 80086ec:	ed93 6b02 	vldr	d6, [r3, #8]
 80086f0:	f241 23c8 	movw	r3, #4808	; 0x12c8
 80086f4:	443b      	add	r3, r7
 80086f6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80086fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80086fe:	ed83 7b00 	vstr	d7, [r3]
 8008702:	e019      	b.n	8008738 <G_q+0x6318>
  } else {
    t70_re = t70.re / 2.0;
 8008704:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 8008708:	ed93 6b00 	vldr	d6, [r3]
 800870c:	f241 23d0 	movw	r3, #4816	; 0x12d0
 8008710:	443b      	add	r3, r7
 8008712:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008716:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800871a:	ed83 7b00 	vstr	d7, [r3]
    t70_im = t70.im / 2.0;
 800871e:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 8008722:	ed93 6b02 	vldr	d6, [r3, #8]
 8008726:	f241 23c8 	movw	r3, #4808	; 0x12c8
 800872a:	443b      	add	r3, r7
 800872c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008730:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008734:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t71.im == 0.0) {
 8008738:	f507 6346 	add.w	r3, r7, #3168	; 0xc60
 800873c:	ed93 7b02 	vldr	d7, [r3, #8]
 8008740:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008748:	d116      	bne.n	8008778 <G_q+0x6358>
    t34_re = t71.re / 2.0;
 800874a:	f507 6346 	add.w	r3, r7, #3168	; 0xc60
 800874e:	ed93 6b00 	vldr	d6, [r3]
 8008752:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008756:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800875a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800875e:	443b      	add	r3, r7
 8008760:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8008764:	f04f 0300 	mov.w	r3, #0
 8008768:	f04f 0400 	mov.w	r4, #0
 800876c:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8008770:	443a      	add	r2, r7
 8008772:	e9c2 3400 	strd	r3, r4, [r2]
 8008776:	e039      	b.n	80087ec <G_q+0x63cc>
  } else if (t71.re == 0.0) {
 8008778:	f507 6346 	add.w	r3, r7, #3168	; 0xc60
 800877c:	ed93 7b00 	vldr	d7, [r3]
 8008780:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008788:	d116      	bne.n	80087b8 <G_q+0x6398>
    t34_re = 0.0;
 800878a:	f04f 0300 	mov.w	r3, #0
 800878e:	f04f 0400 	mov.w	r4, #0
 8008792:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8008796:	443a      	add	r2, r7
 8008798:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t71.im / 2.0;
 800879c:	f507 6346 	add.w	r3, r7, #3168	; 0xc60
 80087a0:	ed93 6b02 	vldr	d6, [r3, #8]
 80087a4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80087a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80087ac:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80087b0:	443b      	add	r3, r7
 80087b2:	ed83 7b00 	vstr	d7, [r3]
 80087b6:	e019      	b.n	80087ec <G_q+0x63cc>
  } else {
    t34_re = t71.re / 2.0;
 80087b8:	f507 6346 	add.w	r3, r7, #3168	; 0xc60
 80087bc:	ed93 6b00 	vldr	d6, [r3]
 80087c0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80087c4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80087c8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80087cc:	443b      	add	r3, r7
 80087ce:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t71.im / 2.0;
 80087d2:	f507 6346 	add.w	r3, r7, #3168	; 0xc60
 80087d6:	ed93 6b02 	vldr	d6, [r3, #8]
 80087da:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80087de:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80087e2:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80087e6:	443b      	add	r3, r7
 80087e8:	ed83 7b00 	vstr	d7, [r3]
  }

  t70_re += t34_re;
 80087ec:	f241 23d0 	movw	r3, #4816	; 0x12d0
 80087f0:	443b      	add	r3, r7
 80087f2:	f241 22d0 	movw	r2, #4816	; 0x12d0
 80087f6:	443a      	add	r2, r7
 80087f8:	ed92 6b00 	vldr	d6, [r2]
 80087fc:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8008800:	443a      	add	r2, r7
 8008802:	ed92 7b00 	vldr	d7, [r2]
 8008806:	ee36 7b07 	vadd.f64	d7, d6, d7
 800880a:	ed83 7b00 	vstr	d7, [r3]
  t70_im += t34_im;
 800880e:	f241 23c8 	movw	r3, #4808	; 0x12c8
 8008812:	443b      	add	r3, r7
 8008814:	f241 22c8 	movw	r2, #4808	; 0x12c8
 8008818:	443a      	add	r2, r7
 800881a:	ed92 6b00 	vldr	d6, [r2]
 800881e:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8008822:	443a      	add	r2, r7
 8008824:	ed92 7b00 	vldr	d7, [r2]
 8008828:	ee36 7b07 	vadd.f64	d7, d6, d7
 800882c:	ed83 7b00 	vstr	d7, [r3]
  t72_re = (t72.re * 0.0 - t72.im * 0.5) - (t73.re * 0.0 - t73.im * 0.5);
 8008830:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8008834:	ed93 7b00 	vldr	d7, [r3]
 8008838:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8008920 <G_q+0x6500>
 800883c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008840:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8008844:	ed93 7b02 	vldr	d7, [r3, #8]
 8008848:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800884c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008850:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008854:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8008858:	ed93 7b00 	vldr	d7, [r3]
 800885c:	ed9f 5b30 	vldr	d5, [pc, #192]	; 8008920 <G_q+0x6500>
 8008860:	ee27 5b05 	vmul.f64	d5, d7, d5
 8008864:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8008868:	ed93 7b02 	vldr	d7, [r3, #8]
 800886c:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8008870:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008874:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008878:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800887c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008880:	ed83 7b00 	vstr	d7, [r3]
  b_t10_re = (t72.re * 0.5 + t72.im * 0.0) - (t73.re * 0.5 + t73.im * 0.0);
 8008884:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8008888:	ed93 7b00 	vldr	d7, [r3]
 800888c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8008890:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008894:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8008898:	ed93 7b02 	vldr	d7, [r3, #8]
 800889c:	ed9f 5b20 	vldr	d5, [pc, #128]	; 8008920 <G_q+0x6500>
 80088a0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80088a4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80088a8:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80088ac:	ed93 7b00 	vldr	d7, [r3]
 80088b0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80088b4:	ee27 5b05 	vmul.f64	d5, d7, d5
 80088b8:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80088bc:	ed93 7b02 	vldr	d7, [r3, #8]
 80088c0:	ed9f 4b17 	vldr	d4, [pc, #92]	; 8008920 <G_q+0x6500>
 80088c4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80088c8:	ee35 7b07 	vadd.f64	d7, d5, d7
 80088cc:	ee36 7b47 	vsub.f64	d7, d6, d7
 80088d0:	f241 3338 	movw	r3, #4920	; 0x1338
 80088d4:	443b      	add	r3, r7
 80088d6:	ed83 7b00 	vstr	d7, [r3]
  if (t74.im == 0.0) {
 80088da:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 80088de:	ed93 7b02 	vldr	d7, [r3, #8]
 80088e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80088e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088ea:	d11f      	bne.n	800892c <G_q+0x650c>
    t74_re = t74.re / 2.0;
 80088ec:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 80088f0:	ed93 6b00 	vldr	d6, [r3]
 80088f4:	f241 23b8 	movw	r3, #4792	; 0x12b8
 80088f8:	443b      	add	r3, r7
 80088fa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80088fe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008902:	ed83 7b00 	vstr	d7, [r3]
    t74_im = 0.0;
 8008906:	f241 22b0 	movw	r2, #4784	; 0x12b0
 800890a:	443a      	add	r2, r7
 800890c:	f04f 0300 	mov.w	r3, #0
 8008910:	f04f 0400 	mov.w	r4, #0
 8008914:	e9c2 3400 	strd	r3, r4, [r2]
 8008918:	e042      	b.n	80089a0 <G_q+0x6580>
 800891a:	bf00      	nop
 800891c:	f3af 8000 	nop.w
	...
 8008928:	ffffec70 	.word	0xffffec70
  } else if (t74.re == 0.0) {
 800892c:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8008930:	ed93 7b00 	vldr	d7, [r3]
 8008934:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800893c:	d116      	bne.n	800896c <G_q+0x654c>
    t74_re = 0.0;
 800893e:	f241 22b8 	movw	r2, #4792	; 0x12b8
 8008942:	443a      	add	r2, r7
 8008944:	f04f 0300 	mov.w	r3, #0
 8008948:	f04f 0400 	mov.w	r4, #0
 800894c:	e9c2 3400 	strd	r3, r4, [r2]
    t74_im = t74.im / 2.0;
 8008950:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8008954:	ed93 6b02 	vldr	d6, [r3, #8]
 8008958:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800895c:	443b      	add	r3, r7
 800895e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008962:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008966:	ed83 7b00 	vstr	d7, [r3]
 800896a:	e019      	b.n	80089a0 <G_q+0x6580>
  } else {
    t74_re = t74.re / 2.0;
 800896c:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8008970:	ed93 6b00 	vldr	d6, [r3]
 8008974:	f241 23b8 	movw	r3, #4792	; 0x12b8
 8008978:	443b      	add	r3, r7
 800897a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800897e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008982:	ed83 7b00 	vstr	d7, [r3]
    t74_im = t74.im / 2.0;
 8008986:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 800898a:	ed93 6b02 	vldr	d6, [r3, #8]
 800898e:	f241 23b0 	movw	r3, #4784	; 0x12b0
 8008992:	443b      	add	r3, r7
 8008994:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008998:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800899c:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t75.im == 0.0) {
 80089a0:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 80089a4:	ed93 7b02 	vldr	d7, [r3, #8]
 80089a8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80089ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089b0:	d116      	bne.n	80089e0 <G_q+0x65c0>
    t34_re = t75.re / 2.0;
 80089b2:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 80089b6:	ed93 6b00 	vldr	d6, [r3]
 80089ba:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80089be:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80089c2:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80089c6:	443b      	add	r3, r7
 80089c8:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 80089cc:	f04f 0300 	mov.w	r3, #0
 80089d0:	f04f 0400 	mov.w	r4, #0
 80089d4:	f241 32b0 	movw	r2, #5040	; 0x13b0
 80089d8:	443a      	add	r2, r7
 80089da:	e9c2 3400 	strd	r3, r4, [r2]
 80089de:	e039      	b.n	8008a54 <G_q+0x6634>
  } else if (t75.re == 0.0) {
 80089e0:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 80089e4:	ed93 7b00 	vldr	d7, [r3]
 80089e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80089ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089f0:	d116      	bne.n	8008a20 <G_q+0x6600>
    t34_re = 0.0;
 80089f2:	f04f 0300 	mov.w	r3, #0
 80089f6:	f04f 0400 	mov.w	r4, #0
 80089fa:	f241 32b8 	movw	r2, #5048	; 0x13b8
 80089fe:	443a      	add	r2, r7
 8008a00:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t75.im / 2.0;
 8008a04:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8008a08:	ed93 6b02 	vldr	d6, [r3, #8]
 8008a0c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008a10:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008a14:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008a18:	443b      	add	r3, r7
 8008a1a:	ed83 7b00 	vstr	d7, [r3]
 8008a1e:	e019      	b.n	8008a54 <G_q+0x6634>
  } else {
    t34_re = t75.re / 2.0;
 8008a20:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8008a24:	ed93 6b00 	vldr	d6, [r3]
 8008a28:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008a2c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008a30:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008a34:	443b      	add	r3, r7
 8008a36:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t75.im / 2.0;
 8008a3a:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8008a3e:	ed93 6b02 	vldr	d6, [r3, #8]
 8008a42:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008a46:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008a4a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008a4e:	443b      	add	r3, r7
 8008a50:	ed83 7b00 	vstr	d7, [r3]
  }

  t74_re += t34_re;
 8008a54:	f241 23b8 	movw	r3, #4792	; 0x12b8
 8008a58:	443b      	add	r3, r7
 8008a5a:	f241 22b8 	movw	r2, #4792	; 0x12b8
 8008a5e:	443a      	add	r2, r7
 8008a60:	ed92 6b00 	vldr	d6, [r2]
 8008a64:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8008a68:	443a      	add	r2, r7
 8008a6a:	ed92 7b00 	vldr	d7, [r2]
 8008a6e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008a72:	ed83 7b00 	vstr	d7, [r3]
  t74_im += t34_im;
 8008a76:	f241 23b0 	movw	r3, #4784	; 0x12b0
 8008a7a:	443b      	add	r3, r7
 8008a7c:	f241 22b0 	movw	r2, #4784	; 0x12b0
 8008a80:	443a      	add	r2, r7
 8008a82:	ed92 6b00 	vldr	d6, [r2]
 8008a86:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8008a8a:	443a      	add	r2, r7
 8008a8c:	ed92 7b00 	vldr	d7, [r2]
 8008a90:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008a94:	ed83 7b00 	vstr	d7, [r3]
  t76_re = (t76.re * 0.0 - t76.im * 0.5) - (t77.re * 0.0 - t77.im * 0.5);
 8008a98:	f507 6347 	add.w	r3, r7, #3184	; 0xc70
 8008a9c:	ed93 7b00 	vldr	d7, [r3]
 8008aa0:	ed9f 6b75 	vldr	d6, [pc, #468]	; 8008c78 <G_q+0x6858>
 8008aa4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008aa8:	f507 6347 	add.w	r3, r7, #3184	; 0xc70
 8008aac:	ed93 7b02 	vldr	d7, [r3, #8]
 8008ab0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008ab4:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008ab8:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008abc:	f507 6348 	add.w	r3, r7, #3200	; 0xc80
 8008ac0:	ed93 7b00 	vldr	d7, [r3]
 8008ac4:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8008c78 <G_q+0x6858>
 8008ac8:	ee27 5b05 	vmul.f64	d5, d7, d5
 8008acc:	f507 6348 	add.w	r3, r7, #3200	; 0xc80
 8008ad0:	ed93 7b02 	vldr	d7, [r3, #8]
 8008ad4:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8008ad8:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008adc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008ae0:	f241 23a8 	movw	r3, #4776	; 0x12a8
 8008ae4:	443b      	add	r3, r7
 8008ae6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008aea:	ed83 7b00 	vstr	d7, [r3]
  t3_im = (t76.re * 0.5 + t76.im * 0.0) - (t77.re * 0.5 + t77.im * 0.0);
 8008aee:	f507 6347 	add.w	r3, r7, #3184	; 0xc70
 8008af2:	ed93 7b00 	vldr	d7, [r3]
 8008af6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8008afa:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008afe:	f507 6347 	add.w	r3, r7, #3184	; 0xc70
 8008b02:	ed93 7b02 	vldr	d7, [r3, #8]
 8008b06:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 8008c78 <G_q+0x6858>
 8008b0a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008b0e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008b12:	f507 6348 	add.w	r3, r7, #3200	; 0xc80
 8008b16:	ed93 7b00 	vldr	d7, [r3]
 8008b1a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008b1e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8008b22:	f507 6348 	add.w	r3, r7, #3200	; 0xc80
 8008b26:	ed93 7b02 	vldr	d7, [r3, #8]
 8008b2a:	ed9f 4b53 	vldr	d4, [pc, #332]	; 8008c78 <G_q+0x6858>
 8008b2e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008b32:	ee35 7b07 	vadd.f64	d7, d5, d7
 8008b36:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008b3a:	f241 3310 	movw	r3, #4880	; 0x1310
 8008b3e:	443b      	add	r3, r7
 8008b40:	ed83 7b00 	vstr	d7, [r3]
  if (t62.im == 0.0) {
 8008b44:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8008b48:	ed93 7b02 	vldr	d7, [r3, #8]
 8008b4c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b54:	d115      	bne.n	8008b82 <G_q+0x6762>
    t16_re = t62.re / 2.0;
 8008b56:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8008b5a:	ed93 6b00 	vldr	d6, [r3]
 8008b5e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008b62:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008b66:	f241 3368 	movw	r3, #4968	; 0x1368
 8008b6a:	443b      	add	r3, r7
 8008b6c:	ed83 7b00 	vstr	d7, [r3]
    t16_im = 0.0;
 8008b70:	f04f 0300 	mov.w	r3, #0
 8008b74:	f04f 0400 	mov.w	r4, #0
 8008b78:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8008b7c:	e9c2 3400 	strd	r3, r4, [r2]
 8008b80:	e037      	b.n	8008bf2 <G_q+0x67d2>
  } else if (t62.re == 0.0) {
 8008b82:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8008b86:	ed93 7b00 	vldr	d7, [r3]
 8008b8a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b92:	d115      	bne.n	8008bc0 <G_q+0x67a0>
    t16_re = 0.0;
 8008b94:	f04f 0300 	mov.w	r3, #0
 8008b98:	f04f 0400 	mov.w	r4, #0
 8008b9c:	f241 3268 	movw	r2, #4968	; 0x1368
 8008ba0:	443a      	add	r2, r7
 8008ba2:	e9c2 3400 	strd	r3, r4, [r2]
    t16_im = t62.im / 2.0;
 8008ba6:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8008baa:	ed93 6b02 	vldr	d6, [r3, #8]
 8008bae:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008bb2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008bb6:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8008bba:	ed83 7b00 	vstr	d7, [r3]
 8008bbe:	e018      	b.n	8008bf2 <G_q+0x67d2>
  } else {
    t16_re = t62.re / 2.0;
 8008bc0:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8008bc4:	ed93 6b00 	vldr	d6, [r3]
 8008bc8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008bcc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008bd0:	f241 3368 	movw	r3, #4968	; 0x1368
 8008bd4:	443b      	add	r3, r7
 8008bd6:	ed83 7b00 	vstr	d7, [r3]
    t16_im = t62.im / 2.0;
 8008bda:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8008bde:	ed93 6b02 	vldr	d6, [r3, #8]
 8008be2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008be6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008bea:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8008bee:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t63.im == 0.0) {
 8008bf2:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8008bf6:	ed93 7b02 	vldr	d7, [r3, #8]
 8008bfa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c02:	d116      	bne.n	8008c32 <G_q+0x6812>
    t34_re = t63.re / 2.0;
 8008c04:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8008c08:	ed93 6b00 	vldr	d6, [r3]
 8008c0c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008c10:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008c14:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008c18:	443b      	add	r3, r7
 8008c1a:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8008c1e:	f04f 0300 	mov.w	r3, #0
 8008c22:	f04f 0400 	mov.w	r4, #0
 8008c26:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8008c2a:	443a      	add	r2, r7
 8008c2c:	e9c2 3400 	strd	r3, r4, [r2]
 8008c30:	e044      	b.n	8008cbc <G_q+0x689c>
  } else if (t63.re == 0.0) {
 8008c32:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8008c36:	ed93 7b00 	vldr	d7, [r3]
 8008c3a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c42:	d121      	bne.n	8008c88 <G_q+0x6868>
    t34_re = 0.0;
 8008c44:	f04f 0300 	mov.w	r3, #0
 8008c48:	f04f 0400 	mov.w	r4, #0
 8008c4c:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8008c50:	443a      	add	r2, r7
 8008c52:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t63.im / 2.0;
 8008c56:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8008c5a:	ed93 6b02 	vldr	d6, [r3, #8]
 8008c5e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008c62:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008c66:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008c6a:	443b      	add	r3, r7
 8008c6c:	ed83 7b00 	vstr	d7, [r3]
 8008c70:	e024      	b.n	8008cbc <G_q+0x689c>
 8008c72:	bf00      	nop
 8008c74:	f3af 8000 	nop.w
	...
 8008c80:	33145c07 	.word	0x33145c07
 8008c84:	3c81a626 	.word	0x3c81a626
  } else {
    t34_re = t63.re / 2.0;
 8008c88:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8008c8c:	ed93 6b00 	vldr	d6, [r3]
 8008c90:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008c94:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008c98:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008c9c:	443b      	add	r3, r7
 8008c9e:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t63.im / 2.0;
 8008ca2:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8008ca6:	ed93 6b02 	vldr	d6, [r3, #8]
 8008caa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008cae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008cb2:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008cb6:	443b      	add	r3, r7
 8008cb8:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_re = (t64.re * 0.0 - t64.im * 3.061616997868383E-17) - (t65.re * 0.0 -
 8008cbc:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8008cc0:	ed93 7b00 	vldr	d7, [r3]
 8008cc4:	ed1f 6b14 	vldr	d6, [pc, #-80]	; 8008c78 <G_q+0x6858>
 8008cc8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008ccc:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8008cd0:	ed93 7b02 	vldr	d7, [r3, #8]
 8008cd4:	ed1f 5b16 	vldr	d5, [pc, #-88]	; 8008c80 <G_q+0x6860>
 8008cd8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008cdc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008ce0:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8008ce4:	ed93 7b00 	vldr	d7, [r3]
 8008ce8:	ed1f 5b1d 	vldr	d5, [pc, #-116]	; 8008c78 <G_q+0x6858>
 8008cec:	ee27 5b05 	vmul.f64	d5, d7, d5
    t65.im * 3.061616997868383E-17);
 8008cf0:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8008cf4:	ed93 7b02 	vldr	d7, [r3, #8]
 8008cf8:	ed1f 4b1f 	vldr	d4, [pc, #-124]	; 8008c80 <G_q+0x6860>
 8008cfc:	ee27 7b04 	vmul.f64	d7, d7, d4
  t20_re = (t64.re * 0.0 - t64.im * 3.061616997868383E-17) - (t65.re * 0.0 -
 8008d00:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008d04:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008d08:	f241 3348 	movw	r3, #4936	; 0x1348
 8008d0c:	443b      	add	r3, r7
 8008d0e:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t64.re * 3.061616997868383E-17 + t64.im * 0.0) - (t65.re *
 8008d12:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8008d16:	ed93 7b00 	vldr	d7, [r3]
 8008d1a:	ed1f 6b27 	vldr	d6, [pc, #-156]	; 8008c80 <G_q+0x6860>
 8008d1e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008d22:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8008d26:	ed93 7b02 	vldr	d7, [r3, #8]
 8008d2a:	ed1f 5b2d 	vldr	d5, [pc, #-180]	; 8008c78 <G_q+0x6858>
 8008d2e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008d32:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008d36:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8008d3a:	ed93 7b00 	vldr	d7, [r3]
 8008d3e:	ed1f 5b30 	vldr	d5, [pc, #-192]	; 8008c80 <G_q+0x6860>
 8008d42:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t65.im * 0.0);
 8008d46:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8008d4a:	ed93 7b02 	vldr	d7, [r3, #8]
 8008d4e:	ed1f 4b36 	vldr	d4, [pc, #-216]	; 8008c78 <G_q+0x6858>
 8008d52:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008d56:	ee35 7b07 	vadd.f64	d7, d5, d7
  t20_im = (t64.re * 3.061616997868383E-17 + t64.im * 0.0) - (t65.re *
 8008d5a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008d5e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8008d62:	ed83 7b00 	vstr	d7, [r3]
  t16_re += t34_re;
 8008d66:	f241 3368 	movw	r3, #4968	; 0x1368
 8008d6a:	443b      	add	r3, r7
 8008d6c:	ed93 6b00 	vldr	d6, [r3]
 8008d70:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008d74:	443b      	add	r3, r7
 8008d76:	ed93 7b00 	vldr	d7, [r3]
 8008d7a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008d7e:	f241 3368 	movw	r3, #4968	; 0x1368
 8008d82:	443b      	add	r3, r7
 8008d84:	ed83 7b00 	vstr	d7, [r3]
  t16_im += t34_im;
 8008d88:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8008d8c:	ed93 6b00 	vldr	d6, [r3]
 8008d90:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008d94:	443b      	add	r3, r7
 8008d96:	ed93 7b00 	vldr	d7, [r3]
 8008d9a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008d9e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8008da2:	ed83 7b00 	vstr	d7, [r3]
  t34_re = t68.re * 3.061616997868383E-17 + t69.re * 3.061616997868383E-17;
 8008da6:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8008daa:	ed93 7b00 	vldr	d7, [r3]
 8008dae:	ed1f 6b4c 	vldr	d6, [pc, #-304]	; 8008c80 <G_q+0x6860>
 8008db2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008db6:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8008dba:	ed93 7b00 	vldr	d7, [r3]
 8008dbe:	ed1f 5b50 	vldr	d5, [pc, #-320]	; 8008c80 <G_q+0x6860>
 8008dc2:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008dc6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008dca:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008dce:	443b      	add	r3, r7
 8008dd0:	ed83 7b00 	vstr	d7, [r3]
  t34_im = t68.im * 3.061616997868383E-17 + t69.im * 3.061616997868383E-17;
 8008dd4:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8008dd8:	ed93 7b02 	vldr	d7, [r3, #8]
 8008ddc:	ed1f 6b58 	vldr	d6, [pc, #-352]	; 8008c80 <G_q+0x6860>
 8008de0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008de4:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8008de8:	ed93 7b02 	vldr	d7, [r3, #8]
 8008dec:	ed1f 5b5c 	vldr	d5, [pc, #-368]	; 8008c80 <G_q+0x6860>
 8008df0:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008df4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008df8:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008dfc:	443b      	add	r3, r7
 8008dfe:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t66.re * 0.0 - t66.im * 0.5) - (t67.re * 0.0 - t67.im * 0.5);
 8008e02:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8008e06:	ed93 7b00 	vldr	d7, [r3]
 8008e0a:	ed1f 6b65 	vldr	d6, [pc, #-404]	; 8008c78 <G_q+0x6858>
 8008e0e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008e12:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8008e16:	ed93 7b02 	vldr	d7, [r3, #8]
 8008e1a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008e1e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008e22:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008e26:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8008e2a:	ed93 7b00 	vldr	d7, [r3]
 8008e2e:	ed1f 5b6e 	vldr	d5, [pc, #-440]	; 8008c78 <G_q+0x6858>
 8008e32:	ee27 5b05 	vmul.f64	d5, d7, d5
 8008e36:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8008e3a:	ed93 7b02 	vldr	d7, [r3, #8]
 8008e3e:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8008e42:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008e46:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008e4a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008e4e:	f241 3378 	movw	r3, #4984	; 0x1378
 8008e52:	443b      	add	r3, r7
 8008e54:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t66.re * 0.5 + t66.im * 0.0) - (t67.re * 0.5 + t67.im * 0.0);
 8008e58:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8008e5c:	ed93 7b00 	vldr	d7, [r3]
 8008e60:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8008e64:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008e68:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8008e6c:	ed93 7b02 	vldr	d7, [r3, #8]
 8008e70:	ed1f 5b7f 	vldr	d5, [pc, #-508]	; 8008c78 <G_q+0x6858>
 8008e74:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008e78:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008e7c:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8008e80:	ed93 7b00 	vldr	d7, [r3]
 8008e84:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008e88:	ee27 5b05 	vmul.f64	d5, d7, d5
 8008e8c:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8008e90:	ed93 7b02 	vldr	d7, [r3, #8]
 8008e94:	ed1f 4b88 	vldr	d4, [pc, #-544]	; 8008c78 <G_q+0x6858>
 8008e98:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008e9c:	ee35 7b07 	vadd.f64	d7, d5, d7
 8008ea0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008ea4:	f241 3370 	movw	r3, #4976	; 0x1370
 8008ea8:	443b      	add	r3, r7
 8008eaa:	ed83 7b00 	vstr	d7, [r3]
  t23_re = t58.re * 3.061616997868383E-17 + t59.re * 3.061616997868383E-17;
 8008eae:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8008eb2:	ed93 7b00 	vldr	d7, [r3]
 8008eb6:	ed1f 6b8e 	vldr	d6, [pc, #-568]	; 8008c80 <G_q+0x6860>
 8008eba:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008ebe:	4bca      	ldr	r3, [pc, #808]	; (80091e8 <G_q+0x6dc8>)
 8008ec0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8008ec4:	443a      	add	r2, r7
 8008ec6:	4413      	add	r3, r2
 8008ec8:	ed93 7b00 	vldr	d7, [r3]
 8008ecc:	ed9f 5bc0 	vldr	d5, [pc, #768]	; 80091d0 <G_q+0x6db0>
 8008ed0:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008ed4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008ed8:	f241 3330 	movw	r3, #4912	; 0x1330
 8008edc:	443b      	add	r3, r7
 8008ede:	ed83 7b00 	vstr	d7, [r3]
  t58_im = t58.im * 3.061616997868383E-17 + t59.im * 3.061616997868383E-17;
 8008ee2:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8008ee6:	ed93 7b02 	vldr	d7, [r3, #8]
 8008eea:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 80091d0 <G_q+0x6db0>
 8008eee:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008ef2:	4bbd      	ldr	r3, [pc, #756]	; (80091e8 <G_q+0x6dc8>)
 8008ef4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8008ef8:	443a      	add	r2, r7
 8008efa:	4413      	add	r3, r2
 8008efc:	ed93 7b02 	vldr	d7, [r3, #8]
 8008f00:	ed9f 5bb3 	vldr	d5, [pc, #716]	; 80091d0 <G_q+0x6db0>
 8008f04:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008f08:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8008f0c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008f10:	ed83 7b00 	vstr	d7, [r3]
  t60_re = (((t60.re * 0.0 - t60.im * 6.123233995736766E-17) - (t61.re * 0.0 -
 8008f14:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 8008f18:	ed93 7b00 	vldr	d7, [r3]
 8008f1c:	ed9f 6bae 	vldr	d6, [pc, #696]	; 80091d8 <G_q+0x6db8>
 8008f20:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008f24:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 8008f28:	ed93 7b02 	vldr	d7, [r3, #8]
 8008f2c:	ed9f 5bac 	vldr	d5, [pc, #688]	; 80091e0 <G_q+0x6dc0>
 8008f30:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008f34:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008f38:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8008f3c:	ed93 7b00 	vldr	d7, [r3]
 8008f40:	ed9f 5ba5 	vldr	d5, [pc, #660]	; 80091d8 <G_q+0x6db8>
 8008f44:	ee27 5b05 	vmul.f64	d5, d7, d5
              t61.im * 6.123233995736766E-17)) - (t20_re * t16_re - t20_im *
 8008f48:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8008f4c:	ed93 7b02 	vldr	d7, [r3, #8]
 8008f50:	ed9f 4ba3 	vldr	d4, [pc, #652]	; 80091e0 <G_q+0x6dc0>
 8008f54:	ee27 7b04 	vmul.f64	d7, d7, d4
  t60_re = (((t60.re * 0.0 - t60.im * 6.123233995736766E-17) - (t61.re * 0.0 -
 8008f58:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008f5c:	ee36 6b47 	vsub.f64	d6, d6, d7
              t61.im * 6.123233995736766E-17)) - (t20_re * t16_re - t20_im *
 8008f60:	f241 3348 	movw	r3, #4936	; 0x1348
 8008f64:	443b      	add	r3, r7
 8008f66:	ed93 5b00 	vldr	d5, [r3]
 8008f6a:	f241 3368 	movw	r3, #4968	; 0x1368
 8008f6e:	443b      	add	r3, r7
 8008f70:	ed93 7b00 	vldr	d7, [r3]
 8008f74:	ee25 5b07 	vmul.f64	d5, d5, d7
 8008f78:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8008f7c:	ed93 4b00 	vldr	d4, [r3]
 8008f80:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8008f84:	ed93 7b00 	vldr	d7, [r3]
 8008f88:	ee24 7b07 	vmul.f64	d7, d4, d7
 8008f8c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008f90:	ee36 6b47 	vsub.f64	d6, d6, d7
             t16_im)) + (t34_re * t13_re - t34_im * t13_im);
 8008f94:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008f98:	443b      	add	r3, r7
 8008f9a:	ed93 5b00 	vldr	d5, [r3]
 8008f9e:	f241 3378 	movw	r3, #4984	; 0x1378
 8008fa2:	443b      	add	r3, r7
 8008fa4:	ed93 7b00 	vldr	d7, [r3]
 8008fa8:	ee25 5b07 	vmul.f64	d5, d5, d7
 8008fac:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008fb0:	443b      	add	r3, r7
 8008fb2:	ed93 4b00 	vldr	d4, [r3]
 8008fb6:	f241 3370 	movw	r3, #4976	; 0x1370
 8008fba:	443b      	add	r3, r7
 8008fbc:	ed93 7b00 	vldr	d7, [r3]
 8008fc0:	ee24 7b07 	vmul.f64	d7, d4, d7
 8008fc4:	ee35 7b47 	vsub.f64	d7, d5, d7
  t60_re = (((t60.re * 0.0 - t60.im * 6.123233995736766E-17) - (t61.re * 0.0 -
 8008fc8:	f241 2350 	movw	r3, #4688	; 0x1250
 8008fcc:	443b      	add	r3, r7
 8008fce:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008fd2:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (((t60.re * 6.123233995736766E-17 + t60.im * 0.0) - (t61.re *
 8008fd6:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 8008fda:	ed93 7b00 	vldr	d7, [r3]
 8008fde:	ed9f 6b80 	vldr	d6, [pc, #512]	; 80091e0 <G_q+0x6dc0>
 8008fe2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008fe6:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 8008fea:	ed93 7b02 	vldr	d7, [r3, #8]
 8008fee:	ed9f 5b7a 	vldr	d5, [pc, #488]	; 80091d8 <G_q+0x6db8>
 8008ff2:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008ff6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008ffa:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8008ffe:	ed93 7b00 	vldr	d7, [r3]
 8009002:	ed9f 5b77 	vldr	d5, [pc, #476]	; 80091e0 <G_q+0x6dc0>
 8009006:	ee27 5b05 	vmul.f64	d5, d7, d5
              6.123233995736766E-17 + t61.im * 0.0)) - (t20_re * t16_im + t20_im
 800900a:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 800900e:	ed93 7b02 	vldr	d7, [r3, #8]
 8009012:	ed9f 4b71 	vldr	d4, [pc, #452]	; 80091d8 <G_q+0x6db8>
 8009016:	ee27 7b04 	vmul.f64	d7, d7, d4
 800901a:	ee35 7b07 	vadd.f64	d7, d5, d7
  t20_im = (((t60.re * 6.123233995736766E-17 + t60.im * 0.0) - (t61.re *
 800901e:	ee36 6b47 	vsub.f64	d6, d6, d7
              6.123233995736766E-17 + t61.im * 0.0)) - (t20_re * t16_im + t20_im
 8009022:	f241 3348 	movw	r3, #4936	; 0x1348
 8009026:	443b      	add	r3, r7
 8009028:	ed93 5b00 	vldr	d5, [r3]
 800902c:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8009030:	ed93 7b00 	vldr	d7, [r3]
 8009034:	ee25 5b07 	vmul.f64	d5, d5, d7
             * t16_re)) + (t34_re * t13_im + t34_im * t13_re);
 8009038:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800903c:	ed93 4b00 	vldr	d4, [r3]
 8009040:	f241 3368 	movw	r3, #4968	; 0x1368
 8009044:	443b      	add	r3, r7
 8009046:	ed93 7b00 	vldr	d7, [r3]
 800904a:	ee24 7b07 	vmul.f64	d7, d4, d7
              6.123233995736766E-17 + t61.im * 0.0)) - (t20_re * t16_im + t20_im
 800904e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8009052:	ee36 6b47 	vsub.f64	d6, d6, d7
             * t16_re)) + (t34_re * t13_im + t34_im * t13_re);
 8009056:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800905a:	443b      	add	r3, r7
 800905c:	ed93 5b00 	vldr	d5, [r3]
 8009060:	f241 3370 	movw	r3, #4976	; 0x1370
 8009064:	443b      	add	r3, r7
 8009066:	ed93 7b00 	vldr	d7, [r3]
 800906a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800906e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8009072:	443b      	add	r3, r7
 8009074:	ed93 4b00 	vldr	d4, [r3]
 8009078:	f241 3378 	movw	r3, #4984	; 0x1378
 800907c:	443b      	add	r3, r7
 800907e:	ed93 7b00 	vldr	d7, [r3]
 8009082:	ee24 7b07 	vmul.f64	d7, d4, d7
 8009086:	ee35 7b07 	vadd.f64	d7, d5, d7
  t20_im = (((t60.re * 6.123233995736766E-17 + t60.im * 0.0) - (t61.re *
 800908a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800908e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8009092:	ed83 7b00 	vstr	d7, [r3]
  if (t78.im == 0.0) {
 8009096:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 800909a:	ed93 7b02 	vldr	d7, [r3, #8]
 800909e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80090a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090a6:	d116      	bne.n	80090d6 <G_q+0x6cb6>
    t16_re = t78.re / 2.0;
 80090a8:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 80090ac:	ed93 6b00 	vldr	d6, [r3]
 80090b0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80090b4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80090b8:	f241 3368 	movw	r3, #4968	; 0x1368
 80090bc:	443b      	add	r3, r7
 80090be:	ed83 7b00 	vstr	d7, [r3]
    t12_re = 0.0;
 80090c2:	f04f 0300 	mov.w	r3, #0
 80090c6:	f04f 0400 	mov.w	r4, #0
 80090ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80090ce:	443a      	add	r2, r7
 80090d0:	e9c2 3400 	strd	r3, r4, [r2]
 80090d4:	e039      	b.n	800914a <G_q+0x6d2a>
  } else if (t78.re == 0.0) {
 80090d6:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 80090da:	ed93 7b00 	vldr	d7, [r3]
 80090de:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80090e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090e6:	d116      	bne.n	8009116 <G_q+0x6cf6>
    t16_re = 0.0;
 80090e8:	f04f 0300 	mov.w	r3, #0
 80090ec:	f04f 0400 	mov.w	r4, #0
 80090f0:	f241 3268 	movw	r2, #4968	; 0x1368
 80090f4:	443a      	add	r2, r7
 80090f6:	e9c2 3400 	strd	r3, r4, [r2]
    t12_re = t78.im / 2.0;
 80090fa:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 80090fe:	ed93 6b02 	vldr	d6, [r3, #8]
 8009102:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009106:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800910a:	f241 3388 	movw	r3, #5000	; 0x1388
 800910e:	443b      	add	r3, r7
 8009110:	ed83 7b00 	vstr	d7, [r3]
 8009114:	e019      	b.n	800914a <G_q+0x6d2a>
  } else {
    t16_re = t78.re / 2.0;
 8009116:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 800911a:	ed93 6b00 	vldr	d6, [r3]
 800911e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009122:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009126:	f241 3368 	movw	r3, #4968	; 0x1368
 800912a:	443b      	add	r3, r7
 800912c:	ed83 7b00 	vstr	d7, [r3]
    t12_re = t78.im / 2.0;
 8009130:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8009134:	ed93 6b02 	vldr	d6, [r3, #8]
 8009138:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800913c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009140:	f241 3388 	movw	r3, #5000	; 0x1388
 8009144:	443b      	add	r3, r7
 8009146:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t79.im == 0.0) {
 800914a:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 800914e:	ed93 7b02 	vldr	d7, [r3, #8]
 8009152:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800915a:	d116      	bne.n	800918a <G_q+0x6d6a>
    t34_re = t79.re / 2.0;
 800915c:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 8009160:	ed93 6b00 	vldr	d6, [r3]
 8009164:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009168:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800916c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009170:	443b      	add	r3, r7
 8009172:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8009176:	f04f 0300 	mov.w	r3, #0
 800917a:	f04f 0400 	mov.w	r4, #0
 800917e:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8009182:	443a      	add	r2, r7
 8009184:	e9c2 3400 	strd	r3, r4, [r2]
 8009188:	e04a      	b.n	8009220 <G_q+0x6e00>
  } else if (t79.re == 0.0) {
 800918a:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 800918e:	ed93 7b00 	vldr	d7, [r3]
 8009192:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800919a:	d127      	bne.n	80091ec <G_q+0x6dcc>
    t34_re = 0.0;
 800919c:	f04f 0300 	mov.w	r3, #0
 80091a0:	f04f 0400 	mov.w	r4, #0
 80091a4:	f241 32b8 	movw	r2, #5048	; 0x13b8
 80091a8:	443a      	add	r2, r7
 80091aa:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t79.im / 2.0;
 80091ae:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 80091b2:	ed93 6b02 	vldr	d6, [r3, #8]
 80091b6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80091ba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80091be:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80091c2:	443b      	add	r3, r7
 80091c4:	ed83 7b00 	vstr	d7, [r3]
 80091c8:	e02a      	b.n	8009220 <G_q+0x6e00>
 80091ca:	bf00      	nop
 80091cc:	f3af 8000 	nop.w
 80091d0:	33145c07 	.word	0x33145c07
 80091d4:	3c81a626 	.word	0x3c81a626
	...
 80091e0:	33145c07 	.word	0x33145c07
 80091e4:	3c91a626 	.word	0x3c91a626
 80091e8:	ffffedb0 	.word	0xffffedb0
  } else {
    t34_re = t79.re / 2.0;
 80091ec:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 80091f0:	ed93 6b00 	vldr	d6, [r3]
 80091f4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80091f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80091fc:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009200:	443b      	add	r3, r7
 8009202:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t79.im / 2.0;
 8009206:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 800920a:	ed93 6b02 	vldr	d6, [r3, #8]
 800920e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009212:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009216:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800921a:	443b      	add	r3, r7
 800921c:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t80.im == 0.0) {
 8009220:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8009224:	ed93 7b02 	vldr	d7, [r3, #8]
 8009228:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800922c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009230:	d115      	bne.n	800925e <G_q+0x6e3e>
    t16_im = t80.re / 2.0;
 8009232:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8009236:	ed93 6b00 	vldr	d6, [r3]
 800923a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800923e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009242:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8009246:	ed83 7b00 	vstr	d7, [r3]
    t20_re = 0.0;
 800924a:	f04f 0300 	mov.w	r3, #0
 800924e:	f04f 0400 	mov.w	r4, #0
 8009252:	f241 3248 	movw	r2, #4936	; 0x1348
 8009256:	443a      	add	r2, r7
 8009258:	e9c2 3400 	strd	r3, r4, [r2]
 800925c:	e037      	b.n	80092ce <G_q+0x6eae>
  } else if (t80.re == 0.0) {
 800925e:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8009262:	ed93 7b00 	vldr	d7, [r3]
 8009266:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800926a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800926e:	d115      	bne.n	800929c <G_q+0x6e7c>
    t16_im = 0.0;
 8009270:	f04f 0300 	mov.w	r3, #0
 8009274:	f04f 0400 	mov.w	r4, #0
 8009278:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800927c:	e9c2 3400 	strd	r3, r4, [r2]
    t20_re = t80.im / 2.0;
 8009280:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8009284:	ed93 6b02 	vldr	d6, [r3, #8]
 8009288:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800928c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009290:	f241 3348 	movw	r3, #4936	; 0x1348
 8009294:	443b      	add	r3, r7
 8009296:	ed83 7b00 	vstr	d7, [r3]
 800929a:	e018      	b.n	80092ce <G_q+0x6eae>
  } else {
    t16_im = t80.re / 2.0;
 800929c:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 80092a0:	ed93 6b00 	vldr	d6, [r3]
 80092a4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80092a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80092ac:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80092b0:	ed83 7b00 	vstr	d7, [r3]
    t20_re = t80.im / 2.0;
 80092b4:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 80092b8:	ed93 6b02 	vldr	d6, [r3, #8]
 80092bc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80092c0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80092c4:	f241 3348 	movw	r3, #4936	; 0x1348
 80092c8:	443b      	add	r3, r7
 80092ca:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t81.im == 0.0) {
 80092ce:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80092d2:	ed93 7b02 	vldr	d7, [r3, #8]
 80092d6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80092da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092de:	d116      	bne.n	800930e <G_q+0x6eee>
    t13_re = t81.re / 2.0;
 80092e0:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80092e4:	ed93 6b00 	vldr	d6, [r3]
 80092e8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80092ec:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80092f0:	f241 3378 	movw	r3, #4984	; 0x1378
 80092f4:	443b      	add	r3, r7
 80092f6:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 80092fa:	f04f 0300 	mov.w	r3, #0
 80092fe:	f04f 0400 	mov.w	r4, #0
 8009302:	f241 3270 	movw	r2, #4976	; 0x1370
 8009306:	443a      	add	r2, r7
 8009308:	e9c2 3400 	strd	r3, r4, [r2]
 800930c:	e039      	b.n	8009382 <G_q+0x6f62>
  } else if (t81.re == 0.0) {
 800930e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8009312:	ed93 7b00 	vldr	d7, [r3]
 8009316:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800931a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800931e:	d116      	bne.n	800934e <G_q+0x6f2e>
    t13_re = 0.0;
 8009320:	f04f 0300 	mov.w	r3, #0
 8009324:	f04f 0400 	mov.w	r4, #0
 8009328:	f241 3278 	movw	r2, #4984	; 0x1378
 800932c:	443a      	add	r2, r7
 800932e:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t81.im / 2.0;
 8009332:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8009336:	ed93 6b02 	vldr	d6, [r3, #8]
 800933a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800933e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009342:	f241 3370 	movw	r3, #4976	; 0x1370
 8009346:	443b      	add	r3, r7
 8009348:	ed83 7b00 	vstr	d7, [r3]
 800934c:	e019      	b.n	8009382 <G_q+0x6f62>
  } else {
    t13_re = t81.re / 2.0;
 800934e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8009352:	ed93 6b00 	vldr	d6, [r3]
 8009356:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800935a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800935e:	f241 3378 	movw	r3, #4984	; 0x1378
 8009362:	443b      	add	r3, r7
 8009364:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t81.im / 2.0;
 8009368:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800936c:	ed93 6b02 	vldr	d6, [r3, #8]
 8009370:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009374:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009378:	f241 3370 	movw	r3, #4976	; 0x1370
 800937c:	443b      	add	r3, r7
 800937e:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re += t34_re;
 8009382:	f241 3368 	movw	r3, #4968	; 0x1368
 8009386:	443b      	add	r3, r7
 8009388:	ed93 6b00 	vldr	d6, [r3]
 800938c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009390:	443b      	add	r3, r7
 8009392:	ed93 7b00 	vldr	d7, [r3]
 8009396:	ee36 7b07 	vadd.f64	d7, d6, d7
 800939a:	f241 3368 	movw	r3, #4968	; 0x1368
 800939e:	443b      	add	r3, r7
 80093a0:	ed83 7b00 	vstr	d7, [r3]
  t12_re += t34_im;
 80093a4:	f241 3388 	movw	r3, #5000	; 0x1388
 80093a8:	443b      	add	r3, r7
 80093aa:	ed93 6b00 	vldr	d6, [r3]
 80093ae:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80093b2:	443b      	add	r3, r7
 80093b4:	ed93 7b00 	vldr	d7, [r3]
 80093b8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80093bc:	f241 3388 	movw	r3, #5000	; 0x1388
 80093c0:	443b      	add	r3, r7
 80093c2:	ed83 7b00 	vstr	d7, [r3]
  t16_im += t13_re;
 80093c6:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80093ca:	ed93 6b00 	vldr	d6, [r3]
 80093ce:	f241 3378 	movw	r3, #4984	; 0x1378
 80093d2:	443b      	add	r3, r7
 80093d4:	ed93 7b00 	vldr	d7, [r3]
 80093d8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80093dc:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80093e0:	ed83 7b00 	vstr	d7, [r3]
  t20_re += t13_im;
 80093e4:	f241 3348 	movw	r3, #4936	; 0x1348
 80093e8:	443b      	add	r3, r7
 80093ea:	ed93 6b00 	vldr	d6, [r3]
 80093ee:	f241 3370 	movw	r3, #4976	; 0x1370
 80093f2:	443b      	add	r3, r7
 80093f4:	ed93 7b00 	vldr	d7, [r3]
 80093f8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80093fc:	f241 3348 	movw	r3, #4936	; 0x1348
 8009400:	443b      	add	r3, r7
 8009402:	ed83 7b00 	vstr	d7, [r3]
  t34_re = (t83.re * 0.0 - t83.im * 0.5) - (t82.re * 0.0 - t82.im * 0.5);
 8009406:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 800940a:	ed93 7b00 	vldr	d7, [r3]
 800940e:	ed9f 6bec 	vldr	d6, [pc, #944]	; 80097c0 <G_q+0x73a0>
 8009412:	ee27 6b06 	vmul.f64	d6, d7, d6
 8009416:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 800941a:	ed93 7b02 	vldr	d7, [r3, #8]
 800941e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009422:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009426:	ee36 6b47 	vsub.f64	d6, d6, d7
 800942a:	f507 634b 	add.w	r3, r7, #3248	; 0xcb0
 800942e:	ed93 7b00 	vldr	d7, [r3]
 8009432:	ed9f 5be3 	vldr	d5, [pc, #908]	; 80097c0 <G_q+0x73a0>
 8009436:	ee27 5b05 	vmul.f64	d5, d7, d5
 800943a:	f507 634b 	add.w	r3, r7, #3248	; 0xcb0
 800943e:	ed93 7b02 	vldr	d7, [r3, #8]
 8009442:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8009446:	ee27 7b04 	vmul.f64	d7, d7, d4
 800944a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800944e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009452:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009456:	443b      	add	r3, r7
 8009458:	ed83 7b00 	vstr	d7, [r3]
  t34_im = (t83.re * 0.5 + t83.im * 0.0) - (t82.re * 0.5 + t82.im * 0.0);
 800945c:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8009460:	ed93 7b00 	vldr	d7, [r3]
 8009464:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8009468:	ee27 6b06 	vmul.f64	d6, d7, d6
 800946c:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8009470:	ed93 7b02 	vldr	d7, [r3, #8]
 8009474:	ed9f 5bd2 	vldr	d5, [pc, #840]	; 80097c0 <G_q+0x73a0>
 8009478:	ee27 7b05 	vmul.f64	d7, d7, d5
 800947c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8009480:	f507 634b 	add.w	r3, r7, #3248	; 0xcb0
 8009484:	ed93 7b00 	vldr	d7, [r3]
 8009488:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800948c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8009490:	f507 634b 	add.w	r3, r7, #3248	; 0xcb0
 8009494:	ed93 7b02 	vldr	d7, [r3, #8]
 8009498:	ed9f 4bc9 	vldr	d4, [pc, #804]	; 80097c0 <G_q+0x73a0>
 800949c:	ee27 7b04 	vmul.f64	d7, d7, d4
 80094a0:	ee35 7b07 	vadd.f64	d7, d5, d7
 80094a4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80094a8:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80094ac:	443b      	add	r3, r7
 80094ae:	ed83 7b00 	vstr	d7, [r3]
  t12_im = (t85.re * 0.0 - t85.im * 0.5) - (t84.re * 0.0 - t84.im * 0.5);
 80094b2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80094b6:	ed93 7b00 	vldr	d7, [r3]
 80094ba:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 80097c0 <G_q+0x73a0>
 80094be:	ee27 6b06 	vmul.f64	d6, d7, d6
 80094c2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80094c6:	ed93 7b02 	vldr	d7, [r3, #8]
 80094ca:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80094ce:	ee27 7b05 	vmul.f64	d7, d7, d5
 80094d2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80094d6:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80094da:	ed93 7b00 	vldr	d7, [r3]
 80094de:	ed9f 5bb8 	vldr	d5, [pc, #736]	; 80097c0 <G_q+0x73a0>
 80094e2:	ee27 5b05 	vmul.f64	d5, d7, d5
 80094e6:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80094ea:	ed93 7b02 	vldr	d7, [r3, #8]
 80094ee:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80094f2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80094f6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80094fa:	ee36 7b47 	vsub.f64	d7, d6, d7
 80094fe:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8009502:	ed83 7b00 	vstr	d7, [r3]
  t85_im = (t85.re * 0.5 + t85.im * 0.0) - (t84.re * 0.5 + t84.im * 0.0);
 8009506:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800950a:	ed93 7b00 	vldr	d7, [r3]
 800950e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8009512:	ee27 6b06 	vmul.f64	d6, d7, d6
 8009516:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800951a:	ed93 7b02 	vldr	d7, [r3, #8]
 800951e:	ed9f 5ba8 	vldr	d5, [pc, #672]	; 80097c0 <G_q+0x73a0>
 8009522:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009526:	ee36 6b07 	vadd.f64	d6, d6, d7
 800952a:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 800952e:	ed93 7b00 	vldr	d7, [r3]
 8009532:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009536:	ee27 5b05 	vmul.f64	d5, d7, d5
 800953a:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 800953e:	ed93 7b02 	vldr	d7, [r3, #8]
 8009542:	ed9f 4b9f 	vldr	d4, [pc, #636]	; 80097c0 <G_q+0x73a0>
 8009546:	ee27 7b04 	vmul.f64	d7, d7, d4
 800954a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800954e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009552:	f241 3318 	movw	r3, #4888	; 0x1318
 8009556:	443b      	add	r3, r7
 8009558:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t16_re * t16_im - t12_re * t20_re) + (t34_re * t12_im - t34_im *
 800955c:	f241 3368 	movw	r3, #4968	; 0x1368
 8009560:	443b      	add	r3, r7
 8009562:	ed93 6b00 	vldr	d6, [r3]
 8009566:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800956a:	ed93 7b00 	vldr	d7, [r3]
 800956e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009572:	f241 3388 	movw	r3, #5000	; 0x1388
 8009576:	443b      	add	r3, r7
 8009578:	ed93 5b00 	vldr	d5, [r3]
 800957c:	f241 3348 	movw	r3, #4936	; 0x1348
 8009580:	443b      	add	r3, r7
 8009582:	ed93 7b00 	vldr	d7, [r3]
 8009586:	ee25 7b07 	vmul.f64	d7, d5, d7
 800958a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800958e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009592:	443b      	add	r3, r7
 8009594:	ed93 5b00 	vldr	d5, [r3]
 8009598:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800959c:	ed93 7b00 	vldr	d7, [r3]
 80095a0:	ee25 5b07 	vmul.f64	d5, d5, d7
 80095a4:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80095a8:	443b      	add	r3, r7
 80095aa:	ed93 4b00 	vldr	d4, [r3]
 80095ae:	f241 3318 	movw	r3, #4888	; 0x1318
 80095b2:	443b      	add	r3, r7
 80095b4:	ed93 7b00 	vldr	d7, [r3]
 80095b8:	ee24 7b07 	vmul.f64	d7, d4, d7
 80095bc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80095c0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80095c4:	f241 3370 	movw	r3, #4976	; 0x1370
 80095c8:	443b      	add	r3, r7
 80095ca:	ed83 7b00 	vstr	d7, [r3]
    t85_im);
  t12_re = (t16_re * t20_re + t12_re * t16_im) + (t34_re * t85_im + t34_im *
 80095ce:	f241 3368 	movw	r3, #4968	; 0x1368
 80095d2:	443b      	add	r3, r7
 80095d4:	ed93 6b00 	vldr	d6, [r3]
 80095d8:	f241 3348 	movw	r3, #4936	; 0x1348
 80095dc:	443b      	add	r3, r7
 80095de:	ed93 7b00 	vldr	d7, [r3]
 80095e2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80095e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80095ea:	443b      	add	r3, r7
 80095ec:	ed93 5b00 	vldr	d5, [r3]
 80095f0:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80095f4:	ed93 7b00 	vldr	d7, [r3]
 80095f8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80095fc:	ee36 6b07 	vadd.f64	d6, d6, d7
 8009600:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009604:	443b      	add	r3, r7
 8009606:	ed93 5b00 	vldr	d5, [r3]
 800960a:	f241 3318 	movw	r3, #4888	; 0x1318
 800960e:	443b      	add	r3, r7
 8009610:	ed93 7b00 	vldr	d7, [r3]
 8009614:	ee25 5b07 	vmul.f64	d5, d5, d7
 8009618:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800961c:	443b      	add	r3, r7
 800961e:	ed93 4b00 	vldr	d4, [r3]
 8009622:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8009626:	ed93 7b00 	vldr	d7, [r3]
 800962a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800962e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8009632:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009636:	f241 3388 	movw	r3, #5000	; 0x1388
 800963a:	443b      	add	r3, r7
 800963c:	ed83 7b00 	vstr	d7, [r3]
    t12_im);
  t13_re = (t19_re_tmp - t87.im * 3.061616997868383E-17) - (t86.re * 0.0 -
 8009640:	4b65      	ldr	r3, [pc, #404]	; (80097d8 <G_q+0x73b8>)
 8009642:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8009646:	443a      	add	r2, r7
 8009648:	4413      	add	r3, r2
 800964a:	ed93 7b02 	vldr	d7, [r3, #8]
 800964e:	ed9f 6b5e 	vldr	d6, [pc, #376]	; 80097c8 <G_q+0x73a8>
 8009652:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009656:	f241 2370 	movw	r3, #4720	; 0x1270
 800965a:	443b      	add	r3, r7
 800965c:	ed93 6b00 	vldr	d6, [r3]
 8009660:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009664:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8009668:	ed93 7b00 	vldr	d7, [r3]
 800966c:	ed9f 5b54 	vldr	d5, [pc, #336]	; 80097c0 <G_q+0x73a0>
 8009670:	ee27 5b05 	vmul.f64	d5, d7, d5
    t86.im * 3.061616997868383E-17);
 8009674:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8009678:	ed93 7b02 	vldr	d7, [r3, #8]
 800967c:	ed9f 4b52 	vldr	d4, [pc, #328]	; 80097c8 <G_q+0x73a8>
 8009680:	ee27 7b04 	vmul.f64	d7, d7, d4
  t13_re = (t19_re_tmp - t87.im * 3.061616997868383E-17) - (t86.re * 0.0 -
 8009684:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009688:	ee36 7b47 	vsub.f64	d7, d6, d7
 800968c:	f241 3378 	movw	r3, #4984	; 0x1378
 8009690:	443b      	add	r3, r7
 8009692:	ed83 7b00 	vstr	d7, [r3]
  t34_re = (t87.re * 3.061616997868383E-17 + t19_im_tmp) - (t86.re *
 8009696:	4b50      	ldr	r3, [pc, #320]	; (80097d8 <G_q+0x73b8>)
 8009698:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800969c:	443a      	add	r2, r7
 800969e:	4413      	add	r3, r2
 80096a0:	ed93 7b00 	vldr	d7, [r3]
 80096a4:	ed9f 6b48 	vldr	d6, [pc, #288]	; 80097c8 <G_q+0x73a8>
 80096a8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80096ac:	f241 2368 	movw	r3, #4712	; 0x1268
 80096b0:	443b      	add	r3, r7
 80096b2:	ed93 7b00 	vldr	d7, [r3]
 80096b6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80096ba:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80096be:	ed93 7b00 	vldr	d7, [r3]
 80096c2:	ed9f 5b41 	vldr	d5, [pc, #260]	; 80097c8 <G_q+0x73a8>
 80096c6:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t86.im * 0.0);
 80096ca:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80096ce:	ed93 7b02 	vldr	d7, [r3, #8]
 80096d2:	ed9f 4b3b 	vldr	d4, [pc, #236]	; 80097c0 <G_q+0x73a0>
 80096d6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80096da:	ee35 7b07 	vadd.f64	d7, d5, d7
  t34_re = (t87.re * 3.061616997868383E-17 + t19_im_tmp) - (t86.re *
 80096de:	ee36 7b47 	vsub.f64	d7, d6, d7
 80096e2:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80096e6:	443b      	add	r3, r7
 80096e8:	ed83 7b00 	vstr	d7, [r3]
  b_t54_re += t55_re;
 80096ec:	f241 23f0 	movw	r3, #4848	; 0x12f0
 80096f0:	443b      	add	r3, r7
 80096f2:	ed93 6b00 	vldr	d6, [r3]
 80096f6:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 80096fa:	ed93 7b00 	vldr	d7, [r3]
 80096fe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009702:	f241 23f0 	movw	r3, #4848	; 0x12f0
 8009706:	443b      	add	r3, r7
 8009708:	ed83 7b00 	vstr	d7, [r3]
  b_t54_im += t55_im;
 800970c:	f241 23e8 	movw	r3, #4840	; 0x12e8
 8009710:	443b      	add	r3, r7
 8009712:	ed93 6b00 	vldr	d6, [r3]
 8009716:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800971a:	443b      	add	r3, r7
 800971c:	ed93 7b00 	vldr	d7, [r3]
 8009720:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009724:	f241 23e8 	movw	r3, #4840	; 0x12e8
 8009728:	443b      	add	r3, r7
 800972a:	ed83 7b00 	vstr	d7, [r3]
  t34_im = (((((t56.re * 0.0 - t56.im * 3.749399456654644E-33) - (t57.re * 0.0 -
 800972e:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8009732:	ed93 7b00 	vldr	d7, [r3]
 8009736:	ed9f 6b22 	vldr	d6, [pc, #136]	; 80097c0 <G_q+0x73a0>
 800973a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800973e:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8009742:	ed93 7b02 	vldr	d7, [r3, #8]
 8009746:	ed9f 5b22 	vldr	d5, [pc, #136]	; 80097d0 <G_q+0x73b0>
 800974a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800974e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009752:	f507 633e 	add.w	r3, r7, #3040	; 0xbe0
 8009756:	ed93 7b00 	vldr	d7, [r3]
 800975a:	ed9f 5b19 	vldr	d5, [pc, #100]	; 80097c0 <G_q+0x73a0>
 800975e:	ee27 5b05 	vmul.f64	d5, d7, d5
    t57.im * 3.749399456654644E-33)) + (t70_re * t72_re - t70_im * b_t10_re)) -
 8009762:	f507 633e 	add.w	r3, r7, #3040	; 0xbe0
 8009766:	ed93 7b02 	vldr	d7, [r3, #8]
 800976a:	ed9f 4b19 	vldr	d4, [pc, #100]	; 80097d0 <G_q+0x73b0>
 800976e:	ee27 7b04 	vmul.f64	d7, d7, d4
  t34_im = (((((t56.re * 0.0 - t56.im * 3.749399456654644E-33) - (t57.re * 0.0 -
 8009772:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009776:	ee36 6b47 	vsub.f64	d6, d6, d7
    t57.im * 3.749399456654644E-33)) + (t70_re * t72_re - t70_im * b_t10_re)) -
 800977a:	f241 22d0 	movw	r2, #4816	; 0x12d0
 800977e:	443a      	add	r2, r7
 8009780:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8009784:	ed92 5b00 	vldr	d5, [r2]
 8009788:	ed93 7b00 	vldr	d7, [r3]
 800978c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8009790:	f241 23c8 	movw	r3, #4808	; 0x12c8
 8009794:	443b      	add	r3, r7
 8009796:	ed93 4b00 	vldr	d4, [r3]
 800979a:	f241 3338 	movw	r3, #4920	; 0x1338
 800979e:	443b      	add	r3, r7
 80097a0:	ed93 7b00 	vldr	d7, [r3]
 80097a4:	ee24 7b07 	vmul.f64	d7, d4, d7
 80097a8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80097ac:	ee36 6b07 	vadd.f64	d6, d6, d7
             (t74_re * t76_re - t74_im * t3_im)) + (t23_re * t60_re - t58_im *
 80097b0:	f241 22b8 	movw	r2, #4792	; 0x12b8
 80097b4:	443a      	add	r2, r7
 80097b6:	f241 23a8 	movw	r3, #4776	; 0x12a8
 80097ba:	443b      	add	r3, r7
 80097bc:	e00e      	b.n	80097dc <G_q+0x73bc>
 80097be:	bf00      	nop
	...
 80097c8:	33145c07 	.word	0x33145c07
 80097cc:	3c81a626 	.word	0x3c81a626
 80097d0:	858a5d48 	.word	0x858a5d48
 80097d4:	393377ce 	.word	0x393377ce
 80097d8:	ffffedd0 	.word	0xffffedd0
 80097dc:	ed92 5b00 	vldr	d5, [r2]
 80097e0:	ed93 7b00 	vldr	d7, [r3]
 80097e4:	ee25 5b07 	vmul.f64	d5, d5, d7
 80097e8:	f241 23b0 	movw	r3, #4784	; 0x12b0
 80097ec:	443b      	add	r3, r7
 80097ee:	ed93 4b00 	vldr	d4, [r3]
 80097f2:	f241 3310 	movw	r3, #4880	; 0x1310
 80097f6:	443b      	add	r3, r7
 80097f8:	ed93 7b00 	vldr	d7, [r3]
 80097fc:	ee24 7b07 	vmul.f64	d7, d4, d7
 8009800:	ee35 7b47 	vsub.f64	d7, d5, d7
    t57.im * 3.749399456654644E-33)) + (t70_re * t72_re - t70_im * b_t10_re)) -
 8009804:	ee36 6b47 	vsub.f64	d6, d6, d7
             (t74_re * t76_re - t74_im * t3_im)) + (t23_re * t60_re - t58_im *
 8009808:	f241 2350 	movw	r3, #4688	; 0x1250
 800980c:	443b      	add	r3, r7
 800980e:	f241 3230 	movw	r2, #4912	; 0x1330
 8009812:	443a      	add	r2, r7
 8009814:	ed92 5b00 	vldr	d5, [r2]
 8009818:	ed93 7b00 	vldr	d7, [r3]
 800981c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8009820:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8009824:	ed93 4b00 	vldr	d4, [r3]
 8009828:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800982c:	ed93 7b00 	vldr	d7, [r3]
 8009830:	ee24 7b07 	vmul.f64	d7, d4, d7
 8009834:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009838:	ee36 6b07 	vadd.f64	d6, d6, d7
             t20_im)) + (t13_im * t13_re - t12_re * t34_re);
 800983c:	f241 3370 	movw	r3, #4976	; 0x1370
 8009840:	443b      	add	r3, r7
 8009842:	ed93 5b00 	vldr	d5, [r3]
 8009846:	f241 3378 	movw	r3, #4984	; 0x1378
 800984a:	443b      	add	r3, r7
 800984c:	ed93 7b00 	vldr	d7, [r3]
 8009850:	ee25 5b07 	vmul.f64	d5, d5, d7
 8009854:	f241 3388 	movw	r3, #5000	; 0x1388
 8009858:	443b      	add	r3, r7
 800985a:	ed93 4b00 	vldr	d4, [r3]
 800985e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009862:	443b      	add	r3, r7
 8009864:	ed93 7b00 	vldr	d7, [r3]
 8009868:	ee24 7b07 	vmul.f64	d7, d4, d7
 800986c:	ee35 7b47 	vsub.f64	d7, d5, d7
  t34_im = (((((t56.re * 0.0 - t56.im * 3.749399456654644E-33) - (t57.re * 0.0 -
 8009870:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009874:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8009878:	443b      	add	r3, r7
 800987a:	ed83 7b00 	vstr	d7, [r3]
  t34_re = (((((t56.re * 3.749399456654644E-33 + t56.im * 0.0) - (t57.re *
 800987e:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8009882:	ed93 7b00 	vldr	d7, [r3]
 8009886:	ed9f 6be8 	vldr	d6, [pc, #928]	; 8009c28 <G_q+0x7808>
 800988a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800988e:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8009892:	ed93 7b02 	vldr	d7, [r3, #8]
 8009896:	ed9f 5be6 	vldr	d5, [pc, #920]	; 8009c30 <G_q+0x7810>
 800989a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800989e:	ee36 6b07 	vadd.f64	d6, d6, d7
 80098a2:	f507 633e 	add.w	r3, r7, #3040	; 0xbe0
 80098a6:	ed93 7b00 	vldr	d7, [r3]
 80098aa:	ed9f 5bdf 	vldr	d5, [pc, #892]	; 8009c28 <G_q+0x7808>
 80098ae:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.749399456654644E-33 + t57.im * 0.0)) + (t70_re * b_t10_re + t70_im *
 80098b2:	f507 633e 	add.w	r3, r7, #3040	; 0xbe0
 80098b6:	ed93 7b02 	vldr	d7, [r3, #8]
 80098ba:	ed9f 4bdd 	vldr	d4, [pc, #884]	; 8009c30 <G_q+0x7810>
 80098be:	ee27 7b04 	vmul.f64	d7, d7, d4
 80098c2:	ee35 7b07 	vadd.f64	d7, d5, d7
  t34_re = (((((t56.re * 3.749399456654644E-33 + t56.im * 0.0) - (t57.re *
 80098c6:	ee36 6b47 	vsub.f64	d6, d6, d7
    3.749399456654644E-33 + t57.im * 0.0)) + (t70_re * b_t10_re + t70_im *
 80098ca:	f241 23d0 	movw	r3, #4816	; 0x12d0
 80098ce:	443b      	add	r3, r7
 80098d0:	ed93 5b00 	vldr	d5, [r3]
 80098d4:	f241 3338 	movw	r3, #4920	; 0x1338
 80098d8:	443b      	add	r3, r7
 80098da:	ed93 7b00 	vldr	d7, [r3]
 80098de:	ee25 5b07 	vmul.f64	d5, d5, d7
 80098e2:	f241 22c8 	movw	r2, #4808	; 0x12c8
 80098e6:	443a      	add	r2, r7
 80098e8:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 80098ec:	ed92 4b00 	vldr	d4, [r2]
 80098f0:	ed93 7b00 	vldr	d7, [r3]
 80098f4:	ee24 7b07 	vmul.f64	d7, d4, d7
 80098f8:	ee35 7b07 	vadd.f64	d7, d5, d7
 80098fc:	ee36 6b07 	vadd.f64	d6, d6, d7
    t72_re)) - (t74_re * t3_im + t74_im * t76_re)) + (t23_re * t20_im + t58_im *
 8009900:	f241 23b8 	movw	r3, #4792	; 0x12b8
 8009904:	443b      	add	r3, r7
 8009906:	ed93 5b00 	vldr	d5, [r3]
 800990a:	f241 3310 	movw	r3, #4880	; 0x1310
 800990e:	443b      	add	r3, r7
 8009910:	ed93 7b00 	vldr	d7, [r3]
 8009914:	ee25 5b07 	vmul.f64	d5, d5, d7
 8009918:	f241 22b0 	movw	r2, #4784	; 0x12b0
 800991c:	443a      	add	r2, r7
 800991e:	f241 23a8 	movw	r3, #4776	; 0x12a8
 8009922:	443b      	add	r3, r7
 8009924:	ed92 4b00 	vldr	d4, [r2]
 8009928:	ed93 7b00 	vldr	d7, [r3]
 800992c:	ee24 7b07 	vmul.f64	d7, d4, d7
 8009930:	ee35 7b07 	vadd.f64	d7, d5, d7
 8009934:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009938:	f241 3330 	movw	r3, #4912	; 0x1330
 800993c:	443b      	add	r3, r7
 800993e:	ed93 5b00 	vldr	d5, [r3]
 8009942:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8009946:	ed93 7b00 	vldr	d7, [r3]
 800994a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800994e:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8009952:	f241 2350 	movw	r3, #4688	; 0x1250
 8009956:	443b      	add	r3, r7
 8009958:	ed92 4b00 	vldr	d4, [r2]
 800995c:	ed93 7b00 	vldr	d7, [r3]
 8009960:	ee24 7b07 	vmul.f64	d7, d4, d7
 8009964:	ee35 7b07 	vadd.f64	d7, d5, d7
 8009968:	ee36 6b07 	vadd.f64	d6, d6, d7
             t60_re)) + (t13_im * t34_re + t12_re * t13_re);
 800996c:	f241 3370 	movw	r3, #4976	; 0x1370
 8009970:	443b      	add	r3, r7
 8009972:	ed93 5b00 	vldr	d5, [r3]
 8009976:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800997a:	443b      	add	r3, r7
 800997c:	ed93 7b00 	vldr	d7, [r3]
 8009980:	ee25 5b07 	vmul.f64	d5, d5, d7
 8009984:	f241 3388 	movw	r3, #5000	; 0x1388
 8009988:	443b      	add	r3, r7
 800998a:	ed93 4b00 	vldr	d4, [r3]
 800998e:	f241 3378 	movw	r3, #4984	; 0x1378
 8009992:	443b      	add	r3, r7
 8009994:	ed93 7b00 	vldr	d7, [r3]
 8009998:	ee24 7b07 	vmul.f64	d7, d4, d7
 800999c:	ee35 7b07 	vadd.f64	d7, d5, d7
  t34_re = (((((t56.re * 3.749399456654644E-33 + t56.im * 0.0) - (t57.re *
 80099a0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80099a4:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80099a8:	443b      	add	r3, r7
 80099aa:	ed83 7b00 	vstr	d7, [r3]
  b_G_q[1].re = -g * ((((((((t3.re * 0.1335 - t3.im * 4.7990846441586913E-18) +
 80099ae:	4bae      	ldr	r3, [pc, #696]	; (8009c68 <G_q+0x7848>)
 80099b0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80099b4:	443a      	add	r2, r7
 80099b6:	4413      	add	r3, r2
 80099b8:	ed93 7b00 	vldr	d7, [r3]
 80099bc:	eeb1 6b47 	vneg.f64	d6, d7
 80099c0:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 80099c4:	ed93 7b00 	vldr	d7, [r3]
 80099c8:	ed9f 5b9b 	vldr	d5, [pc, #620]	; 8009c38 <G_q+0x7818>
 80099cc:	ee27 5b05 	vmul.f64	d5, d7, d5
 80099d0:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 80099d4:	ed93 7b02 	vldr	d7, [r3, #8]
 80099d8:	ed9f 4b99 	vldr	d4, [pc, #612]	; 8009c40 <G_q+0x7820>
 80099dc:	ee27 7b04 	vmul.f64	d7, d7, d4
 80099e0:	ee35 5b47 	vsub.f64	d5, d5, d7
    (t83.re * 0.1335 - t83.im * -4.7990846441586913E-18)) + (t33_re * t35_re -
 80099e4:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 80099e8:	ed93 7b00 	vldr	d7, [r3]
 80099ec:	ed9f 4b92 	vldr	d4, [pc, #584]	; 8009c38 <G_q+0x7818>
 80099f0:	ee27 4b04 	vmul.f64	d4, d7, d4
 80099f4:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 80099f8:	ed93 7b02 	vldr	d7, [r3, #8]
 80099fc:	ed9f 3b90 	vldr	d3, [pc, #576]	; 8009c40 <G_q+0x7820>
 8009a00:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009a04:	ee34 7b07 	vadd.f64	d7, d4, d7
  b_G_q[1].re = -g * ((((((((t3.re * 0.1335 - t3.im * 4.7990846441586913E-18) +
 8009a08:	ee35 5b07 	vadd.f64	d5, d5, d7
    (t83.re * 0.1335 - t83.im * -4.7990846441586913E-18)) + (t33_re * t35_re -
 8009a0c:	f241 2398 	movw	r3, #4760	; 0x1298
 8009a10:	443b      	add	r3, r7
 8009a12:	f241 32c8 	movw	r2, #5064	; 0x13c8
 8009a16:	443a      	add	r2, r7
 8009a18:	ed92 4b00 	vldr	d4, [r2]
 8009a1c:	ed93 7b00 	vldr	d7, [r3]
 8009a20:	ee24 4b07 	vmul.f64	d4, d4, d7
    t33_im * t35_im) * 0.1376) - (t37_re * t39_re - t37_im * t39_im) * 0.1376) -
 8009a24:	f241 2390 	movw	r3, #4752	; 0x1290
 8009a28:	443b      	add	r3, r7
 8009a2a:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 8009a2e:	ed92 3b00 	vldr	d3, [r2]
 8009a32:	ed93 7b00 	vldr	d7, [r3]
 8009a36:	ee23 7b07 	vmul.f64	d7, d3, d7
    (t83.re * 0.1335 - t83.im * -4.7990846441586913E-18)) + (t33_re * t35_re -
 8009a3a:	ee34 7b47 	vsub.f64	d7, d4, d7
    t33_im * t35_im) * 0.1376) - (t37_re * t39_re - t37_im * t39_im) * 0.1376) -
 8009a3e:	ed9f 4b82 	vldr	d4, [pc, #520]	; 8009c48 <G_q+0x7828>
 8009a42:	ee27 7b04 	vmul.f64	d7, d7, d4
    (t83.re * 0.1335 - t83.im * -4.7990846441586913E-18)) + (t33_re * t35_re -
 8009a46:	ee35 5b07 	vadd.f64	d5, d5, d7
    t33_im * t35_im) * 0.1376) - (t37_re * t39_re - t37_im * t39_im) * 0.1376) -
 8009a4a:	f241 2388 	movw	r3, #4744	; 0x1288
 8009a4e:	443b      	add	r3, r7
 8009a50:	f241 32a8 	movw	r2, #5032	; 0x13a8
 8009a54:	443a      	add	r2, r7
 8009a56:	ed92 4b00 	vldr	d4, [r2]
 8009a5a:	ed93 7b00 	vldr	d7, [r3]
 8009a5e:	ee24 4b07 	vmul.f64	d4, d4, d7
 8009a62:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8009a66:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 8009a6a:	ed92 3b00 	vldr	d3, [r2]
 8009a6e:	ed93 7b00 	vldr	d7, [r3]
 8009a72:	ee23 7b07 	vmul.f64	d7, d3, d7
 8009a76:	ee34 7b47 	vsub.f64	d7, d4, d7
 8009a7a:	ed9f 4b73 	vldr	d4, [pc, #460]	; 8009c48 <G_q+0x7828>
 8009a7e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009a82:	ee35 5b47 	vsub.f64	d5, d5, d7
    (t54_re * t10_re - t54_im * t10_im) * 0.0215) + (t19_re * t8_re - t19_im *
 8009a86:	f241 3328 	movw	r3, #4904	; 0x1328
 8009a8a:	443b      	add	r3, r7
 8009a8c:	ed93 4b00 	vldr	d4, [r3]
 8009a90:	f241 3398 	movw	r3, #5016	; 0x1398
 8009a94:	443b      	add	r3, r7
 8009a96:	ed93 7b00 	vldr	d7, [r3]
 8009a9a:	ee24 4b07 	vmul.f64	d4, d4, d7
 8009a9e:	f241 2378 	movw	r3, #4728	; 0x1278
 8009aa2:	443b      	add	r3, r7
 8009aa4:	ed93 3b00 	vldr	d3, [r3]
 8009aa8:	f241 3390 	movw	r3, #5008	; 0x1390
 8009aac:	443b      	add	r3, r7
 8009aae:	ed93 7b00 	vldr	d7, [r3]
 8009ab2:	ee23 7b07 	vmul.f64	d7, d3, d7
 8009ab6:	ee34 7b47 	vsub.f64	d7, d4, d7
 8009aba:	ed9f 4b65 	vldr	d4, [pc, #404]	; 8009c50 <G_q+0x7830>
 8009abe:	ee27 7b04 	vmul.f64	d7, d7, d4
    t33_im * t35_im) * 0.1376) - (t37_re * t39_re - t37_im * t39_im) * 0.1376) -
 8009ac2:	ee35 5b47 	vsub.f64	d5, d5, d7
    (t54_re * t10_re - t54_im * t10_im) * 0.0215) + (t19_re * t8_re - t19_im *
 8009ac6:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8009aca:	f241 3258 	movw	r2, #4952	; 0x1358
 8009ace:	443a      	add	r2, r7
 8009ad0:	ed92 4b00 	vldr	d4, [r2]
 8009ad4:	ed93 7b00 	vldr	d7, [r3]
 8009ad8:	ee24 4b07 	vmul.f64	d4, d4, d7
 8009adc:	f241 3350 	movw	r3, #4944	; 0x1350
 8009ae0:	443b      	add	r3, r7
 8009ae2:	ed93 3b00 	vldr	d3, [r3]
 8009ae6:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8009aea:	ed93 7b00 	vldr	d7, [r3]
 8009aee:	ee23 7b07 	vmul.f64	d7, d3, d7
 8009af2:	ee34 7b47 	vsub.f64	d7, d4, d7
    t8_im) * 1.3164953090834051E-18) - (t41_re * t43_re - t41_im * t43_im) *
 8009af6:	ed9f 4b58 	vldr	d4, [pc, #352]	; 8009c58 <G_q+0x7838>
 8009afa:	ee27 7b04 	vmul.f64	d7, d7, d4
    (t54_re * t10_re - t54_im * t10_im) * 0.0215) + (t19_re * t8_re - t19_im *
 8009afe:	ee35 5b07 	vadd.f64	d5, d5, d7
    t8_im) * 1.3164953090834051E-18) - (t41_re * t43_re - t41_im * t43_im) *
 8009b02:	f241 2358 	movw	r3, #4696	; 0x1258
 8009b06:	443b      	add	r3, r7
 8009b08:	f241 3208 	movw	r2, #4872	; 0x1308
 8009b0c:	443a      	add	r2, r7
 8009b0e:	ed92 4b00 	vldr	d4, [r2]
 8009b12:	ed93 7b00 	vldr	d7, [r3]
 8009b16:	ee24 4b07 	vmul.f64	d4, d4, d7
 8009b1a:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8009b1e:	ed93 3b00 	vldr	d3, [r3]
 8009b22:	f241 23f8 	movw	r3, #4856	; 0x12f8
 8009b26:	443b      	add	r3, r7
 8009b28:	ed93 7b00 	vldr	d7, [r3]
 8009b2c:	ee23 7b07 	vmul.f64	d7, d3, d7
 8009b30:	ee34 7b47 	vsub.f64	d7, d4, d7
 8009b34:	ed9f 4b48 	vldr	d4, [pc, #288]	; 8009c58 <G_q+0x7838>
 8009b38:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009b3c:	ee35 5b47 	vsub.f64	d5, d5, d7
                       1.3164953090834051E-18) + (b_t54_re * t34_im - b_t54_im *
 8009b40:	f241 23f0 	movw	r3, #4848	; 0x12f0
 8009b44:	443b      	add	r3, r7
 8009b46:	ed93 4b00 	vldr	d4, [r3]
 8009b4a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8009b4e:	443b      	add	r3, r7
 8009b50:	ed93 7b00 	vldr	d7, [r3]
 8009b54:	ee24 4b07 	vmul.f64	d4, d4, d7
 8009b58:	f241 23e8 	movw	r3, #4840	; 0x12e8
 8009b5c:	443b      	add	r3, r7
 8009b5e:	ed93 3b00 	vldr	d3, [r3]
 8009b62:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009b66:	443b      	add	r3, r7
 8009b68:	ed93 7b00 	vldr	d7, [r3]
 8009b6c:	ee23 7b07 	vmul.f64	d7, d3, d7
 8009b70:	ee34 7b47 	vsub.f64	d7, d4, d7
    t34_re) * 0.0215);
 8009b74:	ed9f 4b36 	vldr	d4, [pc, #216]	; 8009c50 <G_q+0x7830>
 8009b78:	ee27 7b04 	vmul.f64	d7, d7, d4
                       1.3164953090834051E-18) + (b_t54_re * t34_im - b_t54_im *
 8009b7c:	ee35 7b07 	vadd.f64	d7, d5, d7
  b_G_q[1].re = -g * ((((((((t3.re * 0.1335 - t3.im * 4.7990846441586913E-18) +
 8009b80:	4b3a      	ldr	r3, [pc, #232]	; (8009c6c <G_q+0x784c>)
 8009b82:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8009b86:	443a      	add	r2, r7
 8009b88:	4413      	add	r3, r2
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	3310      	adds	r3, #16
 8009b8e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009b92:	ed83 7b00 	vstr	d7, [r3]
  b_G_q[1].im = -g * ((((((((t3.re * 4.7990846441586913E-18 + t3.im * 0.1335) +
 8009b96:	4b34      	ldr	r3, [pc, #208]	; (8009c68 <G_q+0x7848>)
 8009b98:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8009b9c:	443a      	add	r2, r7
 8009b9e:	4413      	add	r3, r2
 8009ba0:	ed93 7b00 	vldr	d7, [r3]
 8009ba4:	eeb1 6b47 	vneg.f64	d6, d7
 8009ba8:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8009bac:	ed93 7b00 	vldr	d7, [r3]
 8009bb0:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8009c40 <G_q+0x7820>
 8009bb4:	ee27 5b05 	vmul.f64	d5, d7, d5
 8009bb8:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8009bbc:	ed93 7b02 	vldr	d7, [r3, #8]
 8009bc0:	ed9f 4b1d 	vldr	d4, [pc, #116]	; 8009c38 <G_q+0x7818>
 8009bc4:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009bc8:	ee35 5b07 	vadd.f64	d5, d5, d7
    (t83.re * -4.7990846441586913E-18 + t83.im * 0.1335)) + (t33_re * t35_im +
 8009bcc:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8009bd0:	ed93 7b00 	vldr	d7, [r3]
 8009bd4:	ed9f 4b22 	vldr	d4, [pc, #136]	; 8009c60 <G_q+0x7840>
 8009bd8:	ee27 4b04 	vmul.f64	d4, d7, d4
 8009bdc:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8009be0:	ed93 7b02 	vldr	d7, [r3, #8]
 8009be4:	ed9f 3b14 	vldr	d3, [pc, #80]	; 8009c38 <G_q+0x7818>
 8009be8:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009bec:	ee34 7b07 	vadd.f64	d7, d4, d7
  b_G_q[1].im = -g * ((((((((t3.re * 4.7990846441586913E-18 + t3.im * 0.1335) +
 8009bf0:	ee35 5b07 	vadd.f64	d5, d5, d7
    (t83.re * -4.7990846441586913E-18 + t83.im * 0.1335)) + (t33_re * t35_im +
 8009bf4:	f241 2390 	movw	r3, #4752	; 0x1290
 8009bf8:	443b      	add	r3, r7
 8009bfa:	f241 32c8 	movw	r2, #5064	; 0x13c8
 8009bfe:	443a      	add	r2, r7
 8009c00:	ed92 4b00 	vldr	d4, [r2]
 8009c04:	ed93 7b00 	vldr	d7, [r3]
 8009c08:	ee24 4b07 	vmul.f64	d4, d4, d7
    t33_im * t35_re) * 0.1376) - (t37_re * t39_im + t37_im * t39_re) * 0.1376) -
 8009c0c:	f241 2398 	movw	r3, #4760	; 0x1298
 8009c10:	443b      	add	r3, r7
 8009c12:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 8009c16:	ed92 3b00 	vldr	d3, [r2]
 8009c1a:	ed93 7b00 	vldr	d7, [r3]
 8009c1e:	ee23 7b07 	vmul.f64	d7, d3, d7
    (t83.re * -4.7990846441586913E-18 + t83.im * 0.1335)) + (t33_re * t35_im +
 8009c22:	ee34 7b07 	vadd.f64	d7, d4, d7
 8009c26:	e023      	b.n	8009c70 <G_q+0x7850>
 8009c28:	858a5d48 	.word	0x858a5d48
 8009c2c:	393377ce 	.word	0x393377ce
	...
 8009c38:	2b020c4a 	.word	0x2b020c4a
 8009c3c:	3fc11687 	.word	0x3fc11687
 8009c40:	558ec760 	.word	0x558ec760
 8009c44:	3c5621c2 	.word	0x3c5621c2
 8009c48:	75f6fd22 	.word	0x75f6fd22
 8009c4c:	3fc19ce0 	.word	0x3fc19ce0
 8009c50:	9374bc6a 	.word	0x9374bc6a
 8009c54:	3f960418 	.word	0x3f960418
 8009c58:	2ba953a1 	.word	0x2ba953a1
 8009c5c:	3c3848f9 	.word	0x3c3848f9
 8009c60:	558ec760 	.word	0x558ec760
 8009c64:	bc5621c2 	.word	0xbc5621c2
 8009c68:	ffffec58 	.word	0xffffec58
 8009c6c:	ffffec34 	.word	0xffffec34
    t33_im * t35_re) * 0.1376) - (t37_re * t39_im + t37_im * t39_re) * 0.1376) -
 8009c70:	ed9f 4ba1 	vldr	d4, [pc, #644]	; 8009ef8 <G_q+0x7ad8>
 8009c74:	ee27 7b04 	vmul.f64	d7, d7, d4
    (t83.re * -4.7990846441586913E-18 + t83.im * 0.1335)) + (t33_re * t35_im +
 8009c78:	ee35 5b07 	vadd.f64	d5, d5, d7
    t33_im * t35_re) * 0.1376) - (t37_re * t39_im + t37_im * t39_re) * 0.1376) -
 8009c7c:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8009c80:	f241 32a8 	movw	r2, #5032	; 0x13a8
 8009c84:	443a      	add	r2, r7
 8009c86:	ed92 4b00 	vldr	d4, [r2]
 8009c8a:	ed93 7b00 	vldr	d7, [r3]
 8009c8e:	ee24 4b07 	vmul.f64	d4, d4, d7
 8009c92:	f241 2388 	movw	r3, #4744	; 0x1288
 8009c96:	443b      	add	r3, r7
 8009c98:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 8009c9c:	ed92 3b00 	vldr	d3, [r2]
 8009ca0:	ed93 7b00 	vldr	d7, [r3]
 8009ca4:	ee23 7b07 	vmul.f64	d7, d3, d7
 8009ca8:	ee34 7b07 	vadd.f64	d7, d4, d7
 8009cac:	ed9f 4b92 	vldr	d4, [pc, #584]	; 8009ef8 <G_q+0x7ad8>
 8009cb0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009cb4:	ee35 5b47 	vsub.f64	d5, d5, d7
    (t54_re * t10_im + t54_im * t10_re) * 0.0215) + (t19_re * t8_im + t19_im *
 8009cb8:	f241 3328 	movw	r3, #4904	; 0x1328
 8009cbc:	443b      	add	r3, r7
 8009cbe:	ed93 4b00 	vldr	d4, [r3]
 8009cc2:	f241 3390 	movw	r3, #5008	; 0x1390
 8009cc6:	443b      	add	r3, r7
 8009cc8:	ed93 7b00 	vldr	d7, [r3]
 8009ccc:	ee24 4b07 	vmul.f64	d4, d4, d7
 8009cd0:	f241 2378 	movw	r3, #4728	; 0x1278
 8009cd4:	443b      	add	r3, r7
 8009cd6:	ed93 3b00 	vldr	d3, [r3]
 8009cda:	f241 3398 	movw	r3, #5016	; 0x1398
 8009cde:	443b      	add	r3, r7
 8009ce0:	ed93 7b00 	vldr	d7, [r3]
 8009ce4:	ee23 7b07 	vmul.f64	d7, d3, d7
 8009ce8:	ee34 7b07 	vadd.f64	d7, d4, d7
 8009cec:	ed9f 4b84 	vldr	d4, [pc, #528]	; 8009f00 <G_q+0x7ae0>
 8009cf0:	ee27 7b04 	vmul.f64	d7, d7, d4
    t33_im * t35_re) * 0.1376) - (t37_re * t39_im + t37_im * t39_re) * 0.1376) -
 8009cf4:	ee35 5b47 	vsub.f64	d5, d5, d7
    (t54_re * t10_im + t54_im * t10_re) * 0.0215) + (t19_re * t8_im + t19_im *
 8009cf8:	f241 3358 	movw	r3, #4952	; 0x1358
 8009cfc:	443b      	add	r3, r7
 8009cfe:	ed93 4b00 	vldr	d4, [r3]
 8009d02:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8009d06:	ed93 7b00 	vldr	d7, [r3]
 8009d0a:	ee24 4b07 	vmul.f64	d4, d4, d7
 8009d0e:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8009d12:	f241 3250 	movw	r2, #4944	; 0x1350
 8009d16:	443a      	add	r2, r7
 8009d18:	ed92 3b00 	vldr	d3, [r2]
 8009d1c:	ed93 7b00 	vldr	d7, [r3]
 8009d20:	ee23 7b07 	vmul.f64	d7, d3, d7
 8009d24:	ee34 7b07 	vadd.f64	d7, d4, d7
    t8_re) * 1.3164953090834051E-18) - (t41_re * t43_im + t41_im * t43_re) *
 8009d28:	ed9f 4b77 	vldr	d4, [pc, #476]	; 8009f08 <G_q+0x7ae8>
 8009d2c:	ee27 7b04 	vmul.f64	d7, d7, d4
    (t54_re * t10_im + t54_im * t10_re) * 0.0215) + (t19_re * t8_im + t19_im *
 8009d30:	ee35 5b07 	vadd.f64	d5, d5, d7
    t8_re) * 1.3164953090834051E-18) - (t41_re * t43_im + t41_im * t43_re) *
 8009d34:	f241 3308 	movw	r3, #4872	; 0x1308
 8009d38:	443b      	add	r3, r7
 8009d3a:	ed93 4b00 	vldr	d4, [r3]
 8009d3e:	f241 23f8 	movw	r3, #4856	; 0x12f8
 8009d42:	443b      	add	r3, r7
 8009d44:	ed93 7b00 	vldr	d7, [r3]
 8009d48:	ee24 4b07 	vmul.f64	d4, d4, d7
 8009d4c:	f241 2358 	movw	r3, #4696	; 0x1258
 8009d50:	443b      	add	r3, r7
 8009d52:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8009d56:	ed92 3b00 	vldr	d3, [r2]
 8009d5a:	ed93 7b00 	vldr	d7, [r3]
 8009d5e:	ee23 7b07 	vmul.f64	d7, d3, d7
 8009d62:	ee34 7b07 	vadd.f64	d7, d4, d7
 8009d66:	ed9f 4b68 	vldr	d4, [pc, #416]	; 8009f08 <G_q+0x7ae8>
 8009d6a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009d6e:	ee35 5b47 	vsub.f64	d5, d5, d7
                       1.3164953090834051E-18) + (b_t54_re * t34_re + b_t54_im *
 8009d72:	f241 23f0 	movw	r3, #4848	; 0x12f0
 8009d76:	443b      	add	r3, r7
 8009d78:	ed93 4b00 	vldr	d4, [r3]
 8009d7c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009d80:	443b      	add	r3, r7
 8009d82:	ed93 7b00 	vldr	d7, [r3]
 8009d86:	ee24 4b07 	vmul.f64	d4, d4, d7
 8009d8a:	f241 23e8 	movw	r3, #4840	; 0x12e8
 8009d8e:	443b      	add	r3, r7
 8009d90:	ed93 3b00 	vldr	d3, [r3]
 8009d94:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8009d98:	443b      	add	r3, r7
 8009d9a:	ed93 7b00 	vldr	d7, [r3]
 8009d9e:	ee23 7b07 	vmul.f64	d7, d3, d7
 8009da2:	ee34 7b07 	vadd.f64	d7, d4, d7
    t34_im) * 0.0215);
 8009da6:	ed9f 4b56 	vldr	d4, [pc, #344]	; 8009f00 <G_q+0x7ae0>
 8009daa:	ee27 7b04 	vmul.f64	d7, d7, d4
                       1.3164953090834051E-18) + (b_t54_re * t34_re + b_t54_im *
 8009dae:	ee35 7b07 	vadd.f64	d7, d5, d7
  b_G_q[1].im = -g * ((((((((t3.re * 4.7990846441586913E-18 + t3.im * 0.1335) +
 8009db2:	4b57      	ldr	r3, [pc, #348]	; (8009f10 <G_q+0x7af0>)
 8009db4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8009db8:	443a      	add	r2, r7
 8009dba:	4413      	add	r3, r2
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	3310      	adds	r3, #16
 8009dc0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009dc4:	ed83 7b02 	vstr	d7, [r3, #8]
  if (t154.im == 0.0) {
 8009dc8:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8009dcc:	ed93 7b02 	vldr	d7, [r3, #8]
 8009dd0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dd8:	d115      	bne.n	8009e06 <G_q+0x79e6>
    t8_im = t154.re / 2.0;
 8009dda:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8009dde:	ed93 6b00 	vldr	d6, [r3]
 8009de2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009de6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009dea:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8009dee:	ed83 7b00 	vstr	d7, [r3]
    t54_re = 0.0;
 8009df2:	f04f 0300 	mov.w	r3, #0
 8009df6:	f04f 0400 	mov.w	r4, #0
 8009dfa:	f241 3228 	movw	r2, #4904	; 0x1328
 8009dfe:	443a      	add	r2, r7
 8009e00:	e9c2 3400 	strd	r3, r4, [r2]
 8009e04:	e037      	b.n	8009e76 <G_q+0x7a56>
  } else if (t154.re == 0.0) {
 8009e06:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8009e0a:	ed93 7b00 	vldr	d7, [r3]
 8009e0e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e16:	d115      	bne.n	8009e44 <G_q+0x7a24>
    t8_im = 0.0;
 8009e18:	f04f 0300 	mov.w	r3, #0
 8009e1c:	f04f 0400 	mov.w	r4, #0
 8009e20:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8009e24:	e9c2 3400 	strd	r3, r4, [r2]
    t54_re = t154.im / 2.0;
 8009e28:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8009e2c:	ed93 6b02 	vldr	d6, [r3, #8]
 8009e30:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009e34:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009e38:	f241 3328 	movw	r3, #4904	; 0x1328
 8009e3c:	443b      	add	r3, r7
 8009e3e:	ed83 7b00 	vstr	d7, [r3]
 8009e42:	e018      	b.n	8009e76 <G_q+0x7a56>
  } else {
    t8_im = t154.re / 2.0;
 8009e44:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8009e48:	ed93 6b00 	vldr	d6, [r3]
 8009e4c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009e50:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009e54:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8009e58:	ed83 7b00 	vstr	d7, [r3]
    t54_re = t154.im / 2.0;
 8009e5c:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8009e60:	ed93 6b02 	vldr	d6, [r3, #8]
 8009e64:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009e68:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009e6c:	f241 3328 	movw	r3, #4904	; 0x1328
 8009e70:	443b      	add	r3, r7
 8009e72:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t155.im == 0.0) {
 8009e76:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8009e7a:	ed93 7b02 	vldr	d7, [r3, #8]
 8009e7e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e86:	d116      	bne.n	8009eb6 <G_q+0x7a96>
    t34_re = t155.re / 2.0;
 8009e88:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8009e8c:	ed93 6b00 	vldr	d6, [r3]
 8009e90:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009e94:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009e98:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009e9c:	443b      	add	r3, r7
 8009e9e:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8009ea2:	f04f 0300 	mov.w	r3, #0
 8009ea6:	f04f 0400 	mov.w	r4, #0
 8009eaa:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8009eae:	443a      	add	r2, r7
 8009eb0:	e9c2 3400 	strd	r3, r4, [r2]
 8009eb4:	e048      	b.n	8009f48 <G_q+0x7b28>
  } else if (t155.re == 0.0) {
 8009eb6:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8009eba:	ed93 7b00 	vldr	d7, [r3]
 8009ebe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ec6:	d125      	bne.n	8009f14 <G_q+0x7af4>
    t34_re = 0.0;
 8009ec8:	f04f 0300 	mov.w	r3, #0
 8009ecc:	f04f 0400 	mov.w	r4, #0
 8009ed0:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8009ed4:	443a      	add	r2, r7
 8009ed6:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t155.im / 2.0;
 8009eda:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8009ede:	ed93 6b02 	vldr	d6, [r3, #8]
 8009ee2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009ee6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009eea:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8009eee:	443b      	add	r3, r7
 8009ef0:	ed83 7b00 	vstr	d7, [r3]
 8009ef4:	e028      	b.n	8009f48 <G_q+0x7b28>
 8009ef6:	bf00      	nop
 8009ef8:	75f6fd22 	.word	0x75f6fd22
 8009efc:	3fc19ce0 	.word	0x3fc19ce0
 8009f00:	9374bc6a 	.word	0x9374bc6a
 8009f04:	3f960418 	.word	0x3f960418
 8009f08:	2ba953a1 	.word	0x2ba953a1
 8009f0c:	3c3848f9 	.word	0x3c3848f9
 8009f10:	ffffec34 	.word	0xffffec34
  } else {
    t34_re = t155.re / 2.0;
 8009f14:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8009f18:	ed93 6b00 	vldr	d6, [r3]
 8009f1c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009f20:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009f24:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009f28:	443b      	add	r3, r7
 8009f2a:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t155.im / 2.0;
 8009f2e:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8009f32:	ed93 6b02 	vldr	d6, [r3, #8]
 8009f36:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009f3a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009f3e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8009f42:	443b      	add	r3, r7
 8009f44:	ed83 7b00 	vstr	d7, [r3]
  }

  t8_im += t34_re;
 8009f48:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8009f4c:	ed93 6b00 	vldr	d6, [r3]
 8009f50:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009f54:	443b      	add	r3, r7
 8009f56:	ed93 7b00 	vldr	d7, [r3]
 8009f5a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009f5e:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8009f62:	ed83 7b00 	vstr	d7, [r3]
  t54_re += t34_im;
 8009f66:	f241 3328 	movw	r3, #4904	; 0x1328
 8009f6a:	443b      	add	r3, r7
 8009f6c:	ed93 6b00 	vldr	d6, [r3]
 8009f70:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8009f74:	443b      	add	r3, r7
 8009f76:	ed93 7b00 	vldr	d7, [r3]
 8009f7a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009f7e:	f241 3328 	movw	r3, #4904	; 0x1328
 8009f82:	443b      	add	r3, r7
 8009f84:	ed83 7b00 	vstr	d7, [r3]
  t19_re_tmp = (t156.re * 0.0 - t156.im * 0.5) - (t157.re * 0.0 - t157.im * 0.5);
 8009f88:	f507 6365 	add.w	r3, r7, #3664	; 0xe50
 8009f8c:	ed93 7b00 	vldr	d7, [r3]
 8009f90:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 800a278 <G_q+0x7e58>
 8009f94:	ee27 6b06 	vmul.f64	d6, d7, d6
 8009f98:	f507 6365 	add.w	r3, r7, #3664	; 0xe50
 8009f9c:	ed93 7b02 	vldr	d7, [r3, #8]
 8009fa0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009fa4:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009fa8:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009fac:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8009fb0:	ed93 7b00 	vldr	d7, [r3]
 8009fb4:	ed9f 5bb0 	vldr	d5, [pc, #704]	; 800a278 <G_q+0x7e58>
 8009fb8:	ee27 5b05 	vmul.f64	d5, d7, d5
 8009fbc:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8009fc0:	ed93 7b02 	vldr	d7, [r3, #8]
 8009fc4:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8009fc8:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009fcc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009fd0:	f241 2370 	movw	r3, #4720	; 0x1270
 8009fd4:	443b      	add	r3, r7
 8009fd6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009fda:	ed83 7b00 	vstr	d7, [r3]
  t19_im_tmp = (t156.re * 0.5 + t156.im * 0.0) - (t157.re * 0.5 + t157.im * 0.0);
 8009fde:	f507 6365 	add.w	r3, r7, #3664	; 0xe50
 8009fe2:	ed93 7b00 	vldr	d7, [r3]
 8009fe6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8009fea:	ee27 6b06 	vmul.f64	d6, d7, d6
 8009fee:	f507 6365 	add.w	r3, r7, #3664	; 0xe50
 8009ff2:	ed93 7b02 	vldr	d7, [r3, #8]
 8009ff6:	ed9f 5ba0 	vldr	d5, [pc, #640]	; 800a278 <G_q+0x7e58>
 8009ffa:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009ffe:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a002:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800a006:	ed93 7b00 	vldr	d7, [r3]
 800a00a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a00e:	ee27 5b05 	vmul.f64	d5, d7, d5
 800a012:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800a016:	ed93 7b02 	vldr	d7, [r3, #8]
 800a01a:	ed9f 4b97 	vldr	d4, [pc, #604]	; 800a278 <G_q+0x7e58>
 800a01e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a022:	ee35 7b07 	vadd.f64	d7, d5, d7
 800a026:	f241 2368 	movw	r3, #4712	; 0x1268
 800a02a:	443b      	add	r3, r7
 800a02c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a030:	ed83 7b00 	vstr	d7, [r3]
  t41_im = t98.re * 3.061616997868383E-17 + t99.re * 3.061616997868383E-17;
 800a034:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 800a038:	ed93 7b00 	vldr	d7, [r3]
 800a03c:	ed9f 6b8a 	vldr	d6, [pc, #552]	; 800a268 <G_q+0x7e48>
 800a040:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a044:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 800a048:	ed93 7b00 	vldr	d7, [r3]
 800a04c:	ed9f 5b86 	vldr	d5, [pc, #536]	; 800a268 <G_q+0x7e48>
 800a050:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a054:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a058:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800a05c:	ed83 7b00 	vstr	d7, [r3]
  t8_re = t98.im * 3.061616997868383E-17 + t99.im * 3.061616997868383E-17;
 800a060:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 800a064:	ed93 7b02 	vldr	d7, [r3, #8]
 800a068:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 800a268 <G_q+0x7e48>
 800a06c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a070:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 800a074:	ed93 7b02 	vldr	d7, [r3, #8]
 800a078:	ed9f 5b7b 	vldr	d5, [pc, #492]	; 800a268 <G_q+0x7e48>
 800a07c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a080:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800a084:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a088:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t96.re * 0.0 - t96.im * 0.5) - (t97.re * 0.0 - t97.im * 0.5);
 800a08c:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 800a090:	ed93 7b00 	vldr	d7, [r3]
 800a094:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800a278 <G_q+0x7e58>
 800a098:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a09c:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 800a0a0:	ed93 7b02 	vldr	d7, [r3, #8]
 800a0a4:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a0a8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a0ac:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a0b0:	f507 6350 	add.w	r3, r7, #3328	; 0xd00
 800a0b4:	ed93 7b00 	vldr	d7, [r3]
 800a0b8:	ed9f 5b6f 	vldr	d5, [pc, #444]	; 800a278 <G_q+0x7e58>
 800a0bc:	ee27 5b05 	vmul.f64	d5, d7, d5
 800a0c0:	f507 6350 	add.w	r3, r7, #3328	; 0xd00
 800a0c4:	ed93 7b02 	vldr	d7, [r3, #8]
 800a0c8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800a0cc:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a0d0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a0d4:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a0d8:	f241 3378 	movw	r3, #4984	; 0x1378
 800a0dc:	443b      	add	r3, r7
 800a0de:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t96.re * 0.5 + t96.im * 0.0) - (t97.re * 0.5 + t97.im * 0.0);
 800a0e2:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 800a0e6:	ed93 7b00 	vldr	d7, [r3]
 800a0ea:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800a0ee:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a0f2:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 800a0f6:	ed93 7b02 	vldr	d7, [r3, #8]
 800a0fa:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 800a278 <G_q+0x7e58>
 800a0fe:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a102:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a106:	f507 6350 	add.w	r3, r7, #3328	; 0xd00
 800a10a:	ed93 7b00 	vldr	d7, [r3]
 800a10e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a112:	ee27 5b05 	vmul.f64	d5, d7, d5
 800a116:	f507 6350 	add.w	r3, r7, #3328	; 0xd00
 800a11a:	ed93 7b02 	vldr	d7, [r3, #8]
 800a11e:	ed9f 4b56 	vldr	d4, [pc, #344]	; 800a278 <G_q+0x7e58>
 800a122:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a126:	ee35 7b07 	vadd.f64	d7, d5, d7
 800a12a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a12e:	f241 3370 	movw	r3, #4976	; 0x1370
 800a132:	443b      	add	r3, r7
 800a134:	ed83 7b00 	vstr	d7, [r3]
  if (t94.im == 0.0) {
 800a138:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800a13c:	ed93 7b02 	vldr	d7, [r3, #8]
 800a140:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a148:	d115      	bne.n	800a176 <G_q+0x7d56>
    t16_re = t94.re / 2.0;
 800a14a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800a14e:	ed93 6b00 	vldr	d6, [r3]
 800a152:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a156:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a15a:	f241 3368 	movw	r3, #4968	; 0x1368
 800a15e:	443b      	add	r3, r7
 800a160:	ed83 7b00 	vstr	d7, [r3]
    t16_im = 0.0;
 800a164:	f04f 0300 	mov.w	r3, #0
 800a168:	f04f 0400 	mov.w	r4, #0
 800a16c:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800a170:	e9c2 3400 	strd	r3, r4, [r2]
 800a174:	e037      	b.n	800a1e6 <G_q+0x7dc6>
  } else if (t94.re == 0.0) {
 800a176:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800a17a:	ed93 7b00 	vldr	d7, [r3]
 800a17e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a186:	d115      	bne.n	800a1b4 <G_q+0x7d94>
    t16_re = 0.0;
 800a188:	f04f 0300 	mov.w	r3, #0
 800a18c:	f04f 0400 	mov.w	r4, #0
 800a190:	f241 3268 	movw	r2, #4968	; 0x1368
 800a194:	443a      	add	r2, r7
 800a196:	e9c2 3400 	strd	r3, r4, [r2]
    t16_im = t94.im / 2.0;
 800a19a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800a19e:	ed93 6b02 	vldr	d6, [r3, #8]
 800a1a2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a1a6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a1aa:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800a1ae:	ed83 7b00 	vstr	d7, [r3]
 800a1b2:	e018      	b.n	800a1e6 <G_q+0x7dc6>
  } else {
    t16_re = t94.re / 2.0;
 800a1b4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800a1b8:	ed93 6b00 	vldr	d6, [r3]
 800a1bc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a1c0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a1c4:	f241 3368 	movw	r3, #4968	; 0x1368
 800a1c8:	443b      	add	r3, r7
 800a1ca:	ed83 7b00 	vstr	d7, [r3]
    t16_im = t94.im / 2.0;
 800a1ce:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800a1d2:	ed93 6b02 	vldr	d6, [r3, #8]
 800a1d6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a1da:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a1de:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800a1e2:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t95.im == 0.0) {
 800a1e6:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 800a1ea:	ed93 7b02 	vldr	d7, [r3, #8]
 800a1ee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a1f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1f6:	d116      	bne.n	800a226 <G_q+0x7e06>
    t34_re = t95.re / 2.0;
 800a1f8:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 800a1fc:	ed93 6b00 	vldr	d6, [r3]
 800a200:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a204:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a208:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800a20c:	443b      	add	r3, r7
 800a20e:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800a212:	f04f 0300 	mov.w	r3, #0
 800a216:	f04f 0400 	mov.w	r4, #0
 800a21a:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800a21e:	443a      	add	r2, r7
 800a220:	e9c2 3400 	strd	r3, r4, [r2]
 800a224:	e046      	b.n	800a2b4 <G_q+0x7e94>
  } else if (t95.re == 0.0) {
 800a226:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 800a22a:	ed93 7b00 	vldr	d7, [r3]
 800a22e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a236:	d123      	bne.n	800a280 <G_q+0x7e60>
    t34_re = 0.0;
 800a238:	f04f 0300 	mov.w	r3, #0
 800a23c:	f04f 0400 	mov.w	r4, #0
 800a240:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800a244:	443a      	add	r2, r7
 800a246:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t95.im / 2.0;
 800a24a:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 800a24e:	ed93 6b02 	vldr	d6, [r3, #8]
 800a252:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a256:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a25a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800a25e:	443b      	add	r3, r7
 800a260:	ed83 7b00 	vstr	d7, [r3]
 800a264:	e026      	b.n	800a2b4 <G_q+0x7e94>
 800a266:	bf00      	nop
 800a268:	33145c07 	.word	0x33145c07
 800a26c:	3c81a626 	.word	0x3c81a626
 800a270:	858a5d48 	.word	0x858a5d48
 800a274:	394377ce 	.word	0x394377ce
	...
  } else {
    t34_re = t95.re / 2.0;
 800a280:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 800a284:	ed93 6b00 	vldr	d6, [r3]
 800a288:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a28c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a290:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800a294:	443b      	add	r3, r7
 800a296:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t95.im / 2.0;
 800a29a:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 800a29e:	ed93 6b02 	vldr	d6, [r3, #8]
 800a2a2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a2a6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a2aa:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800a2ae:	443b      	add	r3, r7
 800a2b0:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_re = (t92.re * 0.0 - t92.im * 3.061616997868383E-17) - (t93.re * 0.0 -
 800a2b4:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 800a2b8:	ed93 7b00 	vldr	d7, [r3]
 800a2bc:	ed1f 6b12 	vldr	d6, [pc, #-72]	; 800a278 <G_q+0x7e58>
 800a2c0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a2c4:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 800a2c8:	ed93 7b02 	vldr	d7, [r3, #8]
 800a2cc:	ed1f 5b1a 	vldr	d5, [pc, #-104]	; 800a268 <G_q+0x7e48>
 800a2d0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a2d4:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a2d8:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 800a2dc:	ed93 7b00 	vldr	d7, [r3]
 800a2e0:	ed1f 5b1b 	vldr	d5, [pc, #-108]	; 800a278 <G_q+0x7e58>
 800a2e4:	ee27 5b05 	vmul.f64	d5, d7, d5
    t93.im * 3.061616997868383E-17);
 800a2e8:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 800a2ec:	ed93 7b02 	vldr	d7, [r3, #8]
 800a2f0:	ed1f 4b23 	vldr	d4, [pc, #-140]	; 800a268 <G_q+0x7e48>
 800a2f4:	ee27 7b04 	vmul.f64	d7, d7, d4
  t20_re = (t92.re * 0.0 - t92.im * 3.061616997868383E-17) - (t93.re * 0.0 -
 800a2f8:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a2fc:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a300:	f241 3348 	movw	r3, #4936	; 0x1348
 800a304:	443b      	add	r3, r7
 800a306:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t92.re * 3.061616997868383E-17 + t92.im * 0.0) - (t93.re *
 800a30a:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 800a30e:	ed93 7b00 	vldr	d7, [r3]
 800a312:	ed1f 6b2b 	vldr	d6, [pc, #-172]	; 800a268 <G_q+0x7e48>
 800a316:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a31a:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 800a31e:	ed93 7b02 	vldr	d7, [r3, #8]
 800a322:	ed1f 5b2b 	vldr	d5, [pc, #-172]	; 800a278 <G_q+0x7e58>
 800a326:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a32a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a32e:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 800a332:	ed93 7b00 	vldr	d7, [r3]
 800a336:	ed1f 5b34 	vldr	d5, [pc, #-208]	; 800a268 <G_q+0x7e48>
 800a33a:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t93.im * 0.0);
 800a33e:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 800a342:	ed93 7b02 	vldr	d7, [r3, #8]
 800a346:	ed1f 4b34 	vldr	d4, [pc, #-208]	; 800a278 <G_q+0x7e58>
 800a34a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a34e:	ee35 7b07 	vadd.f64	d7, d5, d7
  t20_im = (t92.re * 3.061616997868383E-17 + t92.im * 0.0) - (t93.re *
 800a352:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a356:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800a35a:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t16_re + t34_re) + 7.498798913309288E-33;
 800a35e:	f241 3368 	movw	r3, #4968	; 0x1368
 800a362:	443b      	add	r3, r7
 800a364:	ed93 6b00 	vldr	d6, [r3]
 800a368:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800a36c:	443b      	add	r3, r7
 800a36e:	ed93 7b00 	vldr	d7, [r3]
 800a372:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a376:	ed1f 6b42 	vldr	d6, [pc, #-264]	; 800a270 <G_q+0x7e50>
 800a37a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a37e:	f241 3368 	movw	r3, #4968	; 0x1368
 800a382:	443b      	add	r3, r7
 800a384:	ed83 7b00 	vstr	d7, [r3]
  t16_im += t34_im;
 800a388:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800a38c:	ed93 6b00 	vldr	d6, [r3]
 800a390:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800a394:	443b      	add	r3, r7
 800a396:	ed93 7b00 	vldr	d7, [r3]
 800a39a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a39e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800a3a2:	ed83 7b00 	vstr	d7, [r3]
  t72_re = (t41_im * t13_re - t8_re * t13_im) - (t20_re * t16_re - t20_im *
 800a3a6:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800a3aa:	ed93 6b00 	vldr	d6, [r3]
 800a3ae:	f241 3378 	movw	r3, #4984	; 0x1378
 800a3b2:	443b      	add	r3, r7
 800a3b4:	ed93 7b00 	vldr	d7, [r3]
 800a3b8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a3bc:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800a3c0:	ed93 5b00 	vldr	d5, [r3]
 800a3c4:	f241 3370 	movw	r3, #4976	; 0x1370
 800a3c8:	443b      	add	r3, r7
 800a3ca:	ed93 7b00 	vldr	d7, [r3]
 800a3ce:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a3d2:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a3d6:	f241 3348 	movw	r3, #4936	; 0x1348
 800a3da:	443b      	add	r3, r7
 800a3dc:	ed93 5b00 	vldr	d5, [r3]
 800a3e0:	f241 3368 	movw	r3, #4968	; 0x1368
 800a3e4:	443b      	add	r3, r7
 800a3e6:	ed93 7b00 	vldr	d7, [r3]
 800a3ea:	ee25 5b07 	vmul.f64	d5, d5, d7
 800a3ee:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800a3f2:	ed93 4b00 	vldr	d4, [r3]
 800a3f6:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800a3fa:	ed93 7b00 	vldr	d7, [r3]
 800a3fe:	ee24 7b07 	vmul.f64	d7, d4, d7
 800a402:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a406:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800a40a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a40e:	ed83 7b00 	vstr	d7, [r3]
    t16_im);
  t8_re = (t41_im * t13_im + t8_re * t13_re) - (t20_re * t16_im + t20_im *
 800a412:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800a416:	ed93 6b00 	vldr	d6, [r3]
 800a41a:	f241 3370 	movw	r3, #4976	; 0x1370
 800a41e:	443b      	add	r3, r7
 800a420:	ed93 7b00 	vldr	d7, [r3]
 800a424:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a428:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800a42c:	ed93 5b00 	vldr	d5, [r3]
 800a430:	f241 3378 	movw	r3, #4984	; 0x1378
 800a434:	443b      	add	r3, r7
 800a436:	ed93 7b00 	vldr	d7, [r3]
 800a43a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a43e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a442:	f241 3348 	movw	r3, #4936	; 0x1348
 800a446:	443b      	add	r3, r7
 800a448:	ed93 5b00 	vldr	d5, [r3]
 800a44c:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800a450:	ed93 7b00 	vldr	d7, [r3]
 800a454:	ee25 5b07 	vmul.f64	d5, d5, d7
 800a458:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800a45c:	ed93 4b00 	vldr	d4, [r3]
 800a460:	f241 3368 	movw	r3, #4968	; 0x1368
 800a464:	443b      	add	r3, r7
 800a466:	ed93 7b00 	vldr	d7, [r3]
 800a46a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800a46e:	ee35 7b07 	vadd.f64	d7, d5, d7
 800a472:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800a476:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a47a:	ed83 7b00 	vstr	d7, [r3]
    t16_re);
  t58_im = (t100.re * 0.0 - t100.im * 0.5) - (t101.re * 0.0 - t101.im * 0.5);
 800a47e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800a482:	ed93 7b00 	vldr	d7, [r3]
 800a486:	ed1f 6b84 	vldr	d6, [pc, #-528]	; 800a278 <G_q+0x7e58>
 800a48a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a48e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800a492:	ed93 7b02 	vldr	d7, [r3, #8]
 800a496:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a49a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a49e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a4a2:	4be7      	ldr	r3, [pc, #924]	; (800a840 <G_q+0x8420>)
 800a4a4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800a4a8:	443a      	add	r2, r7
 800a4aa:	4413      	add	r3, r2
 800a4ac:	ed93 7b00 	vldr	d7, [r3]
 800a4b0:	ed9f 5be1 	vldr	d5, [pc, #900]	; 800a838 <G_q+0x8418>
 800a4b4:	ee27 5b05 	vmul.f64	d5, d7, d5
 800a4b8:	4be1      	ldr	r3, [pc, #900]	; (800a840 <G_q+0x8420>)
 800a4ba:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800a4be:	443a      	add	r2, r7
 800a4c0:	4413      	add	r3, r2
 800a4c2:	ed93 7b02 	vldr	d7, [r3, #8]
 800a4c6:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800a4ca:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a4ce:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a4d2:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800a4d6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a4da:	ed83 7b00 	vstr	d7, [r3]
  t60_re = (t100.re * 0.5 + t100.im * 0.0) - (t101.re * 0.5 + t101.im * 0.0);
 800a4de:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800a4e2:	ed93 7b00 	vldr	d7, [r3]
 800a4e6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800a4ea:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a4ee:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800a4f2:	ed93 7b02 	vldr	d7, [r3, #8]
 800a4f6:	ed9f 5bd0 	vldr	d5, [pc, #832]	; 800a838 <G_q+0x8418>
 800a4fa:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a4fe:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a502:	4bcf      	ldr	r3, [pc, #828]	; (800a840 <G_q+0x8420>)
 800a504:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800a508:	443a      	add	r2, r7
 800a50a:	4413      	add	r3, r2
 800a50c:	ed93 7b00 	vldr	d7, [r3]
 800a510:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a514:	ee27 5b05 	vmul.f64	d5, d7, d5
 800a518:	4bc9      	ldr	r3, [pc, #804]	; (800a840 <G_q+0x8420>)
 800a51a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800a51e:	443a      	add	r2, r7
 800a520:	4413      	add	r3, r2
 800a522:	ed93 7b02 	vldr	d7, [r3, #8]
 800a526:	ed9f 4bc4 	vldr	d4, [pc, #784]	; 800a838 <G_q+0x8418>
 800a52a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a52e:	ee35 7b07 	vadd.f64	d7, d5, d7
 800a532:	f241 2350 	movw	r3, #4688	; 0x1250
 800a536:	443b      	add	r3, r7
 800a538:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a53c:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t104.re * 0.0 - t104.im * 0.5) - (t105.re * 0.0 - t105.im * 0.5);
 800a540:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 800a544:	ed93 7b00 	vldr	d7, [r3]
 800a548:	ed9f 6bbb 	vldr	d6, [pc, #748]	; 800a838 <G_q+0x8418>
 800a54c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a550:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 800a554:	ed93 7b02 	vldr	d7, [r3, #8]
 800a558:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a55c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a560:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a564:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800a568:	ed93 7b00 	vldr	d7, [r3]
 800a56c:	ed9f 5bb2 	vldr	d5, [pc, #712]	; 800a838 <G_q+0x8418>
 800a570:	ee27 5b05 	vmul.f64	d5, d7, d5
 800a574:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800a578:	ed93 7b02 	vldr	d7, [r3, #8]
 800a57c:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800a580:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a584:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a588:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a58c:	f241 3370 	movw	r3, #4976	; 0x1370
 800a590:	443b      	add	r3, r7
 800a592:	ed83 7b00 	vstr	d7, [r3]
  t76_re = (t104.re * 0.5 + t104.im * 0.0) - (t105.re * 0.5 + t105.im * 0.0);
 800a596:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 800a59a:	ed93 7b00 	vldr	d7, [r3]
 800a59e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800a5a2:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a5a6:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 800a5aa:	ed93 7b02 	vldr	d7, [r3, #8]
 800a5ae:	ed9f 5ba2 	vldr	d5, [pc, #648]	; 800a838 <G_q+0x8418>
 800a5b2:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a5b6:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a5ba:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800a5be:	ed93 7b00 	vldr	d7, [r3]
 800a5c2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a5c6:	ee27 5b05 	vmul.f64	d5, d7, d5
 800a5ca:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800a5ce:	ed93 7b02 	vldr	d7, [r3, #8]
 800a5d2:	ed9f 4b99 	vldr	d4, [pc, #612]	; 800a838 <G_q+0x8418>
 800a5d6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a5da:	ee35 7b07 	vadd.f64	d7, d5, d7
 800a5de:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800a5e2:	443b      	add	r3, r7
 800a5e4:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a5e8:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t106.re * 0.0 - t106.im * 0.5) - (t107.re * 0.0 - t107.im * 0.5);
 800a5ec:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800a5f0:	ed93 7b00 	vldr	d7, [r3]
 800a5f4:	ed9f 6b90 	vldr	d6, [pc, #576]	; 800a838 <G_q+0x8418>
 800a5f8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a5fc:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800a600:	ed93 7b02 	vldr	d7, [r3, #8]
 800a604:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a608:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a60c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a610:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 800a614:	ed93 7b00 	vldr	d7, [r3]
 800a618:	ed9f 5b87 	vldr	d5, [pc, #540]	; 800a838 <G_q+0x8418>
 800a61c:	ee27 5b05 	vmul.f64	d5, d7, d5
 800a620:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 800a624:	ed93 7b02 	vldr	d7, [r3, #8]
 800a628:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800a62c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a630:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a634:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a638:	f241 3348 	movw	r3, #4936	; 0x1348
 800a63c:	443b      	add	r3, r7
 800a63e:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t106.re * 0.5 + t106.im * 0.0) - (t107.re * 0.5 + t107.im * 0.0);
 800a642:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800a646:	ed93 7b00 	vldr	d7, [r3]
 800a64a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800a64e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a652:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800a656:	ed93 7b02 	vldr	d7, [r3, #8]
 800a65a:	ed9f 5b77 	vldr	d5, [pc, #476]	; 800a838 <G_q+0x8418>
 800a65e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a662:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a666:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 800a66a:	ed93 7b00 	vldr	d7, [r3]
 800a66e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a672:	ee27 5b05 	vmul.f64	d5, d7, d5
 800a676:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 800a67a:	ed93 7b02 	vldr	d7, [r3, #8]
 800a67e:	ed9f 4b6e 	vldr	d4, [pc, #440]	; 800a838 <G_q+0x8418>
 800a682:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a686:	ee35 7b07 	vadd.f64	d7, d5, d7
 800a68a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a68e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800a692:	ed83 7b00 	vstr	d7, [r3]
  if (t108.im == 0.0) {
 800a696:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 800a69a:	ed93 7b02 	vldr	d7, [r3, #8]
 800a69e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a6a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6a6:	d115      	bne.n	800a6d4 <G_q+0x82b4>
    t12_re = t108.re / 2.0;
 800a6a8:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 800a6ac:	ed93 6b00 	vldr	d6, [r3]
 800a6b0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a6b4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a6b8:	f241 3388 	movw	r3, #5000	; 0x1388
 800a6bc:	443b      	add	r3, r7
 800a6be:	ed83 7b00 	vstr	d7, [r3]
    t12_im = 0.0;
 800a6c2:	f04f 0300 	mov.w	r3, #0
 800a6c6:	f04f 0400 	mov.w	r4, #0
 800a6ca:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800a6ce:	e9c2 3400 	strd	r3, r4, [r2]
 800a6d2:	e037      	b.n	800a744 <G_q+0x8324>
  } else if (t108.re == 0.0) {
 800a6d4:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 800a6d8:	ed93 7b00 	vldr	d7, [r3]
 800a6dc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a6e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6e4:	d115      	bne.n	800a712 <G_q+0x82f2>
    t12_re = 0.0;
 800a6e6:	f04f 0300 	mov.w	r3, #0
 800a6ea:	f04f 0400 	mov.w	r4, #0
 800a6ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6f2:	443a      	add	r2, r7
 800a6f4:	e9c2 3400 	strd	r3, r4, [r2]
    t12_im = t108.im / 2.0;
 800a6f8:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 800a6fc:	ed93 6b02 	vldr	d6, [r3, #8]
 800a700:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a704:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a708:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800a70c:	ed83 7b00 	vstr	d7, [r3]
 800a710:	e018      	b.n	800a744 <G_q+0x8324>
  } else {
    t12_re = t108.re / 2.0;
 800a712:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 800a716:	ed93 6b00 	vldr	d6, [r3]
 800a71a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a71e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a722:	f241 3388 	movw	r3, #5000	; 0x1388
 800a726:	443b      	add	r3, r7
 800a728:	ed83 7b00 	vstr	d7, [r3]
    t12_im = t108.im / 2.0;
 800a72c:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 800a730:	ed93 6b02 	vldr	d6, [r3, #8]
 800a734:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a738:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a73c:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800a740:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t109.im == 0.0) {
 800a744:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800a748:	ed93 7b02 	vldr	d7, [r3, #8]
 800a74c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a754:	d116      	bne.n	800a784 <G_q+0x8364>
    t34_re = t109.re / 2.0;
 800a756:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800a75a:	ed93 6b00 	vldr	d6, [r3]
 800a75e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a762:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a766:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800a76a:	443b      	add	r3, r7
 800a76c:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800a770:	f04f 0300 	mov.w	r3, #0
 800a774:	f04f 0400 	mov.w	r4, #0
 800a778:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800a77c:	443a      	add	r2, r7
 800a77e:	e9c2 3400 	strd	r3, r4, [r2]
 800a782:	e039      	b.n	800a7f8 <G_q+0x83d8>
  } else if (t109.re == 0.0) {
 800a784:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800a788:	ed93 7b00 	vldr	d7, [r3]
 800a78c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a794:	d116      	bne.n	800a7c4 <G_q+0x83a4>
    t34_re = 0.0;
 800a796:	f04f 0300 	mov.w	r3, #0
 800a79a:	f04f 0400 	mov.w	r4, #0
 800a79e:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800a7a2:	443a      	add	r2, r7
 800a7a4:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t109.im / 2.0;
 800a7a8:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800a7ac:	ed93 6b02 	vldr	d6, [r3, #8]
 800a7b0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a7b4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a7b8:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800a7bc:	443b      	add	r3, r7
 800a7be:	ed83 7b00 	vstr	d7, [r3]
 800a7c2:	e019      	b.n	800a7f8 <G_q+0x83d8>
  } else {
    t34_re = t109.re / 2.0;
 800a7c4:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800a7c8:	ed93 6b00 	vldr	d6, [r3]
 800a7cc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a7d0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a7d4:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800a7d8:	443b      	add	r3, r7
 800a7da:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t109.im / 2.0;
 800a7de:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800a7e2:	ed93 6b02 	vldr	d6, [r3, #8]
 800a7e6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a7ea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a7ee:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800a7f2:	443b      	add	r3, r7
 800a7f4:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t110.im == 0.0) {
 800a7f8:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800a7fc:	ed93 7b02 	vldr	d7, [r3, #8]
 800a800:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a808:	d11c      	bne.n	800a844 <G_q+0x8424>
    b_t10_re = t110.re / 2.0;
 800a80a:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800a80e:	ed93 6b00 	vldr	d6, [r3]
 800a812:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a816:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a81a:	f241 3338 	movw	r3, #4920	; 0x1338
 800a81e:	443b      	add	r3, r7
 800a820:	ed83 7b00 	vstr	d7, [r3]
    t85_im = 0.0;
 800a824:	f04f 0300 	mov.w	r3, #0
 800a828:	f04f 0400 	mov.w	r4, #0
 800a82c:	f241 3218 	movw	r2, #4888	; 0x1318
 800a830:	443a      	add	r2, r7
 800a832:	e9c2 3400 	strd	r3, r4, [r2]
 800a836:	e03f      	b.n	800a8b8 <G_q+0x8498>
	...
 800a840:	ffffedf0 	.word	0xffffedf0
  } else if (t110.re == 0.0) {
 800a844:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800a848:	ed93 7b00 	vldr	d7, [r3]
 800a84c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a854:	d116      	bne.n	800a884 <G_q+0x8464>
    b_t10_re = 0.0;
 800a856:	f04f 0300 	mov.w	r3, #0
 800a85a:	f04f 0400 	mov.w	r4, #0
 800a85e:	f241 3238 	movw	r2, #4920	; 0x1338
 800a862:	443a      	add	r2, r7
 800a864:	e9c2 3400 	strd	r3, r4, [r2]
    t85_im = t110.im / 2.0;
 800a868:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800a86c:	ed93 6b02 	vldr	d6, [r3, #8]
 800a870:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a874:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a878:	f241 3318 	movw	r3, #4888	; 0x1318
 800a87c:	443b      	add	r3, r7
 800a87e:	ed83 7b00 	vstr	d7, [r3]
 800a882:	e019      	b.n	800a8b8 <G_q+0x8498>
  } else {
    b_t10_re = t110.re / 2.0;
 800a884:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800a888:	ed93 6b00 	vldr	d6, [r3]
 800a88c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a890:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a894:	f241 3338 	movw	r3, #4920	; 0x1338
 800a898:	443b      	add	r3, r7
 800a89a:	ed83 7b00 	vstr	d7, [r3]
    t85_im = t110.im / 2.0;
 800a89e:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800a8a2:	ed93 6b02 	vldr	d6, [r3, #8]
 800a8a6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a8aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a8ae:	f241 3318 	movw	r3, #4888	; 0x1318
 800a8b2:	443b      	add	r3, r7
 800a8b4:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t111.im == 0.0) {
 800a8b8:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 800a8bc:	ed93 7b02 	vldr	d7, [r3, #8]
 800a8c0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a8c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8c8:	d115      	bne.n	800a8f6 <G_q+0x84d6>
    t16_re = t111.re / 2.0;
 800a8ca:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 800a8ce:	ed93 6b00 	vldr	d6, [r3]
 800a8d2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a8d6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a8da:	f241 3368 	movw	r3, #4968	; 0x1368
 800a8de:	443b      	add	r3, r7
 800a8e0:	ed83 7b00 	vstr	d7, [r3]
    t16_im = 0.0;
 800a8e4:	f04f 0300 	mov.w	r3, #0
 800a8e8:	f04f 0400 	mov.w	r4, #0
 800a8ec:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800a8f0:	e9c2 3400 	strd	r3, r4, [r2]
 800a8f4:	e037      	b.n	800a966 <G_q+0x8546>
  } else if (t111.re == 0.0) {
 800a8f6:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 800a8fa:	ed93 7b00 	vldr	d7, [r3]
 800a8fe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a906:	d115      	bne.n	800a934 <G_q+0x8514>
    t16_re = 0.0;
 800a908:	f04f 0300 	mov.w	r3, #0
 800a90c:	f04f 0400 	mov.w	r4, #0
 800a910:	f241 3268 	movw	r2, #4968	; 0x1368
 800a914:	443a      	add	r2, r7
 800a916:	e9c2 3400 	strd	r3, r4, [r2]
    t16_im = t111.im / 2.0;
 800a91a:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 800a91e:	ed93 6b02 	vldr	d6, [r3, #8]
 800a922:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a926:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a92a:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800a92e:	ed83 7b00 	vstr	d7, [r3]
 800a932:	e018      	b.n	800a966 <G_q+0x8546>
  } else {
    t16_re = t111.re / 2.0;
 800a934:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 800a938:	ed93 6b00 	vldr	d6, [r3]
 800a93c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a940:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a944:	f241 3368 	movw	r3, #4968	; 0x1368
 800a948:	443b      	add	r3, r7
 800a94a:	ed83 7b00 	vstr	d7, [r3]
    t16_im = t111.im / 2.0;
 800a94e:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 800a952:	ed93 6b02 	vldr	d6, [r3, #8]
 800a956:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a95a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a95e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800a962:	ed83 7b00 	vstr	d7, [r3]
  }

  t12_re += t34_re;
 800a966:	f241 3388 	movw	r3, #5000	; 0x1388
 800a96a:	443b      	add	r3, r7
 800a96c:	ed93 6b00 	vldr	d6, [r3]
 800a970:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800a974:	443b      	add	r3, r7
 800a976:	ed93 7b00 	vldr	d7, [r3]
 800a97a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a97e:	f241 3388 	movw	r3, #5000	; 0x1388
 800a982:	443b      	add	r3, r7
 800a984:	ed83 7b00 	vstr	d7, [r3]
  t12_im += t34_im;
 800a988:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800a98c:	ed93 6b00 	vldr	d6, [r3]
 800a990:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800a994:	443b      	add	r3, r7
 800a996:	ed93 7b00 	vldr	d7, [r3]
 800a99a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a99e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800a9a2:	ed83 7b00 	vstr	d7, [r3]
  b_t10_re = (b_t10_re + t16_re) + 7.498798913309288E-33;
 800a9a6:	f241 3338 	movw	r3, #4920	; 0x1338
 800a9aa:	443b      	add	r3, r7
 800a9ac:	ed93 6b00 	vldr	d6, [r3]
 800a9b0:	f241 3368 	movw	r3, #4968	; 0x1368
 800a9b4:	443b      	add	r3, r7
 800a9b6:	ed93 7b00 	vldr	d7, [r3]
 800a9ba:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a9be:	ed9f 6b60 	vldr	d6, [pc, #384]	; 800ab40 <G_q+0x8720>
 800a9c2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a9c6:	f241 3338 	movw	r3, #4920	; 0x1338
 800a9ca:	443b      	add	r3, r7
 800a9cc:	ed83 7b00 	vstr	d7, [r3]
  t85_im += t16_im;
 800a9d0:	f241 3318 	movw	r3, #4888	; 0x1318
 800a9d4:	443b      	add	r3, r7
 800a9d6:	ed93 6b00 	vldr	d6, [r3]
 800a9da:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800a9de:	ed93 7b00 	vldr	d7, [r3]
 800a9e2:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a9e6:	f241 3318 	movw	r3, #4888	; 0x1318
 800a9ea:	443b      	add	r3, r7
 800a9ec:	ed83 7b00 	vstr	d7, [r3]
  if (t102.im == 0.0) {
 800a9f0:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800a9f4:	ed93 7b02 	vldr	d7, [r3, #8]
 800a9f8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a9fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa00:	d116      	bne.n	800aa30 <G_q+0x8610>
    t23_re = t102.re / 2.0;
 800aa02:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800aa06:	ed93 6b00 	vldr	d6, [r3]
 800aa0a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800aa0e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800aa12:	f241 3330 	movw	r3, #4912	; 0x1330
 800aa16:	443b      	add	r3, r7
 800aa18:	ed83 7b00 	vstr	d7, [r3]
    t3_im = 0.0;
 800aa1c:	f04f 0300 	mov.w	r3, #0
 800aa20:	f04f 0400 	mov.w	r4, #0
 800aa24:	f241 3210 	movw	r2, #4880	; 0x1310
 800aa28:	443a      	add	r2, r7
 800aa2a:	e9c2 3400 	strd	r3, r4, [r2]
 800aa2e:	e039      	b.n	800aaa4 <G_q+0x8684>
  } else if (t102.re == 0.0) {
 800aa30:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800aa34:	ed93 7b00 	vldr	d7, [r3]
 800aa38:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aa3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa40:	d116      	bne.n	800aa70 <G_q+0x8650>
    t23_re = 0.0;
 800aa42:	f04f 0300 	mov.w	r3, #0
 800aa46:	f04f 0400 	mov.w	r4, #0
 800aa4a:	f241 3230 	movw	r2, #4912	; 0x1330
 800aa4e:	443a      	add	r2, r7
 800aa50:	e9c2 3400 	strd	r3, r4, [r2]
    t3_im = t102.im / 2.0;
 800aa54:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800aa58:	ed93 6b02 	vldr	d6, [r3, #8]
 800aa5c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800aa60:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800aa64:	f241 3310 	movw	r3, #4880	; 0x1310
 800aa68:	443b      	add	r3, r7
 800aa6a:	ed83 7b00 	vstr	d7, [r3]
 800aa6e:	e019      	b.n	800aaa4 <G_q+0x8684>
  } else {
    t23_re = t102.re / 2.0;
 800aa70:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800aa74:	ed93 6b00 	vldr	d6, [r3]
 800aa78:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800aa7c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800aa80:	f241 3330 	movw	r3, #4912	; 0x1330
 800aa84:	443b      	add	r3, r7
 800aa86:	ed83 7b00 	vstr	d7, [r3]
    t3_im = t102.im / 2.0;
 800aa8a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800aa8e:	ed93 6b02 	vldr	d6, [r3, #8]
 800aa92:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800aa96:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800aa9a:	f241 3310 	movw	r3, #4880	; 0x1310
 800aa9e:	443b      	add	r3, r7
 800aaa0:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t103.im == 0.0) {
 800aaa4:	4b28      	ldr	r3, [pc, #160]	; (800ab48 <G_q+0x8728>)
 800aaa6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800aaaa:	443a      	add	r2, r7
 800aaac:	4413      	add	r3, r2
 800aaae:	ed93 7b02 	vldr	d7, [r3, #8]
 800aab2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaba:	d119      	bne.n	800aaf0 <G_q+0x86d0>
    t34_re = t103.re / 2.0;
 800aabc:	4b22      	ldr	r3, [pc, #136]	; (800ab48 <G_q+0x8728>)
 800aabe:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800aac2:	443a      	add	r2, r7
 800aac4:	4413      	add	r3, r2
 800aac6:	ed93 6b00 	vldr	d6, [r3]
 800aaca:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800aace:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800aad2:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800aad6:	443b      	add	r3, r7
 800aad8:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800aadc:	f04f 0300 	mov.w	r3, #0
 800aae0:	f04f 0400 	mov.w	r4, #0
 800aae4:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800aae8:	443a      	add	r2, r7
 800aaea:	e9c2 3400 	strd	r3, r4, [r2]
 800aaee:	e04d      	b.n	800ab8c <G_q+0x876c>
  } else if (t103.re == 0.0) {
 800aaf0:	4b15      	ldr	r3, [pc, #84]	; (800ab48 <G_q+0x8728>)
 800aaf2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800aaf6:	443a      	add	r2, r7
 800aaf8:	4413      	add	r3, r2
 800aafa:	ed93 7b00 	vldr	d7, [r3]
 800aafe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ab02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab06:	d121      	bne.n	800ab4c <G_q+0x872c>
    t34_re = 0.0;
 800ab08:	f04f 0300 	mov.w	r3, #0
 800ab0c:	f04f 0400 	mov.w	r4, #0
 800ab10:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800ab14:	443a      	add	r2, r7
 800ab16:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t103.im / 2.0;
 800ab1a:	4b0b      	ldr	r3, [pc, #44]	; (800ab48 <G_q+0x8728>)
 800ab1c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ab20:	443a      	add	r2, r7
 800ab22:	4413      	add	r3, r2
 800ab24:	ed93 6b02 	vldr	d6, [r3, #8]
 800ab28:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ab2c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ab30:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800ab34:	443b      	add	r3, r7
 800ab36:	ed83 7b00 	vstr	d7, [r3]
 800ab3a:	e027      	b.n	800ab8c <G_q+0x876c>
 800ab3c:	f3af 8000 	nop.w
 800ab40:	858a5d48 	.word	0x858a5d48
 800ab44:	394377ce 	.word	0x394377ce
 800ab48:	ffffee10 	.word	0xffffee10
  } else {
    t34_re = t103.re / 2.0;
 800ab4c:	4bd4      	ldr	r3, [pc, #848]	; (800aea0 <G_q+0x8a80>)
 800ab4e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ab52:	443a      	add	r2, r7
 800ab54:	4413      	add	r3, r2
 800ab56:	ed93 6b00 	vldr	d6, [r3]
 800ab5a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ab5e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ab62:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800ab66:	443b      	add	r3, r7
 800ab68:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t103.im / 2.0;
 800ab6c:	4bcc      	ldr	r3, [pc, #816]	; (800aea0 <G_q+0x8a80>)
 800ab6e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ab72:	443a      	add	r2, r7
 800ab74:	4413      	add	r3, r2
 800ab76:	ed93 6b02 	vldr	d6, [r3, #8]
 800ab7a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ab7e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ab82:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800ab86:	443b      	add	r3, r7
 800ab88:	ed83 7b00 	vstr	d7, [r3]
  }

  t13_re = (t13_im * t20_re - t76_re * t20_im) + (t12_re * b_t10_re - t12_im *
 800ab8c:	f241 3370 	movw	r3, #4976	; 0x1370
 800ab90:	443b      	add	r3, r7
 800ab92:	ed93 6b00 	vldr	d6, [r3]
 800ab96:	f241 3348 	movw	r3, #4936	; 0x1348
 800ab9a:	443b      	add	r3, r7
 800ab9c:	ed93 7b00 	vldr	d7, [r3]
 800aba0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800aba4:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800aba8:	443b      	add	r3, r7
 800abaa:	ed93 5b00 	vldr	d5, [r3]
 800abae:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800abb2:	ed93 7b00 	vldr	d7, [r3]
 800abb6:	ee25 7b07 	vmul.f64	d7, d5, d7
 800abba:	ee36 6b47 	vsub.f64	d6, d6, d7
 800abbe:	f241 3388 	movw	r3, #5000	; 0x1388
 800abc2:	443b      	add	r3, r7
 800abc4:	ed93 5b00 	vldr	d5, [r3]
 800abc8:	f241 3338 	movw	r3, #4920	; 0x1338
 800abcc:	443b      	add	r3, r7
 800abce:	ed93 7b00 	vldr	d7, [r3]
 800abd2:	ee25 5b07 	vmul.f64	d5, d5, d7
 800abd6:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800abda:	ed93 4b00 	vldr	d4, [r3]
 800abde:	f241 3318 	movw	r3, #4888	; 0x1318
 800abe2:	443b      	add	r3, r7
 800abe4:	ed93 7b00 	vldr	d7, [r3]
 800abe8:	ee24 7b07 	vmul.f64	d7, d4, d7
 800abec:	ee35 7b47 	vsub.f64	d7, d5, d7
 800abf0:	ee36 7b07 	vadd.f64	d7, d6, d7
 800abf4:	f241 3378 	movw	r3, #4984	; 0x1378
 800abf8:	443b      	add	r3, r7
 800abfa:	ed83 7b00 	vstr	d7, [r3]
    t85_im);
  t76_re = (t13_im * t20_im + t76_re * t20_re) + (t12_re * t85_im + t12_im *
 800abfe:	f241 3370 	movw	r3, #4976	; 0x1370
 800ac02:	443b      	add	r3, r7
 800ac04:	ed93 6b00 	vldr	d6, [r3]
 800ac08:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800ac0c:	ed93 7b00 	vldr	d7, [r3]
 800ac10:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ac14:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800ac18:	443b      	add	r3, r7
 800ac1a:	ed93 5b00 	vldr	d5, [r3]
 800ac1e:	f241 3348 	movw	r3, #4936	; 0x1348
 800ac22:	443b      	add	r3, r7
 800ac24:	ed93 7b00 	vldr	d7, [r3]
 800ac28:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ac2c:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ac30:	f241 3388 	movw	r3, #5000	; 0x1388
 800ac34:	443b      	add	r3, r7
 800ac36:	ed93 5b00 	vldr	d5, [r3]
 800ac3a:	f241 3318 	movw	r3, #4888	; 0x1318
 800ac3e:	443b      	add	r3, r7
 800ac40:	ed93 7b00 	vldr	d7, [r3]
 800ac44:	ee25 5b07 	vmul.f64	d5, d5, d7
 800ac48:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800ac4c:	ed93 4b00 	vldr	d4, [r3]
 800ac50:	f241 3338 	movw	r3, #4920	; 0x1338
 800ac54:	443b      	add	r3, r7
 800ac56:	ed93 7b00 	vldr	d7, [r3]
 800ac5a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800ac5e:	ee35 7b07 	vadd.f64	d7, d5, d7
 800ac62:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800ac66:	443b      	add	r3, r7
 800ac68:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ac6c:	ed83 7b00 	vstr	d7, [r3]
    b_t10_re);
  t23_re += t34_re;
 800ac70:	f241 3330 	movw	r3, #4912	; 0x1330
 800ac74:	443b      	add	r3, r7
 800ac76:	ed93 6b00 	vldr	d6, [r3]
 800ac7a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800ac7e:	443b      	add	r3, r7
 800ac80:	ed93 7b00 	vldr	d7, [r3]
 800ac84:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ac88:	f241 3330 	movw	r3, #4912	; 0x1330
 800ac8c:	443b      	add	r3, r7
 800ac8e:	ed83 7b00 	vstr	d7, [r3]
  t3_im += t34_im;
 800ac92:	f241 3310 	movw	r3, #4880	; 0x1310
 800ac96:	443b      	add	r3, r7
 800ac98:	ed93 6b00 	vldr	d6, [r3]
 800ac9c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800aca0:	443b      	add	r3, r7
 800aca2:	ed93 7b00 	vldr	d7, [r3]
 800aca6:	ee36 7b07 	vadd.f64	d7, d6, d7
 800acaa:	f241 3310 	movw	r3, #4880	; 0x1310
 800acae:	443b      	add	r3, r7
 800acb0:	ed83 7b00 	vstr	d7, [r3]
  t43_re = (t112.re * 0.0 - t112.im * 0.5) - (t113.re * 0.0 - t113.im * 0.5);
 800acb4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800acb8:	ed93 7b00 	vldr	d7, [r3]
 800acbc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800ae98 <G_q+0x8a78>
 800acc0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800acc4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800acc8:	ed93 7b02 	vldr	d7, [r3, #8]
 800accc:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800acd0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800acd4:	ee36 6b47 	vsub.f64	d6, d6, d7
 800acd8:	4b72      	ldr	r3, [pc, #456]	; (800aea4 <G_q+0x8a84>)
 800acda:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800acde:	443a      	add	r2, r7
 800ace0:	4413      	add	r3, r2
 800ace2:	ed93 7b00 	vldr	d7, [r3]
 800ace6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800ae98 <G_q+0x8a78>
 800acea:	ee27 5b05 	vmul.f64	d5, d7, d5
 800acee:	4b6d      	ldr	r3, [pc, #436]	; (800aea4 <G_q+0x8a84>)
 800acf0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800acf4:	443a      	add	r2, r7
 800acf6:	4413      	add	r3, r2
 800acf8:	ed93 7b02 	vldr	d7, [r3, #8]
 800acfc:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800ad00:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ad04:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ad08:	f241 2358 	movw	r3, #4696	; 0x1258
 800ad0c:	443b      	add	r3, r7
 800ad0e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ad12:	ed83 7b00 	vstr	d7, [r3]
  t41_re = (t112.re * 0.5 + t112.im * 0.0) - (t113.re * 0.5 + t113.im * 0.0);
 800ad16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ad1a:	ed93 7b00 	vldr	d7, [r3]
 800ad1e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800ad22:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ad26:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ad2a:	ed93 7b02 	vldr	d7, [r3, #8]
 800ad2e:	ed9f 5b5a 	vldr	d5, [pc, #360]	; 800ae98 <G_q+0x8a78>
 800ad32:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ad36:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ad3a:	4b5a      	ldr	r3, [pc, #360]	; (800aea4 <G_q+0x8a84>)
 800ad3c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ad40:	443a      	add	r2, r7
 800ad42:	4413      	add	r3, r2
 800ad44:	ed93 7b00 	vldr	d7, [r3]
 800ad48:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ad4c:	ee27 5b05 	vmul.f64	d5, d7, d5
 800ad50:	4b54      	ldr	r3, [pc, #336]	; (800aea4 <G_q+0x8a84>)
 800ad52:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ad56:	443a      	add	r2, r7
 800ad58:	4413      	add	r3, r2
 800ad5a:	ed93 7b02 	vldr	d7, [r3, #8]
 800ad5e:	ed9f 4b4e 	vldr	d4, [pc, #312]	; 800ae98 <G_q+0x8a78>
 800ad62:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ad66:	ee35 7b07 	vadd.f64	d7, d5, d7
 800ad6a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ad6e:	f241 3308 	movw	r3, #4872	; 0x1308
 800ad72:	443b      	add	r3, r7
 800ad74:	ed83 7b00 	vstr	d7, [r3]
  t41_im = (t72_re * t58_im - t8_re * t60_re) + (t13_re * t23_re - t76_re *
 800ad78:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800ad7c:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800ad80:	ed92 6b00 	vldr	d6, [r2]
 800ad84:	ed93 7b00 	vldr	d7, [r3]
 800ad88:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ad8c:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800ad90:	f241 2350 	movw	r3, #4688	; 0x1250
 800ad94:	443b      	add	r3, r7
 800ad96:	ed92 5b00 	vldr	d5, [r2]
 800ad9a:	ed93 7b00 	vldr	d7, [r3]
 800ad9e:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ada2:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ada6:	f241 3378 	movw	r3, #4984	; 0x1378
 800adaa:	443b      	add	r3, r7
 800adac:	ed93 5b00 	vldr	d5, [r3]
 800adb0:	f241 3330 	movw	r3, #4912	; 0x1330
 800adb4:	443b      	add	r3, r7
 800adb6:	ed93 7b00 	vldr	d7, [r3]
 800adba:	ee25 5b07 	vmul.f64	d5, d5, d7
 800adbe:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800adc2:	443b      	add	r3, r7
 800adc4:	ed93 4b00 	vldr	d4, [r3]
 800adc8:	f241 3310 	movw	r3, #4880	; 0x1310
 800adcc:	443b      	add	r3, r7
 800adce:	ed93 7b00 	vldr	d7, [r3]
 800add2:	ee24 7b07 	vmul.f64	d7, d4, d7
 800add6:	ee35 7b47 	vsub.f64	d7, d5, d7
 800adda:	ee36 7b07 	vadd.f64	d7, d6, d7
 800adde:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800ade2:	ed83 7b00 	vstr	d7, [r3]
    t3_im);
  t8_re = (t72_re * t60_re + t8_re * t58_im) + (t13_re * t3_im + t76_re * t23_re);
 800ade6:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800adea:	f241 2350 	movw	r3, #4688	; 0x1250
 800adee:	443b      	add	r3, r7
 800adf0:	ed92 6b00 	vldr	d6, [r2]
 800adf4:	ed93 7b00 	vldr	d7, [r3]
 800adf8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800adfc:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800ae00:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800ae04:	ed92 5b00 	vldr	d5, [r2]
 800ae08:	ed93 7b00 	vldr	d7, [r3]
 800ae0c:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ae10:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ae14:	f241 3378 	movw	r3, #4984	; 0x1378
 800ae18:	443b      	add	r3, r7
 800ae1a:	ed93 5b00 	vldr	d5, [r3]
 800ae1e:	f241 3310 	movw	r3, #4880	; 0x1310
 800ae22:	443b      	add	r3, r7
 800ae24:	ed93 7b00 	vldr	d7, [r3]
 800ae28:	ee25 5b07 	vmul.f64	d5, d5, d7
 800ae2c:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800ae30:	443b      	add	r3, r7
 800ae32:	ed93 4b00 	vldr	d4, [r3]
 800ae36:	f241 3330 	movw	r3, #4912	; 0x1330
 800ae3a:	443b      	add	r3, r7
 800ae3c:	ed93 7b00 	vldr	d7, [r3]
 800ae40:	ee24 7b07 	vmul.f64	d7, d4, d7
 800ae44:	ee35 7b07 	vadd.f64	d7, d5, d7
 800ae48:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800ae4c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ae50:	ed83 7b00 	vstr	d7, [r3]
  if (t124.im == 0.0) {
 800ae54:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800ae58:	ed93 7b02 	vldr	d7, [r3, #8]
 800ae5c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ae60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae64:	d120      	bne.n	800aea8 <G_q+0x8a88>
    t43_im = t124.re / 2.0;
 800ae66:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800ae6a:	ed93 6b00 	vldr	d6, [r3]
 800ae6e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ae72:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ae76:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800ae7a:	443b      	add	r3, r7
 800ae7c:	ed83 7b00 	vstr	d7, [r3]
    b_t54_re = 0.0;
 800ae80:	f04f 0300 	mov.w	r3, #0
 800ae84:	f04f 0400 	mov.w	r4, #0
 800ae88:	f241 22f0 	movw	r2, #4848	; 0x12f0
 800ae8c:	443a      	add	r2, r7
 800ae8e:	e9c2 3400 	strd	r3, r4, [r2]
 800ae92:	e043      	b.n	800af1c <G_q+0x8afc>
 800ae94:	f3af 8000 	nop.w
	...
 800aea0:	ffffee10 	.word	0xffffee10
 800aea4:	ffffec90 	.word	0xffffec90
  } else if (t124.re == 0.0) {
 800aea8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800aeac:	ed93 7b00 	vldr	d7, [r3]
 800aeb0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aeb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeb8:	d116      	bne.n	800aee8 <G_q+0x8ac8>
    t43_im = 0.0;
 800aeba:	f04f 0300 	mov.w	r3, #0
 800aebe:	f04f 0400 	mov.w	r4, #0
 800aec2:	f241 22f8 	movw	r2, #4856	; 0x12f8
 800aec6:	443a      	add	r2, r7
 800aec8:	e9c2 3400 	strd	r3, r4, [r2]
    b_t54_re = t124.im / 2.0;
 800aecc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800aed0:	ed93 6b02 	vldr	d6, [r3, #8]
 800aed4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800aed8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800aedc:	f241 23f0 	movw	r3, #4848	; 0x12f0
 800aee0:	443b      	add	r3, r7
 800aee2:	ed83 7b00 	vstr	d7, [r3]
 800aee6:	e019      	b.n	800af1c <G_q+0x8afc>
  } else {
    t43_im = t124.re / 2.0;
 800aee8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800aeec:	ed93 6b00 	vldr	d6, [r3]
 800aef0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800aef4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800aef8:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800aefc:	443b      	add	r3, r7
 800aefe:	ed83 7b00 	vstr	d7, [r3]
    b_t54_re = t124.im / 2.0;
 800af02:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800af06:	ed93 6b02 	vldr	d6, [r3, #8]
 800af0a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800af0e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800af12:	f241 23f0 	movw	r3, #4848	; 0x12f0
 800af16:	443b      	add	r3, r7
 800af18:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t125.im == 0.0) {
 800af1c:	4b82      	ldr	r3, [pc, #520]	; (800b128 <G_q+0x8d08>)
 800af1e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800af22:	443a      	add	r2, r7
 800af24:	4413      	add	r3, r2
 800af26:	ed93 7b02 	vldr	d7, [r3, #8]
 800af2a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800af2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af32:	d119      	bne.n	800af68 <G_q+0x8b48>
    t55_im = t125.re / 2.0;
 800af34:	4b7c      	ldr	r3, [pc, #496]	; (800b128 <G_q+0x8d08>)
 800af36:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800af3a:	443a      	add	r2, r7
 800af3c:	4413      	add	r3, r2
 800af3e:	ed93 6b00 	vldr	d6, [r3]
 800af42:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800af46:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800af4a:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800af4e:	443b      	add	r3, r7
 800af50:	ed83 7b00 	vstr	d7, [r3]
    t70_re = 0.0;
 800af54:	f241 22d0 	movw	r2, #4816	; 0x12d0
 800af58:	443a      	add	r2, r7
 800af5a:	f04f 0300 	mov.w	r3, #0
 800af5e:	f04f 0400 	mov.w	r4, #0
 800af62:	e9c2 3400 	strd	r3, r4, [r2]
 800af66:	e045      	b.n	800aff4 <G_q+0x8bd4>
  } else if (t125.re == 0.0) {
 800af68:	4b6f      	ldr	r3, [pc, #444]	; (800b128 <G_q+0x8d08>)
 800af6a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800af6e:	443a      	add	r2, r7
 800af70:	4413      	add	r3, r2
 800af72:	ed93 7b00 	vldr	d7, [r3]
 800af76:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800af7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af7e:	d119      	bne.n	800afb4 <G_q+0x8b94>
    t55_im = 0.0;
 800af80:	f04f 0300 	mov.w	r3, #0
 800af84:	f04f 0400 	mov.w	r4, #0
 800af88:	f241 22d8 	movw	r2, #4824	; 0x12d8
 800af8c:	443a      	add	r2, r7
 800af8e:	e9c2 3400 	strd	r3, r4, [r2]
    t70_re = t125.im / 2.0;
 800af92:	4b65      	ldr	r3, [pc, #404]	; (800b128 <G_q+0x8d08>)
 800af94:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800af98:	443a      	add	r2, r7
 800af9a:	4413      	add	r3, r2
 800af9c:	ed93 6b02 	vldr	d6, [r3, #8]
 800afa0:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800afa4:	443b      	add	r3, r7
 800afa6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800afaa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800afae:	ed83 7b00 	vstr	d7, [r3]
 800afb2:	e01f      	b.n	800aff4 <G_q+0x8bd4>
  } else {
    t55_im = t125.re / 2.0;
 800afb4:	4b5c      	ldr	r3, [pc, #368]	; (800b128 <G_q+0x8d08>)
 800afb6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800afba:	443a      	add	r2, r7
 800afbc:	4413      	add	r3, r2
 800afbe:	ed93 6b00 	vldr	d6, [r3]
 800afc2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800afc6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800afca:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800afce:	443b      	add	r3, r7
 800afd0:	ed83 7b00 	vstr	d7, [r3]
    t70_re = t125.im / 2.0;
 800afd4:	4b54      	ldr	r3, [pc, #336]	; (800b128 <G_q+0x8d08>)
 800afd6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800afda:	443a      	add	r2, r7
 800afdc:	4413      	add	r3, r2
 800afde:	ed93 6b02 	vldr	d6, [r3, #8]
 800afe2:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800afe6:	443b      	add	r3, r7
 800afe8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800afec:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800aff0:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t136.im == 0.0) {
 800aff4:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800aff8:	ed93 7b02 	vldr	d7, [r3, #8]
 800affc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b004:	d116      	bne.n	800b034 <G_q+0x8c14>
    t70_im = t136.re / 2.0;
 800b006:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800b00a:	ed93 6b00 	vldr	d6, [r3]
 800b00e:	f241 23c8 	movw	r3, #4808	; 0x12c8
 800b012:	443b      	add	r3, r7
 800b014:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b018:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b01c:	ed83 7b00 	vstr	d7, [r3]
    b_t54_im = 0.0;
 800b020:	f04f 0300 	mov.w	r3, #0
 800b024:	f04f 0400 	mov.w	r4, #0
 800b028:	f241 22e8 	movw	r2, #4840	; 0x12e8
 800b02c:	443a      	add	r2, r7
 800b02e:	e9c2 3400 	strd	r3, r4, [r2]
 800b032:	e039      	b.n	800b0a8 <G_q+0x8c88>
  } else if (t136.re == 0.0) {
 800b034:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800b038:	ed93 7b00 	vldr	d7, [r3]
 800b03c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b044:	d116      	bne.n	800b074 <G_q+0x8c54>
    t70_im = 0.0;
 800b046:	f241 22c8 	movw	r2, #4808	; 0x12c8
 800b04a:	443a      	add	r2, r7
 800b04c:	f04f 0300 	mov.w	r3, #0
 800b050:	f04f 0400 	mov.w	r4, #0
 800b054:	e9c2 3400 	strd	r3, r4, [r2]
    b_t54_im = t136.im / 2.0;
 800b058:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800b05c:	ed93 6b02 	vldr	d6, [r3, #8]
 800b060:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b064:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b068:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800b06c:	443b      	add	r3, r7
 800b06e:	ed83 7b00 	vstr	d7, [r3]
 800b072:	e019      	b.n	800b0a8 <G_q+0x8c88>
  } else {
    t70_im = t136.re / 2.0;
 800b074:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800b078:	ed93 6b00 	vldr	d6, [r3]
 800b07c:	f241 23c8 	movw	r3, #4808	; 0x12c8
 800b080:	443b      	add	r3, r7
 800b082:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b086:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b08a:	ed83 7b00 	vstr	d7, [r3]
    b_t54_im = t136.im / 2.0;
 800b08e:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800b092:	ed93 6b02 	vldr	d6, [r3, #8]
 800b096:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b09a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b09e:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800b0a2:	443b      	add	r3, r7
 800b0a4:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t137.im == 0.0) {
 800b0a8:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800b0ac:	ed93 7b02 	vldr	d7, [r3, #8]
 800b0b0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b0b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0b8:	d116      	bne.n	800b0e8 <G_q+0x8cc8>
    t34_re = t137.re / 2.0;
 800b0ba:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800b0be:	ed93 6b00 	vldr	d6, [r3]
 800b0c2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b0c6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b0ca:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800b0ce:	443b      	add	r3, r7
 800b0d0:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800b0d4:	f04f 0300 	mov.w	r3, #0
 800b0d8:	f04f 0400 	mov.w	r4, #0
 800b0dc:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800b0e0:	443a      	add	r2, r7
 800b0e2:	e9c2 3400 	strd	r3, r4, [r2]
 800b0e6:	e03b      	b.n	800b160 <G_q+0x8d40>
  } else if (t137.re == 0.0) {
 800b0e8:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800b0ec:	ed93 7b00 	vldr	d7, [r3]
 800b0f0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b0f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0f8:	d118      	bne.n	800b12c <G_q+0x8d0c>
    t34_re = 0.0;
 800b0fa:	f04f 0300 	mov.w	r3, #0
 800b0fe:	f04f 0400 	mov.w	r4, #0
 800b102:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800b106:	443a      	add	r2, r7
 800b108:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t137.im / 2.0;
 800b10c:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800b110:	ed93 6b02 	vldr	d6, [r3, #8]
 800b114:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b118:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b11c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800b120:	443b      	add	r3, r7
 800b122:	ed83 7b00 	vstr	d7, [r3]
 800b126:	e01b      	b.n	800b160 <G_q+0x8d40>
 800b128:	ffffecb0 	.word	0xffffecb0
  } else {
    t34_re = t137.re / 2.0;
 800b12c:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800b130:	ed93 6b00 	vldr	d6, [r3]
 800b134:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b138:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b13c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800b140:	443b      	add	r3, r7
 800b142:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t137.im / 2.0;
 800b146:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800b14a:	ed93 6b02 	vldr	d6, [r3, #8]
 800b14e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b152:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b156:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800b15a:	443b      	add	r3, r7
 800b15c:	ed83 7b00 	vstr	d7, [r3]
  }

  t70_im += t34_re;
 800b160:	f241 23c8 	movw	r3, #4808	; 0x12c8
 800b164:	443b      	add	r3, r7
 800b166:	f241 22c8 	movw	r2, #4808	; 0x12c8
 800b16a:	443a      	add	r2, r7
 800b16c:	ed92 6b00 	vldr	d6, [r2]
 800b170:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800b174:	443a      	add	r2, r7
 800b176:	ed92 7b00 	vldr	d7, [r2]
 800b17a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b17e:	ed83 7b00 	vstr	d7, [r3]
  b_t54_im += t34_im;
 800b182:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800b186:	443b      	add	r3, r7
 800b188:	ed93 6b00 	vldr	d6, [r3]
 800b18c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800b190:	443b      	add	r3, r7
 800b192:	ed93 7b00 	vldr	d7, [r3]
 800b196:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b19a:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800b19e:	443b      	add	r3, r7
 800b1a0:	ed83 7b00 	vstr	d7, [r3]
  t74_re = (t138.re * 0.0 - t138.im * 0.5) - (t139.re * 0.0 - t139.im * 0.5);
 800b1a4:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 800b1a8:	ed93 7b00 	vldr	d7, [r3]
 800b1ac:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 800b488 <G_q+0x9068>
 800b1b0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b1b4:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 800b1b8:	ed93 7b02 	vldr	d7, [r3, #8]
 800b1bc:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b1c0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b1c4:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b1c8:	f507 635e 	add.w	r3, r7, #3552	; 0xde0
 800b1cc:	ed93 7b00 	vldr	d7, [r3]
 800b1d0:	ed9f 5bad 	vldr	d5, [pc, #692]	; 800b488 <G_q+0x9068>
 800b1d4:	ee27 5b05 	vmul.f64	d5, d7, d5
 800b1d8:	f507 635e 	add.w	r3, r7, #3552	; 0xde0
 800b1dc:	ed93 7b02 	vldr	d7, [r3, #8]
 800b1e0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800b1e4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b1e8:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b1ec:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800b1f0:	443b      	add	r3, r7
 800b1f2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b1f6:	ed83 7b00 	vstr	d7, [r3]
  t74_im = (t138.re * 0.5 + t138.im * 0.0) - (t139.re * 0.5 + t139.im * 0.0);
 800b1fa:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 800b1fe:	ed93 7b00 	vldr	d7, [r3]
 800b202:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800b206:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b20a:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 800b20e:	ed93 7b02 	vldr	d7, [r3, #8]
 800b212:	ed9f 5b9d 	vldr	d5, [pc, #628]	; 800b488 <G_q+0x9068>
 800b216:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b21a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b21e:	f507 635e 	add.w	r3, r7, #3552	; 0xde0
 800b222:	ed93 7b00 	vldr	d7, [r3]
 800b226:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b22a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800b22e:	f507 635e 	add.w	r3, r7, #3552	; 0xde0
 800b232:	ed93 7b02 	vldr	d7, [r3, #8]
 800b236:	ed9f 4b94 	vldr	d4, [pc, #592]	; 800b488 <G_q+0x9068>
 800b23a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b23e:	ee35 7b07 	vadd.f64	d7, d5, d7
 800b242:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800b246:	443b      	add	r3, r7
 800b248:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b24c:	ed83 7b00 	vstr	d7, [r3]
  t13_re = t150.re * 3.061616997868383E-17 + t151.re * 3.061616997868383E-17;
 800b250:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800b254:	ed93 7b00 	vldr	d7, [r3]
 800b258:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 800b498 <G_q+0x9078>
 800b25c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b260:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 800b264:	ed93 7b00 	vldr	d7, [r3]
 800b268:	ed9f 5b8b 	vldr	d5, [pc, #556]	; 800b498 <G_q+0x9078>
 800b26c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b270:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b274:	f241 3378 	movw	r3, #4984	; 0x1378
 800b278:	443b      	add	r3, r7
 800b27a:	ed83 7b00 	vstr	d7, [r3]
  t55_re = t150.im * 3.061616997868383E-17 + t151.im * 3.061616997868383E-17;
 800b27e:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800b282:	ed93 7b02 	vldr	d7, [r3, #8]
 800b286:	ed9f 6b84 	vldr	d6, [pc, #528]	; 800b498 <G_q+0x9078>
 800b28a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b28e:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 800b292:	ed93 7b02 	vldr	d7, [r3, #8]
 800b296:	ed9f 5b80 	vldr	d5, [pc, #512]	; 800b498 <G_q+0x9078>
 800b29a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b29e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b2a2:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800b2a6:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t148.re * 0.0 - t148.im * 0.5) - (t149.re * 0.0 - t149.im * 0.5);
 800b2aa:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 800b2ae:	ed93 7b00 	vldr	d7, [r3]
 800b2b2:	ed9f 6b75 	vldr	d6, [pc, #468]	; 800b488 <G_q+0x9068>
 800b2b6:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b2ba:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 800b2be:	ed93 7b02 	vldr	d7, [r3, #8]
 800b2c2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b2c6:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b2ca:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b2ce:	f507 6364 	add.w	r3, r7, #3648	; 0xe40
 800b2d2:	ed93 7b00 	vldr	d7, [r3]
 800b2d6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800b488 <G_q+0x9068>
 800b2da:	ee27 5b05 	vmul.f64	d5, d7, d5
 800b2de:	f507 6364 	add.w	r3, r7, #3648	; 0xe40
 800b2e2:	ed93 7b02 	vldr	d7, [r3, #8]
 800b2e6:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800b2ea:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b2ee:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b2f2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b2f6:	f241 3370 	movw	r3, #4976	; 0x1370
 800b2fa:	443b      	add	r3, r7
 800b2fc:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t148.re * 0.5 + t148.im * 0.0) - (t149.re * 0.5 + t149.im * 0.0);
 800b300:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 800b304:	ed93 7b00 	vldr	d7, [r3]
 800b308:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800b30c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b310:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 800b314:	ed93 7b02 	vldr	d7, [r3, #8]
 800b318:	ed9f 5b5b 	vldr	d5, [pc, #364]	; 800b488 <G_q+0x9068>
 800b31c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b320:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b324:	f507 6364 	add.w	r3, r7, #3648	; 0xe40
 800b328:	ed93 7b00 	vldr	d7, [r3]
 800b32c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b330:	ee27 5b05 	vmul.f64	d5, d7, d5
 800b334:	f507 6364 	add.w	r3, r7, #3648	; 0xe40
 800b338:	ed93 7b02 	vldr	d7, [r3, #8]
 800b33c:	ed9f 4b52 	vldr	d4, [pc, #328]	; 800b488 <G_q+0x9068>
 800b340:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b344:	ee35 7b07 	vadd.f64	d7, d5, d7
 800b348:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b34c:	f241 3368 	movw	r3, #4968	; 0x1368
 800b350:	443b      	add	r3, r7
 800b352:	ed83 7b00 	vstr	d7, [r3]
  if (t146.im == 0.0) {
 800b356:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 800b35a:	ed93 7b02 	vldr	d7, [r3, #8]
 800b35e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b366:	d115      	bne.n	800b394 <G_q+0x8f74>
    t16_im = t146.re / 2.0;
 800b368:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 800b36c:	ed93 6b00 	vldr	d6, [r3]
 800b370:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b374:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b378:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800b37c:	ed83 7b00 	vstr	d7, [r3]
    t20_re = 0.0;
 800b380:	f04f 0300 	mov.w	r3, #0
 800b384:	f04f 0400 	mov.w	r4, #0
 800b388:	f241 3248 	movw	r2, #4936	; 0x1348
 800b38c:	443a      	add	r2, r7
 800b38e:	e9c2 3400 	strd	r3, r4, [r2]
 800b392:	e037      	b.n	800b404 <G_q+0x8fe4>
  } else if (t146.re == 0.0) {
 800b394:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 800b398:	ed93 7b00 	vldr	d7, [r3]
 800b39c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b3a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3a4:	d115      	bne.n	800b3d2 <G_q+0x8fb2>
    t16_im = 0.0;
 800b3a6:	f04f 0300 	mov.w	r3, #0
 800b3aa:	f04f 0400 	mov.w	r4, #0
 800b3ae:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800b3b2:	e9c2 3400 	strd	r3, r4, [r2]
    t20_re = t146.im / 2.0;
 800b3b6:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 800b3ba:	ed93 6b02 	vldr	d6, [r3, #8]
 800b3be:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b3c2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b3c6:	f241 3348 	movw	r3, #4936	; 0x1348
 800b3ca:	443b      	add	r3, r7
 800b3cc:	ed83 7b00 	vstr	d7, [r3]
 800b3d0:	e018      	b.n	800b404 <G_q+0x8fe4>
  } else {
    t16_im = t146.re / 2.0;
 800b3d2:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 800b3d6:	ed93 6b00 	vldr	d6, [r3]
 800b3da:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b3de:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b3e2:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800b3e6:	ed83 7b00 	vstr	d7, [r3]
    t20_re = t146.im / 2.0;
 800b3ea:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 800b3ee:	ed93 6b02 	vldr	d6, [r3, #8]
 800b3f2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b3f6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b3fa:	f241 3348 	movw	r3, #4936	; 0x1348
 800b3fe:	443b      	add	r3, r7
 800b400:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t147.im == 0.0) {
 800b404:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 800b408:	ed93 7b02 	vldr	d7, [r3, #8]
 800b40c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b414:	d116      	bne.n	800b444 <G_q+0x9024>
    t34_re = t147.re / 2.0;
 800b416:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 800b41a:	ed93 6b00 	vldr	d6, [r3]
 800b41e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b422:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b426:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800b42a:	443b      	add	r3, r7
 800b42c:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800b430:	f04f 0300 	mov.w	r3, #0
 800b434:	f04f 0400 	mov.w	r4, #0
 800b438:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800b43c:	443a      	add	r2, r7
 800b43e:	e9c2 3400 	strd	r3, r4, [r2]
 800b442:	e047      	b.n	800b4d4 <G_q+0x90b4>
  } else if (t147.re == 0.0) {
 800b444:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 800b448:	ed93 7b00 	vldr	d7, [r3]
 800b44c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b454:	d124      	bne.n	800b4a0 <G_q+0x9080>
    t34_re = 0.0;
 800b456:	f04f 0300 	mov.w	r3, #0
 800b45a:	f04f 0400 	mov.w	r4, #0
 800b45e:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800b462:	443a      	add	r2, r7
 800b464:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t147.im / 2.0;
 800b468:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 800b46c:	ed93 6b02 	vldr	d6, [r3, #8]
 800b470:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b474:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b478:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800b47c:	443b      	add	r3, r7
 800b47e:	ed83 7b00 	vstr	d7, [r3]
 800b482:	e027      	b.n	800b4d4 <G_q+0x90b4>
 800b484:	f3af 8000 	nop.w
	...
 800b490:	858a5d48 	.word	0x858a5d48
 800b494:	394377ce 	.word	0x394377ce
 800b498:	33145c07 	.word	0x33145c07
 800b49c:	3c81a626 	.word	0x3c81a626
  } else {
    t34_re = t147.re / 2.0;
 800b4a0:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 800b4a4:	ed93 6b00 	vldr	d6, [r3]
 800b4a8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b4ac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b4b0:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800b4b4:	443b      	add	r3, r7
 800b4b6:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t147.im / 2.0;
 800b4ba:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 800b4be:	ed93 6b02 	vldr	d6, [r3, #8]
 800b4c2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b4c6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b4ca:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800b4ce:	443b      	add	r3, r7
 800b4d0:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_im = (t144.re * 0.0 - t144.im * 3.061616997868383E-17) - (t145.re * 0.0 -
 800b4d4:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 800b4d8:	ed93 7b00 	vldr	d7, [r3]
 800b4dc:	ed1f 6b16 	vldr	d6, [pc, #-88]	; 800b488 <G_q+0x9068>
 800b4e0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b4e4:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 800b4e8:	ed93 7b02 	vldr	d7, [r3, #8]
 800b4ec:	ed1f 5b16 	vldr	d5, [pc, #-88]	; 800b498 <G_q+0x9078>
 800b4f0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b4f4:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b4f8:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 800b4fc:	ed93 7b00 	vldr	d7, [r3]
 800b500:	ed1f 5b1f 	vldr	d5, [pc, #-124]	; 800b488 <G_q+0x9068>
 800b504:	ee27 5b05 	vmul.f64	d5, d7, d5
    t145.im * 3.061616997868383E-17);
 800b508:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 800b50c:	ed93 7b02 	vldr	d7, [r3, #8]
 800b510:	ed1f 4b1f 	vldr	d4, [pc, #-124]	; 800b498 <G_q+0x9078>
 800b514:	ee27 7b04 	vmul.f64	d7, d7, d4
  t20_im = (t144.re * 0.0 - t144.im * 3.061616997868383E-17) - (t145.re * 0.0 -
 800b518:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b51c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b520:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800b524:	ed83 7b00 	vstr	d7, [r3]
  t12_re = (t144.re * 3.061616997868383E-17 + t144.im * 0.0) - (t145.re *
 800b528:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 800b52c:	ed93 7b00 	vldr	d7, [r3]
 800b530:	ed1f 6b27 	vldr	d6, [pc, #-156]	; 800b498 <G_q+0x9078>
 800b534:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b538:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 800b53c:	ed93 7b02 	vldr	d7, [r3, #8]
 800b540:	ed1f 5b2f 	vldr	d5, [pc, #-188]	; 800b488 <G_q+0x9068>
 800b544:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b548:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b54c:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 800b550:	ed93 7b00 	vldr	d7, [r3]
 800b554:	ed1f 5b30 	vldr	d5, [pc, #-192]	; 800b498 <G_q+0x9078>
 800b558:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t145.im * 0.0);
 800b55c:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 800b560:	ed93 7b02 	vldr	d7, [r3, #8]
 800b564:	ed1f 4b38 	vldr	d4, [pc, #-224]	; 800b488 <G_q+0x9068>
 800b568:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b56c:	ee35 7b07 	vadd.f64	d7, d5, d7
  t12_re = (t144.re * 3.061616997868383E-17 + t144.im * 0.0) - (t145.re *
 800b570:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b574:	f241 3388 	movw	r3, #5000	; 0x1388
 800b578:	443b      	add	r3, r7
 800b57a:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t16_im + t34_re) + 7.498798913309288E-33;
 800b57e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800b582:	ed93 6b00 	vldr	d6, [r3]
 800b586:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800b58a:	443b      	add	r3, r7
 800b58c:	ed93 7b00 	vldr	d7, [r3]
 800b590:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b594:	ed1f 6b42 	vldr	d6, [pc, #-264]	; 800b490 <G_q+0x9070>
 800b598:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b59c:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800b5a0:	ed83 7b00 	vstr	d7, [r3]
  t20_re += t34_im;
 800b5a4:	f241 3348 	movw	r3, #4936	; 0x1348
 800b5a8:	443b      	add	r3, r7
 800b5aa:	ed93 6b00 	vldr	d6, [r3]
 800b5ae:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800b5b2:	443b      	add	r3, r7
 800b5b4:	ed93 7b00 	vldr	d7, [r3]
 800b5b8:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b5bc:	f241 3348 	movw	r3, #4936	; 0x1348
 800b5c0:	443b      	add	r3, r7
 800b5c2:	ed83 7b00 	vstr	d7, [r3]
  t76_re = t152.re * 3.061616997868383E-17 + t153.re * 3.061616997868383E-17;
 800b5c6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800b5ca:	ed93 7b00 	vldr	d7, [r3]
 800b5ce:	ed1f 6b4e 	vldr	d6, [pc, #-312]	; 800b498 <G_q+0x9078>
 800b5d2:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b5d6:	4be2      	ldr	r3, [pc, #904]	; (800b960 <G_q+0x9540>)
 800b5d8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b5dc:	443a      	add	r2, r7
 800b5de:	4413      	add	r3, r2
 800b5e0:	ed93 7b00 	vldr	d7, [r3]
 800b5e4:	ed9f 5bda 	vldr	d5, [pc, #872]	; 800b950 <G_q+0x9530>
 800b5e8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b5ec:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800b5f0:	443b      	add	r3, r7
 800b5f2:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b5f6:	ed83 7b00 	vstr	d7, [r3]
  t3_im = t152.im * 3.061616997868383E-17 + t153.im * 3.061616997868383E-17;
 800b5fa:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800b5fe:	ed93 7b02 	vldr	d7, [r3, #8]
 800b602:	ed9f 6bd3 	vldr	d6, [pc, #844]	; 800b950 <G_q+0x9530>
 800b606:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b60a:	4bd5      	ldr	r3, [pc, #852]	; (800b960 <G_q+0x9540>)
 800b60c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b610:	443a      	add	r2, r7
 800b612:	4413      	add	r3, r2
 800b614:	ed93 7b02 	vldr	d7, [r3, #8]
 800b618:	ed9f 5bcd 	vldr	d5, [pc, #820]	; 800b950 <G_q+0x9530>
 800b61c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b620:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b624:	f241 3310 	movw	r3, #4880	; 0x1310
 800b628:	443b      	add	r3, r7
 800b62a:	ed83 7b00 	vstr	d7, [r3]
  t72_re = (t13_re * t13_im - t55_re * t16_re) - (t20_im * t16_im - t12_re *
 800b62e:	f241 3378 	movw	r3, #4984	; 0x1378
 800b632:	443b      	add	r3, r7
 800b634:	ed93 6b00 	vldr	d6, [r3]
 800b638:	f241 3370 	movw	r3, #4976	; 0x1370
 800b63c:	443b      	add	r3, r7
 800b63e:	ed93 7b00 	vldr	d7, [r3]
 800b642:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b646:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800b64a:	ed93 5b00 	vldr	d5, [r3]
 800b64e:	f241 3368 	movw	r3, #4968	; 0x1368
 800b652:	443b      	add	r3, r7
 800b654:	ed93 7b00 	vldr	d7, [r3]
 800b658:	ee25 7b07 	vmul.f64	d7, d5, d7
 800b65c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b660:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800b664:	ed93 5b00 	vldr	d5, [r3]
 800b668:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800b66c:	ed93 7b00 	vldr	d7, [r3]
 800b670:	ee25 5b07 	vmul.f64	d5, d5, d7
 800b674:	f241 3388 	movw	r3, #5000	; 0x1388
 800b678:	443b      	add	r3, r7
 800b67a:	ed93 4b00 	vldr	d4, [r3]
 800b67e:	f241 3348 	movw	r3, #4936	; 0x1348
 800b682:	443b      	add	r3, r7
 800b684:	ed93 7b00 	vldr	d7, [r3]
 800b688:	ee24 7b07 	vmul.f64	d7, d4, d7
 800b68c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b690:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800b694:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b698:	ed83 7b00 	vstr	d7, [r3]
    t20_re);
  t55_re = (t13_re * t16_re + t55_re * t13_im) - (t20_im * t20_re + t12_re *
 800b69c:	f241 3378 	movw	r3, #4984	; 0x1378
 800b6a0:	443b      	add	r3, r7
 800b6a2:	ed93 6b00 	vldr	d6, [r3]
 800b6a6:	f241 3368 	movw	r3, #4968	; 0x1368
 800b6aa:	443b      	add	r3, r7
 800b6ac:	ed93 7b00 	vldr	d7, [r3]
 800b6b0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b6b4:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800b6b8:	ed93 5b00 	vldr	d5, [r3]
 800b6bc:	f241 3370 	movw	r3, #4976	; 0x1370
 800b6c0:	443b      	add	r3, r7
 800b6c2:	ed93 7b00 	vldr	d7, [r3]
 800b6c6:	ee25 7b07 	vmul.f64	d7, d5, d7
 800b6ca:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b6ce:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800b6d2:	ed93 5b00 	vldr	d5, [r3]
 800b6d6:	f241 3348 	movw	r3, #4936	; 0x1348
 800b6da:	443b      	add	r3, r7
 800b6dc:	ed93 7b00 	vldr	d7, [r3]
 800b6e0:	ee25 5b07 	vmul.f64	d5, d5, d7
 800b6e4:	f241 3388 	movw	r3, #5000	; 0x1388
 800b6e8:	443b      	add	r3, r7
 800b6ea:	ed93 4b00 	vldr	d4, [r3]
 800b6ee:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800b6f2:	ed93 7b00 	vldr	d7, [r3]
 800b6f6:	ee24 7b07 	vmul.f64	d7, d4, d7
 800b6fa:	ee35 7b07 	vadd.f64	d7, d5, d7
 800b6fe:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b702:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800b706:	ed83 7b00 	vstr	d7, [r3]
    t16_im);
  t16_re = (t126.re * 0.0 - t126.im * 0.5) - (t127.re * 0.0 - t127.im * 0.5);
 800b70a:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 800b70e:	ed93 7b00 	vldr	d7, [r3]
 800b712:	ed9f 6b91 	vldr	d6, [pc, #580]	; 800b958 <G_q+0x9538>
 800b716:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b71a:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 800b71e:	ed93 7b02 	vldr	d7, [r3, #8]
 800b722:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b726:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b72a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b72e:	f507 635a 	add.w	r3, r7, #3488	; 0xda0
 800b732:	ed93 7b00 	vldr	d7, [r3]
 800b736:	ed9f 5b88 	vldr	d5, [pc, #544]	; 800b958 <G_q+0x9538>
 800b73a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800b73e:	f507 635a 	add.w	r3, r7, #3488	; 0xda0
 800b742:	ed93 7b02 	vldr	d7, [r3, #8]
 800b746:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800b74a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b74e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b752:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b756:	f241 3368 	movw	r3, #4968	; 0x1368
 800b75a:	443b      	add	r3, r7
 800b75c:	ed83 7b00 	vstr	d7, [r3]
  t60_re = (t126.re * 0.5 + t126.im * 0.0) - (t127.re * 0.5 + t127.im * 0.0);
 800b760:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 800b764:	ed93 7b00 	vldr	d7, [r3]
 800b768:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800b76c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b770:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 800b774:	ed93 7b02 	vldr	d7, [r3, #8]
 800b778:	ed9f 5b77 	vldr	d5, [pc, #476]	; 800b958 <G_q+0x9538>
 800b77c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b780:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b784:	f507 635a 	add.w	r3, r7, #3488	; 0xda0
 800b788:	ed93 7b00 	vldr	d7, [r3]
 800b78c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b790:	ee27 5b05 	vmul.f64	d5, d7, d5
 800b794:	f507 635a 	add.w	r3, r7, #3488	; 0xda0
 800b798:	ed93 7b02 	vldr	d7, [r3, #8]
 800b79c:	ed9f 4b6e 	vldr	d4, [pc, #440]	; 800b958 <G_q+0x9538>
 800b7a0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b7a4:	ee35 7b07 	vadd.f64	d7, d5, d7
 800b7a8:	f241 2350 	movw	r3, #4688	; 0x1250
 800b7ac:	443b      	add	r3, r7
 800b7ae:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b7b2:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t128.re * 0.0 - t128.im * 0.5) - (t129.re * 0.0 - t129.im * 0.5);
 800b7b6:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800b7ba:	ed93 7b00 	vldr	d7, [r3]
 800b7be:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800b958 <G_q+0x9538>
 800b7c2:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b7c6:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800b7ca:	ed93 7b02 	vldr	d7, [r3, #8]
 800b7ce:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b7d2:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b7d6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b7da:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 800b7de:	ed93 7b00 	vldr	d7, [r3]
 800b7e2:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 800b958 <G_q+0x9538>
 800b7e6:	ee27 5b05 	vmul.f64	d5, d7, d5
 800b7ea:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 800b7ee:	ed93 7b02 	vldr	d7, [r3, #8]
 800b7f2:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800b7f6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b7fa:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b7fe:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b802:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800b806:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t128.re * 0.5 + t128.im * 0.0) - (t129.re * 0.5 + t129.im * 0.0);
 800b80a:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800b80e:	ed93 7b00 	vldr	d7, [r3]
 800b812:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800b816:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b81a:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800b81e:	ed93 7b02 	vldr	d7, [r3, #8]
 800b822:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 800b958 <G_q+0x9538>
 800b826:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b82a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b82e:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 800b832:	ed93 7b00 	vldr	d7, [r3]
 800b836:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b83a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800b83e:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 800b842:	ed93 7b02 	vldr	d7, [r3, #8]
 800b846:	ed9f 4b44 	vldr	d4, [pc, #272]	; 800b958 <G_q+0x9538>
 800b84a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b84e:	ee35 7b07 	vadd.f64	d7, d5, d7
 800b852:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b856:	f241 3348 	movw	r3, #4936	; 0x1348
 800b85a:	443b      	add	r3, r7
 800b85c:	ed83 7b00 	vstr	d7, [r3]
  if (t130.im == 0.0) {
 800b860:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800b864:	ed93 7b02 	vldr	d7, [r3, #8]
 800b868:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b86c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b870:	d115      	bne.n	800b89e <G_q+0x947e>
    t20_im = t130.re / 2.0;
 800b872:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800b876:	ed93 6b00 	vldr	d6, [r3]
 800b87a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b87e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b882:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800b886:	ed83 7b00 	vstr	d7, [r3]
    t12_re = 0.0;
 800b88a:	f04f 0300 	mov.w	r3, #0
 800b88e:	f04f 0400 	mov.w	r4, #0
 800b892:	f241 3288 	movw	r2, #5000	; 0x1388
 800b896:	443a      	add	r2, r7
 800b898:	e9c2 3400 	strd	r3, r4, [r2]
 800b89c:	e037      	b.n	800b90e <G_q+0x94ee>
  } else if (t130.re == 0.0) {
 800b89e:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800b8a2:	ed93 7b00 	vldr	d7, [r3]
 800b8a6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b8aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8ae:	d115      	bne.n	800b8dc <G_q+0x94bc>
    t20_im = 0.0;
 800b8b0:	f04f 0300 	mov.w	r3, #0
 800b8b4:	f04f 0400 	mov.w	r4, #0
 800b8b8:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 800b8bc:	e9c2 3400 	strd	r3, r4, [r2]
    t12_re = t130.im / 2.0;
 800b8c0:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800b8c4:	ed93 6b02 	vldr	d6, [r3, #8]
 800b8c8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b8cc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b8d0:	f241 3388 	movw	r3, #5000	; 0x1388
 800b8d4:	443b      	add	r3, r7
 800b8d6:	ed83 7b00 	vstr	d7, [r3]
 800b8da:	e018      	b.n	800b90e <G_q+0x94ee>
  } else {
    t20_im = t130.re / 2.0;
 800b8dc:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800b8e0:	ed93 6b00 	vldr	d6, [r3]
 800b8e4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b8e8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b8ec:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800b8f0:	ed83 7b00 	vstr	d7, [r3]
    t12_re = t130.im / 2.0;
 800b8f4:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800b8f8:	ed93 6b02 	vldr	d6, [r3, #8]
 800b8fc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b900:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b904:	f241 3388 	movw	r3, #5000	; 0x1388
 800b908:	443b      	add	r3, r7
 800b90a:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t131.im == 0.0) {
 800b90e:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 800b912:	ed93 7b02 	vldr	d7, [r3, #8]
 800b916:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b91a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b91e:	d121      	bne.n	800b964 <G_q+0x9544>
    t34_re = t131.re / 2.0;
 800b920:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 800b924:	ed93 6b00 	vldr	d6, [r3]
 800b928:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b92c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b930:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800b934:	443b      	add	r3, r7
 800b936:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800b93a:	f04f 0300 	mov.w	r3, #0
 800b93e:	f04f 0400 	mov.w	r4, #0
 800b942:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800b946:	443a      	add	r2, r7
 800b948:	e9c2 3400 	strd	r3, r4, [r2]
 800b94c:	e044      	b.n	800b9d8 <G_q+0x95b8>
 800b94e:	bf00      	nop
 800b950:	33145c07 	.word	0x33145c07
 800b954:	3c81a626 	.word	0x3c81a626
	...
 800b960:	ffffee70 	.word	0xffffee70
  } else if (t131.re == 0.0) {
 800b964:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 800b968:	ed93 7b00 	vldr	d7, [r3]
 800b96c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b974:	d116      	bne.n	800b9a4 <G_q+0x9584>
    t34_re = 0.0;
 800b976:	f04f 0300 	mov.w	r3, #0
 800b97a:	f04f 0400 	mov.w	r4, #0
 800b97e:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800b982:	443a      	add	r2, r7
 800b984:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t131.im / 2.0;
 800b988:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 800b98c:	ed93 6b02 	vldr	d6, [r3, #8]
 800b990:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b994:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b998:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800b99c:	443b      	add	r3, r7
 800b99e:	ed83 7b00 	vstr	d7, [r3]
 800b9a2:	e019      	b.n	800b9d8 <G_q+0x95b8>
  } else {
    t34_re = t131.re / 2.0;
 800b9a4:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 800b9a8:	ed93 6b00 	vldr	d6, [r3]
 800b9ac:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b9b0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b9b4:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800b9b8:	443b      	add	r3, r7
 800b9ba:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t131.im / 2.0;
 800b9be:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 800b9c2:	ed93 6b02 	vldr	d6, [r3, #8]
 800b9c6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b9ca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b9ce:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800b9d2:	443b      	add	r3, r7
 800b9d4:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t132.im == 0.0) {
 800b9d8:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 800b9dc:	ed93 7b02 	vldr	d7, [r3, #8]
 800b9e0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b9e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9e8:	d115      	bne.n	800ba16 <G_q+0x95f6>
    t12_im = t132.re / 2.0;
 800b9ea:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 800b9ee:	ed93 6b00 	vldr	d6, [r3]
 800b9f2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b9f6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b9fa:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800b9fe:	ed83 7b00 	vstr	d7, [r3]
    b_t10_re = 0.0;
 800ba02:	f04f 0300 	mov.w	r3, #0
 800ba06:	f04f 0400 	mov.w	r4, #0
 800ba0a:	f241 3238 	movw	r2, #4920	; 0x1338
 800ba0e:	443a      	add	r2, r7
 800ba10:	e9c2 3400 	strd	r3, r4, [r2]
 800ba14:	e037      	b.n	800ba86 <G_q+0x9666>
  } else if (t132.re == 0.0) {
 800ba16:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 800ba1a:	ed93 7b00 	vldr	d7, [r3]
 800ba1e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ba22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba26:	d115      	bne.n	800ba54 <G_q+0x9634>
    t12_im = 0.0;
 800ba28:	f04f 0300 	mov.w	r3, #0
 800ba2c:	f04f 0400 	mov.w	r4, #0
 800ba30:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800ba34:	e9c2 3400 	strd	r3, r4, [r2]
    b_t10_re = t132.im / 2.0;
 800ba38:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 800ba3c:	ed93 6b02 	vldr	d6, [r3, #8]
 800ba40:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ba44:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ba48:	f241 3338 	movw	r3, #4920	; 0x1338
 800ba4c:	443b      	add	r3, r7
 800ba4e:	ed83 7b00 	vstr	d7, [r3]
 800ba52:	e018      	b.n	800ba86 <G_q+0x9666>
  } else {
    t12_im = t132.re / 2.0;
 800ba54:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 800ba58:	ed93 6b00 	vldr	d6, [r3]
 800ba5c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ba60:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ba64:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800ba68:	ed83 7b00 	vstr	d7, [r3]
    b_t10_re = t132.im / 2.0;
 800ba6c:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 800ba70:	ed93 6b02 	vldr	d6, [r3, #8]
 800ba74:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ba78:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ba7c:	f241 3338 	movw	r3, #4920	; 0x1338
 800ba80:	443b      	add	r3, r7
 800ba82:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t133.im == 0.0) {
 800ba86:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 800ba8a:	ed93 7b02 	vldr	d7, [r3, #8]
 800ba8e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ba92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba96:	d116      	bne.n	800bac6 <G_q+0x96a6>
    t13_re = t133.re / 2.0;
 800ba98:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 800ba9c:	ed93 6b00 	vldr	d6, [r3]
 800baa0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800baa4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800baa8:	f241 3378 	movw	r3, #4984	; 0x1378
 800baac:	443b      	add	r3, r7
 800baae:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 800bab2:	f04f 0300 	mov.w	r3, #0
 800bab6:	f04f 0400 	mov.w	r4, #0
 800baba:	f241 3270 	movw	r2, #4976	; 0x1370
 800babe:	443a      	add	r2, r7
 800bac0:	e9c2 3400 	strd	r3, r4, [r2]
 800bac4:	e039      	b.n	800bb3a <G_q+0x971a>
  } else if (t133.re == 0.0) {
 800bac6:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 800baca:	ed93 7b00 	vldr	d7, [r3]
 800bace:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bad6:	d116      	bne.n	800bb06 <G_q+0x96e6>
    t13_re = 0.0;
 800bad8:	f04f 0300 	mov.w	r3, #0
 800badc:	f04f 0400 	mov.w	r4, #0
 800bae0:	f241 3278 	movw	r2, #4984	; 0x1378
 800bae4:	443a      	add	r2, r7
 800bae6:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t133.im / 2.0;
 800baea:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 800baee:	ed93 6b02 	vldr	d6, [r3, #8]
 800baf2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800baf6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bafa:	f241 3370 	movw	r3, #4976	; 0x1370
 800bafe:	443b      	add	r3, r7
 800bb00:	ed83 7b00 	vstr	d7, [r3]
 800bb04:	e019      	b.n	800bb3a <G_q+0x971a>
  } else {
    t13_re = t133.re / 2.0;
 800bb06:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 800bb0a:	ed93 6b00 	vldr	d6, [r3]
 800bb0e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bb12:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bb16:	f241 3378 	movw	r3, #4984	; 0x1378
 800bb1a:	443b      	add	r3, r7
 800bb1c:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t133.im / 2.0;
 800bb20:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 800bb24:	ed93 6b02 	vldr	d6, [r3, #8]
 800bb28:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bb2c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bb30:	f241 3370 	movw	r3, #4976	; 0x1370
 800bb34:	443b      	add	r3, r7
 800bb36:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_im += t34_re;
 800bb3a:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800bb3e:	ed93 6b00 	vldr	d6, [r3]
 800bb42:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800bb46:	443b      	add	r3, r7
 800bb48:	ed93 7b00 	vldr	d7, [r3]
 800bb4c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bb50:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800bb54:	ed83 7b00 	vstr	d7, [r3]
  t12_re += t34_im;
 800bb58:	f241 3388 	movw	r3, #5000	; 0x1388
 800bb5c:	443b      	add	r3, r7
 800bb5e:	ed93 6b00 	vldr	d6, [r3]
 800bb62:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800bb66:	443b      	add	r3, r7
 800bb68:	ed93 7b00 	vldr	d7, [r3]
 800bb6c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bb70:	f241 3388 	movw	r3, #5000	; 0x1388
 800bb74:	443b      	add	r3, r7
 800bb76:	ed83 7b00 	vstr	d7, [r3]
  t12_im = (t12_im + t13_re) + 7.498798913309288E-33;
 800bb7a:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800bb7e:	ed93 6b00 	vldr	d6, [r3]
 800bb82:	f241 3378 	movw	r3, #4984	; 0x1378
 800bb86:	443b      	add	r3, r7
 800bb88:	ed93 7b00 	vldr	d7, [r3]
 800bb8c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bb90:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 800be98 <G_q+0x9a78>
 800bb94:	ee37 7b06 	vadd.f64	d7, d7, d6
 800bb98:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800bb9c:	ed83 7b00 	vstr	d7, [r3]
  b_t10_re += t13_im;
 800bba0:	f241 3338 	movw	r3, #4920	; 0x1338
 800bba4:	443b      	add	r3, r7
 800bba6:	ed93 6b00 	vldr	d6, [r3]
 800bbaa:	f241 3370 	movw	r3, #4976	; 0x1370
 800bbae:	443b      	add	r3, r7
 800bbb0:	ed93 7b00 	vldr	d7, [r3]
 800bbb4:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bbb8:	f241 3338 	movw	r3, #4920	; 0x1338
 800bbbc:	443b      	add	r3, r7
 800bbbe:	ed83 7b00 	vstr	d7, [r3]
  t85_im = (t134.re * 0.0 - t134.im * 3.061616997868383E-17) - (t135.re * 0.0 -
 800bbc2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800bbc6:	ed93 7b00 	vldr	d7, [r3]
 800bbca:	ed9f 6bb5 	vldr	d6, [pc, #724]	; 800bea0 <G_q+0x9a80>
 800bbce:	ee27 6b06 	vmul.f64	d6, d7, d6
 800bbd2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800bbd6:	ed93 7b02 	vldr	d7, [r3, #8]
 800bbda:	ed9f 5bb3 	vldr	d5, [pc, #716]	; 800bea8 <G_q+0x9a88>
 800bbde:	ee27 7b05 	vmul.f64	d7, d7, d5
 800bbe2:	ee36 6b47 	vsub.f64	d6, d6, d7
 800bbe6:	4bb2      	ldr	r3, [pc, #712]	; (800beb0 <G_q+0x9a90>)
 800bbe8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800bbec:	443a      	add	r2, r7
 800bbee:	4413      	add	r3, r2
 800bbf0:	ed93 7b00 	vldr	d7, [r3]
 800bbf4:	ed9f 5baa 	vldr	d5, [pc, #680]	; 800bea0 <G_q+0x9a80>
 800bbf8:	ee27 5b05 	vmul.f64	d5, d7, d5
    t135.im * 3.061616997868383E-17);
 800bbfc:	4bac      	ldr	r3, [pc, #688]	; (800beb0 <G_q+0x9a90>)
 800bbfe:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800bc02:	443a      	add	r2, r7
 800bc04:	4413      	add	r3, r2
 800bc06:	ed93 7b02 	vldr	d7, [r3, #8]
 800bc0a:	ed9f 4ba7 	vldr	d4, [pc, #668]	; 800bea8 <G_q+0x9a88>
 800bc0e:	ee27 7b04 	vmul.f64	d7, d7, d4
  t85_im = (t134.re * 0.0 - t134.im * 3.061616997868383E-17) - (t135.re * 0.0 -
 800bc12:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bc16:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bc1a:	f241 3318 	movw	r3, #4888	; 0x1318
 800bc1e:	443b      	add	r3, r7
 800bc20:	ed83 7b00 	vstr	d7, [r3]
  t23_re = (t134.re * 3.061616997868383E-17 + t134.im * 0.0) - (t135.re *
 800bc24:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800bc28:	ed93 7b00 	vldr	d7, [r3]
 800bc2c:	ed9f 6b9e 	vldr	d6, [pc, #632]	; 800bea8 <G_q+0x9a88>
 800bc30:	ee27 6b06 	vmul.f64	d6, d7, d6
 800bc34:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800bc38:	ed93 7b02 	vldr	d7, [r3, #8]
 800bc3c:	ed9f 5b98 	vldr	d5, [pc, #608]	; 800bea0 <G_q+0x9a80>
 800bc40:	ee27 7b05 	vmul.f64	d7, d7, d5
 800bc44:	ee36 6b07 	vadd.f64	d6, d6, d7
 800bc48:	4b99      	ldr	r3, [pc, #612]	; (800beb0 <G_q+0x9a90>)
 800bc4a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800bc4e:	443a      	add	r2, r7
 800bc50:	4413      	add	r3, r2
 800bc52:	ed93 7b00 	vldr	d7, [r3]
 800bc56:	ed9f 5b94 	vldr	d5, [pc, #592]	; 800bea8 <G_q+0x9a88>
 800bc5a:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t135.im * 0.0);
 800bc5e:	4b94      	ldr	r3, [pc, #592]	; (800beb0 <G_q+0x9a90>)
 800bc60:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800bc64:	443a      	add	r2, r7
 800bc66:	4413      	add	r3, r2
 800bc68:	ed93 7b02 	vldr	d7, [r3, #8]
 800bc6c:	ed9f 4b8c 	vldr	d4, [pc, #560]	; 800bea0 <G_q+0x9a80>
 800bc70:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bc74:	ee35 7b07 	vadd.f64	d7, d5, d7
  t23_re = (t134.re * 3.061616997868383E-17 + t134.im * 0.0) - (t135.re *
 800bc78:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bc7c:	f241 3330 	movw	r3, #4912	; 0x1330
 800bc80:	443b      	add	r3, r7
 800bc82:	ed83 7b00 	vstr	d7, [r3]
  t58_im = (t16_re * t16_im - t60_re * t20_re) + (t20_im * t12_im - t12_re *
 800bc86:	f241 3368 	movw	r3, #4968	; 0x1368
 800bc8a:	443b      	add	r3, r7
 800bc8c:	ed93 6b00 	vldr	d6, [r3]
 800bc90:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800bc94:	ed93 7b00 	vldr	d7, [r3]
 800bc98:	ee26 6b07 	vmul.f64	d6, d6, d7
 800bc9c:	f241 2350 	movw	r3, #4688	; 0x1250
 800bca0:	443b      	add	r3, r7
 800bca2:	ed93 5b00 	vldr	d5, [r3]
 800bca6:	f241 3348 	movw	r3, #4936	; 0x1348
 800bcaa:	443b      	add	r3, r7
 800bcac:	ed93 7b00 	vldr	d7, [r3]
 800bcb0:	ee25 7b07 	vmul.f64	d7, d5, d7
 800bcb4:	ee36 6b47 	vsub.f64	d6, d6, d7
 800bcb8:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800bcbc:	ed93 5b00 	vldr	d5, [r3]
 800bcc0:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800bcc4:	ed93 7b00 	vldr	d7, [r3]
 800bcc8:	ee25 5b07 	vmul.f64	d5, d5, d7
 800bccc:	f241 3388 	movw	r3, #5000	; 0x1388
 800bcd0:	443b      	add	r3, r7
 800bcd2:	ed93 4b00 	vldr	d4, [r3]
 800bcd6:	f241 3338 	movw	r3, #4920	; 0x1338
 800bcda:	443b      	add	r3, r7
 800bcdc:	ed93 7b00 	vldr	d7, [r3]
 800bce0:	ee24 7b07 	vmul.f64	d7, d4, d7
 800bce4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bce8:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800bcec:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bcf0:	ed83 7b00 	vstr	d7, [r3]
    b_t10_re);
  t60_re = (t16_re * t20_re + t60_re * t16_im) + (t20_im * b_t10_re + t12_re *
 800bcf4:	f241 3368 	movw	r3, #4968	; 0x1368
 800bcf8:	443b      	add	r3, r7
 800bcfa:	ed93 6b00 	vldr	d6, [r3]
 800bcfe:	f241 3348 	movw	r3, #4936	; 0x1348
 800bd02:	443b      	add	r3, r7
 800bd04:	ed93 7b00 	vldr	d7, [r3]
 800bd08:	ee26 6b07 	vmul.f64	d6, d6, d7
 800bd0c:	f241 2350 	movw	r3, #4688	; 0x1250
 800bd10:	443b      	add	r3, r7
 800bd12:	ed93 5b00 	vldr	d5, [r3]
 800bd16:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800bd1a:	ed93 7b00 	vldr	d7, [r3]
 800bd1e:	ee25 7b07 	vmul.f64	d7, d5, d7
 800bd22:	ee36 6b07 	vadd.f64	d6, d6, d7
 800bd26:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800bd2a:	ed93 5b00 	vldr	d5, [r3]
 800bd2e:	f241 3338 	movw	r3, #4920	; 0x1338
 800bd32:	443b      	add	r3, r7
 800bd34:	ed93 7b00 	vldr	d7, [r3]
 800bd38:	ee25 5b07 	vmul.f64	d5, d5, d7
 800bd3c:	f241 3388 	movw	r3, #5000	; 0x1388
 800bd40:	443b      	add	r3, r7
 800bd42:	ed93 4b00 	vldr	d4, [r3]
 800bd46:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800bd4a:	ed93 7b00 	vldr	d7, [r3]
 800bd4e:	ee24 7b07 	vmul.f64	d7, d4, d7
 800bd52:	ee35 7b07 	vadd.f64	d7, d5, d7
 800bd56:	f241 2350 	movw	r3, #4688	; 0x1250
 800bd5a:	443b      	add	r3, r7
 800bd5c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bd60:	ed83 7b00 	vstr	d7, [r3]
    t12_im);
  if (t142.im == 0.0) {
 800bd64:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 800bd68:	ed93 7b02 	vldr	d7, [r3, #8]
 800bd6c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bd70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd74:	d116      	bne.n	800bda4 <G_q+0x9984>
    t13_re = t142.re / 2.0;
 800bd76:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 800bd7a:	ed93 6b00 	vldr	d6, [r3]
 800bd7e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bd82:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bd86:	f241 3378 	movw	r3, #4984	; 0x1378
 800bd8a:	443b      	add	r3, r7
 800bd8c:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 800bd90:	f04f 0300 	mov.w	r3, #0
 800bd94:	f04f 0400 	mov.w	r4, #0
 800bd98:	f241 3270 	movw	r2, #4976	; 0x1370
 800bd9c:	443a      	add	r2, r7
 800bd9e:	e9c2 3400 	strd	r3, r4, [r2]
 800bda2:	e039      	b.n	800be18 <G_q+0x99f8>
  } else if (t142.re == 0.0) {
 800bda4:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 800bda8:	ed93 7b00 	vldr	d7, [r3]
 800bdac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bdb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdb4:	d116      	bne.n	800bde4 <G_q+0x99c4>
    t13_re = 0.0;
 800bdb6:	f04f 0300 	mov.w	r3, #0
 800bdba:	f04f 0400 	mov.w	r4, #0
 800bdbe:	f241 3278 	movw	r2, #4984	; 0x1378
 800bdc2:	443a      	add	r2, r7
 800bdc4:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t142.im / 2.0;
 800bdc8:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 800bdcc:	ed93 6b02 	vldr	d6, [r3, #8]
 800bdd0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bdd4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bdd8:	f241 3370 	movw	r3, #4976	; 0x1370
 800bddc:	443b      	add	r3, r7
 800bdde:	ed83 7b00 	vstr	d7, [r3]
 800bde2:	e019      	b.n	800be18 <G_q+0x99f8>
  } else {
    t13_re = t142.re / 2.0;
 800bde4:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 800bde8:	ed93 6b00 	vldr	d6, [r3]
 800bdec:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bdf0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bdf4:	f241 3378 	movw	r3, #4984	; 0x1378
 800bdf8:	443b      	add	r3, r7
 800bdfa:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t142.im / 2.0;
 800bdfe:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 800be02:	ed93 6b02 	vldr	d6, [r3, #8]
 800be06:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800be0a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800be0e:	f241 3370 	movw	r3, #4976	; 0x1370
 800be12:	443b      	add	r3, r7
 800be14:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t143.im == 0.0) {
 800be18:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800be1c:	ed93 7b02 	vldr	d7, [r3, #8]
 800be20:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800be24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be28:	d116      	bne.n	800be58 <G_q+0x9a38>
    t34_re = t143.re / 2.0;
 800be2a:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800be2e:	ed93 6b00 	vldr	d6, [r3]
 800be32:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800be36:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800be3a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800be3e:	443b      	add	r3, r7
 800be40:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800be44:	f04f 0300 	mov.w	r3, #0
 800be48:	f04f 0400 	mov.w	r4, #0
 800be4c:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800be50:	443a      	add	r2, r7
 800be52:	e9c2 3400 	strd	r3, r4, [r2]
 800be56:	e047      	b.n	800bee8 <G_q+0x9ac8>
  } else if (t143.re == 0.0) {
 800be58:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800be5c:	ed93 7b00 	vldr	d7, [r3]
 800be60:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800be64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be68:	d124      	bne.n	800beb4 <G_q+0x9a94>
    t34_re = 0.0;
 800be6a:	f04f 0300 	mov.w	r3, #0
 800be6e:	f04f 0400 	mov.w	r4, #0
 800be72:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800be76:	443a      	add	r2, r7
 800be78:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t143.im / 2.0;
 800be7c:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800be80:	ed93 6b02 	vldr	d6, [r3, #8]
 800be84:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800be88:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800be8c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800be90:	443b      	add	r3, r7
 800be92:	ed83 7b00 	vstr	d7, [r3]
 800be96:	e027      	b.n	800bee8 <G_q+0x9ac8>
 800be98:	858a5d48 	.word	0x858a5d48
 800be9c:	394377ce 	.word	0x394377ce
	...
 800bea8:	33145c07 	.word	0x33145c07
 800beac:	3c81a626 	.word	0x3c81a626
 800beb0:	ffffee50 	.word	0xffffee50
  } else {
    t34_re = t143.re / 2.0;
 800beb4:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800beb8:	ed93 6b00 	vldr	d6, [r3]
 800bebc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bec0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bec4:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800bec8:	443b      	add	r3, r7
 800beca:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t143.im / 2.0;
 800bece:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800bed2:	ed93 6b02 	vldr	d6, [r3, #8]
 800bed6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800beda:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bede:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800bee2:	443b      	add	r3, r7
 800bee4:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re = (t140.re * 0.0 - t140.im * 0.5) - (t141.re * 0.0 - t141.im * 0.5);
 800bee8:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 800beec:	ed93 7b00 	vldr	d7, [r3]
 800bef0:	ed9f 6bdf 	vldr	d6, [pc, #892]	; 800c270 <G_q+0x9e50>
 800bef4:	ee27 6b06 	vmul.f64	d6, d7, d6
 800bef8:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 800befc:	ed93 7b02 	vldr	d7, [r3, #8]
 800bf00:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800bf04:	ee27 7b05 	vmul.f64	d7, d7, d5
 800bf08:	ee36 6b47 	vsub.f64	d6, d6, d7
 800bf0c:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800bf10:	ed93 7b00 	vldr	d7, [r3]
 800bf14:	ed9f 5bd6 	vldr	d5, [pc, #856]	; 800c270 <G_q+0x9e50>
 800bf18:	ee27 5b05 	vmul.f64	d5, d7, d5
 800bf1c:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800bf20:	ed93 7b02 	vldr	d7, [r3, #8]
 800bf24:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800bf28:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bf2c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bf30:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bf34:	f241 3368 	movw	r3, #4968	; 0x1368
 800bf38:	443b      	add	r3, r7
 800bf3a:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t140.re * 0.5 + t140.im * 0.0) - (t141.re * 0.5 + t141.im * 0.0);
 800bf3e:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 800bf42:	ed93 7b00 	vldr	d7, [r3]
 800bf46:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800bf4a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800bf4e:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 800bf52:	ed93 7b02 	vldr	d7, [r3, #8]
 800bf56:	ed9f 5bc6 	vldr	d5, [pc, #792]	; 800c270 <G_q+0x9e50>
 800bf5a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800bf5e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800bf62:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800bf66:	ed93 7b00 	vldr	d7, [r3]
 800bf6a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800bf6e:	ee27 5b05 	vmul.f64	d5, d7, d5
 800bf72:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800bf76:	ed93 7b02 	vldr	d7, [r3, #8]
 800bf7a:	ed9f 4bbd 	vldr	d4, [pc, #756]	; 800c270 <G_q+0x9e50>
 800bf7e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bf82:	ee35 7b07 	vadd.f64	d7, d5, d7
 800bf86:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bf8a:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800bf8e:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t13_re + t34_re) + 7.498798913309288E-33;
 800bf92:	f241 3378 	movw	r3, #4984	; 0x1378
 800bf96:	443b      	add	r3, r7
 800bf98:	ed93 6b00 	vldr	d6, [r3]
 800bf9c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800bfa0:	443b      	add	r3, r7
 800bfa2:	ed93 7b00 	vldr	d7, [r3]
 800bfa6:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bfaa:	ed9f 6bad 	vldr	d6, [pc, #692]	; 800c260 <G_q+0x9e40>
 800bfae:	ee37 7b06 	vadd.f64	d7, d7, d6
 800bfb2:	f241 3378 	movw	r3, #4984	; 0x1378
 800bfb6:	443b      	add	r3, r7
 800bfb8:	ed83 7b00 	vstr	d7, [r3]
  t13_im += t34_im;
 800bfbc:	f241 3370 	movw	r3, #4976	; 0x1370
 800bfc0:	443b      	add	r3, r7
 800bfc2:	ed93 6b00 	vldr	d6, [r3]
 800bfc6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800bfca:	443b      	add	r3, r7
 800bfcc:	ed93 7b00 	vldr	d7, [r3]
 800bfd0:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bfd4:	f241 3370 	movw	r3, #4976	; 0x1370
 800bfd8:	443b      	add	r3, r7
 800bfda:	ed83 7b00 	vstr	d7, [r3]
  t43_im += t55_im;
 800bfde:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800bfe2:	443b      	add	r3, r7
 800bfe4:	ed93 6b00 	vldr	d6, [r3]
 800bfe8:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800bfec:	443b      	add	r3, r7
 800bfee:	ed93 7b00 	vldr	d7, [r3]
 800bff2:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bff6:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800bffa:	443b      	add	r3, r7
 800bffc:	ed83 7b00 	vstr	d7, [r3]
  b_t54_re += t70_re;
 800c000:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800c004:	443b      	add	r3, r7
 800c006:	f241 22f0 	movw	r2, #4848	; 0x12f0
 800c00a:	443a      	add	r2, r7
 800c00c:	ed92 6b00 	vldr	d6, [r2]
 800c010:	ed93 7b00 	vldr	d7, [r3]
 800c014:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c018:	f241 23f0 	movw	r3, #4848	; 0x12f0
 800c01c:	443b      	add	r3, r7
 800c01e:	ed83 7b00 	vstr	d7, [r3]
  t55_im = (((t70_im * t74_re - b_t54_im * t74_im) - (t76_re * t72_re - t3_im *
 800c022:	f241 22c8 	movw	r2, #4808	; 0x12c8
 800c026:	443a      	add	r2, r7
 800c028:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800c02c:	443b      	add	r3, r7
 800c02e:	ed92 6b00 	vldr	d6, [r2]
 800c032:	ed93 7b00 	vldr	d7, [r3]
 800c036:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c03a:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800c03e:	443b      	add	r3, r7
 800c040:	f241 22e8 	movw	r2, #4840	; 0x12e8
 800c044:	443a      	add	r2, r7
 800c046:	ed92 5b00 	vldr	d5, [r2]
 800c04a:	ed93 7b00 	vldr	d7, [r3]
 800c04e:	ee25 7b07 	vmul.f64	d7, d5, d7
 800c052:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c056:	f241 22a8 	movw	r2, #4776	; 0x12a8
 800c05a:	443a      	add	r2, r7
 800c05c:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800c060:	ed92 5b00 	vldr	d5, [r2]
 800c064:	ed93 7b00 	vldr	d7, [r3]
 800c068:	ee25 5b07 	vmul.f64	d5, d5, d7
 800c06c:	f241 3310 	movw	r3, #4880	; 0x1310
 800c070:	443b      	add	r3, r7
 800c072:	ed93 4b00 	vldr	d4, [r3]
 800c076:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800c07a:	ed93 7b00 	vldr	d7, [r3]
 800c07e:	ee24 7b07 	vmul.f64	d7, d4, d7
 800c082:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c086:	ee36 6b47 	vsub.f64	d6, d6, d7
              t55_re)) + (t85_im * t58_im - t23_re * t60_re)) - (t16_re * t13_re
 800c08a:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800c08e:	f241 3218 	movw	r2, #4888	; 0x1318
 800c092:	443a      	add	r2, r7
 800c094:	ed92 5b00 	vldr	d5, [r2]
 800c098:	ed93 7b00 	vldr	d7, [r3]
 800c09c:	ee25 5b07 	vmul.f64	d5, d5, d7
 800c0a0:	f241 2350 	movw	r3, #4688	; 0x1250
 800c0a4:	443b      	add	r3, r7
 800c0a6:	f241 3230 	movw	r2, #4912	; 0x1330
 800c0aa:	443a      	add	r2, r7
 800c0ac:	ed92 4b00 	vldr	d4, [r2]
 800c0b0:	ed93 7b00 	vldr	d7, [r3]
 800c0b4:	ee24 7b07 	vmul.f64	d7, d4, d7
 800c0b8:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c0bc:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c0c0:	f241 3368 	movw	r3, #4968	; 0x1368
 800c0c4:	443b      	add	r3, r7
 800c0c6:	ed93 5b00 	vldr	d5, [r3]
 800c0ca:	f241 3378 	movw	r3, #4984	; 0x1378
 800c0ce:	443b      	add	r3, r7
 800c0d0:	ed93 7b00 	vldr	d7, [r3]
 800c0d4:	ee25 5b07 	vmul.f64	d5, d5, d7
    - t16_im * t13_im);
 800c0d8:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800c0dc:	ed93 4b00 	vldr	d4, [r3]
 800c0e0:	f241 3370 	movw	r3, #4976	; 0x1370
 800c0e4:	443b      	add	r3, r7
 800c0e6:	ed93 7b00 	vldr	d7, [r3]
 800c0ea:	ee24 7b07 	vmul.f64	d7, d4, d7
 800c0ee:	ee35 7b47 	vsub.f64	d7, d5, d7
  t55_im = (((t70_im * t74_re - b_t54_im * t74_im) - (t76_re * t72_re - t3_im *
 800c0f2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c0f6:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800c0fa:	443b      	add	r3, r7
 800c0fc:	ed83 7b00 	vstr	d7, [r3]
  b_t54_im = (((t70_im * t74_im + b_t54_im * t74_re) - (t76_re * t55_re + t3_im *
 800c100:	f241 22c8 	movw	r2, #4808	; 0x12c8
 800c104:	443a      	add	r2, r7
 800c106:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800c10a:	443b      	add	r3, r7
 800c10c:	ed92 6b00 	vldr	d6, [r2]
 800c110:	ed93 7b00 	vldr	d7, [r3]
 800c114:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c118:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800c11c:	443b      	add	r3, r7
 800c11e:	f241 22e8 	movw	r2, #4840	; 0x12e8
 800c122:	443a      	add	r2, r7
 800c124:	ed92 5b00 	vldr	d5, [r2]
 800c128:	ed93 7b00 	vldr	d7, [r3]
 800c12c:	ee25 7b07 	vmul.f64	d7, d5, d7
 800c130:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c134:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800c138:	443b      	add	r3, r7
 800c13a:	ed93 5b00 	vldr	d5, [r3]
 800c13e:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800c142:	ed93 7b00 	vldr	d7, [r3]
 800c146:	ee25 5b07 	vmul.f64	d5, d5, d7
 800c14a:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800c14e:	f241 3210 	movw	r2, #4880	; 0x1310
 800c152:	443a      	add	r2, r7
 800c154:	ed92 4b00 	vldr	d4, [r2]
 800c158:	ed93 7b00 	vldr	d7, [r3]
 800c15c:	ee24 7b07 	vmul.f64	d7, d4, d7
 800c160:	ee35 7b07 	vadd.f64	d7, d5, d7
 800c164:	ee36 6b47 	vsub.f64	d6, d6, d7
    t72_re)) + (t85_im * t60_re + t23_re * t58_im)) - (t16_re * t13_im + t16_im *
 800c168:	f241 2350 	movw	r3, #4688	; 0x1250
 800c16c:	443b      	add	r3, r7
 800c16e:	f241 3218 	movw	r2, #4888	; 0x1318
 800c172:	443a      	add	r2, r7
 800c174:	ed92 5b00 	vldr	d5, [r2]
 800c178:	ed93 7b00 	vldr	d7, [r3]
 800c17c:	ee25 5b07 	vmul.f64	d5, d5, d7
 800c180:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800c184:	f241 3230 	movw	r2, #4912	; 0x1330
 800c188:	443a      	add	r2, r7
 800c18a:	ed92 4b00 	vldr	d4, [r2]
 800c18e:	ed93 7b00 	vldr	d7, [r3]
 800c192:	ee24 7b07 	vmul.f64	d7, d4, d7
 800c196:	ee35 7b07 	vadd.f64	d7, d5, d7
 800c19a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c19e:	f241 3368 	movw	r3, #4968	; 0x1368
 800c1a2:	443b      	add	r3, r7
 800c1a4:	ed93 5b00 	vldr	d5, [r3]
 800c1a8:	f241 3370 	movw	r3, #4976	; 0x1370
 800c1ac:	443b      	add	r3, r7
 800c1ae:	ed93 7b00 	vldr	d7, [r3]
 800c1b2:	ee25 5b07 	vmul.f64	d5, d5, d7
 800c1b6:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800c1ba:	ed93 4b00 	vldr	d4, [r3]
 800c1be:	f241 3378 	movw	r3, #4984	; 0x1378
 800c1c2:	443b      	add	r3, r7
 800c1c4:	ed93 7b00 	vldr	d7, [r3]
 800c1c8:	ee24 7b07 	vmul.f64	d7, d4, d7
 800c1cc:	ee35 7b07 	vadd.f64	d7, d5, d7
  b_t54_im = (((t70_im * t74_im + b_t54_im * t74_re) - (t76_re * t55_re + t3_im *
 800c1d0:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c1d4:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800c1d8:	443b      	add	r3, r7
 800c1da:	ed83 7b00 	vstr	d7, [r3]
    t13_re);
  if (t170.im == 0.0) {
 800c1de:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 800c1e2:	ed93 7b02 	vldr	d7, [r3, #8]
 800c1e6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c1ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1ee:	d115      	bne.n	800c21c <G_q+0x9dfc>
    t3_im = t170.re / 2.0;
 800c1f0:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 800c1f4:	ed93 6b00 	vldr	d6, [r3]
 800c1f8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c1fc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c200:	f241 3310 	movw	r3, #4880	; 0x1310
 800c204:	443b      	add	r3, r7
 800c206:	ed83 7b00 	vstr	d7, [r3]
    t72_re = 0.0;
 800c20a:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800c20e:	f04f 0300 	mov.w	r3, #0
 800c212:	f04f 0400 	mov.w	r4, #0
 800c216:	e9c2 3400 	strd	r3, r4, [r2]
 800c21a:	e046      	b.n	800c2aa <G_q+0x9e8a>
  } else if (t170.re == 0.0) {
 800c21c:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 800c220:	ed93 7b00 	vldr	d7, [r3]
 800c224:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c22c:	d124      	bne.n	800c278 <G_q+0x9e58>
    t3_im = 0.0;
 800c22e:	f04f 0300 	mov.w	r3, #0
 800c232:	f04f 0400 	mov.w	r4, #0
 800c236:	f241 3210 	movw	r2, #4880	; 0x1310
 800c23a:	443a      	add	r2, r7
 800c23c:	e9c2 3400 	strd	r3, r4, [r2]
    t72_re = t170.im / 2.0;
 800c240:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 800c244:	ed93 6b02 	vldr	d6, [r3, #8]
 800c248:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800c24c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c250:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c254:	ed83 7b00 	vstr	d7, [r3]
 800c258:	e027      	b.n	800c2aa <G_q+0x9e8a>
 800c25a:	bf00      	nop
 800c25c:	f3af 8000 	nop.w
 800c260:	858a5d48 	.word	0x858a5d48
 800c264:	394377ce 	.word	0x394377ce
 800c268:	33145c07 	.word	0x33145c07
 800c26c:	3c81a626 	.word	0x3c81a626
	...
  } else {
    t3_im = t170.re / 2.0;
 800c278:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 800c27c:	ed93 6b00 	vldr	d6, [r3]
 800c280:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c284:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c288:	f241 3310 	movw	r3, #4880	; 0x1310
 800c28c:	443b      	add	r3, r7
 800c28e:	ed83 7b00 	vstr	d7, [r3]
    t72_re = t170.im / 2.0;
 800c292:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 800c296:	ed93 6b02 	vldr	d6, [r3, #8]
 800c29a:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800c29e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c2a2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c2a6:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t171.im == 0.0) {
 800c2aa:	f507 636c 	add.w	r3, r7, #3776	; 0xec0
 800c2ae:	ed93 7b02 	vldr	d7, [r3, #8]
 800c2b2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c2b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2ba:	d116      	bne.n	800c2ea <G_q+0x9eca>
    t34_re = t171.re / 2.0;
 800c2bc:	f507 636c 	add.w	r3, r7, #3776	; 0xec0
 800c2c0:	ed93 6b00 	vldr	d6, [r3]
 800c2c4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c2c8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c2cc:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800c2d0:	443b      	add	r3, r7
 800c2d2:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800c2d6:	f04f 0300 	mov.w	r3, #0
 800c2da:	f04f 0400 	mov.w	r4, #0
 800c2de:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800c2e2:	443a      	add	r2, r7
 800c2e4:	e9c2 3400 	strd	r3, r4, [r2]
 800c2e8:	e039      	b.n	800c35e <G_q+0x9f3e>
  } else if (t171.re == 0.0) {
 800c2ea:	f507 636c 	add.w	r3, r7, #3776	; 0xec0
 800c2ee:	ed93 7b00 	vldr	d7, [r3]
 800c2f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c2f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2fa:	d116      	bne.n	800c32a <G_q+0x9f0a>
    t34_re = 0.0;
 800c2fc:	f04f 0300 	mov.w	r3, #0
 800c300:	f04f 0400 	mov.w	r4, #0
 800c304:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800c308:	443a      	add	r2, r7
 800c30a:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t171.im / 2.0;
 800c30e:	f507 636c 	add.w	r3, r7, #3776	; 0xec0
 800c312:	ed93 6b02 	vldr	d6, [r3, #8]
 800c316:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c31a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c31e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800c322:	443b      	add	r3, r7
 800c324:	ed83 7b00 	vstr	d7, [r3]
 800c328:	e019      	b.n	800c35e <G_q+0x9f3e>
  } else {
    t34_re = t171.re / 2.0;
 800c32a:	f507 636c 	add.w	r3, r7, #3776	; 0xec0
 800c32e:	ed93 6b00 	vldr	d6, [r3]
 800c332:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c336:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c33a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800c33e:	443b      	add	r3, r7
 800c340:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t171.im / 2.0;
 800c344:	f507 636c 	add.w	r3, r7, #3776	; 0xec0
 800c348:	ed93 6b02 	vldr	d6, [r3, #8]
 800c34c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c350:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c354:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800c358:	443b      	add	r3, r7
 800c35a:	ed83 7b00 	vstr	d7, [r3]
  }

  t74_re = (t168.re * 0.0 - t168.im * 0.5) - (t169.re * 0.0 - t169.im * 0.5);
 800c35e:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 800c362:	ed93 7b00 	vldr	d7, [r3]
 800c366:	ed1f 6b3e 	vldr	d6, [pc, #-248]	; 800c270 <G_q+0x9e50>
 800c36a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c36e:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 800c372:	ed93 7b02 	vldr	d7, [r3, #8]
 800c376:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c37a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c37e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c382:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800c386:	ed93 7b00 	vldr	d7, [r3]
 800c38a:	ed1f 5b47 	vldr	d5, [pc, #-284]	; 800c270 <G_q+0x9e50>
 800c38e:	ee27 5b05 	vmul.f64	d5, d7, d5
 800c392:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800c396:	ed93 7b02 	vldr	d7, [r3, #8]
 800c39a:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800c39e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c3a2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c3a6:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800c3aa:	443b      	add	r3, r7
 800c3ac:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c3b0:	ed83 7b00 	vstr	d7, [r3]
  t74_im = (t168.re * 0.5 + t168.im * 0.0) - (t169.re * 0.5 + t169.im * 0.0);
 800c3b4:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 800c3b8:	ed93 7b00 	vldr	d7, [r3]
 800c3bc:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800c3c0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c3c4:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 800c3c8:	ed93 7b02 	vldr	d7, [r3, #8]
 800c3cc:	ed1f 5b58 	vldr	d5, [pc, #-352]	; 800c270 <G_q+0x9e50>
 800c3d0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c3d4:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c3d8:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800c3dc:	ed93 7b00 	vldr	d7, [r3]
 800c3e0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c3e4:	ee27 5b05 	vmul.f64	d5, d7, d5
 800c3e8:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800c3ec:	ed93 7b02 	vldr	d7, [r3, #8]
 800c3f0:	ed1f 4b61 	vldr	d4, [pc, #-388]	; 800c270 <G_q+0x9e50>
 800c3f4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c3f8:	ee35 7b07 	vadd.f64	d7, d5, d7
 800c3fc:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800c400:	443b      	add	r3, r7
 800c402:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c406:	ed83 7b00 	vstr	d7, [r3]
  t3_im = (t3_im + t34_re) + 7.498798913309288E-33;
 800c40a:	f241 3310 	movw	r3, #4880	; 0x1310
 800c40e:	443b      	add	r3, r7
 800c410:	ed93 6b00 	vldr	d6, [r3]
 800c414:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800c418:	443b      	add	r3, r7
 800c41a:	ed93 7b00 	vldr	d7, [r3]
 800c41e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c422:	ed1f 6b71 	vldr	d6, [pc, #-452]	; 800c260 <G_q+0x9e40>
 800c426:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c42a:	f241 3310 	movw	r3, #4880	; 0x1310
 800c42e:	443b      	add	r3, r7
 800c430:	ed83 7b00 	vstr	d7, [r3]
  t72_re += t34_im;
 800c434:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800c438:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800c43c:	ed92 6b00 	vldr	d6, [r2]
 800c440:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800c444:	443a      	add	r2, r7
 800c446:	ed92 7b00 	vldr	d7, [r2]
 800c44a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c44e:	ed83 7b00 	vstr	d7, [r3]
  t13_re = t120.re * 3.061616997868383E-17 + t121.re * 3.061616997868383E-17;
 800c452:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c456:	ed93 7b00 	vldr	d7, [r3]
 800c45a:	ed1f 6b7d 	vldr	d6, [pc, #-500]	; 800c268 <G_q+0x9e48>
 800c45e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c462:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800c466:	ed93 7b00 	vldr	d7, [r3]
 800c46a:	ed1f 5b81 	vldr	d5, [pc, #-516]	; 800c268 <G_q+0x9e48>
 800c46e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c472:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c476:	f241 3378 	movw	r3, #4984	; 0x1378
 800c47a:	443b      	add	r3, r7
 800c47c:	ed83 7b00 	vstr	d7, [r3]
  t76_re = t120.im * 3.061616997868383E-17 + t121.im * 3.061616997868383E-17;
 800c480:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c484:	ed93 7b02 	vldr	d7, [r3, #8]
 800c488:	ed1f 6b89 	vldr	d6, [pc, #-548]	; 800c268 <G_q+0x9e48>
 800c48c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c490:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800c494:	ed93 7b02 	vldr	d7, [r3, #8]
 800c498:	ed1f 5b8d 	vldr	d5, [pc, #-564]	; 800c268 <G_q+0x9e48>
 800c49c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c4a0:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800c4a4:	443b      	add	r3, r7
 800c4a6:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c4aa:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t118.re * 0.0 - t118.im * 0.5) - (t119.re * 0.0 - t119.im * 0.5);
 800c4ae:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 800c4b2:	ed93 7b00 	vldr	d7, [r3]
 800c4b6:	ed1f 6b92 	vldr	d6, [pc, #-584]	; 800c270 <G_q+0x9e50>
 800c4ba:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c4be:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 800c4c2:	ed93 7b02 	vldr	d7, [r3, #8]
 800c4c6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c4ca:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c4ce:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c4d2:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 800c4d6:	ed93 7b00 	vldr	d7, [r3]
 800c4da:	ed1f 5b9b 	vldr	d5, [pc, #-620]	; 800c270 <G_q+0x9e50>
 800c4de:	ee27 5b05 	vmul.f64	d5, d7, d5
 800c4e2:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 800c4e6:	ed93 7b02 	vldr	d7, [r3, #8]
 800c4ea:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800c4ee:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c4f2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c4f6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c4fa:	f241 3370 	movw	r3, #4976	; 0x1370
 800c4fe:	443b      	add	r3, r7
 800c500:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t118.re * 0.5 + t118.im * 0.0) - (t119.re * 0.5 + t119.im * 0.0);
 800c504:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 800c508:	ed93 7b00 	vldr	d7, [r3]
 800c50c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800c510:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c514:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 800c518:	ed93 7b02 	vldr	d7, [r3, #8]
 800c51c:	ed1f 5bac 	vldr	d5, [pc, #-688]	; 800c270 <G_q+0x9e50>
 800c520:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c524:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c528:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 800c52c:	ed93 7b00 	vldr	d7, [r3]
 800c530:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c534:	ee27 5b05 	vmul.f64	d5, d7, d5
 800c538:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 800c53c:	ed93 7b02 	vldr	d7, [r3, #8]
 800c540:	ed1f 4bb5 	vldr	d4, [pc, #-724]	; 800c270 <G_q+0x9e50>
 800c544:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c548:	ee35 7b07 	vadd.f64	d7, d5, d7
 800c54c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c550:	f241 3368 	movw	r3, #4968	; 0x1368
 800c554:	443b      	add	r3, r7
 800c556:	ed83 7b00 	vstr	d7, [r3]
  if (t116.im == 0.0) {
 800c55a:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 800c55e:	ed93 7b02 	vldr	d7, [r3, #8]
 800c562:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c56a:	d115      	bne.n	800c598 <G_q+0xa178>
    t16_im = t116.re / 2.0;
 800c56c:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 800c570:	ed93 6b00 	vldr	d6, [r3]
 800c574:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c578:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c57c:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800c580:	ed83 7b00 	vstr	d7, [r3]
    t20_re = 0.0;
 800c584:	f04f 0300 	mov.w	r3, #0
 800c588:	f04f 0400 	mov.w	r4, #0
 800c58c:	f241 3248 	movw	r2, #4936	; 0x1348
 800c590:	443a      	add	r2, r7
 800c592:	e9c2 3400 	strd	r3, r4, [r2]
 800c596:	e037      	b.n	800c608 <G_q+0xa1e8>
  } else if (t116.re == 0.0) {
 800c598:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 800c59c:	ed93 7b00 	vldr	d7, [r3]
 800c5a0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c5a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5a8:	d115      	bne.n	800c5d6 <G_q+0xa1b6>
    t16_im = 0.0;
 800c5aa:	f04f 0300 	mov.w	r3, #0
 800c5ae:	f04f 0400 	mov.w	r4, #0
 800c5b2:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800c5b6:	e9c2 3400 	strd	r3, r4, [r2]
    t20_re = t116.im / 2.0;
 800c5ba:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 800c5be:	ed93 6b02 	vldr	d6, [r3, #8]
 800c5c2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c5c6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c5ca:	f241 3348 	movw	r3, #4936	; 0x1348
 800c5ce:	443b      	add	r3, r7
 800c5d0:	ed83 7b00 	vstr	d7, [r3]
 800c5d4:	e018      	b.n	800c608 <G_q+0xa1e8>
  } else {
    t16_im = t116.re / 2.0;
 800c5d6:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 800c5da:	ed93 6b00 	vldr	d6, [r3]
 800c5de:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c5e2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c5e6:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800c5ea:	ed83 7b00 	vstr	d7, [r3]
    t20_re = t116.im / 2.0;
 800c5ee:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 800c5f2:	ed93 6b02 	vldr	d6, [r3, #8]
 800c5f6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c5fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c5fe:	f241 3348 	movw	r3, #4936	; 0x1348
 800c602:	443b      	add	r3, r7
 800c604:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t117.im == 0.0) {
 800c608:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 800c60c:	ed93 7b02 	vldr	d7, [r3, #8]
 800c610:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c618:	d116      	bne.n	800c648 <G_q+0xa228>
    t34_re = t117.re / 2.0;
 800c61a:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 800c61e:	ed93 6b00 	vldr	d6, [r3]
 800c622:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c626:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c62a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800c62e:	443b      	add	r3, r7
 800c630:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800c634:	f04f 0300 	mov.w	r3, #0
 800c638:	f04f 0400 	mov.w	r4, #0
 800c63c:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800c640:	443a      	add	r2, r7
 800c642:	e9c2 3400 	strd	r3, r4, [r2]
 800c646:	e039      	b.n	800c6bc <G_q+0xa29c>
  } else if (t117.re == 0.0) {
 800c648:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 800c64c:	ed93 7b00 	vldr	d7, [r3]
 800c650:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c658:	d116      	bne.n	800c688 <G_q+0xa268>
    t34_re = 0.0;
 800c65a:	f04f 0300 	mov.w	r3, #0
 800c65e:	f04f 0400 	mov.w	r4, #0
 800c662:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800c666:	443a      	add	r2, r7
 800c668:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t117.im / 2.0;
 800c66c:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 800c670:	ed93 6b02 	vldr	d6, [r3, #8]
 800c674:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c678:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c67c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800c680:	443b      	add	r3, r7
 800c682:	ed83 7b00 	vstr	d7, [r3]
 800c686:	e019      	b.n	800c6bc <G_q+0xa29c>
  } else {
    t34_re = t117.re / 2.0;
 800c688:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 800c68c:	ed93 6b00 	vldr	d6, [r3]
 800c690:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c694:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c698:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800c69c:	443b      	add	r3, r7
 800c69e:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t117.im / 2.0;
 800c6a2:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 800c6a6:	ed93 6b02 	vldr	d6, [r3, #8]
 800c6aa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c6ae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c6b2:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800c6b6:	443b      	add	r3, r7
 800c6b8:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_im = (t114.re * 0.0 - t114.im * 3.061616997868383E-17) - (t115.re * 0.0 -
 800c6bc:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 800c6c0:	ed93 7b00 	vldr	d7, [r3]
 800c6c4:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 800c8f8 <G_q+0xa4d8>
 800c6c8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c6cc:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 800c6d0:	ed93 7b02 	vldr	d7, [r3, #8]
 800c6d4:	ed9f 5b8a 	vldr	d5, [pc, #552]	; 800c900 <G_q+0xa4e0>
 800c6d8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c6dc:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c6e0:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800c6e4:	ed93 7b00 	vldr	d7, [r3]
 800c6e8:	ed9f 5b83 	vldr	d5, [pc, #524]	; 800c8f8 <G_q+0xa4d8>
 800c6ec:	ee27 5b05 	vmul.f64	d5, d7, d5
    t115.im * 3.061616997868383E-17);
 800c6f0:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800c6f4:	ed93 7b02 	vldr	d7, [r3, #8]
 800c6f8:	ed9f 4b81 	vldr	d4, [pc, #516]	; 800c900 <G_q+0xa4e0>
 800c6fc:	ee27 7b04 	vmul.f64	d7, d7, d4
  t20_im = (t114.re * 0.0 - t114.im * 3.061616997868383E-17) - (t115.re * 0.0 -
 800c700:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c704:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c708:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800c70c:	ed83 7b00 	vstr	d7, [r3]
  t12_re = (t114.re * 3.061616997868383E-17 + t114.im * 0.0) - (t115.re *
 800c710:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 800c714:	ed93 7b00 	vldr	d7, [r3]
 800c718:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800c900 <G_q+0xa4e0>
 800c71c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c720:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 800c724:	ed93 7b02 	vldr	d7, [r3, #8]
 800c728:	ed9f 5b73 	vldr	d5, [pc, #460]	; 800c8f8 <G_q+0xa4d8>
 800c72c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c730:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c734:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800c738:	ed93 7b00 	vldr	d7, [r3]
 800c73c:	ed9f 5b70 	vldr	d5, [pc, #448]	; 800c900 <G_q+0xa4e0>
 800c740:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t115.im * 0.0);
 800c744:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800c748:	ed93 7b02 	vldr	d7, [r3, #8]
 800c74c:	ed9f 4b6a 	vldr	d4, [pc, #424]	; 800c8f8 <G_q+0xa4d8>
 800c750:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c754:	ee35 7b07 	vadd.f64	d7, d5, d7
  t12_re = (t114.re * 3.061616997868383E-17 + t114.im * 0.0) - (t115.re *
 800c758:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c75c:	f241 3388 	movw	r3, #5000	; 0x1388
 800c760:	443b      	add	r3, r7
 800c762:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t16_im + t34_re) + 7.498798913309288E-33;
 800c766:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800c76a:	ed93 6b00 	vldr	d6, [r3]
 800c76e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800c772:	443b      	add	r3, r7
 800c774:	ed93 7b00 	vldr	d7, [r3]
 800c778:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c77c:	ed9f 6b62 	vldr	d6, [pc, #392]	; 800c908 <G_q+0xa4e8>
 800c780:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c784:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800c788:	ed83 7b00 	vstr	d7, [r3]
  t20_re += t34_im;
 800c78c:	f241 3348 	movw	r3, #4936	; 0x1348
 800c790:	443b      	add	r3, r7
 800c792:	ed93 6b00 	vldr	d6, [r3]
 800c796:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800c79a:	443b      	add	r3, r7
 800c79c:	ed93 7b00 	vldr	d7, [r3]
 800c7a0:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c7a4:	f241 3348 	movw	r3, #4936	; 0x1348
 800c7a8:	443b      	add	r3, r7
 800c7aa:	ed83 7b00 	vstr	d7, [r3]
  if (t122.im == 0.0) {
 800c7ae:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800c7b2:	ed93 7b02 	vldr	d7, [r3, #8]
 800c7b6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c7ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7be:	d115      	bne.n	800c7ec <G_q+0xa3cc>
    t23_re = t122.re / 2.0;
 800c7c0:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800c7c4:	ed93 6b00 	vldr	d6, [r3]
 800c7c8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c7cc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c7d0:	f241 3330 	movw	r3, #4912	; 0x1330
 800c7d4:	443b      	add	r3, r7
 800c7d6:	ed83 7b00 	vstr	d7, [r3]
    t58_im = 0.0;
 800c7da:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800c7de:	f04f 0300 	mov.w	r3, #0
 800c7e2:	f04f 0400 	mov.w	r4, #0
 800c7e6:	e9c2 3400 	strd	r3, r4, [r2]
 800c7ea:	e037      	b.n	800c85c <G_q+0xa43c>
  } else if (t122.re == 0.0) {
 800c7ec:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800c7f0:	ed93 7b00 	vldr	d7, [r3]
 800c7f4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c7f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7fc:	d115      	bne.n	800c82a <G_q+0xa40a>
    t23_re = 0.0;
 800c7fe:	f04f 0300 	mov.w	r3, #0
 800c802:	f04f 0400 	mov.w	r4, #0
 800c806:	f241 3230 	movw	r2, #4912	; 0x1330
 800c80a:	443a      	add	r2, r7
 800c80c:	e9c2 3400 	strd	r3, r4, [r2]
    t58_im = t122.im / 2.0;
 800c810:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800c814:	ed93 6b02 	vldr	d6, [r3, #8]
 800c818:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800c81c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c820:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c824:	ed83 7b00 	vstr	d7, [r3]
 800c828:	e018      	b.n	800c85c <G_q+0xa43c>
  } else {
    t23_re = t122.re / 2.0;
 800c82a:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800c82e:	ed93 6b00 	vldr	d6, [r3]
 800c832:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c836:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c83a:	f241 3330 	movw	r3, #4912	; 0x1330
 800c83e:	443b      	add	r3, r7
 800c840:	ed83 7b00 	vstr	d7, [r3]
    t58_im = t122.im / 2.0;
 800c844:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800c848:	ed93 6b02 	vldr	d6, [r3, #8]
 800c84c:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800c850:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c854:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c858:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t123.im == 0.0) {
 800c85c:	4b2c      	ldr	r3, [pc, #176]	; (800c910 <G_q+0xa4f0>)
 800c85e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800c862:	443a      	add	r2, r7
 800c864:	4413      	add	r3, r2
 800c866:	ed93 7b02 	vldr	d7, [r3, #8]
 800c86a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c86e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c872:	d119      	bne.n	800c8a8 <G_q+0xa488>
    t34_re = t123.re / 2.0;
 800c874:	4b26      	ldr	r3, [pc, #152]	; (800c910 <G_q+0xa4f0>)
 800c876:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800c87a:	443a      	add	r2, r7
 800c87c:	4413      	add	r3, r2
 800c87e:	ed93 6b00 	vldr	d6, [r3]
 800c882:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c886:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c88a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800c88e:	443b      	add	r3, r7
 800c890:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800c894:	f04f 0300 	mov.w	r3, #0
 800c898:	f04f 0400 	mov.w	r4, #0
 800c89c:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800c8a0:	443a      	add	r2, r7
 800c8a2:	e9c2 3400 	strd	r3, r4, [r2]
 800c8a6:	e055      	b.n	800c954 <G_q+0xa534>
  } else if (t123.re == 0.0) {
 800c8a8:	4b19      	ldr	r3, [pc, #100]	; (800c910 <G_q+0xa4f0>)
 800c8aa:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800c8ae:	443a      	add	r2, r7
 800c8b0:	4413      	add	r3, r2
 800c8b2:	ed93 7b00 	vldr	d7, [r3]
 800c8b6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c8ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8be:	d129      	bne.n	800c914 <G_q+0xa4f4>
    t34_re = 0.0;
 800c8c0:	f04f 0300 	mov.w	r3, #0
 800c8c4:	f04f 0400 	mov.w	r4, #0
 800c8c8:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800c8cc:	443a      	add	r2, r7
 800c8ce:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t123.im / 2.0;
 800c8d2:	4b0f      	ldr	r3, [pc, #60]	; (800c910 <G_q+0xa4f0>)
 800c8d4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800c8d8:	443a      	add	r2, r7
 800c8da:	4413      	add	r3, r2
 800c8dc:	ed93 6b02 	vldr	d6, [r3, #8]
 800c8e0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c8e4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c8e8:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800c8ec:	443b      	add	r3, r7
 800c8ee:	ed83 7b00 	vstr	d7, [r3]
 800c8f2:	e02f      	b.n	800c954 <G_q+0xa534>
 800c8f4:	f3af 8000 	nop.w
	...
 800c900:	33145c07 	.word	0x33145c07
 800c904:	3c81a626 	.word	0x3c81a626
 800c908:	858a5d48 	.word	0x858a5d48
 800c90c:	394377ce 	.word	0x394377ce
 800c910:	ffffee30 	.word	0xffffee30
  } else {
    t34_re = t123.re / 2.0;
 800c914:	4bd0      	ldr	r3, [pc, #832]	; (800cc58 <G_q+0xa838>)
 800c916:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800c91a:	443a      	add	r2, r7
 800c91c:	4413      	add	r3, r2
 800c91e:	ed93 6b00 	vldr	d6, [r3]
 800c922:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c926:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c92a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800c92e:	443b      	add	r3, r7
 800c930:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t123.im / 2.0;
 800c934:	4bc8      	ldr	r3, [pc, #800]	; (800cc58 <G_q+0xa838>)
 800c936:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800c93a:	443a      	add	r2, r7
 800c93c:	4413      	add	r3, r2
 800c93e:	ed93 6b02 	vldr	d6, [r3, #8]
 800c942:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c946:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c94a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800c94e:	443b      	add	r3, r7
 800c950:	ed83 7b00 	vstr	d7, [r3]
  }

  t60_re = (t13_re * t13_im - t76_re * t16_re) - (t20_im * t16_im - t12_re *
 800c954:	f241 3378 	movw	r3, #4984	; 0x1378
 800c958:	443b      	add	r3, r7
 800c95a:	ed93 6b00 	vldr	d6, [r3]
 800c95e:	f241 3370 	movw	r3, #4976	; 0x1370
 800c962:	443b      	add	r3, r7
 800c964:	ed93 7b00 	vldr	d7, [r3]
 800c968:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c96c:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800c970:	443b      	add	r3, r7
 800c972:	ed93 5b00 	vldr	d5, [r3]
 800c976:	f241 3368 	movw	r3, #4968	; 0x1368
 800c97a:	443b      	add	r3, r7
 800c97c:	ed93 7b00 	vldr	d7, [r3]
 800c980:	ee25 7b07 	vmul.f64	d7, d5, d7
 800c984:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c988:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800c98c:	ed93 5b00 	vldr	d5, [r3]
 800c990:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800c994:	ed93 7b00 	vldr	d7, [r3]
 800c998:	ee25 5b07 	vmul.f64	d5, d5, d7
 800c99c:	f241 3388 	movw	r3, #5000	; 0x1388
 800c9a0:	443b      	add	r3, r7
 800c9a2:	ed93 4b00 	vldr	d4, [r3]
 800c9a6:	f241 3348 	movw	r3, #4936	; 0x1348
 800c9aa:	443b      	add	r3, r7
 800c9ac:	ed93 7b00 	vldr	d7, [r3]
 800c9b0:	ee24 7b07 	vmul.f64	d7, d4, d7
 800c9b4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c9b8:	f241 2350 	movw	r3, #4688	; 0x1250
 800c9bc:	443b      	add	r3, r7
 800c9be:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c9c2:	ed83 7b00 	vstr	d7, [r3]
    t20_re);
  t76_re = (t13_re * t16_re + t76_re * t13_im) - (t20_im * t20_re + t12_re *
 800c9c6:	f241 3378 	movw	r3, #4984	; 0x1378
 800c9ca:	443b      	add	r3, r7
 800c9cc:	ed93 6b00 	vldr	d6, [r3]
 800c9d0:	f241 3368 	movw	r3, #4968	; 0x1368
 800c9d4:	443b      	add	r3, r7
 800c9d6:	ed93 7b00 	vldr	d7, [r3]
 800c9da:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c9de:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800c9e2:	443b      	add	r3, r7
 800c9e4:	ed93 5b00 	vldr	d5, [r3]
 800c9e8:	f241 3370 	movw	r3, #4976	; 0x1370
 800c9ec:	443b      	add	r3, r7
 800c9ee:	ed93 7b00 	vldr	d7, [r3]
 800c9f2:	ee25 7b07 	vmul.f64	d7, d5, d7
 800c9f6:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c9fa:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800c9fe:	ed93 5b00 	vldr	d5, [r3]
 800ca02:	f241 3348 	movw	r3, #4936	; 0x1348
 800ca06:	443b      	add	r3, r7
 800ca08:	ed93 7b00 	vldr	d7, [r3]
 800ca0c:	ee25 5b07 	vmul.f64	d5, d5, d7
 800ca10:	f241 3388 	movw	r3, #5000	; 0x1388
 800ca14:	443b      	add	r3, r7
 800ca16:	ed93 4b00 	vldr	d4, [r3]
 800ca1a:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800ca1e:	ed93 7b00 	vldr	d7, [r3]
 800ca22:	ee24 7b07 	vmul.f64	d7, d4, d7
 800ca26:	ee35 7b07 	vadd.f64	d7, d5, d7
 800ca2a:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800ca2e:	443b      	add	r3, r7
 800ca30:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ca34:	ed83 7b00 	vstr	d7, [r3]
    t16_im);
  t23_re += t34_re;
 800ca38:	f241 3330 	movw	r3, #4912	; 0x1330
 800ca3c:	443b      	add	r3, r7
 800ca3e:	ed93 6b00 	vldr	d6, [r3]
 800ca42:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800ca46:	443b      	add	r3, r7
 800ca48:	ed93 7b00 	vldr	d7, [r3]
 800ca4c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ca50:	f241 3330 	movw	r3, #4912	; 0x1330
 800ca54:	443b      	add	r3, r7
 800ca56:	ed83 7b00 	vstr	d7, [r3]
  t58_im += t34_im;
 800ca5a:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800ca5e:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800ca62:	ed92 6b00 	vldr	d6, [r2]
 800ca66:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800ca6a:	443a      	add	r2, r7
 800ca6c:	ed92 7b00 	vldr	d7, [r2]
 800ca70:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ca74:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t160.re * 0.0 - t160.im * 0.5) - (t161.re * 0.0 - t161.im * 0.5);
 800ca78:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 800ca7c:	ed93 7b00 	vldr	d7, [r3]
 800ca80:	ed9f 6b73 	vldr	d6, [pc, #460]	; 800cc50 <G_q+0xa830>
 800ca84:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ca88:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 800ca8c:	ed93 7b02 	vldr	d7, [r3, #8]
 800ca90:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ca94:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ca98:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ca9c:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 800caa0:	ed93 7b00 	vldr	d7, [r3]
 800caa4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800cc50 <G_q+0xa830>
 800caa8:	ee27 5b05 	vmul.f64	d5, d7, d5
 800caac:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 800cab0:	ed93 7b02 	vldr	d7, [r3, #8]
 800cab4:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800cab8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cabc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800cac0:	ee36 7b47 	vsub.f64	d7, d6, d7
 800cac4:	f241 3368 	movw	r3, #4968	; 0x1368
 800cac8:	443b      	add	r3, r7
 800caca:	ed83 7b00 	vstr	d7, [r3]
  t85_im = (t160.re * 0.5 + t160.im * 0.0) - (t161.re * 0.5 + t161.im * 0.0);
 800cace:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 800cad2:	ed93 7b00 	vldr	d7, [r3]
 800cad6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800cada:	ee27 6b06 	vmul.f64	d6, d7, d6
 800cade:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 800cae2:	ed93 7b02 	vldr	d7, [r3, #8]
 800cae6:	ed9f 5b5a 	vldr	d5, [pc, #360]	; 800cc50 <G_q+0xa830>
 800caea:	ee27 7b05 	vmul.f64	d7, d7, d5
 800caee:	ee36 6b07 	vadd.f64	d6, d6, d7
 800caf2:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 800caf6:	ed93 7b00 	vldr	d7, [r3]
 800cafa:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800cafe:	ee27 5b05 	vmul.f64	d5, d7, d5
 800cb02:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 800cb06:	ed93 7b02 	vldr	d7, [r3, #8]
 800cb0a:	ed9f 4b51 	vldr	d4, [pc, #324]	; 800cc50 <G_q+0xa830>
 800cb0e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cb12:	ee35 7b07 	vadd.f64	d7, d5, d7
 800cb16:	ee36 7b47 	vsub.f64	d7, d6, d7
 800cb1a:	f241 3318 	movw	r3, #4888	; 0x1318
 800cb1e:	443b      	add	r3, r7
 800cb20:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t162.re * 0.0 - t162.im * 0.5) - (t163.re * 0.0 - t163.im * 0.5);
 800cb24:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800cb28:	ed93 7b00 	vldr	d7, [r3]
 800cb2c:	ed9f 6b48 	vldr	d6, [pc, #288]	; 800cc50 <G_q+0xa830>
 800cb30:	ee27 6b06 	vmul.f64	d6, d7, d6
 800cb34:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800cb38:	ed93 7b02 	vldr	d7, [r3, #8]
 800cb3c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800cb40:	ee27 7b05 	vmul.f64	d7, d7, d5
 800cb44:	ee36 6b47 	vsub.f64	d6, d6, d7
 800cb48:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800cb4c:	ed93 7b00 	vldr	d7, [r3]
 800cb50:	ed9f 5b3f 	vldr	d5, [pc, #252]	; 800cc50 <G_q+0xa830>
 800cb54:	ee27 5b05 	vmul.f64	d5, d7, d5
 800cb58:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800cb5c:	ed93 7b02 	vldr	d7, [r3, #8]
 800cb60:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800cb64:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cb68:	ee35 7b47 	vsub.f64	d7, d5, d7
 800cb6c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800cb70:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800cb74:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t162.re * 0.5 + t162.im * 0.0) - (t163.re * 0.5 + t163.im * 0.0);
 800cb78:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800cb7c:	ed93 7b00 	vldr	d7, [r3]
 800cb80:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800cb84:	ee27 6b06 	vmul.f64	d6, d7, d6
 800cb88:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800cb8c:	ed93 7b02 	vldr	d7, [r3, #8]
 800cb90:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 800cc50 <G_q+0xa830>
 800cb94:	ee27 7b05 	vmul.f64	d7, d7, d5
 800cb98:	ee36 6b07 	vadd.f64	d6, d6, d7
 800cb9c:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800cba0:	ed93 7b00 	vldr	d7, [r3]
 800cba4:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800cba8:	ee27 5b05 	vmul.f64	d5, d7, d5
 800cbac:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800cbb0:	ed93 7b02 	vldr	d7, [r3, #8]
 800cbb4:	ed9f 4b26 	vldr	d4, [pc, #152]	; 800cc50 <G_q+0xa830>
 800cbb8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cbbc:	ee35 7b07 	vadd.f64	d7, d5, d7
 800cbc0:	ee36 7b47 	vsub.f64	d7, d6, d7
 800cbc4:	f241 3348 	movw	r3, #4936	; 0x1348
 800cbc8:	443b      	add	r3, r7
 800cbca:	ed83 7b00 	vstr	d7, [r3]
  if (t164.im == 0.0) {
 800cbce:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800cbd2:	ed93 7b02 	vldr	d7, [r3, #8]
 800cbd6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cbda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbde:	d115      	bne.n	800cc0c <G_q+0xa7ec>
    t20_im = t164.re / 2.0;
 800cbe0:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800cbe4:	ed93 6b00 	vldr	d6, [r3]
 800cbe8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cbec:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cbf0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800cbf4:	ed83 7b00 	vstr	d7, [r3]
    t12_re = 0.0;
 800cbf8:	f04f 0300 	mov.w	r3, #0
 800cbfc:	f04f 0400 	mov.w	r4, #0
 800cc00:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc04:	443a      	add	r2, r7
 800cc06:	e9c2 3400 	strd	r3, r4, [r2]
 800cc0a:	e040      	b.n	800cc8e <G_q+0xa86e>
  } else if (t164.re == 0.0) {
 800cc0c:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800cc10:	ed93 7b00 	vldr	d7, [r3]
 800cc14:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cc18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc1c:	d11e      	bne.n	800cc5c <G_q+0xa83c>
    t20_im = 0.0;
 800cc1e:	f04f 0300 	mov.w	r3, #0
 800cc22:	f04f 0400 	mov.w	r4, #0
 800cc26:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 800cc2a:	e9c2 3400 	strd	r3, r4, [r2]
    t12_re = t164.im / 2.0;
 800cc2e:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800cc32:	ed93 6b02 	vldr	d6, [r3, #8]
 800cc36:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cc3a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cc3e:	f241 3388 	movw	r3, #5000	; 0x1388
 800cc42:	443b      	add	r3, r7
 800cc44:	ed83 7b00 	vstr	d7, [r3]
 800cc48:	e021      	b.n	800cc8e <G_q+0xa86e>
 800cc4a:	bf00      	nop
 800cc4c:	f3af 8000 	nop.w
	...
 800cc58:	ffffee30 	.word	0xffffee30
  } else {
    t20_im = t164.re / 2.0;
 800cc5c:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800cc60:	ed93 6b00 	vldr	d6, [r3]
 800cc64:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cc68:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cc6c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800cc70:	ed83 7b00 	vstr	d7, [r3]
    t12_re = t164.im / 2.0;
 800cc74:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800cc78:	ed93 6b02 	vldr	d6, [r3, #8]
 800cc7c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cc80:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cc84:	f241 3388 	movw	r3, #5000	; 0x1388
 800cc88:	443b      	add	r3, r7
 800cc8a:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t165.im == 0.0) {
 800cc8e:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800cc92:	ed93 7b02 	vldr	d7, [r3, #8]
 800cc96:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cc9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc9e:	d116      	bne.n	800ccce <G_q+0xa8ae>
    t34_re = t165.re / 2.0;
 800cca0:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800cca4:	ed93 6b00 	vldr	d6, [r3]
 800cca8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ccac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ccb0:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800ccb4:	443b      	add	r3, r7
 800ccb6:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800ccba:	f04f 0300 	mov.w	r3, #0
 800ccbe:	f04f 0400 	mov.w	r4, #0
 800ccc2:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800ccc6:	443a      	add	r2, r7
 800ccc8:	e9c2 3400 	strd	r3, r4, [r2]
 800cccc:	e039      	b.n	800cd42 <G_q+0xa922>
  } else if (t165.re == 0.0) {
 800ccce:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800ccd2:	ed93 7b00 	vldr	d7, [r3]
 800ccd6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ccda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccde:	d116      	bne.n	800cd0e <G_q+0xa8ee>
    t34_re = 0.0;
 800cce0:	f04f 0300 	mov.w	r3, #0
 800cce4:	f04f 0400 	mov.w	r4, #0
 800cce8:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800ccec:	443a      	add	r2, r7
 800ccee:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t165.im / 2.0;
 800ccf2:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800ccf6:	ed93 6b02 	vldr	d6, [r3, #8]
 800ccfa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ccfe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cd02:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800cd06:	443b      	add	r3, r7
 800cd08:	ed83 7b00 	vstr	d7, [r3]
 800cd0c:	e019      	b.n	800cd42 <G_q+0xa922>
  } else {
    t34_re = t165.re / 2.0;
 800cd0e:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800cd12:	ed93 6b00 	vldr	d6, [r3]
 800cd16:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cd1a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cd1e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800cd22:	443b      	add	r3, r7
 800cd24:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t165.im / 2.0;
 800cd28:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800cd2c:	ed93 6b02 	vldr	d6, [r3, #8]
 800cd30:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cd34:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cd38:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800cd3c:	443b      	add	r3, r7
 800cd3e:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t166.im == 0.0) {
 800cd42:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 800cd46:	ed93 7b02 	vldr	d7, [r3, #8]
 800cd4a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cd4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd52:	d115      	bne.n	800cd80 <G_q+0xa960>
    t12_im = t166.re / 2.0;
 800cd54:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 800cd58:	ed93 6b00 	vldr	d6, [r3]
 800cd5c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cd60:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cd64:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800cd68:	ed83 7b00 	vstr	d7, [r3]
    b_t10_re = 0.0;
 800cd6c:	f04f 0300 	mov.w	r3, #0
 800cd70:	f04f 0400 	mov.w	r4, #0
 800cd74:	f241 3238 	movw	r2, #4920	; 0x1338
 800cd78:	443a      	add	r2, r7
 800cd7a:	e9c2 3400 	strd	r3, r4, [r2]
 800cd7e:	e037      	b.n	800cdf0 <G_q+0xa9d0>
  } else if (t166.re == 0.0) {
 800cd80:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 800cd84:	ed93 7b00 	vldr	d7, [r3]
 800cd88:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cd8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd90:	d115      	bne.n	800cdbe <G_q+0xa99e>
    t12_im = 0.0;
 800cd92:	f04f 0300 	mov.w	r3, #0
 800cd96:	f04f 0400 	mov.w	r4, #0
 800cd9a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800cd9e:	e9c2 3400 	strd	r3, r4, [r2]
    b_t10_re = t166.im / 2.0;
 800cda2:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 800cda6:	ed93 6b02 	vldr	d6, [r3, #8]
 800cdaa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cdae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cdb2:	f241 3338 	movw	r3, #4920	; 0x1338
 800cdb6:	443b      	add	r3, r7
 800cdb8:	ed83 7b00 	vstr	d7, [r3]
 800cdbc:	e018      	b.n	800cdf0 <G_q+0xa9d0>
  } else {
    t12_im = t166.re / 2.0;
 800cdbe:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 800cdc2:	ed93 6b00 	vldr	d6, [r3]
 800cdc6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cdca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cdce:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800cdd2:	ed83 7b00 	vstr	d7, [r3]
    b_t10_re = t166.im / 2.0;
 800cdd6:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 800cdda:	ed93 6b02 	vldr	d6, [r3, #8]
 800cdde:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cde2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cde6:	f241 3338 	movw	r3, #4920	; 0x1338
 800cdea:	443b      	add	r3, r7
 800cdec:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t167.im == 0.0) {
 800cdf0:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 800cdf4:	ed93 7b02 	vldr	d7, [r3, #8]
 800cdf8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cdfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce00:	d116      	bne.n	800ce30 <G_q+0xaa10>
    t13_re = t167.re / 2.0;
 800ce02:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 800ce06:	ed93 6b00 	vldr	d6, [r3]
 800ce0a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ce0e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ce12:	f241 3378 	movw	r3, #4984	; 0x1378
 800ce16:	443b      	add	r3, r7
 800ce18:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 800ce1c:	f04f 0300 	mov.w	r3, #0
 800ce20:	f04f 0400 	mov.w	r4, #0
 800ce24:	f241 3270 	movw	r2, #4976	; 0x1370
 800ce28:	443a      	add	r2, r7
 800ce2a:	e9c2 3400 	strd	r3, r4, [r2]
 800ce2e:	e039      	b.n	800cea4 <G_q+0xaa84>
  } else if (t167.re == 0.0) {
 800ce30:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 800ce34:	ed93 7b00 	vldr	d7, [r3]
 800ce38:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ce3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce40:	d116      	bne.n	800ce70 <G_q+0xaa50>
    t13_re = 0.0;
 800ce42:	f04f 0300 	mov.w	r3, #0
 800ce46:	f04f 0400 	mov.w	r4, #0
 800ce4a:	f241 3278 	movw	r2, #4984	; 0x1378
 800ce4e:	443a      	add	r2, r7
 800ce50:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t167.im / 2.0;
 800ce54:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 800ce58:	ed93 6b02 	vldr	d6, [r3, #8]
 800ce5c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ce60:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ce64:	f241 3370 	movw	r3, #4976	; 0x1370
 800ce68:	443b      	add	r3, r7
 800ce6a:	ed83 7b00 	vstr	d7, [r3]
 800ce6e:	e019      	b.n	800cea4 <G_q+0xaa84>
  } else {
    t13_re = t167.re / 2.0;
 800ce70:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 800ce74:	ed93 6b00 	vldr	d6, [r3]
 800ce78:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ce7c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ce80:	f241 3378 	movw	r3, #4984	; 0x1378
 800ce84:	443b      	add	r3, r7
 800ce86:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t167.im / 2.0;
 800ce8a:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 800ce8e:	ed93 6b02 	vldr	d6, [r3, #8]
 800ce92:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ce96:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ce9a:	f241 3370 	movw	r3, #4976	; 0x1370
 800ce9e:	443b      	add	r3, r7
 800cea0:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_im += t34_re;
 800cea4:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800cea8:	ed93 6b00 	vldr	d6, [r3]
 800ceac:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800ceb0:	443b      	add	r3, r7
 800ceb2:	ed93 7b00 	vldr	d7, [r3]
 800ceb6:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ceba:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800cebe:	ed83 7b00 	vstr	d7, [r3]
  t12_re += t34_im;
 800cec2:	f241 3388 	movw	r3, #5000	; 0x1388
 800cec6:	443b      	add	r3, r7
 800cec8:	ed93 6b00 	vldr	d6, [r3]
 800cecc:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800ced0:	443b      	add	r3, r7
 800ced2:	ed93 7b00 	vldr	d7, [r3]
 800ced6:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ceda:	f241 3388 	movw	r3, #5000	; 0x1388
 800cede:	443b      	add	r3, r7
 800cee0:	ed83 7b00 	vstr	d7, [r3]
  t12_im = (t12_im + t13_re) + 7.498798913309288E-33;
 800cee4:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800cee8:	ed93 6b00 	vldr	d6, [r3]
 800ceec:	f241 3378 	movw	r3, #4984	; 0x1378
 800cef0:	443b      	add	r3, r7
 800cef2:	ed93 7b00 	vldr	d7, [r3]
 800cef6:	ee36 7b07 	vadd.f64	d7, d6, d7
 800cefa:	ed9f 6be3 	vldr	d6, [pc, #908]	; 800d288 <G_q+0xae68>
 800cefe:	ee37 7b06 	vadd.f64	d7, d7, d6
 800cf02:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800cf06:	ed83 7b00 	vstr	d7, [r3]
  b_t10_re += t13_im;
 800cf0a:	f241 3338 	movw	r3, #4920	; 0x1338
 800cf0e:	443b      	add	r3, r7
 800cf10:	ed93 6b00 	vldr	d6, [r3]
 800cf14:	f241 3370 	movw	r3, #4976	; 0x1370
 800cf18:	443b      	add	r3, r7
 800cf1a:	ed93 7b00 	vldr	d7, [r3]
 800cf1e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800cf22:	f241 3338 	movw	r3, #4920	; 0x1338
 800cf26:	443b      	add	r3, r7
 800cf28:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t16_re * t16_im - t85_im * t20_re) + (t20_im * t12_im - t12_re *
 800cf2c:	f241 3368 	movw	r3, #4968	; 0x1368
 800cf30:	443b      	add	r3, r7
 800cf32:	ed93 6b00 	vldr	d6, [r3]
 800cf36:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800cf3a:	ed93 7b00 	vldr	d7, [r3]
 800cf3e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800cf42:	f241 3318 	movw	r3, #4888	; 0x1318
 800cf46:	443b      	add	r3, r7
 800cf48:	ed93 5b00 	vldr	d5, [r3]
 800cf4c:	f241 3348 	movw	r3, #4936	; 0x1348
 800cf50:	443b      	add	r3, r7
 800cf52:	ed93 7b00 	vldr	d7, [r3]
 800cf56:	ee25 7b07 	vmul.f64	d7, d5, d7
 800cf5a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800cf5e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800cf62:	ed93 5b00 	vldr	d5, [r3]
 800cf66:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800cf6a:	ed93 7b00 	vldr	d7, [r3]
 800cf6e:	ee25 5b07 	vmul.f64	d5, d5, d7
 800cf72:	f241 3388 	movw	r3, #5000	; 0x1388
 800cf76:	443b      	add	r3, r7
 800cf78:	ed93 4b00 	vldr	d4, [r3]
 800cf7c:	f241 3338 	movw	r3, #4920	; 0x1338
 800cf80:	443b      	add	r3, r7
 800cf82:	ed93 7b00 	vldr	d7, [r3]
 800cf86:	ee24 7b07 	vmul.f64	d7, d4, d7
 800cf8a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800cf8e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800cf92:	f241 3378 	movw	r3, #4984	; 0x1378
 800cf96:	443b      	add	r3, r7
 800cf98:	ed83 7b00 	vstr	d7, [r3]
    b_t10_re);
  t85_im = (t16_re * t20_re + t85_im * t16_im) + (t20_im * b_t10_re + t12_re *
 800cf9c:	f241 3368 	movw	r3, #4968	; 0x1368
 800cfa0:	443b      	add	r3, r7
 800cfa2:	ed93 6b00 	vldr	d6, [r3]
 800cfa6:	f241 3348 	movw	r3, #4936	; 0x1348
 800cfaa:	443b      	add	r3, r7
 800cfac:	ed93 7b00 	vldr	d7, [r3]
 800cfb0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800cfb4:	f241 3318 	movw	r3, #4888	; 0x1318
 800cfb8:	443b      	add	r3, r7
 800cfba:	ed93 5b00 	vldr	d5, [r3]
 800cfbe:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800cfc2:	ed93 7b00 	vldr	d7, [r3]
 800cfc6:	ee25 7b07 	vmul.f64	d7, d5, d7
 800cfca:	ee36 6b07 	vadd.f64	d6, d6, d7
 800cfce:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800cfd2:	ed93 5b00 	vldr	d5, [r3]
 800cfd6:	f241 3338 	movw	r3, #4920	; 0x1338
 800cfda:	443b      	add	r3, r7
 800cfdc:	ed93 7b00 	vldr	d7, [r3]
 800cfe0:	ee25 5b07 	vmul.f64	d5, d5, d7
 800cfe4:	f241 3388 	movw	r3, #5000	; 0x1388
 800cfe8:	443b      	add	r3, r7
 800cfea:	ed93 4b00 	vldr	d4, [r3]
 800cfee:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800cff2:	ed93 7b00 	vldr	d7, [r3]
 800cff6:	ee24 7b07 	vmul.f64	d7, d4, d7
 800cffa:	ee35 7b07 	vadd.f64	d7, d5, d7
 800cffe:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d002:	f241 3318 	movw	r3, #4888	; 0x1318
 800d006:	443b      	add	r3, r7
 800d008:	ed83 7b00 	vstr	d7, [r3]
    t12_im);
  t34_re = (t158.re * 0.0 - t158.im * 0.5) - (t159.re * 0.0 - t159.im * 0.5);
 800d00c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800d010:	ed93 7b00 	vldr	d7, [r3]
 800d014:	ed9f 6b9e 	vldr	d6, [pc, #632]	; 800d290 <G_q+0xae70>
 800d018:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d01c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800d020:	ed93 7b02 	vldr	d7, [r3, #8]
 800d024:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d028:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d02c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d030:	4b9f      	ldr	r3, [pc, #636]	; (800d2b0 <G_q+0xae90>)
 800d032:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d036:	443a      	add	r2, r7
 800d038:	4413      	add	r3, r2
 800d03a:	ed93 7b00 	vldr	d7, [r3]
 800d03e:	ed9f 5b94 	vldr	d5, [pc, #592]	; 800d290 <G_q+0xae70>
 800d042:	ee27 5b05 	vmul.f64	d5, d7, d5
 800d046:	4b9a      	ldr	r3, [pc, #616]	; (800d2b0 <G_q+0xae90>)
 800d048:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d04c:	443a      	add	r2, r7
 800d04e:	4413      	add	r3, r2
 800d050:	ed93 7b02 	vldr	d7, [r3, #8]
 800d054:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800d058:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d05c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d060:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d064:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800d068:	443b      	add	r3, r7
 800d06a:	ed83 7b00 	vstr	d7, [r3]
  t34_im = (t158.re * 0.5 + t158.im * 0.0) - (t159.re * 0.5 + t159.im * 0.0);
 800d06e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800d072:	ed93 7b00 	vldr	d7, [r3]
 800d076:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800d07a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d07e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800d082:	ed93 7b02 	vldr	d7, [r3, #8]
 800d086:	ed9f 5b82 	vldr	d5, [pc, #520]	; 800d290 <G_q+0xae70>
 800d08a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d08e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800d092:	4b87      	ldr	r3, [pc, #540]	; (800d2b0 <G_q+0xae90>)
 800d094:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d098:	443a      	add	r2, r7
 800d09a:	4413      	add	r3, r2
 800d09c:	ed93 7b00 	vldr	d7, [r3]
 800d0a0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d0a4:	ee27 5b05 	vmul.f64	d5, d7, d5
 800d0a8:	4b81      	ldr	r3, [pc, #516]	; (800d2b0 <G_q+0xae90>)
 800d0aa:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d0ae:	443a      	add	r2, r7
 800d0b0:	4413      	add	r3, r2
 800d0b2:	ed93 7b02 	vldr	d7, [r3, #8]
 800d0b6:	ed9f 4b76 	vldr	d4, [pc, #472]	; 800d290 <G_q+0xae70>
 800d0ba:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d0be:	ee35 7b07 	vadd.f64	d7, d5, d7
 800d0c2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d0c6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800d0ca:	443b      	add	r3, r7
 800d0cc:	ed83 7b00 	vstr	d7, [r3]
  b_G_q[2].re = -g * ((((((t8_im * t19_re_tmp - t54_re * t19_im_tmp) * 0.1376 +
 800d0d0:	4b78      	ldr	r3, [pc, #480]	; (800d2b4 <G_q+0xae94>)
 800d0d2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d0d6:	443a      	add	r2, r7
 800d0d8:	4413      	add	r3, r2
 800d0da:	ed93 7b00 	vldr	d7, [r3]
 800d0de:	eeb1 6b47 	vneg.f64	d6, d7
 800d0e2:	f241 2370 	movw	r3, #4720	; 0x1270
 800d0e6:	443b      	add	r3, r7
 800d0e8:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 800d0ec:	ed92 5b00 	vldr	d5, [r2]
 800d0f0:	ed93 7b00 	vldr	d7, [r3]
 800d0f4:	ee25 5b07 	vmul.f64	d5, d5, d7
 800d0f8:	f241 2368 	movw	r3, #4712	; 0x1268
 800d0fc:	443b      	add	r3, r7
 800d0fe:	f241 3228 	movw	r2, #4904	; 0x1328
 800d102:	443a      	add	r2, r7
 800d104:	ed92 4b00 	vldr	d4, [r2]
 800d108:	ed93 7b00 	vldr	d7, [r3]
 800d10c:	ee24 7b07 	vmul.f64	d7, d4, d7
 800d110:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d114:	ed9f 5b60 	vldr	d5, [pc, #384]	; 800d298 <G_q+0xae78>
 800d118:	ee27 5b05 	vmul.f64	d5, d7, d5
    (t43_re * t41_im - t41_re * t8_re) * 0.0215) + (t43_im * t55_im - b_t54_re *
 800d11c:	f241 2358 	movw	r3, #4696	; 0x1258
 800d120:	443b      	add	r3, r7
 800d122:	ed93 4b00 	vldr	d4, [r3]
 800d126:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800d12a:	ed93 7b00 	vldr	d7, [r3]
 800d12e:	ee24 4b07 	vmul.f64	d4, d4, d7
 800d132:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800d136:	f241 3208 	movw	r2, #4872	; 0x1308
 800d13a:	443a      	add	r2, r7
 800d13c:	ed92 3b00 	vldr	d3, [r2]
 800d140:	ed93 7b00 	vldr	d7, [r3]
 800d144:	ee23 7b07 	vmul.f64	d7, d3, d7
 800d148:	ee34 7b47 	vsub.f64	d7, d4, d7
 800d14c:	ed9f 4b54 	vldr	d4, [pc, #336]	; 800d2a0 <G_q+0xae80>
 800d150:	ee27 7b04 	vmul.f64	d7, d7, d4
  b_G_q[2].re = -g * ((((((t8_im * t19_re_tmp - t54_re * t19_im_tmp) * 0.1376 +
 800d154:	ee35 5b07 	vadd.f64	d5, d5, d7
    (t43_re * t41_im - t41_re * t8_re) * 0.0215) + (t43_im * t55_im - b_t54_re *
 800d158:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800d15c:	443b      	add	r3, r7
 800d15e:	ed93 4b00 	vldr	d4, [r3]
 800d162:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800d166:	443b      	add	r3, r7
 800d168:	ed93 7b00 	vldr	d7, [r3]
 800d16c:	ee24 4b07 	vmul.f64	d4, d4, d7
 800d170:	f241 23f0 	movw	r3, #4848	; 0x12f0
 800d174:	443b      	add	r3, r7
 800d176:	ed93 3b00 	vldr	d3, [r3]
 800d17a:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800d17e:	443b      	add	r3, r7
 800d180:	ed93 7b00 	vldr	d7, [r3]
 800d184:	ee23 7b07 	vmul.f64	d7, d3, d7
 800d188:	ee34 7b47 	vsub.f64	d7, d4, d7
    b_t54_im) * 0.0215) - (t74_re * t3_im - t74_im * t72_re) * 0.1376) + (t60_re
 800d18c:	ed9f 4b44 	vldr	d4, [pc, #272]	; 800d2a0 <G_q+0xae80>
 800d190:	ee27 7b04 	vmul.f64	d7, d7, d4
    (t43_re * t41_im - t41_re * t8_re) * 0.0215) + (t43_im * t55_im - b_t54_re *
 800d194:	ee35 5b07 	vadd.f64	d5, d5, d7
    b_t54_im) * 0.0215) - (t74_re * t3_im - t74_im * t72_re) * 0.1376) + (t60_re
 800d198:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800d19c:	443b      	add	r3, r7
 800d19e:	ed93 4b00 	vldr	d4, [r3]
 800d1a2:	f241 3310 	movw	r3, #4880	; 0x1310
 800d1a6:	443b      	add	r3, r7
 800d1a8:	ed93 7b00 	vldr	d7, [r3]
 800d1ac:	ee24 4b07 	vmul.f64	d4, d4, d7
 800d1b0:	f241 22b0 	movw	r2, #4784	; 0x12b0
 800d1b4:	443a      	add	r2, r7
 800d1b6:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800d1ba:	ed92 3b00 	vldr	d3, [r2]
 800d1be:	ed93 7b00 	vldr	d7, [r3]
 800d1c2:	ee23 7b07 	vmul.f64	d7, d3, d7
 800d1c6:	ee34 7b47 	vsub.f64	d7, d4, d7
 800d1ca:	ed9f 4b33 	vldr	d4, [pc, #204]	; 800d298 <G_q+0xae78>
 800d1ce:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d1d2:	ee35 5b47 	vsub.f64	d5, d5, d7
    * t23_re - t76_re * t58_im) * 1.3164953090834051E-18) - (t13_re * t34_re -
 800d1d6:	f241 2350 	movw	r3, #4688	; 0x1250
 800d1da:	443b      	add	r3, r7
 800d1dc:	ed93 4b00 	vldr	d4, [r3]
 800d1e0:	f241 3330 	movw	r3, #4912	; 0x1330
 800d1e4:	443b      	add	r3, r7
 800d1e6:	ed93 7b00 	vldr	d7, [r3]
 800d1ea:	ee24 4b07 	vmul.f64	d4, d4, d7
 800d1ee:	f241 22a8 	movw	r2, #4776	; 0x12a8
 800d1f2:	443a      	add	r2, r7
 800d1f4:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800d1f8:	ed92 3b00 	vldr	d3, [r2]
 800d1fc:	ed93 7b00 	vldr	d7, [r3]
 800d200:	ee23 7b07 	vmul.f64	d7, d3, d7
 800d204:	ee34 7b47 	vsub.f64	d7, d4, d7
 800d208:	ed9f 4b27 	vldr	d4, [pc, #156]	; 800d2a8 <G_q+0xae88>
 800d20c:	ee27 7b04 	vmul.f64	d7, d7, d4
    b_t54_im) * 0.0215) - (t74_re * t3_im - t74_im * t72_re) * 0.1376) + (t60_re
 800d210:	ee35 5b07 	vadd.f64	d5, d5, d7
    * t23_re - t76_re * t58_im) * 1.3164953090834051E-18) - (t13_re * t34_re -
 800d214:	f241 3378 	movw	r3, #4984	; 0x1378
 800d218:	443b      	add	r3, r7
 800d21a:	ed93 4b00 	vldr	d4, [r3]
 800d21e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800d222:	443b      	add	r3, r7
 800d224:	ed93 7b00 	vldr	d7, [r3]
 800d228:	ee24 4b07 	vmul.f64	d4, d4, d7
    t85_im * t34_im) * 1.3164953090834051E-18);
 800d22c:	f241 3318 	movw	r3, #4888	; 0x1318
 800d230:	443b      	add	r3, r7
 800d232:	ed93 3b00 	vldr	d3, [r3]
 800d236:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800d23a:	443b      	add	r3, r7
 800d23c:	ed93 7b00 	vldr	d7, [r3]
 800d240:	ee23 7b07 	vmul.f64	d7, d3, d7
    * t23_re - t76_re * t58_im) * 1.3164953090834051E-18) - (t13_re * t34_re -
 800d244:	ee34 7b47 	vsub.f64	d7, d4, d7
    t85_im * t34_im) * 1.3164953090834051E-18);
 800d248:	ed9f 4b17 	vldr	d4, [pc, #92]	; 800d2a8 <G_q+0xae88>
 800d24c:	ee27 7b04 	vmul.f64	d7, d7, d4
    * t23_re - t76_re * t58_im) * 1.3164953090834051E-18) - (t13_re * t34_re -
 800d250:	ee35 7b47 	vsub.f64	d7, d5, d7
  b_G_q[2].re = -g * ((((((t8_im * t19_re_tmp - t54_re * t19_im_tmp) * 0.1376 +
 800d254:	4b18      	ldr	r3, [pc, #96]	; (800d2b8 <G_q+0xae98>)
 800d256:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d25a:	443a      	add	r2, r7
 800d25c:	4413      	add	r3, r2
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	3320      	adds	r3, #32
 800d262:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d266:	ed83 7b00 	vstr	d7, [r3]
  b_G_q[2].im = -g * ((((((t8_im * t19_im_tmp + t54_re * t19_re_tmp) * 0.1376 +
 800d26a:	4b12      	ldr	r3, [pc, #72]	; (800d2b4 <G_q+0xae94>)
 800d26c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d270:	443a      	add	r2, r7
 800d272:	4413      	add	r3, r2
 800d274:	ed93 7b00 	vldr	d7, [r3]
 800d278:	eeb1 6b47 	vneg.f64	d6, d7
 800d27c:	f241 2368 	movw	r3, #4712	; 0x1268
 800d280:	443b      	add	r3, r7
 800d282:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 800d286:	e019      	b.n	800d2bc <G_q+0xae9c>
 800d288:	858a5d48 	.word	0x858a5d48
 800d28c:	394377ce 	.word	0x394377ce
	...
 800d298:	75f6fd22 	.word	0x75f6fd22
 800d29c:	3fc19ce0 	.word	0x3fc19ce0
 800d2a0:	9374bc6a 	.word	0x9374bc6a
 800d2a4:	3f960418 	.word	0x3f960418
 800d2a8:	2ba953a1 	.word	0x2ba953a1
 800d2ac:	3c3848f9 	.word	0x3c3848f9
 800d2b0:	ffffee90 	.word	0xffffee90
 800d2b4:	ffffec58 	.word	0xffffec58
 800d2b8:	ffffec34 	.word	0xffffec34
 800d2bc:	ed92 5b00 	vldr	d5, [r2]
 800d2c0:	ed93 7b00 	vldr	d7, [r3]
 800d2c4:	ee25 5b07 	vmul.f64	d5, d5, d7
 800d2c8:	f241 2370 	movw	r3, #4720	; 0x1270
 800d2cc:	443b      	add	r3, r7
 800d2ce:	f241 3228 	movw	r2, #4904	; 0x1328
 800d2d2:	443a      	add	r2, r7
 800d2d4:	ed92 4b00 	vldr	d4, [r2]
 800d2d8:	ed93 7b00 	vldr	d7, [r3]
 800d2dc:	ee24 7b07 	vmul.f64	d7, d4, d7
 800d2e0:	ee35 7b07 	vadd.f64	d7, d5, d7
 800d2e4:	ed9f 5ba6 	vldr	d5, [pc, #664]	; 800d580 <G_q+0xb160>
 800d2e8:	ee27 5b05 	vmul.f64	d5, d7, d5
    (t43_re * t8_re + t41_re * t41_im) * 0.0215) + (t43_im * b_t54_im + b_t54_re
 800d2ec:	f241 2258 	movw	r2, #4696	; 0x1258
 800d2f0:	443a      	add	r2, r7
 800d2f2:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800d2f6:	ed92 4b00 	vldr	d4, [r2]
 800d2fa:	ed93 7b00 	vldr	d7, [r3]
 800d2fe:	ee24 4b07 	vmul.f64	d4, d4, d7
 800d302:	f241 3308 	movw	r3, #4872	; 0x1308
 800d306:	443b      	add	r3, r7
 800d308:	ed93 3b00 	vldr	d3, [r3]
 800d30c:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800d310:	ed93 7b00 	vldr	d7, [r3]
 800d314:	ee23 7b07 	vmul.f64	d7, d3, d7
 800d318:	ee34 7b07 	vadd.f64	d7, d4, d7
 800d31c:	ed9f 4b9a 	vldr	d4, [pc, #616]	; 800d588 <G_q+0xb168>
 800d320:	ee27 7b04 	vmul.f64	d7, d7, d4
  b_G_q[2].im = -g * ((((((t8_im * t19_im_tmp + t54_re * t19_re_tmp) * 0.1376 +
 800d324:	ee35 5b07 	vadd.f64	d5, d5, d7
    (t43_re * t8_re + t41_re * t41_im) * 0.0215) + (t43_im * b_t54_im + b_t54_re
 800d328:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800d32c:	443b      	add	r3, r7
 800d32e:	ed93 4b00 	vldr	d4, [r3]
 800d332:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800d336:	443b      	add	r3, r7
 800d338:	ed93 7b00 	vldr	d7, [r3]
 800d33c:	ee24 4b07 	vmul.f64	d4, d4, d7
    * t55_im) * 0.0215) - (t74_re * t72_re + t74_im * t3_im) * 0.1376) + (t60_re
 800d340:	f241 23f0 	movw	r3, #4848	; 0x12f0
 800d344:	443b      	add	r3, r7
 800d346:	ed93 3b00 	vldr	d3, [r3]
 800d34a:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800d34e:	443b      	add	r3, r7
 800d350:	ed93 7b00 	vldr	d7, [r3]
 800d354:	ee23 7b07 	vmul.f64	d7, d3, d7
    (t43_re * t8_re + t41_re * t41_im) * 0.0215) + (t43_im * b_t54_im + b_t54_re
 800d358:	ee34 7b07 	vadd.f64	d7, d4, d7
    * t55_im) * 0.0215) - (t74_re * t72_re + t74_im * t3_im) * 0.1376) + (t60_re
 800d35c:	ed9f 4b8a 	vldr	d4, [pc, #552]	; 800d588 <G_q+0xb168>
 800d360:	ee27 7b04 	vmul.f64	d7, d7, d4
    (t43_re * t8_re + t41_re * t41_im) * 0.0215) + (t43_im * b_t54_im + b_t54_re
 800d364:	ee35 5b07 	vadd.f64	d5, d5, d7
    * t55_im) * 0.0215) - (t74_re * t72_re + t74_im * t3_im) * 0.1376) + (t60_re
 800d368:	f241 22b8 	movw	r2, #4792	; 0x12b8
 800d36c:	443a      	add	r2, r7
 800d36e:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800d372:	ed92 4b00 	vldr	d4, [r2]
 800d376:	ed93 7b00 	vldr	d7, [r3]
 800d37a:	ee24 4b07 	vmul.f64	d4, d4, d7
 800d37e:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800d382:	443b      	add	r3, r7
 800d384:	ed93 3b00 	vldr	d3, [r3]
 800d388:	f241 3310 	movw	r3, #4880	; 0x1310
 800d38c:	443b      	add	r3, r7
 800d38e:	ed93 7b00 	vldr	d7, [r3]
 800d392:	ee23 7b07 	vmul.f64	d7, d3, d7
 800d396:	ee34 7b07 	vadd.f64	d7, d4, d7
 800d39a:	ed9f 4b79 	vldr	d4, [pc, #484]	; 800d580 <G_q+0xb160>
 800d39e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d3a2:	ee35 5b47 	vsub.f64	d5, d5, d7
    * t58_im + t76_re * t23_re) * 1.3164953090834051E-18) - (t13_re * t34_im +
 800d3a6:	f241 2250 	movw	r2, #4688	; 0x1250
 800d3aa:	443a      	add	r2, r7
 800d3ac:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800d3b0:	ed92 4b00 	vldr	d4, [r2]
 800d3b4:	ed93 7b00 	vldr	d7, [r3]
 800d3b8:	ee24 4b07 	vmul.f64	d4, d4, d7
 800d3bc:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800d3c0:	443b      	add	r3, r7
 800d3c2:	ed93 3b00 	vldr	d3, [r3]
 800d3c6:	f241 3330 	movw	r3, #4912	; 0x1330
 800d3ca:	443b      	add	r3, r7
 800d3cc:	ed93 7b00 	vldr	d7, [r3]
 800d3d0:	ee23 7b07 	vmul.f64	d7, d3, d7
 800d3d4:	ee34 7b07 	vadd.f64	d7, d4, d7
 800d3d8:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 800d590 <G_q+0xb170>
 800d3dc:	ee27 7b04 	vmul.f64	d7, d7, d4
    * t55_im) * 0.0215) - (t74_re * t72_re + t74_im * t3_im) * 0.1376) + (t60_re
 800d3e0:	ee35 5b07 	vadd.f64	d5, d5, d7
    * t58_im + t76_re * t23_re) * 1.3164953090834051E-18) - (t13_re * t34_im +
 800d3e4:	f241 3378 	movw	r3, #4984	; 0x1378
 800d3e8:	443b      	add	r3, r7
 800d3ea:	ed93 4b00 	vldr	d4, [r3]
 800d3ee:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800d3f2:	443b      	add	r3, r7
 800d3f4:	ed93 7b00 	vldr	d7, [r3]
 800d3f8:	ee24 4b07 	vmul.f64	d4, d4, d7
    t85_im * t34_re) * 1.3164953090834051E-18);
 800d3fc:	f241 3318 	movw	r3, #4888	; 0x1318
 800d400:	443b      	add	r3, r7
 800d402:	ed93 3b00 	vldr	d3, [r3]
 800d406:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800d40a:	443b      	add	r3, r7
 800d40c:	ed93 7b00 	vldr	d7, [r3]
 800d410:	ee23 7b07 	vmul.f64	d7, d3, d7
    * t58_im + t76_re * t23_re) * 1.3164953090834051E-18) - (t13_re * t34_im +
 800d414:	ee34 7b07 	vadd.f64	d7, d4, d7
    t85_im * t34_re) * 1.3164953090834051E-18);
 800d418:	ed9f 4b5d 	vldr	d4, [pc, #372]	; 800d590 <G_q+0xb170>
 800d41c:	ee27 7b04 	vmul.f64	d7, d7, d4
    * t58_im + t76_re * t23_re) * 1.3164953090834051E-18) - (t13_re * t34_im +
 800d420:	ee35 7b47 	vsub.f64	d7, d5, d7
  b_G_q[2].im = -g * ((((((t8_im * t19_im_tmp + t54_re * t19_re_tmp) * 0.1376 +
 800d424:	4b5c      	ldr	r3, [pc, #368]	; (800d598 <G_q+0xb178>)
 800d426:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d42a:	443a      	add	r2, r7
 800d42c:	4413      	add	r3, r2
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	3320      	adds	r3, #32
 800d432:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d436:	ed83 7b02 	vstr	d7, [r3, #8]
  if (t172.im == 0.0) {
 800d43a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800d43e:	ed93 7b02 	vldr	d7, [r3, #8]
 800d442:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d44a:	d115      	bne.n	800d478 <G_q+0xb058>
    t85_im = t172.re / 2.0;
 800d44c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800d450:	ed93 6b00 	vldr	d6, [r3]
 800d454:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d458:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d45c:	f241 3318 	movw	r3, #4888	; 0x1318
 800d460:	443b      	add	r3, r7
 800d462:	ed83 7b00 	vstr	d7, [r3]
    t41_im = 0.0;
 800d466:	f04f 0300 	mov.w	r3, #0
 800d46a:	f04f 0400 	mov.w	r4, #0
 800d46e:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 800d472:	e9c2 3400 	strd	r3, r4, [r2]
 800d476:	e037      	b.n	800d4e8 <G_q+0xb0c8>
  } else if (t172.re == 0.0) {
 800d478:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800d47c:	ed93 7b00 	vldr	d7, [r3]
 800d480:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d488:	d115      	bne.n	800d4b6 <G_q+0xb096>
    t85_im = 0.0;
 800d48a:	f04f 0300 	mov.w	r3, #0
 800d48e:	f04f 0400 	mov.w	r4, #0
 800d492:	f241 3218 	movw	r2, #4888	; 0x1318
 800d496:	443a      	add	r2, r7
 800d498:	e9c2 3400 	strd	r3, r4, [r2]
    t41_im = t172.im / 2.0;
 800d49c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800d4a0:	ed93 6b02 	vldr	d6, [r3, #8]
 800d4a4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d4a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d4ac:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800d4b0:	ed83 7b00 	vstr	d7, [r3]
 800d4b4:	e018      	b.n	800d4e8 <G_q+0xb0c8>
  } else {
    t85_im = t172.re / 2.0;
 800d4b6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800d4ba:	ed93 6b00 	vldr	d6, [r3]
 800d4be:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d4c2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d4c6:	f241 3318 	movw	r3, #4888	; 0x1318
 800d4ca:	443b      	add	r3, r7
 800d4cc:	ed83 7b00 	vstr	d7, [r3]
    t41_im = t172.im / 2.0;
 800d4d0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800d4d4:	ed93 6b02 	vldr	d6, [r3, #8]
 800d4d8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d4dc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d4e0:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800d4e4:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t173.im == 0.0) {
 800d4e8:	4b2c      	ldr	r3, [pc, #176]	; (800d59c <G_q+0xb17c>)
 800d4ea:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d4ee:	443a      	add	r2, r7
 800d4f0:	4413      	add	r3, r2
 800d4f2:	ed93 7b02 	vldr	d7, [r3, #8]
 800d4f6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d4fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4fe:	d119      	bne.n	800d534 <G_q+0xb114>
    t34_re = t173.re / 2.0;
 800d500:	4b26      	ldr	r3, [pc, #152]	; (800d59c <G_q+0xb17c>)
 800d502:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d506:	443a      	add	r2, r7
 800d508:	4413      	add	r3, r2
 800d50a:	ed93 6b00 	vldr	d6, [r3]
 800d50e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d512:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d516:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800d51a:	443b      	add	r3, r7
 800d51c:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800d520:	f04f 0300 	mov.w	r3, #0
 800d524:	f04f 0400 	mov.w	r4, #0
 800d528:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800d52c:	443a      	add	r2, r7
 800d52e:	e9c2 3400 	strd	r3, r4, [r2]
 800d532:	e055      	b.n	800d5e0 <G_q+0xb1c0>
  } else if (t173.re == 0.0) {
 800d534:	4b19      	ldr	r3, [pc, #100]	; (800d59c <G_q+0xb17c>)
 800d536:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d53a:	443a      	add	r2, r7
 800d53c:	4413      	add	r3, r2
 800d53e:	ed93 7b00 	vldr	d7, [r3]
 800d542:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d54a:	d129      	bne.n	800d5a0 <G_q+0xb180>
    t34_re = 0.0;
 800d54c:	f04f 0300 	mov.w	r3, #0
 800d550:	f04f 0400 	mov.w	r4, #0
 800d554:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800d558:	443a      	add	r2, r7
 800d55a:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t173.im / 2.0;
 800d55e:	4b0f      	ldr	r3, [pc, #60]	; (800d59c <G_q+0xb17c>)
 800d560:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d564:	443a      	add	r2, r7
 800d566:	4413      	add	r3, r2
 800d568:	ed93 6b02 	vldr	d6, [r3, #8]
 800d56c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d570:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d574:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800d578:	443b      	add	r3, r7
 800d57a:	ed83 7b00 	vstr	d7, [r3]
 800d57e:	e02f      	b.n	800d5e0 <G_q+0xb1c0>
 800d580:	75f6fd22 	.word	0x75f6fd22
 800d584:	3fc19ce0 	.word	0x3fc19ce0
 800d588:	9374bc6a 	.word	0x9374bc6a
 800d58c:	3f960418 	.word	0x3f960418
 800d590:	2ba953a1 	.word	0x2ba953a1
 800d594:	3c3848f9 	.word	0x3c3848f9
 800d598:	ffffec34 	.word	0xffffec34
 800d59c:	ffffeeb0 	.word	0xffffeeb0
  } else {
    t34_re = t173.re / 2.0;
 800d5a0:	4bb5      	ldr	r3, [pc, #724]	; (800d878 <G_q+0xb458>)
 800d5a2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d5a6:	443a      	add	r2, r7
 800d5a8:	4413      	add	r3, r2
 800d5aa:	ed93 6b00 	vldr	d6, [r3]
 800d5ae:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d5b2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d5b6:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800d5ba:	443b      	add	r3, r7
 800d5bc:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t173.im / 2.0;
 800d5c0:	4bad      	ldr	r3, [pc, #692]	; (800d878 <G_q+0xb458>)
 800d5c2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d5c6:	443a      	add	r2, r7
 800d5c8:	4413      	add	r3, r2
 800d5ca:	ed93 6b02 	vldr	d6, [r3, #8]
 800d5ce:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d5d2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d5d6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800d5da:	443b      	add	r3, r7
 800d5dc:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re = (t182.re * 0.0 - t182.im * 3.061616997868383E-17) - (t183.re * 0.0 -
 800d5e0:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 800d5e4:	ed93 7b00 	vldr	d7, [r3]
 800d5e8:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 800d868 <G_q+0xb448>
 800d5ec:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d5f0:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 800d5f4:	ed93 7b02 	vldr	d7, [r3, #8]
 800d5f8:	ed9f 5b9d 	vldr	d5, [pc, #628]	; 800d870 <G_q+0xb450>
 800d5fc:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d600:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d604:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 800d608:	ed93 7b00 	vldr	d7, [r3]
 800d60c:	ed9f 5b96 	vldr	d5, [pc, #600]	; 800d868 <G_q+0xb448>
 800d610:	ee27 5b05 	vmul.f64	d5, d7, d5
    t183.im * 3.061616997868383E-17);
 800d614:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 800d618:	ed93 7b02 	vldr	d7, [r3, #8]
 800d61c:	ed9f 4b94 	vldr	d4, [pc, #592]	; 800d870 <G_q+0xb450>
 800d620:	ee27 7b04 	vmul.f64	d7, d7, d4
  t16_re = (t182.re * 0.0 - t182.im * 3.061616997868383E-17) - (t183.re * 0.0 -
 800d624:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d628:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d62c:	f241 3368 	movw	r3, #4968	; 0x1368
 800d630:	443b      	add	r3, r7
 800d632:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t182.re * 3.061616997868383E-17 + t182.im * 0.0) - (t183.re *
 800d636:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 800d63a:	ed93 7b00 	vldr	d7, [r3]
 800d63e:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 800d870 <G_q+0xb450>
 800d642:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d646:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 800d64a:	ed93 7b02 	vldr	d7, [r3, #8]
 800d64e:	ed9f 5b86 	vldr	d5, [pc, #536]	; 800d868 <G_q+0xb448>
 800d652:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d656:	ee36 6b07 	vadd.f64	d6, d6, d7
 800d65a:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 800d65e:	ed93 7b00 	vldr	d7, [r3]
 800d662:	ed9f 5b83 	vldr	d5, [pc, #524]	; 800d870 <G_q+0xb450>
 800d666:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t183.im * 0.0);
 800d66a:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 800d66e:	ed93 7b02 	vldr	d7, [r3, #8]
 800d672:	ed9f 4b7d 	vldr	d4, [pc, #500]	; 800d868 <G_q+0xb448>
 800d676:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d67a:	ee35 7b07 	vadd.f64	d7, d5, d7
  t16_im = (t182.re * 3.061616997868383E-17 + t182.im * 0.0) - (t183.re *
 800d67e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d682:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800d686:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t180.re * 0.0 - t180.im * 0.5) - (t181.re * 0.0 - t181.im * 0.5);
 800d68a:	f507 6371 	add.w	r3, r7, #3856	; 0xf10
 800d68e:	ed93 7b00 	vldr	d7, [r3]
 800d692:	ed9f 6b75 	vldr	d6, [pc, #468]	; 800d868 <G_q+0xb448>
 800d696:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d69a:	f507 6371 	add.w	r3, r7, #3856	; 0xf10
 800d69e:	ed93 7b02 	vldr	d7, [r3, #8]
 800d6a2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d6a6:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d6aa:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d6ae:	f507 6372 	add.w	r3, r7, #3872	; 0xf20
 800d6b2:	ed93 7b00 	vldr	d7, [r3]
 800d6b6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800d868 <G_q+0xb448>
 800d6ba:	ee27 5b05 	vmul.f64	d5, d7, d5
 800d6be:	f507 6372 	add.w	r3, r7, #3872	; 0xf20
 800d6c2:	ed93 7b02 	vldr	d7, [r3, #8]
 800d6c6:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800d6ca:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d6ce:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d6d2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d6d6:	f241 3348 	movw	r3, #4936	; 0x1348
 800d6da:	443b      	add	r3, r7
 800d6dc:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t180.re * 0.5 + t180.im * 0.0) - (t181.re * 0.5 + t181.im * 0.0);
 800d6e0:	f507 6371 	add.w	r3, r7, #3856	; 0xf10
 800d6e4:	ed93 7b00 	vldr	d7, [r3]
 800d6e8:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800d6ec:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d6f0:	f507 6371 	add.w	r3, r7, #3856	; 0xf10
 800d6f4:	ed93 7b02 	vldr	d7, [r3, #8]
 800d6f8:	ed9f 5b5b 	vldr	d5, [pc, #364]	; 800d868 <G_q+0xb448>
 800d6fc:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d700:	ee36 6b07 	vadd.f64	d6, d6, d7
 800d704:	f507 6372 	add.w	r3, r7, #3872	; 0xf20
 800d708:	ed93 7b00 	vldr	d7, [r3]
 800d70c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d710:	ee27 5b05 	vmul.f64	d5, d7, d5
 800d714:	f507 6372 	add.w	r3, r7, #3872	; 0xf20
 800d718:	ed93 7b02 	vldr	d7, [r3, #8]
 800d71c:	ed9f 4b52 	vldr	d4, [pc, #328]	; 800d868 <G_q+0xb448>
 800d720:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d724:	ee35 7b07 	vadd.f64	d7, d5, d7
 800d728:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d72c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800d730:	ed83 7b00 	vstr	d7, [r3]
  if (t178.im == 0.0) {
 800d734:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 800d738:	ed93 7b02 	vldr	d7, [r3, #8]
 800d73c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d744:	d115      	bne.n	800d772 <G_q+0xb352>
    t12_re = t178.re / 2.0;
 800d746:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 800d74a:	ed93 6b00 	vldr	d6, [r3]
 800d74e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d752:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d756:	f241 3388 	movw	r3, #5000	; 0x1388
 800d75a:	443b      	add	r3, r7
 800d75c:	ed83 7b00 	vstr	d7, [r3]
    t12_im = 0.0;
 800d760:	f04f 0300 	mov.w	r3, #0
 800d764:	f04f 0400 	mov.w	r4, #0
 800d768:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800d76c:	e9c2 3400 	strd	r3, r4, [r2]
 800d770:	e037      	b.n	800d7e2 <G_q+0xb3c2>
  } else if (t178.re == 0.0) {
 800d772:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 800d776:	ed93 7b00 	vldr	d7, [r3]
 800d77a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d77e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d782:	d115      	bne.n	800d7b0 <G_q+0xb390>
    t12_re = 0.0;
 800d784:	f04f 0300 	mov.w	r3, #0
 800d788:	f04f 0400 	mov.w	r4, #0
 800d78c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d790:	443a      	add	r2, r7
 800d792:	e9c2 3400 	strd	r3, r4, [r2]
    t12_im = t178.im / 2.0;
 800d796:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 800d79a:	ed93 6b02 	vldr	d6, [r3, #8]
 800d79e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d7a2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d7a6:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800d7aa:	ed83 7b00 	vstr	d7, [r3]
 800d7ae:	e018      	b.n	800d7e2 <G_q+0xb3c2>
  } else {
    t12_re = t178.re / 2.0;
 800d7b0:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 800d7b4:	ed93 6b00 	vldr	d6, [r3]
 800d7b8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d7bc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d7c0:	f241 3388 	movw	r3, #5000	; 0x1388
 800d7c4:	443b      	add	r3, r7
 800d7c6:	ed83 7b00 	vstr	d7, [r3]
    t12_im = t178.im / 2.0;
 800d7ca:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 800d7ce:	ed93 6b02 	vldr	d6, [r3, #8]
 800d7d2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d7d6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d7da:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800d7de:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t179.im == 0.0) {
 800d7e2:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 800d7e6:	ed93 7b02 	vldr	d7, [r3, #8]
 800d7ea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d7ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7f2:	d116      	bne.n	800d822 <G_q+0xb402>
    t13_re = t179.re / 2.0;
 800d7f4:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 800d7f8:	ed93 6b00 	vldr	d6, [r3]
 800d7fc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d800:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d804:	f241 3378 	movw	r3, #4984	; 0x1378
 800d808:	443b      	add	r3, r7
 800d80a:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 800d80e:	f04f 0300 	mov.w	r3, #0
 800d812:	f04f 0400 	mov.w	r4, #0
 800d816:	f241 3270 	movw	r2, #4976	; 0x1370
 800d81a:	443a      	add	r2, r7
 800d81c:	e9c2 3400 	strd	r3, r4, [r2]
 800d820:	e046      	b.n	800d8b0 <G_q+0xb490>
  } else if (t179.re == 0.0) {
 800d822:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 800d826:	ed93 7b00 	vldr	d7, [r3]
 800d82a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d82e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d832:	d123      	bne.n	800d87c <G_q+0xb45c>
    t13_re = 0.0;
 800d834:	f04f 0300 	mov.w	r3, #0
 800d838:	f04f 0400 	mov.w	r4, #0
 800d83c:	f241 3278 	movw	r2, #4984	; 0x1378
 800d840:	443a      	add	r2, r7
 800d842:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t179.im / 2.0;
 800d846:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 800d84a:	ed93 6b02 	vldr	d6, [r3, #8]
 800d84e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d852:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d856:	f241 3370 	movw	r3, #4976	; 0x1370
 800d85a:	443b      	add	r3, r7
 800d85c:	ed83 7b00 	vstr	d7, [r3]
 800d860:	e026      	b.n	800d8b0 <G_q+0xb490>
 800d862:	bf00      	nop
 800d864:	f3af 8000 	nop.w
	...
 800d870:	33145c07 	.word	0x33145c07
 800d874:	3c81a626 	.word	0x3c81a626
 800d878:	ffffeeb0 	.word	0xffffeeb0
  } else {
    t13_re = t179.re / 2.0;
 800d87c:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 800d880:	ed93 6b00 	vldr	d6, [r3]
 800d884:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d888:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d88c:	f241 3378 	movw	r3, #4984	; 0x1378
 800d890:	443b      	add	r3, r7
 800d892:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t179.im / 2.0;
 800d896:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 800d89a:	ed93 6b02 	vldr	d6, [r3, #8]
 800d89e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d8a2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d8a6:	f241 3370 	movw	r3, #4976	; 0x1370
 800d8aa:	443b      	add	r3, r7
 800d8ac:	ed83 7b00 	vstr	d7, [r3]
  }

  t23_re = t176.re * 3.061616997868383E-17 + t177.re * 3.061616997868383E-17;
 800d8b0:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 800d8b4:	ed93 7b00 	vldr	d7, [r3]
 800d8b8:	ed9f 6bd1 	vldr	d6, [pc, #836]	; 800dc00 <G_q+0xb7e0>
 800d8bc:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d8c0:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 800d8c4:	ed93 7b00 	vldr	d7, [r3]
 800d8c8:	ed9f 5bcd 	vldr	d5, [pc, #820]	; 800dc00 <G_q+0xb7e0>
 800d8cc:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d8d0:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d8d4:	f241 3330 	movw	r3, #4912	; 0x1330
 800d8d8:	443b      	add	r3, r7
 800d8da:	ed83 7b00 	vstr	d7, [r3]
  t3_im = t176.im * 3.061616997868383E-17 + t177.im * 3.061616997868383E-17;
 800d8de:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 800d8e2:	ed93 7b02 	vldr	d7, [r3, #8]
 800d8e6:	ed9f 6bc6 	vldr	d6, [pc, #792]	; 800dc00 <G_q+0xb7e0>
 800d8ea:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d8ee:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 800d8f2:	ed93 7b02 	vldr	d7, [r3, #8]
 800d8f6:	ed9f 5bc2 	vldr	d5, [pc, #776]	; 800dc00 <G_q+0xb7e0>
 800d8fa:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d8fe:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d902:	f241 3310 	movw	r3, #4880	; 0x1310
 800d906:	443b      	add	r3, r7
 800d908:	ed83 7b00 	vstr	d7, [r3]
  t12_re = (t12_re + t13_re) + 7.498798913309288E-33;
 800d90c:	f241 3388 	movw	r3, #5000	; 0x1388
 800d910:	443b      	add	r3, r7
 800d912:	ed93 6b00 	vldr	d6, [r3]
 800d916:	f241 3378 	movw	r3, #4984	; 0x1378
 800d91a:	443b      	add	r3, r7
 800d91c:	ed93 7b00 	vldr	d7, [r3]
 800d920:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d924:	ed9f 6bbc 	vldr	d6, [pc, #752]	; 800dc18 <G_q+0xb7f8>
 800d928:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d92c:	f241 3388 	movw	r3, #5000	; 0x1388
 800d930:	443b      	add	r3, r7
 800d932:	ed83 7b00 	vstr	d7, [r3]
  t12_im += t13_im;
 800d936:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800d93a:	ed93 6b00 	vldr	d6, [r3]
 800d93e:	f241 3370 	movw	r3, #4976	; 0x1370
 800d942:	443b      	add	r3, r7
 800d944:	ed93 7b00 	vldr	d7, [r3]
 800d948:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d94c:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800d950:	ed83 7b00 	vstr	d7, [r3]
  t85_im += t34_re;
 800d954:	f241 3318 	movw	r3, #4888	; 0x1318
 800d958:	443b      	add	r3, r7
 800d95a:	ed93 6b00 	vldr	d6, [r3]
 800d95e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800d962:	443b      	add	r3, r7
 800d964:	ed93 7b00 	vldr	d7, [r3]
 800d968:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d96c:	f241 3318 	movw	r3, #4888	; 0x1318
 800d970:	443b      	add	r3, r7
 800d972:	ed83 7b00 	vstr	d7, [r3]
  t41_im += t34_im;
 800d976:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800d97a:	ed93 6b00 	vldr	d6, [r3]
 800d97e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800d982:	443b      	add	r3, r7
 800d984:	ed93 7b00 	vldr	d7, [r3]
 800d988:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d98c:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800d990:	ed83 7b00 	vstr	d7, [r3]
  b_t10_re = (((t174.re * 6.123233995736766E-17 + t175.re *
 800d994:	f507 636d 	add.w	r3, r7, #3792	; 0xed0
 800d998:	ed93 7b00 	vldr	d7, [r3]
 800d99c:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 800dc08 <G_q+0xb7e8>
 800d9a0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d9a4:	f507 636e 	add.w	r3, r7, #3808	; 0xee0
 800d9a8:	ed93 7b00 	vldr	d7, [r3]
 800d9ac:	ed9f 5b96 	vldr	d5, [pc, #600]	; 800dc08 <G_q+0xb7e8>
 800d9b0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d9b4:	ee36 6b07 	vadd.f64	d6, d6, d7
                6.123233995736766E-17) + (t16_re * t20_re - t16_im * t20_im)) +
 800d9b8:	f241 3368 	movw	r3, #4968	; 0x1368
 800d9bc:	443b      	add	r3, r7
 800d9be:	ed93 5b00 	vldr	d5, [r3]
 800d9c2:	f241 3348 	movw	r3, #4936	; 0x1348
 800d9c6:	443b      	add	r3, r7
 800d9c8:	ed93 7b00 	vldr	d7, [r3]
 800d9cc:	ee25 5b07 	vmul.f64	d5, d5, d7
 800d9d0:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800d9d4:	ed93 4b00 	vldr	d4, [r3]
 800d9d8:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800d9dc:	ed93 7b00 	vldr	d7, [r3]
 800d9e0:	ee24 7b07 	vmul.f64	d7, d4, d7
 800d9e4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d9e8:	ee36 6b07 	vadd.f64	d6, d6, d7
              (t23_re * t12_re - t3_im * t12_im)) - 6.123233995736766E-17;
 800d9ec:	f241 3330 	movw	r3, #4912	; 0x1330
 800d9f0:	443b      	add	r3, r7
 800d9f2:	ed93 5b00 	vldr	d5, [r3]
 800d9f6:	f241 3388 	movw	r3, #5000	; 0x1388
 800d9fa:	443b      	add	r3, r7
 800d9fc:	ed93 7b00 	vldr	d7, [r3]
 800da00:	ee25 5b07 	vmul.f64	d5, d5, d7
 800da04:	f241 3310 	movw	r3, #4880	; 0x1310
 800da08:	443b      	add	r3, r7
 800da0a:	ed93 4b00 	vldr	d4, [r3]
 800da0e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800da12:	ed93 7b00 	vldr	d7, [r3]
 800da16:	ee24 7b07 	vmul.f64	d7, d4, d7
 800da1a:	ee35 7b47 	vsub.f64	d7, d5, d7
                6.123233995736766E-17) + (t16_re * t20_re - t16_im * t20_im)) +
 800da1e:	ee36 7b07 	vadd.f64	d7, d6, d7
  b_t10_re = (((t174.re * 6.123233995736766E-17 + t175.re *
 800da22:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800dc08 <G_q+0xb7e8>
 800da26:	ee37 7b46 	vsub.f64	d7, d7, d6
 800da2a:	f241 3338 	movw	r3, #4920	; 0x1338
 800da2e:	443b      	add	r3, r7
 800da30:	ed83 7b00 	vstr	d7, [r3]
  t23_re = ((t174.im * 6.123233995736766E-17 + t175.im * 6.123233995736766E-17)
 800da34:	f507 636d 	add.w	r3, r7, #3792	; 0xed0
 800da38:	ed93 7b02 	vldr	d7, [r3, #8]
 800da3c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800dc08 <G_q+0xb7e8>
 800da40:	ee27 6b06 	vmul.f64	d6, d7, d6
 800da44:	f507 636e 	add.w	r3, r7, #3808	; 0xee0
 800da48:	ed93 7b02 	vldr	d7, [r3, #8]
 800da4c:	ed9f 5b6e 	vldr	d5, [pc, #440]	; 800dc08 <G_q+0xb7e8>
 800da50:	ee27 7b05 	vmul.f64	d7, d7, d5
 800da54:	ee36 6b07 	vadd.f64	d6, d6, d7
            + (t16_re * t20_im + t16_im * t20_re)) + (t23_re * t12_im + t3_im *
 800da58:	f241 3368 	movw	r3, #4968	; 0x1368
 800da5c:	443b      	add	r3, r7
 800da5e:	ed93 5b00 	vldr	d5, [r3]
 800da62:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800da66:	ed93 7b00 	vldr	d7, [r3]
 800da6a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800da6e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800da72:	ed93 4b00 	vldr	d4, [r3]
 800da76:	f241 3348 	movw	r3, #4936	; 0x1348
 800da7a:	443b      	add	r3, r7
 800da7c:	ed93 7b00 	vldr	d7, [r3]
 800da80:	ee24 7b07 	vmul.f64	d7, d4, d7
 800da84:	ee35 7b07 	vadd.f64	d7, d5, d7
 800da88:	ee36 6b07 	vadd.f64	d6, d6, d7
 800da8c:	f241 3330 	movw	r3, #4912	; 0x1330
 800da90:	443b      	add	r3, r7
 800da92:	ed93 5b00 	vldr	d5, [r3]
 800da96:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800da9a:	ed93 7b00 	vldr	d7, [r3]
 800da9e:	ee25 5b07 	vmul.f64	d5, d5, d7
 800daa2:	f241 3310 	movw	r3, #4880	; 0x1310
 800daa6:	443b      	add	r3, r7
 800daa8:	ed93 4b00 	vldr	d4, [r3]
 800daac:	f241 3388 	movw	r3, #5000	; 0x1388
 800dab0:	443b      	add	r3, r7
 800dab2:	ed93 7b00 	vldr	d7, [r3]
 800dab6:	ee24 7b07 	vmul.f64	d7, d4, d7
 800daba:	ee35 7b07 	vadd.f64	d7, d5, d7
  t23_re = ((t174.im * 6.123233995736766E-17 + t175.im * 6.123233995736766E-17)
 800dabe:	ee36 7b07 	vadd.f64	d7, d6, d7
 800dac2:	f241 3330 	movw	r3, #4912	; 0x1330
 800dac6:	443b      	add	r3, r7
 800dac8:	ed83 7b00 	vstr	d7, [r3]
    t12_re);
  if (t186.im == 0.0) {
 800dacc:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800dad0:	ed93 7b02 	vldr	d7, [r3, #8]
 800dad4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dadc:	d116      	bne.n	800db0c <G_q+0xb6ec>
    t12_re = t186.re / 2.0;
 800dade:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800dae2:	ed93 6b00 	vldr	d6, [r3]
 800dae6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800daea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800daee:	f241 3388 	movw	r3, #5000	; 0x1388
 800daf2:	443b      	add	r3, r7
 800daf4:	ed83 7b00 	vstr	d7, [r3]
    t3_im = 0.0;
 800daf8:	f04f 0300 	mov.w	r3, #0
 800dafc:	f04f 0400 	mov.w	r4, #0
 800db00:	f241 3210 	movw	r2, #4880	; 0x1310
 800db04:	443a      	add	r2, r7
 800db06:	e9c2 3400 	strd	r3, r4, [r2]
 800db0a:	e039      	b.n	800db80 <G_q+0xb760>
  } else if (t186.re == 0.0) {
 800db0c:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800db10:	ed93 7b00 	vldr	d7, [r3]
 800db14:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800db18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db1c:	d116      	bne.n	800db4c <G_q+0xb72c>
    t12_re = 0.0;
 800db1e:	f04f 0300 	mov.w	r3, #0
 800db22:	f04f 0400 	mov.w	r4, #0
 800db26:	f241 3288 	movw	r2, #5000	; 0x1388
 800db2a:	443a      	add	r2, r7
 800db2c:	e9c2 3400 	strd	r3, r4, [r2]
    t3_im = t186.im / 2.0;
 800db30:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800db34:	ed93 6b02 	vldr	d6, [r3, #8]
 800db38:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800db3c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800db40:	f241 3310 	movw	r3, #4880	; 0x1310
 800db44:	443b      	add	r3, r7
 800db46:	ed83 7b00 	vstr	d7, [r3]
 800db4a:	e019      	b.n	800db80 <G_q+0xb760>
  } else {
    t12_re = t186.re / 2.0;
 800db4c:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800db50:	ed93 6b00 	vldr	d6, [r3]
 800db54:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800db58:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800db5c:	f241 3388 	movw	r3, #5000	; 0x1388
 800db60:	443b      	add	r3, r7
 800db62:	ed83 7b00 	vstr	d7, [r3]
    t3_im = t186.im / 2.0;
 800db66:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800db6a:	ed93 6b02 	vldr	d6, [r3, #8]
 800db6e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800db72:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800db76:	f241 3310 	movw	r3, #4880	; 0x1310
 800db7a:	443b      	add	r3, r7
 800db7c:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t187.im == 0.0) {
 800db80:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800db84:	ed93 7b02 	vldr	d7, [r3, #8]
 800db88:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800db8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db90:	d116      	bne.n	800dbc0 <G_q+0xb7a0>
    t34_re = t187.re / 2.0;
 800db92:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800db96:	ed93 6b00 	vldr	d6, [r3]
 800db9a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800db9e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800dba2:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800dba6:	443b      	add	r3, r7
 800dba8:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800dbac:	f04f 0300 	mov.w	r3, #0
 800dbb0:	f04f 0400 	mov.w	r4, #0
 800dbb4:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800dbb8:	443a      	add	r2, r7
 800dbba:	e9c2 3400 	strd	r3, r4, [r2]
 800dbbe:	e049      	b.n	800dc54 <G_q+0xb834>
  } else if (t187.re == 0.0) {
 800dbc0:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800dbc4:	ed93 7b00 	vldr	d7, [r3]
 800dbc8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dbcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbd0:	d126      	bne.n	800dc20 <G_q+0xb800>
    t34_re = 0.0;
 800dbd2:	f04f 0300 	mov.w	r3, #0
 800dbd6:	f04f 0400 	mov.w	r4, #0
 800dbda:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800dbde:	443a      	add	r2, r7
 800dbe0:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t187.im / 2.0;
 800dbe4:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800dbe8:	ed93 6b02 	vldr	d6, [r3, #8]
 800dbec:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800dbf0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800dbf4:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800dbf8:	443b      	add	r3, r7
 800dbfa:	ed83 7b00 	vstr	d7, [r3]
 800dbfe:	e029      	b.n	800dc54 <G_q+0xb834>
 800dc00:	33145c07 	.word	0x33145c07
 800dc04:	3c81a626 	.word	0x3c81a626
 800dc08:	33145c07 	.word	0x33145c07
 800dc0c:	3c91a626 	.word	0x3c91a626
	...
 800dc18:	858a5d48 	.word	0x858a5d48
 800dc1c:	394377ce 	.word	0x394377ce
  } else {
    t34_re = t187.re / 2.0;
 800dc20:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800dc24:	ed93 6b00 	vldr	d6, [r3]
 800dc28:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800dc2c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800dc30:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800dc34:	443b      	add	r3, r7
 800dc36:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t187.im / 2.0;
 800dc3a:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800dc3e:	ed93 6b02 	vldr	d6, [r3, #8]
 800dc42:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800dc46:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800dc4a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800dc4e:	443b      	add	r3, r7
 800dc50:	ed83 7b00 	vstr	d7, [r3]
  }

  t12_re += t34_re;
 800dc54:	f241 3388 	movw	r3, #5000	; 0x1388
 800dc58:	443b      	add	r3, r7
 800dc5a:	ed93 6b00 	vldr	d6, [r3]
 800dc5e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800dc62:	443b      	add	r3, r7
 800dc64:	ed93 7b00 	vldr	d7, [r3]
 800dc68:	ee36 7b07 	vadd.f64	d7, d6, d7
 800dc6c:	f241 3388 	movw	r3, #5000	; 0x1388
 800dc70:	443b      	add	r3, r7
 800dc72:	ed83 7b00 	vstr	d7, [r3]
  t3_im += t34_im;
 800dc76:	f241 3310 	movw	r3, #4880	; 0x1310
 800dc7a:	443b      	add	r3, r7
 800dc7c:	ed93 6b00 	vldr	d6, [r3]
 800dc80:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800dc84:	443b      	add	r3, r7
 800dc86:	ed93 7b00 	vldr	d7, [r3]
 800dc8a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800dc8e:	f241 3310 	movw	r3, #4880	; 0x1310
 800dc92:	443b      	add	r3, r7
 800dc94:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t188.re * 0.0 - t188.im * 0.5) - (t189.re * 0.0 - t189.im * 0.5);
 800dc98:	f507 6373 	add.w	r3, r7, #3888	; 0xf30
 800dc9c:	ed93 7b00 	vldr	d7, [r3]
 800dca0:	ed1f 6b25 	vldr	d6, [pc, #-148]	; 800dc10 <G_q+0xb7f0>
 800dca4:	ee27 6b06 	vmul.f64	d6, d7, d6
 800dca8:	f507 6373 	add.w	r3, r7, #3888	; 0xf30
 800dcac:	ed93 7b02 	vldr	d7, [r3, #8]
 800dcb0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800dcb4:	ee27 7b05 	vmul.f64	d7, d7, d5
 800dcb8:	ee36 6b47 	vsub.f64	d6, d6, d7
 800dcbc:	f507 6374 	add.w	r3, r7, #3904	; 0xf40
 800dcc0:	ed93 7b00 	vldr	d7, [r3]
 800dcc4:	ed1f 5b2e 	vldr	d5, [pc, #-184]	; 800dc10 <G_q+0xb7f0>
 800dcc8:	ee27 5b05 	vmul.f64	d5, d7, d5
 800dccc:	f507 6374 	add.w	r3, r7, #3904	; 0xf40
 800dcd0:	ed93 7b02 	vldr	d7, [r3, #8]
 800dcd4:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800dcd8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800dcdc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800dce0:	ee36 7b47 	vsub.f64	d7, d6, d7
 800dce4:	f241 3378 	movw	r3, #4984	; 0x1378
 800dce8:	443b      	add	r3, r7
 800dcea:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t188.re * 0.5 + t188.im * 0.0) - (t189.re * 0.5 + t189.im * 0.0);
 800dcee:	f507 6373 	add.w	r3, r7, #3888	; 0xf30
 800dcf2:	ed93 7b00 	vldr	d7, [r3]
 800dcf6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800dcfa:	ee27 6b06 	vmul.f64	d6, d7, d6
 800dcfe:	f507 6373 	add.w	r3, r7, #3888	; 0xf30
 800dd02:	ed93 7b02 	vldr	d7, [r3, #8]
 800dd06:	ed1f 5b3e 	vldr	d5, [pc, #-248]	; 800dc10 <G_q+0xb7f0>
 800dd0a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800dd0e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800dd12:	f507 6374 	add.w	r3, r7, #3904	; 0xf40
 800dd16:	ed93 7b00 	vldr	d7, [r3]
 800dd1a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800dd1e:	ee27 5b05 	vmul.f64	d5, d7, d5
 800dd22:	f507 6374 	add.w	r3, r7, #3904	; 0xf40
 800dd26:	ed93 7b02 	vldr	d7, [r3, #8]
 800dd2a:	ed1f 4b47 	vldr	d4, [pc, #-284]	; 800dc10 <G_q+0xb7f0>
 800dd2e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800dd32:	ee35 7b07 	vadd.f64	d7, d5, d7
 800dd36:	ee36 7b47 	vsub.f64	d7, d6, d7
 800dd3a:	f241 3370 	movw	r3, #4976	; 0x1370
 800dd3e:	443b      	add	r3, r7
 800dd40:	ed83 7b00 	vstr	d7, [r3]
  if (t192.im == 0.0) {
 800dd44:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800dd48:	ed93 7b02 	vldr	d7, [r3, #8]
 800dd4c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dd50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd54:	d115      	bne.n	800dd82 <G_q+0xb962>
    t16_re = t192.re / 2.0;
 800dd56:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800dd5a:	ed93 6b00 	vldr	d6, [r3]
 800dd5e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800dd62:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800dd66:	f241 3368 	movw	r3, #4968	; 0x1368
 800dd6a:	443b      	add	r3, r7
 800dd6c:	ed83 7b00 	vstr	d7, [r3]
    t16_im = 0.0;
 800dd70:	f04f 0300 	mov.w	r3, #0
 800dd74:	f04f 0400 	mov.w	r4, #0
 800dd78:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800dd7c:	e9c2 3400 	strd	r3, r4, [r2]
 800dd80:	e037      	b.n	800ddf2 <G_q+0xb9d2>
  } else if (t192.re == 0.0) {
 800dd82:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800dd86:	ed93 7b00 	vldr	d7, [r3]
 800dd8a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dd8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd92:	d115      	bne.n	800ddc0 <G_q+0xb9a0>
    t16_re = 0.0;
 800dd94:	f04f 0300 	mov.w	r3, #0
 800dd98:	f04f 0400 	mov.w	r4, #0
 800dd9c:	f241 3268 	movw	r2, #4968	; 0x1368
 800dda0:	443a      	add	r2, r7
 800dda2:	e9c2 3400 	strd	r3, r4, [r2]
    t16_im = t192.im / 2.0;
 800dda6:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800ddaa:	ed93 6b02 	vldr	d6, [r3, #8]
 800ddae:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ddb2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ddb6:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800ddba:	ed83 7b00 	vstr	d7, [r3]
 800ddbe:	e018      	b.n	800ddf2 <G_q+0xb9d2>
  } else {
    t16_re = t192.re / 2.0;
 800ddc0:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800ddc4:	ed93 6b00 	vldr	d6, [r3]
 800ddc8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ddcc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ddd0:	f241 3368 	movw	r3, #4968	; 0x1368
 800ddd4:	443b      	add	r3, r7
 800ddd6:	ed83 7b00 	vstr	d7, [r3]
    t16_im = t192.im / 2.0;
 800ddda:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800ddde:	ed93 6b02 	vldr	d6, [r3, #8]
 800dde2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800dde6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ddea:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800ddee:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t193.im == 0.0) {
 800ddf2:	f507 6376 	add.w	r3, r7, #3936	; 0xf60
 800ddf6:	ed93 7b02 	vldr	d7, [r3, #8]
 800ddfa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ddfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de02:	d116      	bne.n	800de32 <G_q+0xba12>
    t34_re = t193.re / 2.0;
 800de04:	f507 6376 	add.w	r3, r7, #3936	; 0xf60
 800de08:	ed93 6b00 	vldr	d6, [r3]
 800de0c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800de10:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800de14:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800de18:	443b      	add	r3, r7
 800de1a:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800de1e:	f04f 0300 	mov.w	r3, #0
 800de22:	f04f 0400 	mov.w	r4, #0
 800de26:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800de2a:	443a      	add	r2, r7
 800de2c:	e9c2 3400 	strd	r3, r4, [r2]
 800de30:	e039      	b.n	800dea6 <G_q+0xba86>
  } else if (t193.re == 0.0) {
 800de32:	f507 6376 	add.w	r3, r7, #3936	; 0xf60
 800de36:	ed93 7b00 	vldr	d7, [r3]
 800de3a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800de3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de42:	d116      	bne.n	800de72 <G_q+0xba52>
    t34_re = 0.0;
 800de44:	f04f 0300 	mov.w	r3, #0
 800de48:	f04f 0400 	mov.w	r4, #0
 800de4c:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800de50:	443a      	add	r2, r7
 800de52:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t193.im / 2.0;
 800de56:	f507 6376 	add.w	r3, r7, #3936	; 0xf60
 800de5a:	ed93 6b02 	vldr	d6, [r3, #8]
 800de5e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800de62:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800de66:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800de6a:	443b      	add	r3, r7
 800de6c:	ed83 7b00 	vstr	d7, [r3]
 800de70:	e019      	b.n	800dea6 <G_q+0xba86>
  } else {
    t34_re = t193.re / 2.0;
 800de72:	f507 6376 	add.w	r3, r7, #3936	; 0xf60
 800de76:	ed93 6b00 	vldr	d6, [r3]
 800de7a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800de7e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800de82:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800de86:	443b      	add	r3, r7
 800de88:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t193.im / 2.0;
 800de8c:	f507 6376 	add.w	r3, r7, #3936	; 0xf60
 800de90:	ed93 6b02 	vldr	d6, [r3, #8]
 800de94:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800de98:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800de9c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800dea0:	443b      	add	r3, r7
 800dea2:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_re = (t190.re * 0.0 - t190.im * 0.5) - (t191.re * 0.0 - t191.im * 0.5);
 800dea6:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800deaa:	ed93 7b00 	vldr	d7, [r3]
 800deae:	ed1f 6ba8 	vldr	d6, [pc, #-672]	; 800dc10 <G_q+0xb7f0>
 800deb2:	ee27 6b06 	vmul.f64	d6, d7, d6
 800deb6:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800deba:	ed93 7b02 	vldr	d7, [r3, #8]
 800debe:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800dec2:	ee27 7b05 	vmul.f64	d7, d7, d5
 800dec6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800deca:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800dece:	ed93 7b00 	vldr	d7, [r3]
 800ded2:	ed1f 5bb1 	vldr	d5, [pc, #-708]	; 800dc10 <G_q+0xb7f0>
 800ded6:	ee27 5b05 	vmul.f64	d5, d7, d5
 800deda:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800dede:	ed93 7b02 	vldr	d7, [r3, #8]
 800dee2:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800dee6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800deea:	ee35 7b47 	vsub.f64	d7, d5, d7
 800deee:	ee36 7b47 	vsub.f64	d7, d6, d7
 800def2:	f241 3348 	movw	r3, #4936	; 0x1348
 800def6:	443b      	add	r3, r7
 800def8:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t190.re * 0.5 + t190.im * 0.0) - (t191.re * 0.5 + t191.im * 0.0);
 800defc:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800df00:	ed93 7b00 	vldr	d7, [r3]
 800df04:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800df08:	ee27 6b06 	vmul.f64	d6, d7, d6
 800df0c:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800df10:	ed93 7b02 	vldr	d7, [r3, #8]
 800df14:	ed1f 5bc2 	vldr	d5, [pc, #-776]	; 800dc10 <G_q+0xb7f0>
 800df18:	ee27 7b05 	vmul.f64	d7, d7, d5
 800df1c:	ee36 6b07 	vadd.f64	d6, d6, d7
 800df20:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800df24:	ed93 7b00 	vldr	d7, [r3]
 800df28:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800df2c:	ee27 5b05 	vmul.f64	d5, d7, d5
 800df30:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800df34:	ed93 7b02 	vldr	d7, [r3, #8]
 800df38:	ed1f 4bcb 	vldr	d4, [pc, #-812]	; 800dc10 <G_q+0xb7f0>
 800df3c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800df40:	ee35 7b07 	vadd.f64	d7, d5, d7
 800df44:	ee36 7b47 	vsub.f64	d7, d6, d7
 800df48:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800df4c:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t16_re + t34_re) + 7.498798913309288E-33;
 800df50:	f241 3368 	movw	r3, #4968	; 0x1368
 800df54:	443b      	add	r3, r7
 800df56:	ed93 6b00 	vldr	d6, [r3]
 800df5a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800df5e:	443b      	add	r3, r7
 800df60:	ed93 7b00 	vldr	d7, [r3]
 800df64:	ee36 7b07 	vadd.f64	d7, d6, d7
 800df68:	ed1f 6bd5 	vldr	d6, [pc, #-852]	; 800dc18 <G_q+0xb7f8>
 800df6c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800df70:	f241 3368 	movw	r3, #4968	; 0x1368
 800df74:	443b      	add	r3, r7
 800df76:	ed83 7b00 	vstr	d7, [r3]
  t16_im += t34_im;
 800df7a:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800df7e:	ed93 6b00 	vldr	d6, [r3]
 800df82:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800df86:	443b      	add	r3, r7
 800df88:	ed93 7b00 	vldr	d7, [r3]
 800df8c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800df90:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800df94:	ed83 7b00 	vstr	d7, [r3]
  t12_im = (t12_re * t13_re - t3_im * t13_im) - (t20_re * t16_re - t20_im *
 800df98:	f241 3388 	movw	r3, #5000	; 0x1388
 800df9c:	443b      	add	r3, r7
 800df9e:	ed93 6b00 	vldr	d6, [r3]
 800dfa2:	f241 3378 	movw	r3, #4984	; 0x1378
 800dfa6:	443b      	add	r3, r7
 800dfa8:	ed93 7b00 	vldr	d7, [r3]
 800dfac:	ee26 6b07 	vmul.f64	d6, d6, d7
 800dfb0:	f241 3310 	movw	r3, #4880	; 0x1310
 800dfb4:	443b      	add	r3, r7
 800dfb6:	ed93 5b00 	vldr	d5, [r3]
 800dfba:	f241 3370 	movw	r3, #4976	; 0x1370
 800dfbe:	443b      	add	r3, r7
 800dfc0:	ed93 7b00 	vldr	d7, [r3]
 800dfc4:	ee25 7b07 	vmul.f64	d7, d5, d7
 800dfc8:	ee36 6b47 	vsub.f64	d6, d6, d7
 800dfcc:	f241 3348 	movw	r3, #4936	; 0x1348
 800dfd0:	443b      	add	r3, r7
 800dfd2:	ed93 5b00 	vldr	d5, [r3]
 800dfd6:	f241 3368 	movw	r3, #4968	; 0x1368
 800dfda:	443b      	add	r3, r7
 800dfdc:	ed93 7b00 	vldr	d7, [r3]
 800dfe0:	ee25 5b07 	vmul.f64	d5, d5, d7
 800dfe4:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800dfe8:	ed93 4b00 	vldr	d4, [r3]
 800dfec:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800dff0:	ed93 7b00 	vldr	d7, [r3]
 800dff4:	ee24 7b07 	vmul.f64	d7, d4, d7
 800dff8:	ee35 7b47 	vsub.f64	d7, d5, d7
 800dffc:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e000:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800e004:	ed83 7b00 	vstr	d7, [r3]
    t16_im);
  t3_im = (t12_re * t13_im + t3_im * t13_re) - (t20_re * t16_im + t20_im *
 800e008:	f241 3388 	movw	r3, #5000	; 0x1388
 800e00c:	443b      	add	r3, r7
 800e00e:	ed93 6b00 	vldr	d6, [r3]
 800e012:	f241 3370 	movw	r3, #4976	; 0x1370
 800e016:	443b      	add	r3, r7
 800e018:	ed93 7b00 	vldr	d7, [r3]
 800e01c:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e020:	f241 3310 	movw	r3, #4880	; 0x1310
 800e024:	443b      	add	r3, r7
 800e026:	ed93 5b00 	vldr	d5, [r3]
 800e02a:	f241 3378 	movw	r3, #4984	; 0x1378
 800e02e:	443b      	add	r3, r7
 800e030:	ed93 7b00 	vldr	d7, [r3]
 800e034:	ee25 7b07 	vmul.f64	d7, d5, d7
 800e038:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e03c:	f241 3348 	movw	r3, #4936	; 0x1348
 800e040:	443b      	add	r3, r7
 800e042:	ed93 5b00 	vldr	d5, [r3]
 800e046:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800e04a:	ed93 7b00 	vldr	d7, [r3]
 800e04e:	ee25 5b07 	vmul.f64	d5, d5, d7
 800e052:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800e056:	ed93 4b00 	vldr	d4, [r3]
 800e05a:	f241 3368 	movw	r3, #4968	; 0x1368
 800e05e:	443b      	add	r3, r7
 800e060:	ed93 7b00 	vldr	d7, [r3]
 800e064:	ee24 7b07 	vmul.f64	d7, d4, d7
 800e068:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e06c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e070:	f241 3310 	movw	r3, #4880	; 0x1310
 800e074:	443b      	add	r3, r7
 800e076:	ed83 7b00 	vstr	d7, [r3]
    t16_re);
  t34_re = (t184.re * 0.0 - t184.im * 0.5) - (t185.re * 0.0 - t185.im * 0.5);
 800e07a:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800e07e:	ed93 7b00 	vldr	d7, [r3]
 800e082:	ed9f 6bed 	vldr	d6, [pc, #948]	; 800e438 <G_q+0xc018>
 800e086:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e08a:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800e08e:	ed93 7b02 	vldr	d7, [r3, #8]
 800e092:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e096:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e09a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e09e:	4bea      	ldr	r3, [pc, #936]	; (800e448 <G_q+0xc028>)
 800e0a0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e0a4:	443a      	add	r2, r7
 800e0a6:	4413      	add	r3, r2
 800e0a8:	ed93 7b00 	vldr	d7, [r3]
 800e0ac:	ed9f 5be2 	vldr	d5, [pc, #904]	; 800e438 <G_q+0xc018>
 800e0b0:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e0b4:	4be4      	ldr	r3, [pc, #912]	; (800e448 <G_q+0xc028>)
 800e0b6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e0ba:	443a      	add	r2, r7
 800e0bc:	4413      	add	r3, r2
 800e0be:	ed93 7b02 	vldr	d7, [r3, #8]
 800e0c2:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800e0c6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e0ca:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e0ce:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e0d2:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e0d6:	443b      	add	r3, r7
 800e0d8:	ed83 7b00 	vstr	d7, [r3]
  t34_im = (t184.re * 0.5 + t184.im * 0.0) - (t185.re * 0.5 + t185.im * 0.0);
 800e0dc:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800e0e0:	ed93 7b00 	vldr	d7, [r3]
 800e0e4:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800e0e8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e0ec:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800e0f0:	ed93 7b02 	vldr	d7, [r3, #8]
 800e0f4:	ed9f 5bd0 	vldr	d5, [pc, #832]	; 800e438 <G_q+0xc018>
 800e0f8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e0fc:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e100:	4bd1      	ldr	r3, [pc, #836]	; (800e448 <G_q+0xc028>)
 800e102:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e106:	443a      	add	r2, r7
 800e108:	4413      	add	r3, r2
 800e10a:	ed93 7b00 	vldr	d7, [r3]
 800e10e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e112:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e116:	4bcc      	ldr	r3, [pc, #816]	; (800e448 <G_q+0xc028>)
 800e118:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e11c:	443a      	add	r2, r7
 800e11e:	4413      	add	r3, r2
 800e120:	ed93 7b02 	vldr	d7, [r3, #8]
 800e124:	ed9f 4bc4 	vldr	d4, [pc, #784]	; 800e438 <G_q+0xc018>
 800e128:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e12c:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e130:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e134:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e138:	443b      	add	r3, r7
 800e13a:	ed83 7b00 	vstr	d7, [r3]
  b_t54_im = (t194.re * 0.0 - t194.im * 0.5) - (t195.re * 0.0 - t195.im * 0.5);
 800e13e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800e142:	ed93 7b00 	vldr	d7, [r3]
 800e146:	ed9f 6bbc 	vldr	d6, [pc, #752]	; 800e438 <G_q+0xc018>
 800e14a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e14e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800e152:	ed93 7b02 	vldr	d7, [r3, #8]
 800e156:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e15a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e15e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e162:	4bba      	ldr	r3, [pc, #744]	; (800e44c <G_q+0xc02c>)
 800e164:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e168:	443a      	add	r2, r7
 800e16a:	4413      	add	r3, r2
 800e16c:	ed93 7b00 	vldr	d7, [r3]
 800e170:	ed9f 5bb1 	vldr	d5, [pc, #708]	; 800e438 <G_q+0xc018>
 800e174:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e178:	4bb4      	ldr	r3, [pc, #720]	; (800e44c <G_q+0xc02c>)
 800e17a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e17e:	443a      	add	r2, r7
 800e180:	4413      	add	r3, r2
 800e182:	ed93 7b02 	vldr	d7, [r3, #8]
 800e186:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800e18a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e18e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e192:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e196:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800e19a:	443b      	add	r3, r7
 800e19c:	ed83 7b00 	vstr	d7, [r3]
  t43_re = (t194.re * 0.5 + t194.im * 0.0) - (t195.re * 0.5 + t195.im * 0.0);
 800e1a0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800e1a4:	ed93 7b00 	vldr	d7, [r3]
 800e1a8:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800e1ac:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e1b0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800e1b4:	ed93 7b02 	vldr	d7, [r3, #8]
 800e1b8:	ed9f 5b9f 	vldr	d5, [pc, #636]	; 800e438 <G_q+0xc018>
 800e1bc:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e1c0:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e1c4:	4ba1      	ldr	r3, [pc, #644]	; (800e44c <G_q+0xc02c>)
 800e1c6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e1ca:	443a      	add	r2, r7
 800e1cc:	4413      	add	r3, r2
 800e1ce:	ed93 7b00 	vldr	d7, [r3]
 800e1d2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e1d6:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e1da:	4b9c      	ldr	r3, [pc, #624]	; (800e44c <G_q+0xc02c>)
 800e1dc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e1e0:	443a      	add	r2, r7
 800e1e2:	4413      	add	r3, r2
 800e1e4:	ed93 7b02 	vldr	d7, [r3, #8]
 800e1e8:	ed9f 4b93 	vldr	d4, [pc, #588]	; 800e438 <G_q+0xc018>
 800e1ec:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e1f0:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e1f4:	f241 2358 	movw	r3, #4696	; 0x1258
 800e1f8:	443b      	add	r3, r7
 800e1fa:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e1fe:	ed83 7b00 	vstr	d7, [r3]
  t41_re = (t85_im * b_t10_re - t41_im * t23_re) + (t12_im * t34_re - t3_im *
 800e202:	f241 3318 	movw	r3, #4888	; 0x1318
 800e206:	443b      	add	r3, r7
 800e208:	ed93 6b00 	vldr	d6, [r3]
 800e20c:	f241 3338 	movw	r3, #4920	; 0x1338
 800e210:	443b      	add	r3, r7
 800e212:	ed93 7b00 	vldr	d7, [r3]
 800e216:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e21a:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800e21e:	ed93 5b00 	vldr	d5, [r3]
 800e222:	f241 3330 	movw	r3, #4912	; 0x1330
 800e226:	443b      	add	r3, r7
 800e228:	ed93 7b00 	vldr	d7, [r3]
 800e22c:	ee25 7b07 	vmul.f64	d7, d5, d7
 800e230:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e234:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800e238:	ed93 5b00 	vldr	d5, [r3]
 800e23c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e240:	443b      	add	r3, r7
 800e242:	ed93 7b00 	vldr	d7, [r3]
 800e246:	ee25 5b07 	vmul.f64	d5, d5, d7
 800e24a:	f241 3310 	movw	r3, #4880	; 0x1310
 800e24e:	443b      	add	r3, r7
 800e250:	ed93 4b00 	vldr	d4, [r3]
 800e254:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e258:	443b      	add	r3, r7
 800e25a:	ed93 7b00 	vldr	d7, [r3]
 800e25e:	ee24 7b07 	vmul.f64	d7, d4, d7
 800e262:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e266:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e26a:	f241 3308 	movw	r3, #4872	; 0x1308
 800e26e:	443b      	add	r3, r7
 800e270:	ed83 7b00 	vstr	d7, [r3]
    t34_im);
  t41_im = (t85_im * t23_re + t41_im * b_t10_re) + (t12_im * t34_im + t3_im *
 800e274:	f241 3318 	movw	r3, #4888	; 0x1318
 800e278:	443b      	add	r3, r7
 800e27a:	ed93 6b00 	vldr	d6, [r3]
 800e27e:	f241 3330 	movw	r3, #4912	; 0x1330
 800e282:	443b      	add	r3, r7
 800e284:	ed93 7b00 	vldr	d7, [r3]
 800e288:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e28c:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800e290:	ed93 5b00 	vldr	d5, [r3]
 800e294:	f241 3338 	movw	r3, #4920	; 0x1338
 800e298:	443b      	add	r3, r7
 800e29a:	ed93 7b00 	vldr	d7, [r3]
 800e29e:	ee25 7b07 	vmul.f64	d7, d5, d7
 800e2a2:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e2a6:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800e2aa:	ed93 5b00 	vldr	d5, [r3]
 800e2ae:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e2b2:	443b      	add	r3, r7
 800e2b4:	ed93 7b00 	vldr	d7, [r3]
 800e2b8:	ee25 5b07 	vmul.f64	d5, d5, d7
 800e2bc:	f241 3310 	movw	r3, #4880	; 0x1310
 800e2c0:	443b      	add	r3, r7
 800e2c2:	ed93 4b00 	vldr	d4, [r3]
 800e2c6:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e2ca:	443b      	add	r3, r7
 800e2cc:	ed93 7b00 	vldr	d7, [r3]
 800e2d0:	ee24 7b07 	vmul.f64	d7, d4, d7
 800e2d4:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e2d8:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e2dc:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800e2e0:	ed83 7b00 	vstr	d7, [r3]
    t34_re);
  t16_re = (t206.re * 0.0 - t206.im * 3.061616997868383E-17) - (t207.re * 0.0 -
 800e2e4:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 800e2e8:	ed93 7b00 	vldr	d7, [r3]
 800e2ec:	ed9f 6b52 	vldr	d6, [pc, #328]	; 800e438 <G_q+0xc018>
 800e2f0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e2f4:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 800e2f8:	ed93 7b02 	vldr	d7, [r3, #8]
 800e2fc:	ed9f 5b50 	vldr	d5, [pc, #320]	; 800e440 <G_q+0xc020>
 800e300:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e304:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e308:	f507 6304 	add.w	r3, r7, #2112	; 0x840
 800e30c:	ed93 7b00 	vldr	d7, [r3]
 800e310:	ed9f 5b49 	vldr	d5, [pc, #292]	; 800e438 <G_q+0xc018>
 800e314:	ee27 5b05 	vmul.f64	d5, d7, d5
    t207.im * 3.061616997868383E-17);
 800e318:	f507 6304 	add.w	r3, r7, #2112	; 0x840
 800e31c:	ed93 7b02 	vldr	d7, [r3, #8]
 800e320:	ed9f 4b47 	vldr	d4, [pc, #284]	; 800e440 <G_q+0xc020>
 800e324:	ee27 7b04 	vmul.f64	d7, d7, d4
  t16_re = (t206.re * 0.0 - t206.im * 3.061616997868383E-17) - (t207.re * 0.0 -
 800e328:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e32c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e330:	f241 3368 	movw	r3, #4968	; 0x1368
 800e334:	443b      	add	r3, r7
 800e336:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t206.re * 3.061616997868383E-17 + t206.im * 0.0) - (t207.re *
 800e33a:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 800e33e:	ed93 7b00 	vldr	d7, [r3]
 800e342:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 800e440 <G_q+0xc020>
 800e346:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e34a:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 800e34e:	ed93 7b02 	vldr	d7, [r3, #8]
 800e352:	ed9f 5b39 	vldr	d5, [pc, #228]	; 800e438 <G_q+0xc018>
 800e356:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e35a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e35e:	f507 6304 	add.w	r3, r7, #2112	; 0x840
 800e362:	ed93 7b00 	vldr	d7, [r3]
 800e366:	ed9f 5b36 	vldr	d5, [pc, #216]	; 800e440 <G_q+0xc020>
 800e36a:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t207.im * 0.0);
 800e36e:	f507 6304 	add.w	r3, r7, #2112	; 0x840
 800e372:	ed93 7b02 	vldr	d7, [r3, #8]
 800e376:	ed9f 4b30 	vldr	d4, [pc, #192]	; 800e438 <G_q+0xc018>
 800e37a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e37e:	ee35 7b07 	vadd.f64	d7, d5, d7
  t16_im = (t206.re * 3.061616997868383E-17 + t206.im * 0.0) - (t207.re *
 800e382:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e386:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800e38a:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t204.re * 0.0 - t204.im * 0.5) - (t205.re * 0.0 - t205.im * 0.5);
 800e38e:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 800e392:	ed93 7b00 	vldr	d7, [r3]
 800e396:	ed9f 6b28 	vldr	d6, [pc, #160]	; 800e438 <G_q+0xc018>
 800e39a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e39e:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 800e3a2:	ed93 7b02 	vldr	d7, [r3, #8]
 800e3a6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e3aa:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e3ae:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e3b2:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 800e3b6:	ed93 7b00 	vldr	d7, [r3]
 800e3ba:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 800e438 <G_q+0xc018>
 800e3be:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e3c2:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 800e3c6:	ed93 7b02 	vldr	d7, [r3, #8]
 800e3ca:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800e3ce:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e3d2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e3d6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e3da:	f241 3348 	movw	r3, #4936	; 0x1348
 800e3de:	443b      	add	r3, r7
 800e3e0:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t204.re * 0.5 + t204.im * 0.0) - (t205.re * 0.5 + t205.im * 0.0);
 800e3e4:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 800e3e8:	ed93 7b00 	vldr	d7, [r3]
 800e3ec:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800e3f0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e3f4:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 800e3f8:	ed93 7b02 	vldr	d7, [r3, #8]
 800e3fc:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 800e438 <G_q+0xc018>
 800e400:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e404:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e408:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 800e40c:	ed93 7b00 	vldr	d7, [r3]
 800e410:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e414:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e418:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 800e41c:	ed93 7b02 	vldr	d7, [r3, #8]
 800e420:	ed9f 4b05 	vldr	d4, [pc, #20]	; 800e438 <G_q+0xc018>
 800e424:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e428:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e42c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e430:	e00e      	b.n	800e450 <G_q+0xc030>
 800e432:	bf00      	nop
 800e434:	f3af 8000 	nop.w
	...
 800e440:	33145c07 	.word	0x33145c07
 800e444:	3c81a626 	.word	0x3c81a626
 800e448:	ffffeed0 	.word	0xffffeed0
 800e44c:	ffffecd0 	.word	0xffffecd0
 800e450:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800e454:	ed83 7b00 	vstr	d7, [r3]
  if (t202.im == 0.0) {
 800e458:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 800e45c:	ed93 7b02 	vldr	d7, [r3, #8]
 800e460:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e468:	d115      	bne.n	800e496 <G_q+0xc076>
    t12_re = t202.re / 2.0;
 800e46a:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 800e46e:	ed93 6b00 	vldr	d6, [r3]
 800e472:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e476:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e47a:	f241 3388 	movw	r3, #5000	; 0x1388
 800e47e:	443b      	add	r3, r7
 800e480:	ed83 7b00 	vstr	d7, [r3]
    t12_im = 0.0;
 800e484:	f04f 0300 	mov.w	r3, #0
 800e488:	f04f 0400 	mov.w	r4, #0
 800e48c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800e490:	e9c2 3400 	strd	r3, r4, [r2]
 800e494:	e037      	b.n	800e506 <G_q+0xc0e6>
  } else if (t202.re == 0.0) {
 800e496:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 800e49a:	ed93 7b00 	vldr	d7, [r3]
 800e49e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e4a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4a6:	d115      	bne.n	800e4d4 <G_q+0xc0b4>
    t12_re = 0.0;
 800e4a8:	f04f 0300 	mov.w	r3, #0
 800e4ac:	f04f 0400 	mov.w	r4, #0
 800e4b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e4b4:	443a      	add	r2, r7
 800e4b6:	e9c2 3400 	strd	r3, r4, [r2]
    t12_im = t202.im / 2.0;
 800e4ba:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 800e4be:	ed93 6b02 	vldr	d6, [r3, #8]
 800e4c2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e4c6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e4ca:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800e4ce:	ed83 7b00 	vstr	d7, [r3]
 800e4d2:	e018      	b.n	800e506 <G_q+0xc0e6>
  } else {
    t12_re = t202.re / 2.0;
 800e4d4:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 800e4d8:	ed93 6b00 	vldr	d6, [r3]
 800e4dc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e4e0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e4e4:	f241 3388 	movw	r3, #5000	; 0x1388
 800e4e8:	443b      	add	r3, r7
 800e4ea:	ed83 7b00 	vstr	d7, [r3]
    t12_im = t202.im / 2.0;
 800e4ee:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 800e4f2:	ed93 6b02 	vldr	d6, [r3, #8]
 800e4f6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e4fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e4fe:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800e502:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t203.im == 0.0) {
 800e506:	f507 637a 	add.w	r3, r7, #4000	; 0xfa0
 800e50a:	ed93 7b02 	vldr	d7, [r3, #8]
 800e50e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e516:	d116      	bne.n	800e546 <G_q+0xc126>
    t34_re = t203.re / 2.0;
 800e518:	f507 637a 	add.w	r3, r7, #4000	; 0xfa0
 800e51c:	ed93 6b00 	vldr	d6, [r3]
 800e520:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e524:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e528:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e52c:	443b      	add	r3, r7
 800e52e:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800e532:	f04f 0300 	mov.w	r3, #0
 800e536:	f04f 0400 	mov.w	r4, #0
 800e53a:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800e53e:	443a      	add	r2, r7
 800e540:	e9c2 3400 	strd	r3, r4, [r2]
 800e544:	e039      	b.n	800e5ba <G_q+0xc19a>
  } else if (t203.re == 0.0) {
 800e546:	f507 637a 	add.w	r3, r7, #4000	; 0xfa0
 800e54a:	ed93 7b00 	vldr	d7, [r3]
 800e54e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e556:	d116      	bne.n	800e586 <G_q+0xc166>
    t34_re = 0.0;
 800e558:	f04f 0300 	mov.w	r3, #0
 800e55c:	f04f 0400 	mov.w	r4, #0
 800e560:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800e564:	443a      	add	r2, r7
 800e566:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t203.im / 2.0;
 800e56a:	f507 637a 	add.w	r3, r7, #4000	; 0xfa0
 800e56e:	ed93 6b02 	vldr	d6, [r3, #8]
 800e572:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e576:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e57a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e57e:	443b      	add	r3, r7
 800e580:	ed83 7b00 	vstr	d7, [r3]
 800e584:	e019      	b.n	800e5ba <G_q+0xc19a>
  } else {
    t34_re = t203.re / 2.0;
 800e586:	f507 637a 	add.w	r3, r7, #4000	; 0xfa0
 800e58a:	ed93 6b00 	vldr	d6, [r3]
 800e58e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e592:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e596:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e59a:	443b      	add	r3, r7
 800e59c:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t203.im / 2.0;
 800e5a0:	f507 637a 	add.w	r3, r7, #4000	; 0xfa0
 800e5a4:	ed93 6b02 	vldr	d6, [r3, #8]
 800e5a8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e5ac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e5b0:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e5b4:	443b      	add	r3, r7
 800e5b6:	ed83 7b00 	vstr	d7, [r3]
  }

  t23_re = t200.re * 3.061616997868383E-17 + t201.re * 3.061616997868383E-17;
 800e5ba:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800e5be:	ed93 7b00 	vldr	d7, [r3]
 800e5c2:	ed9f 6be3 	vldr	d6, [pc, #908]	; 800e950 <G_q+0xc530>
 800e5c6:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e5ca:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800e5ce:	ed93 7b00 	vldr	d7, [r3]
 800e5d2:	ed9f 5bdf 	vldr	d5, [pc, #892]	; 800e950 <G_q+0xc530>
 800e5d6:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e5da:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e5de:	f241 3330 	movw	r3, #4912	; 0x1330
 800e5e2:	443b      	add	r3, r7
 800e5e4:	ed83 7b00 	vstr	d7, [r3]
  t3_im = t200.im * 3.061616997868383E-17 + t201.im * 3.061616997868383E-17;
 800e5e8:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800e5ec:	ed93 7b02 	vldr	d7, [r3, #8]
 800e5f0:	ed9f 6bd7 	vldr	d6, [pc, #860]	; 800e950 <G_q+0xc530>
 800e5f4:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e5f8:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800e5fc:	ed93 7b02 	vldr	d7, [r3, #8]
 800e600:	ed9f 5bd3 	vldr	d5, [pc, #844]	; 800e950 <G_q+0xc530>
 800e604:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e608:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e60c:	f241 3310 	movw	r3, #4880	; 0x1310
 800e610:	443b      	add	r3, r7
 800e612:	ed83 7b00 	vstr	d7, [r3]
  t12_re = (t12_re + t34_re) + 7.498798913309288E-33;
 800e616:	f241 3388 	movw	r3, #5000	; 0x1388
 800e61a:	443b      	add	r3, r7
 800e61c:	ed93 6b00 	vldr	d6, [r3]
 800e620:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e624:	443b      	add	r3, r7
 800e626:	ed93 7b00 	vldr	d7, [r3]
 800e62a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e62e:	ed9f 6bca 	vldr	d6, [pc, #808]	; 800e958 <G_q+0xc538>
 800e632:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e636:	f241 3388 	movw	r3, #5000	; 0x1388
 800e63a:	443b      	add	r3, r7
 800e63c:	ed83 7b00 	vstr	d7, [r3]
  t12_im += t34_im;
 800e640:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800e644:	ed93 6b00 	vldr	d6, [r3]
 800e648:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e64c:	443b      	add	r3, r7
 800e64e:	ed93 7b00 	vldr	d7, [r3]
 800e652:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e656:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800e65a:	ed83 7b00 	vstr	d7, [r3]
  t70_im = (t196.re * 0.0 - t196.im * 0.5) - (t197.re * 0.0 - t197.im * 0.5);
 800e65e:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800e662:	ed93 7b00 	vldr	d7, [r3]
 800e666:	ed9f 6bbe 	vldr	d6, [pc, #760]	; 800e960 <G_q+0xc540>
 800e66a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e66e:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800e672:	ed93 7b02 	vldr	d7, [r3, #8]
 800e676:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e67a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e67e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e682:	4bbb      	ldr	r3, [pc, #748]	; (800e970 <G_q+0xc550>)
 800e684:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e688:	443a      	add	r2, r7
 800e68a:	4413      	add	r3, r2
 800e68c:	ed93 7b00 	vldr	d7, [r3]
 800e690:	ed9f 5bb3 	vldr	d5, [pc, #716]	; 800e960 <G_q+0xc540>
 800e694:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e698:	4bb5      	ldr	r3, [pc, #724]	; (800e970 <G_q+0xc550>)
 800e69a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e69e:	443a      	add	r2, r7
 800e6a0:	4413      	add	r3, r2
 800e6a2:	ed93 7b02 	vldr	d7, [r3, #8]
 800e6a6:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800e6aa:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e6ae:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e6b2:	f241 23c8 	movw	r3, #4808	; 0x12c8
 800e6b6:	443b      	add	r3, r7
 800e6b8:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e6bc:	ed83 7b00 	vstr	d7, [r3]
  t43_im = (t196.re * 0.5 + t196.im * 0.0) - (t197.re * 0.5 + t197.im * 0.0);
 800e6c0:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800e6c4:	ed93 7b00 	vldr	d7, [r3]
 800e6c8:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800e6cc:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e6d0:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800e6d4:	ed93 7b02 	vldr	d7, [r3, #8]
 800e6d8:	ed9f 5ba1 	vldr	d5, [pc, #644]	; 800e960 <G_q+0xc540>
 800e6dc:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e6e0:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e6e4:	4ba2      	ldr	r3, [pc, #648]	; (800e970 <G_q+0xc550>)
 800e6e6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e6ea:	443a      	add	r2, r7
 800e6ec:	4413      	add	r3, r2
 800e6ee:	ed93 7b00 	vldr	d7, [r3]
 800e6f2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e6f6:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e6fa:	4b9d      	ldr	r3, [pc, #628]	; (800e970 <G_q+0xc550>)
 800e6fc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e700:	443a      	add	r2, r7
 800e702:	4413      	add	r3, r2
 800e704:	ed93 7b02 	vldr	d7, [r3, #8]
 800e708:	ed9f 4b95 	vldr	d4, [pc, #596]	; 800e960 <G_q+0xc540>
 800e70c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e710:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e714:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e718:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800e71c:	443b      	add	r3, r7
 800e71e:	ed83 7b00 	vstr	d7, [r3]
  b_t54_re = (((t198.re * 6.123233995736766E-17 + t199.re *
 800e722:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800e726:	ed93 7b00 	vldr	d7, [r3]
 800e72a:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 800e968 <G_q+0xc548>
 800e72e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e732:	f507 6378 	add.w	r3, r7, #3968	; 0xf80
 800e736:	ed93 7b00 	vldr	d7, [r3]
 800e73a:	ed9f 5b8b 	vldr	d5, [pc, #556]	; 800e968 <G_q+0xc548>
 800e73e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e742:	ee36 6b07 	vadd.f64	d6, d6, d7
                6.123233995736766E-17) + (t16_re * t20_re - t16_im * t20_im)) +
 800e746:	f241 3368 	movw	r3, #4968	; 0x1368
 800e74a:	443b      	add	r3, r7
 800e74c:	ed93 5b00 	vldr	d5, [r3]
 800e750:	f241 3348 	movw	r3, #4936	; 0x1348
 800e754:	443b      	add	r3, r7
 800e756:	ed93 7b00 	vldr	d7, [r3]
 800e75a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800e75e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800e762:	ed93 4b00 	vldr	d4, [r3]
 800e766:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800e76a:	ed93 7b00 	vldr	d7, [r3]
 800e76e:	ee24 7b07 	vmul.f64	d7, d4, d7
 800e772:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e776:	ee36 6b07 	vadd.f64	d6, d6, d7
              (t23_re * t12_re - t3_im * t12_im)) - 6.123233995736766E-17;
 800e77a:	f241 3330 	movw	r3, #4912	; 0x1330
 800e77e:	443b      	add	r3, r7
 800e780:	ed93 5b00 	vldr	d5, [r3]
 800e784:	f241 3388 	movw	r3, #5000	; 0x1388
 800e788:	443b      	add	r3, r7
 800e78a:	ed93 7b00 	vldr	d7, [r3]
 800e78e:	ee25 5b07 	vmul.f64	d5, d5, d7
 800e792:	f241 3310 	movw	r3, #4880	; 0x1310
 800e796:	443b      	add	r3, r7
 800e798:	ed93 4b00 	vldr	d4, [r3]
 800e79c:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800e7a0:	ed93 7b00 	vldr	d7, [r3]
 800e7a4:	ee24 7b07 	vmul.f64	d7, d4, d7
 800e7a8:	ee35 7b47 	vsub.f64	d7, d5, d7
                6.123233995736766E-17) + (t16_re * t20_re - t16_im * t20_im)) +
 800e7ac:	ee36 7b07 	vadd.f64	d7, d6, d7
  b_t54_re = (((t198.re * 6.123233995736766E-17 + t199.re *
 800e7b0:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 800e968 <G_q+0xc548>
 800e7b4:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e7b8:	f241 23f0 	movw	r3, #4848	; 0x12f0
 800e7bc:	443b      	add	r3, r7
 800e7be:	ed83 7b00 	vstr	d7, [r3]
  t55_im = ((t198.im * 6.123233995736766E-17 + t199.im * 6.123233995736766E-17)
 800e7c2:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800e7c6:	ed93 7b02 	vldr	d7, [r3, #8]
 800e7ca:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800e968 <G_q+0xc548>
 800e7ce:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e7d2:	f507 6378 	add.w	r3, r7, #3968	; 0xf80
 800e7d6:	ed93 7b02 	vldr	d7, [r3, #8]
 800e7da:	ed9f 5b63 	vldr	d5, [pc, #396]	; 800e968 <G_q+0xc548>
 800e7de:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e7e2:	ee36 6b07 	vadd.f64	d6, d6, d7
            + (t16_re * t20_im + t16_im * t20_re)) + (t23_re * t12_im + t3_im *
 800e7e6:	f241 3368 	movw	r3, #4968	; 0x1368
 800e7ea:	443b      	add	r3, r7
 800e7ec:	ed93 5b00 	vldr	d5, [r3]
 800e7f0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800e7f4:	ed93 7b00 	vldr	d7, [r3]
 800e7f8:	ee25 5b07 	vmul.f64	d5, d5, d7
 800e7fc:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800e800:	ed93 4b00 	vldr	d4, [r3]
 800e804:	f241 3348 	movw	r3, #4936	; 0x1348
 800e808:	443b      	add	r3, r7
 800e80a:	ed93 7b00 	vldr	d7, [r3]
 800e80e:	ee24 7b07 	vmul.f64	d7, d4, d7
 800e812:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e816:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e81a:	f241 3330 	movw	r3, #4912	; 0x1330
 800e81e:	443b      	add	r3, r7
 800e820:	ed93 5b00 	vldr	d5, [r3]
 800e824:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800e828:	ed93 7b00 	vldr	d7, [r3]
 800e82c:	ee25 5b07 	vmul.f64	d5, d5, d7
 800e830:	f241 3310 	movw	r3, #4880	; 0x1310
 800e834:	443b      	add	r3, r7
 800e836:	ed93 4b00 	vldr	d4, [r3]
 800e83a:	f241 3388 	movw	r3, #5000	; 0x1388
 800e83e:	443b      	add	r3, r7
 800e840:	ed93 7b00 	vldr	d7, [r3]
 800e844:	ee24 7b07 	vmul.f64	d7, d4, d7
 800e848:	ee35 7b07 	vadd.f64	d7, d5, d7
  t55_im = ((t198.im * 6.123233995736766E-17 + t199.im * 6.123233995736766E-17)
 800e84c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e850:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800e854:	443b      	add	r3, r7
 800e856:	ed83 7b00 	vstr	d7, [r3]
    t12_re);
  if (t210.im == 0.0) {
 800e85a:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800e85e:	ed93 7b02 	vldr	d7, [r3, #8]
 800e862:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e86a:	d116      	bne.n	800e89a <G_q+0xc47a>
    t20_re = t210.re / 2.0;
 800e86c:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800e870:	ed93 6b00 	vldr	d6, [r3]
 800e874:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e878:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e87c:	f241 3348 	movw	r3, #4936	; 0x1348
 800e880:	443b      	add	r3, r7
 800e882:	ed83 7b00 	vstr	d7, [r3]
    t70_re = 0.0;
 800e886:	f241 22d0 	movw	r2, #4816	; 0x12d0
 800e88a:	443a      	add	r2, r7
 800e88c:	f04f 0300 	mov.w	r3, #0
 800e890:	f04f 0400 	mov.w	r4, #0
 800e894:	e9c2 3400 	strd	r3, r4, [r2]
 800e898:	e039      	b.n	800e90e <G_q+0xc4ee>
  } else if (t210.re == 0.0) {
 800e89a:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800e89e:	ed93 7b00 	vldr	d7, [r3]
 800e8a2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e8a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8aa:	d116      	bne.n	800e8da <G_q+0xc4ba>
    t20_re = 0.0;
 800e8ac:	f04f 0300 	mov.w	r3, #0
 800e8b0:	f04f 0400 	mov.w	r4, #0
 800e8b4:	f241 3248 	movw	r2, #4936	; 0x1348
 800e8b8:	443a      	add	r2, r7
 800e8ba:	e9c2 3400 	strd	r3, r4, [r2]
    t70_re = t210.im / 2.0;
 800e8be:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800e8c2:	ed93 6b02 	vldr	d6, [r3, #8]
 800e8c6:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800e8ca:	443b      	add	r3, r7
 800e8cc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e8d0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e8d4:	ed83 7b00 	vstr	d7, [r3]
 800e8d8:	e019      	b.n	800e90e <G_q+0xc4ee>
  } else {
    t20_re = t210.re / 2.0;
 800e8da:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800e8de:	ed93 6b00 	vldr	d6, [r3]
 800e8e2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e8e6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e8ea:	f241 3348 	movw	r3, #4936	; 0x1348
 800e8ee:	443b      	add	r3, r7
 800e8f0:	ed83 7b00 	vstr	d7, [r3]
    t70_re = t210.im / 2.0;
 800e8f4:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800e8f8:	ed93 6b02 	vldr	d6, [r3, #8]
 800e8fc:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800e900:	443b      	add	r3, r7
 800e902:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e906:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e90a:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t211.im == 0.0) {
 800e90e:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800e912:	ed93 7b02 	vldr	d7, [r3, #8]
 800e916:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e91a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e91e:	d129      	bne.n	800e974 <G_q+0xc554>
    t34_re = t211.re / 2.0;
 800e920:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800e924:	ed93 6b00 	vldr	d6, [r3]
 800e928:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e92c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e930:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e934:	443b      	add	r3, r7
 800e936:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800e93a:	f04f 0300 	mov.w	r3, #0
 800e93e:	f04f 0400 	mov.w	r4, #0
 800e942:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800e946:	443a      	add	r2, r7
 800e948:	e9c2 3400 	strd	r3, r4, [r2]
 800e94c:	e04c      	b.n	800e9e8 <G_q+0xc5c8>
 800e94e:	bf00      	nop
 800e950:	33145c07 	.word	0x33145c07
 800e954:	3c81a626 	.word	0x3c81a626
 800e958:	858a5d48 	.word	0x858a5d48
 800e95c:	394377ce 	.word	0x394377ce
	...
 800e968:	33145c07 	.word	0x33145c07
 800e96c:	3c91a626 	.word	0x3c91a626
 800e970:	ffffeef0 	.word	0xffffeef0
  } else if (t211.re == 0.0) {
 800e974:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800e978:	ed93 7b00 	vldr	d7, [r3]
 800e97c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e984:	d116      	bne.n	800e9b4 <G_q+0xc594>
    t34_re = 0.0;
 800e986:	f04f 0300 	mov.w	r3, #0
 800e98a:	f04f 0400 	mov.w	r4, #0
 800e98e:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800e992:	443a      	add	r2, r7
 800e994:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t211.im / 2.0;
 800e998:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800e99c:	ed93 6b02 	vldr	d6, [r3, #8]
 800e9a0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e9a4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e9a8:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e9ac:	443b      	add	r3, r7
 800e9ae:	ed83 7b00 	vstr	d7, [r3]
 800e9b2:	e019      	b.n	800e9e8 <G_q+0xc5c8>
  } else {
    t34_re = t211.re / 2.0;
 800e9b4:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800e9b8:	ed93 6b00 	vldr	d6, [r3]
 800e9bc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e9c0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e9c4:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e9c8:	443b      	add	r3, r7
 800e9ca:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t211.im / 2.0;
 800e9ce:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800e9d2:	ed93 6b02 	vldr	d6, [r3, #8]
 800e9d6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e9da:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e9de:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e9e2:	443b      	add	r3, r7
 800e9e4:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_re += t34_re;
 800e9e8:	f241 3348 	movw	r3, #4936	; 0x1348
 800e9ec:	443b      	add	r3, r7
 800e9ee:	ed93 6b00 	vldr	d6, [r3]
 800e9f2:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e9f6:	443b      	add	r3, r7
 800e9f8:	ed93 7b00 	vldr	d7, [r3]
 800e9fc:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ea00:	f241 3348 	movw	r3, #4936	; 0x1348
 800ea04:	443b      	add	r3, r7
 800ea06:	ed83 7b00 	vstr	d7, [r3]
  t70_re += t34_im;
 800ea0a:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800ea0e:	443b      	add	r3, r7
 800ea10:	f241 22d0 	movw	r2, #4816	; 0x12d0
 800ea14:	443a      	add	r2, r7
 800ea16:	ed92 6b00 	vldr	d6, [r2]
 800ea1a:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800ea1e:	443a      	add	r2, r7
 800ea20:	ed92 7b00 	vldr	d7, [r2]
 800ea24:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ea28:	ed83 7b00 	vstr	d7, [r3]
  t23_re = (t212.re * 0.0 - t212.im * 0.5) - (t213.re * 0.0 - t213.im * 0.5);
 800ea2c:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 800ea30:	ed93 7b00 	vldr	d7, [r3]
 800ea34:	ed9f 6be0 	vldr	d6, [pc, #896]	; 800edb8 <G_q+0xc998>
 800ea38:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ea3c:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 800ea40:	ed93 7b02 	vldr	d7, [r3, #8]
 800ea44:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ea48:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ea4c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ea50:	f507 637e 	add.w	r3, r7, #4064	; 0xfe0
 800ea54:	ed93 7b00 	vldr	d7, [r3]
 800ea58:	ed9f 5bd7 	vldr	d5, [pc, #860]	; 800edb8 <G_q+0xc998>
 800ea5c:	ee27 5b05 	vmul.f64	d5, d7, d5
 800ea60:	f507 637e 	add.w	r3, r7, #4064	; 0xfe0
 800ea64:	ed93 7b02 	vldr	d7, [r3, #8]
 800ea68:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800ea6c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ea70:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ea74:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ea78:	f241 3330 	movw	r3, #4912	; 0x1330
 800ea7c:	443b      	add	r3, r7
 800ea7e:	ed83 7b00 	vstr	d7, [r3]
  t3_im = (t212.re * 0.5 + t212.im * 0.0) - (t213.re * 0.5 + t213.im * 0.0);
 800ea82:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 800ea86:	ed93 7b00 	vldr	d7, [r3]
 800ea8a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800ea8e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ea92:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 800ea96:	ed93 7b02 	vldr	d7, [r3, #8]
 800ea9a:	ed9f 5bc7 	vldr	d5, [pc, #796]	; 800edb8 <G_q+0xc998>
 800ea9e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800eaa2:	ee36 6b07 	vadd.f64	d6, d6, d7
 800eaa6:	f507 637e 	add.w	r3, r7, #4064	; 0xfe0
 800eaaa:	ed93 7b00 	vldr	d7, [r3]
 800eaae:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800eab2:	ee27 5b05 	vmul.f64	d5, d7, d5
 800eab6:	f507 637e 	add.w	r3, r7, #4064	; 0xfe0
 800eaba:	ed93 7b02 	vldr	d7, [r3, #8]
 800eabe:	ed9f 4bbe 	vldr	d4, [pc, #760]	; 800edb8 <G_q+0xc998>
 800eac2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800eac6:	ee35 7b07 	vadd.f64	d7, d5, d7
 800eaca:	ee36 7b47 	vsub.f64	d7, d6, d7
 800eace:	f241 3310 	movw	r3, #4880	; 0x1310
 800ead2:	443b      	add	r3, r7
 800ead4:	ed83 7b00 	vstr	d7, [r3]
  if (t216.im == 0.0) {
 800ead8:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 800eadc:	ed93 7b02 	vldr	d7, [r3, #8]
 800eae0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800eae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eae8:	d116      	bne.n	800eb18 <G_q+0xc6f8>
    t13_re = t216.re / 2.0;
 800eaea:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 800eaee:	ed93 6b00 	vldr	d6, [r3]
 800eaf2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800eaf6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800eafa:	f241 3378 	movw	r3, #4984	; 0x1378
 800eafe:	443b      	add	r3, r7
 800eb00:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 800eb04:	f04f 0300 	mov.w	r3, #0
 800eb08:	f04f 0400 	mov.w	r4, #0
 800eb0c:	f241 3270 	movw	r2, #4976	; 0x1370
 800eb10:	443a      	add	r2, r7
 800eb12:	e9c2 3400 	strd	r3, r4, [r2]
 800eb16:	e039      	b.n	800eb8c <G_q+0xc76c>
  } else if (t216.re == 0.0) {
 800eb18:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 800eb1c:	ed93 7b00 	vldr	d7, [r3]
 800eb20:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800eb24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb28:	d116      	bne.n	800eb58 <G_q+0xc738>
    t13_re = 0.0;
 800eb2a:	f04f 0300 	mov.w	r3, #0
 800eb2e:	f04f 0400 	mov.w	r4, #0
 800eb32:	f241 3278 	movw	r2, #4984	; 0x1378
 800eb36:	443a      	add	r2, r7
 800eb38:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t216.im / 2.0;
 800eb3c:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 800eb40:	ed93 6b02 	vldr	d6, [r3, #8]
 800eb44:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800eb48:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800eb4c:	f241 3370 	movw	r3, #4976	; 0x1370
 800eb50:	443b      	add	r3, r7
 800eb52:	ed83 7b00 	vstr	d7, [r3]
 800eb56:	e019      	b.n	800eb8c <G_q+0xc76c>
  } else {
    t13_re = t216.re / 2.0;
 800eb58:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 800eb5c:	ed93 6b00 	vldr	d6, [r3]
 800eb60:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800eb64:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800eb68:	f241 3378 	movw	r3, #4984	; 0x1378
 800eb6c:	443b      	add	r3, r7
 800eb6e:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t216.im / 2.0;
 800eb72:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 800eb76:	ed93 6b02 	vldr	d6, [r3, #8]
 800eb7a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800eb7e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800eb82:	f241 3370 	movw	r3, #4976	; 0x1370
 800eb86:	443b      	add	r3, r7
 800eb88:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t217.im == 0.0) {
 800eb8c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800eb90:	ed93 7b02 	vldr	d7, [r3, #8]
 800eb94:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800eb98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb9c:	d116      	bne.n	800ebcc <G_q+0xc7ac>
    t34_re = t217.re / 2.0;
 800eb9e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800eba2:	ed93 6b00 	vldr	d6, [r3]
 800eba6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ebaa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ebae:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800ebb2:	443b      	add	r3, r7
 800ebb4:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800ebb8:	f04f 0300 	mov.w	r3, #0
 800ebbc:	f04f 0400 	mov.w	r4, #0
 800ebc0:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800ebc4:	443a      	add	r2, r7
 800ebc6:	e9c2 3400 	strd	r3, r4, [r2]
 800ebca:	e039      	b.n	800ec40 <G_q+0xc820>
  } else if (t217.re == 0.0) {
 800ebcc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800ebd0:	ed93 7b00 	vldr	d7, [r3]
 800ebd4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ebd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebdc:	d116      	bne.n	800ec0c <G_q+0xc7ec>
    t34_re = 0.0;
 800ebde:	f04f 0300 	mov.w	r3, #0
 800ebe2:	f04f 0400 	mov.w	r4, #0
 800ebe6:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800ebea:	443a      	add	r2, r7
 800ebec:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t217.im / 2.0;
 800ebf0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800ebf4:	ed93 6b02 	vldr	d6, [r3, #8]
 800ebf8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ebfc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ec00:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800ec04:	443b      	add	r3, r7
 800ec06:	ed83 7b00 	vstr	d7, [r3]
 800ec0a:	e019      	b.n	800ec40 <G_q+0xc820>
  } else {
    t34_re = t217.re / 2.0;
 800ec0c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800ec10:	ed93 6b00 	vldr	d6, [r3]
 800ec14:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ec18:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ec1c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800ec20:	443b      	add	r3, r7
 800ec22:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t217.im / 2.0;
 800ec26:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800ec2a:	ed93 6b02 	vldr	d6, [r3, #8]
 800ec2e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ec32:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ec36:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800ec3a:	443b      	add	r3, r7
 800ec3c:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re = (t214.re * 0.0 - t214.im * 0.5) - (t215.re * 0.0 - t215.im * 0.5);
 800ec40:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800ec44:	ed93 7b00 	vldr	d7, [r3]
 800ec48:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 800edb8 <G_q+0xc998>
 800ec4c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ec50:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800ec54:	ed93 7b02 	vldr	d7, [r3, #8]
 800ec58:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ec5c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ec60:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ec64:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800ec68:	ed93 7b00 	vldr	d7, [r3]
 800ec6c:	ed9f 5b52 	vldr	d5, [pc, #328]	; 800edb8 <G_q+0xc998>
 800ec70:	ee27 5b05 	vmul.f64	d5, d7, d5
 800ec74:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800ec78:	ed93 7b02 	vldr	d7, [r3, #8]
 800ec7c:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800ec80:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ec84:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ec88:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ec8c:	f241 3368 	movw	r3, #4968	; 0x1368
 800ec90:	443b      	add	r3, r7
 800ec92:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t214.re * 0.5 + t214.im * 0.0) - (t215.re * 0.5 + t215.im * 0.0);
 800ec96:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800ec9a:	ed93 7b00 	vldr	d7, [r3]
 800ec9e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800eca2:	ee27 6b06 	vmul.f64	d6, d7, d6
 800eca6:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800ecaa:	ed93 7b02 	vldr	d7, [r3, #8]
 800ecae:	ed9f 5b42 	vldr	d5, [pc, #264]	; 800edb8 <G_q+0xc998>
 800ecb2:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ecb6:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ecba:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800ecbe:	ed93 7b00 	vldr	d7, [r3]
 800ecc2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ecc6:	ee27 5b05 	vmul.f64	d5, d7, d5
 800ecca:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800ecce:	ed93 7b02 	vldr	d7, [r3, #8]
 800ecd2:	ed9f 4b39 	vldr	d4, [pc, #228]	; 800edb8 <G_q+0xc998>
 800ecd6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ecda:	ee35 7b07 	vadd.f64	d7, d5, d7
 800ecde:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ece2:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800ece6:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t13_re + t34_re) + 7.498798913309288E-33;
 800ecea:	f241 3378 	movw	r3, #4984	; 0x1378
 800ecee:	443b      	add	r3, r7
 800ecf0:	ed93 6b00 	vldr	d6, [r3]
 800ecf4:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800ecf8:	443b      	add	r3, r7
 800ecfa:	ed93 7b00 	vldr	d7, [r3]
 800ecfe:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ed02:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 800edc0 <G_q+0xc9a0>
 800ed06:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ed0a:	f241 3378 	movw	r3, #4984	; 0x1378
 800ed0e:	443b      	add	r3, r7
 800ed10:	ed83 7b00 	vstr	d7, [r3]
  t13_im += t34_im;
 800ed14:	f241 3370 	movw	r3, #4976	; 0x1370
 800ed18:	443b      	add	r3, r7
 800ed1a:	ed93 6b00 	vldr	d6, [r3]
 800ed1e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800ed22:	443b      	add	r3, r7
 800ed24:	ed93 7b00 	vldr	d7, [r3]
 800ed28:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ed2c:	f241 3370 	movw	r3, #4976	; 0x1370
 800ed30:	443b      	add	r3, r7
 800ed32:	ed83 7b00 	vstr	d7, [r3]
  if (t208.im == 0.0) {
 800ed36:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800ed3a:	ed93 7b02 	vldr	d7, [r3, #8]
 800ed3e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ed42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed46:	d116      	bne.n	800ed76 <G_q+0xc956>
    t74_re = t208.re / 2.0;
 800ed48:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800ed4c:	ed93 6b00 	vldr	d6, [r3]
 800ed50:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800ed54:	443b      	add	r3, r7
 800ed56:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ed5a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ed5e:	ed83 7b00 	vstr	d7, [r3]
    t74_im = 0.0;
 800ed62:	f241 22b0 	movw	r2, #4784	; 0x12b0
 800ed66:	443a      	add	r2, r7
 800ed68:	f04f 0300 	mov.w	r3, #0
 800ed6c:	f04f 0400 	mov.w	r4, #0
 800ed70:	e9c2 3400 	strd	r3, r4, [r2]
 800ed74:	e042      	b.n	800edfc <G_q+0xc9dc>
  } else if (t208.re == 0.0) {
 800ed76:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800ed7a:	ed93 7b00 	vldr	d7, [r3]
 800ed7e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ed82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed86:	d11f      	bne.n	800edc8 <G_q+0xc9a8>
    t74_re = 0.0;
 800ed88:	f241 22b8 	movw	r2, #4792	; 0x12b8
 800ed8c:	443a      	add	r2, r7
 800ed8e:	f04f 0300 	mov.w	r3, #0
 800ed92:	f04f 0400 	mov.w	r4, #0
 800ed96:	e9c2 3400 	strd	r3, r4, [r2]
    t74_im = t208.im / 2.0;
 800ed9a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800ed9e:	ed93 6b02 	vldr	d6, [r3, #8]
 800eda2:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800eda6:	443b      	add	r3, r7
 800eda8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800edac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800edb0:	ed83 7b00 	vstr	d7, [r3]
 800edb4:	e022      	b.n	800edfc <G_q+0xc9dc>
 800edb6:	bf00      	nop
	...
 800edc0:	858a5d48 	.word	0x858a5d48
 800edc4:	394377ce 	.word	0x394377ce
  } else {
    t74_re = t208.re / 2.0;
 800edc8:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800edcc:	ed93 6b00 	vldr	d6, [r3]
 800edd0:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800edd4:	443b      	add	r3, r7
 800edd6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800edda:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800edde:	ed83 7b00 	vstr	d7, [r3]
    t74_im = t208.im / 2.0;
 800ede2:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800ede6:	ed93 6b02 	vldr	d6, [r3, #8]
 800edea:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800edee:	443b      	add	r3, r7
 800edf0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800edf4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800edf8:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t209.im == 0.0) {
 800edfc:	4b25      	ldr	r3, [pc, #148]	; (800ee94 <G_q+0xca74>)
 800edfe:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ee02:	443a      	add	r2, r7
 800ee04:	4413      	add	r3, r2
 800ee06:	ed93 7b02 	vldr	d7, [r3, #8]
 800ee0a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ee0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee12:	d119      	bne.n	800ee48 <G_q+0xca28>
    t34_re = t209.re / 2.0;
 800ee14:	4b1f      	ldr	r3, [pc, #124]	; (800ee94 <G_q+0xca74>)
 800ee16:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ee1a:	443a      	add	r2, r7
 800ee1c:	4413      	add	r3, r2
 800ee1e:	ed93 6b00 	vldr	d6, [r3]
 800ee22:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ee26:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ee2a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800ee2e:	443b      	add	r3, r7
 800ee30:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800ee34:	f04f 0300 	mov.w	r3, #0
 800ee38:	f04f 0400 	mov.w	r4, #0
 800ee3c:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800ee40:	443a      	add	r2, r7
 800ee42:	e9c2 3400 	strd	r3, r4, [r2]
 800ee46:	e047      	b.n	800eed8 <G_q+0xcab8>
  } else if (t209.re == 0.0) {
 800ee48:	4b12      	ldr	r3, [pc, #72]	; (800ee94 <G_q+0xca74>)
 800ee4a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ee4e:	443a      	add	r2, r7
 800ee50:	4413      	add	r3, r2
 800ee52:	ed93 7b00 	vldr	d7, [r3]
 800ee56:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ee5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee5e:	d11b      	bne.n	800ee98 <G_q+0xca78>
    t34_re = 0.0;
 800ee60:	f04f 0300 	mov.w	r3, #0
 800ee64:	f04f 0400 	mov.w	r4, #0
 800ee68:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800ee6c:	443a      	add	r2, r7
 800ee6e:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t209.im / 2.0;
 800ee72:	4b08      	ldr	r3, [pc, #32]	; (800ee94 <G_q+0xca74>)
 800ee74:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ee78:	443a      	add	r2, r7
 800ee7a:	4413      	add	r3, r2
 800ee7c:	ed93 6b02 	vldr	d6, [r3, #8]
 800ee80:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ee84:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ee88:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800ee8c:	443b      	add	r3, r7
 800ee8e:	ed83 7b00 	vstr	d7, [r3]
 800ee92:	e021      	b.n	800eed8 <G_q+0xcab8>
 800ee94:	ffffef10 	.word	0xffffef10
  } else {
    t34_re = t209.re / 2.0;
 800ee98:	4bd7      	ldr	r3, [pc, #860]	; (800f1f8 <G_q+0xcdd8>)
 800ee9a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ee9e:	443a      	add	r2, r7
 800eea0:	4413      	add	r3, r2
 800eea2:	ed93 6b00 	vldr	d6, [r3]
 800eea6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800eeaa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800eeae:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800eeb2:	443b      	add	r3, r7
 800eeb4:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t209.im / 2.0;
 800eeb8:	4bcf      	ldr	r3, [pc, #828]	; (800f1f8 <G_q+0xcdd8>)
 800eeba:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800eebe:	443a      	add	r2, r7
 800eec0:	4413      	add	r3, r2
 800eec2:	ed93 6b02 	vldr	d6, [r3, #8]
 800eec6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800eeca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800eece:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800eed2:	443b      	add	r3, r7
 800eed4:	ed83 7b00 	vstr	d7, [r3]
  }

  t55_re = (t20_re * t23_re - t70_re * t3_im) - (t16_re * t13_re - t16_im *
 800eed8:	f241 3348 	movw	r3, #4936	; 0x1348
 800eedc:	443b      	add	r3, r7
 800eede:	ed93 6b00 	vldr	d6, [r3]
 800eee2:	f241 3330 	movw	r3, #4912	; 0x1330
 800eee6:	443b      	add	r3, r7
 800eee8:	ed93 7b00 	vldr	d7, [r3]
 800eeec:	ee26 6b07 	vmul.f64	d6, d6, d7
 800eef0:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800eef4:	443b      	add	r3, r7
 800eef6:	ed93 5b00 	vldr	d5, [r3]
 800eefa:	f241 3310 	movw	r3, #4880	; 0x1310
 800eefe:	443b      	add	r3, r7
 800ef00:	ed93 7b00 	vldr	d7, [r3]
 800ef04:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ef08:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ef0c:	f241 3368 	movw	r3, #4968	; 0x1368
 800ef10:	443b      	add	r3, r7
 800ef12:	ed93 5b00 	vldr	d5, [r3]
 800ef16:	f241 3378 	movw	r3, #4984	; 0x1378
 800ef1a:	443b      	add	r3, r7
 800ef1c:	ed93 7b00 	vldr	d7, [r3]
 800ef20:	ee25 5b07 	vmul.f64	d5, d5, d7
 800ef24:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800ef28:	ed93 4b00 	vldr	d4, [r3]
 800ef2c:	f241 3370 	movw	r3, #4976	; 0x1370
 800ef30:	443b      	add	r3, r7
 800ef32:	ed93 7b00 	vldr	d7, [r3]
 800ef36:	ee24 7b07 	vmul.f64	d7, d4, d7
 800ef3a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ef3e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ef42:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800ef46:	ed83 7b00 	vstr	d7, [r3]
    t13_im);
  t70_re = (t20_re * t3_im + t70_re * t23_re) - (t16_re * t13_im + t16_im *
 800ef4a:	f241 3348 	movw	r3, #4936	; 0x1348
 800ef4e:	443b      	add	r3, r7
 800ef50:	ed93 6b00 	vldr	d6, [r3]
 800ef54:	f241 3310 	movw	r3, #4880	; 0x1310
 800ef58:	443b      	add	r3, r7
 800ef5a:	ed93 7b00 	vldr	d7, [r3]
 800ef5e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ef62:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800ef66:	443b      	add	r3, r7
 800ef68:	ed93 5b00 	vldr	d5, [r3]
 800ef6c:	f241 3330 	movw	r3, #4912	; 0x1330
 800ef70:	443b      	add	r3, r7
 800ef72:	ed93 7b00 	vldr	d7, [r3]
 800ef76:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ef7a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ef7e:	f241 3368 	movw	r3, #4968	; 0x1368
 800ef82:	443b      	add	r3, r7
 800ef84:	ed93 5b00 	vldr	d5, [r3]
 800ef88:	f241 3370 	movw	r3, #4976	; 0x1370
 800ef8c:	443b      	add	r3, r7
 800ef8e:	ed93 7b00 	vldr	d7, [r3]
 800ef92:	ee25 5b07 	vmul.f64	d5, d5, d7
 800ef96:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800ef9a:	ed93 4b00 	vldr	d4, [r3]
 800ef9e:	f241 3378 	movw	r3, #4984	; 0x1378
 800efa2:	443b      	add	r3, r7
 800efa4:	ed93 7b00 	vldr	d7, [r3]
 800efa8:	ee24 7b07 	vmul.f64	d7, d4, d7
 800efac:	ee35 7b07 	vadd.f64	d7, d5, d7
 800efb0:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800efb4:	443b      	add	r3, r7
 800efb6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800efba:	ed83 7b00 	vstr	d7, [r3]
    t13_re);
  t74_re += t34_re;
 800efbe:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800efc2:	443b      	add	r3, r7
 800efc4:	f241 22b8 	movw	r2, #4792	; 0x12b8
 800efc8:	443a      	add	r2, r7
 800efca:	ed92 6b00 	vldr	d6, [r2]
 800efce:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800efd2:	443a      	add	r2, r7
 800efd4:	ed92 7b00 	vldr	d7, [r2]
 800efd8:	ee36 7b07 	vadd.f64	d7, d6, d7
 800efdc:	ed83 7b00 	vstr	d7, [r3]
  t74_im += t34_im;
 800efe0:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800efe4:	443b      	add	r3, r7
 800efe6:	f241 22b0 	movw	r2, #4784	; 0x12b0
 800efea:	443a      	add	r2, r7
 800efec:	ed92 6b00 	vldr	d6, [r2]
 800eff0:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800eff4:	443a      	add	r2, r7
 800eff6:	ed92 7b00 	vldr	d7, [r2]
 800effa:	ee36 7b07 	vadd.f64	d7, d6, d7
 800effe:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t240.re * 0.0 - t240.im * 3.061616997868383E-17) - (t241.re * 0.0 -
 800f002:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800f006:	ed93 7b00 	vldr	d7, [r3]
 800f00a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800f1e8 <G_q+0xcdc8>
 800f00e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f012:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800f016:	ed93 7b02 	vldr	d7, [r3, #8]
 800f01a:	ed9f 5b75 	vldr	d5, [pc, #468]	; 800f1f0 <G_q+0xcdd0>
 800f01e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f022:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f026:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 800f02a:	ed93 7b00 	vldr	d7, [r3]
 800f02e:	ed9f 5b6e 	vldr	d5, [pc, #440]	; 800f1e8 <G_q+0xcdc8>
 800f032:	ee27 5b05 	vmul.f64	d5, d7, d5
    t241.im * 3.061616997868383E-17);
 800f036:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 800f03a:	ed93 7b02 	vldr	d7, [r3, #8]
 800f03e:	ed9f 4b6c 	vldr	d4, [pc, #432]	; 800f1f0 <G_q+0xcdd0>
 800f042:	ee27 7b04 	vmul.f64	d7, d7, d4
  t13_re = (t240.re * 0.0 - t240.im * 3.061616997868383E-17) - (t241.re * 0.0 -
 800f046:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f04a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f04e:	f241 3378 	movw	r3, #4984	; 0x1378
 800f052:	443b      	add	r3, r7
 800f054:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t240.re * 3.061616997868383E-17 + t240.im * 0.0) - (t241.re *
 800f058:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800f05c:	ed93 7b00 	vldr	d7, [r3]
 800f060:	ed9f 6b63 	vldr	d6, [pc, #396]	; 800f1f0 <G_q+0xcdd0>
 800f064:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f068:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800f06c:	ed93 7b02 	vldr	d7, [r3, #8]
 800f070:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 800f1e8 <G_q+0xcdc8>
 800f074:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f078:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f07c:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 800f080:	ed93 7b00 	vldr	d7, [r3]
 800f084:	ed9f 5b5a 	vldr	d5, [pc, #360]	; 800f1f0 <G_q+0xcdd0>
 800f088:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t241.im * 0.0);
 800f08c:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 800f090:	ed93 7b02 	vldr	d7, [r3, #8]
 800f094:	ed9f 4b54 	vldr	d4, [pc, #336]	; 800f1e8 <G_q+0xcdc8>
 800f098:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f09c:	ee35 7b07 	vadd.f64	d7, d5, d7
  t13_im = (t240.re * 3.061616997868383E-17 + t240.im * 0.0) - (t241.re *
 800f0a0:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f0a4:	f241 3370 	movw	r3, #4976	; 0x1370
 800f0a8:	443b      	add	r3, r7
 800f0aa:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t238.re * 0.0 - t238.im * 0.5) - (t239.re * 0.0 - t239.im * 0.5);
 800f0ae:	f241 0390 	movw	r3, #4240	; 0x1090
 800f0b2:	443b      	add	r3, r7
 800f0b4:	ed93 7b00 	vldr	d7, [r3]
 800f0b8:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 800f1e8 <G_q+0xcdc8>
 800f0bc:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f0c0:	f241 0390 	movw	r3, #4240	; 0x1090
 800f0c4:	443b      	add	r3, r7
 800f0c6:	ed93 7b02 	vldr	d7, [r3, #8]
 800f0ca:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f0ce:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f0d2:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f0d6:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800f0da:	ed93 7b00 	vldr	d7, [r3]
 800f0de:	ed9f 5b42 	vldr	d5, [pc, #264]	; 800f1e8 <G_q+0xcdc8>
 800f0e2:	ee27 5b05 	vmul.f64	d5, d7, d5
 800f0e6:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800f0ea:	ed93 7b02 	vldr	d7, [r3, #8]
 800f0ee:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800f0f2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f0f6:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f0fa:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f0fe:	f241 3368 	movw	r3, #4968	; 0x1368
 800f102:	443b      	add	r3, r7
 800f104:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t238.re * 0.5 + t238.im * 0.0) - (t239.re * 0.5 + t239.im * 0.0);
 800f108:	f241 0390 	movw	r3, #4240	; 0x1090
 800f10c:	443b      	add	r3, r7
 800f10e:	ed93 7b00 	vldr	d7, [r3]
 800f112:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800f116:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f11a:	f241 0390 	movw	r3, #4240	; 0x1090
 800f11e:	443b      	add	r3, r7
 800f120:	ed93 7b02 	vldr	d7, [r3, #8]
 800f124:	ed9f 5b30 	vldr	d5, [pc, #192]	; 800f1e8 <G_q+0xcdc8>
 800f128:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f12c:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f130:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800f134:	ed93 7b00 	vldr	d7, [r3]
 800f138:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f13c:	ee27 5b05 	vmul.f64	d5, d7, d5
 800f140:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800f144:	ed93 7b02 	vldr	d7, [r3, #8]
 800f148:	ed9f 4b27 	vldr	d4, [pc, #156]	; 800f1e8 <G_q+0xcdc8>
 800f14c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f150:	ee35 7b07 	vadd.f64	d7, d5, d7
 800f154:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f158:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800f15c:	ed83 7b00 	vstr	d7, [r3]
  if (t236.im == 0.0) {
 800f160:	f241 0370 	movw	r3, #4208	; 0x1070
 800f164:	443b      	add	r3, r7
 800f166:	ed93 7b02 	vldr	d7, [r3, #8]
 800f16a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f16e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f172:	d116      	bne.n	800f1a2 <G_q+0xcd82>
    t20_re = t236.re / 2.0;
 800f174:	f241 0370 	movw	r3, #4208	; 0x1070
 800f178:	443b      	add	r3, r7
 800f17a:	ed93 6b00 	vldr	d6, [r3]
 800f17e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f182:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f186:	f241 3348 	movw	r3, #4936	; 0x1348
 800f18a:	443b      	add	r3, r7
 800f18c:	ed83 7b00 	vstr	d7, [r3]
    t20_im = 0.0;
 800f190:	f04f 0300 	mov.w	r3, #0
 800f194:	f04f 0400 	mov.w	r4, #0
 800f198:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 800f19c:	e9c2 3400 	strd	r3, r4, [r2]
 800f1a0:	e047      	b.n	800f232 <G_q+0xce12>
  } else if (t236.re == 0.0) {
 800f1a2:	f241 0370 	movw	r3, #4208	; 0x1070
 800f1a6:	443b      	add	r3, r7
 800f1a8:	ed93 7b00 	vldr	d7, [r3]
 800f1ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f1b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1b4:	d122      	bne.n	800f1fc <G_q+0xcddc>
    t20_re = 0.0;
 800f1b6:	f04f 0300 	mov.w	r3, #0
 800f1ba:	f04f 0400 	mov.w	r4, #0
 800f1be:	f241 3248 	movw	r2, #4936	; 0x1348
 800f1c2:	443a      	add	r2, r7
 800f1c4:	e9c2 3400 	strd	r3, r4, [r2]
    t20_im = t236.im / 2.0;
 800f1c8:	f241 0370 	movw	r3, #4208	; 0x1070
 800f1cc:	443b      	add	r3, r7
 800f1ce:	ed93 6b02 	vldr	d6, [r3, #8]
 800f1d2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f1d6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f1da:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800f1de:	ed83 7b00 	vstr	d7, [r3]
 800f1e2:	e026      	b.n	800f232 <G_q+0xce12>
 800f1e4:	f3af 8000 	nop.w
	...
 800f1f0:	33145c07 	.word	0x33145c07
 800f1f4:	3c81a626 	.word	0x3c81a626
 800f1f8:	ffffef10 	.word	0xffffef10
  } else {
    t20_re = t236.re / 2.0;
 800f1fc:	f241 0370 	movw	r3, #4208	; 0x1070
 800f200:	443b      	add	r3, r7
 800f202:	ed93 6b00 	vldr	d6, [r3]
 800f206:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f20a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f20e:	f241 3348 	movw	r3, #4936	; 0x1348
 800f212:	443b      	add	r3, r7
 800f214:	ed83 7b00 	vstr	d7, [r3]
    t20_im = t236.im / 2.0;
 800f218:	f241 0370 	movw	r3, #4208	; 0x1070
 800f21c:	443b      	add	r3, r7
 800f21e:	ed93 6b02 	vldr	d6, [r3, #8]
 800f222:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f226:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f22a:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800f22e:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t237.im == 0.0) {
 800f232:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800f236:	ed93 7b02 	vldr	d7, [r3, #8]
 800f23a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f23e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f242:	d116      	bne.n	800f272 <G_q+0xce52>
    t34_re = t237.re / 2.0;
 800f244:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800f248:	ed93 6b00 	vldr	d6, [r3]
 800f24c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f250:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f254:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800f258:	443b      	add	r3, r7
 800f25a:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800f25e:	f04f 0300 	mov.w	r3, #0
 800f262:	f04f 0400 	mov.w	r4, #0
 800f266:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800f26a:	443a      	add	r2, r7
 800f26c:	e9c2 3400 	strd	r3, r4, [r2]
 800f270:	e039      	b.n	800f2e6 <G_q+0xcec6>
  } else if (t237.re == 0.0) {
 800f272:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800f276:	ed93 7b00 	vldr	d7, [r3]
 800f27a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f27e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f282:	d116      	bne.n	800f2b2 <G_q+0xce92>
    t34_re = 0.0;
 800f284:	f04f 0300 	mov.w	r3, #0
 800f288:	f04f 0400 	mov.w	r4, #0
 800f28c:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800f290:	443a      	add	r2, r7
 800f292:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t237.im / 2.0;
 800f296:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800f29a:	ed93 6b02 	vldr	d6, [r3, #8]
 800f29e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f2a2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f2a6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800f2aa:	443b      	add	r3, r7
 800f2ac:	ed83 7b00 	vstr	d7, [r3]
 800f2b0:	e019      	b.n	800f2e6 <G_q+0xcec6>
  } else {
    t34_re = t237.re / 2.0;
 800f2b2:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800f2b6:	ed93 6b00 	vldr	d6, [r3]
 800f2ba:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f2be:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f2c2:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800f2c6:	443b      	add	r3, r7
 800f2c8:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t237.im / 2.0;
 800f2cc:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800f2d0:	ed93 6b02 	vldr	d6, [r3, #8]
 800f2d4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f2d8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f2dc:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800f2e0:	443b      	add	r3, r7
 800f2e2:	ed83 7b00 	vstr	d7, [r3]
  }

  t23_re = t234.re * 3.061616997868383E-17 + t235.re * 3.061616997868383E-17;
 800f2e6:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 800f2ea:	ed93 7b00 	vldr	d7, [r3]
 800f2ee:	ed9f 6be4 	vldr	d6, [pc, #912]	; 800f680 <G_q+0xd260>
 800f2f2:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f2f6:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 800f2fa:	ed93 7b00 	vldr	d7, [r3]
 800f2fe:	ed9f 5be0 	vldr	d5, [pc, #896]	; 800f680 <G_q+0xd260>
 800f302:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f306:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f30a:	f241 3330 	movw	r3, #4912	; 0x1330
 800f30e:	443b      	add	r3, r7
 800f310:	ed83 7b00 	vstr	d7, [r3]
  t3_im = t234.im * 3.061616997868383E-17 + t235.im * 3.061616997868383E-17;
 800f314:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 800f318:	ed93 7b02 	vldr	d7, [r3, #8]
 800f31c:	ed9f 6bd8 	vldr	d6, [pc, #864]	; 800f680 <G_q+0xd260>
 800f320:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f324:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 800f328:	ed93 7b02 	vldr	d7, [r3, #8]
 800f32c:	ed9f 5bd4 	vldr	d5, [pc, #848]	; 800f680 <G_q+0xd260>
 800f330:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f334:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f338:	f241 3310 	movw	r3, #4880	; 0x1310
 800f33c:	443b      	add	r3, r7
 800f33e:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t20_re + t34_re) + 7.498798913309288E-33;
 800f342:	f241 3348 	movw	r3, #4936	; 0x1348
 800f346:	443b      	add	r3, r7
 800f348:	ed93 6b00 	vldr	d6, [r3]
 800f34c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800f350:	443b      	add	r3, r7
 800f352:	ed93 7b00 	vldr	d7, [r3]
 800f356:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f35a:	ed9f 6bcb 	vldr	d6, [pc, #812]	; 800f688 <G_q+0xd268>
 800f35e:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f362:	f241 3348 	movw	r3, #4936	; 0x1348
 800f366:	443b      	add	r3, r7
 800f368:	ed83 7b00 	vstr	d7, [r3]
  t20_im += t34_im;
 800f36c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800f370:	ed93 6b00 	vldr	d6, [r3]
 800f374:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800f378:	443b      	add	r3, r7
 800f37a:	ed93 7b00 	vldr	d7, [r3]
 800f37e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f382:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800f386:	ed83 7b00 	vstr	d7, [r3]
  t60_re = (t230.re * 0.0 - t230.im * 3.061616997868383E-17) - (t231.re * 0.0 -
 800f38a:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800f38e:	ed93 7b00 	vldr	d7, [r3]
 800f392:	ed9f 6bbf 	vldr	d6, [pc, #764]	; 800f690 <G_q+0xd270>
 800f396:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f39a:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800f39e:	ed93 7b02 	vldr	d7, [r3, #8]
 800f3a2:	ed9f 5bb7 	vldr	d5, [pc, #732]	; 800f680 <G_q+0xd260>
 800f3a6:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f3aa:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f3ae:	4bbc      	ldr	r3, [pc, #752]	; (800f6a0 <G_q+0xd280>)
 800f3b0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800f3b4:	443a      	add	r2, r7
 800f3b6:	4413      	add	r3, r2
 800f3b8:	ed93 7b00 	vldr	d7, [r3]
 800f3bc:	ed9f 5bb4 	vldr	d5, [pc, #720]	; 800f690 <G_q+0xd270>
 800f3c0:	ee27 5b05 	vmul.f64	d5, d7, d5
    t231.im * 3.061616997868383E-17);
 800f3c4:	4bb6      	ldr	r3, [pc, #728]	; (800f6a0 <G_q+0xd280>)
 800f3c6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800f3ca:	443a      	add	r2, r7
 800f3cc:	4413      	add	r3, r2
 800f3ce:	ed93 7b02 	vldr	d7, [r3, #8]
 800f3d2:	ed9f 4bab 	vldr	d4, [pc, #684]	; 800f680 <G_q+0xd260>
 800f3d6:	ee27 7b04 	vmul.f64	d7, d7, d4
  t60_re = (t230.re * 0.0 - t230.im * 3.061616997868383E-17) - (t231.re * 0.0 -
 800f3da:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f3de:	f241 2350 	movw	r3, #4688	; 0x1250
 800f3e2:	443b      	add	r3, r7
 800f3e4:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f3e8:	ed83 7b00 	vstr	d7, [r3]
  t76_re = (t230.re * 3.061616997868383E-17 + t230.im * 0.0) - (t231.re *
 800f3ec:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800f3f0:	ed93 7b00 	vldr	d7, [r3]
 800f3f4:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 800f680 <G_q+0xd260>
 800f3f8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f3fc:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800f400:	ed93 7b02 	vldr	d7, [r3, #8]
 800f404:	ed9f 5ba2 	vldr	d5, [pc, #648]	; 800f690 <G_q+0xd270>
 800f408:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f40c:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f410:	4ba3      	ldr	r3, [pc, #652]	; (800f6a0 <G_q+0xd280>)
 800f412:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800f416:	443a      	add	r2, r7
 800f418:	4413      	add	r3, r2
 800f41a:	ed93 7b00 	vldr	d7, [r3]
 800f41e:	ed9f 5b98 	vldr	d5, [pc, #608]	; 800f680 <G_q+0xd260>
 800f422:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t231.im * 0.0);
 800f426:	4b9e      	ldr	r3, [pc, #632]	; (800f6a0 <G_q+0xd280>)
 800f428:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800f42c:	443a      	add	r2, r7
 800f42e:	4413      	add	r3, r2
 800f430:	ed93 7b02 	vldr	d7, [r3, #8]
 800f434:	ed9f 4b96 	vldr	d4, [pc, #600]	; 800f690 <G_q+0xd270>
 800f438:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f43c:	ee35 7b07 	vadd.f64	d7, d5, d7
  t76_re = (t230.re * 3.061616997868383E-17 + t230.im * 0.0) - (t231.re *
 800f440:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800f444:	443b      	add	r3, r7
 800f446:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f44a:	ed83 7b00 	vstr	d7, [r3]
  t72_re = (((t232.re * 6.123233995736766E-17 + t233.re * 6.123233995736766E-17)
 800f44e:	f241 0350 	movw	r3, #4176	; 0x1050
 800f452:	443b      	add	r3, r7
 800f454:	ed93 7b00 	vldr	d7, [r3]
 800f458:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 800f698 <G_q+0xd278>
 800f45c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f460:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800f464:	ed93 7b00 	vldr	d7, [r3]
 800f468:	ed9f 5b8b 	vldr	d5, [pc, #556]	; 800f698 <G_q+0xd278>
 800f46c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f470:	ee36 6b07 	vadd.f64	d6, d6, d7
             + (t13_re * t16_re - t13_im * t16_im)) + (t23_re * t20_re - t3_im *
 800f474:	f241 3378 	movw	r3, #4984	; 0x1378
 800f478:	443b      	add	r3, r7
 800f47a:	ed93 5b00 	vldr	d5, [r3]
 800f47e:	f241 3368 	movw	r3, #4968	; 0x1368
 800f482:	443b      	add	r3, r7
 800f484:	ed93 7b00 	vldr	d7, [r3]
 800f488:	ee25 5b07 	vmul.f64	d5, d5, d7
 800f48c:	f241 3370 	movw	r3, #4976	; 0x1370
 800f490:	443b      	add	r3, r7
 800f492:	ed93 4b00 	vldr	d4, [r3]
 800f496:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800f49a:	ed93 7b00 	vldr	d7, [r3]
 800f49e:	ee24 7b07 	vmul.f64	d7, d4, d7
 800f4a2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f4a6:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f4aa:	f241 3330 	movw	r3, #4912	; 0x1330
 800f4ae:	443b      	add	r3, r7
 800f4b0:	ed93 5b00 	vldr	d5, [r3]
 800f4b4:	f241 3348 	movw	r3, #4936	; 0x1348
 800f4b8:	443b      	add	r3, r7
 800f4ba:	ed93 7b00 	vldr	d7, [r3]
 800f4be:	ee25 5b07 	vmul.f64	d5, d5, d7
 800f4c2:	f241 3310 	movw	r3, #4880	; 0x1310
 800f4c6:	443b      	add	r3, r7
 800f4c8:	ed93 4b00 	vldr	d4, [r3]
 800f4cc:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800f4d0:	ed93 7b00 	vldr	d7, [r3]
 800f4d4:	ee24 7b07 	vmul.f64	d7, d4, d7
 800f4d8:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f4dc:	ee36 7b07 	vadd.f64	d7, d6, d7
  t72_re = (((t232.re * 6.123233995736766E-17 + t233.re * 6.123233995736766E-17)
 800f4e0:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800f4e4:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800f698 <G_q+0xd278>
 800f4e8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f4ec:	ed83 7b00 	vstr	d7, [r3]
             t20_im)) - 6.123233995736766E-17;
  t23_re = ((t232.im * 6.123233995736766E-17 + t233.im * 6.123233995736766E-17)
 800f4f0:	f241 0350 	movw	r3, #4176	; 0x1050
 800f4f4:	443b      	add	r3, r7
 800f4f6:	ed93 7b02 	vldr	d7, [r3, #8]
 800f4fa:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800f698 <G_q+0xd278>
 800f4fe:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f502:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800f506:	ed93 7b02 	vldr	d7, [r3, #8]
 800f50a:	ed9f 5b63 	vldr	d5, [pc, #396]	; 800f698 <G_q+0xd278>
 800f50e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f512:	ee36 6b07 	vadd.f64	d6, d6, d7
            + (t13_re * t16_im + t13_im * t16_re)) + (t23_re * t20_im + t3_im *
 800f516:	f241 3378 	movw	r3, #4984	; 0x1378
 800f51a:	443b      	add	r3, r7
 800f51c:	ed93 5b00 	vldr	d5, [r3]
 800f520:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800f524:	ed93 7b00 	vldr	d7, [r3]
 800f528:	ee25 5b07 	vmul.f64	d5, d5, d7
 800f52c:	f241 3370 	movw	r3, #4976	; 0x1370
 800f530:	443b      	add	r3, r7
 800f532:	ed93 4b00 	vldr	d4, [r3]
 800f536:	f241 3368 	movw	r3, #4968	; 0x1368
 800f53a:	443b      	add	r3, r7
 800f53c:	ed93 7b00 	vldr	d7, [r3]
 800f540:	ee24 7b07 	vmul.f64	d7, d4, d7
 800f544:	ee35 7b07 	vadd.f64	d7, d5, d7
 800f548:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f54c:	f241 3330 	movw	r3, #4912	; 0x1330
 800f550:	443b      	add	r3, r7
 800f552:	ed93 5b00 	vldr	d5, [r3]
 800f556:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800f55a:	ed93 7b00 	vldr	d7, [r3]
 800f55e:	ee25 5b07 	vmul.f64	d5, d5, d7
 800f562:	f241 3310 	movw	r3, #4880	; 0x1310
 800f566:	443b      	add	r3, r7
 800f568:	ed93 4b00 	vldr	d4, [r3]
 800f56c:	f241 3348 	movw	r3, #4936	; 0x1348
 800f570:	443b      	add	r3, r7
 800f572:	ed93 7b00 	vldr	d7, [r3]
 800f576:	ee24 7b07 	vmul.f64	d7, d4, d7
 800f57a:	ee35 7b07 	vadd.f64	d7, d5, d7
  t23_re = ((t232.im * 6.123233995736766E-17 + t233.im * 6.123233995736766E-17)
 800f57e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f582:	f241 3330 	movw	r3, #4912	; 0x1330
 800f586:	443b      	add	r3, r7
 800f588:	ed83 7b00 	vstr	d7, [r3]
    t20_re);
  if (t220.im == 0.0) {
 800f58c:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800f590:	ed93 7b02 	vldr	d7, [r3, #8]
 800f594:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f59c:	d115      	bne.n	800f5ca <G_q+0xd1aa>
    t12_re = t220.re / 2.0;
 800f59e:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800f5a2:	ed93 6b00 	vldr	d6, [r3]
 800f5a6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f5aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f5ae:	f241 3388 	movw	r3, #5000	; 0x1388
 800f5b2:	443b      	add	r3, r7
 800f5b4:	ed83 7b00 	vstr	d7, [r3]
    t58_im = 0.0;
 800f5b8:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800f5bc:	f04f 0300 	mov.w	r3, #0
 800f5c0:	f04f 0400 	mov.w	r4, #0
 800f5c4:	e9c2 3400 	strd	r3, r4, [r2]
 800f5c8:	e037      	b.n	800f63a <G_q+0xd21a>
  } else if (t220.re == 0.0) {
 800f5ca:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800f5ce:	ed93 7b00 	vldr	d7, [r3]
 800f5d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f5d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5da:	d115      	bne.n	800f608 <G_q+0xd1e8>
    t12_re = 0.0;
 800f5dc:	f04f 0300 	mov.w	r3, #0
 800f5e0:	f04f 0400 	mov.w	r4, #0
 800f5e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800f5e8:	443a      	add	r2, r7
 800f5ea:	e9c2 3400 	strd	r3, r4, [r2]
    t58_im = t220.im / 2.0;
 800f5ee:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800f5f2:	ed93 6b02 	vldr	d6, [r3, #8]
 800f5f6:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800f5fa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f5fe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f602:	ed83 7b00 	vstr	d7, [r3]
 800f606:	e018      	b.n	800f63a <G_q+0xd21a>
  } else {
    t12_re = t220.re / 2.0;
 800f608:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800f60c:	ed93 6b00 	vldr	d6, [r3]
 800f610:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f614:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f618:	f241 3388 	movw	r3, #5000	; 0x1388
 800f61c:	443b      	add	r3, r7
 800f61e:	ed83 7b00 	vstr	d7, [r3]
    t58_im = t220.im / 2.0;
 800f622:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800f626:	ed93 6b02 	vldr	d6, [r3, #8]
 800f62a:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800f62e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f632:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f636:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t221.im == 0.0) {
 800f63a:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800f63e:	ed93 7b02 	vldr	d7, [r3, #8]
 800f642:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f64a:	d12b      	bne.n	800f6a4 <G_q+0xd284>
    t34_re = t221.re / 2.0;
 800f64c:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800f650:	ed93 6b00 	vldr	d6, [r3]
 800f654:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f658:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f65c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800f660:	443b      	add	r3, r7
 800f662:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800f666:	f04f 0300 	mov.w	r3, #0
 800f66a:	f04f 0400 	mov.w	r4, #0
 800f66e:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800f672:	443a      	add	r2, r7
 800f674:	e9c2 3400 	strd	r3, r4, [r2]
 800f678:	e04e      	b.n	800f718 <G_q+0xd2f8>
 800f67a:	bf00      	nop
 800f67c:	f3af 8000 	nop.w
 800f680:	33145c07 	.word	0x33145c07
 800f684:	3c81a626 	.word	0x3c81a626
 800f688:	858a5d48 	.word	0x858a5d48
 800f68c:	394377ce 	.word	0x394377ce
	...
 800f698:	33145c07 	.word	0x33145c07
 800f69c:	3c91a626 	.word	0x3c91a626
 800f6a0:	ffffef50 	.word	0xffffef50
  } else if (t221.re == 0.0) {
 800f6a4:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800f6a8:	ed93 7b00 	vldr	d7, [r3]
 800f6ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f6b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6b4:	d116      	bne.n	800f6e4 <G_q+0xd2c4>
    t34_re = 0.0;
 800f6b6:	f04f 0300 	mov.w	r3, #0
 800f6ba:	f04f 0400 	mov.w	r4, #0
 800f6be:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800f6c2:	443a      	add	r2, r7
 800f6c4:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t221.im / 2.0;
 800f6c8:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800f6cc:	ed93 6b02 	vldr	d6, [r3, #8]
 800f6d0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f6d4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f6d8:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800f6dc:	443b      	add	r3, r7
 800f6de:	ed83 7b00 	vstr	d7, [r3]
 800f6e2:	e019      	b.n	800f718 <G_q+0xd2f8>
  } else {
    t34_re = t221.re / 2.0;
 800f6e4:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800f6e8:	ed93 6b00 	vldr	d6, [r3]
 800f6ec:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f6f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f6f4:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800f6f8:	443b      	add	r3, r7
 800f6fa:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t221.im / 2.0;
 800f6fe:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800f702:	ed93 6b02 	vldr	d6, [r3, #8]
 800f706:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f70a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f70e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800f712:	443b      	add	r3, r7
 800f714:	ed83 7b00 	vstr	d7, [r3]
  }

  t12_re += t34_re;
 800f718:	f241 3388 	movw	r3, #5000	; 0x1388
 800f71c:	443b      	add	r3, r7
 800f71e:	ed93 6b00 	vldr	d6, [r3]
 800f722:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800f726:	443b      	add	r3, r7
 800f728:	ed93 7b00 	vldr	d7, [r3]
 800f72c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f730:	f241 3388 	movw	r3, #5000	; 0x1388
 800f734:	443b      	add	r3, r7
 800f736:	ed83 7b00 	vstr	d7, [r3]
  t58_im += t34_im;
 800f73a:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800f73e:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800f742:	ed92 6b00 	vldr	d6, [r2]
 800f746:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800f74a:	443a      	add	r2, r7
 800f74c:	ed92 7b00 	vldr	d7, [r2]
 800f750:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f754:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t222.re * 0.0 - t222.im * 0.5) - (t223.re * 0.0 - t223.im * 0.5);
 800f758:	f241 0310 	movw	r3, #4112	; 0x1010
 800f75c:	443b      	add	r3, r7
 800f75e:	ed93 7b00 	vldr	d7, [r3]
 800f762:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800f948 <G_q+0xd528>
 800f766:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f76a:	f241 0310 	movw	r3, #4112	; 0x1010
 800f76e:	443b      	add	r3, r7
 800f770:	ed93 7b02 	vldr	d7, [r3, #8]
 800f774:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f778:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f77c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f780:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800f784:	ed93 7b00 	vldr	d7, [r3]
 800f788:	ed9f 5b6f 	vldr	d5, [pc, #444]	; 800f948 <G_q+0xd528>
 800f78c:	ee27 5b05 	vmul.f64	d5, d7, d5
 800f790:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800f794:	ed93 7b02 	vldr	d7, [r3, #8]
 800f798:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800f79c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f7a0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f7a4:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f7a8:	f241 3378 	movw	r3, #4984	; 0x1378
 800f7ac:	443b      	add	r3, r7
 800f7ae:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t222.re * 0.5 + t222.im * 0.0) - (t223.re * 0.5 + t223.im * 0.0);
 800f7b2:	f241 0310 	movw	r3, #4112	; 0x1010
 800f7b6:	443b      	add	r3, r7
 800f7b8:	ed93 7b00 	vldr	d7, [r3]
 800f7bc:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800f7c0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f7c4:	f241 0310 	movw	r3, #4112	; 0x1010
 800f7c8:	443b      	add	r3, r7
 800f7ca:	ed93 7b02 	vldr	d7, [r3, #8]
 800f7ce:	ed9f 5b5e 	vldr	d5, [pc, #376]	; 800f948 <G_q+0xd528>
 800f7d2:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f7d6:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f7da:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800f7de:	ed93 7b00 	vldr	d7, [r3]
 800f7e2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f7e6:	ee27 5b05 	vmul.f64	d5, d7, d5
 800f7ea:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800f7ee:	ed93 7b02 	vldr	d7, [r3, #8]
 800f7f2:	ed9f 4b55 	vldr	d4, [pc, #340]	; 800f948 <G_q+0xd528>
 800f7f6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f7fa:	ee35 7b07 	vadd.f64	d7, d5, d7
 800f7fe:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f802:	f241 3370 	movw	r3, #4976	; 0x1370
 800f806:	443b      	add	r3, r7
 800f808:	ed83 7b00 	vstr	d7, [r3]
  if (t226.im == 0.0) {
 800f80c:	f241 0330 	movw	r3, #4144	; 0x1030
 800f810:	443b      	add	r3, r7
 800f812:	ed93 7b02 	vldr	d7, [r3, #8]
 800f816:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f81a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f81e:	d116      	bne.n	800f84e <G_q+0xd42e>
    t16_re = t226.re / 2.0;
 800f820:	f241 0330 	movw	r3, #4144	; 0x1030
 800f824:	443b      	add	r3, r7
 800f826:	ed93 6b00 	vldr	d6, [r3]
 800f82a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f82e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f832:	f241 3368 	movw	r3, #4968	; 0x1368
 800f836:	443b      	add	r3, r7
 800f838:	ed83 7b00 	vstr	d7, [r3]
    t16_im = 0.0;
 800f83c:	f04f 0300 	mov.w	r3, #0
 800f840:	f04f 0400 	mov.w	r4, #0
 800f844:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800f848:	e9c2 3400 	strd	r3, r4, [r2]
 800f84c:	e03b      	b.n	800f8c6 <G_q+0xd4a6>
  } else if (t226.re == 0.0) {
 800f84e:	f241 0330 	movw	r3, #4144	; 0x1030
 800f852:	443b      	add	r3, r7
 800f854:	ed93 7b00 	vldr	d7, [r3]
 800f858:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f85c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f860:	d116      	bne.n	800f890 <G_q+0xd470>
    t16_re = 0.0;
 800f862:	f04f 0300 	mov.w	r3, #0
 800f866:	f04f 0400 	mov.w	r4, #0
 800f86a:	f241 3268 	movw	r2, #4968	; 0x1368
 800f86e:	443a      	add	r2, r7
 800f870:	e9c2 3400 	strd	r3, r4, [r2]
    t16_im = t226.im / 2.0;
 800f874:	f241 0330 	movw	r3, #4144	; 0x1030
 800f878:	443b      	add	r3, r7
 800f87a:	ed93 6b02 	vldr	d6, [r3, #8]
 800f87e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f882:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f886:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800f88a:	ed83 7b00 	vstr	d7, [r3]
 800f88e:	e01a      	b.n	800f8c6 <G_q+0xd4a6>
  } else {
    t16_re = t226.re / 2.0;
 800f890:	f241 0330 	movw	r3, #4144	; 0x1030
 800f894:	443b      	add	r3, r7
 800f896:	ed93 6b00 	vldr	d6, [r3]
 800f89a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f89e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f8a2:	f241 3368 	movw	r3, #4968	; 0x1368
 800f8a6:	443b      	add	r3, r7
 800f8a8:	ed83 7b00 	vstr	d7, [r3]
    t16_im = t226.im / 2.0;
 800f8ac:	f241 0330 	movw	r3, #4144	; 0x1030
 800f8b0:	443b      	add	r3, r7
 800f8b2:	ed93 6b02 	vldr	d6, [r3, #8]
 800f8b6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f8ba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f8be:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800f8c2:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t227.im == 0.0) {
 800f8c6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f8ca:	ed93 7b02 	vldr	d7, [r3, #8]
 800f8ce:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f8d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8d6:	d116      	bne.n	800f906 <G_q+0xd4e6>
    t34_re = t227.re / 2.0;
 800f8d8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f8dc:	ed93 6b00 	vldr	d6, [r3]
 800f8e0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f8e4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f8e8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800f8ec:	443b      	add	r3, r7
 800f8ee:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800f8f2:	f04f 0300 	mov.w	r3, #0
 800f8f6:	f04f 0400 	mov.w	r4, #0
 800f8fa:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800f8fe:	443a      	add	r2, r7
 800f900:	e9c2 3400 	strd	r3, r4, [r2]
 800f904:	e03e      	b.n	800f984 <G_q+0xd564>
  } else if (t227.re == 0.0) {
 800f906:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f90a:	ed93 7b00 	vldr	d7, [r3]
 800f90e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f916:	d11b      	bne.n	800f950 <G_q+0xd530>
    t34_re = 0.0;
 800f918:	f04f 0300 	mov.w	r3, #0
 800f91c:	f04f 0400 	mov.w	r4, #0
 800f920:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800f924:	443a      	add	r2, r7
 800f926:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t227.im / 2.0;
 800f92a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f92e:	ed93 6b02 	vldr	d6, [r3, #8]
 800f932:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f936:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f93a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800f93e:	443b      	add	r3, r7
 800f940:	ed83 7b00 	vstr	d7, [r3]
 800f944:	e01e      	b.n	800f984 <G_q+0xd564>
 800f946:	bf00      	nop
	...
  } else {
    t34_re = t227.re / 2.0;
 800f950:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f954:	ed93 6b00 	vldr	d6, [r3]
 800f958:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f95c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f960:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800f964:	443b      	add	r3, r7
 800f966:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t227.im / 2.0;
 800f96a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f96e:	ed93 6b02 	vldr	d6, [r3, #8]
 800f972:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f976:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f97a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800f97e:	443b      	add	r3, r7
 800f980:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_re = (t224.re * 0.0 - t224.im * 0.5) - (t225.re * 0.0 - t225.im * 0.5);
 800f984:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800f988:	ed93 7b00 	vldr	d7, [r3]
 800f98c:	ed9f 6bde 	vldr	d6, [pc, #888]	; 800fd08 <G_q+0xd8e8>
 800f990:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f994:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800f998:	ed93 7b02 	vldr	d7, [r3, #8]
 800f99c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f9a0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f9a4:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f9a8:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 800f9ac:	ed93 7b00 	vldr	d7, [r3]
 800f9b0:	ed9f 5bd5 	vldr	d5, [pc, #852]	; 800fd08 <G_q+0xd8e8>
 800f9b4:	ee27 5b05 	vmul.f64	d5, d7, d5
 800f9b8:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 800f9bc:	ed93 7b02 	vldr	d7, [r3, #8]
 800f9c0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800f9c4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f9c8:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f9cc:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f9d0:	f241 3348 	movw	r3, #4936	; 0x1348
 800f9d4:	443b      	add	r3, r7
 800f9d6:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t224.re * 0.5 + t224.im * 0.0) - (t225.re * 0.5 + t225.im * 0.0);
 800f9da:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800f9de:	ed93 7b00 	vldr	d7, [r3]
 800f9e2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800f9e6:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f9ea:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800f9ee:	ed93 7b02 	vldr	d7, [r3, #8]
 800f9f2:	ed9f 5bc5 	vldr	d5, [pc, #788]	; 800fd08 <G_q+0xd8e8>
 800f9f6:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f9fa:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f9fe:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 800fa02:	ed93 7b00 	vldr	d7, [r3]
 800fa06:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800fa0a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800fa0e:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 800fa12:	ed93 7b02 	vldr	d7, [r3, #8]
 800fa16:	ed9f 4bbc 	vldr	d4, [pc, #752]	; 800fd08 <G_q+0xd8e8>
 800fa1a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800fa1e:	ee35 7b07 	vadd.f64	d7, d5, d7
 800fa22:	ee36 7b47 	vsub.f64	d7, d6, d7
 800fa26:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800fa2a:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t16_re + t34_re) + 7.498798913309288E-33;
 800fa2e:	f241 3368 	movw	r3, #4968	; 0x1368
 800fa32:	443b      	add	r3, r7
 800fa34:	ed93 6b00 	vldr	d6, [r3]
 800fa38:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800fa3c:	443b      	add	r3, r7
 800fa3e:	ed93 7b00 	vldr	d7, [r3]
 800fa42:	ee36 7b07 	vadd.f64	d7, d6, d7
 800fa46:	ed9f 6bb2 	vldr	d6, [pc, #712]	; 800fd10 <G_q+0xd8f0>
 800fa4a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800fa4e:	f241 3368 	movw	r3, #4968	; 0x1368
 800fa52:	443b      	add	r3, r7
 800fa54:	ed83 7b00 	vstr	d7, [r3]
  t16_im += t34_im;
 800fa58:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800fa5c:	ed93 6b00 	vldr	d6, [r3]
 800fa60:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800fa64:	443b      	add	r3, r7
 800fa66:	ed93 7b00 	vldr	d7, [r3]
 800fa6a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800fa6e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800fa72:	ed83 7b00 	vstr	d7, [r3]
  t12_im = t228.re * 3.061616997868383E-17 + t229.re * 3.061616997868383E-17;
 800fa76:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800fa7a:	ed93 7b00 	vldr	d7, [r3]
 800fa7e:	ed9f 6ba6 	vldr	d6, [pc, #664]	; 800fd18 <G_q+0xd8f8>
 800fa82:	ee27 6b06 	vmul.f64	d6, d7, d6
 800fa86:	4ba6      	ldr	r3, [pc, #664]	; (800fd20 <G_q+0xd900>)
 800fa88:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800fa8c:	443a      	add	r2, r7
 800fa8e:	4413      	add	r3, r2
 800fa90:	ed93 7b00 	vldr	d7, [r3]
 800fa94:	ed9f 5ba0 	vldr	d5, [pc, #640]	; 800fd18 <G_q+0xd8f8>
 800fa98:	ee27 7b05 	vmul.f64	d7, d7, d5
 800fa9c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800faa0:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800faa4:	ed83 7b00 	vstr	d7, [r3]
  b_t10_re = t228.im * 3.061616997868383E-17 + t229.im * 3.061616997868383E-17;
 800faa8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800faac:	ed93 7b02 	vldr	d7, [r3, #8]
 800fab0:	ed9f 6b99 	vldr	d6, [pc, #612]	; 800fd18 <G_q+0xd8f8>
 800fab4:	ee27 6b06 	vmul.f64	d6, d7, d6
 800fab8:	4b99      	ldr	r3, [pc, #612]	; (800fd20 <G_q+0xd900>)
 800faba:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800fabe:	443a      	add	r2, r7
 800fac0:	4413      	add	r3, r2
 800fac2:	ed93 7b02 	vldr	d7, [r3, #8]
 800fac6:	ed9f 5b94 	vldr	d5, [pc, #592]	; 800fd18 <G_q+0xd8f8>
 800faca:	ee27 7b05 	vmul.f64	d7, d7, d5
 800face:	ee36 7b07 	vadd.f64	d7, d6, d7
 800fad2:	f241 3338 	movw	r3, #4920	; 0x1338
 800fad6:	443b      	add	r3, r7
 800fad8:	ed83 7b00 	vstr	d7, [r3]
  t85_im = (t12_re * t13_re - t58_im * t13_im) - (t20_re * t16_re - t20_im *
 800fadc:	f241 3388 	movw	r3, #5000	; 0x1388
 800fae0:	443b      	add	r3, r7
 800fae2:	ed93 6b00 	vldr	d6, [r3]
 800fae6:	f241 3378 	movw	r3, #4984	; 0x1378
 800faea:	443b      	add	r3, r7
 800faec:	ed93 7b00 	vldr	d7, [r3]
 800faf0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800faf4:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800faf8:	ed93 5b00 	vldr	d5, [r3]
 800fafc:	f241 3370 	movw	r3, #4976	; 0x1370
 800fb00:	443b      	add	r3, r7
 800fb02:	ed93 7b00 	vldr	d7, [r3]
 800fb06:	ee25 7b07 	vmul.f64	d7, d5, d7
 800fb0a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800fb0e:	f241 3348 	movw	r3, #4936	; 0x1348
 800fb12:	443b      	add	r3, r7
 800fb14:	ed93 5b00 	vldr	d5, [r3]
 800fb18:	f241 3368 	movw	r3, #4968	; 0x1368
 800fb1c:	443b      	add	r3, r7
 800fb1e:	ed93 7b00 	vldr	d7, [r3]
 800fb22:	ee25 5b07 	vmul.f64	d5, d5, d7
 800fb26:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800fb2a:	ed93 4b00 	vldr	d4, [r3]
 800fb2e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800fb32:	ed93 7b00 	vldr	d7, [r3]
 800fb36:	ee24 7b07 	vmul.f64	d7, d4, d7
 800fb3a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800fb3e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800fb42:	f241 3318 	movw	r3, #4888	; 0x1318
 800fb46:	443b      	add	r3, r7
 800fb48:	ed83 7b00 	vstr	d7, [r3]
    t16_im);
  t58_im = (t12_re * t13_im + t58_im * t13_re) - (t20_re * t16_im + t20_im *
 800fb4c:	f241 3388 	movw	r3, #5000	; 0x1388
 800fb50:	443b      	add	r3, r7
 800fb52:	ed93 6b00 	vldr	d6, [r3]
 800fb56:	f241 3370 	movw	r3, #4976	; 0x1370
 800fb5a:	443b      	add	r3, r7
 800fb5c:	ed93 7b00 	vldr	d7, [r3]
 800fb60:	ee26 6b07 	vmul.f64	d6, d6, d7
 800fb64:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800fb68:	ed93 5b00 	vldr	d5, [r3]
 800fb6c:	f241 3378 	movw	r3, #4984	; 0x1378
 800fb70:	443b      	add	r3, r7
 800fb72:	ed93 7b00 	vldr	d7, [r3]
 800fb76:	ee25 7b07 	vmul.f64	d7, d5, d7
 800fb7a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800fb7e:	f241 3348 	movw	r3, #4936	; 0x1348
 800fb82:	443b      	add	r3, r7
 800fb84:	ed93 5b00 	vldr	d5, [r3]
 800fb88:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800fb8c:	ed93 7b00 	vldr	d7, [r3]
 800fb90:	ee25 5b07 	vmul.f64	d5, d5, d7
 800fb94:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800fb98:	ed93 4b00 	vldr	d4, [r3]
 800fb9c:	f241 3368 	movw	r3, #4968	; 0x1368
 800fba0:	443b      	add	r3, r7
 800fba2:	ed93 7b00 	vldr	d7, [r3]
 800fba6:	ee24 7b07 	vmul.f64	d7, d4, d7
 800fbaa:	ee35 7b07 	vadd.f64	d7, d5, d7
 800fbae:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800fbb2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800fbb6:	ed83 7b00 	vstr	d7, [r3]
    t16_re);
  if (t218.im == 0.0) {
 800fbba:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800fbbe:	ed93 7b02 	vldr	d7, [r3, #8]
 800fbc2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fbc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbca:	d116      	bne.n	800fbfa <G_q+0xd7da>
    t34_re = t218.re / 2.0;
 800fbcc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800fbd0:	ed93 6b00 	vldr	d6, [r3]
 800fbd4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fbd8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fbdc:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800fbe0:	443b      	add	r3, r7
 800fbe2:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800fbe6:	f04f 0300 	mov.w	r3, #0
 800fbea:	f04f 0400 	mov.w	r4, #0
 800fbee:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800fbf2:	443a      	add	r2, r7
 800fbf4:	e9c2 3400 	strd	r3, r4, [r2]
 800fbf8:	e039      	b.n	800fc6e <G_q+0xd84e>
  } else if (t218.re == 0.0) {
 800fbfa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800fbfe:	ed93 7b00 	vldr	d7, [r3]
 800fc02:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fc06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc0a:	d116      	bne.n	800fc3a <G_q+0xd81a>
    t34_re = 0.0;
 800fc0c:	f04f 0300 	mov.w	r3, #0
 800fc10:	f04f 0400 	mov.w	r4, #0
 800fc14:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800fc18:	443a      	add	r2, r7
 800fc1a:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t218.im / 2.0;
 800fc1e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800fc22:	ed93 6b02 	vldr	d6, [r3, #8]
 800fc26:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fc2a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fc2e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800fc32:	443b      	add	r3, r7
 800fc34:	ed83 7b00 	vstr	d7, [r3]
 800fc38:	e019      	b.n	800fc6e <G_q+0xd84e>
  } else {
    t34_re = t218.re / 2.0;
 800fc3a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800fc3e:	ed93 6b00 	vldr	d6, [r3]
 800fc42:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fc46:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fc4a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800fc4e:	443b      	add	r3, r7
 800fc50:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t218.im / 2.0;
 800fc54:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800fc58:	ed93 6b02 	vldr	d6, [r3, #8]
 800fc5c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fc60:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fc64:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800fc68:	443b      	add	r3, r7
 800fc6a:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t219.im == 0.0) {
 800fc6e:	4b2d      	ldr	r3, [pc, #180]	; (800fd24 <G_q+0xd904>)
 800fc70:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800fc74:	443a      	add	r2, r7
 800fc76:	4413      	add	r3, r2
 800fc78:	ed93 7b02 	vldr	d7, [r3, #8]
 800fc7c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fc80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc84:	d119      	bne.n	800fcba <G_q+0xd89a>
    t13_re = t219.re / 2.0;
 800fc86:	4b27      	ldr	r3, [pc, #156]	; (800fd24 <G_q+0xd904>)
 800fc88:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800fc8c:	443a      	add	r2, r7
 800fc8e:	4413      	add	r3, r2
 800fc90:	ed93 6b00 	vldr	d6, [r3]
 800fc94:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fc98:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fc9c:	f241 3378 	movw	r3, #4984	; 0x1378
 800fca0:	443b      	add	r3, r7
 800fca2:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 800fca6:	f04f 0300 	mov.w	r3, #0
 800fcaa:	f04f 0400 	mov.w	r4, #0
 800fcae:	f241 3270 	movw	r2, #4976	; 0x1370
 800fcb2:	443a      	add	r2, r7
 800fcb4:	e9c2 3400 	strd	r3, r4, [r2]
 800fcb8:	e056      	b.n	800fd68 <G_q+0xd948>
  } else if (t219.re == 0.0) {
 800fcba:	4b1a      	ldr	r3, [pc, #104]	; (800fd24 <G_q+0xd904>)
 800fcbc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800fcc0:	443a      	add	r2, r7
 800fcc2:	4413      	add	r3, r2
 800fcc4:	ed93 7b00 	vldr	d7, [r3]
 800fcc8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcd0:	d12a      	bne.n	800fd28 <G_q+0xd908>
    t13_re = 0.0;
 800fcd2:	f04f 0300 	mov.w	r3, #0
 800fcd6:	f04f 0400 	mov.w	r4, #0
 800fcda:	f241 3278 	movw	r2, #4984	; 0x1378
 800fcde:	443a      	add	r2, r7
 800fce0:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t219.im / 2.0;
 800fce4:	4b0f      	ldr	r3, [pc, #60]	; (800fd24 <G_q+0xd904>)
 800fce6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800fcea:	443a      	add	r2, r7
 800fcec:	4413      	add	r3, r2
 800fcee:	ed93 6b02 	vldr	d6, [r3, #8]
 800fcf2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fcf6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fcfa:	f241 3370 	movw	r3, #4976	; 0x1370
 800fcfe:	443b      	add	r3, r7
 800fd00:	ed83 7b00 	vstr	d7, [r3]
 800fd04:	e030      	b.n	800fd68 <G_q+0xd948>
 800fd06:	bf00      	nop
	...
 800fd10:	858a5d48 	.word	0x858a5d48
 800fd14:	394377ce 	.word	0x394377ce
 800fd18:	33145c07 	.word	0x33145c07
 800fd1c:	3c81a626 	.word	0x3c81a626
 800fd20:	ffffef30 	.word	0xffffef30
 800fd24:	ffffecf0 	.word	0xffffecf0
  } else {
    t13_re = t219.re / 2.0;
 800fd28:	4be1      	ldr	r3, [pc, #900]	; (80100b0 <G_q+0xdc90>)
 800fd2a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800fd2e:	443a      	add	r2, r7
 800fd30:	4413      	add	r3, r2
 800fd32:	ed93 6b00 	vldr	d6, [r3]
 800fd36:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fd3a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fd3e:	f241 3378 	movw	r3, #4984	; 0x1378
 800fd42:	443b      	add	r3, r7
 800fd44:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t219.im / 2.0;
 800fd48:	4bd9      	ldr	r3, [pc, #868]	; (80100b0 <G_q+0xdc90>)
 800fd4a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800fd4e:	443a      	add	r2, r7
 800fd50:	4413      	add	r3, r2
 800fd52:	ed93 6b02 	vldr	d6, [r3, #8]
 800fd56:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fd5a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fd5e:	f241 3370 	movw	r3, #4976	; 0x1370
 800fd62:	443b      	add	r3, r7
 800fd64:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re = (t60_re * t72_re - t76_re * t23_re) - (t12_im * t85_im - b_t10_re *
 800fd68:	f241 2250 	movw	r2, #4688	; 0x1250
 800fd6c:	443a      	add	r2, r7
 800fd6e:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800fd72:	ed92 6b00 	vldr	d6, [r2]
 800fd76:	ed93 7b00 	vldr	d7, [r3]
 800fd7a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800fd7e:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800fd82:	443b      	add	r3, r7
 800fd84:	ed93 5b00 	vldr	d5, [r3]
 800fd88:	f241 3330 	movw	r3, #4912	; 0x1330
 800fd8c:	443b      	add	r3, r7
 800fd8e:	ed93 7b00 	vldr	d7, [r3]
 800fd92:	ee25 7b07 	vmul.f64	d7, d5, d7
 800fd96:	ee36 6b47 	vsub.f64	d6, d6, d7
 800fd9a:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800fd9e:	ed93 5b00 	vldr	d5, [r3]
 800fda2:	f241 3318 	movw	r3, #4888	; 0x1318
 800fda6:	443b      	add	r3, r7
 800fda8:	ed93 7b00 	vldr	d7, [r3]
 800fdac:	ee25 5b07 	vmul.f64	d5, d5, d7
 800fdb0:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800fdb4:	f241 3238 	movw	r2, #4920	; 0x1338
 800fdb8:	443a      	add	r2, r7
 800fdba:	ed92 4b00 	vldr	d4, [r2]
 800fdbe:	ed93 7b00 	vldr	d7, [r3]
 800fdc2:	ee24 7b07 	vmul.f64	d7, d4, d7
 800fdc6:	ee35 7b47 	vsub.f64	d7, d5, d7
 800fdca:	ee36 7b47 	vsub.f64	d7, d6, d7
 800fdce:	f241 3368 	movw	r3, #4968	; 0x1368
 800fdd2:	443b      	add	r3, r7
 800fdd4:	ed83 7b00 	vstr	d7, [r3]
    t58_im);
  t76_re = (t60_re * t23_re + t76_re * t72_re) - (t12_im * t58_im + b_t10_re *
 800fdd8:	f241 2350 	movw	r3, #4688	; 0x1250
 800fddc:	443b      	add	r3, r7
 800fdde:	ed93 6b00 	vldr	d6, [r3]
 800fde2:	f241 3330 	movw	r3, #4912	; 0x1330
 800fde6:	443b      	add	r3, r7
 800fde8:	ed93 7b00 	vldr	d7, [r3]
 800fdec:	ee26 6b07 	vmul.f64	d6, d6, d7
 800fdf0:	f241 22a8 	movw	r2, #4776	; 0x12a8
 800fdf4:	443a      	add	r2, r7
 800fdf6:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800fdfa:	ed92 5b00 	vldr	d5, [r2]
 800fdfe:	ed93 7b00 	vldr	d7, [r3]
 800fe02:	ee25 7b07 	vmul.f64	d7, d5, d7
 800fe06:	ee36 6b07 	vadd.f64	d6, d6, d7
 800fe0a:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800fe0e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800fe12:	ed92 5b00 	vldr	d5, [r2]
 800fe16:	ed93 7b00 	vldr	d7, [r3]
 800fe1a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800fe1e:	f241 3338 	movw	r3, #4920	; 0x1338
 800fe22:	443b      	add	r3, r7
 800fe24:	ed93 4b00 	vldr	d4, [r3]
 800fe28:	f241 3318 	movw	r3, #4888	; 0x1318
 800fe2c:	443b      	add	r3, r7
 800fe2e:	ed93 7b00 	vldr	d7, [r3]
 800fe32:	ee24 7b07 	vmul.f64	d7, d4, d7
 800fe36:	ee35 7b07 	vadd.f64	d7, d5, d7
 800fe3a:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800fe3e:	443b      	add	r3, r7
 800fe40:	ee36 7b47 	vsub.f64	d7, d6, d7
 800fe44:	ed83 7b00 	vstr	d7, [r3]
    t85_im);
  t34_re += t13_re;
 800fe48:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800fe4c:	443b      	add	r3, r7
 800fe4e:	ed93 6b00 	vldr	d6, [r3]
 800fe52:	f241 3378 	movw	r3, #4984	; 0x1378
 800fe56:	443b      	add	r3, r7
 800fe58:	ed93 7b00 	vldr	d7, [r3]
 800fe5c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800fe60:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800fe64:	443b      	add	r3, r7
 800fe66:	ed83 7b00 	vstr	d7, [r3]
  t34_im += t13_im;
 800fe6a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800fe6e:	443b      	add	r3, r7
 800fe70:	ed93 6b00 	vldr	d6, [r3]
 800fe74:	f241 3370 	movw	r3, #4976	; 0x1370
 800fe78:	443b      	add	r3, r7
 800fe7a:	ed93 7b00 	vldr	d7, [r3]
 800fe7e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800fe82:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800fe86:	443b      	add	r3, r7
 800fe88:	ed83 7b00 	vstr	d7, [r3]
  b_G_q[3].re = -g * ((((b_t54_im * t41_re - t43_re * t41_im) * 0.0215 - (t70_im
 800fe8c:	4b89      	ldr	r3, [pc, #548]	; (80100b4 <G_q+0xdc94>)
 800fe8e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800fe92:	443a      	add	r2, r7
 800fe94:	4413      	add	r3, r2
 800fe96:	ed93 7b00 	vldr	d7, [r3]
 800fe9a:	eeb1 6b47 	vneg.f64	d6, d7
 800fe9e:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800fea2:	443b      	add	r3, r7
 800fea4:	ed93 5b00 	vldr	d5, [r3]
 800fea8:	f241 3308 	movw	r3, #4872	; 0x1308
 800feac:	443b      	add	r3, r7
 800feae:	ed93 7b00 	vldr	d7, [r3]
 800feb2:	ee25 5b07 	vmul.f64	d5, d5, d7
 800feb6:	f241 2358 	movw	r3, #4696	; 0x1258
 800feba:	443b      	add	r3, r7
 800febc:	ed93 4b00 	vldr	d4, [r3]
 800fec0:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800fec4:	ed93 7b00 	vldr	d7, [r3]
 800fec8:	ee24 7b07 	vmul.f64	d7, d4, d7
 800fecc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800fed0:	ed9f 5b73 	vldr	d5, [pc, #460]	; 80100a0 <G_q+0xdc80>
 800fed4:	ee27 5b05 	vmul.f64	d5, d7, d5
    * b_t54_re - t43_im * t55_im) * 1.3164953090834051E-18) + (t55_re * t74_re -
 800fed8:	f241 23c8 	movw	r3, #4808	; 0x12c8
 800fedc:	443b      	add	r3, r7
 800fede:	ed93 4b00 	vldr	d4, [r3]
 800fee2:	f241 23f0 	movw	r3, #4848	; 0x12f0
 800fee6:	443b      	add	r3, r7
 800fee8:	ed93 7b00 	vldr	d7, [r3]
 800feec:	ee24 4b07 	vmul.f64	d4, d4, d7
 800fef0:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800fef4:	443b      	add	r3, r7
 800fef6:	ed93 3b00 	vldr	d3, [r3]
 800fefa:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800fefe:	443b      	add	r3, r7
 800ff00:	ed93 7b00 	vldr	d7, [r3]
 800ff04:	ee23 7b07 	vmul.f64	d7, d3, d7
 800ff08:	ee34 7b47 	vsub.f64	d7, d4, d7
 800ff0c:	ed9f 4b66 	vldr	d4, [pc, #408]	; 80100a8 <G_q+0xdc88>
 800ff10:	ee27 7b04 	vmul.f64	d7, d7, d4
  b_G_q[3].re = -g * ((((b_t54_im * t41_re - t43_re * t41_im) * 0.0215 - (t70_im
 800ff14:	ee35 5b47 	vsub.f64	d5, d5, d7
    * b_t54_re - t43_im * t55_im) * 1.3164953090834051E-18) + (t55_re * t74_re -
 800ff18:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800ff1c:	443b      	add	r3, r7
 800ff1e:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 800ff22:	ed92 4b00 	vldr	d4, [r2]
 800ff26:	ed93 7b00 	vldr	d7, [r3]
 800ff2a:	ee24 4b07 	vmul.f64	d4, d4, d7
    t70_re * t74_im) * 1.3164953090834051E-18) + (t16_re * t34_re - t76_re *
 800ff2e:	f241 22d0 	movw	r2, #4816	; 0x12d0
 800ff32:	443a      	add	r2, r7
 800ff34:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800ff38:	443b      	add	r3, r7
 800ff3a:	ed92 3b00 	vldr	d3, [r2]
 800ff3e:	ed93 7b00 	vldr	d7, [r3]
 800ff42:	ee23 7b07 	vmul.f64	d7, d3, d7
    * b_t54_re - t43_im * t55_im) * 1.3164953090834051E-18) + (t55_re * t74_re -
 800ff46:	ee34 7b47 	vsub.f64	d7, d4, d7
    t70_re * t74_im) * 1.3164953090834051E-18) + (t16_re * t34_re - t76_re *
 800ff4a:	ed9f 4b57 	vldr	d4, [pc, #348]	; 80100a8 <G_q+0xdc88>
 800ff4e:	ee27 7b04 	vmul.f64	d7, d7, d4
    * b_t54_re - t43_im * t55_im) * 1.3164953090834051E-18) + (t55_re * t74_re -
 800ff52:	ee35 5b07 	vadd.f64	d5, d5, d7
    t70_re * t74_im) * 1.3164953090834051E-18) + (t16_re * t34_re - t76_re *
 800ff56:	f241 3368 	movw	r3, #4968	; 0x1368
 800ff5a:	443b      	add	r3, r7
 800ff5c:	ed93 4b00 	vldr	d4, [r3]
 800ff60:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800ff64:	443b      	add	r3, r7
 800ff66:	ed93 7b00 	vldr	d7, [r3]
 800ff6a:	ee24 4b07 	vmul.f64	d4, d4, d7
 800ff6e:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800ff72:	443b      	add	r3, r7
 800ff74:	ed93 3b00 	vldr	d3, [r3]
 800ff78:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800ff7c:	443b      	add	r3, r7
 800ff7e:	ed93 7b00 	vldr	d7, [r3]
 800ff82:	ee23 7b07 	vmul.f64	d7, d3, d7
 800ff86:	ee34 7b47 	vsub.f64	d7, d4, d7
    t34_im) * 0.0215);
 800ff8a:	ed9f 4b45 	vldr	d4, [pc, #276]	; 80100a0 <G_q+0xdc80>
 800ff8e:	ee27 7b04 	vmul.f64	d7, d7, d4
    t70_re * t74_im) * 1.3164953090834051E-18) + (t16_re * t34_re - t76_re *
 800ff92:	ee35 7b07 	vadd.f64	d7, d5, d7
  b_G_q[3].re = -g * ((((b_t54_im * t41_re - t43_re * t41_im) * 0.0215 - (t70_im
 800ff96:	4b48      	ldr	r3, [pc, #288]	; (80100b8 <G_q+0xdc98>)
 800ff98:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ff9c:	443a      	add	r2, r7
 800ff9e:	4413      	add	r3, r2
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	3330      	adds	r3, #48	; 0x30
 800ffa4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ffa8:	ed83 7b00 	vstr	d7, [r3]
  b_G_q[3].im = -g * ((((b_t54_im * t41_im + t43_re * t41_re) * 0.0215 - (t70_im
 800ffac:	4b41      	ldr	r3, [pc, #260]	; (80100b4 <G_q+0xdc94>)
 800ffae:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ffb2:	443a      	add	r2, r7
 800ffb4:	4413      	add	r3, r2
 800ffb6:	ed93 7b00 	vldr	d7, [r3]
 800ffba:	eeb1 6b47 	vneg.f64	d6, d7
 800ffbe:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800ffc2:	443b      	add	r3, r7
 800ffc4:	ed93 5b00 	vldr	d5, [r3]
 800ffc8:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800ffcc:	ed93 7b00 	vldr	d7, [r3]
 800ffd0:	ee25 5b07 	vmul.f64	d5, d5, d7
 800ffd4:	f241 2358 	movw	r3, #4696	; 0x1258
 800ffd8:	443b      	add	r3, r7
 800ffda:	ed93 4b00 	vldr	d4, [r3]
 800ffde:	f241 3308 	movw	r3, #4872	; 0x1308
 800ffe2:	443b      	add	r3, r7
 800ffe4:	ed93 7b00 	vldr	d7, [r3]
 800ffe8:	ee24 7b07 	vmul.f64	d7, d4, d7
 800ffec:	ee35 7b07 	vadd.f64	d7, d5, d7
 800fff0:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 80100a0 <G_q+0xdc80>
 800fff4:	ee27 5b05 	vmul.f64	d5, d7, d5
    * t55_im + t43_im * b_t54_re) * 1.3164953090834051E-18) + (t55_re * t74_im +
 800fff8:	f241 23c8 	movw	r3, #4808	; 0x12c8
 800fffc:	443b      	add	r3, r7
 800fffe:	ed93 4b00 	vldr	d4, [r3]
 8010002:	f241 23d8 	movw	r3, #4824	; 0x12d8
 8010006:	443b      	add	r3, r7
 8010008:	ed93 7b00 	vldr	d7, [r3]
 801000c:	ee24 4b07 	vmul.f64	d4, d4, d7
 8010010:	f241 23f8 	movw	r3, #4856	; 0x12f8
 8010014:	443b      	add	r3, r7
 8010016:	ed93 3b00 	vldr	d3, [r3]
 801001a:	f241 23f0 	movw	r3, #4848	; 0x12f0
 801001e:	443b      	add	r3, r7
 8010020:	ed93 7b00 	vldr	d7, [r3]
 8010024:	ee23 7b07 	vmul.f64	d7, d3, d7
 8010028:	ee34 7b07 	vadd.f64	d7, d4, d7
 801002c:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 80100a8 <G_q+0xdc88>
 8010030:	ee27 7b04 	vmul.f64	d7, d7, d4
  b_G_q[3].im = -g * ((((b_t54_im * t41_im + t43_re * t41_re) * 0.0215 - (t70_im
 8010034:	ee35 5b47 	vsub.f64	d5, d5, d7
    * t55_im + t43_im * b_t54_re) * 1.3164953090834051E-18) + (t55_re * t74_im +
 8010038:	f241 23b0 	movw	r3, #4784	; 0x12b0
 801003c:	443b      	add	r3, r7
 801003e:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 8010042:	ed92 4b00 	vldr	d4, [r2]
 8010046:	ed93 7b00 	vldr	d7, [r3]
 801004a:	ee24 4b07 	vmul.f64	d4, d4, d7
    t70_re * t74_re) * 1.3164953090834051E-18) + (t16_re * t34_im + t76_re *
 801004e:	f241 22d0 	movw	r2, #4816	; 0x12d0
 8010052:	443a      	add	r2, r7
 8010054:	f241 23b8 	movw	r3, #4792	; 0x12b8
 8010058:	443b      	add	r3, r7
 801005a:	ed92 3b00 	vldr	d3, [r2]
 801005e:	ed93 7b00 	vldr	d7, [r3]
 8010062:	ee23 7b07 	vmul.f64	d7, d3, d7
    * t55_im + t43_im * b_t54_re) * 1.3164953090834051E-18) + (t55_re * t74_im +
 8010066:	ee34 7b07 	vadd.f64	d7, d4, d7
    t70_re * t74_re) * 1.3164953090834051E-18) + (t16_re * t34_im + t76_re *
 801006a:	ed9f 4b0f 	vldr	d4, [pc, #60]	; 80100a8 <G_q+0xdc88>
 801006e:	ee27 7b04 	vmul.f64	d7, d7, d4
    * t55_im + t43_im * b_t54_re) * 1.3164953090834051E-18) + (t55_re * t74_im +
 8010072:	ee35 5b07 	vadd.f64	d5, d5, d7
    t70_re * t74_re) * 1.3164953090834051E-18) + (t16_re * t34_im + t76_re *
 8010076:	f241 3368 	movw	r3, #4968	; 0x1368
 801007a:	443b      	add	r3, r7
 801007c:	ed93 4b00 	vldr	d4, [r3]
 8010080:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8010084:	443b      	add	r3, r7
 8010086:	ed93 7b00 	vldr	d7, [r3]
 801008a:	ee24 4b07 	vmul.f64	d4, d4, d7
 801008e:	f241 23a8 	movw	r3, #4776	; 0x12a8
 8010092:	443b      	add	r3, r7
 8010094:	ed93 3b00 	vldr	d3, [r3]
 8010098:	e010      	b.n	80100bc <G_q+0xdc9c>
 801009a:	bf00      	nop
 801009c:	f3af 8000 	nop.w
 80100a0:	9374bc6a 	.word	0x9374bc6a
 80100a4:	3f960418 	.word	0x3f960418
 80100a8:	2ba953a1 	.word	0x2ba953a1
 80100ac:	3c3848f9 	.word	0x3c3848f9
 80100b0:	ffffecf0 	.word	0xffffecf0
 80100b4:	ffffec58 	.word	0xffffec58
 80100b8:	ffffec34 	.word	0xffffec34
 80100bc:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80100c0:	443b      	add	r3, r7
 80100c2:	ed93 7b00 	vldr	d7, [r3]
 80100c6:	ee23 7b07 	vmul.f64	d7, d3, d7
 80100ca:	ee34 7b07 	vadd.f64	d7, d4, d7
    t34_re) * 0.0215);
 80100ce:	ed9f 4bd2 	vldr	d4, [pc, #840]	; 8010418 <G_q+0xdff8>
 80100d2:	ee27 7b04 	vmul.f64	d7, d7, d4
    t70_re * t74_re) * 1.3164953090834051E-18) + (t16_re * t34_im + t76_re *
 80100d6:	ee35 7b07 	vadd.f64	d7, d5, d7
  b_G_q[3].im = -g * ((((b_t54_im * t41_im + t43_re * t41_re) * 0.0215 - (t70_im
 80100da:	4bd5      	ldr	r3, [pc, #852]	; (8010430 <G_q+0xe010>)
 80100dc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80100e0:	443a      	add	r2, r7
 80100e2:	4413      	add	r3, r2
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	3330      	adds	r3, #48	; 0x30
 80100e8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80100ec:	ed83 7b02 	vstr	d7, [r3, #8]
  if (t264.im == 0.0) {
 80100f0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80100f4:	ed93 7b02 	vldr	d7, [r3, #8]
 80100f8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80100fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010100:	d116      	bne.n	8010130 <G_q+0xdd10>
    t70_im = t264.re / 2.0;
 8010102:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8010106:	ed93 6b00 	vldr	d6, [r3]
 801010a:	f241 23c8 	movw	r3, #4808	; 0x12c8
 801010e:	443b      	add	r3, r7
 8010110:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010114:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010118:	ed83 7b00 	vstr	d7, [r3]
    t43_im = 0.0;
 801011c:	f04f 0300 	mov.w	r3, #0
 8010120:	f04f 0400 	mov.w	r4, #0
 8010124:	f241 22f8 	movw	r2, #4856	; 0x12f8
 8010128:	443a      	add	r2, r7
 801012a:	e9c2 3400 	strd	r3, r4, [r2]
 801012e:	e039      	b.n	80101a4 <G_q+0xdd84>
  } else if (t264.re == 0.0) {
 8010130:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8010134:	ed93 7b00 	vldr	d7, [r3]
 8010138:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801013c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010140:	d116      	bne.n	8010170 <G_q+0xdd50>
    t70_im = 0.0;
 8010142:	f241 22c8 	movw	r2, #4808	; 0x12c8
 8010146:	443a      	add	r2, r7
 8010148:	f04f 0300 	mov.w	r3, #0
 801014c:	f04f 0400 	mov.w	r4, #0
 8010150:	e9c2 3400 	strd	r3, r4, [r2]
    t43_im = t264.im / 2.0;
 8010154:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8010158:	ed93 6b02 	vldr	d6, [r3, #8]
 801015c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010160:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010164:	f241 23f8 	movw	r3, #4856	; 0x12f8
 8010168:	443b      	add	r3, r7
 801016a:	ed83 7b00 	vstr	d7, [r3]
 801016e:	e019      	b.n	80101a4 <G_q+0xdd84>
  } else {
    t70_im = t264.re / 2.0;
 8010170:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8010174:	ed93 6b00 	vldr	d6, [r3]
 8010178:	f241 23c8 	movw	r3, #4808	; 0x12c8
 801017c:	443b      	add	r3, r7
 801017e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010182:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010186:	ed83 7b00 	vstr	d7, [r3]
    t43_im = t264.im / 2.0;
 801018a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801018e:	ed93 6b02 	vldr	d6, [r3, #8]
 8010192:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010196:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801019a:	f241 23f8 	movw	r3, #4856	; 0x12f8
 801019e:	443b      	add	r3, r7
 80101a0:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t265.im == 0.0) {
 80101a4:	4ba3      	ldr	r3, [pc, #652]	; (8010434 <G_q+0xe014>)
 80101a6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80101aa:	443a      	add	r2, r7
 80101ac:	4413      	add	r3, r2
 80101ae:	ed93 7b02 	vldr	d7, [r3, #8]
 80101b2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80101b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101ba:	d118      	bne.n	80101ee <G_q+0xddce>
    t76_re = t265.re / 2.0;
 80101bc:	4b9d      	ldr	r3, [pc, #628]	; (8010434 <G_q+0xe014>)
 80101be:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80101c2:	443a      	add	r2, r7
 80101c4:	4413      	add	r3, r2
 80101c6:	ed93 6b00 	vldr	d6, [r3]
 80101ca:	f241 23a8 	movw	r3, #4776	; 0x12a8
 80101ce:	443b      	add	r3, r7
 80101d0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80101d4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80101d8:	ed83 7b00 	vstr	d7, [r3]
    t72_re = 0.0;
 80101dc:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 80101e0:	f04f 0300 	mov.w	r3, #0
 80101e4:	f04f 0400 	mov.w	r4, #0
 80101e8:	e9c2 3400 	strd	r3, r4, [r2]
 80101ec:	e043      	b.n	8010276 <G_q+0xde56>
  } else if (t265.re == 0.0) {
 80101ee:	4b91      	ldr	r3, [pc, #580]	; (8010434 <G_q+0xe014>)
 80101f0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80101f4:	443a      	add	r2, r7
 80101f6:	4413      	add	r3, r2
 80101f8:	ed93 7b00 	vldr	d7, [r3]
 80101fc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010204:	d118      	bne.n	8010238 <G_q+0xde18>
    t76_re = 0.0;
 8010206:	f241 22a8 	movw	r2, #4776	; 0x12a8
 801020a:	443a      	add	r2, r7
 801020c:	f04f 0300 	mov.w	r3, #0
 8010210:	f04f 0400 	mov.w	r4, #0
 8010214:	e9c2 3400 	strd	r3, r4, [r2]
    t72_re = t265.im / 2.0;
 8010218:	4b86      	ldr	r3, [pc, #536]	; (8010434 <G_q+0xe014>)
 801021a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 801021e:	443a      	add	r2, r7
 8010220:	4413      	add	r3, r2
 8010222:	ed93 6b02 	vldr	d6, [r3, #8]
 8010226:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 801022a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801022e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010232:	ed83 7b00 	vstr	d7, [r3]
 8010236:	e01e      	b.n	8010276 <G_q+0xde56>
  } else {
    t76_re = t265.re / 2.0;
 8010238:	4b7e      	ldr	r3, [pc, #504]	; (8010434 <G_q+0xe014>)
 801023a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 801023e:	443a      	add	r2, r7
 8010240:	4413      	add	r3, r2
 8010242:	ed93 6b00 	vldr	d6, [r3]
 8010246:	f241 23a8 	movw	r3, #4776	; 0x12a8
 801024a:	443b      	add	r3, r7
 801024c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010250:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010254:	ed83 7b00 	vstr	d7, [r3]
    t72_re = t265.im / 2.0;
 8010258:	4b76      	ldr	r3, [pc, #472]	; (8010434 <G_q+0xe014>)
 801025a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 801025e:	443a      	add	r2, r7
 8010260:	4413      	add	r3, r2
 8010262:	ed93 6b02 	vldr	d6, [r3, #8]
 8010266:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 801026a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801026e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010272:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re = (t252.re * 0.0 - t252.im * 3.061616997868383E-17) - (t253.re * 0.0 -
 8010276:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 801027a:	ed93 7b00 	vldr	d7, [r3]
 801027e:	ed9f 6b68 	vldr	d6, [pc, #416]	; 8010420 <G_q+0xe000>
 8010282:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010286:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 801028a:	ed93 7b02 	vldr	d7, [r3, #8]
 801028e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8010428 <G_q+0xe008>
 8010292:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010296:	ee36 6b47 	vsub.f64	d6, d6, d7
 801029a:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 801029e:	ed93 7b00 	vldr	d7, [r3]
 80102a2:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 8010420 <G_q+0xe000>
 80102a6:	ee27 5b05 	vmul.f64	d5, d7, d5
    t253.im * 3.061616997868383E-17);
 80102aa:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80102ae:	ed93 7b02 	vldr	d7, [r3, #8]
 80102b2:	ed9f 4b5d 	vldr	d4, [pc, #372]	; 8010428 <G_q+0xe008>
 80102b6:	ee27 7b04 	vmul.f64	d7, d7, d4
  t16_re = (t252.re * 0.0 - t252.im * 3.061616997868383E-17) - (t253.re * 0.0 -
 80102ba:	ee35 7b47 	vsub.f64	d7, d5, d7
 80102be:	ee36 7b47 	vsub.f64	d7, d6, d7
 80102c2:	f241 3368 	movw	r3, #4968	; 0x1368
 80102c6:	443b      	add	r3, r7
 80102c8:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t252.re * 3.061616997868383E-17 + t252.im * 0.0) - (t253.re *
 80102cc:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 80102d0:	ed93 7b00 	vldr	d7, [r3]
 80102d4:	ed9f 6b54 	vldr	d6, [pc, #336]	; 8010428 <G_q+0xe008>
 80102d8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80102dc:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 80102e0:	ed93 7b02 	vldr	d7, [r3, #8]
 80102e4:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 8010420 <G_q+0xe000>
 80102e8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80102ec:	ee36 6b07 	vadd.f64	d6, d6, d7
 80102f0:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80102f4:	ed93 7b00 	vldr	d7, [r3]
 80102f8:	ed9f 5b4b 	vldr	d5, [pc, #300]	; 8010428 <G_q+0xe008>
 80102fc:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t253.im * 0.0);
 8010300:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8010304:	ed93 7b02 	vldr	d7, [r3, #8]
 8010308:	ed9f 4b45 	vldr	d4, [pc, #276]	; 8010420 <G_q+0xe000>
 801030c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010310:	ee35 7b07 	vadd.f64	d7, d5, d7
  t16_im = (t252.re * 3.061616997868383E-17 + t252.im * 0.0) - (t253.re *
 8010314:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010318:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 801031c:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t250.re * 0.0 - t250.im * 0.5) - (t251.re * 0.0 - t251.im * 0.5);
 8010320:	f241 03f0 	movw	r3, #4336	; 0x10f0
 8010324:	443b      	add	r3, r7
 8010326:	ed93 7b00 	vldr	d7, [r3]
 801032a:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8010420 <G_q+0xe000>
 801032e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010332:	f241 03f0 	movw	r3, #4336	; 0x10f0
 8010336:	443b      	add	r3, r7
 8010338:	ed93 7b02 	vldr	d7, [r3, #8]
 801033c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010340:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010344:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010348:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 801034c:	ed93 7b00 	vldr	d7, [r3]
 8010350:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8010420 <G_q+0xe000>
 8010354:	ee27 5b05 	vmul.f64	d5, d7, d5
 8010358:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 801035c:	ed93 7b02 	vldr	d7, [r3, #8]
 8010360:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8010364:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010368:	ee35 7b47 	vsub.f64	d7, d5, d7
 801036c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010370:	f241 3348 	movw	r3, #4936	; 0x1348
 8010374:	443b      	add	r3, r7
 8010376:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t250.re * 0.5 + t250.im * 0.0) - (t251.re * 0.5 + t251.im * 0.0);
 801037a:	f241 03f0 	movw	r3, #4336	; 0x10f0
 801037e:	443b      	add	r3, r7
 8010380:	ed93 7b00 	vldr	d7, [r3]
 8010384:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8010388:	ee27 6b06 	vmul.f64	d6, d7, d6
 801038c:	f241 03f0 	movw	r3, #4336	; 0x10f0
 8010390:	443b      	add	r3, r7
 8010392:	ed93 7b02 	vldr	d7, [r3, #8]
 8010396:	ed9f 5b22 	vldr	d5, [pc, #136]	; 8010420 <G_q+0xe000>
 801039a:	ee27 7b05 	vmul.f64	d7, d7, d5
 801039e:	ee36 6b07 	vadd.f64	d6, d6, d7
 80103a2:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80103a6:	ed93 7b00 	vldr	d7, [r3]
 80103aa:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80103ae:	ee27 5b05 	vmul.f64	d5, d7, d5
 80103b2:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80103b6:	ed93 7b02 	vldr	d7, [r3, #8]
 80103ba:	ed9f 4b19 	vldr	d4, [pc, #100]	; 8010420 <G_q+0xe000>
 80103be:	ee27 7b04 	vmul.f64	d7, d7, d4
 80103c2:	ee35 7b07 	vadd.f64	d7, d5, d7
 80103c6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80103ca:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80103ce:	ed83 7b00 	vstr	d7, [r3]
  if (t248.im == 0.0) {
 80103d2:	f241 03d0 	movw	r3, #4304	; 0x10d0
 80103d6:	443b      	add	r3, r7
 80103d8:	ed93 7b02 	vldr	d7, [r3, #8]
 80103dc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80103e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103e4:	d128      	bne.n	8010438 <G_q+0xe018>
    t12_re = t248.re / 2.0;
 80103e6:	f241 03d0 	movw	r3, #4304	; 0x10d0
 80103ea:	443b      	add	r3, r7
 80103ec:	ed93 6b00 	vldr	d6, [r3]
 80103f0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80103f4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80103f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80103fc:	443b      	add	r3, r7
 80103fe:	ed83 7b00 	vstr	d7, [r3]
    t12_im = 0.0;
 8010402:	f04f 0300 	mov.w	r3, #0
 8010406:	f04f 0400 	mov.w	r4, #0
 801040a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 801040e:	e9c2 3400 	strd	r3, r4, [r2]
 8010412:	e04d      	b.n	80104b0 <G_q+0xe090>
 8010414:	f3af 8000 	nop.w
 8010418:	9374bc6a 	.word	0x9374bc6a
 801041c:	3f960418 	.word	0x3f960418
	...
 8010428:	33145c07 	.word	0x33145c07
 801042c:	3c81a626 	.word	0x3c81a626
 8010430:	ffffec34 	.word	0xffffec34
 8010434:	ffffed10 	.word	0xffffed10
  } else if (t248.re == 0.0) {
 8010438:	f241 03d0 	movw	r3, #4304	; 0x10d0
 801043c:	443b      	add	r3, r7
 801043e:	ed93 7b00 	vldr	d7, [r3]
 8010442:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801044a:	d116      	bne.n	801047a <G_q+0xe05a>
    t12_re = 0.0;
 801044c:	f04f 0300 	mov.w	r3, #0
 8010450:	f04f 0400 	mov.w	r4, #0
 8010454:	f241 3288 	movw	r2, #5000	; 0x1388
 8010458:	443a      	add	r2, r7
 801045a:	e9c2 3400 	strd	r3, r4, [r2]
    t12_im = t248.im / 2.0;
 801045e:	f241 03d0 	movw	r3, #4304	; 0x10d0
 8010462:	443b      	add	r3, r7
 8010464:	ed93 6b02 	vldr	d6, [r3, #8]
 8010468:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801046c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010470:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8010474:	ed83 7b00 	vstr	d7, [r3]
 8010478:	e01a      	b.n	80104b0 <G_q+0xe090>
  } else {
    t12_re = t248.re / 2.0;
 801047a:	f241 03d0 	movw	r3, #4304	; 0x10d0
 801047e:	443b      	add	r3, r7
 8010480:	ed93 6b00 	vldr	d6, [r3]
 8010484:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010488:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801048c:	f241 3388 	movw	r3, #5000	; 0x1388
 8010490:	443b      	add	r3, r7
 8010492:	ed83 7b00 	vstr	d7, [r3]
    t12_im = t248.im / 2.0;
 8010496:	f241 03d0 	movw	r3, #4304	; 0x10d0
 801049a:	443b      	add	r3, r7
 801049c:	ed93 6b02 	vldr	d6, [r3, #8]
 80104a0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80104a4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80104a8:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80104ac:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t249.im == 0.0) {
 80104b0:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 80104b4:	ed93 7b02 	vldr	d7, [r3, #8]
 80104b8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80104bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104c0:	d116      	bne.n	80104f0 <G_q+0xe0d0>
    t34_re = t249.re / 2.0;
 80104c2:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 80104c6:	ed93 6b00 	vldr	d6, [r3]
 80104ca:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80104ce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80104d2:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80104d6:	443b      	add	r3, r7
 80104d8:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 80104dc:	f04f 0300 	mov.w	r3, #0
 80104e0:	f04f 0400 	mov.w	r4, #0
 80104e4:	f241 32b0 	movw	r2, #5040	; 0x13b0
 80104e8:	443a      	add	r2, r7
 80104ea:	e9c2 3400 	strd	r3, r4, [r2]
 80104ee:	e039      	b.n	8010564 <G_q+0xe144>
  } else if (t249.re == 0.0) {
 80104f0:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 80104f4:	ed93 7b00 	vldr	d7, [r3]
 80104f8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80104fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010500:	d116      	bne.n	8010530 <G_q+0xe110>
    t34_re = 0.0;
 8010502:	f04f 0300 	mov.w	r3, #0
 8010506:	f04f 0400 	mov.w	r4, #0
 801050a:	f241 32b8 	movw	r2, #5048	; 0x13b8
 801050e:	443a      	add	r2, r7
 8010510:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t249.im / 2.0;
 8010514:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8010518:	ed93 6b02 	vldr	d6, [r3, #8]
 801051c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010520:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010524:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8010528:	443b      	add	r3, r7
 801052a:	ed83 7b00 	vstr	d7, [r3]
 801052e:	e019      	b.n	8010564 <G_q+0xe144>
  } else {
    t34_re = t249.re / 2.0;
 8010530:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8010534:	ed93 6b00 	vldr	d6, [r3]
 8010538:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801053c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010540:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8010544:	443b      	add	r3, r7
 8010546:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t249.im / 2.0;
 801054a:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 801054e:	ed93 6b02 	vldr	d6, [r3, #8]
 8010552:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010556:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801055a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 801055e:	443b      	add	r3, r7
 8010560:	ed83 7b00 	vstr	d7, [r3]
  }

  t23_re = t246.re * 3.061616997868383E-17 + t247.re * 3.061616997868383E-17;
 8010564:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8010568:	ed93 7b00 	vldr	d7, [r3]
 801056c:	ed9f 6be2 	vldr	d6, [pc, #904]	; 80108f8 <G_q+0xe4d8>
 8010570:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010574:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8010578:	ed93 7b00 	vldr	d7, [r3]
 801057c:	ed9f 5bde 	vldr	d5, [pc, #888]	; 80108f8 <G_q+0xe4d8>
 8010580:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010584:	ee36 7b07 	vadd.f64	d7, d6, d7
 8010588:	f241 3330 	movw	r3, #4912	; 0x1330
 801058c:	443b      	add	r3, r7
 801058e:	ed83 7b00 	vstr	d7, [r3]
  t3_im = t246.im * 3.061616997868383E-17 + t247.im * 3.061616997868383E-17;
 8010592:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8010596:	ed93 7b02 	vldr	d7, [r3, #8]
 801059a:	ed9f 6bd7 	vldr	d6, [pc, #860]	; 80108f8 <G_q+0xe4d8>
 801059e:	ee27 6b06 	vmul.f64	d6, d7, d6
 80105a2:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 80105a6:	ed93 7b02 	vldr	d7, [r3, #8]
 80105aa:	ed9f 5bd3 	vldr	d5, [pc, #844]	; 80108f8 <G_q+0xe4d8>
 80105ae:	ee27 7b05 	vmul.f64	d7, d7, d5
 80105b2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80105b6:	f241 3310 	movw	r3, #4880	; 0x1310
 80105ba:	443b      	add	r3, r7
 80105bc:	ed83 7b00 	vstr	d7, [r3]
  t12_re = (t12_re + t34_re) + 7.498798913309288E-33;
 80105c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80105c4:	443b      	add	r3, r7
 80105c6:	ed93 6b00 	vldr	d6, [r3]
 80105ca:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80105ce:	443b      	add	r3, r7
 80105d0:	ed93 7b00 	vldr	d7, [r3]
 80105d4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80105d8:	ed9f 6bc9 	vldr	d6, [pc, #804]	; 8010900 <G_q+0xe4e0>
 80105dc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80105e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80105e4:	443b      	add	r3, r7
 80105e6:	ed83 7b00 	vstr	d7, [r3]
  t12_im += t34_im;
 80105ea:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80105ee:	ed93 6b00 	vldr	d6, [r3]
 80105f2:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80105f6:	443b      	add	r3, r7
 80105f8:	ed93 7b00 	vldr	d7, [r3]
 80105fc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8010600:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8010604:	ed83 7b00 	vstr	d7, [r3]
  t58_im = (t242.re * 0.0 - t242.im * 0.5) - (t243.re * 0.0 - t243.im * 0.5);
 8010608:	f507 734c 	add.w	r3, r7, #816	; 0x330
 801060c:	ed93 7b00 	vldr	d7, [r3]
 8010610:	ed9f 6bbd 	vldr	d6, [pc, #756]	; 8010908 <G_q+0xe4e8>
 8010614:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010618:	f507 734c 	add.w	r3, r7, #816	; 0x330
 801061c:	ed93 7b02 	vldr	d7, [r3, #8]
 8010620:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010624:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010628:	ee36 6b47 	vsub.f64	d6, d6, d7
 801062c:	4bba      	ldr	r3, [pc, #744]	; (8010918 <G_q+0xe4f8>)
 801062e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010632:	443a      	add	r2, r7
 8010634:	4413      	add	r3, r2
 8010636:	ed93 7b00 	vldr	d7, [r3]
 801063a:	ed9f 5bb3 	vldr	d5, [pc, #716]	; 8010908 <G_q+0xe4e8>
 801063e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8010642:	4bb5      	ldr	r3, [pc, #724]	; (8010918 <G_q+0xe4f8>)
 8010644:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010648:	443a      	add	r2, r7
 801064a:	4413      	add	r3, r2
 801064c:	ed93 7b02 	vldr	d7, [r3, #8]
 8010650:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8010654:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010658:	ee35 7b47 	vsub.f64	d7, d5, d7
 801065c:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8010660:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010664:	ed83 7b00 	vstr	d7, [r3]
  t70_re = (t242.re * 0.5 + t242.im * 0.0) - (t243.re * 0.5 + t243.im * 0.0);
 8010668:	f507 734c 	add.w	r3, r7, #816	; 0x330
 801066c:	ed93 7b00 	vldr	d7, [r3]
 8010670:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8010674:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010678:	f507 734c 	add.w	r3, r7, #816	; 0x330
 801067c:	ed93 7b02 	vldr	d7, [r3, #8]
 8010680:	ed9f 5ba1 	vldr	d5, [pc, #644]	; 8010908 <G_q+0xe4e8>
 8010684:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010688:	ee36 6b07 	vadd.f64	d6, d6, d7
 801068c:	4ba2      	ldr	r3, [pc, #648]	; (8010918 <G_q+0xe4f8>)
 801068e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010692:	443a      	add	r2, r7
 8010694:	4413      	add	r3, r2
 8010696:	ed93 7b00 	vldr	d7, [r3]
 801069a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801069e:	ee27 5b05 	vmul.f64	d5, d7, d5
 80106a2:	4b9d      	ldr	r3, [pc, #628]	; (8010918 <G_q+0xe4f8>)
 80106a4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80106a8:	443a      	add	r2, r7
 80106aa:	4413      	add	r3, r2
 80106ac:	ed93 7b02 	vldr	d7, [r3, #8]
 80106b0:	ed9f 4b95 	vldr	d4, [pc, #596]	; 8010908 <G_q+0xe4e8>
 80106b4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80106b8:	ee35 7b07 	vadd.f64	d7, d5, d7
 80106bc:	f241 23d0 	movw	r3, #4816	; 0x12d0
 80106c0:	443b      	add	r3, r7
 80106c2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80106c6:	ed83 7b00 	vstr	d7, [r3]
  t60_re = (((t244.re * 6.123233995736766E-17 + t245.re * 6.123233995736766E-17)
 80106ca:	f241 03b0 	movw	r3, #4272	; 0x10b0
 80106ce:	443b      	add	r3, r7
 80106d0:	ed93 7b00 	vldr	d7, [r3]
 80106d4:	ed9f 6b8e 	vldr	d6, [pc, #568]	; 8010910 <G_q+0xe4f0>
 80106d8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80106dc:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 80106e0:	ed93 7b00 	vldr	d7, [r3]
 80106e4:	ed9f 5b8a 	vldr	d5, [pc, #552]	; 8010910 <G_q+0xe4f0>
 80106e8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80106ec:	ee36 6b07 	vadd.f64	d6, d6, d7
             + (t16_re * t20_re - t16_im * t20_im)) + (t23_re * t12_re - t3_im *
 80106f0:	f241 3368 	movw	r3, #4968	; 0x1368
 80106f4:	443b      	add	r3, r7
 80106f6:	ed93 5b00 	vldr	d5, [r3]
 80106fa:	f241 3348 	movw	r3, #4936	; 0x1348
 80106fe:	443b      	add	r3, r7
 8010700:	ed93 7b00 	vldr	d7, [r3]
 8010704:	ee25 5b07 	vmul.f64	d5, d5, d7
 8010708:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 801070c:	ed93 4b00 	vldr	d4, [r3]
 8010710:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8010714:	ed93 7b00 	vldr	d7, [r3]
 8010718:	ee24 7b07 	vmul.f64	d7, d4, d7
 801071c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010720:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010724:	f241 3330 	movw	r3, #4912	; 0x1330
 8010728:	443b      	add	r3, r7
 801072a:	ed93 5b00 	vldr	d5, [r3]
 801072e:	f241 3388 	movw	r3, #5000	; 0x1388
 8010732:	443b      	add	r3, r7
 8010734:	ed93 7b00 	vldr	d7, [r3]
 8010738:	ee25 5b07 	vmul.f64	d5, d5, d7
 801073c:	f241 3310 	movw	r3, #4880	; 0x1310
 8010740:	443b      	add	r3, r7
 8010742:	ed93 4b00 	vldr	d4, [r3]
 8010746:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 801074a:	ed93 7b00 	vldr	d7, [r3]
 801074e:	ee24 7b07 	vmul.f64	d7, d4, d7
 8010752:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010756:	ee36 7b07 	vadd.f64	d7, d6, d7
  t60_re = (((t244.re * 6.123233995736766E-17 + t245.re * 6.123233995736766E-17)
 801075a:	f241 2350 	movw	r3, #4688	; 0x1250
 801075e:	443b      	add	r3, r7
 8010760:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8010910 <G_q+0xe4f0>
 8010764:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010768:	ed83 7b00 	vstr	d7, [r3]
             t12_im)) - 6.123233995736766E-17;
  b_t10_re = ((t244.im * 6.123233995736766E-17 + t245.im * 6.123233995736766E-17)
 801076c:	f241 03b0 	movw	r3, #4272	; 0x10b0
 8010770:	443b      	add	r3, r7
 8010772:	ed93 7b02 	vldr	d7, [r3, #8]
 8010776:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8010910 <G_q+0xe4f0>
 801077a:	ee27 6b06 	vmul.f64	d6, d7, d6
 801077e:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 8010782:	ed93 7b02 	vldr	d7, [r3, #8]
 8010786:	ed9f 5b62 	vldr	d5, [pc, #392]	; 8010910 <G_q+0xe4f0>
 801078a:	ee27 7b05 	vmul.f64	d7, d7, d5
 801078e:	ee36 6b07 	vadd.f64	d6, d6, d7
              + (t16_re * t20_im + t16_im * t20_re)) + (t23_re * t12_im + t3_im *
 8010792:	f241 3368 	movw	r3, #4968	; 0x1368
 8010796:	443b      	add	r3, r7
 8010798:	ed93 5b00 	vldr	d5, [r3]
 801079c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80107a0:	ed93 7b00 	vldr	d7, [r3]
 80107a4:	ee25 5b07 	vmul.f64	d5, d5, d7
 80107a8:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80107ac:	ed93 4b00 	vldr	d4, [r3]
 80107b0:	f241 3348 	movw	r3, #4936	; 0x1348
 80107b4:	443b      	add	r3, r7
 80107b6:	ed93 7b00 	vldr	d7, [r3]
 80107ba:	ee24 7b07 	vmul.f64	d7, d4, d7
 80107be:	ee35 7b07 	vadd.f64	d7, d5, d7
 80107c2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80107c6:	f241 3330 	movw	r3, #4912	; 0x1330
 80107ca:	443b      	add	r3, r7
 80107cc:	ed93 5b00 	vldr	d5, [r3]
 80107d0:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80107d4:	ed93 7b00 	vldr	d7, [r3]
 80107d8:	ee25 5b07 	vmul.f64	d5, d5, d7
 80107dc:	f241 3310 	movw	r3, #4880	; 0x1310
 80107e0:	443b      	add	r3, r7
 80107e2:	ed93 4b00 	vldr	d4, [r3]
 80107e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80107ea:	443b      	add	r3, r7
 80107ec:	ed93 7b00 	vldr	d7, [r3]
 80107f0:	ee24 7b07 	vmul.f64	d7, d4, d7
 80107f4:	ee35 7b07 	vadd.f64	d7, d5, d7
  b_t10_re = ((t244.im * 6.123233995736766E-17 + t245.im * 6.123233995736766E-17)
 80107f8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80107fc:	f241 3338 	movw	r3, #4920	; 0x1338
 8010800:	443b      	add	r3, r7
 8010802:	ed83 7b00 	vstr	d7, [r3]
    t12_re);
  if (t256.im == 0.0) {
 8010806:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 801080a:	ed93 7b02 	vldr	d7, [r3, #8]
 801080e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010816:	d115      	bne.n	8010844 <G_q+0xe424>
    t20_im = t256.re / 2.0;
 8010818:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 801081c:	ed93 6b00 	vldr	d6, [r3]
 8010820:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010824:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010828:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 801082c:	ed83 7b00 	vstr	d7, [r3]
    t85_im = 0.0;
 8010830:	f04f 0300 	mov.w	r3, #0
 8010834:	f04f 0400 	mov.w	r4, #0
 8010838:	f241 3218 	movw	r2, #4888	; 0x1318
 801083c:	443a      	add	r2, r7
 801083e:	e9c2 3400 	strd	r3, r4, [r2]
 8010842:	e037      	b.n	80108b4 <G_q+0xe494>
  } else if (t256.re == 0.0) {
 8010844:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8010848:	ed93 7b00 	vldr	d7, [r3]
 801084c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010854:	d115      	bne.n	8010882 <G_q+0xe462>
    t20_im = 0.0;
 8010856:	f04f 0300 	mov.w	r3, #0
 801085a:	f04f 0400 	mov.w	r4, #0
 801085e:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8010862:	e9c2 3400 	strd	r3, r4, [r2]
    t85_im = t256.im / 2.0;
 8010866:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 801086a:	ed93 6b02 	vldr	d6, [r3, #8]
 801086e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010872:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010876:	f241 3318 	movw	r3, #4888	; 0x1318
 801087a:	443b      	add	r3, r7
 801087c:	ed83 7b00 	vstr	d7, [r3]
 8010880:	e018      	b.n	80108b4 <G_q+0xe494>
  } else {
    t20_im = t256.re / 2.0;
 8010882:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8010886:	ed93 6b00 	vldr	d6, [r3]
 801088a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801088e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010892:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8010896:	ed83 7b00 	vstr	d7, [r3]
    t85_im = t256.im / 2.0;
 801089a:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 801089e:	ed93 6b02 	vldr	d6, [r3, #8]
 80108a2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80108a6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80108aa:	f241 3318 	movw	r3, #4888	; 0x1318
 80108ae:	443b      	add	r3, r7
 80108b0:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t257.im == 0.0) {
 80108b4:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 80108b8:	ed93 7b02 	vldr	d7, [r3, #8]
 80108bc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80108c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108c4:	d12a      	bne.n	801091c <G_q+0xe4fc>
    t34_re = t257.re / 2.0;
 80108c6:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 80108ca:	ed93 6b00 	vldr	d6, [r3]
 80108ce:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80108d2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80108d6:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80108da:	443b      	add	r3, r7
 80108dc:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 80108e0:	f04f 0300 	mov.w	r3, #0
 80108e4:	f04f 0400 	mov.w	r4, #0
 80108e8:	f241 32b0 	movw	r2, #5040	; 0x13b0
 80108ec:	443a      	add	r2, r7
 80108ee:	e9c2 3400 	strd	r3, r4, [r2]
 80108f2:	e04d      	b.n	8010990 <G_q+0xe570>
 80108f4:	f3af 8000 	nop.w
 80108f8:	33145c07 	.word	0x33145c07
 80108fc:	3c81a626 	.word	0x3c81a626
 8010900:	858a5d48 	.word	0x858a5d48
 8010904:	394377ce 	.word	0x394377ce
	...
 8010910:	33145c07 	.word	0x33145c07
 8010914:	3c91a626 	.word	0x3c91a626
 8010918:	ffffef70 	.word	0xffffef70
  } else if (t257.re == 0.0) {
 801091c:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8010920:	ed93 7b00 	vldr	d7, [r3]
 8010924:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801092c:	d116      	bne.n	801095c <G_q+0xe53c>
    t34_re = 0.0;
 801092e:	f04f 0300 	mov.w	r3, #0
 8010932:	f04f 0400 	mov.w	r4, #0
 8010936:	f241 32b8 	movw	r2, #5048	; 0x13b8
 801093a:	443a      	add	r2, r7
 801093c:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t257.im / 2.0;
 8010940:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8010944:	ed93 6b02 	vldr	d6, [r3, #8]
 8010948:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801094c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010950:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8010954:	443b      	add	r3, r7
 8010956:	ed83 7b00 	vstr	d7, [r3]
 801095a:	e019      	b.n	8010990 <G_q+0xe570>
  } else {
    t34_re = t257.re / 2.0;
 801095c:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8010960:	ed93 6b00 	vldr	d6, [r3]
 8010964:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010968:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801096c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8010970:	443b      	add	r3, r7
 8010972:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t257.im / 2.0;
 8010976:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 801097a:	ed93 6b02 	vldr	d6, [r3, #8]
 801097e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010982:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010986:	f241 33b0 	movw	r3, #5040	; 0x13b0
 801098a:	443b      	add	r3, r7
 801098c:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_im += t34_re;
 8010990:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8010994:	ed93 6b00 	vldr	d6, [r3]
 8010998:	f241 33b8 	movw	r3, #5048	; 0x13b8
 801099c:	443b      	add	r3, r7
 801099e:	ed93 7b00 	vldr	d7, [r3]
 80109a2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80109a6:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80109aa:	ed83 7b00 	vstr	d7, [r3]
  t85_im += t34_im;
 80109ae:	f241 3318 	movw	r3, #4888	; 0x1318
 80109b2:	443b      	add	r3, r7
 80109b4:	ed93 6b00 	vldr	d6, [r3]
 80109b8:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80109bc:	443b      	add	r3, r7
 80109be:	ed93 7b00 	vldr	d7, [r3]
 80109c2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80109c6:	f241 3318 	movw	r3, #4888	; 0x1318
 80109ca:	443b      	add	r3, r7
 80109cc:	ed83 7b00 	vstr	d7, [r3]
  t3_im = (t258.re * 0.0 - t258.im * 0.5) - (t259.re * 0.0 - t259.im * 0.5);
 80109d0:	f241 1310 	movw	r3, #4368	; 0x1110
 80109d4:	443b      	add	r3, r7
 80109d6:	ed93 7b00 	vldr	d7, [r3]
 80109da:	ed9f 6bd5 	vldr	d6, [pc, #852]	; 8010d30 <G_q+0xe910>
 80109de:	ee27 6b06 	vmul.f64	d6, d7, d6
 80109e2:	f241 1310 	movw	r3, #4368	; 0x1110
 80109e6:	443b      	add	r3, r7
 80109e8:	ed93 7b02 	vldr	d7, [r3, #8]
 80109ec:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80109f0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80109f4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80109f8:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 80109fc:	ed93 7b00 	vldr	d7, [r3]
 8010a00:	ed9f 5bcb 	vldr	d5, [pc, #812]	; 8010d30 <G_q+0xe910>
 8010a04:	ee27 5b05 	vmul.f64	d5, d7, d5
 8010a08:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8010a0c:	ed93 7b02 	vldr	d7, [r3, #8]
 8010a10:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8010a14:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010a18:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010a1c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010a20:	f241 3310 	movw	r3, #4880	; 0x1310
 8010a24:	443b      	add	r3, r7
 8010a26:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t258.re * 0.5 + t258.im * 0.0) - (t259.re * 0.5 + t259.im * 0.0);
 8010a2a:	f241 1310 	movw	r3, #4368	; 0x1110
 8010a2e:	443b      	add	r3, r7
 8010a30:	ed93 7b00 	vldr	d7, [r3]
 8010a34:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8010a38:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010a3c:	f241 1310 	movw	r3, #4368	; 0x1110
 8010a40:	443b      	add	r3, r7
 8010a42:	ed93 7b02 	vldr	d7, [r3, #8]
 8010a46:	ed9f 5bba 	vldr	d5, [pc, #744]	; 8010d30 <G_q+0xe910>
 8010a4a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010a4e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010a52:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8010a56:	ed93 7b00 	vldr	d7, [r3]
 8010a5a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010a5e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8010a62:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8010a66:	ed93 7b02 	vldr	d7, [r3, #8]
 8010a6a:	ed9f 4bb1 	vldr	d4, [pc, #708]	; 8010d30 <G_q+0xe910>
 8010a6e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010a72:	ee35 7b07 	vadd.f64	d7, d5, d7
 8010a76:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010a7a:	f241 3378 	movw	r3, #4984	; 0x1378
 8010a7e:	443b      	add	r3, r7
 8010a80:	ed83 7b00 	vstr	d7, [r3]
  if (t262.im == 0.0) {
 8010a84:	f241 1330 	movw	r3, #4400	; 0x1130
 8010a88:	443b      	add	r3, r7
 8010a8a:	ed93 7b02 	vldr	d7, [r3, #8]
 8010a8e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a96:	d117      	bne.n	8010ac8 <G_q+0xe6a8>
    t13_im = t262.re / 2.0;
 8010a98:	f241 1330 	movw	r3, #4400	; 0x1130
 8010a9c:	443b      	add	r3, r7
 8010a9e:	ed93 6b00 	vldr	d6, [r3]
 8010aa2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010aa6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010aaa:	f241 3370 	movw	r3, #4976	; 0x1370
 8010aae:	443b      	add	r3, r7
 8010ab0:	ed83 7b00 	vstr	d7, [r3]
    t16_re = 0.0;
 8010ab4:	f04f 0300 	mov.w	r3, #0
 8010ab8:	f04f 0400 	mov.w	r4, #0
 8010abc:	f241 3268 	movw	r2, #4968	; 0x1368
 8010ac0:	443a      	add	r2, r7
 8010ac2:	e9c2 3400 	strd	r3, r4, [r2]
 8010ac6:	e03d      	b.n	8010b44 <G_q+0xe724>
  } else if (t262.re == 0.0) {
 8010ac8:	f241 1330 	movw	r3, #4400	; 0x1130
 8010acc:	443b      	add	r3, r7
 8010ace:	ed93 7b00 	vldr	d7, [r3]
 8010ad2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ada:	d117      	bne.n	8010b0c <G_q+0xe6ec>
    t13_im = 0.0;
 8010adc:	f04f 0300 	mov.w	r3, #0
 8010ae0:	f04f 0400 	mov.w	r4, #0
 8010ae4:	f241 3270 	movw	r2, #4976	; 0x1370
 8010ae8:	443a      	add	r2, r7
 8010aea:	e9c2 3400 	strd	r3, r4, [r2]
    t16_re = t262.im / 2.0;
 8010aee:	f241 1330 	movw	r3, #4400	; 0x1130
 8010af2:	443b      	add	r3, r7
 8010af4:	ed93 6b02 	vldr	d6, [r3, #8]
 8010af8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010afc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010b00:	f241 3368 	movw	r3, #4968	; 0x1368
 8010b04:	443b      	add	r3, r7
 8010b06:	ed83 7b00 	vstr	d7, [r3]
 8010b0a:	e01b      	b.n	8010b44 <G_q+0xe724>
  } else {
    t13_im = t262.re / 2.0;
 8010b0c:	f241 1330 	movw	r3, #4400	; 0x1130
 8010b10:	443b      	add	r3, r7
 8010b12:	ed93 6b00 	vldr	d6, [r3]
 8010b16:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010b1a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010b1e:	f241 3370 	movw	r3, #4976	; 0x1370
 8010b22:	443b      	add	r3, r7
 8010b24:	ed83 7b00 	vstr	d7, [r3]
    t16_re = t262.im / 2.0;
 8010b28:	f241 1330 	movw	r3, #4400	; 0x1130
 8010b2c:	443b      	add	r3, r7
 8010b2e:	ed93 6b02 	vldr	d6, [r3, #8]
 8010b32:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010b36:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010b3a:	f241 3368 	movw	r3, #4968	; 0x1368
 8010b3e:	443b      	add	r3, r7
 8010b40:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t263.im == 0.0) {
 8010b44:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8010b48:	ed93 7b02 	vldr	d7, [r3, #8]
 8010b4c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b54:	d116      	bne.n	8010b84 <G_q+0xe764>
    t34_re = t263.re / 2.0;
 8010b56:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8010b5a:	ed93 6b00 	vldr	d6, [r3]
 8010b5e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010b62:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010b66:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8010b6a:	443b      	add	r3, r7
 8010b6c:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8010b70:	f04f 0300 	mov.w	r3, #0
 8010b74:	f04f 0400 	mov.w	r4, #0
 8010b78:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8010b7c:	443a      	add	r2, r7
 8010b7e:	e9c2 3400 	strd	r3, r4, [r2]
 8010b82:	e039      	b.n	8010bf8 <G_q+0xe7d8>
  } else if (t263.re == 0.0) {
 8010b84:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8010b88:	ed93 7b00 	vldr	d7, [r3]
 8010b8c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b94:	d116      	bne.n	8010bc4 <G_q+0xe7a4>
    t34_re = 0.0;
 8010b96:	f04f 0300 	mov.w	r3, #0
 8010b9a:	f04f 0400 	mov.w	r4, #0
 8010b9e:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8010ba2:	443a      	add	r2, r7
 8010ba4:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t263.im / 2.0;
 8010ba8:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8010bac:	ed93 6b02 	vldr	d6, [r3, #8]
 8010bb0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010bb4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010bb8:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8010bbc:	443b      	add	r3, r7
 8010bbe:	ed83 7b00 	vstr	d7, [r3]
 8010bc2:	e019      	b.n	8010bf8 <G_q+0xe7d8>
  } else {
    t34_re = t263.re / 2.0;
 8010bc4:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8010bc8:	ed93 6b00 	vldr	d6, [r3]
 8010bcc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010bd0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010bd4:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8010bd8:	443b      	add	r3, r7
 8010bda:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t263.im / 2.0;
 8010bde:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8010be2:	ed93 6b02 	vldr	d6, [r3, #8]
 8010be6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010bea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010bee:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8010bf2:	443b      	add	r3, r7
 8010bf4:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_im = (t260.re * 0.0 - t260.im * 0.5) - (t261.re * 0.0 - t261.im * 0.5);
 8010bf8:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 8010bfc:	ed93 7b00 	vldr	d7, [r3]
 8010c00:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8010d30 <G_q+0xe910>
 8010c04:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010c08:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 8010c0c:	ed93 7b02 	vldr	d7, [r3, #8]
 8010c10:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010c14:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010c18:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010c1c:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 8010c20:	ed93 7b00 	vldr	d7, [r3]
 8010c24:	ed9f 5b42 	vldr	d5, [pc, #264]	; 8010d30 <G_q+0xe910>
 8010c28:	ee27 5b05 	vmul.f64	d5, d7, d5
 8010c2c:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 8010c30:	ed93 7b02 	vldr	d7, [r3, #8]
 8010c34:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8010c38:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010c3c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010c40:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010c44:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8010c48:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t260.re * 0.5 + t260.im * 0.0) - (t261.re * 0.5 + t261.im * 0.0);
 8010c4c:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 8010c50:	ed93 7b00 	vldr	d7, [r3]
 8010c54:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8010c58:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010c5c:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 8010c60:	ed93 7b02 	vldr	d7, [r3, #8]
 8010c64:	ed9f 5b32 	vldr	d5, [pc, #200]	; 8010d30 <G_q+0xe910>
 8010c68:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010c6c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010c70:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 8010c74:	ed93 7b00 	vldr	d7, [r3]
 8010c78:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010c7c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8010c80:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 8010c84:	ed93 7b02 	vldr	d7, [r3, #8]
 8010c88:	ed9f 4b29 	vldr	d4, [pc, #164]	; 8010d30 <G_q+0xe910>
 8010c8c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010c90:	ee35 7b07 	vadd.f64	d7, d5, d7
 8010c94:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010c98:	f241 3348 	movw	r3, #4936	; 0x1348
 8010c9c:	443b      	add	r3, r7
 8010c9e:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t13_im + t34_re) + 7.498798913309288E-33;
 8010ca2:	f241 3370 	movw	r3, #4976	; 0x1370
 8010ca6:	443b      	add	r3, r7
 8010ca8:	ed93 6b00 	vldr	d6, [r3]
 8010cac:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8010cb0:	443b      	add	r3, r7
 8010cb2:	ed93 7b00 	vldr	d7, [r3]
 8010cb6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8010cba:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8010d38 <G_q+0xe918>
 8010cbe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010cc2:	f241 3370 	movw	r3, #4976	; 0x1370
 8010cc6:	443b      	add	r3, r7
 8010cc8:	ed83 7b00 	vstr	d7, [r3]
  t16_re += t34_im;
 8010ccc:	f241 3368 	movw	r3, #4968	; 0x1368
 8010cd0:	443b      	add	r3, r7
 8010cd2:	ed93 6b00 	vldr	d6, [r3]
 8010cd6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8010cda:	443b      	add	r3, r7
 8010cdc:	ed93 7b00 	vldr	d7, [r3]
 8010ce0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8010ce4:	f241 3368 	movw	r3, #4968	; 0x1368
 8010ce8:	443b      	add	r3, r7
 8010cea:	ed83 7b00 	vstr	d7, [r3]
  if (t254.im == 0.0) {
 8010cee:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8010cf2:	ed93 7b02 	vldr	d7, [r3, #8]
 8010cf6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cfe:	d11f      	bne.n	8010d40 <G_q+0xe920>
    t12_re = t254.re / 2.0;
 8010d00:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8010d04:	ed93 6b00 	vldr	d6, [r3]
 8010d08:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010d0c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010d10:	f241 3388 	movw	r3, #5000	; 0x1388
 8010d14:	443b      	add	r3, r7
 8010d16:	ed83 7b00 	vstr	d7, [r3]
    t12_im = 0.0;
 8010d1a:	f04f 0300 	mov.w	r3, #0
 8010d1e:	f04f 0400 	mov.w	r4, #0
 8010d22:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8010d26:	e9c2 3400 	strd	r3, r4, [r2]
 8010d2a:	e041      	b.n	8010db0 <G_q+0xe990>
 8010d2c:	f3af 8000 	nop.w
	...
 8010d38:	858a5d48 	.word	0x858a5d48
 8010d3c:	394377ce 	.word	0x394377ce
  } else if (t254.re == 0.0) {
 8010d40:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8010d44:	ed93 7b00 	vldr	d7, [r3]
 8010d48:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d50:	d115      	bne.n	8010d7e <G_q+0xe95e>
    t12_re = 0.0;
 8010d52:	f04f 0300 	mov.w	r3, #0
 8010d56:	f04f 0400 	mov.w	r4, #0
 8010d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8010d5e:	443a      	add	r2, r7
 8010d60:	e9c2 3400 	strd	r3, r4, [r2]
    t12_im = t254.im / 2.0;
 8010d64:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8010d68:	ed93 6b02 	vldr	d6, [r3, #8]
 8010d6c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010d70:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010d74:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8010d78:	ed83 7b00 	vstr	d7, [r3]
 8010d7c:	e018      	b.n	8010db0 <G_q+0xe990>
  } else {
    t12_re = t254.re / 2.0;
 8010d7e:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8010d82:	ed93 6b00 	vldr	d6, [r3]
 8010d86:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010d8a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010d8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8010d92:	443b      	add	r3, r7
 8010d94:	ed83 7b00 	vstr	d7, [r3]
    t12_im = t254.im / 2.0;
 8010d98:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8010d9c:	ed93 6b02 	vldr	d6, [r3, #8]
 8010da0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010da4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010da8:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8010dac:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t255.im == 0.0) {
 8010db0:	4b25      	ldr	r3, [pc, #148]	; (8010e48 <G_q+0xea28>)
 8010db2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010db6:	443a      	add	r2, r7
 8010db8:	4413      	add	r3, r2
 8010dba:	ed93 7b02 	vldr	d7, [r3, #8]
 8010dbe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dc6:	d119      	bne.n	8010dfc <G_q+0xe9dc>
    t34_re = t255.re / 2.0;
 8010dc8:	4b1f      	ldr	r3, [pc, #124]	; (8010e48 <G_q+0xea28>)
 8010dca:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010dce:	443a      	add	r2, r7
 8010dd0:	4413      	add	r3, r2
 8010dd2:	ed93 6b00 	vldr	d6, [r3]
 8010dd6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010dda:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010dde:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8010de2:	443b      	add	r3, r7
 8010de4:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8010de8:	f04f 0300 	mov.w	r3, #0
 8010dec:	f04f 0400 	mov.w	r4, #0
 8010df0:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8010df4:	443a      	add	r2, r7
 8010df6:	e9c2 3400 	strd	r3, r4, [r2]
 8010dfa:	e047      	b.n	8010e8c <G_q+0xea6c>
  } else if (t255.re == 0.0) {
 8010dfc:	4b12      	ldr	r3, [pc, #72]	; (8010e48 <G_q+0xea28>)
 8010dfe:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010e02:	443a      	add	r2, r7
 8010e04:	4413      	add	r3, r2
 8010e06:	ed93 7b00 	vldr	d7, [r3]
 8010e0a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e12:	d11b      	bne.n	8010e4c <G_q+0xea2c>
    t34_re = 0.0;
 8010e14:	f04f 0300 	mov.w	r3, #0
 8010e18:	f04f 0400 	mov.w	r4, #0
 8010e1c:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8010e20:	443a      	add	r2, r7
 8010e22:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t255.im / 2.0;
 8010e26:	4b08      	ldr	r3, [pc, #32]	; (8010e48 <G_q+0xea28>)
 8010e28:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010e2c:	443a      	add	r2, r7
 8010e2e:	4413      	add	r3, r2
 8010e30:	ed93 6b02 	vldr	d6, [r3, #8]
 8010e34:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010e38:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010e3c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8010e40:	443b      	add	r3, r7
 8010e42:	ed83 7b00 	vstr	d7, [r3]
 8010e46:	e021      	b.n	8010e8c <G_q+0xea6c>
 8010e48:	ffffef90 	.word	0xffffef90
  } else {
    t34_re = t255.re / 2.0;
 8010e4c:	4be4      	ldr	r3, [pc, #912]	; (80111e0 <G_q+0xedc0>)
 8010e4e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010e52:	443a      	add	r2, r7
 8010e54:	4413      	add	r3, r2
 8010e56:	ed93 6b00 	vldr	d6, [r3]
 8010e5a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010e5e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010e62:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8010e66:	443b      	add	r3, r7
 8010e68:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t255.im / 2.0;
 8010e6c:	4bdc      	ldr	r3, [pc, #880]	; (80111e0 <G_q+0xedc0>)
 8010e6e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010e72:	443a      	add	r2, r7
 8010e74:	4413      	add	r3, r2
 8010e76:	ed93 6b02 	vldr	d6, [r3, #8]
 8010e7a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010e7e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010e82:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8010e86:	443b      	add	r3, r7
 8010e88:	ed83 7b00 	vstr	d7, [r3]
  }

  t23_re = (t20_im * t3_im - t85_im * t13_re) - (t16_im * t13_im - t20_re *
 8010e8c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8010e90:	ed93 6b00 	vldr	d6, [r3]
 8010e94:	f241 3310 	movw	r3, #4880	; 0x1310
 8010e98:	443b      	add	r3, r7
 8010e9a:	ed93 7b00 	vldr	d7, [r3]
 8010e9e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010ea2:	f241 3318 	movw	r3, #4888	; 0x1318
 8010ea6:	443b      	add	r3, r7
 8010ea8:	ed93 5b00 	vldr	d5, [r3]
 8010eac:	f241 3378 	movw	r3, #4984	; 0x1378
 8010eb0:	443b      	add	r3, r7
 8010eb2:	ed93 7b00 	vldr	d7, [r3]
 8010eb6:	ee25 7b07 	vmul.f64	d7, d5, d7
 8010eba:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010ebe:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8010ec2:	ed93 5b00 	vldr	d5, [r3]
 8010ec6:	f241 3370 	movw	r3, #4976	; 0x1370
 8010eca:	443b      	add	r3, r7
 8010ecc:	ed93 7b00 	vldr	d7, [r3]
 8010ed0:	ee25 5b07 	vmul.f64	d5, d5, d7
 8010ed4:	f241 3348 	movw	r3, #4936	; 0x1348
 8010ed8:	443b      	add	r3, r7
 8010eda:	ed93 4b00 	vldr	d4, [r3]
 8010ede:	f241 3368 	movw	r3, #4968	; 0x1368
 8010ee2:	443b      	add	r3, r7
 8010ee4:	ed93 7b00 	vldr	d7, [r3]
 8010ee8:	ee24 7b07 	vmul.f64	d7, d4, d7
 8010eec:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010ef0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010ef4:	f241 3330 	movw	r3, #4912	; 0x1330
 8010ef8:	443b      	add	r3, r7
 8010efa:	ed83 7b00 	vstr	d7, [r3]
    t16_re);
  t85_im = (t20_im * t13_re + t85_im * t3_im) - (t16_im * t16_re + t20_re *
 8010efe:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8010f02:	ed93 6b00 	vldr	d6, [r3]
 8010f06:	f241 3378 	movw	r3, #4984	; 0x1378
 8010f0a:	443b      	add	r3, r7
 8010f0c:	ed93 7b00 	vldr	d7, [r3]
 8010f10:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010f14:	f241 3318 	movw	r3, #4888	; 0x1318
 8010f18:	443b      	add	r3, r7
 8010f1a:	ed93 5b00 	vldr	d5, [r3]
 8010f1e:	f241 3310 	movw	r3, #4880	; 0x1310
 8010f22:	443b      	add	r3, r7
 8010f24:	ed93 7b00 	vldr	d7, [r3]
 8010f28:	ee25 7b07 	vmul.f64	d7, d5, d7
 8010f2c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010f30:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8010f34:	ed93 5b00 	vldr	d5, [r3]
 8010f38:	f241 3368 	movw	r3, #4968	; 0x1368
 8010f3c:	443b      	add	r3, r7
 8010f3e:	ed93 7b00 	vldr	d7, [r3]
 8010f42:	ee25 5b07 	vmul.f64	d5, d5, d7
 8010f46:	f241 3348 	movw	r3, #4936	; 0x1348
 8010f4a:	443b      	add	r3, r7
 8010f4c:	ed93 4b00 	vldr	d4, [r3]
 8010f50:	f241 3370 	movw	r3, #4976	; 0x1370
 8010f54:	443b      	add	r3, r7
 8010f56:	ed93 7b00 	vldr	d7, [r3]
 8010f5a:	ee24 7b07 	vmul.f64	d7, d4, d7
 8010f5e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8010f62:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010f66:	f241 3318 	movw	r3, #4888	; 0x1318
 8010f6a:	443b      	add	r3, r7
 8010f6c:	ed83 7b00 	vstr	d7, [r3]
    t13_im);
  t12_re += t34_re;
 8010f70:	f241 3388 	movw	r3, #5000	; 0x1388
 8010f74:	443b      	add	r3, r7
 8010f76:	ed93 6b00 	vldr	d6, [r3]
 8010f7a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8010f7e:	443b      	add	r3, r7
 8010f80:	ed93 7b00 	vldr	d7, [r3]
 8010f84:	ee36 7b07 	vadd.f64	d7, d6, d7
 8010f88:	f241 3388 	movw	r3, #5000	; 0x1388
 8010f8c:	443b      	add	r3, r7
 8010f8e:	ed83 7b00 	vstr	d7, [r3]
  t12_im += t34_im;
 8010f92:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8010f96:	ed93 6b00 	vldr	d6, [r3]
 8010f9a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8010f9e:	443b      	add	r3, r7
 8010fa0:	ed93 7b00 	vldr	d7, [r3]
 8010fa4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8010fa8:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8010fac:	ed83 7b00 	vstr	d7, [r3]
  t70_im += t76_re;
 8010fb0:	f241 23c8 	movw	r3, #4808	; 0x12c8
 8010fb4:	443b      	add	r3, r7
 8010fb6:	f241 21c8 	movw	r1, #4808	; 0x12c8
 8010fba:	4439      	add	r1, r7
 8010fbc:	f241 22a8 	movw	r2, #4776	; 0x12a8
 8010fc0:	443a      	add	r2, r7
 8010fc2:	ed91 6b00 	vldr	d6, [r1]
 8010fc6:	ed92 7b00 	vldr	d7, [r2]
 8010fca:	ee36 7b07 	vadd.f64	d7, d6, d7
 8010fce:	ed83 7b00 	vstr	d7, [r3]
  t43_im += t72_re;
 8010fd2:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8010fd6:	f241 22f8 	movw	r2, #4856	; 0x12f8
 8010fda:	443a      	add	r2, r7
 8010fdc:	ed92 6b00 	vldr	d6, [r2]
 8010fe0:	ed93 7b00 	vldr	d7, [r3]
 8010fe4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8010fe8:	f241 23f8 	movw	r3, #4856	; 0x12f8
 8010fec:	443b      	add	r3, r7
 8010fee:	ed83 7b00 	vstr	d7, [r3]
  t55_im = (t58_im * t60_re - t70_re * b_t10_re) - (t23_re * t12_re - t85_im *
 8010ff2:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8010ff6:	f241 2350 	movw	r3, #4688	; 0x1250
 8010ffa:	443b      	add	r3, r7
 8010ffc:	ed92 6b00 	vldr	d6, [r2]
 8011000:	ed93 7b00 	vldr	d7, [r3]
 8011004:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011008:	f241 23d0 	movw	r3, #4816	; 0x12d0
 801100c:	443b      	add	r3, r7
 801100e:	ed93 5b00 	vldr	d5, [r3]
 8011012:	f241 3338 	movw	r3, #4920	; 0x1338
 8011016:	443b      	add	r3, r7
 8011018:	ed93 7b00 	vldr	d7, [r3]
 801101c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8011020:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011024:	f241 3330 	movw	r3, #4912	; 0x1330
 8011028:	443b      	add	r3, r7
 801102a:	ed93 5b00 	vldr	d5, [r3]
 801102e:	f241 3388 	movw	r3, #5000	; 0x1388
 8011032:	443b      	add	r3, r7
 8011034:	ed93 7b00 	vldr	d7, [r3]
 8011038:	ee25 5b07 	vmul.f64	d5, d5, d7
 801103c:	f241 3318 	movw	r3, #4888	; 0x1318
 8011040:	443b      	add	r3, r7
 8011042:	ed93 4b00 	vldr	d4, [r3]
 8011046:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 801104a:	ed93 7b00 	vldr	d7, [r3]
 801104e:	ee24 7b07 	vmul.f64	d7, d4, d7
 8011052:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011056:	ee36 7b47 	vsub.f64	d7, d6, d7
 801105a:	f241 23d8 	movw	r3, #4824	; 0x12d8
 801105e:	443b      	add	r3, r7
 8011060:	ed83 7b00 	vstr	d7, [r3]
    t12_im);
  t70_re = (t58_im * b_t10_re + t70_re * t60_re) - (t23_re * t12_im + t85_im *
 8011064:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8011068:	ed93 6b00 	vldr	d6, [r3]
 801106c:	f241 3338 	movw	r3, #4920	; 0x1338
 8011070:	443b      	add	r3, r7
 8011072:	ed93 7b00 	vldr	d7, [r3]
 8011076:	ee26 6b07 	vmul.f64	d6, d6, d7
 801107a:	f241 22d0 	movw	r2, #4816	; 0x12d0
 801107e:	443a      	add	r2, r7
 8011080:	f241 2350 	movw	r3, #4688	; 0x1250
 8011084:	443b      	add	r3, r7
 8011086:	ed92 5b00 	vldr	d5, [r2]
 801108a:	ed93 7b00 	vldr	d7, [r3]
 801108e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8011092:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011096:	f241 3330 	movw	r3, #4912	; 0x1330
 801109a:	443b      	add	r3, r7
 801109c:	ed93 5b00 	vldr	d5, [r3]
 80110a0:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80110a4:	ed93 7b00 	vldr	d7, [r3]
 80110a8:	ee25 5b07 	vmul.f64	d5, d5, d7
 80110ac:	f241 3318 	movw	r3, #4888	; 0x1318
 80110b0:	443b      	add	r3, r7
 80110b2:	ed93 4b00 	vldr	d4, [r3]
 80110b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80110ba:	443b      	add	r3, r7
 80110bc:	ed93 7b00 	vldr	d7, [r3]
 80110c0:	ee24 7b07 	vmul.f64	d7, d4, d7
 80110c4:	ee35 7b07 	vadd.f64	d7, d5, d7
 80110c8:	f241 23d0 	movw	r3, #4816	; 0x12d0
 80110cc:	443b      	add	r3, r7
 80110ce:	ee36 7b47 	vsub.f64	d7, d6, d7
 80110d2:	ed83 7b00 	vstr	d7, [r3]
    t12_re);
  t72_re = (t280.re * 0.0 - t280.im * 0.5) - (t281.re * 0.0 - t281.im * 0.5);
 80110d6:	f241 13b0 	movw	r3, #4528	; 0x11b0
 80110da:	443b      	add	r3, r7
 80110dc:	ed93 7b00 	vldr	d7, [r3]
 80110e0:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 80111d8 <G_q+0xedb8>
 80110e4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80110e8:	f241 13b0 	movw	r3, #4528	; 0x11b0
 80110ec:	443b      	add	r3, r7
 80110ee:	ed93 7b02 	vldr	d7, [r3, #8]
 80110f2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80110f6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80110fa:	ee36 6b47 	vsub.f64	d6, d6, d7
 80110fe:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8011102:	ed93 7b00 	vldr	d7, [r3]
 8011106:	ed9f 5b34 	vldr	d5, [pc, #208]	; 80111d8 <G_q+0xedb8>
 801110a:	ee27 5b05 	vmul.f64	d5, d7, d5
 801110e:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8011112:	ed93 7b02 	vldr	d7, [r3, #8]
 8011116:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 801111a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801111e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011122:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8011126:	ee36 7b47 	vsub.f64	d7, d6, d7
 801112a:	ed83 7b00 	vstr	d7, [r3]
  t74_re = (t280.re * 0.5 + t280.im * 0.0) - (t281.re * 0.5 + t281.im * 0.0);
 801112e:	f241 13b0 	movw	r3, #4528	; 0x11b0
 8011132:	443b      	add	r3, r7
 8011134:	ed93 7b00 	vldr	d7, [r3]
 8011138:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 801113c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011140:	f241 13b0 	movw	r3, #4528	; 0x11b0
 8011144:	443b      	add	r3, r7
 8011146:	ed93 7b02 	vldr	d7, [r3, #8]
 801114a:	ed9f 5b23 	vldr	d5, [pc, #140]	; 80111d8 <G_q+0xedb8>
 801114e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011152:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011156:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 801115a:	ed93 7b00 	vldr	d7, [r3]
 801115e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8011162:	ee27 5b05 	vmul.f64	d5, d7, d5
 8011166:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 801116a:	ed93 7b02 	vldr	d7, [r3, #8]
 801116e:	ed9f 4b1a 	vldr	d4, [pc, #104]	; 80111d8 <G_q+0xedb8>
 8011172:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011176:	ee35 7b07 	vadd.f64	d7, d5, d7
 801117a:	f241 23b8 	movw	r3, #4792	; 0x12b8
 801117e:	443b      	add	r3, r7
 8011180:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011184:	ed83 7b00 	vstr	d7, [r3]
  t74_im = (t282.re * 0.0 - t282.im * 0.5) - (t283.re * 0.0 - t283.im * 0.5);
 8011188:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 801118c:	ed93 7b00 	vldr	d7, [r3]
 8011190:	ed9f 6b11 	vldr	d6, [pc, #68]	; 80111d8 <G_q+0xedb8>
 8011194:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011198:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 801119c:	ed93 7b02 	vldr	d7, [r3, #8]
 80111a0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80111a4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80111a8:	ee36 6b47 	vsub.f64	d6, d6, d7
 80111ac:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80111b0:	ed93 7b00 	vldr	d7, [r3]
 80111b4:	ed9f 5b08 	vldr	d5, [pc, #32]	; 80111d8 <G_q+0xedb8>
 80111b8:	ee27 5b05 	vmul.f64	d5, d7, d5
 80111bc:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80111c0:	ed93 7b02 	vldr	d7, [r3, #8]
 80111c4:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80111c8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80111cc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80111d0:	f241 23b0 	movw	r3, #4784	; 0x12b0
 80111d4:	443b      	add	r3, r7
 80111d6:	e005      	b.n	80111e4 <G_q+0xedc4>
	...
 80111e0:	ffffef90 	.word	0xffffef90
 80111e4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80111e8:	ed83 7b00 	vstr	d7, [r3]
  t55_re = (t282.re * 0.5 + t282.im * 0.0) - (t283.re * 0.5 + t283.im * 0.0);
 80111ec:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 80111f0:	ed93 7b00 	vldr	d7, [r3]
 80111f4:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80111f8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80111fc:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8011200:	ed93 7b02 	vldr	d7, [r3, #8]
 8011204:	ed9f 5bb6 	vldr	d5, [pc, #728]	; 80114e0 <G_q+0xf0c0>
 8011208:	ee27 7b05 	vmul.f64	d7, d7, d5
 801120c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011210:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011214:	ed93 7b00 	vldr	d7, [r3]
 8011218:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801121c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8011220:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011224:	ed93 7b02 	vldr	d7, [r3, #8]
 8011228:	ed9f 4bad 	vldr	d4, [pc, #692]	; 80114e0 <G_q+0xf0c0>
 801122c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011230:	ee35 7b07 	vadd.f64	d7, d5, d7
 8011234:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011238:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 801123c:	ed83 7b00 	vstr	d7, [r3]
  t12_re = (t294.re * 0.0 - t294.im * 3.061616997868383E-17) - (t295.re * 0.0 -
 8011240:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8011244:	ed93 7b00 	vldr	d7, [r3]
 8011248:	ed9f 6ba5 	vldr	d6, [pc, #660]	; 80114e0 <G_q+0xf0c0>
 801124c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011250:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8011254:	ed93 7b02 	vldr	d7, [r3, #8]
 8011258:	ed9f 5ba5 	vldr	d5, [pc, #660]	; 80114f0 <G_q+0xf0d0>
 801125c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011260:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011264:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 8011268:	ed93 7b00 	vldr	d7, [r3]
 801126c:	ed9f 5b9c 	vldr	d5, [pc, #624]	; 80114e0 <G_q+0xf0c0>
 8011270:	ee27 5b05 	vmul.f64	d5, d7, d5
    t295.im * 3.061616997868383E-17);
 8011274:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 8011278:	ed93 7b02 	vldr	d7, [r3, #8]
 801127c:	ed9f 4b9c 	vldr	d4, [pc, #624]	; 80114f0 <G_q+0xf0d0>
 8011280:	ee27 7b04 	vmul.f64	d7, d7, d4
  t12_re = (t294.re * 0.0 - t294.im * 3.061616997868383E-17) - (t295.re * 0.0 -
 8011284:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011288:	ee36 7b47 	vsub.f64	d7, d6, d7
 801128c:	f241 3388 	movw	r3, #5000	; 0x1388
 8011290:	443b      	add	r3, r7
 8011292:	ed83 7b00 	vstr	d7, [r3]
  t12_im = (t294.re * 3.061616997868383E-17 + t294.im * 0.0) - (t295.re *
 8011296:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 801129a:	ed93 7b00 	vldr	d7, [r3]
 801129e:	ed9f 6b94 	vldr	d6, [pc, #592]	; 80114f0 <G_q+0xf0d0>
 80112a2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80112a6:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80112aa:	ed93 7b02 	vldr	d7, [r3, #8]
 80112ae:	ed9f 5b8c 	vldr	d5, [pc, #560]	; 80114e0 <G_q+0xf0c0>
 80112b2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80112b6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80112ba:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 80112be:	ed93 7b00 	vldr	d7, [r3]
 80112c2:	ed9f 5b8b 	vldr	d5, [pc, #556]	; 80114f0 <G_q+0xf0d0>
 80112c6:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t295.im * 0.0);
 80112ca:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 80112ce:	ed93 7b02 	vldr	d7, [r3, #8]
 80112d2:	ed9f 4b83 	vldr	d4, [pc, #524]	; 80114e0 <G_q+0xf0c0>
 80112d6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80112da:	ee35 7b07 	vadd.f64	d7, d5, d7
  t12_im = (t294.re * 3.061616997868383E-17 + t294.im * 0.0) - (t295.re *
 80112de:	ee36 7b47 	vsub.f64	d7, d6, d7
 80112e2:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80112e6:	ed83 7b00 	vstr	d7, [r3]
  t23_re = (t292.re * 0.0 - t292.im * 0.5) - (t293.re * 0.0 - t293.im * 0.5);
 80112ea:	f241 2310 	movw	r3, #4624	; 0x1210
 80112ee:	443b      	add	r3, r7
 80112f0:	ed93 7b00 	vldr	d7, [r3]
 80112f4:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80114e0 <G_q+0xf0c0>
 80112f8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80112fc:	f241 2310 	movw	r3, #4624	; 0x1210
 8011300:	443b      	add	r3, r7
 8011302:	ed93 7b02 	vldr	d7, [r3, #8]
 8011306:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801130a:	ee27 7b05 	vmul.f64	d7, d7, d5
 801130e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011312:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8011316:	ed93 7b00 	vldr	d7, [r3]
 801131a:	ed9f 5b71 	vldr	d5, [pc, #452]	; 80114e0 <G_q+0xf0c0>
 801131e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8011322:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8011326:	ed93 7b02 	vldr	d7, [r3, #8]
 801132a:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 801132e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011332:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011336:	ee36 7b47 	vsub.f64	d7, d6, d7
 801133a:	f241 3330 	movw	r3, #4912	; 0x1330
 801133e:	443b      	add	r3, r7
 8011340:	ed83 7b00 	vstr	d7, [r3]
  t3_im = (t292.re * 0.5 + t292.im * 0.0) - (t293.re * 0.5 + t293.im * 0.0);
 8011344:	f241 2310 	movw	r3, #4624	; 0x1210
 8011348:	443b      	add	r3, r7
 801134a:	ed93 7b00 	vldr	d7, [r3]
 801134e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8011352:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011356:	f241 2310 	movw	r3, #4624	; 0x1210
 801135a:	443b      	add	r3, r7
 801135c:	ed93 7b02 	vldr	d7, [r3, #8]
 8011360:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 80114e0 <G_q+0xf0c0>
 8011364:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011368:	ee36 6b07 	vadd.f64	d6, d6, d7
 801136c:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8011370:	ed93 7b00 	vldr	d7, [r3]
 8011374:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8011378:	ee27 5b05 	vmul.f64	d5, d7, d5
 801137c:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8011380:	ed93 7b02 	vldr	d7, [r3, #8]
 8011384:	ed9f 4b56 	vldr	d4, [pc, #344]	; 80114e0 <G_q+0xf0c0>
 8011388:	ee27 7b04 	vmul.f64	d7, d7, d4
 801138c:	ee35 7b07 	vadd.f64	d7, d5, d7
 8011390:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011394:	f241 3310 	movw	r3, #4880	; 0x1310
 8011398:	443b      	add	r3, r7
 801139a:	ed83 7b00 	vstr	d7, [r3]
  if (t290.im == 0.0) {
 801139e:	f241 13f0 	movw	r3, #4592	; 0x11f0
 80113a2:	443b      	add	r3, r7
 80113a4:	ed93 7b02 	vldr	d7, [r3, #8]
 80113a8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80113ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113b0:	d117      	bne.n	80113e2 <G_q+0xefc2>
    t13_re = t290.re / 2.0;
 80113b2:	f241 13f0 	movw	r3, #4592	; 0x11f0
 80113b6:	443b      	add	r3, r7
 80113b8:	ed93 6b00 	vldr	d6, [r3]
 80113bc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80113c0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80113c4:	f241 3378 	movw	r3, #4984	; 0x1378
 80113c8:	443b      	add	r3, r7
 80113ca:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 80113ce:	f04f 0300 	mov.w	r3, #0
 80113d2:	f04f 0400 	mov.w	r4, #0
 80113d6:	f241 3270 	movw	r2, #4976	; 0x1370
 80113da:	443a      	add	r2, r7
 80113dc:	e9c2 3400 	strd	r3, r4, [r2]
 80113e0:	e03d      	b.n	801145e <G_q+0xf03e>
  } else if (t290.re == 0.0) {
 80113e2:	f241 13f0 	movw	r3, #4592	; 0x11f0
 80113e6:	443b      	add	r3, r7
 80113e8:	ed93 7b00 	vldr	d7, [r3]
 80113ec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80113f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113f4:	d117      	bne.n	8011426 <G_q+0xf006>
    t13_re = 0.0;
 80113f6:	f04f 0300 	mov.w	r3, #0
 80113fa:	f04f 0400 	mov.w	r4, #0
 80113fe:	f241 3278 	movw	r2, #4984	; 0x1378
 8011402:	443a      	add	r2, r7
 8011404:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t290.im / 2.0;
 8011408:	f241 13f0 	movw	r3, #4592	; 0x11f0
 801140c:	443b      	add	r3, r7
 801140e:	ed93 6b02 	vldr	d6, [r3, #8]
 8011412:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011416:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801141a:	f241 3370 	movw	r3, #4976	; 0x1370
 801141e:	443b      	add	r3, r7
 8011420:	ed83 7b00 	vstr	d7, [r3]
 8011424:	e01b      	b.n	801145e <G_q+0xf03e>
  } else {
    t13_re = t290.re / 2.0;
 8011426:	f241 13f0 	movw	r3, #4592	; 0x11f0
 801142a:	443b      	add	r3, r7
 801142c:	ed93 6b00 	vldr	d6, [r3]
 8011430:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011434:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011438:	f241 3378 	movw	r3, #4984	; 0x1378
 801143c:	443b      	add	r3, r7
 801143e:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t290.im / 2.0;
 8011442:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011446:	443b      	add	r3, r7
 8011448:	ed93 6b02 	vldr	d6, [r3, #8]
 801144c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011450:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011454:	f241 3370 	movw	r3, #4976	; 0x1370
 8011458:	443b      	add	r3, r7
 801145a:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t291.im == 0.0) {
 801145e:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8011462:	ed93 7b02 	vldr	d7, [r3, #8]
 8011466:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801146a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801146e:	d116      	bne.n	801149e <G_q+0xf07e>
    t34_re = t291.re / 2.0;
 8011470:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8011474:	ed93 6b00 	vldr	d6, [r3]
 8011478:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801147c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011480:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8011484:	443b      	add	r3, r7
 8011486:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 801148a:	f04f 0300 	mov.w	r3, #0
 801148e:	f04f 0400 	mov.w	r4, #0
 8011492:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8011496:	443a      	add	r2, r7
 8011498:	e9c2 3400 	strd	r3, r4, [r2]
 801149c:	e046      	b.n	801152c <G_q+0xf10c>
  } else if (t291.re == 0.0) {
 801149e:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 80114a2:	ed93 7b00 	vldr	d7, [r3]
 80114a6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80114aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114ae:	d123      	bne.n	80114f8 <G_q+0xf0d8>
    t34_re = 0.0;
 80114b0:	f04f 0300 	mov.w	r3, #0
 80114b4:	f04f 0400 	mov.w	r4, #0
 80114b8:	f241 32b8 	movw	r2, #5048	; 0x13b8
 80114bc:	443a      	add	r2, r7
 80114be:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t291.im / 2.0;
 80114c2:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 80114c6:	ed93 6b02 	vldr	d6, [r3, #8]
 80114ca:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80114ce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80114d2:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80114d6:	443b      	add	r3, r7
 80114d8:	ed83 7b00 	vstr	d7, [r3]
 80114dc:	e026      	b.n	801152c <G_q+0xf10c>
 80114de:	bf00      	nop
	...
 80114e8:	858a5d48 	.word	0x858a5d48
 80114ec:	394377ce 	.word	0x394377ce
 80114f0:	33145c07 	.word	0x33145c07
 80114f4:	3c81a626 	.word	0x3c81a626
  } else {
    t34_re = t291.re / 2.0;
 80114f8:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 80114fc:	ed93 6b00 	vldr	d6, [r3]
 8011500:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011504:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011508:	f241 33b8 	movw	r3, #5048	; 0x13b8
 801150c:	443b      	add	r3, r7
 801150e:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t291.im / 2.0;
 8011512:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8011516:	ed93 6b02 	vldr	d6, [r3, #8]
 801151a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801151e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011522:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8011526:	443b      	add	r3, r7
 8011528:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re = t288.re * 3.061616997868383E-17 + t289.re * 3.061616997868383E-17;
 801152c:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8011530:	ed93 7b00 	vldr	d7, [r3]
 8011534:	ed1f 6b12 	vldr	d6, [pc, #-72]	; 80114f0 <G_q+0xf0d0>
 8011538:	ee27 6b06 	vmul.f64	d6, d7, d6
 801153c:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8011540:	ed93 7b00 	vldr	d7, [r3]
 8011544:	ed1f 5b16 	vldr	d5, [pc, #-88]	; 80114f0 <G_q+0xf0d0>
 8011548:	ee27 7b05 	vmul.f64	d7, d7, d5
 801154c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011550:	f241 3368 	movw	r3, #4968	; 0x1368
 8011554:	443b      	add	r3, r7
 8011556:	ed83 7b00 	vstr	d7, [r3]
  t16_im = t288.im * 3.061616997868383E-17 + t289.im * 3.061616997868383E-17;
 801155a:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 801155e:	ed93 7b02 	vldr	d7, [r3, #8]
 8011562:	ed1f 6b1d 	vldr	d6, [pc, #-116]	; 80114f0 <G_q+0xf0d0>
 8011566:	ee27 6b06 	vmul.f64	d6, d7, d6
 801156a:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 801156e:	ed93 7b02 	vldr	d7, [r3, #8]
 8011572:	ed1f 5b21 	vldr	d5, [pc, #-132]	; 80114f0 <G_q+0xf0d0>
 8011576:	ee27 7b05 	vmul.f64	d7, d7, d5
 801157a:	ee36 7b07 	vadd.f64	d7, d6, d7
 801157e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8011582:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t13_re + t34_re) + 7.498798913309288E-33;
 8011586:	f241 3378 	movw	r3, #4984	; 0x1378
 801158a:	443b      	add	r3, r7
 801158c:	ed93 6b00 	vldr	d6, [r3]
 8011590:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8011594:	443b      	add	r3, r7
 8011596:	ed93 7b00 	vldr	d7, [r3]
 801159a:	ee36 7b07 	vadd.f64	d7, d6, d7
 801159e:	ed1f 6b2e 	vldr	d6, [pc, #-184]	; 80114e8 <G_q+0xf0c8>
 80115a2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80115a6:	f241 3378 	movw	r3, #4984	; 0x1378
 80115aa:	443b      	add	r3, r7
 80115ac:	ed83 7b00 	vstr	d7, [r3]
  t13_im += t34_im;
 80115b0:	f241 3370 	movw	r3, #4976	; 0x1370
 80115b4:	443b      	add	r3, r7
 80115b6:	ed93 6b00 	vldr	d6, [r3]
 80115ba:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80115be:	443b      	add	r3, r7
 80115c0:	ed93 7b00 	vldr	d7, [r3]
 80115c4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80115c8:	f241 3370 	movw	r3, #4976	; 0x1370
 80115cc:	443b      	add	r3, r7
 80115ce:	ed83 7b00 	vstr	d7, [r3]
  t58_im = t284.re * 3.061616997868383E-17 + t285.re * 3.061616997868383E-17;
 80115d2:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80115d6:	ed93 7b00 	vldr	d7, [r3]
 80115da:	ed1f 6b3b 	vldr	d6, [pc, #-236]	; 80114f0 <G_q+0xf0d0>
 80115de:	ee27 6b06 	vmul.f64	d6, d7, d6
 80115e2:	4bb7      	ldr	r3, [pc, #732]	; (80118c0 <G_q+0xf4a0>)
 80115e4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80115e8:	443a      	add	r2, r7
 80115ea:	4413      	add	r3, r2
 80115ec:	ed93 7b00 	vldr	d7, [r3]
 80115f0:	ed9f 5baf 	vldr	d5, [pc, #700]	; 80118b0 <G_q+0xf490>
 80115f4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80115f8:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 80115fc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011600:	ed83 7b00 	vstr	d7, [r3]
  t60_re = t284.im * 3.061616997868383E-17 + t285.im * 3.061616997868383E-17;
 8011604:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8011608:	ed93 7b02 	vldr	d7, [r3, #8]
 801160c:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 80118b0 <G_q+0xf490>
 8011610:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011614:	4baa      	ldr	r3, [pc, #680]	; (80118c0 <G_q+0xf4a0>)
 8011616:	f241 32d0 	movw	r2, #5072	; 0x13d0
 801161a:	443a      	add	r2, r7
 801161c:	4413      	add	r3, r2
 801161e:	ed93 7b02 	vldr	d7, [r3, #8]
 8011622:	ed9f 5ba3 	vldr	d5, [pc, #652]	; 80118b0 <G_q+0xf490>
 8011626:	ee27 7b05 	vmul.f64	d7, d7, d5
 801162a:	f241 2350 	movw	r3, #4688	; 0x1250
 801162e:	443b      	add	r3, r7
 8011630:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011634:	ed83 7b00 	vstr	d7, [r3]
  t76_re = (((t286.re * 6.123233995736766E-17 + t287.re * 6.123233995736766E-17)
 8011638:	f241 13d0 	movw	r3, #4560	; 0x11d0
 801163c:	443b      	add	r3, r7
 801163e:	ed93 7b00 	vldr	d7, [r3]
 8011642:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 80118b8 <G_q+0xf498>
 8011646:	ee27 6b06 	vmul.f64	d6, d7, d6
 801164a:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 801164e:	ed93 7b00 	vldr	d7, [r3]
 8011652:	ed9f 5b99 	vldr	d5, [pc, #612]	; 80118b8 <G_q+0xf498>
 8011656:	ee27 7b05 	vmul.f64	d7, d7, d5
 801165a:	ee36 6b07 	vadd.f64	d6, d6, d7
             + (t12_re * t23_re - t12_im * t3_im)) + (t16_re * t13_re - t16_im *
 801165e:	f241 3388 	movw	r3, #5000	; 0x1388
 8011662:	443b      	add	r3, r7
 8011664:	ed93 5b00 	vldr	d5, [r3]
 8011668:	f241 3330 	movw	r3, #4912	; 0x1330
 801166c:	443b      	add	r3, r7
 801166e:	ed93 7b00 	vldr	d7, [r3]
 8011672:	ee25 5b07 	vmul.f64	d5, d5, d7
 8011676:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 801167a:	ed93 4b00 	vldr	d4, [r3]
 801167e:	f241 3310 	movw	r3, #4880	; 0x1310
 8011682:	443b      	add	r3, r7
 8011684:	ed93 7b00 	vldr	d7, [r3]
 8011688:	ee24 7b07 	vmul.f64	d7, d4, d7
 801168c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011690:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011694:	f241 3368 	movw	r3, #4968	; 0x1368
 8011698:	443b      	add	r3, r7
 801169a:	ed93 5b00 	vldr	d5, [r3]
 801169e:	f241 3378 	movw	r3, #4984	; 0x1378
 80116a2:	443b      	add	r3, r7
 80116a4:	ed93 7b00 	vldr	d7, [r3]
 80116a8:	ee25 5b07 	vmul.f64	d5, d5, d7
 80116ac:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80116b0:	ed93 4b00 	vldr	d4, [r3]
 80116b4:	f241 3370 	movw	r3, #4976	; 0x1370
 80116b8:	443b      	add	r3, r7
 80116ba:	ed93 7b00 	vldr	d7, [r3]
 80116be:	ee24 7b07 	vmul.f64	d7, d4, d7
 80116c2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80116c6:	ee36 7b07 	vadd.f64	d7, d6, d7
  t76_re = (((t286.re * 6.123233995736766E-17 + t287.re * 6.123233995736766E-17)
 80116ca:	f241 23a8 	movw	r3, #4776	; 0x12a8
 80116ce:	443b      	add	r3, r7
 80116d0:	ed9f 6b79 	vldr	d6, [pc, #484]	; 80118b8 <G_q+0xf498>
 80116d4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80116d8:	ed83 7b00 	vstr	d7, [r3]
             t13_im)) - 6.123233995736766E-17;
  t85_im = ((t286.im * 6.123233995736766E-17 + t287.im * 6.123233995736766E-17)
 80116dc:	f241 13d0 	movw	r3, #4560	; 0x11d0
 80116e0:	443b      	add	r3, r7
 80116e2:	ed93 7b02 	vldr	d7, [r3, #8]
 80116e6:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80118b8 <G_q+0xf498>
 80116ea:	ee27 6b06 	vmul.f64	d6, d7, d6
 80116ee:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 80116f2:	ed93 7b02 	vldr	d7, [r3, #8]
 80116f6:	ed9f 5b70 	vldr	d5, [pc, #448]	; 80118b8 <G_q+0xf498>
 80116fa:	ee27 7b05 	vmul.f64	d7, d7, d5
 80116fe:	ee36 6b07 	vadd.f64	d6, d6, d7
            + (t12_re * t3_im + t12_im * t23_re)) + (t16_re * t13_im + t16_im *
 8011702:	f241 3388 	movw	r3, #5000	; 0x1388
 8011706:	443b      	add	r3, r7
 8011708:	ed93 5b00 	vldr	d5, [r3]
 801170c:	f241 3310 	movw	r3, #4880	; 0x1310
 8011710:	443b      	add	r3, r7
 8011712:	ed93 7b00 	vldr	d7, [r3]
 8011716:	ee25 5b07 	vmul.f64	d5, d5, d7
 801171a:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 801171e:	ed93 4b00 	vldr	d4, [r3]
 8011722:	f241 3330 	movw	r3, #4912	; 0x1330
 8011726:	443b      	add	r3, r7
 8011728:	ed93 7b00 	vldr	d7, [r3]
 801172c:	ee24 7b07 	vmul.f64	d7, d4, d7
 8011730:	ee35 7b07 	vadd.f64	d7, d5, d7
 8011734:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011738:	f241 3368 	movw	r3, #4968	; 0x1368
 801173c:	443b      	add	r3, r7
 801173e:	ed93 5b00 	vldr	d5, [r3]
 8011742:	f241 3370 	movw	r3, #4976	; 0x1370
 8011746:	443b      	add	r3, r7
 8011748:	ed93 7b00 	vldr	d7, [r3]
 801174c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8011750:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8011754:	ed93 4b00 	vldr	d4, [r3]
 8011758:	f241 3378 	movw	r3, #4984	; 0x1378
 801175c:	443b      	add	r3, r7
 801175e:	ed93 7b00 	vldr	d7, [r3]
 8011762:	ee24 7b07 	vmul.f64	d7, d4, d7
 8011766:	ee35 7b07 	vadd.f64	d7, d5, d7
  t85_im = ((t286.im * 6.123233995736766E-17 + t287.im * 6.123233995736766E-17)
 801176a:	ee36 7b07 	vadd.f64	d7, d6, d7
 801176e:	f241 3318 	movw	r3, #4888	; 0x1318
 8011772:	443b      	add	r3, r7
 8011774:	ed83 7b00 	vstr	d7, [r3]
    t13_re);
  if (t270.im == 0.0) {
 8011778:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 801177c:	ed93 7b02 	vldr	d7, [r3, #8]
 8011780:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011788:	d116      	bne.n	80117b8 <G_q+0xf398>
    t3_im = t270.re / 2.0;
 801178a:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 801178e:	ed93 6b00 	vldr	d6, [r3]
 8011792:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011796:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801179a:	f241 3310 	movw	r3, #4880	; 0x1310
 801179e:	443b      	add	r3, r7
 80117a0:	ed83 7b00 	vstr	d7, [r3]
    t23_re = 0.0;
 80117a4:	f04f 0300 	mov.w	r3, #0
 80117a8:	f04f 0400 	mov.w	r4, #0
 80117ac:	f241 3230 	movw	r2, #4912	; 0x1330
 80117b0:	443a      	add	r2, r7
 80117b2:	e9c2 3400 	strd	r3, r4, [r2]
 80117b6:	e039      	b.n	801182c <G_q+0xf40c>
  } else if (t270.re == 0.0) {
 80117b8:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 80117bc:	ed93 7b00 	vldr	d7, [r3]
 80117c0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80117c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117c8:	d116      	bne.n	80117f8 <G_q+0xf3d8>
    t3_im = 0.0;
 80117ca:	f04f 0300 	mov.w	r3, #0
 80117ce:	f04f 0400 	mov.w	r4, #0
 80117d2:	f241 3210 	movw	r2, #4880	; 0x1310
 80117d6:	443a      	add	r2, r7
 80117d8:	e9c2 3400 	strd	r3, r4, [r2]
    t23_re = t270.im / 2.0;
 80117dc:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 80117e0:	ed93 6b02 	vldr	d6, [r3, #8]
 80117e4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80117e8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80117ec:	f241 3330 	movw	r3, #4912	; 0x1330
 80117f0:	443b      	add	r3, r7
 80117f2:	ed83 7b00 	vstr	d7, [r3]
 80117f6:	e019      	b.n	801182c <G_q+0xf40c>
  } else {
    t3_im = t270.re / 2.0;
 80117f8:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 80117fc:	ed93 6b00 	vldr	d6, [r3]
 8011800:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011804:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011808:	f241 3310 	movw	r3, #4880	; 0x1310
 801180c:	443b      	add	r3, r7
 801180e:	ed83 7b00 	vstr	d7, [r3]
    t23_re = t270.im / 2.0;
 8011812:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 8011816:	ed93 6b02 	vldr	d6, [r3, #8]
 801181a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801181e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011822:	f241 3330 	movw	r3, #4912	; 0x1330
 8011826:	443b      	add	r3, r7
 8011828:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t271.im == 0.0) {
 801182c:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 8011830:	ed93 7b02 	vldr	d7, [r3, #8]
 8011834:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801183c:	d116      	bne.n	801186c <G_q+0xf44c>
    t34_re = t271.re / 2.0;
 801183e:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 8011842:	ed93 6b00 	vldr	d6, [r3]
 8011846:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801184a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801184e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8011852:	443b      	add	r3, r7
 8011854:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8011858:	f04f 0300 	mov.w	r3, #0
 801185c:	f04f 0400 	mov.w	r4, #0
 8011860:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8011864:	443a      	add	r2, r7
 8011866:	e9c2 3400 	strd	r3, r4, [r2]
 801186a:	e045      	b.n	80118f8 <G_q+0xf4d8>
  } else if (t271.re == 0.0) {
 801186c:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 8011870:	ed93 7b00 	vldr	d7, [r3]
 8011874:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801187c:	d122      	bne.n	80118c4 <G_q+0xf4a4>
    t34_re = 0.0;
 801187e:	f04f 0300 	mov.w	r3, #0
 8011882:	f04f 0400 	mov.w	r4, #0
 8011886:	f241 32b8 	movw	r2, #5048	; 0x13b8
 801188a:	443a      	add	r2, r7
 801188c:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t271.im / 2.0;
 8011890:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 8011894:	ed93 6b02 	vldr	d6, [r3, #8]
 8011898:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801189c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80118a0:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80118a4:	443b      	add	r3, r7
 80118a6:	ed83 7b00 	vstr	d7, [r3]
 80118aa:	e025      	b.n	80118f8 <G_q+0xf4d8>
 80118ac:	f3af 8000 	nop.w
 80118b0:	33145c07 	.word	0x33145c07
 80118b4:	3c81a626 	.word	0x3c81a626
 80118b8:	33145c07 	.word	0x33145c07
 80118bc:	3c91a626 	.word	0x3c91a626
 80118c0:	ffffefd0 	.word	0xffffefd0
  } else {
    t34_re = t271.re / 2.0;
 80118c4:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 80118c8:	ed93 6b00 	vldr	d6, [r3]
 80118cc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80118d0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80118d4:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80118d8:	443b      	add	r3, r7
 80118da:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t271.im / 2.0;
 80118de:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 80118e2:	ed93 6b02 	vldr	d6, [r3, #8]
 80118e6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80118ea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80118ee:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80118f2:	443b      	add	r3, r7
 80118f4:	ed83 7b00 	vstr	d7, [r3]
  }

  t3_im += t34_re;
 80118f8:	f241 3310 	movw	r3, #4880	; 0x1310
 80118fc:	443b      	add	r3, r7
 80118fe:	ed93 6b00 	vldr	d6, [r3]
 8011902:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8011906:	443b      	add	r3, r7
 8011908:	ed93 7b00 	vldr	d7, [r3]
 801190c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011910:	f241 3310 	movw	r3, #4880	; 0x1310
 8011914:	443b      	add	r3, r7
 8011916:	ed83 7b00 	vstr	d7, [r3]
  t23_re += t34_im;
 801191a:	f241 3330 	movw	r3, #4912	; 0x1330
 801191e:	443b      	add	r3, r7
 8011920:	ed93 6b00 	vldr	d6, [r3]
 8011924:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8011928:	443b      	add	r3, r7
 801192a:	ed93 7b00 	vldr	d7, [r3]
 801192e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011932:	f241 3330 	movw	r3, #4912	; 0x1330
 8011936:	443b      	add	r3, r7
 8011938:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t272.re * 0.0 - t272.im * 0.5) - (t273.re * 0.0 - t273.im * 0.5);
 801193c:	f241 1370 	movw	r3, #4464	; 0x1170
 8011940:	443b      	add	r3, r7
 8011942:	ed93 7b00 	vldr	d7, [r3]
 8011946:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8011b30 <G_q+0xf710>
 801194a:	ee27 6b06 	vmul.f64	d6, d7, d6
 801194e:	f241 1370 	movw	r3, #4464	; 0x1170
 8011952:	443b      	add	r3, r7
 8011954:	ed93 7b02 	vldr	d7, [r3, #8]
 8011958:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801195c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011960:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011964:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8011968:	ed93 7b00 	vldr	d7, [r3]
 801196c:	ed9f 5b70 	vldr	d5, [pc, #448]	; 8011b30 <G_q+0xf710>
 8011970:	ee27 5b05 	vmul.f64	d5, d7, d5
 8011974:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8011978:	ed93 7b02 	vldr	d7, [r3, #8]
 801197c:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8011980:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011984:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011988:	ee36 7b47 	vsub.f64	d7, d6, d7
 801198c:	f241 3378 	movw	r3, #4984	; 0x1378
 8011990:	443b      	add	r3, r7
 8011992:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t272.re * 0.5 + t272.im * 0.0) - (t273.re * 0.5 + t273.im * 0.0);
 8011996:	f241 1370 	movw	r3, #4464	; 0x1170
 801199a:	443b      	add	r3, r7
 801199c:	ed93 7b00 	vldr	d7, [r3]
 80119a0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80119a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80119a8:	f241 1370 	movw	r3, #4464	; 0x1170
 80119ac:	443b      	add	r3, r7
 80119ae:	ed93 7b02 	vldr	d7, [r3, #8]
 80119b2:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 8011b30 <G_q+0xf710>
 80119b6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80119ba:	ee36 6b07 	vadd.f64	d6, d6, d7
 80119be:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80119c2:	ed93 7b00 	vldr	d7, [r3]
 80119c6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80119ca:	ee27 5b05 	vmul.f64	d5, d7, d5
 80119ce:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80119d2:	ed93 7b02 	vldr	d7, [r3, #8]
 80119d6:	ed9f 4b56 	vldr	d4, [pc, #344]	; 8011b30 <G_q+0xf710>
 80119da:	ee27 7b04 	vmul.f64	d7, d7, d4
 80119de:	ee35 7b07 	vadd.f64	d7, d5, d7
 80119e2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80119e6:	f241 3370 	movw	r3, #4976	; 0x1370
 80119ea:	443b      	add	r3, r7
 80119ec:	ed83 7b00 	vstr	d7, [r3]
  if (t276.im == 0.0) {
 80119f0:	f241 1390 	movw	r3, #4496	; 0x1190
 80119f4:	443b      	add	r3, r7
 80119f6:	ed93 7b02 	vldr	d7, [r3, #8]
 80119fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80119fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a02:	d116      	bne.n	8011a32 <G_q+0xf612>
    t16_re = t276.re / 2.0;
 8011a04:	f241 1390 	movw	r3, #4496	; 0x1190
 8011a08:	443b      	add	r3, r7
 8011a0a:	ed93 6b00 	vldr	d6, [r3]
 8011a0e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011a12:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011a16:	f241 3368 	movw	r3, #4968	; 0x1368
 8011a1a:	443b      	add	r3, r7
 8011a1c:	ed83 7b00 	vstr	d7, [r3]
    t16_im = 0.0;
 8011a20:	f04f 0300 	mov.w	r3, #0
 8011a24:	f04f 0400 	mov.w	r4, #0
 8011a28:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8011a2c:	e9c2 3400 	strd	r3, r4, [r2]
 8011a30:	e03b      	b.n	8011aaa <G_q+0xf68a>
  } else if (t276.re == 0.0) {
 8011a32:	f241 1390 	movw	r3, #4496	; 0x1190
 8011a36:	443b      	add	r3, r7
 8011a38:	ed93 7b00 	vldr	d7, [r3]
 8011a3c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a44:	d116      	bne.n	8011a74 <G_q+0xf654>
    t16_re = 0.0;
 8011a46:	f04f 0300 	mov.w	r3, #0
 8011a4a:	f04f 0400 	mov.w	r4, #0
 8011a4e:	f241 3268 	movw	r2, #4968	; 0x1368
 8011a52:	443a      	add	r2, r7
 8011a54:	e9c2 3400 	strd	r3, r4, [r2]
    t16_im = t276.im / 2.0;
 8011a58:	f241 1390 	movw	r3, #4496	; 0x1190
 8011a5c:	443b      	add	r3, r7
 8011a5e:	ed93 6b02 	vldr	d6, [r3, #8]
 8011a62:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011a66:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011a6a:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8011a6e:	ed83 7b00 	vstr	d7, [r3]
 8011a72:	e01a      	b.n	8011aaa <G_q+0xf68a>
  } else {
    t16_re = t276.re / 2.0;
 8011a74:	f241 1390 	movw	r3, #4496	; 0x1190
 8011a78:	443b      	add	r3, r7
 8011a7a:	ed93 6b00 	vldr	d6, [r3]
 8011a7e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011a82:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011a86:	f241 3368 	movw	r3, #4968	; 0x1368
 8011a8a:	443b      	add	r3, r7
 8011a8c:	ed83 7b00 	vstr	d7, [r3]
    t16_im = t276.im / 2.0;
 8011a90:	f241 1390 	movw	r3, #4496	; 0x1190
 8011a94:	443b      	add	r3, r7
 8011a96:	ed93 6b02 	vldr	d6, [r3, #8]
 8011a9a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011a9e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011aa2:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8011aa6:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t277.im == 0.0) {
 8011aaa:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8011aae:	ed93 7b02 	vldr	d7, [r3, #8]
 8011ab2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011aba:	d116      	bne.n	8011aea <G_q+0xf6ca>
    t34_re = t277.re / 2.0;
 8011abc:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8011ac0:	ed93 6b00 	vldr	d6, [r3]
 8011ac4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011ac8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011acc:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8011ad0:	443b      	add	r3, r7
 8011ad2:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8011ad6:	f04f 0300 	mov.w	r3, #0
 8011ada:	f04f 0400 	mov.w	r4, #0
 8011ade:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8011ae2:	443a      	add	r2, r7
 8011ae4:	e9c2 3400 	strd	r3, r4, [r2]
 8011ae8:	e040      	b.n	8011b6c <G_q+0xf74c>
  } else if (t277.re == 0.0) {
 8011aea:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8011aee:	ed93 7b00 	vldr	d7, [r3]
 8011af2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011afa:	d11d      	bne.n	8011b38 <G_q+0xf718>
    t34_re = 0.0;
 8011afc:	f04f 0300 	mov.w	r3, #0
 8011b00:	f04f 0400 	mov.w	r4, #0
 8011b04:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8011b08:	443a      	add	r2, r7
 8011b0a:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t277.im / 2.0;
 8011b0e:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8011b12:	ed93 6b02 	vldr	d6, [r3, #8]
 8011b16:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011b1a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011b1e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8011b22:	443b      	add	r3, r7
 8011b24:	ed83 7b00 	vstr	d7, [r3]
 8011b28:	e020      	b.n	8011b6c <G_q+0xf74c>
 8011b2a:	bf00      	nop
 8011b2c:	f3af 8000 	nop.w
	...
  } else {
    t34_re = t277.re / 2.0;
 8011b38:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8011b3c:	ed93 6b00 	vldr	d6, [r3]
 8011b40:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011b44:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011b48:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8011b4c:	443b      	add	r3, r7
 8011b4e:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t277.im / 2.0;
 8011b52:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8011b56:	ed93 6b02 	vldr	d6, [r3, #8]
 8011b5a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011b5e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011b62:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8011b66:	443b      	add	r3, r7
 8011b68:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_re = (t274.re * 0.0 - t274.im * 0.5) - (t275.re * 0.0 - t275.im * 0.5);
 8011b6c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8011b70:	ed93 7b00 	vldr	d7, [r3]
 8011b74:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8011ef8 <G_q+0xfad8>
 8011b78:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011b7c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8011b80:	ed93 7b02 	vldr	d7, [r3, #8]
 8011b84:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8011b88:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011b8c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011b90:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8011b94:	ed93 7b00 	vldr	d7, [r3]
 8011b98:	ed9f 5bd7 	vldr	d5, [pc, #860]	; 8011ef8 <G_q+0xfad8>
 8011b9c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8011ba0:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8011ba4:	ed93 7b02 	vldr	d7, [r3, #8]
 8011ba8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8011bac:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011bb0:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011bb4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011bb8:	f241 3348 	movw	r3, #4936	; 0x1348
 8011bbc:	443b      	add	r3, r7
 8011bbe:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t274.re * 0.5 + t274.im * 0.0) - (t275.re * 0.5 + t275.im * 0.0);
 8011bc2:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8011bc6:	ed93 7b00 	vldr	d7, [r3]
 8011bca:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8011bce:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011bd2:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8011bd6:	ed93 7b02 	vldr	d7, [r3, #8]
 8011bda:	ed9f 5bc7 	vldr	d5, [pc, #796]	; 8011ef8 <G_q+0xfad8>
 8011bde:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011be2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011be6:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8011bea:	ed93 7b00 	vldr	d7, [r3]
 8011bee:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8011bf2:	ee27 5b05 	vmul.f64	d5, d7, d5
 8011bf6:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8011bfa:	ed93 7b02 	vldr	d7, [r3, #8]
 8011bfe:	ed9f 4bbe 	vldr	d4, [pc, #760]	; 8011ef8 <G_q+0xfad8>
 8011c02:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011c06:	ee35 7b07 	vadd.f64	d7, d5, d7
 8011c0a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011c0e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8011c12:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t16_re + t34_re) + 7.498798913309288E-33;
 8011c16:	f241 3368 	movw	r3, #4968	; 0x1368
 8011c1a:	443b      	add	r3, r7
 8011c1c:	ed93 6b00 	vldr	d6, [r3]
 8011c20:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8011c24:	443b      	add	r3, r7
 8011c26:	ed93 7b00 	vldr	d7, [r3]
 8011c2a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011c2e:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 8011f00 <G_q+0xfae0>
 8011c32:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011c36:	f241 3368 	movw	r3, #4968	; 0x1368
 8011c3a:	443b      	add	r3, r7
 8011c3c:	ed83 7b00 	vstr	d7, [r3]
  t16_im += t34_im;
 8011c40:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8011c44:	ed93 6b00 	vldr	d6, [r3]
 8011c48:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8011c4c:	443b      	add	r3, r7
 8011c4e:	ed93 7b00 	vldr	d7, [r3]
 8011c52:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011c56:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8011c5a:	ed83 7b00 	vstr	d7, [r3]
  t12_re = (t278.re * 0.0 - t278.im * 3.061616997868383E-17) - (t279.re * 0.0 -
 8011c5e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8011c62:	ed93 7b00 	vldr	d7, [r3]
 8011c66:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8011ef8 <G_q+0xfad8>
 8011c6a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011c6e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8011c72:	ed93 7b02 	vldr	d7, [r3, #8]
 8011c76:	ed9f 5ba4 	vldr	d5, [pc, #656]	; 8011f08 <G_q+0xfae8>
 8011c7a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011c7e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011c82:	4ba3      	ldr	r3, [pc, #652]	; (8011f10 <G_q+0xfaf0>)
 8011c84:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8011c88:	443a      	add	r2, r7
 8011c8a:	4413      	add	r3, r2
 8011c8c:	ed93 7b00 	vldr	d7, [r3]
 8011c90:	ed9f 5b99 	vldr	d5, [pc, #612]	; 8011ef8 <G_q+0xfad8>
 8011c94:	ee27 5b05 	vmul.f64	d5, d7, d5
    t279.im * 3.061616997868383E-17);
 8011c98:	4b9d      	ldr	r3, [pc, #628]	; (8011f10 <G_q+0xfaf0>)
 8011c9a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8011c9e:	443a      	add	r2, r7
 8011ca0:	4413      	add	r3, r2
 8011ca2:	ed93 7b02 	vldr	d7, [r3, #8]
 8011ca6:	ed9f 4b98 	vldr	d4, [pc, #608]	; 8011f08 <G_q+0xfae8>
 8011caa:	ee27 7b04 	vmul.f64	d7, d7, d4
  t12_re = (t278.re * 0.0 - t278.im * 3.061616997868383E-17) - (t279.re * 0.0 -
 8011cae:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011cb2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011cb6:	f241 3388 	movw	r3, #5000	; 0x1388
 8011cba:	443b      	add	r3, r7
 8011cbc:	ed83 7b00 	vstr	d7, [r3]
  t12_im = (t278.re * 3.061616997868383E-17 + t278.im * 0.0) - (t279.re *
 8011cc0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8011cc4:	ed93 7b00 	vldr	d7, [r3]
 8011cc8:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 8011f08 <G_q+0xfae8>
 8011ccc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011cd0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8011cd4:	ed93 7b02 	vldr	d7, [r3, #8]
 8011cd8:	ed9f 5b87 	vldr	d5, [pc, #540]	; 8011ef8 <G_q+0xfad8>
 8011cdc:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011ce0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011ce4:	4b8a      	ldr	r3, [pc, #552]	; (8011f10 <G_q+0xfaf0>)
 8011ce6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8011cea:	443a      	add	r2, r7
 8011cec:	4413      	add	r3, r2
 8011cee:	ed93 7b00 	vldr	d7, [r3]
 8011cf2:	ed9f 5b85 	vldr	d5, [pc, #532]	; 8011f08 <G_q+0xfae8>
 8011cf6:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t279.im * 0.0);
 8011cfa:	4b85      	ldr	r3, [pc, #532]	; (8011f10 <G_q+0xfaf0>)
 8011cfc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8011d00:	443a      	add	r2, r7
 8011d02:	4413      	add	r3, r2
 8011d04:	ed93 7b02 	vldr	d7, [r3, #8]
 8011d08:	ed9f 4b7b 	vldr	d4, [pc, #492]	; 8011ef8 <G_q+0xfad8>
 8011d0c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011d10:	ee35 7b07 	vadd.f64	d7, d5, d7
  t12_im = (t278.re * 3.061616997868383E-17 + t278.im * 0.0) - (t279.re *
 8011d14:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011d18:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8011d1c:	ed83 7b00 	vstr	d7, [r3]
  b_t10_re = (t3_im * t13_re - t23_re * t13_im) - (t20_re * t16_re - t20_im *
 8011d20:	f241 3310 	movw	r3, #4880	; 0x1310
 8011d24:	443b      	add	r3, r7
 8011d26:	ed93 6b00 	vldr	d6, [r3]
 8011d2a:	f241 3378 	movw	r3, #4984	; 0x1378
 8011d2e:	443b      	add	r3, r7
 8011d30:	ed93 7b00 	vldr	d7, [r3]
 8011d34:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011d38:	f241 3330 	movw	r3, #4912	; 0x1330
 8011d3c:	443b      	add	r3, r7
 8011d3e:	ed93 5b00 	vldr	d5, [r3]
 8011d42:	f241 3370 	movw	r3, #4976	; 0x1370
 8011d46:	443b      	add	r3, r7
 8011d48:	ed93 7b00 	vldr	d7, [r3]
 8011d4c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8011d50:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011d54:	f241 3348 	movw	r3, #4936	; 0x1348
 8011d58:	443b      	add	r3, r7
 8011d5a:	ed93 5b00 	vldr	d5, [r3]
 8011d5e:	f241 3368 	movw	r3, #4968	; 0x1368
 8011d62:	443b      	add	r3, r7
 8011d64:	ed93 7b00 	vldr	d7, [r3]
 8011d68:	ee25 5b07 	vmul.f64	d5, d5, d7
 8011d6c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8011d70:	ed93 4b00 	vldr	d4, [r3]
 8011d74:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8011d78:	ed93 7b00 	vldr	d7, [r3]
 8011d7c:	ee24 7b07 	vmul.f64	d7, d4, d7
 8011d80:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011d84:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011d88:	f241 3338 	movw	r3, #4920	; 0x1338
 8011d8c:	443b      	add	r3, r7
 8011d8e:	ed83 7b00 	vstr	d7, [r3]
    t16_im);
  t23_re = (t3_im * t13_im + t23_re * t13_re) - (t20_re * t16_im + t20_im *
 8011d92:	f241 3310 	movw	r3, #4880	; 0x1310
 8011d96:	443b      	add	r3, r7
 8011d98:	ed93 6b00 	vldr	d6, [r3]
 8011d9c:	f241 3370 	movw	r3, #4976	; 0x1370
 8011da0:	443b      	add	r3, r7
 8011da2:	ed93 7b00 	vldr	d7, [r3]
 8011da6:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011daa:	f241 3330 	movw	r3, #4912	; 0x1330
 8011dae:	443b      	add	r3, r7
 8011db0:	ed93 5b00 	vldr	d5, [r3]
 8011db4:	f241 3378 	movw	r3, #4984	; 0x1378
 8011db8:	443b      	add	r3, r7
 8011dba:	ed93 7b00 	vldr	d7, [r3]
 8011dbe:	ee25 7b07 	vmul.f64	d7, d5, d7
 8011dc2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011dc6:	f241 3348 	movw	r3, #4936	; 0x1348
 8011dca:	443b      	add	r3, r7
 8011dcc:	ed93 5b00 	vldr	d5, [r3]
 8011dd0:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8011dd4:	ed93 7b00 	vldr	d7, [r3]
 8011dd8:	ee25 5b07 	vmul.f64	d5, d5, d7
 8011ddc:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8011de0:	ed93 4b00 	vldr	d4, [r3]
 8011de4:	f241 3368 	movw	r3, #4968	; 0x1368
 8011de8:	443b      	add	r3, r7
 8011dea:	ed93 7b00 	vldr	d7, [r3]
 8011dee:	ee24 7b07 	vmul.f64	d7, d4, d7
 8011df2:	ee35 7b07 	vadd.f64	d7, d5, d7
 8011df6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011dfa:	f241 3330 	movw	r3, #4912	; 0x1330
 8011dfe:	443b      	add	r3, r7
 8011e00:	ed83 7b00 	vstr	d7, [r3]
    t16_re);
  if (t296.im == 0.0) {
 8011e04:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8011e08:	ed93 7b02 	vldr	d7, [r3, #8]
 8011e0c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e14:	d115      	bne.n	8011e42 <G_q+0xfa22>
    t16_re = t296.re / 2.0;
 8011e16:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8011e1a:	ed93 6b00 	vldr	d6, [r3]
 8011e1e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011e22:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011e26:	f241 3368 	movw	r3, #4968	; 0x1368
 8011e2a:	443b      	add	r3, r7
 8011e2c:	ed83 7b00 	vstr	d7, [r3]
    t16_im = 0.0;
 8011e30:	f04f 0300 	mov.w	r3, #0
 8011e34:	f04f 0400 	mov.w	r4, #0
 8011e38:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8011e3c:	e9c2 3400 	strd	r3, r4, [r2]
 8011e40:	e037      	b.n	8011eb2 <G_q+0xfa92>
  } else if (t296.re == 0.0) {
 8011e42:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8011e46:	ed93 7b00 	vldr	d7, [r3]
 8011e4a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e52:	d115      	bne.n	8011e80 <G_q+0xfa60>
    t16_re = 0.0;
 8011e54:	f04f 0300 	mov.w	r3, #0
 8011e58:	f04f 0400 	mov.w	r4, #0
 8011e5c:	f241 3268 	movw	r2, #4968	; 0x1368
 8011e60:	443a      	add	r2, r7
 8011e62:	e9c2 3400 	strd	r3, r4, [r2]
    t16_im = t296.im / 2.0;
 8011e66:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8011e6a:	ed93 6b02 	vldr	d6, [r3, #8]
 8011e6e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011e72:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011e76:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8011e7a:	ed83 7b00 	vstr	d7, [r3]
 8011e7e:	e018      	b.n	8011eb2 <G_q+0xfa92>
  } else {
    t16_re = t296.re / 2.0;
 8011e80:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8011e84:	ed93 6b00 	vldr	d6, [r3]
 8011e88:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011e8c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011e90:	f241 3368 	movw	r3, #4968	; 0x1368
 8011e94:	443b      	add	r3, r7
 8011e96:	ed83 7b00 	vstr	d7, [r3]
    t16_im = t296.im / 2.0;
 8011e9a:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8011e9e:	ed93 6b02 	vldr	d6, [r3, #8]
 8011ea2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011ea6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011eaa:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8011eae:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t297.im == 0.0) {
 8011eb2:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8011eb6:	ed93 7b02 	vldr	d7, [r3, #8]
 8011eba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ec2:	d127      	bne.n	8011f14 <G_q+0xfaf4>
    t34_re = t297.re / 2.0;
 8011ec4:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8011ec8:	ed93 6b00 	vldr	d6, [r3]
 8011ecc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011ed0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011ed4:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8011ed8:	443b      	add	r3, r7
 8011eda:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8011ede:	f04f 0300 	mov.w	r3, #0
 8011ee2:	f04f 0400 	mov.w	r4, #0
 8011ee6:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8011eea:	443a      	add	r2, r7
 8011eec:	e9c2 3400 	strd	r3, r4, [r2]
 8011ef0:	e04a      	b.n	8011f88 <G_q+0xfb68>
 8011ef2:	bf00      	nop
 8011ef4:	f3af 8000 	nop.w
	...
 8011f00:	858a5d48 	.word	0x858a5d48
 8011f04:	394377ce 	.word	0x394377ce
 8011f08:	33145c07 	.word	0x33145c07
 8011f0c:	3c81a626 	.word	0x3c81a626
 8011f10:	ffffefb0 	.word	0xffffefb0
  } else if (t297.re == 0.0) {
 8011f14:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8011f18:	ed93 7b00 	vldr	d7, [r3]
 8011f1c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f24:	d116      	bne.n	8011f54 <G_q+0xfb34>
    t34_re = 0.0;
 8011f26:	f04f 0300 	mov.w	r3, #0
 8011f2a:	f04f 0400 	mov.w	r4, #0
 8011f2e:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8011f32:	443a      	add	r2, r7
 8011f34:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t297.im / 2.0;
 8011f38:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8011f3c:	ed93 6b02 	vldr	d6, [r3, #8]
 8011f40:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011f44:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011f48:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8011f4c:	443b      	add	r3, r7
 8011f4e:	ed83 7b00 	vstr	d7, [r3]
 8011f52:	e019      	b.n	8011f88 <G_q+0xfb68>
  } else {
    t34_re = t297.re / 2.0;
 8011f54:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8011f58:	ed93 6b00 	vldr	d6, [r3]
 8011f5c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011f60:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011f64:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8011f68:	443b      	add	r3, r7
 8011f6a:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t297.im / 2.0;
 8011f6e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8011f72:	ed93 6b02 	vldr	d6, [r3, #8]
 8011f76:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011f7a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011f7e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8011f82:	443b      	add	r3, r7
 8011f84:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t298.im == 0.0) {
 8011f88:	f241 2330 	movw	r3, #4656	; 0x1230
 8011f8c:	443b      	add	r3, r7
 8011f8e:	ed93 7b02 	vldr	d7, [r3, #8]
 8011f92:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f9a:	d116      	bne.n	8011fca <G_q+0xfbaa>
    t20_re = t298.re / 2.0;
 8011f9c:	f241 2330 	movw	r3, #4656	; 0x1230
 8011fa0:	443b      	add	r3, r7
 8011fa2:	ed93 6b00 	vldr	d6, [r3]
 8011fa6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011faa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011fae:	f241 3348 	movw	r3, #4936	; 0x1348
 8011fb2:	443b      	add	r3, r7
 8011fb4:	ed83 7b00 	vstr	d7, [r3]
    t20_im = 0.0;
 8011fb8:	f04f 0300 	mov.w	r3, #0
 8011fbc:	f04f 0400 	mov.w	r4, #0
 8011fc0:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8011fc4:	e9c2 3400 	strd	r3, r4, [r2]
 8011fc8:	e03b      	b.n	8012042 <G_q+0xfc22>
  } else if (t298.re == 0.0) {
 8011fca:	f241 2330 	movw	r3, #4656	; 0x1230
 8011fce:	443b      	add	r3, r7
 8011fd0:	ed93 7b00 	vldr	d7, [r3]
 8011fd4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fdc:	d116      	bne.n	801200c <G_q+0xfbec>
    t20_re = 0.0;
 8011fde:	f04f 0300 	mov.w	r3, #0
 8011fe2:	f04f 0400 	mov.w	r4, #0
 8011fe6:	f241 3248 	movw	r2, #4936	; 0x1348
 8011fea:	443a      	add	r2, r7
 8011fec:	e9c2 3400 	strd	r3, r4, [r2]
    t20_im = t298.im / 2.0;
 8011ff0:	f241 2330 	movw	r3, #4656	; 0x1230
 8011ff4:	443b      	add	r3, r7
 8011ff6:	ed93 6b02 	vldr	d6, [r3, #8]
 8011ffa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011ffe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8012002:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8012006:	ed83 7b00 	vstr	d7, [r3]
 801200a:	e01a      	b.n	8012042 <G_q+0xfc22>
  } else {
    t20_re = t298.re / 2.0;
 801200c:	f241 2330 	movw	r3, #4656	; 0x1230
 8012010:	443b      	add	r3, r7
 8012012:	ed93 6b00 	vldr	d6, [r3]
 8012016:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801201a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801201e:	f241 3348 	movw	r3, #4936	; 0x1348
 8012022:	443b      	add	r3, r7
 8012024:	ed83 7b00 	vstr	d7, [r3]
    t20_im = t298.im / 2.0;
 8012028:	f241 2330 	movw	r3, #4656	; 0x1230
 801202c:	443b      	add	r3, r7
 801202e:	ed93 6b02 	vldr	d6, [r3, #8]
 8012032:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8012036:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801203a:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 801203e:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t299.im == 0.0) {
 8012042:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8012046:	ed93 7b02 	vldr	d7, [r3, #8]
 801204a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801204e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012052:	d116      	bne.n	8012082 <G_q+0xfc62>
    t13_re = t299.re / 2.0;
 8012054:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8012058:	ed93 6b00 	vldr	d6, [r3]
 801205c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8012060:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8012064:	f241 3378 	movw	r3, #4984	; 0x1378
 8012068:	443b      	add	r3, r7
 801206a:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 801206e:	f04f 0300 	mov.w	r3, #0
 8012072:	f04f 0400 	mov.w	r4, #0
 8012076:	f241 3270 	movw	r2, #4976	; 0x1370
 801207a:	443a      	add	r2, r7
 801207c:	e9c2 3400 	strd	r3, r4, [r2]
 8012080:	e039      	b.n	80120f6 <G_q+0xfcd6>
  } else if (t299.re == 0.0) {
 8012082:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8012086:	ed93 7b00 	vldr	d7, [r3]
 801208a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801208e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012092:	d116      	bne.n	80120c2 <G_q+0xfca2>
    t13_re = 0.0;
 8012094:	f04f 0300 	mov.w	r3, #0
 8012098:	f04f 0400 	mov.w	r4, #0
 801209c:	f241 3278 	movw	r2, #4984	; 0x1378
 80120a0:	443a      	add	r2, r7
 80120a2:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t299.im / 2.0;
 80120a6:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80120aa:	ed93 6b02 	vldr	d6, [r3, #8]
 80120ae:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80120b2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80120b6:	f241 3370 	movw	r3, #4976	; 0x1370
 80120ba:	443b      	add	r3, r7
 80120bc:	ed83 7b00 	vstr	d7, [r3]
 80120c0:	e019      	b.n	80120f6 <G_q+0xfcd6>
  } else {
    t13_re = t299.re / 2.0;
 80120c2:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80120c6:	ed93 6b00 	vldr	d6, [r3]
 80120ca:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80120ce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80120d2:	f241 3378 	movw	r3, #4984	; 0x1378
 80120d6:	443b      	add	r3, r7
 80120d8:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t299.im / 2.0;
 80120dc:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80120e0:	ed93 6b02 	vldr	d6, [r3, #8]
 80120e4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80120e8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80120ec:	f241 3370 	movw	r3, #4976	; 0x1370
 80120f0:	443b      	add	r3, r7
 80120f2:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re += t34_re;
 80120f6:	f241 3368 	movw	r3, #4968	; 0x1368
 80120fa:	443b      	add	r3, r7
 80120fc:	ed93 6b00 	vldr	d6, [r3]
 8012100:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8012104:	443b      	add	r3, r7
 8012106:	ed93 7b00 	vldr	d7, [r3]
 801210a:	ee36 7b07 	vadd.f64	d7, d6, d7
 801210e:	f241 3368 	movw	r3, #4968	; 0x1368
 8012112:	443b      	add	r3, r7
 8012114:	ed83 7b00 	vstr	d7, [r3]
  t16_im += t34_im;
 8012118:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 801211c:	ed93 6b00 	vldr	d6, [r3]
 8012120:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8012124:	443b      	add	r3, r7
 8012126:	ed93 7b00 	vldr	d7, [r3]
 801212a:	ee36 7b07 	vadd.f64	d7, d6, d7
 801212e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8012132:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t20_re + t13_re) + 7.498798913309288E-33;
 8012136:	f241 3348 	movw	r3, #4936	; 0x1348
 801213a:	443b      	add	r3, r7
 801213c:	ed93 6b00 	vldr	d6, [r3]
 8012140:	f241 3378 	movw	r3, #4984	; 0x1378
 8012144:	443b      	add	r3, r7
 8012146:	ed93 7b00 	vldr	d7, [r3]
 801214a:	ee36 7b07 	vadd.f64	d7, d6, d7
 801214e:	ed9f 6be6 	vldr	d6, [pc, #920]	; 80124e8 <G_q+0x100c8>
 8012152:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012156:	f241 3348 	movw	r3, #4936	; 0x1348
 801215a:	443b      	add	r3, r7
 801215c:	ed83 7b00 	vstr	d7, [r3]
  t20_im += t13_im;
 8012160:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8012164:	ed93 6b00 	vldr	d6, [r3]
 8012168:	f241 3370 	movw	r3, #4976	; 0x1370
 801216c:	443b      	add	r3, r7
 801216e:	ed93 7b00 	vldr	d7, [r3]
 8012172:	ee36 7b07 	vadd.f64	d7, d6, d7
 8012176:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 801217a:	ed83 7b00 	vstr	d7, [r3]
  t34_im = (t266.re * 0.0 - t266.im * 0.5) - (t267.re * 0.0 - t267.im * 0.5);
 801217e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8012182:	ed93 7b00 	vldr	d7, [r3]
 8012186:	ed9f 6bda 	vldr	d6, [pc, #872]	; 80124f0 <G_q+0x100d0>
 801218a:	ee27 6b06 	vmul.f64	d6, d7, d6
 801218e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8012192:	ed93 7b02 	vldr	d7, [r3, #8]
 8012196:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801219a:	ee27 7b05 	vmul.f64	d7, d7, d5
 801219e:	ee36 6b47 	vsub.f64	d6, d6, d7
 80121a2:	4bd9      	ldr	r3, [pc, #868]	; (8012508 <G_q+0x100e8>)
 80121a4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80121a8:	443a      	add	r2, r7
 80121aa:	4413      	add	r3, r2
 80121ac:	ed93 7b00 	vldr	d7, [r3]
 80121b0:	ed9f 5bcf 	vldr	d5, [pc, #828]	; 80124f0 <G_q+0x100d0>
 80121b4:	ee27 5b05 	vmul.f64	d5, d7, d5
 80121b8:	4bd3      	ldr	r3, [pc, #844]	; (8012508 <G_q+0x100e8>)
 80121ba:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80121be:	443a      	add	r2, r7
 80121c0:	4413      	add	r3, r2
 80121c2:	ed93 7b02 	vldr	d7, [r3, #8]
 80121c6:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80121ca:	ee27 7b04 	vmul.f64	d7, d7, d4
 80121ce:	ee35 7b47 	vsub.f64	d7, d5, d7
 80121d2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80121d6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80121da:	443b      	add	r3, r7
 80121dc:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t266.re * 0.5 + t266.im * 0.0) - (t267.re * 0.5 + t267.im * 0.0);
 80121e0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80121e4:	ed93 7b00 	vldr	d7, [r3]
 80121e8:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80121ec:	ee27 6b06 	vmul.f64	d6, d7, d6
 80121f0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80121f4:	ed93 7b02 	vldr	d7, [r3, #8]
 80121f8:	ed9f 5bbd 	vldr	d5, [pc, #756]	; 80124f0 <G_q+0x100d0>
 80121fc:	ee27 7b05 	vmul.f64	d7, d7, d5
 8012200:	ee36 6b07 	vadd.f64	d6, d6, d7
 8012204:	4bc0      	ldr	r3, [pc, #768]	; (8012508 <G_q+0x100e8>)
 8012206:	f241 32d0 	movw	r2, #5072	; 0x13d0
 801220a:	443a      	add	r2, r7
 801220c:	4413      	add	r3, r2
 801220e:	ed93 7b00 	vldr	d7, [r3]
 8012212:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8012216:	ee27 5b05 	vmul.f64	d5, d7, d5
 801221a:	4bbb      	ldr	r3, [pc, #748]	; (8012508 <G_q+0x100e8>)
 801221c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8012220:	443a      	add	r2, r7
 8012222:	4413      	add	r3, r2
 8012224:	ed93 7b02 	vldr	d7, [r3, #8]
 8012228:	ed9f 4bb1 	vldr	d4, [pc, #708]	; 80124f0 <G_q+0x100d0>
 801222c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012230:	ee35 7b07 	vadd.f64	d7, d5, d7
 8012234:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012238:	f241 3378 	movw	r3, #4984	; 0x1378
 801223c:	443b      	add	r3, r7
 801223e:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (((((t268.re * 3.749399456654644E-33 + t269.re *
 8012242:	f241 1350 	movw	r3, #4432	; 0x1150
 8012246:	443b      	add	r3, r7
 8012248:	ed93 7b00 	vldr	d7, [r3]
 801224c:	ed9f 6baa 	vldr	d6, [pc, #680]	; 80124f8 <G_q+0x100d8>
 8012250:	ee27 6b06 	vmul.f64	d6, d7, d6
 8012254:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8012258:	ed93 7b00 	vldr	d7, [r3]
 801225c:	ed9f 5ba6 	vldr	d5, [pc, #664]	; 80124f8 <G_q+0x100d8>
 8012260:	ee27 7b05 	vmul.f64	d7, d7, d5
 8012264:	ee36 6b07 	vadd.f64	d6, d6, d7
                3.749399456654644E-33) - (t72_re * t74_im - t74_re * t55_re)) +
 8012268:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 801226c:	f241 23b0 	movw	r3, #4784	; 0x12b0
 8012270:	443b      	add	r3, r7
 8012272:	ed92 5b00 	vldr	d5, [r2]
 8012276:	ed93 7b00 	vldr	d7, [r3]
 801227a:	ee25 5b07 	vmul.f64	d5, d5, d7
 801227e:	f241 23b8 	movw	r3, #4792	; 0x12b8
 8012282:	443b      	add	r3, r7
 8012284:	ed93 4b00 	vldr	d4, [r3]
 8012288:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 801228c:	ed93 7b00 	vldr	d7, [r3]
 8012290:	ee24 7b07 	vmul.f64	d7, d4, d7
 8012294:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012298:	ee36 6b47 	vsub.f64	d6, d6, d7
              (t58_im * t76_re - t60_re * t85_im)) + (t12_re * b_t10_re - t12_im
 801229c:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80122a0:	f241 23a8 	movw	r3, #4776	; 0x12a8
 80122a4:	443b      	add	r3, r7
 80122a6:	ed92 5b00 	vldr	d5, [r2]
 80122aa:	ed93 7b00 	vldr	d7, [r3]
 80122ae:	ee25 5b07 	vmul.f64	d5, d5, d7
 80122b2:	f241 2350 	movw	r3, #4688	; 0x1250
 80122b6:	443b      	add	r3, r7
 80122b8:	ed93 4b00 	vldr	d4, [r3]
 80122bc:	f241 3318 	movw	r3, #4888	; 0x1318
 80122c0:	443b      	add	r3, r7
 80122c2:	ed93 7b00 	vldr	d7, [r3]
 80122c6:	ee24 7b07 	vmul.f64	d7, d4, d7
 80122ca:	ee35 7b47 	vsub.f64	d7, d5, d7
                3.749399456654644E-33) - (t72_re * t74_im - t74_re * t55_re)) +
 80122ce:	ee36 6b07 	vadd.f64	d6, d6, d7
              (t58_im * t76_re - t60_re * t85_im)) + (t12_re * b_t10_re - t12_im
 80122d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80122d6:	443b      	add	r3, r7
 80122d8:	ed93 5b00 	vldr	d5, [r3]
 80122dc:	f241 3338 	movw	r3, #4920	; 0x1338
 80122e0:	443b      	add	r3, r7
 80122e2:	ed93 7b00 	vldr	d7, [r3]
 80122e6:	ee25 5b07 	vmul.f64	d5, d5, d7
              * t23_re)) - (t16_re * t20_re - t16_im * t20_im)) -
 80122ea:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80122ee:	ed93 4b00 	vldr	d4, [r3]
 80122f2:	f241 3330 	movw	r3, #4912	; 0x1330
 80122f6:	443b      	add	r3, r7
 80122f8:	ed93 7b00 	vldr	d7, [r3]
 80122fc:	ee24 7b07 	vmul.f64	d7, d4, d7
              (t58_im * t76_re - t60_re * t85_im)) + (t12_re * b_t10_re - t12_im
 8012300:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012304:	ee36 6b07 	vadd.f64	d6, d6, d7
              * t23_re)) - (t16_re * t20_re - t16_im * t20_im)) -
 8012308:	f241 3368 	movw	r3, #4968	; 0x1368
 801230c:	443b      	add	r3, r7
 801230e:	ed93 5b00 	vldr	d5, [r3]
 8012312:	f241 3348 	movw	r3, #4936	; 0x1348
 8012316:	443b      	add	r3, r7
 8012318:	ed93 7b00 	vldr	d7, [r3]
 801231c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8012320:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8012324:	ed93 4b00 	vldr	d4, [r3]
 8012328:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 801232c:	ed93 7b00 	vldr	d7, [r3]
 8012330:	ee24 7b07 	vmul.f64	d7, d4, d7
 8012334:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012338:	ee36 7b47 	vsub.f64	d7, d6, d7
  t13_im = (((((t268.re * 3.749399456654644E-33 + t269.re *
 801233c:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 80124f8 <G_q+0x100d8>
 8012340:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012344:	f241 3370 	movw	r3, #4976	; 0x1370
 8012348:	443b      	add	r3, r7
 801234a:	ed83 7b00 	vstr	d7, [r3]
    3.749399456654644E-33;
  t34_re = ((((t268.im * 3.749399456654644E-33 + t269.im * 3.749399456654644E-33)
 801234e:	f241 1350 	movw	r3, #4432	; 0x1150
 8012352:	443b      	add	r3, r7
 8012354:	ed93 7b02 	vldr	d7, [r3, #8]
 8012358:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80124f8 <G_q+0x100d8>
 801235c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8012360:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8012364:	ed93 7b02 	vldr	d7, [r3, #8]
 8012368:	ed9f 5b63 	vldr	d5, [pc, #396]	; 80124f8 <G_q+0x100d8>
 801236c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8012370:	ee36 6b07 	vadd.f64	d6, d6, d7
              - (t72_re * t55_re + t74_re * t74_im)) + (t58_im * t85_im + t60_re
 8012374:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8012378:	ed93 5b00 	vldr	d5, [r3]
 801237c:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8012380:	ed93 7b00 	vldr	d7, [r3]
 8012384:	ee25 5b07 	vmul.f64	d5, d5, d7
 8012388:	f241 22b8 	movw	r2, #4792	; 0x12b8
 801238c:	443a      	add	r2, r7
 801238e:	f241 23b0 	movw	r3, #4784	; 0x12b0
 8012392:	443b      	add	r3, r7
 8012394:	ed92 4b00 	vldr	d4, [r2]
 8012398:	ed93 7b00 	vldr	d7, [r3]
 801239c:	ee24 7b07 	vmul.f64	d7, d4, d7
 80123a0:	ee35 7b07 	vadd.f64	d7, d5, d7
 80123a4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80123a8:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 80123ac:	ed93 5b00 	vldr	d5, [r3]
 80123b0:	f241 3318 	movw	r3, #4888	; 0x1318
 80123b4:	443b      	add	r3, r7
 80123b6:	ed93 7b00 	vldr	d7, [r3]
 80123ba:	ee25 5b07 	vmul.f64	d5, d5, d7
              * t76_re)) + (t12_re * t23_re + t12_im * b_t10_re)) - (t16_re *
 80123be:	f241 2250 	movw	r2, #4688	; 0x1250
 80123c2:	443a      	add	r2, r7
 80123c4:	f241 23a8 	movw	r3, #4776	; 0x12a8
 80123c8:	443b      	add	r3, r7
 80123ca:	ed92 4b00 	vldr	d4, [r2]
 80123ce:	ed93 7b00 	vldr	d7, [r3]
 80123d2:	ee24 7b07 	vmul.f64	d7, d4, d7
              - (t72_re * t55_re + t74_re * t74_im)) + (t58_im * t85_im + t60_re
 80123d6:	ee35 7b07 	vadd.f64	d7, d5, d7
 80123da:	ee36 6b07 	vadd.f64	d6, d6, d7
              * t76_re)) + (t12_re * t23_re + t12_im * b_t10_re)) - (t16_re *
 80123de:	f241 3388 	movw	r3, #5000	; 0x1388
 80123e2:	443b      	add	r3, r7
 80123e4:	ed93 5b00 	vldr	d5, [r3]
 80123e8:	f241 3330 	movw	r3, #4912	; 0x1330
 80123ec:	443b      	add	r3, r7
 80123ee:	ed93 7b00 	vldr	d7, [r3]
 80123f2:	ee25 5b07 	vmul.f64	d5, d5, d7
 80123f6:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80123fa:	ed93 4b00 	vldr	d4, [r3]
 80123fe:	f241 3338 	movw	r3, #4920	; 0x1338
 8012402:	443b      	add	r3, r7
 8012404:	ed93 7b00 	vldr	d7, [r3]
 8012408:	ee24 7b07 	vmul.f64	d7, d4, d7
 801240c:	ee35 7b07 	vadd.f64	d7, d5, d7
 8012410:	ee36 6b07 	vadd.f64	d6, d6, d7
 8012414:	f241 3368 	movw	r3, #4968	; 0x1368
 8012418:	443b      	add	r3, r7
 801241a:	ed93 5b00 	vldr	d5, [r3]
 801241e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8012422:	ed93 7b00 	vldr	d7, [r3]
 8012426:	ee25 5b07 	vmul.f64	d5, d5, d7
    t20_im + t16_im * t20_re);
 801242a:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 801242e:	ed93 4b00 	vldr	d4, [r3]
 8012432:	f241 3348 	movw	r3, #4936	; 0x1348
 8012436:	443b      	add	r3, r7
 8012438:	ed93 7b00 	vldr	d7, [r3]
 801243c:	ee24 7b07 	vmul.f64	d7, d4, d7
 8012440:	ee35 7b07 	vadd.f64	d7, d5, d7
  t34_re = ((((t268.im * 3.749399456654644E-33 + t269.im * 3.749399456654644E-33)
 8012444:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012448:	f241 33b8 	movw	r3, #5048	; 0x13b8
 801244c:	443b      	add	r3, r7
 801244e:	ed83 7b00 	vstr	d7, [r3]
  b_G_q[4].re = -g * ((t70_im * t55_im - t43_im * t70_re) * 0.0215 + (t34_im *
 8012452:	4b2e      	ldr	r3, [pc, #184]	; (801250c <G_q+0x100ec>)
 8012454:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8012458:	443a      	add	r2, r7
 801245a:	4413      	add	r3, r2
 801245c:	ed93 7b00 	vldr	d7, [r3]
 8012460:	eeb1 6b47 	vneg.f64	d6, d7
 8012464:	f241 23c8 	movw	r3, #4808	; 0x12c8
 8012468:	443b      	add	r3, r7
 801246a:	ed93 5b00 	vldr	d5, [r3]
 801246e:	f241 23d8 	movw	r3, #4824	; 0x12d8
 8012472:	443b      	add	r3, r7
 8012474:	ed93 7b00 	vldr	d7, [r3]
 8012478:	ee25 5b07 	vmul.f64	d5, d5, d7
 801247c:	f241 23d0 	movw	r3, #4816	; 0x12d0
 8012480:	443b      	add	r3, r7
 8012482:	f241 22f8 	movw	r2, #4856	; 0x12f8
 8012486:	443a      	add	r2, r7
 8012488:	ed92 4b00 	vldr	d4, [r2]
 801248c:	ed93 7b00 	vldr	d7, [r3]
 8012490:	ee24 7b07 	vmul.f64	d7, d4, d7
 8012494:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012498:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8012500 <G_q+0x100e0>
 801249c:	ee27 5b05 	vmul.f64	d5, d7, d5
 80124a0:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80124a4:	443b      	add	r3, r7
 80124a6:	ed93 4b00 	vldr	d4, [r3]
 80124aa:	f241 3370 	movw	r3, #4976	; 0x1370
 80124ae:	443b      	add	r3, r7
 80124b0:	ed93 7b00 	vldr	d7, [r3]
 80124b4:	ee24 4b07 	vmul.f64	d4, d4, d7
    t13_im - t13_re * t34_re) * 0.0215);
 80124b8:	f241 3378 	movw	r3, #4984	; 0x1378
 80124bc:	443b      	add	r3, r7
 80124be:	ed93 3b00 	vldr	d3, [r3]
 80124c2:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80124c6:	443b      	add	r3, r7
 80124c8:	ed93 7b00 	vldr	d7, [r3]
 80124cc:	ee23 7b07 	vmul.f64	d7, d3, d7
 80124d0:	ee34 7b47 	vsub.f64	d7, d4, d7
 80124d4:	ed9f 4b0a 	vldr	d4, [pc, #40]	; 8012500 <G_q+0x100e0>
 80124d8:	ee27 7b04 	vmul.f64	d7, d7, d4
  b_G_q[4].re = -g * ((t70_im * t55_im - t43_im * t70_re) * 0.0215 + (t34_im *
 80124dc:	ee35 7b07 	vadd.f64	d7, d5, d7
 80124e0:	e016      	b.n	8012510 <G_q+0x100f0>
 80124e2:	bf00      	nop
 80124e4:	f3af 8000 	nop.w
 80124e8:	858a5d48 	.word	0x858a5d48
 80124ec:	394377ce 	.word	0x394377ce
	...
 80124f8:	858a5d48 	.word	0x858a5d48
 80124fc:	393377ce 	.word	0x393377ce
 8012500:	9374bc6a 	.word	0x9374bc6a
 8012504:	3f960418 	.word	0x3f960418
 8012508:	ffffed30 	.word	0xffffed30
 801250c:	ffffec58 	.word	0xffffec58
 8012510:	4b41      	ldr	r3, [pc, #260]	; (8012618 <G_q+0x101f8>)
 8012512:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8012516:	443a      	add	r2, r7
 8012518:	4413      	add	r3, r2
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	3340      	adds	r3, #64	; 0x40
 801251e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012522:	ed83 7b00 	vstr	d7, [r3]
  b_G_q[4].im = -g * ((t70_im * t70_re + t43_im * t55_im) * 0.0215 + (t34_im *
 8012526:	4b3d      	ldr	r3, [pc, #244]	; (801261c <G_q+0x101fc>)
 8012528:	f241 32d0 	movw	r2, #5072	; 0x13d0
 801252c:	443a      	add	r2, r7
 801252e:	4413      	add	r3, r2
 8012530:	ed93 7b00 	vldr	d7, [r3]
 8012534:	eeb1 6b47 	vneg.f64	d6, d7
 8012538:	f241 22c8 	movw	r2, #4808	; 0x12c8
 801253c:	443a      	add	r2, r7
 801253e:	f241 23d0 	movw	r3, #4816	; 0x12d0
 8012542:	443b      	add	r3, r7
 8012544:	ed92 5b00 	vldr	d5, [r2]
 8012548:	ed93 7b00 	vldr	d7, [r3]
 801254c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8012550:	f241 23f8 	movw	r3, #4856	; 0x12f8
 8012554:	443b      	add	r3, r7
 8012556:	ed93 4b00 	vldr	d4, [r3]
 801255a:	f241 23d8 	movw	r3, #4824	; 0x12d8
 801255e:	443b      	add	r3, r7
 8012560:	ed93 7b00 	vldr	d7, [r3]
 8012564:	ee24 7b07 	vmul.f64	d7, d4, d7
 8012568:	ee35 7b07 	vadd.f64	d7, d5, d7
 801256c:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8012610 <G_q+0x101f0>
 8012570:	ee27 5b05 	vmul.f64	d5, d7, d5
 8012574:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8012578:	443b      	add	r3, r7
 801257a:	ed93 4b00 	vldr	d4, [r3]
 801257e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8012582:	443b      	add	r3, r7
 8012584:	ed93 7b00 	vldr	d7, [r3]
 8012588:	ee24 4b07 	vmul.f64	d4, d4, d7
    t34_re + t13_re * t13_im) * 0.0215);
 801258c:	f241 3378 	movw	r3, #4984	; 0x1378
 8012590:	443b      	add	r3, r7
 8012592:	ed93 3b00 	vldr	d3, [r3]
 8012596:	f241 3370 	movw	r3, #4976	; 0x1370
 801259a:	443b      	add	r3, r7
 801259c:	ed93 7b00 	vldr	d7, [r3]
 80125a0:	ee23 7b07 	vmul.f64	d7, d3, d7
 80125a4:	ee34 7b07 	vadd.f64	d7, d4, d7
 80125a8:	ed9f 4b19 	vldr	d4, [pc, #100]	; 8012610 <G_q+0x101f0>
 80125ac:	ee27 7b04 	vmul.f64	d7, d7, d4
  b_G_q[4].im = -g * ((t70_im * t70_re + t43_im * t55_im) * 0.0215 + (t34_im *
 80125b0:	ee35 7b07 	vadd.f64	d7, d5, d7
 80125b4:	4b18      	ldr	r3, [pc, #96]	; (8012618 <G_q+0x101f8>)
 80125b6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80125ba:	443a      	add	r2, r7
 80125bc:	4413      	add	r3, r2
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	3340      	adds	r3, #64	; 0x40
 80125c2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80125c6:	ed83 7b02 	vstr	d7, [r3, #8]
  b_G_q[5].re = 0.0;
 80125ca:	4b13      	ldr	r3, [pc, #76]	; (8012618 <G_q+0x101f8>)
 80125cc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80125d0:	443a      	add	r2, r7
 80125d2:	4413      	add	r3, r2
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80125da:	f04f 0300 	mov.w	r3, #0
 80125de:	f04f 0400 	mov.w	r4, #0
 80125e2:	e9c2 3400 	strd	r3, r4, [r2]
  b_G_q[5].im = 0.0;
 80125e6:	4b0c      	ldr	r3, [pc, #48]	; (8012618 <G_q+0x101f8>)
 80125e8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80125ec:	443a      	add	r2, r7
 80125ee:	4413      	add	r3, r2
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80125f6:	f04f 0300 	mov.w	r3, #0
 80125fa:	f04f 0400 	mov.w	r4, #0
 80125fe:	e9c2 3402 	strd	r3, r4, [r2, #8]
}
 8012602:	bf00      	nop
 8012604:	f507 579e 	add.w	r7, r7, #5056	; 0x13c0
 8012608:	3714      	adds	r7, #20
 801260a:	46bd      	mov	sp, r7
 801260c:	bd90      	pop	{r4, r7, pc}
 801260e:	bf00      	nop
 8012610:	9374bc6a 	.word	0x9374bc6a
 8012614:	3f960418 	.word	0x3f960418
 8012618:	ffffec34 	.word	0xffffec34
 801261c:	ffffec58 	.word	0xffffec58

08012620 <G_q_initialize>:
/*
 * Arguments    : void
 * Return Type  : void
 */
void G_q_initialize(void)
{
 8012620:	b580      	push	{r7, lr}
 8012622:	af00      	add	r7, sp, #0
  rt_InitInfAndNaN();
 8012624:	f000 f88e 	bl	8012744 <rt_InitInfAndNaN>
  isInitialized_G_q = true;
 8012628:	4b02      	ldr	r3, [pc, #8]	; (8012634 <G_q_initialize+0x14>)
 801262a:	2201      	movs	r2, #1
 801262c:	701a      	strb	r2, [r3, #0]
}
 801262e:	bf00      	nop
 8012630:	bd80      	pop	{r7, pc}
 8012632:	bf00      	nop
 8012634:	24000304 	.word	0x24000304

08012638 <b_exp>:
/*
 * Arguments    : creal_T *x
 * Return Type  : void
 */
void b_exp(creal_T *x)
{
 8012638:	b590      	push	{r4, r7, lr}
 801263a:	b087      	sub	sp, #28
 801263c:	af00      	add	r7, sp, #0
 801263e:	6078      	str	r0, [r7, #4]
  double r;
  double d;
  if (x->im == 0.0) {
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	ed93 7b02 	vldr	d7, [r3, #8]
 8012646:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801264a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801264e:	d113      	bne.n	8012678 <b_exp+0x40>
    x->re = exp(x->re);
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	ed93 7b00 	vldr	d7, [r3]
 8012656:	eeb0 0b47 	vmov.f64	d0, d7
 801265a:	f00b ff15 	bl	801e488 <exp>
 801265e:	eeb0 7b40 	vmov.f64	d7, d0
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	ed83 7b00 	vstr	d7, [r3]
    x->im = 0.0;
 8012668:	687a      	ldr	r2, [r7, #4]
 801266a:	f04f 0300 	mov.w	r3, #0
 801266e:	f04f 0400 	mov.w	r4, #0
 8012672:	e9c2 3402 	strd	r3, r4, [r2, #8]
    r = exp(x->re / 2.0);
    d = x->im;
    x->re = r * (r * cos(x->im));
    x->im = r * (r * sin(d));
  }
}
 8012676:	e061      	b.n	801273c <b_exp+0x104>
  } else if (rtIsInf(x->im) && rtIsInf(x->re) && (x->re < 0.0)) {
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	ed93 7b02 	vldr	d7, [r3, #8]
 801267e:	eeb0 0b47 	vmov.f64	d0, d7
 8012682:	f000 f899 	bl	80127b8 <rtIsInf>
 8012686:	4603      	mov	r3, r0
 8012688:	2b00      	cmp	r3, #0
 801268a:	d020      	beq.n	80126ce <b_exp+0x96>
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	ed93 7b00 	vldr	d7, [r3]
 8012692:	eeb0 0b47 	vmov.f64	d0, d7
 8012696:	f000 f88f 	bl	80127b8 <rtIsInf>
 801269a:	4603      	mov	r3, r0
 801269c:	2b00      	cmp	r3, #0
 801269e:	d016      	beq.n	80126ce <b_exp+0x96>
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	ed93 7b00 	vldr	d7, [r3]
 80126a6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80126aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126ae:	d50e      	bpl.n	80126ce <b_exp+0x96>
    x->re = 0.0;
 80126b0:	687a      	ldr	r2, [r7, #4]
 80126b2:	f04f 0300 	mov.w	r3, #0
 80126b6:	f04f 0400 	mov.w	r4, #0
 80126ba:	e9c2 3400 	strd	r3, r4, [r2]
    x->im = 0.0;
 80126be:	687a      	ldr	r2, [r7, #4]
 80126c0:	f04f 0300 	mov.w	r3, #0
 80126c4:	f04f 0400 	mov.w	r4, #0
 80126c8:	e9c2 3402 	strd	r3, r4, [r2, #8]
}
 80126cc:	e036      	b.n	801273c <b_exp+0x104>
    r = exp(x->re / 2.0);
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	ed93 7b00 	vldr	d7, [r3]
 80126d4:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 80126d8:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80126dc:	eeb0 0b45 	vmov.f64	d0, d5
 80126e0:	f00b fed2 	bl	801e488 <exp>
 80126e4:	ed87 0b04 	vstr	d0, [r7, #16]
    d = x->im;
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80126ee:	e9c7 3402 	strd	r3, r4, [r7, #8]
    x->re = r * (r * cos(x->im));
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	ed93 7b02 	vldr	d7, [r3, #8]
 80126f8:	eeb0 0b47 	vmov.f64	d0, d7
 80126fc:	f00b fe4c 	bl	801e398 <cos>
 8012700:	eeb0 6b40 	vmov.f64	d6, d0
 8012704:	ed97 7b04 	vldr	d7, [r7, #16]
 8012708:	ee26 6b07 	vmul.f64	d6, d6, d7
 801270c:	ed97 7b04 	vldr	d7, [r7, #16]
 8012710:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	ed83 7b00 	vstr	d7, [r3]
    x->im = r * (r * sin(d));
 801271a:	ed97 0b02 	vldr	d0, [r7, #8]
 801271e:	f00b fe77 	bl	801e410 <sin>
 8012722:	eeb0 6b40 	vmov.f64	d6, d0
 8012726:	ed97 7b04 	vldr	d7, [r7, #16]
 801272a:	ee26 6b07 	vmul.f64	d6, d6, d7
 801272e:	ed97 7b04 	vldr	d7, [r7, #16]
 8012732:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	ed83 7b02 	vstr	d7, [r3, #8]
}
 801273c:	bf00      	nop
 801273e:	371c      	adds	r7, #28
 8012740:	46bd      	mov	sp, r7
 8012742:	bd90      	pop	{r4, r7, pc}

08012744 <rt_InitInfAndNaN>:
#pragma warning(disable: 4756 56)

#endif

void rt_InitInfAndNaN()
{
 8012744:	b490      	push	{r4, r7}
 8012746:	af00      	add	r7, sp, #0
  rtNaN = nan("");
 8012748:	4a0f      	ldr	r2, [pc, #60]	; (8012788 <rt_InitInfAndNaN+0x44>)
 801274a:	f04f 0300 	mov.w	r3, #0
 801274e:	4c0f      	ldr	r4, [pc, #60]	; (801278c <rt_InitInfAndNaN+0x48>)
 8012750:	e9c2 3400 	strd	r3, r4, [r2]
  rtNaNF = nanf("");
 8012754:	4b0e      	ldr	r3, [pc, #56]	; (8012790 <rt_InitInfAndNaN+0x4c>)
 8012756:	4a0f      	ldr	r2, [pc, #60]	; (8012794 <rt_InitInfAndNaN+0x50>)
 8012758:	601a      	str	r2, [r3, #0]
  rtInf = (real_T)INFINITY;
 801275a:	4a0f      	ldr	r2, [pc, #60]	; (8012798 <rt_InitInfAndNaN+0x54>)
 801275c:	f04f 0300 	mov.w	r3, #0
 8012760:	4c0e      	ldr	r4, [pc, #56]	; (801279c <rt_InitInfAndNaN+0x58>)
 8012762:	e9c2 3400 	strd	r3, r4, [r2]
  rtInfF = (real32_T)INFINITY;
 8012766:	4b0e      	ldr	r3, [pc, #56]	; (80127a0 <rt_InitInfAndNaN+0x5c>)
 8012768:	f04f 42ff 	mov.w	r2, #2139095040	; 0x7f800000
 801276c:	601a      	str	r2, [r3, #0]
  rtMinusInf = -(real_T)INFINITY;
 801276e:	4a0d      	ldr	r2, [pc, #52]	; (80127a4 <rt_InitInfAndNaN+0x60>)
 8012770:	f04f 0300 	mov.w	r3, #0
 8012774:	4c0c      	ldr	r4, [pc, #48]	; (80127a8 <rt_InitInfAndNaN+0x64>)
 8012776:	e9c2 3400 	strd	r3, r4, [r2]
  rtMinusInfF = -(real32_T)INFINITY;
 801277a:	4b0c      	ldr	r3, [pc, #48]	; (80127ac <rt_InitInfAndNaN+0x68>)
 801277c:	4a0c      	ldr	r2, [pc, #48]	; (80127b0 <rt_InitInfAndNaN+0x6c>)
 801277e:	601a      	str	r2, [r3, #0]

#pragma warning(default: 4756 56)

#endif

}
 8012780:	bf00      	nop
 8012782:	46bd      	mov	sp, r7
 8012784:	bc90      	pop	{r4, r7}
 8012786:	4770      	bx	lr
 8012788:	24000620 	.word	0x24000620
 801278c:	7ff80000 	.word	0x7ff80000
 8012790:	24000610 	.word	0x24000610
 8012794:	7fc00000 	.word	0x7fc00000
 8012798:	24000618 	.word	0x24000618
 801279c:	7ff00000 	.word	0x7ff00000
 80127a0:	24000614 	.word	0x24000614
 80127a4:	24000628 	.word	0x24000628
 80127a8:	fff00000 	.word	0xfff00000
 80127ac:	24000630 	.word	0x24000630
 80127b0:	ff800000 	.word	0xff800000
 80127b4:	00000000 	.word	0x00000000

080127b8 <rtIsInf>:
/* Function: rtIsInf ==================================================
 * Abstract:
 * Test if value is infinite
 */
boolean_T rtIsInf(real_T value)
{
 80127b8:	b480      	push	{r7}
 80127ba:	b083      	sub	sp, #12
 80127bc:	af00      	add	r7, sp, #0
 80127be:	ed87 0b00 	vstr	d0, [r7]
  return (isinf(value) ? 1U : 0U);
 80127c2:	ed97 7b00 	vldr	d7, [r7]
 80127c6:	eeb0 7bc7 	vabs.f64	d7, d7
 80127ca:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80127f8 <rtIsInf+0x40>
 80127ce:	eeb4 7b46 	vcmp.f64	d7, d6
 80127d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127d6:	bfd4      	ite	le
 80127d8:	2301      	movle	r3, #1
 80127da:	2300      	movgt	r3, #0
 80127dc:	b2db      	uxtb	r3, r3
 80127de:	f083 0301 	eor.w	r3, r3, #1
 80127e2:	b2db      	uxtb	r3, r3
 80127e4:	b2db      	uxtb	r3, r3
}
 80127e6:	4618      	mov	r0, r3
 80127e8:	370c      	adds	r7, #12
 80127ea:	46bd      	mov	sp, r7
 80127ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f0:	4770      	bx	lr
 80127f2:	bf00      	nop
 80127f4:	f3af 8000 	nop.w
 80127f8:	ffffffff 	.word	0xffffffff
 80127fc:	7fefffff 	.word	0x7fefffff

08012800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8012800:	b580      	push	{r7, lr}
 8012802:	b082      	sub	sp, #8
 8012804:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8012806:	2003      	movs	r0, #3
 8012808:	f000 f98a 	bl	8012b20 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801280c:	f002 fdba 	bl	8015384 <HAL_RCC_GetSysClockFreq>
 8012810:	4601      	mov	r1, r0
 8012812:	4b15      	ldr	r3, [pc, #84]	; (8012868 <HAL_Init+0x68>)
 8012814:	699b      	ldr	r3, [r3, #24]
 8012816:	0a1b      	lsrs	r3, r3, #8
 8012818:	f003 030f 	and.w	r3, r3, #15
 801281c:	4a13      	ldr	r2, [pc, #76]	; (801286c <HAL_Init+0x6c>)
 801281e:	5cd3      	ldrb	r3, [r2, r3]
 8012820:	f003 031f 	and.w	r3, r3, #31
 8012824:	fa21 f303 	lsr.w	r3, r1, r3
 8012828:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801282a:	4b0f      	ldr	r3, [pc, #60]	; (8012868 <HAL_Init+0x68>)
 801282c:	699b      	ldr	r3, [r3, #24]
 801282e:	f003 030f 	and.w	r3, r3, #15
 8012832:	4a0e      	ldr	r2, [pc, #56]	; (801286c <HAL_Init+0x6c>)
 8012834:	5cd3      	ldrb	r3, [r2, r3]
 8012836:	f003 031f 	and.w	r3, r3, #31
 801283a:	687a      	ldr	r2, [r7, #4]
 801283c:	fa22 f303 	lsr.w	r3, r2, r3
 8012840:	4a0b      	ldr	r2, [pc, #44]	; (8012870 <HAL_Init+0x70>)
 8012842:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8012844:	4a0b      	ldr	r2, [pc, #44]	; (8012874 <HAL_Init+0x74>)
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801284a:	2000      	movs	r0, #0
 801284c:	f000 f814 	bl	8012878 <HAL_InitTick>
 8012850:	4603      	mov	r3, r0
 8012852:	2b00      	cmp	r3, #0
 8012854:	d001      	beq.n	801285a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8012856:	2301      	movs	r3, #1
 8012858:	e002      	b.n	8012860 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 801285a:	f7ef fa99 	bl	8001d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801285e:	2300      	movs	r3, #0
}
 8012860:	4618      	mov	r0, r3
 8012862:	3708      	adds	r7, #8
 8012864:	46bd      	mov	sp, r7
 8012866:	bd80      	pop	{r7, pc}
 8012868:	58024400 	.word	0x58024400
 801286c:	0801f490 	.word	0x0801f490
 8012870:	2400000c 	.word	0x2400000c
 8012874:	24000008 	.word	0x24000008

08012878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012878:	b580      	push	{r7, lr}
 801287a:	b082      	sub	sp, #8
 801287c:	af00      	add	r7, sp, #0
 801287e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8012880:	4b15      	ldr	r3, [pc, #84]	; (80128d8 <HAL_InitTick+0x60>)
 8012882:	781b      	ldrb	r3, [r3, #0]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d101      	bne.n	801288c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8012888:	2301      	movs	r3, #1
 801288a:	e021      	b.n	80128d0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 801288c:	4b13      	ldr	r3, [pc, #76]	; (80128dc <HAL_InitTick+0x64>)
 801288e:	681a      	ldr	r2, [r3, #0]
 8012890:	4b11      	ldr	r3, [pc, #68]	; (80128d8 <HAL_InitTick+0x60>)
 8012892:	781b      	ldrb	r3, [r3, #0]
 8012894:	4619      	mov	r1, r3
 8012896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801289a:	fbb3 f3f1 	udiv	r3, r3, r1
 801289e:	fbb2 f3f3 	udiv	r3, r2, r3
 80128a2:	4618      	mov	r0, r3
 80128a4:	f000 f96f 	bl	8012b86 <HAL_SYSTICK_Config>
 80128a8:	4603      	mov	r3, r0
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d001      	beq.n	80128b2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80128ae:	2301      	movs	r3, #1
 80128b0:	e00e      	b.n	80128d0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	2b0f      	cmp	r3, #15
 80128b6:	d80a      	bhi.n	80128ce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80128b8:	2200      	movs	r2, #0
 80128ba:	6879      	ldr	r1, [r7, #4]
 80128bc:	f04f 30ff 	mov.w	r0, #4294967295
 80128c0:	f000 f939 	bl	8012b36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80128c4:	4a06      	ldr	r2, [pc, #24]	; (80128e0 <HAL_InitTick+0x68>)
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80128ca:	2300      	movs	r3, #0
 80128cc:	e000      	b.n	80128d0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80128ce:	2301      	movs	r3, #1
}
 80128d0:	4618      	mov	r0, r3
 80128d2:	3708      	adds	r7, #8
 80128d4:	46bd      	mov	sp, r7
 80128d6:	bd80      	pop	{r7, pc}
 80128d8:	24000014 	.word	0x24000014
 80128dc:	24000008 	.word	0x24000008
 80128e0:	24000010 	.word	0x24000010

080128e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80128e4:	b480      	push	{r7}
 80128e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80128e8:	4b06      	ldr	r3, [pc, #24]	; (8012904 <HAL_IncTick+0x20>)
 80128ea:	781b      	ldrb	r3, [r3, #0]
 80128ec:	461a      	mov	r2, r3
 80128ee:	4b06      	ldr	r3, [pc, #24]	; (8012908 <HAL_IncTick+0x24>)
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	4413      	add	r3, r2
 80128f4:	4a04      	ldr	r2, [pc, #16]	; (8012908 <HAL_IncTick+0x24>)
 80128f6:	6013      	str	r3, [r2, #0]
}
 80128f8:	bf00      	nop
 80128fa:	46bd      	mov	sp, r7
 80128fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012900:	4770      	bx	lr
 8012902:	bf00      	nop
 8012904:	24000014 	.word	0x24000014
 8012908:	24000634 	.word	0x24000634

0801290c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801290c:	b480      	push	{r7}
 801290e:	af00      	add	r7, sp, #0
  return uwTick;
 8012910:	4b03      	ldr	r3, [pc, #12]	; (8012920 <HAL_GetTick+0x14>)
 8012912:	681b      	ldr	r3, [r3, #0]
}
 8012914:	4618      	mov	r0, r3
 8012916:	46bd      	mov	sp, r7
 8012918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801291c:	4770      	bx	lr
 801291e:	bf00      	nop
 8012920:	24000634 	.word	0x24000634

08012924 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8012924:	b580      	push	{r7, lr}
 8012926:	b084      	sub	sp, #16
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801292c:	f7ff ffee 	bl	801290c <HAL_GetTick>
 8012930:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	f1b3 3fff 	cmp.w	r3, #4294967295
 801293c:	d005      	beq.n	801294a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801293e:	4b09      	ldr	r3, [pc, #36]	; (8012964 <HAL_Delay+0x40>)
 8012940:	781b      	ldrb	r3, [r3, #0]
 8012942:	461a      	mov	r2, r3
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	4413      	add	r3, r2
 8012948:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801294a:	bf00      	nop
 801294c:	f7ff ffde 	bl	801290c <HAL_GetTick>
 8012950:	4602      	mov	r2, r0
 8012952:	68bb      	ldr	r3, [r7, #8]
 8012954:	1ad3      	subs	r3, r2, r3
 8012956:	68fa      	ldr	r2, [r7, #12]
 8012958:	429a      	cmp	r2, r3
 801295a:	d8f7      	bhi.n	801294c <HAL_Delay+0x28>
  {
  }
}
 801295c:	bf00      	nop
 801295e:	3710      	adds	r7, #16
 8012960:	46bd      	mov	sp, r7
 8012962:	bd80      	pop	{r7, pc}
 8012964:	24000014 	.word	0x24000014

08012968 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8012968:	b480      	push	{r7}
 801296a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 801296c:	4b03      	ldr	r3, [pc, #12]	; (801297c <HAL_GetREVID+0x14>)
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	0c1b      	lsrs	r3, r3, #16
}
 8012972:	4618      	mov	r0, r3
 8012974:	46bd      	mov	sp, r7
 8012976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297a:	4770      	bx	lr
 801297c:	5c001000 	.word	0x5c001000

08012980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012980:	b480      	push	{r7}
 8012982:	b085      	sub	sp, #20
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	f003 0307 	and.w	r3, r3, #7
 801298e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8012990:	4b0b      	ldr	r3, [pc, #44]	; (80129c0 <__NVIC_SetPriorityGrouping+0x40>)
 8012992:	68db      	ldr	r3, [r3, #12]
 8012994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8012996:	68ba      	ldr	r2, [r7, #8]
 8012998:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801299c:	4013      	ands	r3, r2
 801299e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80129a4:	68bb      	ldr	r3, [r7, #8]
 80129a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80129a8:	4b06      	ldr	r3, [pc, #24]	; (80129c4 <__NVIC_SetPriorityGrouping+0x44>)
 80129aa:	4313      	orrs	r3, r2
 80129ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80129ae:	4a04      	ldr	r2, [pc, #16]	; (80129c0 <__NVIC_SetPriorityGrouping+0x40>)
 80129b0:	68bb      	ldr	r3, [r7, #8]
 80129b2:	60d3      	str	r3, [r2, #12]
}
 80129b4:	bf00      	nop
 80129b6:	3714      	adds	r7, #20
 80129b8:	46bd      	mov	sp, r7
 80129ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129be:	4770      	bx	lr
 80129c0:	e000ed00 	.word	0xe000ed00
 80129c4:	05fa0000 	.word	0x05fa0000

080129c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80129c8:	b480      	push	{r7}
 80129ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80129cc:	4b04      	ldr	r3, [pc, #16]	; (80129e0 <__NVIC_GetPriorityGrouping+0x18>)
 80129ce:	68db      	ldr	r3, [r3, #12]
 80129d0:	0a1b      	lsrs	r3, r3, #8
 80129d2:	f003 0307 	and.w	r3, r3, #7
}
 80129d6:	4618      	mov	r0, r3
 80129d8:	46bd      	mov	sp, r7
 80129da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129de:	4770      	bx	lr
 80129e0:	e000ed00 	.word	0xe000ed00

080129e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80129e4:	b480      	push	{r7}
 80129e6:	b083      	sub	sp, #12
 80129e8:	af00      	add	r7, sp, #0
 80129ea:	4603      	mov	r3, r0
 80129ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80129ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	db0b      	blt.n	8012a0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80129f6:	88fb      	ldrh	r3, [r7, #6]
 80129f8:	f003 021f 	and.w	r2, r3, #31
 80129fc:	4907      	ldr	r1, [pc, #28]	; (8012a1c <__NVIC_EnableIRQ+0x38>)
 80129fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012a02:	095b      	lsrs	r3, r3, #5
 8012a04:	2001      	movs	r0, #1
 8012a06:	fa00 f202 	lsl.w	r2, r0, r2
 8012a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8012a0e:	bf00      	nop
 8012a10:	370c      	adds	r7, #12
 8012a12:	46bd      	mov	sp, r7
 8012a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a18:	4770      	bx	lr
 8012a1a:	bf00      	nop
 8012a1c:	e000e100 	.word	0xe000e100

08012a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8012a20:	b480      	push	{r7}
 8012a22:	b083      	sub	sp, #12
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	4603      	mov	r3, r0
 8012a28:	6039      	str	r1, [r7, #0]
 8012a2a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012a2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	db0a      	blt.n	8012a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012a34:	683b      	ldr	r3, [r7, #0]
 8012a36:	b2da      	uxtb	r2, r3
 8012a38:	490c      	ldr	r1, [pc, #48]	; (8012a6c <__NVIC_SetPriority+0x4c>)
 8012a3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012a3e:	0112      	lsls	r2, r2, #4
 8012a40:	b2d2      	uxtb	r2, r2
 8012a42:	440b      	add	r3, r1
 8012a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8012a48:	e00a      	b.n	8012a60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012a4a:	683b      	ldr	r3, [r7, #0]
 8012a4c:	b2da      	uxtb	r2, r3
 8012a4e:	4908      	ldr	r1, [pc, #32]	; (8012a70 <__NVIC_SetPriority+0x50>)
 8012a50:	88fb      	ldrh	r3, [r7, #6]
 8012a52:	f003 030f 	and.w	r3, r3, #15
 8012a56:	3b04      	subs	r3, #4
 8012a58:	0112      	lsls	r2, r2, #4
 8012a5a:	b2d2      	uxtb	r2, r2
 8012a5c:	440b      	add	r3, r1
 8012a5e:	761a      	strb	r2, [r3, #24]
}
 8012a60:	bf00      	nop
 8012a62:	370c      	adds	r7, #12
 8012a64:	46bd      	mov	sp, r7
 8012a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a6a:	4770      	bx	lr
 8012a6c:	e000e100 	.word	0xe000e100
 8012a70:	e000ed00 	.word	0xe000ed00

08012a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8012a74:	b480      	push	{r7}
 8012a76:	b089      	sub	sp, #36	; 0x24
 8012a78:	af00      	add	r7, sp, #0
 8012a7a:	60f8      	str	r0, [r7, #12]
 8012a7c:	60b9      	str	r1, [r7, #8]
 8012a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	f003 0307 	and.w	r3, r3, #7
 8012a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8012a88:	69fb      	ldr	r3, [r7, #28]
 8012a8a:	f1c3 0307 	rsb	r3, r3, #7
 8012a8e:	2b04      	cmp	r3, #4
 8012a90:	bf28      	it	cs
 8012a92:	2304      	movcs	r3, #4
 8012a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8012a96:	69fb      	ldr	r3, [r7, #28]
 8012a98:	3304      	adds	r3, #4
 8012a9a:	2b06      	cmp	r3, #6
 8012a9c:	d902      	bls.n	8012aa4 <NVIC_EncodePriority+0x30>
 8012a9e:	69fb      	ldr	r3, [r7, #28]
 8012aa0:	3b03      	subs	r3, #3
 8012aa2:	e000      	b.n	8012aa6 <NVIC_EncodePriority+0x32>
 8012aa4:	2300      	movs	r3, #0
 8012aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8012aac:	69bb      	ldr	r3, [r7, #24]
 8012aae:	fa02 f303 	lsl.w	r3, r2, r3
 8012ab2:	43da      	mvns	r2, r3
 8012ab4:	68bb      	ldr	r3, [r7, #8]
 8012ab6:	401a      	ands	r2, r3
 8012ab8:	697b      	ldr	r3, [r7, #20]
 8012aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8012abc:	f04f 31ff 	mov.w	r1, #4294967295
 8012ac0:	697b      	ldr	r3, [r7, #20]
 8012ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8012ac6:	43d9      	mvns	r1, r3
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012acc:	4313      	orrs	r3, r2
         );
}
 8012ace:	4618      	mov	r0, r3
 8012ad0:	3724      	adds	r7, #36	; 0x24
 8012ad2:	46bd      	mov	sp, r7
 8012ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad8:	4770      	bx	lr
	...

08012adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8012adc:	b580      	push	{r7, lr}
 8012ade:	b082      	sub	sp, #8
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	3b01      	subs	r3, #1
 8012ae8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8012aec:	d301      	bcc.n	8012af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8012aee:	2301      	movs	r3, #1
 8012af0:	e00f      	b.n	8012b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8012af2:	4a0a      	ldr	r2, [pc, #40]	; (8012b1c <SysTick_Config+0x40>)
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	3b01      	subs	r3, #1
 8012af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8012afa:	210f      	movs	r1, #15
 8012afc:	f04f 30ff 	mov.w	r0, #4294967295
 8012b00:	f7ff ff8e 	bl	8012a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8012b04:	4b05      	ldr	r3, [pc, #20]	; (8012b1c <SysTick_Config+0x40>)
 8012b06:	2200      	movs	r2, #0
 8012b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8012b0a:	4b04      	ldr	r3, [pc, #16]	; (8012b1c <SysTick_Config+0x40>)
 8012b0c:	2207      	movs	r2, #7
 8012b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8012b10:	2300      	movs	r3, #0
}
 8012b12:	4618      	mov	r0, r3
 8012b14:	3708      	adds	r7, #8
 8012b16:	46bd      	mov	sp, r7
 8012b18:	bd80      	pop	{r7, pc}
 8012b1a:	bf00      	nop
 8012b1c:	e000e010 	.word	0xe000e010

08012b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012b20:	b580      	push	{r7, lr}
 8012b22:	b082      	sub	sp, #8
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8012b28:	6878      	ldr	r0, [r7, #4]
 8012b2a:	f7ff ff29 	bl	8012980 <__NVIC_SetPriorityGrouping>
}
 8012b2e:	bf00      	nop
 8012b30:	3708      	adds	r7, #8
 8012b32:	46bd      	mov	sp, r7
 8012b34:	bd80      	pop	{r7, pc}

08012b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8012b36:	b580      	push	{r7, lr}
 8012b38:	b086      	sub	sp, #24
 8012b3a:	af00      	add	r7, sp, #0
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	60b9      	str	r1, [r7, #8]
 8012b40:	607a      	str	r2, [r7, #4]
 8012b42:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8012b44:	f7ff ff40 	bl	80129c8 <__NVIC_GetPriorityGrouping>
 8012b48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8012b4a:	687a      	ldr	r2, [r7, #4]
 8012b4c:	68b9      	ldr	r1, [r7, #8]
 8012b4e:	6978      	ldr	r0, [r7, #20]
 8012b50:	f7ff ff90 	bl	8012a74 <NVIC_EncodePriority>
 8012b54:	4602      	mov	r2, r0
 8012b56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012b5a:	4611      	mov	r1, r2
 8012b5c:	4618      	mov	r0, r3
 8012b5e:	f7ff ff5f 	bl	8012a20 <__NVIC_SetPriority>
}
 8012b62:	bf00      	nop
 8012b64:	3718      	adds	r7, #24
 8012b66:	46bd      	mov	sp, r7
 8012b68:	bd80      	pop	{r7, pc}

08012b6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012b6a:	b580      	push	{r7, lr}
 8012b6c:	b082      	sub	sp, #8
 8012b6e:	af00      	add	r7, sp, #0
 8012b70:	4603      	mov	r3, r0
 8012b72:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8012b74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012b78:	4618      	mov	r0, r3
 8012b7a:	f7ff ff33 	bl	80129e4 <__NVIC_EnableIRQ>
}
 8012b7e:	bf00      	nop
 8012b80:	3708      	adds	r7, #8
 8012b82:	46bd      	mov	sp, r7
 8012b84:	bd80      	pop	{r7, pc}

08012b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8012b86:	b580      	push	{r7, lr}
 8012b88:	b082      	sub	sp, #8
 8012b8a:	af00      	add	r7, sp, #0
 8012b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8012b8e:	6878      	ldr	r0, [r7, #4]
 8012b90:	f7ff ffa4 	bl	8012adc <SysTick_Config>
 8012b94:	4603      	mov	r3, r0
}
 8012b96:	4618      	mov	r0, r3
 8012b98:	3708      	adds	r7, #8
 8012b9a:	46bd      	mov	sp, r7
 8012b9c:	bd80      	pop	{r7, pc}
	...

08012ba0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8012ba0:	b580      	push	{r7, lr}
 8012ba2:	b084      	sub	sp, #16
 8012ba4:	af00      	add	r7, sp, #0
 8012ba6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d101      	bne.n	8012bb2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8012bae:	2301      	movs	r3, #1
 8012bb0:	e205      	b.n	8012fbe <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8012bb8:	b2db      	uxtb	r3, r3
 8012bba:	2b02      	cmp	r3, #2
 8012bbc:	d004      	beq.n	8012bc8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	2280      	movs	r2, #128	; 0x80
 8012bc2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8012bc4:	2301      	movs	r3, #1
 8012bc6:	e1fa      	b.n	8012fbe <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	4a8c      	ldr	r2, [pc, #560]	; (8012e00 <HAL_DMA_Abort_IT+0x260>)
 8012bce:	4293      	cmp	r3, r2
 8012bd0:	d04a      	beq.n	8012c68 <HAL_DMA_Abort_IT+0xc8>
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	4a8b      	ldr	r2, [pc, #556]	; (8012e04 <HAL_DMA_Abort_IT+0x264>)
 8012bd8:	4293      	cmp	r3, r2
 8012bda:	d045      	beq.n	8012c68 <HAL_DMA_Abort_IT+0xc8>
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	4a89      	ldr	r2, [pc, #548]	; (8012e08 <HAL_DMA_Abort_IT+0x268>)
 8012be2:	4293      	cmp	r3, r2
 8012be4:	d040      	beq.n	8012c68 <HAL_DMA_Abort_IT+0xc8>
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	4a88      	ldr	r2, [pc, #544]	; (8012e0c <HAL_DMA_Abort_IT+0x26c>)
 8012bec:	4293      	cmp	r3, r2
 8012bee:	d03b      	beq.n	8012c68 <HAL_DMA_Abort_IT+0xc8>
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	4a86      	ldr	r2, [pc, #536]	; (8012e10 <HAL_DMA_Abort_IT+0x270>)
 8012bf6:	4293      	cmp	r3, r2
 8012bf8:	d036      	beq.n	8012c68 <HAL_DMA_Abort_IT+0xc8>
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	4a85      	ldr	r2, [pc, #532]	; (8012e14 <HAL_DMA_Abort_IT+0x274>)
 8012c00:	4293      	cmp	r3, r2
 8012c02:	d031      	beq.n	8012c68 <HAL_DMA_Abort_IT+0xc8>
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	4a83      	ldr	r2, [pc, #524]	; (8012e18 <HAL_DMA_Abort_IT+0x278>)
 8012c0a:	4293      	cmp	r3, r2
 8012c0c:	d02c      	beq.n	8012c68 <HAL_DMA_Abort_IT+0xc8>
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	4a82      	ldr	r2, [pc, #520]	; (8012e1c <HAL_DMA_Abort_IT+0x27c>)
 8012c14:	4293      	cmp	r3, r2
 8012c16:	d027      	beq.n	8012c68 <HAL_DMA_Abort_IT+0xc8>
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	4a80      	ldr	r2, [pc, #512]	; (8012e20 <HAL_DMA_Abort_IT+0x280>)
 8012c1e:	4293      	cmp	r3, r2
 8012c20:	d022      	beq.n	8012c68 <HAL_DMA_Abort_IT+0xc8>
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	4a7f      	ldr	r2, [pc, #508]	; (8012e24 <HAL_DMA_Abort_IT+0x284>)
 8012c28:	4293      	cmp	r3, r2
 8012c2a:	d01d      	beq.n	8012c68 <HAL_DMA_Abort_IT+0xc8>
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	4a7d      	ldr	r2, [pc, #500]	; (8012e28 <HAL_DMA_Abort_IT+0x288>)
 8012c32:	4293      	cmp	r3, r2
 8012c34:	d018      	beq.n	8012c68 <HAL_DMA_Abort_IT+0xc8>
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	4a7c      	ldr	r2, [pc, #496]	; (8012e2c <HAL_DMA_Abort_IT+0x28c>)
 8012c3c:	4293      	cmp	r3, r2
 8012c3e:	d013      	beq.n	8012c68 <HAL_DMA_Abort_IT+0xc8>
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	4a7a      	ldr	r2, [pc, #488]	; (8012e30 <HAL_DMA_Abort_IT+0x290>)
 8012c46:	4293      	cmp	r3, r2
 8012c48:	d00e      	beq.n	8012c68 <HAL_DMA_Abort_IT+0xc8>
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	4a79      	ldr	r2, [pc, #484]	; (8012e34 <HAL_DMA_Abort_IT+0x294>)
 8012c50:	4293      	cmp	r3, r2
 8012c52:	d009      	beq.n	8012c68 <HAL_DMA_Abort_IT+0xc8>
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	4a77      	ldr	r2, [pc, #476]	; (8012e38 <HAL_DMA_Abort_IT+0x298>)
 8012c5a:	4293      	cmp	r3, r2
 8012c5c:	d004      	beq.n	8012c68 <HAL_DMA_Abort_IT+0xc8>
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	4a76      	ldr	r2, [pc, #472]	; (8012e3c <HAL_DMA_Abort_IT+0x29c>)
 8012c64:	4293      	cmp	r3, r2
 8012c66:	d101      	bne.n	8012c6c <HAL_DMA_Abort_IT+0xcc>
 8012c68:	2301      	movs	r3, #1
 8012c6a:	e000      	b.n	8012c6e <HAL_DMA_Abort_IT+0xce>
 8012c6c:	2300      	movs	r3, #0
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d065      	beq.n	8012d3e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	2204      	movs	r2, #4
 8012c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	4a60      	ldr	r2, [pc, #384]	; (8012e00 <HAL_DMA_Abort_IT+0x260>)
 8012c80:	4293      	cmp	r3, r2
 8012c82:	d04a      	beq.n	8012d1a <HAL_DMA_Abort_IT+0x17a>
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	4a5e      	ldr	r2, [pc, #376]	; (8012e04 <HAL_DMA_Abort_IT+0x264>)
 8012c8a:	4293      	cmp	r3, r2
 8012c8c:	d045      	beq.n	8012d1a <HAL_DMA_Abort_IT+0x17a>
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	4a5d      	ldr	r2, [pc, #372]	; (8012e08 <HAL_DMA_Abort_IT+0x268>)
 8012c94:	4293      	cmp	r3, r2
 8012c96:	d040      	beq.n	8012d1a <HAL_DMA_Abort_IT+0x17a>
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	4a5b      	ldr	r2, [pc, #364]	; (8012e0c <HAL_DMA_Abort_IT+0x26c>)
 8012c9e:	4293      	cmp	r3, r2
 8012ca0:	d03b      	beq.n	8012d1a <HAL_DMA_Abort_IT+0x17a>
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	4a5a      	ldr	r2, [pc, #360]	; (8012e10 <HAL_DMA_Abort_IT+0x270>)
 8012ca8:	4293      	cmp	r3, r2
 8012caa:	d036      	beq.n	8012d1a <HAL_DMA_Abort_IT+0x17a>
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	4a58      	ldr	r2, [pc, #352]	; (8012e14 <HAL_DMA_Abort_IT+0x274>)
 8012cb2:	4293      	cmp	r3, r2
 8012cb4:	d031      	beq.n	8012d1a <HAL_DMA_Abort_IT+0x17a>
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	4a57      	ldr	r2, [pc, #348]	; (8012e18 <HAL_DMA_Abort_IT+0x278>)
 8012cbc:	4293      	cmp	r3, r2
 8012cbe:	d02c      	beq.n	8012d1a <HAL_DMA_Abort_IT+0x17a>
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	4a55      	ldr	r2, [pc, #340]	; (8012e1c <HAL_DMA_Abort_IT+0x27c>)
 8012cc6:	4293      	cmp	r3, r2
 8012cc8:	d027      	beq.n	8012d1a <HAL_DMA_Abort_IT+0x17a>
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	4a54      	ldr	r2, [pc, #336]	; (8012e20 <HAL_DMA_Abort_IT+0x280>)
 8012cd0:	4293      	cmp	r3, r2
 8012cd2:	d022      	beq.n	8012d1a <HAL_DMA_Abort_IT+0x17a>
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	4a52      	ldr	r2, [pc, #328]	; (8012e24 <HAL_DMA_Abort_IT+0x284>)
 8012cda:	4293      	cmp	r3, r2
 8012cdc:	d01d      	beq.n	8012d1a <HAL_DMA_Abort_IT+0x17a>
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	4a51      	ldr	r2, [pc, #324]	; (8012e28 <HAL_DMA_Abort_IT+0x288>)
 8012ce4:	4293      	cmp	r3, r2
 8012ce6:	d018      	beq.n	8012d1a <HAL_DMA_Abort_IT+0x17a>
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	4a4f      	ldr	r2, [pc, #316]	; (8012e2c <HAL_DMA_Abort_IT+0x28c>)
 8012cee:	4293      	cmp	r3, r2
 8012cf0:	d013      	beq.n	8012d1a <HAL_DMA_Abort_IT+0x17a>
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	4a4e      	ldr	r2, [pc, #312]	; (8012e30 <HAL_DMA_Abort_IT+0x290>)
 8012cf8:	4293      	cmp	r3, r2
 8012cfa:	d00e      	beq.n	8012d1a <HAL_DMA_Abort_IT+0x17a>
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	4a4c      	ldr	r2, [pc, #304]	; (8012e34 <HAL_DMA_Abort_IT+0x294>)
 8012d02:	4293      	cmp	r3, r2
 8012d04:	d009      	beq.n	8012d1a <HAL_DMA_Abort_IT+0x17a>
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	4a4b      	ldr	r2, [pc, #300]	; (8012e38 <HAL_DMA_Abort_IT+0x298>)
 8012d0c:	4293      	cmp	r3, r2
 8012d0e:	d004      	beq.n	8012d1a <HAL_DMA_Abort_IT+0x17a>
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	4a49      	ldr	r2, [pc, #292]	; (8012e3c <HAL_DMA_Abort_IT+0x29c>)
 8012d16:	4293      	cmp	r3, r2
 8012d18:	d108      	bne.n	8012d2c <HAL_DMA_Abort_IT+0x18c>
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	681a      	ldr	r2, [r3, #0]
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	f022 0201 	bic.w	r2, r2, #1
 8012d28:	601a      	str	r2, [r3, #0]
 8012d2a:	e147      	b.n	8012fbc <HAL_DMA_Abort_IT+0x41c>
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	681a      	ldr	r2, [r3, #0]
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	f022 0201 	bic.w	r2, r2, #1
 8012d3a:	601a      	str	r2, [r3, #0]
 8012d3c:	e13e      	b.n	8012fbc <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	681a      	ldr	r2, [r3, #0]
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	f022 020e 	bic.w	r2, r2, #14
 8012d4c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	4a2b      	ldr	r2, [pc, #172]	; (8012e00 <HAL_DMA_Abort_IT+0x260>)
 8012d54:	4293      	cmp	r3, r2
 8012d56:	d04a      	beq.n	8012dee <HAL_DMA_Abort_IT+0x24e>
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	4a29      	ldr	r2, [pc, #164]	; (8012e04 <HAL_DMA_Abort_IT+0x264>)
 8012d5e:	4293      	cmp	r3, r2
 8012d60:	d045      	beq.n	8012dee <HAL_DMA_Abort_IT+0x24e>
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	4a28      	ldr	r2, [pc, #160]	; (8012e08 <HAL_DMA_Abort_IT+0x268>)
 8012d68:	4293      	cmp	r3, r2
 8012d6a:	d040      	beq.n	8012dee <HAL_DMA_Abort_IT+0x24e>
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	4a26      	ldr	r2, [pc, #152]	; (8012e0c <HAL_DMA_Abort_IT+0x26c>)
 8012d72:	4293      	cmp	r3, r2
 8012d74:	d03b      	beq.n	8012dee <HAL_DMA_Abort_IT+0x24e>
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	4a25      	ldr	r2, [pc, #148]	; (8012e10 <HAL_DMA_Abort_IT+0x270>)
 8012d7c:	4293      	cmp	r3, r2
 8012d7e:	d036      	beq.n	8012dee <HAL_DMA_Abort_IT+0x24e>
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	4a23      	ldr	r2, [pc, #140]	; (8012e14 <HAL_DMA_Abort_IT+0x274>)
 8012d86:	4293      	cmp	r3, r2
 8012d88:	d031      	beq.n	8012dee <HAL_DMA_Abort_IT+0x24e>
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	4a22      	ldr	r2, [pc, #136]	; (8012e18 <HAL_DMA_Abort_IT+0x278>)
 8012d90:	4293      	cmp	r3, r2
 8012d92:	d02c      	beq.n	8012dee <HAL_DMA_Abort_IT+0x24e>
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	4a20      	ldr	r2, [pc, #128]	; (8012e1c <HAL_DMA_Abort_IT+0x27c>)
 8012d9a:	4293      	cmp	r3, r2
 8012d9c:	d027      	beq.n	8012dee <HAL_DMA_Abort_IT+0x24e>
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	4a1f      	ldr	r2, [pc, #124]	; (8012e20 <HAL_DMA_Abort_IT+0x280>)
 8012da4:	4293      	cmp	r3, r2
 8012da6:	d022      	beq.n	8012dee <HAL_DMA_Abort_IT+0x24e>
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	4a1d      	ldr	r2, [pc, #116]	; (8012e24 <HAL_DMA_Abort_IT+0x284>)
 8012dae:	4293      	cmp	r3, r2
 8012db0:	d01d      	beq.n	8012dee <HAL_DMA_Abort_IT+0x24e>
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	4a1c      	ldr	r2, [pc, #112]	; (8012e28 <HAL_DMA_Abort_IT+0x288>)
 8012db8:	4293      	cmp	r3, r2
 8012dba:	d018      	beq.n	8012dee <HAL_DMA_Abort_IT+0x24e>
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	4a1a      	ldr	r2, [pc, #104]	; (8012e2c <HAL_DMA_Abort_IT+0x28c>)
 8012dc2:	4293      	cmp	r3, r2
 8012dc4:	d013      	beq.n	8012dee <HAL_DMA_Abort_IT+0x24e>
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	4a19      	ldr	r2, [pc, #100]	; (8012e30 <HAL_DMA_Abort_IT+0x290>)
 8012dcc:	4293      	cmp	r3, r2
 8012dce:	d00e      	beq.n	8012dee <HAL_DMA_Abort_IT+0x24e>
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	4a17      	ldr	r2, [pc, #92]	; (8012e34 <HAL_DMA_Abort_IT+0x294>)
 8012dd6:	4293      	cmp	r3, r2
 8012dd8:	d009      	beq.n	8012dee <HAL_DMA_Abort_IT+0x24e>
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	4a16      	ldr	r2, [pc, #88]	; (8012e38 <HAL_DMA_Abort_IT+0x298>)
 8012de0:	4293      	cmp	r3, r2
 8012de2:	d004      	beq.n	8012dee <HAL_DMA_Abort_IT+0x24e>
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	4a14      	ldr	r2, [pc, #80]	; (8012e3c <HAL_DMA_Abort_IT+0x29c>)
 8012dea:	4293      	cmp	r3, r2
 8012dec:	d128      	bne.n	8012e40 <HAL_DMA_Abort_IT+0x2a0>
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	681a      	ldr	r2, [r3, #0]
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	f022 0201 	bic.w	r2, r2, #1
 8012dfc:	601a      	str	r2, [r3, #0]
 8012dfe:	e027      	b.n	8012e50 <HAL_DMA_Abort_IT+0x2b0>
 8012e00:	40020010 	.word	0x40020010
 8012e04:	40020028 	.word	0x40020028
 8012e08:	40020040 	.word	0x40020040
 8012e0c:	40020058 	.word	0x40020058
 8012e10:	40020070 	.word	0x40020070
 8012e14:	40020088 	.word	0x40020088
 8012e18:	400200a0 	.word	0x400200a0
 8012e1c:	400200b8 	.word	0x400200b8
 8012e20:	40020410 	.word	0x40020410
 8012e24:	40020428 	.word	0x40020428
 8012e28:	40020440 	.word	0x40020440
 8012e2c:	40020458 	.word	0x40020458
 8012e30:	40020470 	.word	0x40020470
 8012e34:	40020488 	.word	0x40020488
 8012e38:	400204a0 	.word	0x400204a0
 8012e3c:	400204b8 	.word	0x400204b8
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	681a      	ldr	r2, [r3, #0]
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	f022 0201 	bic.w	r2, r2, #1
 8012e4e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	4a5c      	ldr	r2, [pc, #368]	; (8012fc8 <HAL_DMA_Abort_IT+0x428>)
 8012e56:	4293      	cmp	r3, r2
 8012e58:	d072      	beq.n	8012f40 <HAL_DMA_Abort_IT+0x3a0>
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	4a5b      	ldr	r2, [pc, #364]	; (8012fcc <HAL_DMA_Abort_IT+0x42c>)
 8012e60:	4293      	cmp	r3, r2
 8012e62:	d06d      	beq.n	8012f40 <HAL_DMA_Abort_IT+0x3a0>
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	4a59      	ldr	r2, [pc, #356]	; (8012fd0 <HAL_DMA_Abort_IT+0x430>)
 8012e6a:	4293      	cmp	r3, r2
 8012e6c:	d068      	beq.n	8012f40 <HAL_DMA_Abort_IT+0x3a0>
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	4a58      	ldr	r2, [pc, #352]	; (8012fd4 <HAL_DMA_Abort_IT+0x434>)
 8012e74:	4293      	cmp	r3, r2
 8012e76:	d063      	beq.n	8012f40 <HAL_DMA_Abort_IT+0x3a0>
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	4a56      	ldr	r2, [pc, #344]	; (8012fd8 <HAL_DMA_Abort_IT+0x438>)
 8012e7e:	4293      	cmp	r3, r2
 8012e80:	d05e      	beq.n	8012f40 <HAL_DMA_Abort_IT+0x3a0>
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	4a55      	ldr	r2, [pc, #340]	; (8012fdc <HAL_DMA_Abort_IT+0x43c>)
 8012e88:	4293      	cmp	r3, r2
 8012e8a:	d059      	beq.n	8012f40 <HAL_DMA_Abort_IT+0x3a0>
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	4a53      	ldr	r2, [pc, #332]	; (8012fe0 <HAL_DMA_Abort_IT+0x440>)
 8012e92:	4293      	cmp	r3, r2
 8012e94:	d054      	beq.n	8012f40 <HAL_DMA_Abort_IT+0x3a0>
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	4a52      	ldr	r2, [pc, #328]	; (8012fe4 <HAL_DMA_Abort_IT+0x444>)
 8012e9c:	4293      	cmp	r3, r2
 8012e9e:	d04f      	beq.n	8012f40 <HAL_DMA_Abort_IT+0x3a0>
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	4a50      	ldr	r2, [pc, #320]	; (8012fe8 <HAL_DMA_Abort_IT+0x448>)
 8012ea6:	4293      	cmp	r3, r2
 8012ea8:	d04a      	beq.n	8012f40 <HAL_DMA_Abort_IT+0x3a0>
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	4a4f      	ldr	r2, [pc, #316]	; (8012fec <HAL_DMA_Abort_IT+0x44c>)
 8012eb0:	4293      	cmp	r3, r2
 8012eb2:	d045      	beq.n	8012f40 <HAL_DMA_Abort_IT+0x3a0>
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	4a4d      	ldr	r2, [pc, #308]	; (8012ff0 <HAL_DMA_Abort_IT+0x450>)
 8012eba:	4293      	cmp	r3, r2
 8012ebc:	d040      	beq.n	8012f40 <HAL_DMA_Abort_IT+0x3a0>
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	4a4c      	ldr	r2, [pc, #304]	; (8012ff4 <HAL_DMA_Abort_IT+0x454>)
 8012ec4:	4293      	cmp	r3, r2
 8012ec6:	d03b      	beq.n	8012f40 <HAL_DMA_Abort_IT+0x3a0>
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	4a4a      	ldr	r2, [pc, #296]	; (8012ff8 <HAL_DMA_Abort_IT+0x458>)
 8012ece:	4293      	cmp	r3, r2
 8012ed0:	d036      	beq.n	8012f40 <HAL_DMA_Abort_IT+0x3a0>
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	4a49      	ldr	r2, [pc, #292]	; (8012ffc <HAL_DMA_Abort_IT+0x45c>)
 8012ed8:	4293      	cmp	r3, r2
 8012eda:	d031      	beq.n	8012f40 <HAL_DMA_Abort_IT+0x3a0>
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	4a47      	ldr	r2, [pc, #284]	; (8013000 <HAL_DMA_Abort_IT+0x460>)
 8012ee2:	4293      	cmp	r3, r2
 8012ee4:	d02c      	beq.n	8012f40 <HAL_DMA_Abort_IT+0x3a0>
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	4a46      	ldr	r2, [pc, #280]	; (8013004 <HAL_DMA_Abort_IT+0x464>)
 8012eec:	4293      	cmp	r3, r2
 8012eee:	d027      	beq.n	8012f40 <HAL_DMA_Abort_IT+0x3a0>
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	4a44      	ldr	r2, [pc, #272]	; (8013008 <HAL_DMA_Abort_IT+0x468>)
 8012ef6:	4293      	cmp	r3, r2
 8012ef8:	d022      	beq.n	8012f40 <HAL_DMA_Abort_IT+0x3a0>
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	4a43      	ldr	r2, [pc, #268]	; (801300c <HAL_DMA_Abort_IT+0x46c>)
 8012f00:	4293      	cmp	r3, r2
 8012f02:	d01d      	beq.n	8012f40 <HAL_DMA_Abort_IT+0x3a0>
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	4a41      	ldr	r2, [pc, #260]	; (8013010 <HAL_DMA_Abort_IT+0x470>)
 8012f0a:	4293      	cmp	r3, r2
 8012f0c:	d018      	beq.n	8012f40 <HAL_DMA_Abort_IT+0x3a0>
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	4a40      	ldr	r2, [pc, #256]	; (8013014 <HAL_DMA_Abort_IT+0x474>)
 8012f14:	4293      	cmp	r3, r2
 8012f16:	d013      	beq.n	8012f40 <HAL_DMA_Abort_IT+0x3a0>
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	4a3e      	ldr	r2, [pc, #248]	; (8013018 <HAL_DMA_Abort_IT+0x478>)
 8012f1e:	4293      	cmp	r3, r2
 8012f20:	d00e      	beq.n	8012f40 <HAL_DMA_Abort_IT+0x3a0>
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	4a3d      	ldr	r2, [pc, #244]	; (801301c <HAL_DMA_Abort_IT+0x47c>)
 8012f28:	4293      	cmp	r3, r2
 8012f2a:	d009      	beq.n	8012f40 <HAL_DMA_Abort_IT+0x3a0>
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	4a3b      	ldr	r2, [pc, #236]	; (8013020 <HAL_DMA_Abort_IT+0x480>)
 8012f32:	4293      	cmp	r3, r2
 8012f34:	d004      	beq.n	8012f40 <HAL_DMA_Abort_IT+0x3a0>
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	4a3a      	ldr	r2, [pc, #232]	; (8013024 <HAL_DMA_Abort_IT+0x484>)
 8012f3c:	4293      	cmp	r3, r2
 8012f3e:	d101      	bne.n	8012f44 <HAL_DMA_Abort_IT+0x3a4>
 8012f40:	2301      	movs	r3, #1
 8012f42:	e000      	b.n	8012f46 <HAL_DMA_Abort_IT+0x3a6>
 8012f44:	2300      	movs	r3, #0
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d028      	beq.n	8012f9c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012f4e:	681a      	ldr	r2, [r3, #0]
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012f54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8012f58:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012f5e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012f64:	f003 031f 	and.w	r3, r3, #31
 8012f68:	2201      	movs	r2, #1
 8012f6a:	409a      	lsls	r2, r3
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012f74:	687a      	ldr	r2, [r7, #4]
 8012f76:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8012f78:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d00c      	beq.n	8012f9c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f86:	681a      	ldr	r2, [r3, #0]
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8012f90:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f96:	687a      	ldr	r2, [r7, #4]
 8012f98:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8012f9a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	2200      	movs	r2, #0
 8012fa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	2201      	movs	r2, #1
 8012fa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d003      	beq.n	8012fbc <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012fb8:	6878      	ldr	r0, [r7, #4]
 8012fba:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8012fbc:	2300      	movs	r3, #0
}
 8012fbe:	4618      	mov	r0, r3
 8012fc0:	3710      	adds	r7, #16
 8012fc2:	46bd      	mov	sp, r7
 8012fc4:	bd80      	pop	{r7, pc}
 8012fc6:	bf00      	nop
 8012fc8:	40020010 	.word	0x40020010
 8012fcc:	40020028 	.word	0x40020028
 8012fd0:	40020040 	.word	0x40020040
 8012fd4:	40020058 	.word	0x40020058
 8012fd8:	40020070 	.word	0x40020070
 8012fdc:	40020088 	.word	0x40020088
 8012fe0:	400200a0 	.word	0x400200a0
 8012fe4:	400200b8 	.word	0x400200b8
 8012fe8:	40020410 	.word	0x40020410
 8012fec:	40020428 	.word	0x40020428
 8012ff0:	40020440 	.word	0x40020440
 8012ff4:	40020458 	.word	0x40020458
 8012ff8:	40020470 	.word	0x40020470
 8012ffc:	40020488 	.word	0x40020488
 8013000:	400204a0 	.word	0x400204a0
 8013004:	400204b8 	.word	0x400204b8
 8013008:	58025408 	.word	0x58025408
 801300c:	5802541c 	.word	0x5802541c
 8013010:	58025430 	.word	0x58025430
 8013014:	58025444 	.word	0x58025444
 8013018:	58025458 	.word	0x58025458
 801301c:	5802546c 	.word	0x5802546c
 8013020:	58025480 	.word	0x58025480
 8013024:	58025494 	.word	0x58025494

08013028 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8013028:	b480      	push	{r7}
 801302a:	b089      	sub	sp, #36	; 0x24
 801302c:	af00      	add	r7, sp, #0
 801302e:	6078      	str	r0, [r7, #4]
 8013030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8013032:	2300      	movs	r3, #0
 8013034:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8013036:	4b89      	ldr	r3, [pc, #548]	; (801325c <HAL_GPIO_Init+0x234>)
 8013038:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801303a:	e194      	b.n	8013366 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801303c:	683b      	ldr	r3, [r7, #0]
 801303e:	681a      	ldr	r2, [r3, #0]
 8013040:	2101      	movs	r1, #1
 8013042:	69fb      	ldr	r3, [r7, #28]
 8013044:	fa01 f303 	lsl.w	r3, r1, r3
 8013048:	4013      	ands	r3, r2
 801304a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 801304c:	693b      	ldr	r3, [r7, #16]
 801304e:	2b00      	cmp	r3, #0
 8013050:	f000 8186 	beq.w	8013360 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8013054:	683b      	ldr	r3, [r7, #0]
 8013056:	685b      	ldr	r3, [r3, #4]
 8013058:	2b01      	cmp	r3, #1
 801305a:	d00b      	beq.n	8013074 <HAL_GPIO_Init+0x4c>
 801305c:	683b      	ldr	r3, [r7, #0]
 801305e:	685b      	ldr	r3, [r3, #4]
 8013060:	2b02      	cmp	r3, #2
 8013062:	d007      	beq.n	8013074 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8013064:	683b      	ldr	r3, [r7, #0]
 8013066:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8013068:	2b11      	cmp	r3, #17
 801306a:	d003      	beq.n	8013074 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801306c:	683b      	ldr	r3, [r7, #0]
 801306e:	685b      	ldr	r3, [r3, #4]
 8013070:	2b12      	cmp	r3, #18
 8013072:	d130      	bne.n	80130d6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	689b      	ldr	r3, [r3, #8]
 8013078:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801307a:	69fb      	ldr	r3, [r7, #28]
 801307c:	005b      	lsls	r3, r3, #1
 801307e:	2203      	movs	r2, #3
 8013080:	fa02 f303 	lsl.w	r3, r2, r3
 8013084:	43db      	mvns	r3, r3
 8013086:	69ba      	ldr	r2, [r7, #24]
 8013088:	4013      	ands	r3, r2
 801308a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801308c:	683b      	ldr	r3, [r7, #0]
 801308e:	68da      	ldr	r2, [r3, #12]
 8013090:	69fb      	ldr	r3, [r7, #28]
 8013092:	005b      	lsls	r3, r3, #1
 8013094:	fa02 f303 	lsl.w	r3, r2, r3
 8013098:	69ba      	ldr	r2, [r7, #24]
 801309a:	4313      	orrs	r3, r2
 801309c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	69ba      	ldr	r2, [r7, #24]
 80130a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	685b      	ldr	r3, [r3, #4]
 80130a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80130aa:	2201      	movs	r2, #1
 80130ac:	69fb      	ldr	r3, [r7, #28]
 80130ae:	fa02 f303 	lsl.w	r3, r2, r3
 80130b2:	43db      	mvns	r3, r3
 80130b4:	69ba      	ldr	r2, [r7, #24]
 80130b6:	4013      	ands	r3, r2
 80130b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80130ba:	683b      	ldr	r3, [r7, #0]
 80130bc:	685b      	ldr	r3, [r3, #4]
 80130be:	091b      	lsrs	r3, r3, #4
 80130c0:	f003 0201 	and.w	r2, r3, #1
 80130c4:	69fb      	ldr	r3, [r7, #28]
 80130c6:	fa02 f303 	lsl.w	r3, r2, r3
 80130ca:	69ba      	ldr	r2, [r7, #24]
 80130cc:	4313      	orrs	r3, r2
 80130ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	69ba      	ldr	r2, [r7, #24]
 80130d4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	68db      	ldr	r3, [r3, #12]
 80130da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80130dc:	69fb      	ldr	r3, [r7, #28]
 80130de:	005b      	lsls	r3, r3, #1
 80130e0:	2203      	movs	r2, #3
 80130e2:	fa02 f303 	lsl.w	r3, r2, r3
 80130e6:	43db      	mvns	r3, r3
 80130e8:	69ba      	ldr	r2, [r7, #24]
 80130ea:	4013      	ands	r3, r2
 80130ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80130ee:	683b      	ldr	r3, [r7, #0]
 80130f0:	689a      	ldr	r2, [r3, #8]
 80130f2:	69fb      	ldr	r3, [r7, #28]
 80130f4:	005b      	lsls	r3, r3, #1
 80130f6:	fa02 f303 	lsl.w	r3, r2, r3
 80130fa:	69ba      	ldr	r2, [r7, #24]
 80130fc:	4313      	orrs	r3, r2
 80130fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	69ba      	ldr	r2, [r7, #24]
 8013104:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8013106:	683b      	ldr	r3, [r7, #0]
 8013108:	685b      	ldr	r3, [r3, #4]
 801310a:	2b02      	cmp	r3, #2
 801310c:	d003      	beq.n	8013116 <HAL_GPIO_Init+0xee>
 801310e:	683b      	ldr	r3, [r7, #0]
 8013110:	685b      	ldr	r3, [r3, #4]
 8013112:	2b12      	cmp	r3, #18
 8013114:	d123      	bne.n	801315e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8013116:	69fb      	ldr	r3, [r7, #28]
 8013118:	08da      	lsrs	r2, r3, #3
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	3208      	adds	r2, #8
 801311e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013122:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8013124:	69fb      	ldr	r3, [r7, #28]
 8013126:	f003 0307 	and.w	r3, r3, #7
 801312a:	009b      	lsls	r3, r3, #2
 801312c:	220f      	movs	r2, #15
 801312e:	fa02 f303 	lsl.w	r3, r2, r3
 8013132:	43db      	mvns	r3, r3
 8013134:	69ba      	ldr	r2, [r7, #24]
 8013136:	4013      	ands	r3, r2
 8013138:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801313a:	683b      	ldr	r3, [r7, #0]
 801313c:	691a      	ldr	r2, [r3, #16]
 801313e:	69fb      	ldr	r3, [r7, #28]
 8013140:	f003 0307 	and.w	r3, r3, #7
 8013144:	009b      	lsls	r3, r3, #2
 8013146:	fa02 f303 	lsl.w	r3, r2, r3
 801314a:	69ba      	ldr	r2, [r7, #24]
 801314c:	4313      	orrs	r3, r2
 801314e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8013150:	69fb      	ldr	r3, [r7, #28]
 8013152:	08da      	lsrs	r2, r3, #3
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	3208      	adds	r2, #8
 8013158:	69b9      	ldr	r1, [r7, #24]
 801315a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8013164:	69fb      	ldr	r3, [r7, #28]
 8013166:	005b      	lsls	r3, r3, #1
 8013168:	2203      	movs	r2, #3
 801316a:	fa02 f303 	lsl.w	r3, r2, r3
 801316e:	43db      	mvns	r3, r3
 8013170:	69ba      	ldr	r2, [r7, #24]
 8013172:	4013      	ands	r3, r2
 8013174:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8013176:	683b      	ldr	r3, [r7, #0]
 8013178:	685b      	ldr	r3, [r3, #4]
 801317a:	f003 0203 	and.w	r2, r3, #3
 801317e:	69fb      	ldr	r3, [r7, #28]
 8013180:	005b      	lsls	r3, r3, #1
 8013182:	fa02 f303 	lsl.w	r3, r2, r3
 8013186:	69ba      	ldr	r2, [r7, #24]
 8013188:	4313      	orrs	r3, r2
 801318a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	69ba      	ldr	r2, [r7, #24]
 8013190:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8013192:	683b      	ldr	r3, [r7, #0]
 8013194:	685b      	ldr	r3, [r3, #4]
 8013196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801319a:	2b00      	cmp	r3, #0
 801319c:	f000 80e0 	beq.w	8013360 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80131a0:	4b2f      	ldr	r3, [pc, #188]	; (8013260 <HAL_GPIO_Init+0x238>)
 80131a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80131a6:	4a2e      	ldr	r2, [pc, #184]	; (8013260 <HAL_GPIO_Init+0x238>)
 80131a8:	f043 0302 	orr.w	r3, r3, #2
 80131ac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80131b0:	4b2b      	ldr	r3, [pc, #172]	; (8013260 <HAL_GPIO_Init+0x238>)
 80131b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80131b6:	f003 0302 	and.w	r3, r3, #2
 80131ba:	60fb      	str	r3, [r7, #12]
 80131bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80131be:	4a29      	ldr	r2, [pc, #164]	; (8013264 <HAL_GPIO_Init+0x23c>)
 80131c0:	69fb      	ldr	r3, [r7, #28]
 80131c2:	089b      	lsrs	r3, r3, #2
 80131c4:	3302      	adds	r3, #2
 80131c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80131ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80131cc:	69fb      	ldr	r3, [r7, #28]
 80131ce:	f003 0303 	and.w	r3, r3, #3
 80131d2:	009b      	lsls	r3, r3, #2
 80131d4:	220f      	movs	r2, #15
 80131d6:	fa02 f303 	lsl.w	r3, r2, r3
 80131da:	43db      	mvns	r3, r3
 80131dc:	69ba      	ldr	r2, [r7, #24]
 80131de:	4013      	ands	r3, r2
 80131e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	4a20      	ldr	r2, [pc, #128]	; (8013268 <HAL_GPIO_Init+0x240>)
 80131e6:	4293      	cmp	r3, r2
 80131e8:	d052      	beq.n	8013290 <HAL_GPIO_Init+0x268>
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	4a1f      	ldr	r2, [pc, #124]	; (801326c <HAL_GPIO_Init+0x244>)
 80131ee:	4293      	cmp	r3, r2
 80131f0:	d031      	beq.n	8013256 <HAL_GPIO_Init+0x22e>
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	4a1e      	ldr	r2, [pc, #120]	; (8013270 <HAL_GPIO_Init+0x248>)
 80131f6:	4293      	cmp	r3, r2
 80131f8:	d02b      	beq.n	8013252 <HAL_GPIO_Init+0x22a>
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	4a1d      	ldr	r2, [pc, #116]	; (8013274 <HAL_GPIO_Init+0x24c>)
 80131fe:	4293      	cmp	r3, r2
 8013200:	d025      	beq.n	801324e <HAL_GPIO_Init+0x226>
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	4a1c      	ldr	r2, [pc, #112]	; (8013278 <HAL_GPIO_Init+0x250>)
 8013206:	4293      	cmp	r3, r2
 8013208:	d01f      	beq.n	801324a <HAL_GPIO_Init+0x222>
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	4a1b      	ldr	r2, [pc, #108]	; (801327c <HAL_GPIO_Init+0x254>)
 801320e:	4293      	cmp	r3, r2
 8013210:	d019      	beq.n	8013246 <HAL_GPIO_Init+0x21e>
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	4a1a      	ldr	r2, [pc, #104]	; (8013280 <HAL_GPIO_Init+0x258>)
 8013216:	4293      	cmp	r3, r2
 8013218:	d013      	beq.n	8013242 <HAL_GPIO_Init+0x21a>
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	4a19      	ldr	r2, [pc, #100]	; (8013284 <HAL_GPIO_Init+0x25c>)
 801321e:	4293      	cmp	r3, r2
 8013220:	d00d      	beq.n	801323e <HAL_GPIO_Init+0x216>
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	4a18      	ldr	r2, [pc, #96]	; (8013288 <HAL_GPIO_Init+0x260>)
 8013226:	4293      	cmp	r3, r2
 8013228:	d007      	beq.n	801323a <HAL_GPIO_Init+0x212>
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	4a17      	ldr	r2, [pc, #92]	; (801328c <HAL_GPIO_Init+0x264>)
 801322e:	4293      	cmp	r3, r2
 8013230:	d101      	bne.n	8013236 <HAL_GPIO_Init+0x20e>
 8013232:	2309      	movs	r3, #9
 8013234:	e02d      	b.n	8013292 <HAL_GPIO_Init+0x26a>
 8013236:	230a      	movs	r3, #10
 8013238:	e02b      	b.n	8013292 <HAL_GPIO_Init+0x26a>
 801323a:	2308      	movs	r3, #8
 801323c:	e029      	b.n	8013292 <HAL_GPIO_Init+0x26a>
 801323e:	2307      	movs	r3, #7
 8013240:	e027      	b.n	8013292 <HAL_GPIO_Init+0x26a>
 8013242:	2306      	movs	r3, #6
 8013244:	e025      	b.n	8013292 <HAL_GPIO_Init+0x26a>
 8013246:	2305      	movs	r3, #5
 8013248:	e023      	b.n	8013292 <HAL_GPIO_Init+0x26a>
 801324a:	2304      	movs	r3, #4
 801324c:	e021      	b.n	8013292 <HAL_GPIO_Init+0x26a>
 801324e:	2303      	movs	r3, #3
 8013250:	e01f      	b.n	8013292 <HAL_GPIO_Init+0x26a>
 8013252:	2302      	movs	r3, #2
 8013254:	e01d      	b.n	8013292 <HAL_GPIO_Init+0x26a>
 8013256:	2301      	movs	r3, #1
 8013258:	e01b      	b.n	8013292 <HAL_GPIO_Init+0x26a>
 801325a:	bf00      	nop
 801325c:	58000080 	.word	0x58000080
 8013260:	58024400 	.word	0x58024400
 8013264:	58000400 	.word	0x58000400
 8013268:	58020000 	.word	0x58020000
 801326c:	58020400 	.word	0x58020400
 8013270:	58020800 	.word	0x58020800
 8013274:	58020c00 	.word	0x58020c00
 8013278:	58021000 	.word	0x58021000
 801327c:	58021400 	.word	0x58021400
 8013280:	58021800 	.word	0x58021800
 8013284:	58021c00 	.word	0x58021c00
 8013288:	58022000 	.word	0x58022000
 801328c:	58022400 	.word	0x58022400
 8013290:	2300      	movs	r3, #0
 8013292:	69fa      	ldr	r2, [r7, #28]
 8013294:	f002 0203 	and.w	r2, r2, #3
 8013298:	0092      	lsls	r2, r2, #2
 801329a:	4093      	lsls	r3, r2
 801329c:	69ba      	ldr	r2, [r7, #24]
 801329e:	4313      	orrs	r3, r2
 80132a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80132a2:	4938      	ldr	r1, [pc, #224]	; (8013384 <HAL_GPIO_Init+0x35c>)
 80132a4:	69fb      	ldr	r3, [r7, #28]
 80132a6:	089b      	lsrs	r3, r3, #2
 80132a8:	3302      	adds	r3, #2
 80132aa:	69ba      	ldr	r2, [r7, #24]
 80132ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80132b0:	697b      	ldr	r3, [r7, #20]
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80132b6:	693b      	ldr	r3, [r7, #16]
 80132b8:	43db      	mvns	r3, r3
 80132ba:	69ba      	ldr	r2, [r7, #24]
 80132bc:	4013      	ands	r3, r2
 80132be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80132c0:	683b      	ldr	r3, [r7, #0]
 80132c2:	685b      	ldr	r3, [r3, #4]
 80132c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d003      	beq.n	80132d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80132cc:	69ba      	ldr	r2, [r7, #24]
 80132ce:	693b      	ldr	r3, [r7, #16]
 80132d0:	4313      	orrs	r3, r2
 80132d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80132d4:	697b      	ldr	r3, [r7, #20]
 80132d6:	69ba      	ldr	r2, [r7, #24]
 80132d8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80132da:	697b      	ldr	r3, [r7, #20]
 80132dc:	685b      	ldr	r3, [r3, #4]
 80132de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80132e0:	693b      	ldr	r3, [r7, #16]
 80132e2:	43db      	mvns	r3, r3
 80132e4:	69ba      	ldr	r2, [r7, #24]
 80132e6:	4013      	ands	r3, r2
 80132e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80132ea:	683b      	ldr	r3, [r7, #0]
 80132ec:	685b      	ldr	r3, [r3, #4]
 80132ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d003      	beq.n	80132fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80132f6:	69ba      	ldr	r2, [r7, #24]
 80132f8:	693b      	ldr	r3, [r7, #16]
 80132fa:	4313      	orrs	r3, r2
 80132fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80132fe:	697b      	ldr	r3, [r7, #20]
 8013300:	69ba      	ldr	r2, [r7, #24]
 8013302:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8013304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801330c:	693b      	ldr	r3, [r7, #16]
 801330e:	43db      	mvns	r3, r3
 8013310:	69ba      	ldr	r2, [r7, #24]
 8013312:	4013      	ands	r3, r2
 8013314:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8013316:	683b      	ldr	r3, [r7, #0]
 8013318:	685b      	ldr	r3, [r3, #4]
 801331a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801331e:	2b00      	cmp	r3, #0
 8013320:	d003      	beq.n	801332a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8013322:	69ba      	ldr	r2, [r7, #24]
 8013324:	693b      	ldr	r3, [r7, #16]
 8013326:	4313      	orrs	r3, r2
 8013328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 801332a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801332e:	69bb      	ldr	r3, [r7, #24]
 8013330:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8013332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013336:	685b      	ldr	r3, [r3, #4]
 8013338:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801333a:	693b      	ldr	r3, [r7, #16]
 801333c:	43db      	mvns	r3, r3
 801333e:	69ba      	ldr	r2, [r7, #24]
 8013340:	4013      	ands	r3, r2
 8013342:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8013344:	683b      	ldr	r3, [r7, #0]
 8013346:	685b      	ldr	r3, [r3, #4]
 8013348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801334c:	2b00      	cmp	r3, #0
 801334e:	d003      	beq.n	8013358 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8013350:	69ba      	ldr	r2, [r7, #24]
 8013352:	693b      	ldr	r3, [r7, #16]
 8013354:	4313      	orrs	r3, r2
 8013356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8013358:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801335c:	69bb      	ldr	r3, [r7, #24]
 801335e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8013360:	69fb      	ldr	r3, [r7, #28]
 8013362:	3301      	adds	r3, #1
 8013364:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8013366:	683b      	ldr	r3, [r7, #0]
 8013368:	681a      	ldr	r2, [r3, #0]
 801336a:	69fb      	ldr	r3, [r7, #28]
 801336c:	fa22 f303 	lsr.w	r3, r2, r3
 8013370:	2b00      	cmp	r3, #0
 8013372:	f47f ae63 	bne.w	801303c <HAL_GPIO_Init+0x14>
  }
}
 8013376:	bf00      	nop
 8013378:	3724      	adds	r7, #36	; 0x24
 801337a:	46bd      	mov	sp, r7
 801337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013380:	4770      	bx	lr
 8013382:	bf00      	nop
 8013384:	58000400 	.word	0x58000400

08013388 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8013388:	b480      	push	{r7}
 801338a:	b085      	sub	sp, #20
 801338c:	af00      	add	r7, sp, #0
 801338e:	6078      	str	r0, [r7, #4]
 8013390:	460b      	mov	r3, r1
 8013392:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	691a      	ldr	r2, [r3, #16]
 8013398:	887b      	ldrh	r3, [r7, #2]
 801339a:	4013      	ands	r3, r2
 801339c:	2b00      	cmp	r3, #0
 801339e:	d002      	beq.n	80133a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80133a0:	2301      	movs	r3, #1
 80133a2:	73fb      	strb	r3, [r7, #15]
 80133a4:	e001      	b.n	80133aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80133a6:	2300      	movs	r3, #0
 80133a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80133aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80133ac:	4618      	mov	r0, r3
 80133ae:	3714      	adds	r7, #20
 80133b0:	46bd      	mov	sp, r7
 80133b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133b6:	4770      	bx	lr

080133b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80133b8:	b480      	push	{r7}
 80133ba:	b083      	sub	sp, #12
 80133bc:	af00      	add	r7, sp, #0
 80133be:	6078      	str	r0, [r7, #4]
 80133c0:	460b      	mov	r3, r1
 80133c2:	807b      	strh	r3, [r7, #2]
 80133c4:	4613      	mov	r3, r2
 80133c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80133c8:	787b      	ldrb	r3, [r7, #1]
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d003      	beq.n	80133d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80133ce:	887a      	ldrh	r2, [r7, #2]
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80133d4:	e003      	b.n	80133de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80133d6:	887b      	ldrh	r3, [r7, #2]
 80133d8:	041a      	lsls	r2, r3, #16
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	619a      	str	r2, [r3, #24]
}
 80133de:	bf00      	nop
 80133e0:	370c      	adds	r7, #12
 80133e2:	46bd      	mov	sp, r7
 80133e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133e8:	4770      	bx	lr

080133ea <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80133ea:	b580      	push	{r7, lr}
 80133ec:	b082      	sub	sp, #8
 80133ee:	af00      	add	r7, sp, #0
 80133f0:	4603      	mov	r3, r0
 80133f2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80133f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80133f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80133fc:	88fb      	ldrh	r3, [r7, #6]
 80133fe:	4013      	ands	r3, r2
 8013400:	2b00      	cmp	r3, #0
 8013402:	d008      	beq.n	8013416 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8013404:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8013408:	88fb      	ldrh	r3, [r7, #6]
 801340a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801340e:	88fb      	ldrh	r3, [r7, #6]
 8013410:	4618      	mov	r0, r3
 8013412:	f7ed f8e9 	bl	80005e8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8013416:	bf00      	nop
 8013418:	3708      	adds	r7, #8
 801341a:	46bd      	mov	sp, r7
 801341c:	bd80      	pop	{r7, pc}

0801341e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 801341e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013420:	b08f      	sub	sp, #60	; 0x3c
 8013422:	af0a      	add	r7, sp, #40	; 0x28
 8013424:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	2b00      	cmp	r3, #0
 801342a:	d101      	bne.n	8013430 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 801342c:	2301      	movs	r3, #1
 801342e:	e116      	b.n	801365e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 801343c:	b2db      	uxtb	r3, r3
 801343e:	2b00      	cmp	r3, #0
 8013440:	d106      	bne.n	8013450 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	2200      	movs	r2, #0
 8013446:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 801344a:	6878      	ldr	r0, [r7, #4]
 801344c:	f00a fb36 	bl	801dabc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	2203      	movs	r2, #3
 8013454:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8013458:	68bb      	ldr	r3, [r7, #8]
 801345a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801345c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013460:	2b00      	cmp	r3, #0
 8013462:	d102      	bne.n	801346a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	2200      	movs	r2, #0
 8013468:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	4618      	mov	r0, r3
 8013470:	f007 fba3 	bl	801abba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	603b      	str	r3, [r7, #0]
 801347a:	687e      	ldr	r6, [r7, #4]
 801347c:	466d      	mov	r5, sp
 801347e:	f106 0410 	add.w	r4, r6, #16
 8013482:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013484:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013486:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013488:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801348a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801348e:	e885 0003 	stmia.w	r5, {r0, r1}
 8013492:	1d33      	adds	r3, r6, #4
 8013494:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013496:	6838      	ldr	r0, [r7, #0]
 8013498:	f007 fa7a 	bl	801a990 <USB_CoreInit>
 801349c:	4603      	mov	r3, r0
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d005      	beq.n	80134ae <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	2202      	movs	r2, #2
 80134a6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80134aa:	2301      	movs	r3, #1
 80134ac:	e0d7      	b.n	801365e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	2100      	movs	r1, #0
 80134b4:	4618      	mov	r0, r3
 80134b6:	f007 fb91 	bl	801abdc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80134ba:	2300      	movs	r3, #0
 80134bc:	73fb      	strb	r3, [r7, #15]
 80134be:	e04a      	b.n	8013556 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80134c0:	7bfa      	ldrb	r2, [r7, #15]
 80134c2:	6879      	ldr	r1, [r7, #4]
 80134c4:	4613      	mov	r3, r2
 80134c6:	00db      	lsls	r3, r3, #3
 80134c8:	1a9b      	subs	r3, r3, r2
 80134ca:	009b      	lsls	r3, r3, #2
 80134cc:	440b      	add	r3, r1
 80134ce:	333d      	adds	r3, #61	; 0x3d
 80134d0:	2201      	movs	r2, #1
 80134d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80134d4:	7bfa      	ldrb	r2, [r7, #15]
 80134d6:	6879      	ldr	r1, [r7, #4]
 80134d8:	4613      	mov	r3, r2
 80134da:	00db      	lsls	r3, r3, #3
 80134dc:	1a9b      	subs	r3, r3, r2
 80134de:	009b      	lsls	r3, r3, #2
 80134e0:	440b      	add	r3, r1
 80134e2:	333c      	adds	r3, #60	; 0x3c
 80134e4:	7bfa      	ldrb	r2, [r7, #15]
 80134e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80134e8:	7bfa      	ldrb	r2, [r7, #15]
 80134ea:	7bfb      	ldrb	r3, [r7, #15]
 80134ec:	b298      	uxth	r0, r3
 80134ee:	6879      	ldr	r1, [r7, #4]
 80134f0:	4613      	mov	r3, r2
 80134f2:	00db      	lsls	r3, r3, #3
 80134f4:	1a9b      	subs	r3, r3, r2
 80134f6:	009b      	lsls	r3, r3, #2
 80134f8:	440b      	add	r3, r1
 80134fa:	3342      	adds	r3, #66	; 0x42
 80134fc:	4602      	mov	r2, r0
 80134fe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8013500:	7bfa      	ldrb	r2, [r7, #15]
 8013502:	6879      	ldr	r1, [r7, #4]
 8013504:	4613      	mov	r3, r2
 8013506:	00db      	lsls	r3, r3, #3
 8013508:	1a9b      	subs	r3, r3, r2
 801350a:	009b      	lsls	r3, r3, #2
 801350c:	440b      	add	r3, r1
 801350e:	333f      	adds	r3, #63	; 0x3f
 8013510:	2200      	movs	r2, #0
 8013512:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8013514:	7bfa      	ldrb	r2, [r7, #15]
 8013516:	6879      	ldr	r1, [r7, #4]
 8013518:	4613      	mov	r3, r2
 801351a:	00db      	lsls	r3, r3, #3
 801351c:	1a9b      	subs	r3, r3, r2
 801351e:	009b      	lsls	r3, r3, #2
 8013520:	440b      	add	r3, r1
 8013522:	3344      	adds	r3, #68	; 0x44
 8013524:	2200      	movs	r2, #0
 8013526:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8013528:	7bfa      	ldrb	r2, [r7, #15]
 801352a:	6879      	ldr	r1, [r7, #4]
 801352c:	4613      	mov	r3, r2
 801352e:	00db      	lsls	r3, r3, #3
 8013530:	1a9b      	subs	r3, r3, r2
 8013532:	009b      	lsls	r3, r3, #2
 8013534:	440b      	add	r3, r1
 8013536:	3348      	adds	r3, #72	; 0x48
 8013538:	2200      	movs	r2, #0
 801353a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 801353c:	7bfa      	ldrb	r2, [r7, #15]
 801353e:	6879      	ldr	r1, [r7, #4]
 8013540:	4613      	mov	r3, r2
 8013542:	00db      	lsls	r3, r3, #3
 8013544:	1a9b      	subs	r3, r3, r2
 8013546:	009b      	lsls	r3, r3, #2
 8013548:	440b      	add	r3, r1
 801354a:	3350      	adds	r3, #80	; 0x50
 801354c:	2200      	movs	r2, #0
 801354e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013550:	7bfb      	ldrb	r3, [r7, #15]
 8013552:	3301      	adds	r3, #1
 8013554:	73fb      	strb	r3, [r7, #15]
 8013556:	7bfa      	ldrb	r2, [r7, #15]
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	685b      	ldr	r3, [r3, #4]
 801355c:	429a      	cmp	r2, r3
 801355e:	d3af      	bcc.n	80134c0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013560:	2300      	movs	r3, #0
 8013562:	73fb      	strb	r3, [r7, #15]
 8013564:	e044      	b.n	80135f0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8013566:	7bfa      	ldrb	r2, [r7, #15]
 8013568:	6879      	ldr	r1, [r7, #4]
 801356a:	4613      	mov	r3, r2
 801356c:	00db      	lsls	r3, r3, #3
 801356e:	1a9b      	subs	r3, r3, r2
 8013570:	009b      	lsls	r3, r3, #2
 8013572:	440b      	add	r3, r1
 8013574:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8013578:	2200      	movs	r2, #0
 801357a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 801357c:	7bfa      	ldrb	r2, [r7, #15]
 801357e:	6879      	ldr	r1, [r7, #4]
 8013580:	4613      	mov	r3, r2
 8013582:	00db      	lsls	r3, r3, #3
 8013584:	1a9b      	subs	r3, r3, r2
 8013586:	009b      	lsls	r3, r3, #2
 8013588:	440b      	add	r3, r1
 801358a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 801358e:	7bfa      	ldrb	r2, [r7, #15]
 8013590:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8013592:	7bfa      	ldrb	r2, [r7, #15]
 8013594:	6879      	ldr	r1, [r7, #4]
 8013596:	4613      	mov	r3, r2
 8013598:	00db      	lsls	r3, r3, #3
 801359a:	1a9b      	subs	r3, r3, r2
 801359c:	009b      	lsls	r3, r3, #2
 801359e:	440b      	add	r3, r1
 80135a0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80135a4:	2200      	movs	r2, #0
 80135a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80135a8:	7bfa      	ldrb	r2, [r7, #15]
 80135aa:	6879      	ldr	r1, [r7, #4]
 80135ac:	4613      	mov	r3, r2
 80135ae:	00db      	lsls	r3, r3, #3
 80135b0:	1a9b      	subs	r3, r3, r2
 80135b2:	009b      	lsls	r3, r3, #2
 80135b4:	440b      	add	r3, r1
 80135b6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80135ba:	2200      	movs	r2, #0
 80135bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80135be:	7bfa      	ldrb	r2, [r7, #15]
 80135c0:	6879      	ldr	r1, [r7, #4]
 80135c2:	4613      	mov	r3, r2
 80135c4:	00db      	lsls	r3, r3, #3
 80135c6:	1a9b      	subs	r3, r3, r2
 80135c8:	009b      	lsls	r3, r3, #2
 80135ca:	440b      	add	r3, r1
 80135cc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80135d0:	2200      	movs	r2, #0
 80135d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80135d4:	7bfa      	ldrb	r2, [r7, #15]
 80135d6:	6879      	ldr	r1, [r7, #4]
 80135d8:	4613      	mov	r3, r2
 80135da:	00db      	lsls	r3, r3, #3
 80135dc:	1a9b      	subs	r3, r3, r2
 80135de:	009b      	lsls	r3, r3, #2
 80135e0:	440b      	add	r3, r1
 80135e2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80135e6:	2200      	movs	r2, #0
 80135e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80135ea:	7bfb      	ldrb	r3, [r7, #15]
 80135ec:	3301      	adds	r3, #1
 80135ee:	73fb      	strb	r3, [r7, #15]
 80135f0:	7bfa      	ldrb	r2, [r7, #15]
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	685b      	ldr	r3, [r3, #4]
 80135f6:	429a      	cmp	r2, r3
 80135f8:	d3b5      	bcc.n	8013566 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	603b      	str	r3, [r7, #0]
 8013600:	687e      	ldr	r6, [r7, #4]
 8013602:	466d      	mov	r5, sp
 8013604:	f106 0410 	add.w	r4, r6, #16
 8013608:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801360a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801360c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801360e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013610:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013614:	e885 0003 	stmia.w	r5, {r0, r1}
 8013618:	1d33      	adds	r3, r6, #4
 801361a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801361c:	6838      	ldr	r0, [r7, #0]
 801361e:	f007 fb07 	bl	801ac30 <USB_DevInit>
 8013622:	4603      	mov	r3, r0
 8013624:	2b00      	cmp	r3, #0
 8013626:	d005      	beq.n	8013634 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	2202      	movs	r2, #2
 801362c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8013630:	2301      	movs	r3, #1
 8013632:	e014      	b.n	801365e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	2200      	movs	r2, #0
 8013638:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	2201      	movs	r2, #1
 8013640:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013648:	2b01      	cmp	r3, #1
 801364a:	d102      	bne.n	8013652 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 801364c:	6878      	ldr	r0, [r7, #4]
 801364e:	f001 f891 	bl	8014774 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	4618      	mov	r0, r3
 8013658:	f008 faee 	bl	801bc38 <USB_DevDisconnect>

  return HAL_OK;
 801365c:	2300      	movs	r3, #0
}
 801365e:	4618      	mov	r0, r3
 8013660:	3714      	adds	r7, #20
 8013662:	46bd      	mov	sp, r7
 8013664:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013666 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8013666:	b580      	push	{r7, lr}
 8013668:	b084      	sub	sp, #16
 801366a:	af00      	add	r7, sp, #0
 801366c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801367a:	2b01      	cmp	r3, #1
 801367c:	d101      	bne.n	8013682 <HAL_PCD_Start+0x1c>
 801367e:	2302      	movs	r3, #2
 8013680:	e020      	b.n	80136c4 <HAL_PCD_Start+0x5e>
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	2201      	movs	r2, #1
 8013686:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801368e:	2b01      	cmp	r3, #1
 8013690:	d109      	bne.n	80136a6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8013696:	2b01      	cmp	r3, #1
 8013698:	d005      	beq.n	80136a6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801369e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	4618      	mov	r0, r3
 80136ac:	f008 faac 	bl	801bc08 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	4618      	mov	r0, r3
 80136b6:	f007 fa6f 	bl	801ab98 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	2200      	movs	r2, #0
 80136be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80136c2:	2300      	movs	r3, #0
}
 80136c4:	4618      	mov	r0, r3
 80136c6:	3710      	adds	r7, #16
 80136c8:	46bd      	mov	sp, r7
 80136ca:	bd80      	pop	{r7, pc}

080136cc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80136cc:	b590      	push	{r4, r7, lr}
 80136ce:	b08d      	sub	sp, #52	; 0x34
 80136d0:	af00      	add	r7, sp, #0
 80136d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80136da:	6a3b      	ldr	r3, [r7, #32]
 80136dc:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	4618      	mov	r0, r3
 80136e4:	f008 fb53 	bl	801bd8e <USB_GetMode>
 80136e8:	4603      	mov	r3, r0
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	f040 83ca 	bne.w	8013e84 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	4618      	mov	r0, r3
 80136f6:	f008 fab7 	bl	801bc68 <USB_ReadInterrupts>
 80136fa:	4603      	mov	r3, r0
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	f000 83c0 	beq.w	8013e82 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	4618      	mov	r0, r3
 8013708:	f008 faae 	bl	801bc68 <USB_ReadInterrupts>
 801370c:	4603      	mov	r3, r0
 801370e:	f003 0302 	and.w	r3, r3, #2
 8013712:	2b02      	cmp	r3, #2
 8013714:	d107      	bne.n	8013726 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	695a      	ldr	r2, [r3, #20]
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	f002 0202 	and.w	r2, r2, #2
 8013724:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	4618      	mov	r0, r3
 801372c:	f008 fa9c 	bl	801bc68 <USB_ReadInterrupts>
 8013730:	4603      	mov	r3, r0
 8013732:	f003 0310 	and.w	r3, r3, #16
 8013736:	2b10      	cmp	r3, #16
 8013738:	d161      	bne.n	80137fe <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	699a      	ldr	r2, [r3, #24]
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	f022 0210 	bic.w	r2, r2, #16
 8013748:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 801374a:	6a3b      	ldr	r3, [r7, #32]
 801374c:	6a1b      	ldr	r3, [r3, #32]
 801374e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8013750:	69bb      	ldr	r3, [r7, #24]
 8013752:	f003 020f 	and.w	r2, r3, #15
 8013756:	4613      	mov	r3, r2
 8013758:	00db      	lsls	r3, r3, #3
 801375a:	1a9b      	subs	r3, r3, r2
 801375c:	009b      	lsls	r3, r3, #2
 801375e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8013762:	687a      	ldr	r2, [r7, #4]
 8013764:	4413      	add	r3, r2
 8013766:	3304      	adds	r3, #4
 8013768:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 801376a:	69bb      	ldr	r3, [r7, #24]
 801376c:	0c5b      	lsrs	r3, r3, #17
 801376e:	f003 030f 	and.w	r3, r3, #15
 8013772:	2b02      	cmp	r3, #2
 8013774:	d124      	bne.n	80137c0 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8013776:	69ba      	ldr	r2, [r7, #24]
 8013778:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 801377c:	4013      	ands	r3, r2
 801377e:	2b00      	cmp	r3, #0
 8013780:	d035      	beq.n	80137ee <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8013782:	697b      	ldr	r3, [r7, #20]
 8013784:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8013786:	69bb      	ldr	r3, [r7, #24]
 8013788:	091b      	lsrs	r3, r3, #4
 801378a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 801378c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013790:	b29b      	uxth	r3, r3
 8013792:	461a      	mov	r2, r3
 8013794:	6a38      	ldr	r0, [r7, #32]
 8013796:	f008 f914 	bl	801b9c2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 801379a:	697b      	ldr	r3, [r7, #20]
 801379c:	68da      	ldr	r2, [r3, #12]
 801379e:	69bb      	ldr	r3, [r7, #24]
 80137a0:	091b      	lsrs	r3, r3, #4
 80137a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80137a6:	441a      	add	r2, r3
 80137a8:	697b      	ldr	r3, [r7, #20]
 80137aa:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80137ac:	697b      	ldr	r3, [r7, #20]
 80137ae:	699a      	ldr	r2, [r3, #24]
 80137b0:	69bb      	ldr	r3, [r7, #24]
 80137b2:	091b      	lsrs	r3, r3, #4
 80137b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80137b8:	441a      	add	r2, r3
 80137ba:	697b      	ldr	r3, [r7, #20]
 80137bc:	619a      	str	r2, [r3, #24]
 80137be:	e016      	b.n	80137ee <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80137c0:	69bb      	ldr	r3, [r7, #24]
 80137c2:	0c5b      	lsrs	r3, r3, #17
 80137c4:	f003 030f 	and.w	r3, r3, #15
 80137c8:	2b06      	cmp	r3, #6
 80137ca:	d110      	bne.n	80137ee <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80137d2:	2208      	movs	r2, #8
 80137d4:	4619      	mov	r1, r3
 80137d6:	6a38      	ldr	r0, [r7, #32]
 80137d8:	f008 f8f3 	bl	801b9c2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80137dc:	697b      	ldr	r3, [r7, #20]
 80137de:	699a      	ldr	r2, [r3, #24]
 80137e0:	69bb      	ldr	r3, [r7, #24]
 80137e2:	091b      	lsrs	r3, r3, #4
 80137e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80137e8:	441a      	add	r2, r3
 80137ea:	697b      	ldr	r3, [r7, #20]
 80137ec:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	699a      	ldr	r2, [r3, #24]
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	f042 0210 	orr.w	r2, r2, #16
 80137fc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	4618      	mov	r0, r3
 8013804:	f008 fa30 	bl	801bc68 <USB_ReadInterrupts>
 8013808:	4603      	mov	r3, r0
 801380a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801380e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8013812:	d16e      	bne.n	80138f2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8013814:	2300      	movs	r3, #0
 8013816:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	4618      	mov	r0, r3
 801381e:	f008 fa36 	bl	801bc8e <USB_ReadDevAllOutEpInterrupt>
 8013822:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8013824:	e062      	b.n	80138ec <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8013826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013828:	f003 0301 	and.w	r3, r3, #1
 801382c:	2b00      	cmp	r3, #0
 801382e:	d057      	beq.n	80138e0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013836:	b2d2      	uxtb	r2, r2
 8013838:	4611      	mov	r1, r2
 801383a:	4618      	mov	r0, r3
 801383c:	f008 fa5b 	bl	801bcf6 <USB_ReadDevOutEPInterrupt>
 8013840:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8013842:	693b      	ldr	r3, [r7, #16]
 8013844:	f003 0301 	and.w	r3, r3, #1
 8013848:	2b00      	cmp	r3, #0
 801384a:	d00c      	beq.n	8013866 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 801384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801384e:	015a      	lsls	r2, r3, #5
 8013850:	69fb      	ldr	r3, [r7, #28]
 8013852:	4413      	add	r3, r2
 8013854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013858:	461a      	mov	r2, r3
 801385a:	2301      	movs	r3, #1
 801385c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 801385e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013860:	6878      	ldr	r0, [r7, #4]
 8013862:	f000 fddd 	bl	8014420 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8013866:	693b      	ldr	r3, [r7, #16]
 8013868:	f003 0308 	and.w	r3, r3, #8
 801386c:	2b00      	cmp	r3, #0
 801386e:	d00c      	beq.n	801388a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8013870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013872:	015a      	lsls	r2, r3, #5
 8013874:	69fb      	ldr	r3, [r7, #28]
 8013876:	4413      	add	r3, r2
 8013878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801387c:	461a      	mov	r2, r3
 801387e:	2308      	movs	r3, #8
 8013880:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8013882:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013884:	6878      	ldr	r0, [r7, #4]
 8013886:	f000 fed7 	bl	8014638 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 801388a:	693b      	ldr	r3, [r7, #16]
 801388c:	f003 0310 	and.w	r3, r3, #16
 8013890:	2b00      	cmp	r3, #0
 8013892:	d008      	beq.n	80138a6 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8013894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013896:	015a      	lsls	r2, r3, #5
 8013898:	69fb      	ldr	r3, [r7, #28]
 801389a:	4413      	add	r3, r2
 801389c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138a0:	461a      	mov	r2, r3
 80138a2:	2310      	movs	r3, #16
 80138a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80138a6:	693b      	ldr	r3, [r7, #16]
 80138a8:	f003 0320 	and.w	r3, r3, #32
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d008      	beq.n	80138c2 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80138b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138b2:	015a      	lsls	r2, r3, #5
 80138b4:	69fb      	ldr	r3, [r7, #28]
 80138b6:	4413      	add	r3, r2
 80138b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138bc:	461a      	mov	r2, r3
 80138be:	2320      	movs	r3, #32
 80138c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80138c2:	693b      	ldr	r3, [r7, #16]
 80138c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d009      	beq.n	80138e0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80138cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138ce:	015a      	lsls	r2, r3, #5
 80138d0:	69fb      	ldr	r3, [r7, #28]
 80138d2:	4413      	add	r3, r2
 80138d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138d8:	461a      	mov	r2, r3
 80138da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80138de:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80138e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138e2:	3301      	adds	r3, #1
 80138e4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80138e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138e8:	085b      	lsrs	r3, r3, #1
 80138ea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80138ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d199      	bne.n	8013826 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	4618      	mov	r0, r3
 80138f8:	f008 f9b6 	bl	801bc68 <USB_ReadInterrupts>
 80138fc:	4603      	mov	r3, r0
 80138fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8013902:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8013906:	f040 80c0 	bne.w	8013a8a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	4618      	mov	r0, r3
 8013910:	f008 f9d7 	bl	801bcc2 <USB_ReadDevAllInEpInterrupt>
 8013914:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8013916:	2300      	movs	r3, #0
 8013918:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 801391a:	e0b2      	b.n	8013a82 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 801391c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801391e:	f003 0301 	and.w	r3, r3, #1
 8013922:	2b00      	cmp	r3, #0
 8013924:	f000 80a7 	beq.w	8013a76 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	681b      	ldr	r3, [r3, #0]
 801392c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801392e:	b2d2      	uxtb	r2, r2
 8013930:	4611      	mov	r1, r2
 8013932:	4618      	mov	r0, r3
 8013934:	f008 f9fd 	bl	801bd32 <USB_ReadDevInEPInterrupt>
 8013938:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 801393a:	693b      	ldr	r3, [r7, #16]
 801393c:	f003 0301 	and.w	r3, r3, #1
 8013940:	2b00      	cmp	r3, #0
 8013942:	d057      	beq.n	80139f4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8013944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013946:	f003 030f 	and.w	r3, r3, #15
 801394a:	2201      	movs	r2, #1
 801394c:	fa02 f303 	lsl.w	r3, r2, r3
 8013950:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8013952:	69fb      	ldr	r3, [r7, #28]
 8013954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013958:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	43db      	mvns	r3, r3
 801395e:	69f9      	ldr	r1, [r7, #28]
 8013960:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013964:	4013      	ands	r3, r2
 8013966:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8013968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801396a:	015a      	lsls	r2, r3, #5
 801396c:	69fb      	ldr	r3, [r7, #28]
 801396e:	4413      	add	r3, r2
 8013970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013974:	461a      	mov	r2, r3
 8013976:	2301      	movs	r3, #1
 8013978:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	691b      	ldr	r3, [r3, #16]
 801397e:	2b01      	cmp	r3, #1
 8013980:	d132      	bne.n	80139e8 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8013982:	6879      	ldr	r1, [r7, #4]
 8013984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013986:	4613      	mov	r3, r2
 8013988:	00db      	lsls	r3, r3, #3
 801398a:	1a9b      	subs	r3, r3, r2
 801398c:	009b      	lsls	r3, r3, #2
 801398e:	440b      	add	r3, r1
 8013990:	3348      	adds	r3, #72	; 0x48
 8013992:	6819      	ldr	r1, [r3, #0]
 8013994:	6878      	ldr	r0, [r7, #4]
 8013996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013998:	4613      	mov	r3, r2
 801399a:	00db      	lsls	r3, r3, #3
 801399c:	1a9b      	subs	r3, r3, r2
 801399e:	009b      	lsls	r3, r3, #2
 80139a0:	4403      	add	r3, r0
 80139a2:	3344      	adds	r3, #68	; 0x44
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	4419      	add	r1, r3
 80139a8:	6878      	ldr	r0, [r7, #4]
 80139aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80139ac:	4613      	mov	r3, r2
 80139ae:	00db      	lsls	r3, r3, #3
 80139b0:	1a9b      	subs	r3, r3, r2
 80139b2:	009b      	lsls	r3, r3, #2
 80139b4:	4403      	add	r3, r0
 80139b6:	3348      	adds	r3, #72	; 0x48
 80139b8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80139ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d113      	bne.n	80139e8 <HAL_PCD_IRQHandler+0x31c>
 80139c0:	6879      	ldr	r1, [r7, #4]
 80139c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80139c4:	4613      	mov	r3, r2
 80139c6:	00db      	lsls	r3, r3, #3
 80139c8:	1a9b      	subs	r3, r3, r2
 80139ca:	009b      	lsls	r3, r3, #2
 80139cc:	440b      	add	r3, r1
 80139ce:	3350      	adds	r3, #80	; 0x50
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d108      	bne.n	80139e8 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	6818      	ldr	r0, [r3, #0]
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80139e0:	461a      	mov	r2, r3
 80139e2:	2101      	movs	r1, #1
 80139e4:	f008 fa06 	bl	801bdf4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80139e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139ea:	b2db      	uxtb	r3, r3
 80139ec:	4619      	mov	r1, r3
 80139ee:	6878      	ldr	r0, [r7, #4]
 80139f0:	f00a f8e3 	bl	801dbba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80139f4:	693b      	ldr	r3, [r7, #16]
 80139f6:	f003 0308 	and.w	r3, r3, #8
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d008      	beq.n	8013a10 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80139fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a00:	015a      	lsls	r2, r3, #5
 8013a02:	69fb      	ldr	r3, [r7, #28]
 8013a04:	4413      	add	r3, r2
 8013a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a0a:	461a      	mov	r2, r3
 8013a0c:	2308      	movs	r3, #8
 8013a0e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8013a10:	693b      	ldr	r3, [r7, #16]
 8013a12:	f003 0310 	and.w	r3, r3, #16
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d008      	beq.n	8013a2c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8013a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a1c:	015a      	lsls	r2, r3, #5
 8013a1e:	69fb      	ldr	r3, [r7, #28]
 8013a20:	4413      	add	r3, r2
 8013a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a26:	461a      	mov	r2, r3
 8013a28:	2310      	movs	r3, #16
 8013a2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8013a2c:	693b      	ldr	r3, [r7, #16]
 8013a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d008      	beq.n	8013a48 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8013a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a38:	015a      	lsls	r2, r3, #5
 8013a3a:	69fb      	ldr	r3, [r7, #28]
 8013a3c:	4413      	add	r3, r2
 8013a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a42:	461a      	mov	r2, r3
 8013a44:	2340      	movs	r3, #64	; 0x40
 8013a46:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8013a48:	693b      	ldr	r3, [r7, #16]
 8013a4a:	f003 0302 	and.w	r3, r3, #2
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d008      	beq.n	8013a64 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8013a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a54:	015a      	lsls	r2, r3, #5
 8013a56:	69fb      	ldr	r3, [r7, #28]
 8013a58:	4413      	add	r3, r2
 8013a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a5e:	461a      	mov	r2, r3
 8013a60:	2302      	movs	r3, #2
 8013a62:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8013a64:	693b      	ldr	r3, [r7, #16]
 8013a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d003      	beq.n	8013a76 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8013a6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013a70:	6878      	ldr	r0, [r7, #4]
 8013a72:	f000 fc48 	bl	8014306 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8013a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a78:	3301      	adds	r3, #1
 8013a7a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8013a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a7e:	085b      	lsrs	r3, r3, #1
 8013a80:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8013a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	f47f af49 	bne.w	801391c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	4618      	mov	r0, r3
 8013a90:	f008 f8ea 	bl	801bc68 <USB_ReadInterrupts>
 8013a94:	4603      	mov	r3, r0
 8013a96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013a9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013a9e:	d122      	bne.n	8013ae6 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8013aa0:	69fb      	ldr	r3, [r7, #28]
 8013aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013aa6:	685b      	ldr	r3, [r3, #4]
 8013aa8:	69fa      	ldr	r2, [r7, #28]
 8013aaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013aae:	f023 0301 	bic.w	r3, r3, #1
 8013ab2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8013aba:	2b01      	cmp	r3, #1
 8013abc:	d108      	bne.n	8013ad0 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	2200      	movs	r2, #0
 8013ac2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8013ac6:	2100      	movs	r1, #0
 8013ac8:	6878      	ldr	r0, [r7, #4]
 8013aca:	f000 fe77 	bl	80147bc <HAL_PCDEx_LPM_Callback>
 8013ace:	e002      	b.n	8013ad6 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8013ad0:	6878      	ldr	r0, [r7, #4]
 8013ad2:	f00a f8e9 	bl	801dca8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	695a      	ldr	r2, [r3, #20]
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8013ae4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	4618      	mov	r0, r3
 8013aec:	f008 f8bc 	bl	801bc68 <USB_ReadInterrupts>
 8013af0:	4603      	mov	r3, r0
 8013af2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013af6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013afa:	d112      	bne.n	8013b22 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8013afc:	69fb      	ldr	r3, [r7, #28]
 8013afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b02:	689b      	ldr	r3, [r3, #8]
 8013b04:	f003 0301 	and.w	r3, r3, #1
 8013b08:	2b01      	cmp	r3, #1
 8013b0a:	d102      	bne.n	8013b12 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8013b0c:	6878      	ldr	r0, [r7, #4]
 8013b0e:	f00a f8a5 	bl	801dc5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	695a      	ldr	r2, [r3, #20]
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8013b20:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	4618      	mov	r0, r3
 8013b28:	f008 f89e 	bl	801bc68 <USB_ReadInterrupts>
 8013b2c:	4603      	mov	r3, r0
 8013b2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013b32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8013b36:	d121      	bne.n	8013b7c <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	695a      	ldr	r2, [r3, #20]
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8013b46:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d111      	bne.n	8013b76 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	2201      	movs	r2, #1
 8013b56:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013b60:	089b      	lsrs	r3, r3, #2
 8013b62:	f003 020f 	and.w	r2, r3, #15
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8013b6c:	2101      	movs	r1, #1
 8013b6e:	6878      	ldr	r0, [r7, #4]
 8013b70:	f000 fe24 	bl	80147bc <HAL_PCDEx_LPM_Callback>
 8013b74:	e002      	b.n	8013b7c <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8013b76:	6878      	ldr	r0, [r7, #4]
 8013b78:	f00a f870 	bl	801dc5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	4618      	mov	r0, r3
 8013b82:	f008 f871 	bl	801bc68 <USB_ReadInterrupts>
 8013b86:	4603      	mov	r3, r0
 8013b88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013b90:	f040 80c7 	bne.w	8013d22 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8013b94:	69fb      	ldr	r3, [r7, #28]
 8013b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b9a:	685b      	ldr	r3, [r3, #4]
 8013b9c:	69fa      	ldr	r2, [r7, #28]
 8013b9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013ba2:	f023 0301 	bic.w	r3, r3, #1
 8013ba6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	2110      	movs	r1, #16
 8013bae:	4618      	mov	r0, r3
 8013bb0:	f007 f99c 	bl	801aeec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013bb4:	2300      	movs	r3, #0
 8013bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013bb8:	e056      	b.n	8013c68 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8013bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bbc:	015a      	lsls	r2, r3, #5
 8013bbe:	69fb      	ldr	r3, [r7, #28]
 8013bc0:	4413      	add	r3, r2
 8013bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bc6:	461a      	mov	r2, r3
 8013bc8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013bcc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bd0:	015a      	lsls	r2, r3, #5
 8013bd2:	69fb      	ldr	r3, [r7, #28]
 8013bd4:	4413      	add	r3, r2
 8013bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013bde:	0151      	lsls	r1, r2, #5
 8013be0:	69fa      	ldr	r2, [r7, #28]
 8013be2:	440a      	add	r2, r1
 8013be4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013be8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013bec:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8013bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bf0:	015a      	lsls	r2, r3, #5
 8013bf2:	69fb      	ldr	r3, [r7, #28]
 8013bf4:	4413      	add	r3, r2
 8013bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013bfe:	0151      	lsls	r1, r2, #5
 8013c00:	69fa      	ldr	r2, [r7, #28]
 8013c02:	440a      	add	r2, r1
 8013c04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013c0c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8013c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c10:	015a      	lsls	r2, r3, #5
 8013c12:	69fb      	ldr	r3, [r7, #28]
 8013c14:	4413      	add	r3, r2
 8013c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c1a:	461a      	mov	r2, r3
 8013c1c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013c20:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c24:	015a      	lsls	r2, r3, #5
 8013c26:	69fb      	ldr	r3, [r7, #28]
 8013c28:	4413      	add	r3, r2
 8013c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013c32:	0151      	lsls	r1, r2, #5
 8013c34:	69fa      	ldr	r2, [r7, #28]
 8013c36:	440a      	add	r2, r1
 8013c38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013c3c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013c40:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8013c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c44:	015a      	lsls	r2, r3, #5
 8013c46:	69fb      	ldr	r3, [r7, #28]
 8013c48:	4413      	add	r3, r2
 8013c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013c52:	0151      	lsls	r1, r2, #5
 8013c54:	69fa      	ldr	r2, [r7, #28]
 8013c56:	440a      	add	r2, r1
 8013c58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013c5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013c60:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c64:	3301      	adds	r3, #1
 8013c66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	685b      	ldr	r3, [r3, #4]
 8013c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013c6e:	429a      	cmp	r2, r3
 8013c70:	d3a3      	bcc.n	8013bba <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8013c72:	69fb      	ldr	r3, [r7, #28]
 8013c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c78:	69db      	ldr	r3, [r3, #28]
 8013c7a:	69fa      	ldr	r2, [r7, #28]
 8013c7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013c80:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8013c84:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d016      	beq.n	8013cbc <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8013c8e:	69fb      	ldr	r3, [r7, #28]
 8013c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013c98:	69fa      	ldr	r2, [r7, #28]
 8013c9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013c9e:	f043 030b 	orr.w	r3, r3, #11
 8013ca2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8013ca6:	69fb      	ldr	r3, [r7, #28]
 8013ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013cae:	69fa      	ldr	r2, [r7, #28]
 8013cb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013cb4:	f043 030b 	orr.w	r3, r3, #11
 8013cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8013cba:	e015      	b.n	8013ce8 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8013cbc:	69fb      	ldr	r3, [r7, #28]
 8013cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013cc2:	695a      	ldr	r2, [r3, #20]
 8013cc4:	69fb      	ldr	r3, [r7, #28]
 8013cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013cca:	4619      	mov	r1, r3
 8013ccc:	f242 032b 	movw	r3, #8235	; 0x202b
 8013cd0:	4313      	orrs	r3, r2
 8013cd2:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8013cd4:	69fb      	ldr	r3, [r7, #28]
 8013cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013cda:	691b      	ldr	r3, [r3, #16]
 8013cdc:	69fa      	ldr	r2, [r7, #28]
 8013cde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013ce2:	f043 030b 	orr.w	r3, r3, #11
 8013ce6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8013ce8:	69fb      	ldr	r3, [r7, #28]
 8013cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	69fa      	ldr	r2, [r7, #28]
 8013cf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013cf6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8013cfa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	6818      	ldr	r0, [r3, #0]
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	691b      	ldr	r3, [r3, #16]
 8013d04:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8013d0c:	461a      	mov	r2, r3
 8013d0e:	f008 f871 	bl	801bdf4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	695a      	ldr	r2, [r3, #20]
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8013d20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	4618      	mov	r0, r3
 8013d28:	f007 ff9e 	bl	801bc68 <USB_ReadInterrupts>
 8013d2c:	4603      	mov	r3, r0
 8013d2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013d32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013d36:	d124      	bne.n	8013d82 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	f008 f835 	bl	801bdac <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	681b      	ldr	r3, [r3, #0]
 8013d46:	4618      	mov	r0, r3
 8013d48:	f007 f931 	bl	801afae <USB_GetDevSpeed>
 8013d4c:	4603      	mov	r3, r0
 8013d4e:	461a      	mov	r2, r3
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	681c      	ldr	r4, [r3, #0]
 8013d58:	f001 fc86 	bl	8015668 <HAL_RCC_GetHCLKFreq>
 8013d5c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8013d62:	b2db      	uxtb	r3, r3
 8013d64:	461a      	mov	r2, r3
 8013d66:	4620      	mov	r0, r4
 8013d68:	f006 fe74 	bl	801aa54 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8013d6c:	6878      	ldr	r0, [r7, #4]
 8013d6e:	f009 ff4c 	bl	801dc0a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	695a      	ldr	r2, [r3, #20]
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8013d80:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	4618      	mov	r0, r3
 8013d88:	f007 ff6e 	bl	801bc68 <USB_ReadInterrupts>
 8013d8c:	4603      	mov	r3, r0
 8013d8e:	f003 0308 	and.w	r3, r3, #8
 8013d92:	2b08      	cmp	r3, #8
 8013d94:	d10a      	bne.n	8013dac <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8013d96:	6878      	ldr	r0, [r7, #4]
 8013d98:	f009 ff29 	bl	801dbee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	695a      	ldr	r2, [r3, #20]
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	681b      	ldr	r3, [r3, #0]
 8013da6:	f002 0208 	and.w	r2, r2, #8
 8013daa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	4618      	mov	r0, r3
 8013db2:	f007 ff59 	bl	801bc68 <USB_ReadInterrupts>
 8013db6:	4603      	mov	r3, r0
 8013db8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013dbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013dc0:	d10f      	bne.n	8013de2 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8013dc2:	2300      	movs	r3, #0
 8013dc4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8013dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dc8:	b2db      	uxtb	r3, r3
 8013dca:	4619      	mov	r1, r3
 8013dcc:	6878      	ldr	r0, [r7, #4]
 8013dce:	f009 ff8b 	bl	801dce8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	695a      	ldr	r2, [r3, #20]
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8013de0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	4618      	mov	r0, r3
 8013de8:	f007 ff3e 	bl	801bc68 <USB_ReadInterrupts>
 8013dec:	4603      	mov	r3, r0
 8013dee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013df2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013df6:	d10f      	bne.n	8013e18 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8013df8:	2300      	movs	r3, #0
 8013dfa:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8013dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dfe:	b2db      	uxtb	r3, r3
 8013e00:	4619      	mov	r1, r3
 8013e02:	6878      	ldr	r0, [r7, #4]
 8013e04:	f009 ff5e 	bl	801dcc4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	695a      	ldr	r2, [r3, #20]
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8013e16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	4618      	mov	r0, r3
 8013e1e:	f007 ff23 	bl	801bc68 <USB_ReadInterrupts>
 8013e22:	4603      	mov	r3, r0
 8013e24:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8013e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013e2c:	d10a      	bne.n	8013e44 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8013e2e:	6878      	ldr	r0, [r7, #4]
 8013e30:	f009 ff6c 	bl	801dd0c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	695a      	ldr	r2, [r3, #20]
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8013e42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	4618      	mov	r0, r3
 8013e4a:	f007 ff0d 	bl	801bc68 <USB_ReadInterrupts>
 8013e4e:	4603      	mov	r3, r0
 8013e50:	f003 0304 	and.w	r3, r3, #4
 8013e54:	2b04      	cmp	r3, #4
 8013e56:	d115      	bne.n	8013e84 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	685b      	ldr	r3, [r3, #4]
 8013e5e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8013e60:	69bb      	ldr	r3, [r7, #24]
 8013e62:	f003 0304 	and.w	r3, r3, #4
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d002      	beq.n	8013e70 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8013e6a:	6878      	ldr	r0, [r7, #4]
 8013e6c:	f009 ff5c 	bl	801dd28 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	6859      	ldr	r1, [r3, #4]
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	69ba      	ldr	r2, [r7, #24]
 8013e7c:	430a      	orrs	r2, r1
 8013e7e:	605a      	str	r2, [r3, #4]
 8013e80:	e000      	b.n	8013e84 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8013e82:	bf00      	nop
    }
  }
}
 8013e84:	3734      	adds	r7, #52	; 0x34
 8013e86:	46bd      	mov	sp, r7
 8013e88:	bd90      	pop	{r4, r7, pc}

08013e8a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8013e8a:	b580      	push	{r7, lr}
 8013e8c:	b082      	sub	sp, #8
 8013e8e:	af00      	add	r7, sp, #0
 8013e90:	6078      	str	r0, [r7, #4]
 8013e92:	460b      	mov	r3, r1
 8013e94:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8013e9c:	2b01      	cmp	r3, #1
 8013e9e:	d101      	bne.n	8013ea4 <HAL_PCD_SetAddress+0x1a>
 8013ea0:	2302      	movs	r3, #2
 8013ea2:	e013      	b.n	8013ecc <HAL_PCD_SetAddress+0x42>
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	2201      	movs	r2, #1
 8013ea8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	78fa      	ldrb	r2, [r7, #3]
 8013eb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	78fa      	ldrb	r2, [r7, #3]
 8013eba:	4611      	mov	r1, r2
 8013ebc:	4618      	mov	r0, r3
 8013ebe:	f007 fe7d 	bl	801bbbc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	2200      	movs	r2, #0
 8013ec6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8013eca:	2300      	movs	r3, #0
}
 8013ecc:	4618      	mov	r0, r3
 8013ece:	3708      	adds	r7, #8
 8013ed0:	46bd      	mov	sp, r7
 8013ed2:	bd80      	pop	{r7, pc}

08013ed4 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b084      	sub	sp, #16
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	6078      	str	r0, [r7, #4]
 8013edc:	4608      	mov	r0, r1
 8013ede:	4611      	mov	r1, r2
 8013ee0:	461a      	mov	r2, r3
 8013ee2:	4603      	mov	r3, r0
 8013ee4:	70fb      	strb	r3, [r7, #3]
 8013ee6:	460b      	mov	r3, r1
 8013ee8:	803b      	strh	r3, [r7, #0]
 8013eea:	4613      	mov	r3, r2
 8013eec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8013eee:	2300      	movs	r3, #0
 8013ef0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8013ef2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	da0f      	bge.n	8013f1a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013efa:	78fb      	ldrb	r3, [r7, #3]
 8013efc:	f003 020f 	and.w	r2, r3, #15
 8013f00:	4613      	mov	r3, r2
 8013f02:	00db      	lsls	r3, r3, #3
 8013f04:	1a9b      	subs	r3, r3, r2
 8013f06:	009b      	lsls	r3, r3, #2
 8013f08:	3338      	adds	r3, #56	; 0x38
 8013f0a:	687a      	ldr	r2, [r7, #4]
 8013f0c:	4413      	add	r3, r2
 8013f0e:	3304      	adds	r3, #4
 8013f10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	2201      	movs	r2, #1
 8013f16:	705a      	strb	r2, [r3, #1]
 8013f18:	e00f      	b.n	8013f3a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8013f1a:	78fb      	ldrb	r3, [r7, #3]
 8013f1c:	f003 020f 	and.w	r2, r3, #15
 8013f20:	4613      	mov	r3, r2
 8013f22:	00db      	lsls	r3, r3, #3
 8013f24:	1a9b      	subs	r3, r3, r2
 8013f26:	009b      	lsls	r3, r3, #2
 8013f28:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8013f2c:	687a      	ldr	r2, [r7, #4]
 8013f2e:	4413      	add	r3, r2
 8013f30:	3304      	adds	r3, #4
 8013f32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	2200      	movs	r2, #0
 8013f38:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8013f3a:	78fb      	ldrb	r3, [r7, #3]
 8013f3c:	f003 030f 	and.w	r3, r3, #15
 8013f40:	b2da      	uxtb	r2, r3
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8013f46:	883a      	ldrh	r2, [r7, #0]
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	78ba      	ldrb	r2, [r7, #2]
 8013f50:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	785b      	ldrb	r3, [r3, #1]
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d004      	beq.n	8013f64 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	781b      	ldrb	r3, [r3, #0]
 8013f5e:	b29a      	uxth	r2, r3
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8013f64:	78bb      	ldrb	r3, [r7, #2]
 8013f66:	2b02      	cmp	r3, #2
 8013f68:	d102      	bne.n	8013f70 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	2200      	movs	r2, #0
 8013f6e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8013f76:	2b01      	cmp	r3, #1
 8013f78:	d101      	bne.n	8013f7e <HAL_PCD_EP_Open+0xaa>
 8013f7a:	2302      	movs	r3, #2
 8013f7c:	e00e      	b.n	8013f9c <HAL_PCD_EP_Open+0xc8>
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	2201      	movs	r2, #1
 8013f82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	68f9      	ldr	r1, [r7, #12]
 8013f8c:	4618      	mov	r0, r3
 8013f8e:	f007 f833 	bl	801aff8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	2200      	movs	r2, #0
 8013f96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8013f9a:	7afb      	ldrb	r3, [r7, #11]
}
 8013f9c:	4618      	mov	r0, r3
 8013f9e:	3710      	adds	r7, #16
 8013fa0:	46bd      	mov	sp, r7
 8013fa2:	bd80      	pop	{r7, pc}

08013fa4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013fa4:	b580      	push	{r7, lr}
 8013fa6:	b084      	sub	sp, #16
 8013fa8:	af00      	add	r7, sp, #0
 8013faa:	6078      	str	r0, [r7, #4]
 8013fac:	460b      	mov	r3, r1
 8013fae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8013fb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	da0f      	bge.n	8013fd8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013fb8:	78fb      	ldrb	r3, [r7, #3]
 8013fba:	f003 020f 	and.w	r2, r3, #15
 8013fbe:	4613      	mov	r3, r2
 8013fc0:	00db      	lsls	r3, r3, #3
 8013fc2:	1a9b      	subs	r3, r3, r2
 8013fc4:	009b      	lsls	r3, r3, #2
 8013fc6:	3338      	adds	r3, #56	; 0x38
 8013fc8:	687a      	ldr	r2, [r7, #4]
 8013fca:	4413      	add	r3, r2
 8013fcc:	3304      	adds	r3, #4
 8013fce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	2201      	movs	r2, #1
 8013fd4:	705a      	strb	r2, [r3, #1]
 8013fd6:	e00f      	b.n	8013ff8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8013fd8:	78fb      	ldrb	r3, [r7, #3]
 8013fda:	f003 020f 	and.w	r2, r3, #15
 8013fde:	4613      	mov	r3, r2
 8013fe0:	00db      	lsls	r3, r3, #3
 8013fe2:	1a9b      	subs	r3, r3, r2
 8013fe4:	009b      	lsls	r3, r3, #2
 8013fe6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8013fea:	687a      	ldr	r2, [r7, #4]
 8013fec:	4413      	add	r3, r2
 8013fee:	3304      	adds	r3, #4
 8013ff0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	2200      	movs	r2, #0
 8013ff6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8013ff8:	78fb      	ldrb	r3, [r7, #3]
 8013ffa:	f003 030f 	and.w	r3, r3, #15
 8013ffe:	b2da      	uxtb	r2, r3
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801400a:	2b01      	cmp	r3, #1
 801400c:	d101      	bne.n	8014012 <HAL_PCD_EP_Close+0x6e>
 801400e:	2302      	movs	r3, #2
 8014010:	e00e      	b.n	8014030 <HAL_PCD_EP_Close+0x8c>
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	2201      	movs	r2, #1
 8014016:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	68f9      	ldr	r1, [r7, #12]
 8014020:	4618      	mov	r0, r3
 8014022:	f007 f871 	bl	801b108 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	2200      	movs	r2, #0
 801402a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 801402e:	2300      	movs	r3, #0
}
 8014030:	4618      	mov	r0, r3
 8014032:	3710      	adds	r7, #16
 8014034:	46bd      	mov	sp, r7
 8014036:	bd80      	pop	{r7, pc}

08014038 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8014038:	b580      	push	{r7, lr}
 801403a:	b086      	sub	sp, #24
 801403c:	af00      	add	r7, sp, #0
 801403e:	60f8      	str	r0, [r7, #12]
 8014040:	607a      	str	r2, [r7, #4]
 8014042:	603b      	str	r3, [r7, #0]
 8014044:	460b      	mov	r3, r1
 8014046:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8014048:	7afb      	ldrb	r3, [r7, #11]
 801404a:	f003 020f 	and.w	r2, r3, #15
 801404e:	4613      	mov	r3, r2
 8014050:	00db      	lsls	r3, r3, #3
 8014052:	1a9b      	subs	r3, r3, r2
 8014054:	009b      	lsls	r3, r3, #2
 8014056:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801405a:	68fa      	ldr	r2, [r7, #12]
 801405c:	4413      	add	r3, r2
 801405e:	3304      	adds	r3, #4
 8014060:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8014062:	697b      	ldr	r3, [r7, #20]
 8014064:	687a      	ldr	r2, [r7, #4]
 8014066:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8014068:	697b      	ldr	r3, [r7, #20]
 801406a:	683a      	ldr	r2, [r7, #0]
 801406c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 801406e:	697b      	ldr	r3, [r7, #20]
 8014070:	2200      	movs	r2, #0
 8014072:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8014074:	697b      	ldr	r3, [r7, #20]
 8014076:	2200      	movs	r2, #0
 8014078:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801407a:	7afb      	ldrb	r3, [r7, #11]
 801407c:	f003 030f 	and.w	r3, r3, #15
 8014080:	b2da      	uxtb	r2, r3
 8014082:	697b      	ldr	r3, [r7, #20]
 8014084:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8014086:	68fb      	ldr	r3, [r7, #12]
 8014088:	691b      	ldr	r3, [r3, #16]
 801408a:	2b01      	cmp	r3, #1
 801408c:	d102      	bne.n	8014094 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801408e:	687a      	ldr	r2, [r7, #4]
 8014090:	697b      	ldr	r3, [r7, #20]
 8014092:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8014094:	7afb      	ldrb	r3, [r7, #11]
 8014096:	f003 030f 	and.w	r3, r3, #15
 801409a:	2b00      	cmp	r3, #0
 801409c:	d109      	bne.n	80140b2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	6818      	ldr	r0, [r3, #0]
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	691b      	ldr	r3, [r3, #16]
 80140a6:	b2db      	uxtb	r3, r3
 80140a8:	461a      	mov	r2, r3
 80140aa:	6979      	ldr	r1, [r7, #20]
 80140ac:	f007 fafc 	bl	801b6a8 <USB_EP0StartXfer>
 80140b0:	e008      	b.n	80140c4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80140b2:	68fb      	ldr	r3, [r7, #12]
 80140b4:	6818      	ldr	r0, [r3, #0]
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	691b      	ldr	r3, [r3, #16]
 80140ba:	b2db      	uxtb	r3, r3
 80140bc:	461a      	mov	r2, r3
 80140be:	6979      	ldr	r1, [r7, #20]
 80140c0:	f007 f8a6 	bl	801b210 <USB_EPStartXfer>
  }

  return HAL_OK;
 80140c4:	2300      	movs	r3, #0
}
 80140c6:	4618      	mov	r0, r3
 80140c8:	3718      	adds	r7, #24
 80140ca:	46bd      	mov	sp, r7
 80140cc:	bd80      	pop	{r7, pc}

080140ce <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80140ce:	b480      	push	{r7}
 80140d0:	b083      	sub	sp, #12
 80140d2:	af00      	add	r7, sp, #0
 80140d4:	6078      	str	r0, [r7, #4]
 80140d6:	460b      	mov	r3, r1
 80140d8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80140da:	78fb      	ldrb	r3, [r7, #3]
 80140dc:	f003 020f 	and.w	r2, r3, #15
 80140e0:	6879      	ldr	r1, [r7, #4]
 80140e2:	4613      	mov	r3, r2
 80140e4:	00db      	lsls	r3, r3, #3
 80140e6:	1a9b      	subs	r3, r3, r2
 80140e8:	009b      	lsls	r3, r3, #2
 80140ea:	440b      	add	r3, r1
 80140ec:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80140f0:	681b      	ldr	r3, [r3, #0]
}
 80140f2:	4618      	mov	r0, r3
 80140f4:	370c      	adds	r7, #12
 80140f6:	46bd      	mov	sp, r7
 80140f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140fc:	4770      	bx	lr

080140fe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80140fe:	b580      	push	{r7, lr}
 8014100:	b086      	sub	sp, #24
 8014102:	af00      	add	r7, sp, #0
 8014104:	60f8      	str	r0, [r7, #12]
 8014106:	607a      	str	r2, [r7, #4]
 8014108:	603b      	str	r3, [r7, #0]
 801410a:	460b      	mov	r3, r1
 801410c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801410e:	7afb      	ldrb	r3, [r7, #11]
 8014110:	f003 020f 	and.w	r2, r3, #15
 8014114:	4613      	mov	r3, r2
 8014116:	00db      	lsls	r3, r3, #3
 8014118:	1a9b      	subs	r3, r3, r2
 801411a:	009b      	lsls	r3, r3, #2
 801411c:	3338      	adds	r3, #56	; 0x38
 801411e:	68fa      	ldr	r2, [r7, #12]
 8014120:	4413      	add	r3, r2
 8014122:	3304      	adds	r3, #4
 8014124:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8014126:	697b      	ldr	r3, [r7, #20]
 8014128:	687a      	ldr	r2, [r7, #4]
 801412a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 801412c:	697b      	ldr	r3, [r7, #20]
 801412e:	683a      	ldr	r2, [r7, #0]
 8014130:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8014132:	697b      	ldr	r3, [r7, #20]
 8014134:	2200      	movs	r2, #0
 8014136:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8014138:	697b      	ldr	r3, [r7, #20]
 801413a:	2201      	movs	r2, #1
 801413c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801413e:	7afb      	ldrb	r3, [r7, #11]
 8014140:	f003 030f 	and.w	r3, r3, #15
 8014144:	b2da      	uxtb	r2, r3
 8014146:	697b      	ldr	r3, [r7, #20]
 8014148:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 801414a:	68fb      	ldr	r3, [r7, #12]
 801414c:	691b      	ldr	r3, [r3, #16]
 801414e:	2b01      	cmp	r3, #1
 8014150:	d102      	bne.n	8014158 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8014152:	687a      	ldr	r2, [r7, #4]
 8014154:	697b      	ldr	r3, [r7, #20]
 8014156:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8014158:	7afb      	ldrb	r3, [r7, #11]
 801415a:	f003 030f 	and.w	r3, r3, #15
 801415e:	2b00      	cmp	r3, #0
 8014160:	d109      	bne.n	8014176 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	6818      	ldr	r0, [r3, #0]
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	691b      	ldr	r3, [r3, #16]
 801416a:	b2db      	uxtb	r3, r3
 801416c:	461a      	mov	r2, r3
 801416e:	6979      	ldr	r1, [r7, #20]
 8014170:	f007 fa9a 	bl	801b6a8 <USB_EP0StartXfer>
 8014174:	e008      	b.n	8014188 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8014176:	68fb      	ldr	r3, [r7, #12]
 8014178:	6818      	ldr	r0, [r3, #0]
 801417a:	68fb      	ldr	r3, [r7, #12]
 801417c:	691b      	ldr	r3, [r3, #16]
 801417e:	b2db      	uxtb	r3, r3
 8014180:	461a      	mov	r2, r3
 8014182:	6979      	ldr	r1, [r7, #20]
 8014184:	f007 f844 	bl	801b210 <USB_EPStartXfer>
  }

  return HAL_OK;
 8014188:	2300      	movs	r3, #0
}
 801418a:	4618      	mov	r0, r3
 801418c:	3718      	adds	r7, #24
 801418e:	46bd      	mov	sp, r7
 8014190:	bd80      	pop	{r7, pc}

08014192 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8014192:	b580      	push	{r7, lr}
 8014194:	b084      	sub	sp, #16
 8014196:	af00      	add	r7, sp, #0
 8014198:	6078      	str	r0, [r7, #4]
 801419a:	460b      	mov	r3, r1
 801419c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 801419e:	78fb      	ldrb	r3, [r7, #3]
 80141a0:	f003 020f 	and.w	r2, r3, #15
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	685b      	ldr	r3, [r3, #4]
 80141a8:	429a      	cmp	r2, r3
 80141aa:	d901      	bls.n	80141b0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80141ac:	2301      	movs	r3, #1
 80141ae:	e050      	b.n	8014252 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80141b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	da0f      	bge.n	80141d8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80141b8:	78fb      	ldrb	r3, [r7, #3]
 80141ba:	f003 020f 	and.w	r2, r3, #15
 80141be:	4613      	mov	r3, r2
 80141c0:	00db      	lsls	r3, r3, #3
 80141c2:	1a9b      	subs	r3, r3, r2
 80141c4:	009b      	lsls	r3, r3, #2
 80141c6:	3338      	adds	r3, #56	; 0x38
 80141c8:	687a      	ldr	r2, [r7, #4]
 80141ca:	4413      	add	r3, r2
 80141cc:	3304      	adds	r3, #4
 80141ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	2201      	movs	r2, #1
 80141d4:	705a      	strb	r2, [r3, #1]
 80141d6:	e00d      	b.n	80141f4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80141d8:	78fa      	ldrb	r2, [r7, #3]
 80141da:	4613      	mov	r3, r2
 80141dc:	00db      	lsls	r3, r3, #3
 80141de:	1a9b      	subs	r3, r3, r2
 80141e0:	009b      	lsls	r3, r3, #2
 80141e2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80141e6:	687a      	ldr	r2, [r7, #4]
 80141e8:	4413      	add	r3, r2
 80141ea:	3304      	adds	r3, #4
 80141ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	2200      	movs	r2, #0
 80141f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	2201      	movs	r2, #1
 80141f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80141fa:	78fb      	ldrb	r3, [r7, #3]
 80141fc:	f003 030f 	and.w	r3, r3, #15
 8014200:	b2da      	uxtb	r2, r3
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801420c:	2b01      	cmp	r3, #1
 801420e:	d101      	bne.n	8014214 <HAL_PCD_EP_SetStall+0x82>
 8014210:	2302      	movs	r3, #2
 8014212:	e01e      	b.n	8014252 <HAL_PCD_EP_SetStall+0xc0>
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	2201      	movs	r2, #1
 8014218:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	68f9      	ldr	r1, [r7, #12]
 8014222:	4618      	mov	r0, r3
 8014224:	f007 fbf6 	bl	801ba14 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8014228:	78fb      	ldrb	r3, [r7, #3]
 801422a:	f003 030f 	and.w	r3, r3, #15
 801422e:	2b00      	cmp	r3, #0
 8014230:	d10a      	bne.n	8014248 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	6818      	ldr	r0, [r3, #0]
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	691b      	ldr	r3, [r3, #16]
 801423a:	b2d9      	uxtb	r1, r3
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8014242:	461a      	mov	r2, r3
 8014244:	f007 fdd6 	bl	801bdf4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	2200      	movs	r2, #0
 801424c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8014250:	2300      	movs	r3, #0
}
 8014252:	4618      	mov	r0, r3
 8014254:	3710      	adds	r7, #16
 8014256:	46bd      	mov	sp, r7
 8014258:	bd80      	pop	{r7, pc}

0801425a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801425a:	b580      	push	{r7, lr}
 801425c:	b084      	sub	sp, #16
 801425e:	af00      	add	r7, sp, #0
 8014260:	6078      	str	r0, [r7, #4]
 8014262:	460b      	mov	r3, r1
 8014264:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8014266:	78fb      	ldrb	r3, [r7, #3]
 8014268:	f003 020f 	and.w	r2, r3, #15
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	685b      	ldr	r3, [r3, #4]
 8014270:	429a      	cmp	r2, r3
 8014272:	d901      	bls.n	8014278 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8014274:	2301      	movs	r3, #1
 8014276:	e042      	b.n	80142fe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8014278:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801427c:	2b00      	cmp	r3, #0
 801427e:	da0f      	bge.n	80142a0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8014280:	78fb      	ldrb	r3, [r7, #3]
 8014282:	f003 020f 	and.w	r2, r3, #15
 8014286:	4613      	mov	r3, r2
 8014288:	00db      	lsls	r3, r3, #3
 801428a:	1a9b      	subs	r3, r3, r2
 801428c:	009b      	lsls	r3, r3, #2
 801428e:	3338      	adds	r3, #56	; 0x38
 8014290:	687a      	ldr	r2, [r7, #4]
 8014292:	4413      	add	r3, r2
 8014294:	3304      	adds	r3, #4
 8014296:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8014298:	68fb      	ldr	r3, [r7, #12]
 801429a:	2201      	movs	r2, #1
 801429c:	705a      	strb	r2, [r3, #1]
 801429e:	e00f      	b.n	80142c0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80142a0:	78fb      	ldrb	r3, [r7, #3]
 80142a2:	f003 020f 	and.w	r2, r3, #15
 80142a6:	4613      	mov	r3, r2
 80142a8:	00db      	lsls	r3, r3, #3
 80142aa:	1a9b      	subs	r3, r3, r2
 80142ac:	009b      	lsls	r3, r3, #2
 80142ae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80142b2:	687a      	ldr	r2, [r7, #4]
 80142b4:	4413      	add	r3, r2
 80142b6:	3304      	adds	r3, #4
 80142b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80142ba:	68fb      	ldr	r3, [r7, #12]
 80142bc:	2200      	movs	r2, #0
 80142be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	2200      	movs	r2, #0
 80142c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80142c6:	78fb      	ldrb	r3, [r7, #3]
 80142c8:	f003 030f 	and.w	r3, r3, #15
 80142cc:	b2da      	uxtb	r2, r3
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80142d8:	2b01      	cmp	r3, #1
 80142da:	d101      	bne.n	80142e0 <HAL_PCD_EP_ClrStall+0x86>
 80142dc:	2302      	movs	r3, #2
 80142de:	e00e      	b.n	80142fe <HAL_PCD_EP_ClrStall+0xa4>
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	2201      	movs	r2, #1
 80142e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	68f9      	ldr	r1, [r7, #12]
 80142ee:	4618      	mov	r0, r3
 80142f0:	f007 fbfe 	bl	801baf0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	2200      	movs	r2, #0
 80142f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80142fc:	2300      	movs	r3, #0
}
 80142fe:	4618      	mov	r0, r3
 8014300:	3710      	adds	r7, #16
 8014302:	46bd      	mov	sp, r7
 8014304:	bd80      	pop	{r7, pc}

08014306 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8014306:	b580      	push	{r7, lr}
 8014308:	b08a      	sub	sp, #40	; 0x28
 801430a:	af02      	add	r7, sp, #8
 801430c:	6078      	str	r0, [r7, #4]
 801430e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014316:	697b      	ldr	r3, [r7, #20]
 8014318:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 801431a:	683a      	ldr	r2, [r7, #0]
 801431c:	4613      	mov	r3, r2
 801431e:	00db      	lsls	r3, r3, #3
 8014320:	1a9b      	subs	r3, r3, r2
 8014322:	009b      	lsls	r3, r3, #2
 8014324:	3338      	adds	r3, #56	; 0x38
 8014326:	687a      	ldr	r2, [r7, #4]
 8014328:	4413      	add	r3, r2
 801432a:	3304      	adds	r3, #4
 801432c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	699a      	ldr	r2, [r3, #24]
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	695b      	ldr	r3, [r3, #20]
 8014336:	429a      	cmp	r2, r3
 8014338:	d901      	bls.n	801433e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 801433a:	2301      	movs	r3, #1
 801433c:	e06c      	b.n	8014418 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	695a      	ldr	r2, [r3, #20]
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	699b      	ldr	r3, [r3, #24]
 8014346:	1ad3      	subs	r3, r2, r3
 8014348:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	689b      	ldr	r3, [r3, #8]
 801434e:	69fa      	ldr	r2, [r7, #28]
 8014350:	429a      	cmp	r2, r3
 8014352:	d902      	bls.n	801435a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8014354:	68fb      	ldr	r3, [r7, #12]
 8014356:	689b      	ldr	r3, [r3, #8]
 8014358:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 801435a:	69fb      	ldr	r3, [r7, #28]
 801435c:	3303      	adds	r3, #3
 801435e:	089b      	lsrs	r3, r3, #2
 8014360:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8014362:	e02b      	b.n	80143bc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8014364:	68fb      	ldr	r3, [r7, #12]
 8014366:	695a      	ldr	r2, [r3, #20]
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	699b      	ldr	r3, [r3, #24]
 801436c:	1ad3      	subs	r3, r2, r3
 801436e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	689b      	ldr	r3, [r3, #8]
 8014374:	69fa      	ldr	r2, [r7, #28]
 8014376:	429a      	cmp	r2, r3
 8014378:	d902      	bls.n	8014380 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 801437a:	68fb      	ldr	r3, [r7, #12]
 801437c:	689b      	ldr	r3, [r3, #8]
 801437e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8014380:	69fb      	ldr	r3, [r7, #28]
 8014382:	3303      	adds	r3, #3
 8014384:	089b      	lsrs	r3, r3, #2
 8014386:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	68d9      	ldr	r1, [r3, #12]
 801438c:	683b      	ldr	r3, [r7, #0]
 801438e:	b2da      	uxtb	r2, r3
 8014390:	69fb      	ldr	r3, [r7, #28]
 8014392:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8014398:	b2db      	uxtb	r3, r3
 801439a:	9300      	str	r3, [sp, #0]
 801439c:	4603      	mov	r3, r0
 801439e:	6978      	ldr	r0, [r7, #20]
 80143a0:	f007 fada 	bl	801b958 <USB_WritePacket>

    ep->xfer_buff  += len;
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	68da      	ldr	r2, [r3, #12]
 80143a8:	69fb      	ldr	r3, [r7, #28]
 80143aa:	441a      	add	r2, r3
 80143ac:	68fb      	ldr	r3, [r7, #12]
 80143ae:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	699a      	ldr	r2, [r3, #24]
 80143b4:	69fb      	ldr	r3, [r7, #28]
 80143b6:	441a      	add	r2, r3
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80143bc:	683b      	ldr	r3, [r7, #0]
 80143be:	015a      	lsls	r2, r3, #5
 80143c0:	693b      	ldr	r3, [r7, #16]
 80143c2:	4413      	add	r3, r2
 80143c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143c8:	699b      	ldr	r3, [r3, #24]
 80143ca:	b29b      	uxth	r3, r3
 80143cc:	69ba      	ldr	r2, [r7, #24]
 80143ce:	429a      	cmp	r2, r3
 80143d0:	d809      	bhi.n	80143e6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	699a      	ldr	r2, [r3, #24]
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80143da:	429a      	cmp	r2, r3
 80143dc:	d203      	bcs.n	80143e6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	695b      	ldr	r3, [r3, #20]
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d1be      	bne.n	8014364 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	695a      	ldr	r2, [r3, #20]
 80143ea:	68fb      	ldr	r3, [r7, #12]
 80143ec:	699b      	ldr	r3, [r3, #24]
 80143ee:	429a      	cmp	r2, r3
 80143f0:	d811      	bhi.n	8014416 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80143f2:	683b      	ldr	r3, [r7, #0]
 80143f4:	f003 030f 	and.w	r3, r3, #15
 80143f8:	2201      	movs	r2, #1
 80143fa:	fa02 f303 	lsl.w	r3, r2, r3
 80143fe:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8014400:	693b      	ldr	r3, [r7, #16]
 8014402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014408:	68bb      	ldr	r3, [r7, #8]
 801440a:	43db      	mvns	r3, r3
 801440c:	6939      	ldr	r1, [r7, #16]
 801440e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014412:	4013      	ands	r3, r2
 8014414:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8014416:	2300      	movs	r3, #0
}
 8014418:	4618      	mov	r0, r3
 801441a:	3720      	adds	r7, #32
 801441c:	46bd      	mov	sp, r7
 801441e:	bd80      	pop	{r7, pc}

08014420 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8014420:	b580      	push	{r7, lr}
 8014422:	b086      	sub	sp, #24
 8014424:	af00      	add	r7, sp, #0
 8014426:	6078      	str	r0, [r7, #4]
 8014428:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014430:	697b      	ldr	r3, [r7, #20]
 8014432:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8014434:	697b      	ldr	r3, [r7, #20]
 8014436:	333c      	adds	r3, #60	; 0x3c
 8014438:	3304      	adds	r3, #4
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801443e:	683b      	ldr	r3, [r7, #0]
 8014440:	015a      	lsls	r2, r3, #5
 8014442:	693b      	ldr	r3, [r7, #16]
 8014444:	4413      	add	r3, r2
 8014446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801444a:	689b      	ldr	r3, [r3, #8]
 801444c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	691b      	ldr	r3, [r3, #16]
 8014452:	2b01      	cmp	r3, #1
 8014454:	f040 80a0 	bne.w	8014598 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8014458:	68bb      	ldr	r3, [r7, #8]
 801445a:	f003 0308 	and.w	r3, r3, #8
 801445e:	2b00      	cmp	r3, #0
 8014460:	d015      	beq.n	801448e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	4a72      	ldr	r2, [pc, #456]	; (8014630 <PCD_EP_OutXfrComplete_int+0x210>)
 8014466:	4293      	cmp	r3, r2
 8014468:	f240 80dd 	bls.w	8014626 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801446c:	68bb      	ldr	r3, [r7, #8]
 801446e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8014472:	2b00      	cmp	r3, #0
 8014474:	f000 80d7 	beq.w	8014626 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8014478:	683b      	ldr	r3, [r7, #0]
 801447a:	015a      	lsls	r2, r3, #5
 801447c:	693b      	ldr	r3, [r7, #16]
 801447e:	4413      	add	r3, r2
 8014480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014484:	461a      	mov	r2, r3
 8014486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801448a:	6093      	str	r3, [r2, #8]
 801448c:	e0cb      	b.n	8014626 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 801448e:	68bb      	ldr	r3, [r7, #8]
 8014490:	f003 0320 	and.w	r3, r3, #32
 8014494:	2b00      	cmp	r3, #0
 8014496:	d009      	beq.n	80144ac <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8014498:	683b      	ldr	r3, [r7, #0]
 801449a:	015a      	lsls	r2, r3, #5
 801449c:	693b      	ldr	r3, [r7, #16]
 801449e:	4413      	add	r3, r2
 80144a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80144a4:	461a      	mov	r2, r3
 80144a6:	2320      	movs	r3, #32
 80144a8:	6093      	str	r3, [r2, #8]
 80144aa:	e0bc      	b.n	8014626 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80144ac:	68bb      	ldr	r3, [r7, #8]
 80144ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	f040 80b7 	bne.w	8014626 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	4a5d      	ldr	r2, [pc, #372]	; (8014630 <PCD_EP_OutXfrComplete_int+0x210>)
 80144bc:	4293      	cmp	r3, r2
 80144be:	d90f      	bls.n	80144e0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80144c0:	68bb      	ldr	r3, [r7, #8]
 80144c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d00a      	beq.n	80144e0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80144ca:	683b      	ldr	r3, [r7, #0]
 80144cc:	015a      	lsls	r2, r3, #5
 80144ce:	693b      	ldr	r3, [r7, #16]
 80144d0:	4413      	add	r3, r2
 80144d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80144d6:	461a      	mov	r2, r3
 80144d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80144dc:	6093      	str	r3, [r2, #8]
 80144de:	e0a2      	b.n	8014626 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80144e0:	6879      	ldr	r1, [r7, #4]
 80144e2:	683a      	ldr	r2, [r7, #0]
 80144e4:	4613      	mov	r3, r2
 80144e6:	00db      	lsls	r3, r3, #3
 80144e8:	1a9b      	subs	r3, r3, r2
 80144ea:	009b      	lsls	r3, r3, #2
 80144ec:	440b      	add	r3, r1
 80144ee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80144f2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80144f4:	683b      	ldr	r3, [r7, #0]
 80144f6:	0159      	lsls	r1, r3, #5
 80144f8:	693b      	ldr	r3, [r7, #16]
 80144fa:	440b      	add	r3, r1
 80144fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014500:	691b      	ldr	r3, [r3, #16]
 8014502:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8014506:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8014508:	6878      	ldr	r0, [r7, #4]
 801450a:	683a      	ldr	r2, [r7, #0]
 801450c:	4613      	mov	r3, r2
 801450e:	00db      	lsls	r3, r3, #3
 8014510:	1a9b      	subs	r3, r3, r2
 8014512:	009b      	lsls	r3, r3, #2
 8014514:	4403      	add	r3, r0
 8014516:	f503 7305 	add.w	r3, r3, #532	; 0x214
 801451a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 801451c:	6879      	ldr	r1, [r7, #4]
 801451e:	683a      	ldr	r2, [r7, #0]
 8014520:	4613      	mov	r3, r2
 8014522:	00db      	lsls	r3, r3, #3
 8014524:	1a9b      	subs	r3, r3, r2
 8014526:	009b      	lsls	r3, r3, #2
 8014528:	440b      	add	r3, r1
 801452a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801452e:	6819      	ldr	r1, [r3, #0]
 8014530:	6878      	ldr	r0, [r7, #4]
 8014532:	683a      	ldr	r2, [r7, #0]
 8014534:	4613      	mov	r3, r2
 8014536:	00db      	lsls	r3, r3, #3
 8014538:	1a9b      	subs	r3, r3, r2
 801453a:	009b      	lsls	r3, r3, #2
 801453c:	4403      	add	r3, r0
 801453e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	4419      	add	r1, r3
 8014546:	6878      	ldr	r0, [r7, #4]
 8014548:	683a      	ldr	r2, [r7, #0]
 801454a:	4613      	mov	r3, r2
 801454c:	00db      	lsls	r3, r3, #3
 801454e:	1a9b      	subs	r3, r3, r2
 8014550:	009b      	lsls	r3, r3, #2
 8014552:	4403      	add	r3, r0
 8014554:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8014558:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 801455a:	683b      	ldr	r3, [r7, #0]
 801455c:	2b00      	cmp	r3, #0
 801455e:	d114      	bne.n	801458a <PCD_EP_OutXfrComplete_int+0x16a>
 8014560:	6879      	ldr	r1, [r7, #4]
 8014562:	683a      	ldr	r2, [r7, #0]
 8014564:	4613      	mov	r3, r2
 8014566:	00db      	lsls	r3, r3, #3
 8014568:	1a9b      	subs	r3, r3, r2
 801456a:	009b      	lsls	r3, r3, #2
 801456c:	440b      	add	r3, r1
 801456e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	2b00      	cmp	r3, #0
 8014576:	d108      	bne.n	801458a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	6818      	ldr	r0, [r3, #0]
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8014582:	461a      	mov	r2, r3
 8014584:	2101      	movs	r1, #1
 8014586:	f007 fc35 	bl	801bdf4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801458a:	683b      	ldr	r3, [r7, #0]
 801458c:	b2db      	uxtb	r3, r3
 801458e:	4619      	mov	r1, r3
 8014590:	6878      	ldr	r0, [r7, #4]
 8014592:	f009 faf7 	bl	801db84 <HAL_PCD_DataOutStageCallback>
 8014596:	e046      	b.n	8014626 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	4a26      	ldr	r2, [pc, #152]	; (8014634 <PCD_EP_OutXfrComplete_int+0x214>)
 801459c:	4293      	cmp	r3, r2
 801459e:	d124      	bne.n	80145ea <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80145a0:	68bb      	ldr	r3, [r7, #8]
 80145a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d00a      	beq.n	80145c0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80145aa:	683b      	ldr	r3, [r7, #0]
 80145ac:	015a      	lsls	r2, r3, #5
 80145ae:	693b      	ldr	r3, [r7, #16]
 80145b0:	4413      	add	r3, r2
 80145b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145b6:	461a      	mov	r2, r3
 80145b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80145bc:	6093      	str	r3, [r2, #8]
 80145be:	e032      	b.n	8014626 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80145c0:	68bb      	ldr	r3, [r7, #8]
 80145c2:	f003 0320 	and.w	r3, r3, #32
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d008      	beq.n	80145dc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80145ca:	683b      	ldr	r3, [r7, #0]
 80145cc:	015a      	lsls	r2, r3, #5
 80145ce:	693b      	ldr	r3, [r7, #16]
 80145d0:	4413      	add	r3, r2
 80145d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145d6:	461a      	mov	r2, r3
 80145d8:	2320      	movs	r3, #32
 80145da:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80145dc:	683b      	ldr	r3, [r7, #0]
 80145de:	b2db      	uxtb	r3, r3
 80145e0:	4619      	mov	r1, r3
 80145e2:	6878      	ldr	r0, [r7, #4]
 80145e4:	f009 face 	bl	801db84 <HAL_PCD_DataOutStageCallback>
 80145e8:	e01d      	b.n	8014626 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80145ea:	683b      	ldr	r3, [r7, #0]
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d114      	bne.n	801461a <PCD_EP_OutXfrComplete_int+0x1fa>
 80145f0:	6879      	ldr	r1, [r7, #4]
 80145f2:	683a      	ldr	r2, [r7, #0]
 80145f4:	4613      	mov	r3, r2
 80145f6:	00db      	lsls	r3, r3, #3
 80145f8:	1a9b      	subs	r3, r3, r2
 80145fa:	009b      	lsls	r3, r3, #2
 80145fc:	440b      	add	r3, r1
 80145fe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	2b00      	cmp	r3, #0
 8014606:	d108      	bne.n	801461a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	6818      	ldr	r0, [r3, #0]
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8014612:	461a      	mov	r2, r3
 8014614:	2100      	movs	r1, #0
 8014616:	f007 fbed 	bl	801bdf4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801461a:	683b      	ldr	r3, [r7, #0]
 801461c:	b2db      	uxtb	r3, r3
 801461e:	4619      	mov	r1, r3
 8014620:	6878      	ldr	r0, [r7, #4]
 8014622:	f009 faaf 	bl	801db84 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8014626:	2300      	movs	r3, #0
}
 8014628:	4618      	mov	r0, r3
 801462a:	3718      	adds	r7, #24
 801462c:	46bd      	mov	sp, r7
 801462e:	bd80      	pop	{r7, pc}
 8014630:	4f54300a 	.word	0x4f54300a
 8014634:	4f54310a 	.word	0x4f54310a

08014638 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8014638:	b580      	push	{r7, lr}
 801463a:	b086      	sub	sp, #24
 801463c:	af00      	add	r7, sp, #0
 801463e:	6078      	str	r0, [r7, #4]
 8014640:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014648:	697b      	ldr	r3, [r7, #20]
 801464a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801464c:	697b      	ldr	r3, [r7, #20]
 801464e:	333c      	adds	r3, #60	; 0x3c
 8014650:	3304      	adds	r3, #4
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8014656:	683b      	ldr	r3, [r7, #0]
 8014658:	015a      	lsls	r2, r3, #5
 801465a:	693b      	ldr	r3, [r7, #16]
 801465c:	4413      	add	r3, r2
 801465e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014662:	689b      	ldr	r3, [r3, #8]
 8014664:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	4a15      	ldr	r2, [pc, #84]	; (80146c0 <PCD_EP_OutSetupPacket_int+0x88>)
 801466a:	4293      	cmp	r3, r2
 801466c:	d90e      	bls.n	801468c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801466e:	68bb      	ldr	r3, [r7, #8]
 8014670:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8014674:	2b00      	cmp	r3, #0
 8014676:	d009      	beq.n	801468c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8014678:	683b      	ldr	r3, [r7, #0]
 801467a:	015a      	lsls	r2, r3, #5
 801467c:	693b      	ldr	r3, [r7, #16]
 801467e:	4413      	add	r3, r2
 8014680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014684:	461a      	mov	r2, r3
 8014686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801468a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 801468c:	6878      	ldr	r0, [r7, #4]
 801468e:	f009 fa67 	bl	801db60 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	4a0a      	ldr	r2, [pc, #40]	; (80146c0 <PCD_EP_OutSetupPacket_int+0x88>)
 8014696:	4293      	cmp	r3, r2
 8014698:	d90c      	bls.n	80146b4 <PCD_EP_OutSetupPacket_int+0x7c>
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	691b      	ldr	r3, [r3, #16]
 801469e:	2b01      	cmp	r3, #1
 80146a0:	d108      	bne.n	80146b4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	6818      	ldr	r0, [r3, #0]
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80146ac:	461a      	mov	r2, r3
 80146ae:	2101      	movs	r1, #1
 80146b0:	f007 fba0 	bl	801bdf4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80146b4:	2300      	movs	r3, #0
}
 80146b6:	4618      	mov	r0, r3
 80146b8:	3718      	adds	r7, #24
 80146ba:	46bd      	mov	sp, r7
 80146bc:	bd80      	pop	{r7, pc}
 80146be:	bf00      	nop
 80146c0:	4f54300a 	.word	0x4f54300a

080146c4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80146c4:	b480      	push	{r7}
 80146c6:	b085      	sub	sp, #20
 80146c8:	af00      	add	r7, sp, #0
 80146ca:	6078      	str	r0, [r7, #4]
 80146cc:	460b      	mov	r3, r1
 80146ce:	70fb      	strb	r3, [r7, #3]
 80146d0:	4613      	mov	r3, r2
 80146d2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146da:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80146dc:	78fb      	ldrb	r3, [r7, #3]
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d107      	bne.n	80146f2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80146e2:	883b      	ldrh	r3, [r7, #0]
 80146e4:	0419      	lsls	r1, r3, #16
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	68ba      	ldr	r2, [r7, #8]
 80146ec:	430a      	orrs	r2, r1
 80146ee:	629a      	str	r2, [r3, #40]	; 0x28
 80146f0:	e028      	b.n	8014744 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80146f8:	0c1b      	lsrs	r3, r3, #16
 80146fa:	68ba      	ldr	r2, [r7, #8]
 80146fc:	4413      	add	r3, r2
 80146fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8014700:	2300      	movs	r3, #0
 8014702:	73fb      	strb	r3, [r7, #15]
 8014704:	e00d      	b.n	8014722 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	681a      	ldr	r2, [r3, #0]
 801470a:	7bfb      	ldrb	r3, [r7, #15]
 801470c:	3340      	adds	r3, #64	; 0x40
 801470e:	009b      	lsls	r3, r3, #2
 8014710:	4413      	add	r3, r2
 8014712:	685b      	ldr	r3, [r3, #4]
 8014714:	0c1b      	lsrs	r3, r3, #16
 8014716:	68ba      	ldr	r2, [r7, #8]
 8014718:	4413      	add	r3, r2
 801471a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 801471c:	7bfb      	ldrb	r3, [r7, #15]
 801471e:	3301      	adds	r3, #1
 8014720:	73fb      	strb	r3, [r7, #15]
 8014722:	7bfa      	ldrb	r2, [r7, #15]
 8014724:	78fb      	ldrb	r3, [r7, #3]
 8014726:	3b01      	subs	r3, #1
 8014728:	429a      	cmp	r2, r3
 801472a:	d3ec      	bcc.n	8014706 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 801472c:	883b      	ldrh	r3, [r7, #0]
 801472e:	0418      	lsls	r0, r3, #16
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	6819      	ldr	r1, [r3, #0]
 8014734:	78fb      	ldrb	r3, [r7, #3]
 8014736:	3b01      	subs	r3, #1
 8014738:	68ba      	ldr	r2, [r7, #8]
 801473a:	4302      	orrs	r2, r0
 801473c:	3340      	adds	r3, #64	; 0x40
 801473e:	009b      	lsls	r3, r3, #2
 8014740:	440b      	add	r3, r1
 8014742:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8014744:	2300      	movs	r3, #0
}
 8014746:	4618      	mov	r0, r3
 8014748:	3714      	adds	r7, #20
 801474a:	46bd      	mov	sp, r7
 801474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014750:	4770      	bx	lr

08014752 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8014752:	b480      	push	{r7}
 8014754:	b083      	sub	sp, #12
 8014756:	af00      	add	r7, sp, #0
 8014758:	6078      	str	r0, [r7, #4]
 801475a:	460b      	mov	r3, r1
 801475c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	887a      	ldrh	r2, [r7, #2]
 8014764:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8014766:	2300      	movs	r3, #0
}
 8014768:	4618      	mov	r0, r3
 801476a:	370c      	adds	r7, #12
 801476c:	46bd      	mov	sp, r7
 801476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014772:	4770      	bx	lr

08014774 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8014774:	b480      	push	{r7}
 8014776:	b085      	sub	sp, #20
 8014778:	af00      	add	r7, sp, #0
 801477a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	2201      	movs	r2, #1
 8014786:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	2200      	movs	r2, #0
 801478e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	699b      	ldr	r3, [r3, #24]
 8014796:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80147a2:	4b05      	ldr	r3, [pc, #20]	; (80147b8 <HAL_PCDEx_ActivateLPM+0x44>)
 80147a4:	4313      	orrs	r3, r2
 80147a6:	68fa      	ldr	r2, [r7, #12]
 80147a8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80147aa:	2300      	movs	r3, #0
}
 80147ac:	4618      	mov	r0, r3
 80147ae:	3714      	adds	r7, #20
 80147b0:	46bd      	mov	sp, r7
 80147b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b6:	4770      	bx	lr
 80147b8:	10000003 	.word	0x10000003

080147bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80147bc:	b480      	push	{r7}
 80147be:	b083      	sub	sp, #12
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	6078      	str	r0, [r7, #4]
 80147c4:	460b      	mov	r3, r1
 80147c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80147c8:	bf00      	nop
 80147ca:	370c      	adds	r7, #12
 80147cc:	46bd      	mov	sp, r7
 80147ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147d2:	4770      	bx	lr

080147d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80147d4:	b580      	push	{r7, lr}
 80147d6:	b084      	sub	sp, #16
 80147d8:	af00      	add	r7, sp, #0
 80147da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80147dc:	4b19      	ldr	r3, [pc, #100]	; (8014844 <HAL_PWREx_ConfigSupply+0x70>)
 80147de:	68db      	ldr	r3, [r3, #12]
 80147e0:	f003 0304 	and.w	r3, r3, #4
 80147e4:	2b04      	cmp	r3, #4
 80147e6:	d00a      	beq.n	80147fe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80147e8:	4b16      	ldr	r3, [pc, #88]	; (8014844 <HAL_PWREx_ConfigSupply+0x70>)
 80147ea:	68db      	ldr	r3, [r3, #12]
 80147ec:	f003 0307 	and.w	r3, r3, #7
 80147f0:	687a      	ldr	r2, [r7, #4]
 80147f2:	429a      	cmp	r2, r3
 80147f4:	d001      	beq.n	80147fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80147f6:	2301      	movs	r3, #1
 80147f8:	e01f      	b.n	801483a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80147fa:	2300      	movs	r3, #0
 80147fc:	e01d      	b.n	801483a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80147fe:	4b11      	ldr	r3, [pc, #68]	; (8014844 <HAL_PWREx_ConfigSupply+0x70>)
 8014800:	68db      	ldr	r3, [r3, #12]
 8014802:	f023 0207 	bic.w	r2, r3, #7
 8014806:	490f      	ldr	r1, [pc, #60]	; (8014844 <HAL_PWREx_ConfigSupply+0x70>)
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	4313      	orrs	r3, r2
 801480c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801480e:	f7fe f87d 	bl	801290c <HAL_GetTick>
 8014812:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8014814:	e009      	b.n	801482a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8014816:	f7fe f879 	bl	801290c <HAL_GetTick>
 801481a:	4602      	mov	r2, r0
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	1ad3      	subs	r3, r2, r3
 8014820:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014824:	d901      	bls.n	801482a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8014826:	2301      	movs	r3, #1
 8014828:	e007      	b.n	801483a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801482a:	4b06      	ldr	r3, [pc, #24]	; (8014844 <HAL_PWREx_ConfigSupply+0x70>)
 801482c:	685b      	ldr	r3, [r3, #4]
 801482e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014832:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014836:	d1ee      	bne.n	8014816 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8014838:	2300      	movs	r3, #0
}
 801483a:	4618      	mov	r0, r3
 801483c:	3710      	adds	r7, #16
 801483e:	46bd      	mov	sp, r7
 8014840:	bd80      	pop	{r7, pc}
 8014842:	bf00      	nop
 8014844:	58024800 	.word	0x58024800

08014848 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8014848:	b480      	push	{r7}
 801484a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 801484c:	4b05      	ldr	r3, [pc, #20]	; (8014864 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 801484e:	68db      	ldr	r3, [r3, #12]
 8014850:	4a04      	ldr	r2, [pc, #16]	; (8014864 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8014852:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014856:	60d3      	str	r3, [r2, #12]
}
 8014858:	bf00      	nop
 801485a:	46bd      	mov	sp, r7
 801485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014860:	4770      	bx	lr
 8014862:	bf00      	nop
 8014864:	58024800 	.word	0x58024800

08014868 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8014868:	b580      	push	{r7, lr}
 801486a:	b08c      	sub	sp, #48	; 0x30
 801486c:	af00      	add	r7, sp, #0
 801486e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	2b00      	cmp	r3, #0
 8014874:	d101      	bne.n	801487a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8014876:	2301      	movs	r3, #1
 8014878:	e3c4      	b.n	8015004 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	f003 0301 	and.w	r3, r3, #1
 8014882:	2b00      	cmp	r3, #0
 8014884:	f000 8087 	beq.w	8014996 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014888:	4ba2      	ldr	r3, [pc, #648]	; (8014b14 <HAL_RCC_OscConfig+0x2ac>)
 801488a:	691b      	ldr	r3, [r3, #16]
 801488c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014890:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8014892:	4ba0      	ldr	r3, [pc, #640]	; (8014b14 <HAL_RCC_OscConfig+0x2ac>)
 8014894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014896:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8014898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801489a:	2b10      	cmp	r3, #16
 801489c:	d007      	beq.n	80148ae <HAL_RCC_OscConfig+0x46>
 801489e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148a0:	2b18      	cmp	r3, #24
 80148a2:	d110      	bne.n	80148c6 <HAL_RCC_OscConfig+0x5e>
 80148a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148a6:	f003 0303 	and.w	r3, r3, #3
 80148aa:	2b02      	cmp	r3, #2
 80148ac:	d10b      	bne.n	80148c6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80148ae:	4b99      	ldr	r3, [pc, #612]	; (8014b14 <HAL_RCC_OscConfig+0x2ac>)
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d06c      	beq.n	8014994 <HAL_RCC_OscConfig+0x12c>
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	685b      	ldr	r3, [r3, #4]
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d168      	bne.n	8014994 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80148c2:	2301      	movs	r3, #1
 80148c4:	e39e      	b.n	8015004 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	685b      	ldr	r3, [r3, #4]
 80148ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80148ce:	d106      	bne.n	80148de <HAL_RCC_OscConfig+0x76>
 80148d0:	4b90      	ldr	r3, [pc, #576]	; (8014b14 <HAL_RCC_OscConfig+0x2ac>)
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	4a8f      	ldr	r2, [pc, #572]	; (8014b14 <HAL_RCC_OscConfig+0x2ac>)
 80148d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80148da:	6013      	str	r3, [r2, #0]
 80148dc:	e02e      	b.n	801493c <HAL_RCC_OscConfig+0xd4>
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	685b      	ldr	r3, [r3, #4]
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d10c      	bne.n	8014900 <HAL_RCC_OscConfig+0x98>
 80148e6:	4b8b      	ldr	r3, [pc, #556]	; (8014b14 <HAL_RCC_OscConfig+0x2ac>)
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	4a8a      	ldr	r2, [pc, #552]	; (8014b14 <HAL_RCC_OscConfig+0x2ac>)
 80148ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80148f0:	6013      	str	r3, [r2, #0]
 80148f2:	4b88      	ldr	r3, [pc, #544]	; (8014b14 <HAL_RCC_OscConfig+0x2ac>)
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	4a87      	ldr	r2, [pc, #540]	; (8014b14 <HAL_RCC_OscConfig+0x2ac>)
 80148f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80148fc:	6013      	str	r3, [r2, #0]
 80148fe:	e01d      	b.n	801493c <HAL_RCC_OscConfig+0xd4>
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	685b      	ldr	r3, [r3, #4]
 8014904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8014908:	d10c      	bne.n	8014924 <HAL_RCC_OscConfig+0xbc>
 801490a:	4b82      	ldr	r3, [pc, #520]	; (8014b14 <HAL_RCC_OscConfig+0x2ac>)
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	4a81      	ldr	r2, [pc, #516]	; (8014b14 <HAL_RCC_OscConfig+0x2ac>)
 8014910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8014914:	6013      	str	r3, [r2, #0]
 8014916:	4b7f      	ldr	r3, [pc, #508]	; (8014b14 <HAL_RCC_OscConfig+0x2ac>)
 8014918:	681b      	ldr	r3, [r3, #0]
 801491a:	4a7e      	ldr	r2, [pc, #504]	; (8014b14 <HAL_RCC_OscConfig+0x2ac>)
 801491c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014920:	6013      	str	r3, [r2, #0]
 8014922:	e00b      	b.n	801493c <HAL_RCC_OscConfig+0xd4>
 8014924:	4b7b      	ldr	r3, [pc, #492]	; (8014b14 <HAL_RCC_OscConfig+0x2ac>)
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	4a7a      	ldr	r2, [pc, #488]	; (8014b14 <HAL_RCC_OscConfig+0x2ac>)
 801492a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801492e:	6013      	str	r3, [r2, #0]
 8014930:	4b78      	ldr	r3, [pc, #480]	; (8014b14 <HAL_RCC_OscConfig+0x2ac>)
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	4a77      	ldr	r2, [pc, #476]	; (8014b14 <HAL_RCC_OscConfig+0x2ac>)
 8014936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801493a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	685b      	ldr	r3, [r3, #4]
 8014940:	2b00      	cmp	r3, #0
 8014942:	d013      	beq.n	801496c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014944:	f7fd ffe2 	bl	801290c <HAL_GetTick>
 8014948:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801494a:	e008      	b.n	801495e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801494c:	f7fd ffde 	bl	801290c <HAL_GetTick>
 8014950:	4602      	mov	r2, r0
 8014952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014954:	1ad3      	subs	r3, r2, r3
 8014956:	2b64      	cmp	r3, #100	; 0x64
 8014958:	d901      	bls.n	801495e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 801495a:	2303      	movs	r3, #3
 801495c:	e352      	b.n	8015004 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801495e:	4b6d      	ldr	r3, [pc, #436]	; (8014b14 <HAL_RCC_OscConfig+0x2ac>)
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014966:	2b00      	cmp	r3, #0
 8014968:	d0f0      	beq.n	801494c <HAL_RCC_OscConfig+0xe4>
 801496a:	e014      	b.n	8014996 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801496c:	f7fd ffce 	bl	801290c <HAL_GetTick>
 8014970:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8014972:	e008      	b.n	8014986 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8014974:	f7fd ffca 	bl	801290c <HAL_GetTick>
 8014978:	4602      	mov	r2, r0
 801497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801497c:	1ad3      	subs	r3, r2, r3
 801497e:	2b64      	cmp	r3, #100	; 0x64
 8014980:	d901      	bls.n	8014986 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8014982:	2303      	movs	r3, #3
 8014984:	e33e      	b.n	8015004 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8014986:	4b63      	ldr	r3, [pc, #396]	; (8014b14 <HAL_RCC_OscConfig+0x2ac>)
 8014988:	681b      	ldr	r3, [r3, #0]
 801498a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801498e:	2b00      	cmp	r3, #0
 8014990:	d1f0      	bne.n	8014974 <HAL_RCC_OscConfig+0x10c>
 8014992:	e000      	b.n	8014996 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	f003 0302 	and.w	r3, r3, #2
 801499e:	2b00      	cmp	r3, #0
 80149a0:	f000 8092 	beq.w	8014ac8 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80149a4:	4b5b      	ldr	r3, [pc, #364]	; (8014b14 <HAL_RCC_OscConfig+0x2ac>)
 80149a6:	691b      	ldr	r3, [r3, #16]
 80149a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80149ac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80149ae:	4b59      	ldr	r3, [pc, #356]	; (8014b14 <HAL_RCC_OscConfig+0x2ac>)
 80149b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80149b2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80149b4:	6a3b      	ldr	r3, [r7, #32]
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d007      	beq.n	80149ca <HAL_RCC_OscConfig+0x162>
 80149ba:	6a3b      	ldr	r3, [r7, #32]
 80149bc:	2b18      	cmp	r3, #24
 80149be:	d12d      	bne.n	8014a1c <HAL_RCC_OscConfig+0x1b4>
 80149c0:	69fb      	ldr	r3, [r7, #28]
 80149c2:	f003 0303 	and.w	r3, r3, #3
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d128      	bne.n	8014a1c <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80149ca:	4b52      	ldr	r3, [pc, #328]	; (8014b14 <HAL_RCC_OscConfig+0x2ac>)
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	f003 0304 	and.w	r3, r3, #4
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d005      	beq.n	80149e2 <HAL_RCC_OscConfig+0x17a>
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	68db      	ldr	r3, [r3, #12]
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d101      	bne.n	80149e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80149de:	2301      	movs	r3, #1
 80149e0:	e310      	b.n	8015004 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80149e2:	f7fd ffc1 	bl	8012968 <HAL_GetREVID>
 80149e6:	4602      	mov	r2, r0
 80149e8:	f241 0303 	movw	r3, #4099	; 0x1003
 80149ec:	429a      	cmp	r2, r3
 80149ee:	d80a      	bhi.n	8014a06 <HAL_RCC_OscConfig+0x19e>
 80149f0:	4b48      	ldr	r3, [pc, #288]	; (8014b14 <HAL_RCC_OscConfig+0x2ac>)
 80149f2:	685b      	ldr	r3, [r3, #4]
 80149f4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	691b      	ldr	r3, [r3, #16]
 80149fc:	031b      	lsls	r3, r3, #12
 80149fe:	4945      	ldr	r1, [pc, #276]	; (8014b14 <HAL_RCC_OscConfig+0x2ac>)
 8014a00:	4313      	orrs	r3, r2
 8014a02:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8014a04:	e060      	b.n	8014ac8 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014a06:	4b43      	ldr	r3, [pc, #268]	; (8014b14 <HAL_RCC_OscConfig+0x2ac>)
 8014a08:	685b      	ldr	r3, [r3, #4]
 8014a0a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	691b      	ldr	r3, [r3, #16]
 8014a12:	061b      	lsls	r3, r3, #24
 8014a14:	493f      	ldr	r1, [pc, #252]	; (8014b14 <HAL_RCC_OscConfig+0x2ac>)
 8014a16:	4313      	orrs	r3, r2
 8014a18:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8014a1a:	e055      	b.n	8014ac8 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	68db      	ldr	r3, [r3, #12]
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d038      	beq.n	8014a96 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8014a24:	4b3b      	ldr	r3, [pc, #236]	; (8014b14 <HAL_RCC_OscConfig+0x2ac>)
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	f023 0219 	bic.w	r2, r3, #25
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	68db      	ldr	r3, [r3, #12]
 8014a30:	4938      	ldr	r1, [pc, #224]	; (8014b14 <HAL_RCC_OscConfig+0x2ac>)
 8014a32:	4313      	orrs	r3, r2
 8014a34:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014a36:	f7fd ff69 	bl	801290c <HAL_GetTick>
 8014a3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8014a3c:	e008      	b.n	8014a50 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8014a3e:	f7fd ff65 	bl	801290c <HAL_GetTick>
 8014a42:	4602      	mov	r2, r0
 8014a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a46:	1ad3      	subs	r3, r2, r3
 8014a48:	2b02      	cmp	r3, #2
 8014a4a:	d901      	bls.n	8014a50 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8014a4c:	2303      	movs	r3, #3
 8014a4e:	e2d9      	b.n	8015004 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8014a50:	4b30      	ldr	r3, [pc, #192]	; (8014b14 <HAL_RCC_OscConfig+0x2ac>)
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	f003 0304 	and.w	r3, r3, #4
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d0f0      	beq.n	8014a3e <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014a5c:	f7fd ff84 	bl	8012968 <HAL_GetREVID>
 8014a60:	4602      	mov	r2, r0
 8014a62:	f241 0303 	movw	r3, #4099	; 0x1003
 8014a66:	429a      	cmp	r2, r3
 8014a68:	d80a      	bhi.n	8014a80 <HAL_RCC_OscConfig+0x218>
 8014a6a:	4b2a      	ldr	r3, [pc, #168]	; (8014b14 <HAL_RCC_OscConfig+0x2ac>)
 8014a6c:	685b      	ldr	r3, [r3, #4]
 8014a6e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	691b      	ldr	r3, [r3, #16]
 8014a76:	031b      	lsls	r3, r3, #12
 8014a78:	4926      	ldr	r1, [pc, #152]	; (8014b14 <HAL_RCC_OscConfig+0x2ac>)
 8014a7a:	4313      	orrs	r3, r2
 8014a7c:	604b      	str	r3, [r1, #4]
 8014a7e:	e023      	b.n	8014ac8 <HAL_RCC_OscConfig+0x260>
 8014a80:	4b24      	ldr	r3, [pc, #144]	; (8014b14 <HAL_RCC_OscConfig+0x2ac>)
 8014a82:	685b      	ldr	r3, [r3, #4]
 8014a84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	691b      	ldr	r3, [r3, #16]
 8014a8c:	061b      	lsls	r3, r3, #24
 8014a8e:	4921      	ldr	r1, [pc, #132]	; (8014b14 <HAL_RCC_OscConfig+0x2ac>)
 8014a90:	4313      	orrs	r3, r2
 8014a92:	604b      	str	r3, [r1, #4]
 8014a94:	e018      	b.n	8014ac8 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8014a96:	4b1f      	ldr	r3, [pc, #124]	; (8014b14 <HAL_RCC_OscConfig+0x2ac>)
 8014a98:	681b      	ldr	r3, [r3, #0]
 8014a9a:	4a1e      	ldr	r2, [pc, #120]	; (8014b14 <HAL_RCC_OscConfig+0x2ac>)
 8014a9c:	f023 0301 	bic.w	r3, r3, #1
 8014aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014aa2:	f7fd ff33 	bl	801290c <HAL_GetTick>
 8014aa6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8014aa8:	e008      	b.n	8014abc <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8014aaa:	f7fd ff2f 	bl	801290c <HAL_GetTick>
 8014aae:	4602      	mov	r2, r0
 8014ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ab2:	1ad3      	subs	r3, r2, r3
 8014ab4:	2b02      	cmp	r3, #2
 8014ab6:	d901      	bls.n	8014abc <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8014ab8:	2303      	movs	r3, #3
 8014aba:	e2a3      	b.n	8015004 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8014abc:	4b15      	ldr	r3, [pc, #84]	; (8014b14 <HAL_RCC_OscConfig+0x2ac>)
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	f003 0304 	and.w	r3, r3, #4
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d1f0      	bne.n	8014aaa <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	f003 0310 	and.w	r3, r3, #16
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	f000 8091 	beq.w	8014bf8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014ad6:	4b0f      	ldr	r3, [pc, #60]	; (8014b14 <HAL_RCC_OscConfig+0x2ac>)
 8014ad8:	691b      	ldr	r3, [r3, #16]
 8014ada:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014ade:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8014ae0:	4b0c      	ldr	r3, [pc, #48]	; (8014b14 <HAL_RCC_OscConfig+0x2ac>)
 8014ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ae4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8014ae6:	69bb      	ldr	r3, [r7, #24]
 8014ae8:	2b08      	cmp	r3, #8
 8014aea:	d007      	beq.n	8014afc <HAL_RCC_OscConfig+0x294>
 8014aec:	69bb      	ldr	r3, [r7, #24]
 8014aee:	2b18      	cmp	r3, #24
 8014af0:	d12f      	bne.n	8014b52 <HAL_RCC_OscConfig+0x2ea>
 8014af2:	697b      	ldr	r3, [r7, #20]
 8014af4:	f003 0303 	and.w	r3, r3, #3
 8014af8:	2b01      	cmp	r3, #1
 8014afa:	d12a      	bne.n	8014b52 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8014afc:	4b05      	ldr	r3, [pc, #20]	; (8014b14 <HAL_RCC_OscConfig+0x2ac>)
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d007      	beq.n	8014b18 <HAL_RCC_OscConfig+0x2b0>
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	69db      	ldr	r3, [r3, #28]
 8014b0c:	2b80      	cmp	r3, #128	; 0x80
 8014b0e:	d003      	beq.n	8014b18 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8014b10:	2301      	movs	r3, #1
 8014b12:	e277      	b.n	8015004 <HAL_RCC_OscConfig+0x79c>
 8014b14:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8014b18:	f7fd ff26 	bl	8012968 <HAL_GetREVID>
 8014b1c:	4602      	mov	r2, r0
 8014b1e:	f241 0303 	movw	r3, #4099	; 0x1003
 8014b22:	429a      	cmp	r2, r3
 8014b24:	d80a      	bhi.n	8014b3c <HAL_RCC_OscConfig+0x2d4>
 8014b26:	4ba2      	ldr	r3, [pc, #648]	; (8014db0 <HAL_RCC_OscConfig+0x548>)
 8014b28:	685b      	ldr	r3, [r3, #4]
 8014b2a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	6a1b      	ldr	r3, [r3, #32]
 8014b32:	069b      	lsls	r3, r3, #26
 8014b34:	499e      	ldr	r1, [pc, #632]	; (8014db0 <HAL_RCC_OscConfig+0x548>)
 8014b36:	4313      	orrs	r3, r2
 8014b38:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8014b3a:	e05d      	b.n	8014bf8 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8014b3c:	4b9c      	ldr	r3, [pc, #624]	; (8014db0 <HAL_RCC_OscConfig+0x548>)
 8014b3e:	68db      	ldr	r3, [r3, #12]
 8014b40:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	6a1b      	ldr	r3, [r3, #32]
 8014b48:	061b      	lsls	r3, r3, #24
 8014b4a:	4999      	ldr	r1, [pc, #612]	; (8014db0 <HAL_RCC_OscConfig+0x548>)
 8014b4c:	4313      	orrs	r3, r2
 8014b4e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8014b50:	e052      	b.n	8014bf8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	69db      	ldr	r3, [r3, #28]
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d035      	beq.n	8014bc6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8014b5a:	4b95      	ldr	r3, [pc, #596]	; (8014db0 <HAL_RCC_OscConfig+0x548>)
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	4a94      	ldr	r2, [pc, #592]	; (8014db0 <HAL_RCC_OscConfig+0x548>)
 8014b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014b64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014b66:	f7fd fed1 	bl	801290c <HAL_GetTick>
 8014b6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8014b6c:	e008      	b.n	8014b80 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8014b6e:	f7fd fecd 	bl	801290c <HAL_GetTick>
 8014b72:	4602      	mov	r2, r0
 8014b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b76:	1ad3      	subs	r3, r2, r3
 8014b78:	2b02      	cmp	r3, #2
 8014b7a:	d901      	bls.n	8014b80 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8014b7c:	2303      	movs	r3, #3
 8014b7e:	e241      	b.n	8015004 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8014b80:	4b8b      	ldr	r3, [pc, #556]	; (8014db0 <HAL_RCC_OscConfig+0x548>)
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d0f0      	beq.n	8014b6e <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8014b8c:	f7fd feec 	bl	8012968 <HAL_GetREVID>
 8014b90:	4602      	mov	r2, r0
 8014b92:	f241 0303 	movw	r3, #4099	; 0x1003
 8014b96:	429a      	cmp	r2, r3
 8014b98:	d80a      	bhi.n	8014bb0 <HAL_RCC_OscConfig+0x348>
 8014b9a:	4b85      	ldr	r3, [pc, #532]	; (8014db0 <HAL_RCC_OscConfig+0x548>)
 8014b9c:	685b      	ldr	r3, [r3, #4]
 8014b9e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	6a1b      	ldr	r3, [r3, #32]
 8014ba6:	069b      	lsls	r3, r3, #26
 8014ba8:	4981      	ldr	r1, [pc, #516]	; (8014db0 <HAL_RCC_OscConfig+0x548>)
 8014baa:	4313      	orrs	r3, r2
 8014bac:	604b      	str	r3, [r1, #4]
 8014bae:	e023      	b.n	8014bf8 <HAL_RCC_OscConfig+0x390>
 8014bb0:	4b7f      	ldr	r3, [pc, #508]	; (8014db0 <HAL_RCC_OscConfig+0x548>)
 8014bb2:	68db      	ldr	r3, [r3, #12]
 8014bb4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	6a1b      	ldr	r3, [r3, #32]
 8014bbc:	061b      	lsls	r3, r3, #24
 8014bbe:	497c      	ldr	r1, [pc, #496]	; (8014db0 <HAL_RCC_OscConfig+0x548>)
 8014bc0:	4313      	orrs	r3, r2
 8014bc2:	60cb      	str	r3, [r1, #12]
 8014bc4:	e018      	b.n	8014bf8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8014bc6:	4b7a      	ldr	r3, [pc, #488]	; (8014db0 <HAL_RCC_OscConfig+0x548>)
 8014bc8:	681b      	ldr	r3, [r3, #0]
 8014bca:	4a79      	ldr	r2, [pc, #484]	; (8014db0 <HAL_RCC_OscConfig+0x548>)
 8014bcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014bd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014bd2:	f7fd fe9b 	bl	801290c <HAL_GetTick>
 8014bd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8014bd8:	e008      	b.n	8014bec <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8014bda:	f7fd fe97 	bl	801290c <HAL_GetTick>
 8014bde:	4602      	mov	r2, r0
 8014be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014be2:	1ad3      	subs	r3, r2, r3
 8014be4:	2b02      	cmp	r3, #2
 8014be6:	d901      	bls.n	8014bec <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8014be8:	2303      	movs	r3, #3
 8014bea:	e20b      	b.n	8015004 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8014bec:	4b70      	ldr	r3, [pc, #448]	; (8014db0 <HAL_RCC_OscConfig+0x548>)
 8014bee:	681b      	ldr	r3, [r3, #0]
 8014bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d1f0      	bne.n	8014bda <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	f003 0308 	and.w	r3, r3, #8
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d036      	beq.n	8014c72 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	695b      	ldr	r3, [r3, #20]
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d019      	beq.n	8014c40 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8014c0c:	4b68      	ldr	r3, [pc, #416]	; (8014db0 <HAL_RCC_OscConfig+0x548>)
 8014c0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014c10:	4a67      	ldr	r2, [pc, #412]	; (8014db0 <HAL_RCC_OscConfig+0x548>)
 8014c12:	f043 0301 	orr.w	r3, r3, #1
 8014c16:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014c18:	f7fd fe78 	bl	801290c <HAL_GetTick>
 8014c1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8014c1e:	e008      	b.n	8014c32 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8014c20:	f7fd fe74 	bl	801290c <HAL_GetTick>
 8014c24:	4602      	mov	r2, r0
 8014c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c28:	1ad3      	subs	r3, r2, r3
 8014c2a:	2b02      	cmp	r3, #2
 8014c2c:	d901      	bls.n	8014c32 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8014c2e:	2303      	movs	r3, #3
 8014c30:	e1e8      	b.n	8015004 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8014c32:	4b5f      	ldr	r3, [pc, #380]	; (8014db0 <HAL_RCC_OscConfig+0x548>)
 8014c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014c36:	f003 0302 	and.w	r3, r3, #2
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d0f0      	beq.n	8014c20 <HAL_RCC_OscConfig+0x3b8>
 8014c3e:	e018      	b.n	8014c72 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8014c40:	4b5b      	ldr	r3, [pc, #364]	; (8014db0 <HAL_RCC_OscConfig+0x548>)
 8014c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014c44:	4a5a      	ldr	r2, [pc, #360]	; (8014db0 <HAL_RCC_OscConfig+0x548>)
 8014c46:	f023 0301 	bic.w	r3, r3, #1
 8014c4a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014c4c:	f7fd fe5e 	bl	801290c <HAL_GetTick>
 8014c50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8014c52:	e008      	b.n	8014c66 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8014c54:	f7fd fe5a 	bl	801290c <HAL_GetTick>
 8014c58:	4602      	mov	r2, r0
 8014c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c5c:	1ad3      	subs	r3, r2, r3
 8014c5e:	2b02      	cmp	r3, #2
 8014c60:	d901      	bls.n	8014c66 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8014c62:	2303      	movs	r3, #3
 8014c64:	e1ce      	b.n	8015004 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8014c66:	4b52      	ldr	r3, [pc, #328]	; (8014db0 <HAL_RCC_OscConfig+0x548>)
 8014c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014c6a:	f003 0302 	and.w	r3, r3, #2
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d1f0      	bne.n	8014c54 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	f003 0320 	and.w	r3, r3, #32
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d036      	beq.n	8014cec <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	699b      	ldr	r3, [r3, #24]
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d019      	beq.n	8014cba <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8014c86:	4b4a      	ldr	r3, [pc, #296]	; (8014db0 <HAL_RCC_OscConfig+0x548>)
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	4a49      	ldr	r2, [pc, #292]	; (8014db0 <HAL_RCC_OscConfig+0x548>)
 8014c8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8014c90:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8014c92:	f7fd fe3b 	bl	801290c <HAL_GetTick>
 8014c96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8014c98:	e008      	b.n	8014cac <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8014c9a:	f7fd fe37 	bl	801290c <HAL_GetTick>
 8014c9e:	4602      	mov	r2, r0
 8014ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ca2:	1ad3      	subs	r3, r2, r3
 8014ca4:	2b02      	cmp	r3, #2
 8014ca6:	d901      	bls.n	8014cac <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8014ca8:	2303      	movs	r3, #3
 8014caa:	e1ab      	b.n	8015004 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8014cac:	4b40      	ldr	r3, [pc, #256]	; (8014db0 <HAL_RCC_OscConfig+0x548>)
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d0f0      	beq.n	8014c9a <HAL_RCC_OscConfig+0x432>
 8014cb8:	e018      	b.n	8014cec <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8014cba:	4b3d      	ldr	r3, [pc, #244]	; (8014db0 <HAL_RCC_OscConfig+0x548>)
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	4a3c      	ldr	r2, [pc, #240]	; (8014db0 <HAL_RCC_OscConfig+0x548>)
 8014cc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014cc4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8014cc6:	f7fd fe21 	bl	801290c <HAL_GetTick>
 8014cca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8014ccc:	e008      	b.n	8014ce0 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8014cce:	f7fd fe1d 	bl	801290c <HAL_GetTick>
 8014cd2:	4602      	mov	r2, r0
 8014cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cd6:	1ad3      	subs	r3, r2, r3
 8014cd8:	2b02      	cmp	r3, #2
 8014cda:	d901      	bls.n	8014ce0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8014cdc:	2303      	movs	r3, #3
 8014cde:	e191      	b.n	8015004 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8014ce0:	4b33      	ldr	r3, [pc, #204]	; (8014db0 <HAL_RCC_OscConfig+0x548>)
 8014ce2:	681b      	ldr	r3, [r3, #0]
 8014ce4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d1f0      	bne.n	8014cce <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	f003 0304 	and.w	r3, r3, #4
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	f000 8086 	beq.w	8014e06 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8014cfa:	4b2e      	ldr	r3, [pc, #184]	; (8014db4 <HAL_RCC_OscConfig+0x54c>)
 8014cfc:	681b      	ldr	r3, [r3, #0]
 8014cfe:	4a2d      	ldr	r2, [pc, #180]	; (8014db4 <HAL_RCC_OscConfig+0x54c>)
 8014d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014d04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8014d06:	f7fd fe01 	bl	801290c <HAL_GetTick>
 8014d0a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8014d0c:	e008      	b.n	8014d20 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8014d0e:	f7fd fdfd 	bl	801290c <HAL_GetTick>
 8014d12:	4602      	mov	r2, r0
 8014d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d16:	1ad3      	subs	r3, r2, r3
 8014d18:	2b64      	cmp	r3, #100	; 0x64
 8014d1a:	d901      	bls.n	8014d20 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8014d1c:	2303      	movs	r3, #3
 8014d1e:	e171      	b.n	8015004 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8014d20:	4b24      	ldr	r3, [pc, #144]	; (8014db4 <HAL_RCC_OscConfig+0x54c>)
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d0f0      	beq.n	8014d0e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	689b      	ldr	r3, [r3, #8]
 8014d30:	2b01      	cmp	r3, #1
 8014d32:	d106      	bne.n	8014d42 <HAL_RCC_OscConfig+0x4da>
 8014d34:	4b1e      	ldr	r3, [pc, #120]	; (8014db0 <HAL_RCC_OscConfig+0x548>)
 8014d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014d38:	4a1d      	ldr	r2, [pc, #116]	; (8014db0 <HAL_RCC_OscConfig+0x548>)
 8014d3a:	f043 0301 	orr.w	r3, r3, #1
 8014d3e:	6713      	str	r3, [r2, #112]	; 0x70
 8014d40:	e02d      	b.n	8014d9e <HAL_RCC_OscConfig+0x536>
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	689b      	ldr	r3, [r3, #8]
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d10c      	bne.n	8014d64 <HAL_RCC_OscConfig+0x4fc>
 8014d4a:	4b19      	ldr	r3, [pc, #100]	; (8014db0 <HAL_RCC_OscConfig+0x548>)
 8014d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014d4e:	4a18      	ldr	r2, [pc, #96]	; (8014db0 <HAL_RCC_OscConfig+0x548>)
 8014d50:	f023 0301 	bic.w	r3, r3, #1
 8014d54:	6713      	str	r3, [r2, #112]	; 0x70
 8014d56:	4b16      	ldr	r3, [pc, #88]	; (8014db0 <HAL_RCC_OscConfig+0x548>)
 8014d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014d5a:	4a15      	ldr	r2, [pc, #84]	; (8014db0 <HAL_RCC_OscConfig+0x548>)
 8014d5c:	f023 0304 	bic.w	r3, r3, #4
 8014d60:	6713      	str	r3, [r2, #112]	; 0x70
 8014d62:	e01c      	b.n	8014d9e <HAL_RCC_OscConfig+0x536>
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	689b      	ldr	r3, [r3, #8]
 8014d68:	2b05      	cmp	r3, #5
 8014d6a:	d10c      	bne.n	8014d86 <HAL_RCC_OscConfig+0x51e>
 8014d6c:	4b10      	ldr	r3, [pc, #64]	; (8014db0 <HAL_RCC_OscConfig+0x548>)
 8014d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014d70:	4a0f      	ldr	r2, [pc, #60]	; (8014db0 <HAL_RCC_OscConfig+0x548>)
 8014d72:	f043 0304 	orr.w	r3, r3, #4
 8014d76:	6713      	str	r3, [r2, #112]	; 0x70
 8014d78:	4b0d      	ldr	r3, [pc, #52]	; (8014db0 <HAL_RCC_OscConfig+0x548>)
 8014d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014d7c:	4a0c      	ldr	r2, [pc, #48]	; (8014db0 <HAL_RCC_OscConfig+0x548>)
 8014d7e:	f043 0301 	orr.w	r3, r3, #1
 8014d82:	6713      	str	r3, [r2, #112]	; 0x70
 8014d84:	e00b      	b.n	8014d9e <HAL_RCC_OscConfig+0x536>
 8014d86:	4b0a      	ldr	r3, [pc, #40]	; (8014db0 <HAL_RCC_OscConfig+0x548>)
 8014d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014d8a:	4a09      	ldr	r2, [pc, #36]	; (8014db0 <HAL_RCC_OscConfig+0x548>)
 8014d8c:	f023 0301 	bic.w	r3, r3, #1
 8014d90:	6713      	str	r3, [r2, #112]	; 0x70
 8014d92:	4b07      	ldr	r3, [pc, #28]	; (8014db0 <HAL_RCC_OscConfig+0x548>)
 8014d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014d96:	4a06      	ldr	r2, [pc, #24]	; (8014db0 <HAL_RCC_OscConfig+0x548>)
 8014d98:	f023 0304 	bic.w	r3, r3, #4
 8014d9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	689b      	ldr	r3, [r3, #8]
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d01a      	beq.n	8014ddc <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014da6:	f7fd fdb1 	bl	801290c <HAL_GetTick>
 8014daa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8014dac:	e00f      	b.n	8014dce <HAL_RCC_OscConfig+0x566>
 8014dae:	bf00      	nop
 8014db0:	58024400 	.word	0x58024400
 8014db4:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8014db8:	f7fd fda8 	bl	801290c <HAL_GetTick>
 8014dbc:	4602      	mov	r2, r0
 8014dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dc0:	1ad3      	subs	r3, r2, r3
 8014dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8014dc6:	4293      	cmp	r3, r2
 8014dc8:	d901      	bls.n	8014dce <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8014dca:	2303      	movs	r3, #3
 8014dcc:	e11a      	b.n	8015004 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8014dce:	4b8f      	ldr	r3, [pc, #572]	; (801500c <HAL_RCC_OscConfig+0x7a4>)
 8014dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014dd2:	f003 0302 	and.w	r3, r3, #2
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d0ee      	beq.n	8014db8 <HAL_RCC_OscConfig+0x550>
 8014dda:	e014      	b.n	8014e06 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014ddc:	f7fd fd96 	bl	801290c <HAL_GetTick>
 8014de0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8014de2:	e00a      	b.n	8014dfa <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8014de4:	f7fd fd92 	bl	801290c <HAL_GetTick>
 8014de8:	4602      	mov	r2, r0
 8014dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dec:	1ad3      	subs	r3, r2, r3
 8014dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8014df2:	4293      	cmp	r3, r2
 8014df4:	d901      	bls.n	8014dfa <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8014df6:	2303      	movs	r3, #3
 8014df8:	e104      	b.n	8015004 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8014dfa:	4b84      	ldr	r3, [pc, #528]	; (801500c <HAL_RCC_OscConfig+0x7a4>)
 8014dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014dfe:	f003 0302 	and.w	r3, r3, #2
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d1ee      	bne.n	8014de4 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	f000 80f9 	beq.w	8015002 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8014e10:	4b7e      	ldr	r3, [pc, #504]	; (801500c <HAL_RCC_OscConfig+0x7a4>)
 8014e12:	691b      	ldr	r3, [r3, #16]
 8014e14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014e18:	2b18      	cmp	r3, #24
 8014e1a:	f000 80b4 	beq.w	8014f86 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e22:	2b02      	cmp	r3, #2
 8014e24:	f040 8095 	bne.w	8014f52 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014e28:	4b78      	ldr	r3, [pc, #480]	; (801500c <HAL_RCC_OscConfig+0x7a4>)
 8014e2a:	681b      	ldr	r3, [r3, #0]
 8014e2c:	4a77      	ldr	r2, [pc, #476]	; (801500c <HAL_RCC_OscConfig+0x7a4>)
 8014e2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8014e32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014e34:	f7fd fd6a 	bl	801290c <HAL_GetTick>
 8014e38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8014e3a:	e008      	b.n	8014e4e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014e3c:	f7fd fd66 	bl	801290c <HAL_GetTick>
 8014e40:	4602      	mov	r2, r0
 8014e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e44:	1ad3      	subs	r3, r2, r3
 8014e46:	2b02      	cmp	r3, #2
 8014e48:	d901      	bls.n	8014e4e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8014e4a:	2303      	movs	r3, #3
 8014e4c:	e0da      	b.n	8015004 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8014e4e:	4b6f      	ldr	r3, [pc, #444]	; (801500c <HAL_RCC_OscConfig+0x7a4>)
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d1f0      	bne.n	8014e3c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8014e5a:	4b6c      	ldr	r3, [pc, #432]	; (801500c <HAL_RCC_OscConfig+0x7a4>)
 8014e5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014e5e:	4b6c      	ldr	r3, [pc, #432]	; (8015010 <HAL_RCC_OscConfig+0x7a8>)
 8014e60:	4013      	ands	r3, r2
 8014e62:	687a      	ldr	r2, [r7, #4]
 8014e64:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8014e66:	687a      	ldr	r2, [r7, #4]
 8014e68:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8014e6a:	0112      	lsls	r2, r2, #4
 8014e6c:	430a      	orrs	r2, r1
 8014e6e:	4967      	ldr	r1, [pc, #412]	; (801500c <HAL_RCC_OscConfig+0x7a4>)
 8014e70:	4313      	orrs	r3, r2
 8014e72:	628b      	str	r3, [r1, #40]	; 0x28
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e78:	3b01      	subs	r3, #1
 8014e7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014e82:	3b01      	subs	r3, #1
 8014e84:	025b      	lsls	r3, r3, #9
 8014e86:	b29b      	uxth	r3, r3
 8014e88:	431a      	orrs	r2, r3
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e8e:	3b01      	subs	r3, #1
 8014e90:	041b      	lsls	r3, r3, #16
 8014e92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8014e96:	431a      	orrs	r2, r3
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014e9c:	3b01      	subs	r3, #1
 8014e9e:	061b      	lsls	r3, r3, #24
 8014ea0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8014ea4:	4959      	ldr	r1, [pc, #356]	; (801500c <HAL_RCC_OscConfig+0x7a4>)
 8014ea6:	4313      	orrs	r3, r2
 8014ea8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8014eaa:	4b58      	ldr	r3, [pc, #352]	; (801500c <HAL_RCC_OscConfig+0x7a4>)
 8014eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014eae:	4a57      	ldr	r2, [pc, #348]	; (801500c <HAL_RCC_OscConfig+0x7a4>)
 8014eb0:	f023 0301 	bic.w	r3, r3, #1
 8014eb4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8014eb6:	4b55      	ldr	r3, [pc, #340]	; (801500c <HAL_RCC_OscConfig+0x7a4>)
 8014eb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014eba:	4b56      	ldr	r3, [pc, #344]	; (8015014 <HAL_RCC_OscConfig+0x7ac>)
 8014ebc:	4013      	ands	r3, r2
 8014ebe:	687a      	ldr	r2, [r7, #4]
 8014ec0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8014ec2:	00d2      	lsls	r2, r2, #3
 8014ec4:	4951      	ldr	r1, [pc, #324]	; (801500c <HAL_RCC_OscConfig+0x7a4>)
 8014ec6:	4313      	orrs	r3, r2
 8014ec8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8014eca:	4b50      	ldr	r3, [pc, #320]	; (801500c <HAL_RCC_OscConfig+0x7a4>)
 8014ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ece:	f023 020c 	bic.w	r2, r3, #12
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014ed6:	494d      	ldr	r1, [pc, #308]	; (801500c <HAL_RCC_OscConfig+0x7a4>)
 8014ed8:	4313      	orrs	r3, r2
 8014eda:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8014edc:	4b4b      	ldr	r3, [pc, #300]	; (801500c <HAL_RCC_OscConfig+0x7a4>)
 8014ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ee0:	f023 0202 	bic.w	r2, r3, #2
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014ee8:	4948      	ldr	r1, [pc, #288]	; (801500c <HAL_RCC_OscConfig+0x7a4>)
 8014eea:	4313      	orrs	r3, r2
 8014eec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8014eee:	4b47      	ldr	r3, [pc, #284]	; (801500c <HAL_RCC_OscConfig+0x7a4>)
 8014ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ef2:	4a46      	ldr	r2, [pc, #280]	; (801500c <HAL_RCC_OscConfig+0x7a4>)
 8014ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014ef8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014efa:	4b44      	ldr	r3, [pc, #272]	; (801500c <HAL_RCC_OscConfig+0x7a4>)
 8014efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014efe:	4a43      	ldr	r2, [pc, #268]	; (801500c <HAL_RCC_OscConfig+0x7a4>)
 8014f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014f04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8014f06:	4b41      	ldr	r3, [pc, #260]	; (801500c <HAL_RCC_OscConfig+0x7a4>)
 8014f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f0a:	4a40      	ldr	r2, [pc, #256]	; (801500c <HAL_RCC_OscConfig+0x7a4>)
 8014f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8014f10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8014f12:	4b3e      	ldr	r3, [pc, #248]	; (801500c <HAL_RCC_OscConfig+0x7a4>)
 8014f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f16:	4a3d      	ldr	r2, [pc, #244]	; (801500c <HAL_RCC_OscConfig+0x7a4>)
 8014f18:	f043 0301 	orr.w	r3, r3, #1
 8014f1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8014f1e:	4b3b      	ldr	r3, [pc, #236]	; (801500c <HAL_RCC_OscConfig+0x7a4>)
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	4a3a      	ldr	r2, [pc, #232]	; (801500c <HAL_RCC_OscConfig+0x7a4>)
 8014f24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014f28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014f2a:	f7fd fcef 	bl	801290c <HAL_GetTick>
 8014f2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8014f30:	e008      	b.n	8014f44 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014f32:	f7fd fceb 	bl	801290c <HAL_GetTick>
 8014f36:	4602      	mov	r2, r0
 8014f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f3a:	1ad3      	subs	r3, r2, r3
 8014f3c:	2b02      	cmp	r3, #2
 8014f3e:	d901      	bls.n	8014f44 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8014f40:	2303      	movs	r3, #3
 8014f42:	e05f      	b.n	8015004 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8014f44:	4b31      	ldr	r3, [pc, #196]	; (801500c <HAL_RCC_OscConfig+0x7a4>)
 8014f46:	681b      	ldr	r3, [r3, #0]
 8014f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d0f0      	beq.n	8014f32 <HAL_RCC_OscConfig+0x6ca>
 8014f50:	e057      	b.n	8015002 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014f52:	4b2e      	ldr	r3, [pc, #184]	; (801500c <HAL_RCC_OscConfig+0x7a4>)
 8014f54:	681b      	ldr	r3, [r3, #0]
 8014f56:	4a2d      	ldr	r2, [pc, #180]	; (801500c <HAL_RCC_OscConfig+0x7a4>)
 8014f58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8014f5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014f5e:	f7fd fcd5 	bl	801290c <HAL_GetTick>
 8014f62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8014f64:	e008      	b.n	8014f78 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014f66:	f7fd fcd1 	bl	801290c <HAL_GetTick>
 8014f6a:	4602      	mov	r2, r0
 8014f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f6e:	1ad3      	subs	r3, r2, r3
 8014f70:	2b02      	cmp	r3, #2
 8014f72:	d901      	bls.n	8014f78 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8014f74:	2303      	movs	r3, #3
 8014f76:	e045      	b.n	8015004 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8014f78:	4b24      	ldr	r3, [pc, #144]	; (801500c <HAL_RCC_OscConfig+0x7a4>)
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d1f0      	bne.n	8014f66 <HAL_RCC_OscConfig+0x6fe>
 8014f84:	e03d      	b.n	8015002 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8014f86:	4b21      	ldr	r3, [pc, #132]	; (801500c <HAL_RCC_OscConfig+0x7a4>)
 8014f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f8a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8014f8c:	4b1f      	ldr	r3, [pc, #124]	; (801500c <HAL_RCC_OscConfig+0x7a4>)
 8014f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f90:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f96:	2b01      	cmp	r3, #1
 8014f98:	d031      	beq.n	8014ffe <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014f9a:	693b      	ldr	r3, [r7, #16]
 8014f9c:	f003 0203 	and.w	r2, r3, #3
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8014fa4:	429a      	cmp	r2, r3
 8014fa6:	d12a      	bne.n	8014ffe <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8014fa8:	693b      	ldr	r3, [r7, #16]
 8014faa:	091b      	lsrs	r3, r3, #4
 8014fac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014fb4:	429a      	cmp	r2, r3
 8014fb6:	d122      	bne.n	8014ffe <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fc2:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8014fc4:	429a      	cmp	r2, r3
 8014fc6:	d11a      	bne.n	8014ffe <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	0a5b      	lsrs	r3, r3, #9
 8014fcc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014fd4:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8014fd6:	429a      	cmp	r2, r3
 8014fd8:	d111      	bne.n	8014ffe <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	0c1b      	lsrs	r3, r3, #16
 8014fde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014fe6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8014fe8:	429a      	cmp	r2, r3
 8014fea:	d108      	bne.n	8014ffe <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	0e1b      	lsrs	r3, r3, #24
 8014ff0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014ff8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8014ffa:	429a      	cmp	r2, r3
 8014ffc:	d001      	beq.n	8015002 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8014ffe:	2301      	movs	r3, #1
 8015000:	e000      	b.n	8015004 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8015002:	2300      	movs	r3, #0
}
 8015004:	4618      	mov	r0, r3
 8015006:	3730      	adds	r7, #48	; 0x30
 8015008:	46bd      	mov	sp, r7
 801500a:	bd80      	pop	{r7, pc}
 801500c:	58024400 	.word	0x58024400
 8015010:	fffffc0c 	.word	0xfffffc0c
 8015014:	ffff0007 	.word	0xffff0007

08015018 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8015018:	b580      	push	{r7, lr}
 801501a:	b086      	sub	sp, #24
 801501c:	af00      	add	r7, sp, #0
 801501e:	6078      	str	r0, [r7, #4]
 8015020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	2b00      	cmp	r3, #0
 8015026:	d101      	bne.n	801502c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8015028:	2301      	movs	r3, #1
 801502a:	e19c      	b.n	8015366 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801502c:	4b8a      	ldr	r3, [pc, #552]	; (8015258 <HAL_RCC_ClockConfig+0x240>)
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	f003 030f 	and.w	r3, r3, #15
 8015034:	683a      	ldr	r2, [r7, #0]
 8015036:	429a      	cmp	r2, r3
 8015038:	d910      	bls.n	801505c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801503a:	4b87      	ldr	r3, [pc, #540]	; (8015258 <HAL_RCC_ClockConfig+0x240>)
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	f023 020f 	bic.w	r2, r3, #15
 8015042:	4985      	ldr	r1, [pc, #532]	; (8015258 <HAL_RCC_ClockConfig+0x240>)
 8015044:	683b      	ldr	r3, [r7, #0]
 8015046:	4313      	orrs	r3, r2
 8015048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801504a:	4b83      	ldr	r3, [pc, #524]	; (8015258 <HAL_RCC_ClockConfig+0x240>)
 801504c:	681b      	ldr	r3, [r3, #0]
 801504e:	f003 030f 	and.w	r3, r3, #15
 8015052:	683a      	ldr	r2, [r7, #0]
 8015054:	429a      	cmp	r2, r3
 8015056:	d001      	beq.n	801505c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8015058:	2301      	movs	r3, #1
 801505a:	e184      	b.n	8015366 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	f003 0304 	and.w	r3, r3, #4
 8015064:	2b00      	cmp	r3, #0
 8015066:	d010      	beq.n	801508a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	691a      	ldr	r2, [r3, #16]
 801506c:	4b7b      	ldr	r3, [pc, #492]	; (801525c <HAL_RCC_ClockConfig+0x244>)
 801506e:	699b      	ldr	r3, [r3, #24]
 8015070:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8015074:	429a      	cmp	r2, r3
 8015076:	d908      	bls.n	801508a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8015078:	4b78      	ldr	r3, [pc, #480]	; (801525c <HAL_RCC_ClockConfig+0x244>)
 801507a:	699b      	ldr	r3, [r3, #24]
 801507c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	691b      	ldr	r3, [r3, #16]
 8015084:	4975      	ldr	r1, [pc, #468]	; (801525c <HAL_RCC_ClockConfig+0x244>)
 8015086:	4313      	orrs	r3, r2
 8015088:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	f003 0308 	and.w	r3, r3, #8
 8015092:	2b00      	cmp	r3, #0
 8015094:	d010      	beq.n	80150b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	695a      	ldr	r2, [r3, #20]
 801509a:	4b70      	ldr	r3, [pc, #448]	; (801525c <HAL_RCC_ClockConfig+0x244>)
 801509c:	69db      	ldr	r3, [r3, #28]
 801509e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80150a2:	429a      	cmp	r2, r3
 80150a4:	d908      	bls.n	80150b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80150a6:	4b6d      	ldr	r3, [pc, #436]	; (801525c <HAL_RCC_ClockConfig+0x244>)
 80150a8:	69db      	ldr	r3, [r3, #28]
 80150aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	695b      	ldr	r3, [r3, #20]
 80150b2:	496a      	ldr	r1, [pc, #424]	; (801525c <HAL_RCC_ClockConfig+0x244>)
 80150b4:	4313      	orrs	r3, r2
 80150b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	f003 0310 	and.w	r3, r3, #16
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d010      	beq.n	80150e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	699a      	ldr	r2, [r3, #24]
 80150c8:	4b64      	ldr	r3, [pc, #400]	; (801525c <HAL_RCC_ClockConfig+0x244>)
 80150ca:	69db      	ldr	r3, [r3, #28]
 80150cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80150d0:	429a      	cmp	r2, r3
 80150d2:	d908      	bls.n	80150e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80150d4:	4b61      	ldr	r3, [pc, #388]	; (801525c <HAL_RCC_ClockConfig+0x244>)
 80150d6:	69db      	ldr	r3, [r3, #28]
 80150d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	699b      	ldr	r3, [r3, #24]
 80150e0:	495e      	ldr	r1, [pc, #376]	; (801525c <HAL_RCC_ClockConfig+0x244>)
 80150e2:	4313      	orrs	r3, r2
 80150e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	681b      	ldr	r3, [r3, #0]
 80150ea:	f003 0320 	and.w	r3, r3, #32
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d010      	beq.n	8015114 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	69da      	ldr	r2, [r3, #28]
 80150f6:	4b59      	ldr	r3, [pc, #356]	; (801525c <HAL_RCC_ClockConfig+0x244>)
 80150f8:	6a1b      	ldr	r3, [r3, #32]
 80150fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80150fe:	429a      	cmp	r2, r3
 8015100:	d908      	bls.n	8015114 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8015102:	4b56      	ldr	r3, [pc, #344]	; (801525c <HAL_RCC_ClockConfig+0x244>)
 8015104:	6a1b      	ldr	r3, [r3, #32]
 8015106:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	69db      	ldr	r3, [r3, #28]
 801510e:	4953      	ldr	r1, [pc, #332]	; (801525c <HAL_RCC_ClockConfig+0x244>)
 8015110:	4313      	orrs	r3, r2
 8015112:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	f003 0302 	and.w	r3, r3, #2
 801511c:	2b00      	cmp	r3, #0
 801511e:	d010      	beq.n	8015142 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	68da      	ldr	r2, [r3, #12]
 8015124:	4b4d      	ldr	r3, [pc, #308]	; (801525c <HAL_RCC_ClockConfig+0x244>)
 8015126:	699b      	ldr	r3, [r3, #24]
 8015128:	f003 030f 	and.w	r3, r3, #15
 801512c:	429a      	cmp	r2, r3
 801512e:	d908      	bls.n	8015142 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8015130:	4b4a      	ldr	r3, [pc, #296]	; (801525c <HAL_RCC_ClockConfig+0x244>)
 8015132:	699b      	ldr	r3, [r3, #24]
 8015134:	f023 020f 	bic.w	r2, r3, #15
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	68db      	ldr	r3, [r3, #12]
 801513c:	4947      	ldr	r1, [pc, #284]	; (801525c <HAL_RCC_ClockConfig+0x244>)
 801513e:	4313      	orrs	r3, r2
 8015140:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	681b      	ldr	r3, [r3, #0]
 8015146:	f003 0301 	and.w	r3, r3, #1
 801514a:	2b00      	cmp	r3, #0
 801514c:	d055      	beq.n	80151fa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801514e:	4b43      	ldr	r3, [pc, #268]	; (801525c <HAL_RCC_ClockConfig+0x244>)
 8015150:	699b      	ldr	r3, [r3, #24]
 8015152:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	689b      	ldr	r3, [r3, #8]
 801515a:	4940      	ldr	r1, [pc, #256]	; (801525c <HAL_RCC_ClockConfig+0x244>)
 801515c:	4313      	orrs	r3, r2
 801515e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	685b      	ldr	r3, [r3, #4]
 8015164:	2b02      	cmp	r3, #2
 8015166:	d107      	bne.n	8015178 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8015168:	4b3c      	ldr	r3, [pc, #240]	; (801525c <HAL_RCC_ClockConfig+0x244>)
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015170:	2b00      	cmp	r3, #0
 8015172:	d121      	bne.n	80151b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8015174:	2301      	movs	r3, #1
 8015176:	e0f6      	b.n	8015366 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	685b      	ldr	r3, [r3, #4]
 801517c:	2b03      	cmp	r3, #3
 801517e:	d107      	bne.n	8015190 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8015180:	4b36      	ldr	r3, [pc, #216]	; (801525c <HAL_RCC_ClockConfig+0x244>)
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015188:	2b00      	cmp	r3, #0
 801518a:	d115      	bne.n	80151b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 801518c:	2301      	movs	r3, #1
 801518e:	e0ea      	b.n	8015366 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	685b      	ldr	r3, [r3, #4]
 8015194:	2b01      	cmp	r3, #1
 8015196:	d107      	bne.n	80151a8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8015198:	4b30      	ldr	r3, [pc, #192]	; (801525c <HAL_RCC_ClockConfig+0x244>)
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d109      	bne.n	80151b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80151a4:	2301      	movs	r3, #1
 80151a6:	e0de      	b.n	8015366 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80151a8:	4b2c      	ldr	r3, [pc, #176]	; (801525c <HAL_RCC_ClockConfig+0x244>)
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	f003 0304 	and.w	r3, r3, #4
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d101      	bne.n	80151b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80151b4:	2301      	movs	r3, #1
 80151b6:	e0d6      	b.n	8015366 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80151b8:	4b28      	ldr	r3, [pc, #160]	; (801525c <HAL_RCC_ClockConfig+0x244>)
 80151ba:	691b      	ldr	r3, [r3, #16]
 80151bc:	f023 0207 	bic.w	r2, r3, #7
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	685b      	ldr	r3, [r3, #4]
 80151c4:	4925      	ldr	r1, [pc, #148]	; (801525c <HAL_RCC_ClockConfig+0x244>)
 80151c6:	4313      	orrs	r3, r2
 80151c8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80151ca:	f7fd fb9f 	bl	801290c <HAL_GetTick>
 80151ce:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80151d0:	e00a      	b.n	80151e8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80151d2:	f7fd fb9b 	bl	801290c <HAL_GetTick>
 80151d6:	4602      	mov	r2, r0
 80151d8:	697b      	ldr	r3, [r7, #20]
 80151da:	1ad3      	subs	r3, r2, r3
 80151dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80151e0:	4293      	cmp	r3, r2
 80151e2:	d901      	bls.n	80151e8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80151e4:	2303      	movs	r3, #3
 80151e6:	e0be      	b.n	8015366 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80151e8:	4b1c      	ldr	r3, [pc, #112]	; (801525c <HAL_RCC_ClockConfig+0x244>)
 80151ea:	691b      	ldr	r3, [r3, #16]
 80151ec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	685b      	ldr	r3, [r3, #4]
 80151f4:	00db      	lsls	r3, r3, #3
 80151f6:	429a      	cmp	r2, r3
 80151f8:	d1eb      	bne.n	80151d2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	f003 0302 	and.w	r3, r3, #2
 8015202:	2b00      	cmp	r3, #0
 8015204:	d010      	beq.n	8015228 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	68da      	ldr	r2, [r3, #12]
 801520a:	4b14      	ldr	r3, [pc, #80]	; (801525c <HAL_RCC_ClockConfig+0x244>)
 801520c:	699b      	ldr	r3, [r3, #24]
 801520e:	f003 030f 	and.w	r3, r3, #15
 8015212:	429a      	cmp	r2, r3
 8015214:	d208      	bcs.n	8015228 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8015216:	4b11      	ldr	r3, [pc, #68]	; (801525c <HAL_RCC_ClockConfig+0x244>)
 8015218:	699b      	ldr	r3, [r3, #24]
 801521a:	f023 020f 	bic.w	r2, r3, #15
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	68db      	ldr	r3, [r3, #12]
 8015222:	490e      	ldr	r1, [pc, #56]	; (801525c <HAL_RCC_ClockConfig+0x244>)
 8015224:	4313      	orrs	r3, r2
 8015226:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8015228:	4b0b      	ldr	r3, [pc, #44]	; (8015258 <HAL_RCC_ClockConfig+0x240>)
 801522a:	681b      	ldr	r3, [r3, #0]
 801522c:	f003 030f 	and.w	r3, r3, #15
 8015230:	683a      	ldr	r2, [r7, #0]
 8015232:	429a      	cmp	r2, r3
 8015234:	d214      	bcs.n	8015260 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8015236:	4b08      	ldr	r3, [pc, #32]	; (8015258 <HAL_RCC_ClockConfig+0x240>)
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	f023 020f 	bic.w	r2, r3, #15
 801523e:	4906      	ldr	r1, [pc, #24]	; (8015258 <HAL_RCC_ClockConfig+0x240>)
 8015240:	683b      	ldr	r3, [r7, #0]
 8015242:	4313      	orrs	r3, r2
 8015244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8015246:	4b04      	ldr	r3, [pc, #16]	; (8015258 <HAL_RCC_ClockConfig+0x240>)
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	f003 030f 	and.w	r3, r3, #15
 801524e:	683a      	ldr	r2, [r7, #0]
 8015250:	429a      	cmp	r2, r3
 8015252:	d005      	beq.n	8015260 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8015254:	2301      	movs	r3, #1
 8015256:	e086      	b.n	8015366 <HAL_RCC_ClockConfig+0x34e>
 8015258:	52002000 	.word	0x52002000
 801525c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	681b      	ldr	r3, [r3, #0]
 8015264:	f003 0304 	and.w	r3, r3, #4
 8015268:	2b00      	cmp	r3, #0
 801526a:	d010      	beq.n	801528e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	691a      	ldr	r2, [r3, #16]
 8015270:	4b3f      	ldr	r3, [pc, #252]	; (8015370 <HAL_RCC_ClockConfig+0x358>)
 8015272:	699b      	ldr	r3, [r3, #24]
 8015274:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8015278:	429a      	cmp	r2, r3
 801527a:	d208      	bcs.n	801528e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801527c:	4b3c      	ldr	r3, [pc, #240]	; (8015370 <HAL_RCC_ClockConfig+0x358>)
 801527e:	699b      	ldr	r3, [r3, #24]
 8015280:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	691b      	ldr	r3, [r3, #16]
 8015288:	4939      	ldr	r1, [pc, #228]	; (8015370 <HAL_RCC_ClockConfig+0x358>)
 801528a:	4313      	orrs	r3, r2
 801528c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	f003 0308 	and.w	r3, r3, #8
 8015296:	2b00      	cmp	r3, #0
 8015298:	d010      	beq.n	80152bc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	695a      	ldr	r2, [r3, #20]
 801529e:	4b34      	ldr	r3, [pc, #208]	; (8015370 <HAL_RCC_ClockConfig+0x358>)
 80152a0:	69db      	ldr	r3, [r3, #28]
 80152a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80152a6:	429a      	cmp	r2, r3
 80152a8:	d208      	bcs.n	80152bc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80152aa:	4b31      	ldr	r3, [pc, #196]	; (8015370 <HAL_RCC_ClockConfig+0x358>)
 80152ac:	69db      	ldr	r3, [r3, #28]
 80152ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	695b      	ldr	r3, [r3, #20]
 80152b6:	492e      	ldr	r1, [pc, #184]	; (8015370 <HAL_RCC_ClockConfig+0x358>)
 80152b8:	4313      	orrs	r3, r2
 80152ba:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	f003 0310 	and.w	r3, r3, #16
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d010      	beq.n	80152ea <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	699a      	ldr	r2, [r3, #24]
 80152cc:	4b28      	ldr	r3, [pc, #160]	; (8015370 <HAL_RCC_ClockConfig+0x358>)
 80152ce:	69db      	ldr	r3, [r3, #28]
 80152d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80152d4:	429a      	cmp	r2, r3
 80152d6:	d208      	bcs.n	80152ea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80152d8:	4b25      	ldr	r3, [pc, #148]	; (8015370 <HAL_RCC_ClockConfig+0x358>)
 80152da:	69db      	ldr	r3, [r3, #28]
 80152dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	699b      	ldr	r3, [r3, #24]
 80152e4:	4922      	ldr	r1, [pc, #136]	; (8015370 <HAL_RCC_ClockConfig+0x358>)
 80152e6:	4313      	orrs	r3, r2
 80152e8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	f003 0320 	and.w	r3, r3, #32
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d010      	beq.n	8015318 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	69da      	ldr	r2, [r3, #28]
 80152fa:	4b1d      	ldr	r3, [pc, #116]	; (8015370 <HAL_RCC_ClockConfig+0x358>)
 80152fc:	6a1b      	ldr	r3, [r3, #32]
 80152fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8015302:	429a      	cmp	r2, r3
 8015304:	d208      	bcs.n	8015318 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8015306:	4b1a      	ldr	r3, [pc, #104]	; (8015370 <HAL_RCC_ClockConfig+0x358>)
 8015308:	6a1b      	ldr	r3, [r3, #32]
 801530a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	69db      	ldr	r3, [r3, #28]
 8015312:	4917      	ldr	r1, [pc, #92]	; (8015370 <HAL_RCC_ClockConfig+0x358>)
 8015314:	4313      	orrs	r3, r2
 8015316:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8015318:	f000 f834 	bl	8015384 <HAL_RCC_GetSysClockFreq>
 801531c:	4601      	mov	r1, r0
 801531e:	4b14      	ldr	r3, [pc, #80]	; (8015370 <HAL_RCC_ClockConfig+0x358>)
 8015320:	699b      	ldr	r3, [r3, #24]
 8015322:	0a1b      	lsrs	r3, r3, #8
 8015324:	f003 030f 	and.w	r3, r3, #15
 8015328:	4a12      	ldr	r2, [pc, #72]	; (8015374 <HAL_RCC_ClockConfig+0x35c>)
 801532a:	5cd3      	ldrb	r3, [r2, r3]
 801532c:	f003 031f 	and.w	r3, r3, #31
 8015330:	fa21 f303 	lsr.w	r3, r1, r3
 8015334:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8015336:	4b0e      	ldr	r3, [pc, #56]	; (8015370 <HAL_RCC_ClockConfig+0x358>)
 8015338:	699b      	ldr	r3, [r3, #24]
 801533a:	f003 030f 	and.w	r3, r3, #15
 801533e:	4a0d      	ldr	r2, [pc, #52]	; (8015374 <HAL_RCC_ClockConfig+0x35c>)
 8015340:	5cd3      	ldrb	r3, [r2, r3]
 8015342:	f003 031f 	and.w	r3, r3, #31
 8015346:	693a      	ldr	r2, [r7, #16]
 8015348:	fa22 f303 	lsr.w	r3, r2, r3
 801534c:	4a0a      	ldr	r2, [pc, #40]	; (8015378 <HAL_RCC_ClockConfig+0x360>)
 801534e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8015350:	4a0a      	ldr	r2, [pc, #40]	; (801537c <HAL_RCC_ClockConfig+0x364>)
 8015352:	693b      	ldr	r3, [r7, #16]
 8015354:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8015356:	4b0a      	ldr	r3, [pc, #40]	; (8015380 <HAL_RCC_ClockConfig+0x368>)
 8015358:	681b      	ldr	r3, [r3, #0]
 801535a:	4618      	mov	r0, r3
 801535c:	f7fd fa8c 	bl	8012878 <HAL_InitTick>
 8015360:	4603      	mov	r3, r0
 8015362:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8015364:	7bfb      	ldrb	r3, [r7, #15]
}
 8015366:	4618      	mov	r0, r3
 8015368:	3718      	adds	r7, #24
 801536a:	46bd      	mov	sp, r7
 801536c:	bd80      	pop	{r7, pc}
 801536e:	bf00      	nop
 8015370:	58024400 	.word	0x58024400
 8015374:	0801f490 	.word	0x0801f490
 8015378:	2400000c 	.word	0x2400000c
 801537c:	24000008 	.word	0x24000008
 8015380:	24000010 	.word	0x24000010

08015384 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8015384:	b480      	push	{r7}
 8015386:	b089      	sub	sp, #36	; 0x24
 8015388:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801538a:	4baf      	ldr	r3, [pc, #700]	; (8015648 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801538c:	691b      	ldr	r3, [r3, #16]
 801538e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8015392:	2b18      	cmp	r3, #24
 8015394:	f200 814e 	bhi.w	8015634 <HAL_RCC_GetSysClockFreq+0x2b0>
 8015398:	a201      	add	r2, pc, #4	; (adr r2, 80153a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 801539a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801539e:	bf00      	nop
 80153a0:	08015405 	.word	0x08015405
 80153a4:	08015635 	.word	0x08015635
 80153a8:	08015635 	.word	0x08015635
 80153ac:	08015635 	.word	0x08015635
 80153b0:	08015635 	.word	0x08015635
 80153b4:	08015635 	.word	0x08015635
 80153b8:	08015635 	.word	0x08015635
 80153bc:	08015635 	.word	0x08015635
 80153c0:	0801542b 	.word	0x0801542b
 80153c4:	08015635 	.word	0x08015635
 80153c8:	08015635 	.word	0x08015635
 80153cc:	08015635 	.word	0x08015635
 80153d0:	08015635 	.word	0x08015635
 80153d4:	08015635 	.word	0x08015635
 80153d8:	08015635 	.word	0x08015635
 80153dc:	08015635 	.word	0x08015635
 80153e0:	08015431 	.word	0x08015431
 80153e4:	08015635 	.word	0x08015635
 80153e8:	08015635 	.word	0x08015635
 80153ec:	08015635 	.word	0x08015635
 80153f0:	08015635 	.word	0x08015635
 80153f4:	08015635 	.word	0x08015635
 80153f8:	08015635 	.word	0x08015635
 80153fc:	08015635 	.word	0x08015635
 8015400:	08015437 	.word	0x08015437
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015404:	4b90      	ldr	r3, [pc, #576]	; (8015648 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8015406:	681b      	ldr	r3, [r3, #0]
 8015408:	f003 0320 	and.w	r3, r3, #32
 801540c:	2b00      	cmp	r3, #0
 801540e:	d009      	beq.n	8015424 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8015410:	4b8d      	ldr	r3, [pc, #564]	; (8015648 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	08db      	lsrs	r3, r3, #3
 8015416:	f003 0303 	and.w	r3, r3, #3
 801541a:	4a8c      	ldr	r2, [pc, #560]	; (801564c <HAL_RCC_GetSysClockFreq+0x2c8>)
 801541c:	fa22 f303 	lsr.w	r3, r2, r3
 8015420:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8015422:	e10a      	b.n	801563a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8015424:	4b89      	ldr	r3, [pc, #548]	; (801564c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8015426:	61bb      	str	r3, [r7, #24]
    break;
 8015428:	e107      	b.n	801563a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 801542a:	4b89      	ldr	r3, [pc, #548]	; (8015650 <HAL_RCC_GetSysClockFreq+0x2cc>)
 801542c:	61bb      	str	r3, [r7, #24]
    break;
 801542e:	e104      	b.n	801563a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8015430:	4b88      	ldr	r3, [pc, #544]	; (8015654 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8015432:	61bb      	str	r3, [r7, #24]
    break;
 8015434:	e101      	b.n	801563a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8015436:	4b84      	ldr	r3, [pc, #528]	; (8015648 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8015438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801543a:	f003 0303 	and.w	r3, r3, #3
 801543e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8015440:	4b81      	ldr	r3, [pc, #516]	; (8015648 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8015442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015444:	091b      	lsrs	r3, r3, #4
 8015446:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801544a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 801544c:	4b7e      	ldr	r3, [pc, #504]	; (8015648 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801544e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015450:	f003 0301 	and.w	r3, r3, #1
 8015454:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8015456:	4b7c      	ldr	r3, [pc, #496]	; (8015648 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8015458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801545a:	08db      	lsrs	r3, r3, #3
 801545c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015460:	68fa      	ldr	r2, [r7, #12]
 8015462:	fb02 f303 	mul.w	r3, r2, r3
 8015466:	ee07 3a90 	vmov	s15, r3
 801546a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801546e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8015472:	693b      	ldr	r3, [r7, #16]
 8015474:	2b00      	cmp	r3, #0
 8015476:	f000 80da 	beq.w	801562e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 801547a:	697b      	ldr	r3, [r7, #20]
 801547c:	2b01      	cmp	r3, #1
 801547e:	d05a      	beq.n	8015536 <HAL_RCC_GetSysClockFreq+0x1b2>
 8015480:	2b01      	cmp	r3, #1
 8015482:	d302      	bcc.n	801548a <HAL_RCC_GetSysClockFreq+0x106>
 8015484:	2b02      	cmp	r3, #2
 8015486:	d078      	beq.n	801557a <HAL_RCC_GetSysClockFreq+0x1f6>
 8015488:	e099      	b.n	80155be <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801548a:	4b6f      	ldr	r3, [pc, #444]	; (8015648 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	f003 0320 	and.w	r3, r3, #32
 8015492:	2b00      	cmp	r3, #0
 8015494:	d02d      	beq.n	80154f2 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8015496:	4b6c      	ldr	r3, [pc, #432]	; (8015648 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	08db      	lsrs	r3, r3, #3
 801549c:	f003 0303 	and.w	r3, r3, #3
 80154a0:	4a6a      	ldr	r2, [pc, #424]	; (801564c <HAL_RCC_GetSysClockFreq+0x2c8>)
 80154a2:	fa22 f303 	lsr.w	r3, r2, r3
 80154a6:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	ee07 3a90 	vmov	s15, r3
 80154ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80154b2:	693b      	ldr	r3, [r7, #16]
 80154b4:	ee07 3a90 	vmov	s15, r3
 80154b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80154bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80154c0:	4b61      	ldr	r3, [pc, #388]	; (8015648 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80154c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80154c8:	ee07 3a90 	vmov	s15, r3
 80154cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80154d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80154d4:	eddf 5a60 	vldr	s11, [pc, #384]	; 8015658 <HAL_RCC_GetSysClockFreq+0x2d4>
 80154d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80154dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80154e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80154e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80154e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80154ec:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80154f0:	e087      	b.n	8015602 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80154f2:	693b      	ldr	r3, [r7, #16]
 80154f4:	ee07 3a90 	vmov	s15, r3
 80154f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80154fc:	eddf 6a57 	vldr	s13, [pc, #348]	; 801565c <HAL_RCC_GetSysClockFreq+0x2d8>
 8015500:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015504:	4b50      	ldr	r3, [pc, #320]	; (8015648 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8015506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801550c:	ee07 3a90 	vmov	s15, r3
 8015510:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015514:	ed97 6a02 	vldr	s12, [r7, #8]
 8015518:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8015658 <HAL_RCC_GetSysClockFreq+0x2d4>
 801551c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015520:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015524:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015528:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801552c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015530:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8015534:	e065      	b.n	8015602 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8015536:	693b      	ldr	r3, [r7, #16]
 8015538:	ee07 3a90 	vmov	s15, r3
 801553c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015540:	eddf 6a47 	vldr	s13, [pc, #284]	; 8015660 <HAL_RCC_GetSysClockFreq+0x2dc>
 8015544:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015548:	4b3f      	ldr	r3, [pc, #252]	; (8015648 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801554a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801554c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015550:	ee07 3a90 	vmov	s15, r3
 8015554:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015558:	ed97 6a02 	vldr	s12, [r7, #8]
 801555c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8015658 <HAL_RCC_GetSysClockFreq+0x2d4>
 8015560:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015564:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015568:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801556c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015574:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8015578:	e043      	b.n	8015602 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801557a:	693b      	ldr	r3, [r7, #16]
 801557c:	ee07 3a90 	vmov	s15, r3
 8015580:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015584:	eddf 6a37 	vldr	s13, [pc, #220]	; 8015664 <HAL_RCC_GetSysClockFreq+0x2e0>
 8015588:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801558c:	4b2e      	ldr	r3, [pc, #184]	; (8015648 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801558e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015594:	ee07 3a90 	vmov	s15, r3
 8015598:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801559c:	ed97 6a02 	vldr	s12, [r7, #8]
 80155a0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8015658 <HAL_RCC_GetSysClockFreq+0x2d4>
 80155a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80155a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80155ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80155b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80155b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80155b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80155bc:	e021      	b.n	8015602 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80155be:	693b      	ldr	r3, [r7, #16]
 80155c0:	ee07 3a90 	vmov	s15, r3
 80155c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80155c8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8015660 <HAL_RCC_GetSysClockFreq+0x2dc>
 80155cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80155d0:	4b1d      	ldr	r3, [pc, #116]	; (8015648 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80155d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80155d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80155d8:	ee07 3a90 	vmov	s15, r3
 80155dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80155e0:	ed97 6a02 	vldr	s12, [r7, #8]
 80155e4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8015658 <HAL_RCC_GetSysClockFreq+0x2d4>
 80155e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80155ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80155f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80155f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80155f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80155fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8015600:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8015602:	4b11      	ldr	r3, [pc, #68]	; (8015648 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8015604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015606:	0a5b      	lsrs	r3, r3, #9
 8015608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801560c:	3301      	adds	r3, #1
 801560e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8015610:	683b      	ldr	r3, [r7, #0]
 8015612:	ee07 3a90 	vmov	s15, r3
 8015616:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801561a:	edd7 6a07 	vldr	s13, [r7, #28]
 801561e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015622:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015626:	ee17 3a90 	vmov	r3, s15
 801562a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 801562c:	e005      	b.n	801563a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 801562e:	2300      	movs	r3, #0
 8015630:	61bb      	str	r3, [r7, #24]
    break;
 8015632:	e002      	b.n	801563a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8015634:	4b06      	ldr	r3, [pc, #24]	; (8015650 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8015636:	61bb      	str	r3, [r7, #24]
    break;
 8015638:	bf00      	nop
  }

  return sysclockfreq;
 801563a:	69bb      	ldr	r3, [r7, #24]
}
 801563c:	4618      	mov	r0, r3
 801563e:	3724      	adds	r7, #36	; 0x24
 8015640:	46bd      	mov	sp, r7
 8015642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015646:	4770      	bx	lr
 8015648:	58024400 	.word	0x58024400
 801564c:	03d09000 	.word	0x03d09000
 8015650:	003d0900 	.word	0x003d0900
 8015654:	007a1200 	.word	0x007a1200
 8015658:	46000000 	.word	0x46000000
 801565c:	4c742400 	.word	0x4c742400
 8015660:	4a742400 	.word	0x4a742400
 8015664:	4af42400 	.word	0x4af42400

08015668 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8015668:	b580      	push	{r7, lr}
 801566a:	b082      	sub	sp, #8
 801566c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801566e:	f7ff fe89 	bl	8015384 <HAL_RCC_GetSysClockFreq>
 8015672:	4601      	mov	r1, r0
 8015674:	4b10      	ldr	r3, [pc, #64]	; (80156b8 <HAL_RCC_GetHCLKFreq+0x50>)
 8015676:	699b      	ldr	r3, [r3, #24]
 8015678:	0a1b      	lsrs	r3, r3, #8
 801567a:	f003 030f 	and.w	r3, r3, #15
 801567e:	4a0f      	ldr	r2, [pc, #60]	; (80156bc <HAL_RCC_GetHCLKFreq+0x54>)
 8015680:	5cd3      	ldrb	r3, [r2, r3]
 8015682:	f003 031f 	and.w	r3, r3, #31
 8015686:	fa21 f303 	lsr.w	r3, r1, r3
 801568a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801568c:	4b0a      	ldr	r3, [pc, #40]	; (80156b8 <HAL_RCC_GetHCLKFreq+0x50>)
 801568e:	699b      	ldr	r3, [r3, #24]
 8015690:	f003 030f 	and.w	r3, r3, #15
 8015694:	4a09      	ldr	r2, [pc, #36]	; (80156bc <HAL_RCC_GetHCLKFreq+0x54>)
 8015696:	5cd3      	ldrb	r3, [r2, r3]
 8015698:	f003 031f 	and.w	r3, r3, #31
 801569c:	687a      	ldr	r2, [r7, #4]
 801569e:	fa22 f303 	lsr.w	r3, r2, r3
 80156a2:	4a07      	ldr	r2, [pc, #28]	; (80156c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80156a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80156a6:	4a07      	ldr	r2, [pc, #28]	; (80156c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80156ac:	4b04      	ldr	r3, [pc, #16]	; (80156c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80156ae:	681b      	ldr	r3, [r3, #0]
}
 80156b0:	4618      	mov	r0, r3
 80156b2:	3708      	adds	r7, #8
 80156b4:	46bd      	mov	sp, r7
 80156b6:	bd80      	pop	{r7, pc}
 80156b8:	58024400 	.word	0x58024400
 80156bc:	0801f490 	.word	0x0801f490
 80156c0:	2400000c 	.word	0x2400000c
 80156c4:	24000008 	.word	0x24000008

080156c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80156c8:	b580      	push	{r7, lr}
 80156ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80156cc:	f7ff ffcc 	bl	8015668 <HAL_RCC_GetHCLKFreq>
 80156d0:	4601      	mov	r1, r0
 80156d2:	4b06      	ldr	r3, [pc, #24]	; (80156ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80156d4:	69db      	ldr	r3, [r3, #28]
 80156d6:	091b      	lsrs	r3, r3, #4
 80156d8:	f003 0307 	and.w	r3, r3, #7
 80156dc:	4a04      	ldr	r2, [pc, #16]	; (80156f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80156de:	5cd3      	ldrb	r3, [r2, r3]
 80156e0:	f003 031f 	and.w	r3, r3, #31
 80156e4:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80156e8:	4618      	mov	r0, r3
 80156ea:	bd80      	pop	{r7, pc}
 80156ec:	58024400 	.word	0x58024400
 80156f0:	0801f490 	.word	0x0801f490

080156f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80156f4:	b580      	push	{r7, lr}
 80156f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80156f8:	f7ff ffb6 	bl	8015668 <HAL_RCC_GetHCLKFreq>
 80156fc:	4601      	mov	r1, r0
 80156fe:	4b06      	ldr	r3, [pc, #24]	; (8015718 <HAL_RCC_GetPCLK2Freq+0x24>)
 8015700:	69db      	ldr	r3, [r3, #28]
 8015702:	0a1b      	lsrs	r3, r3, #8
 8015704:	f003 0307 	and.w	r3, r3, #7
 8015708:	4a04      	ldr	r2, [pc, #16]	; (801571c <HAL_RCC_GetPCLK2Freq+0x28>)
 801570a:	5cd3      	ldrb	r3, [r2, r3]
 801570c:	f003 031f 	and.w	r3, r3, #31
 8015710:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8015714:	4618      	mov	r0, r3
 8015716:	bd80      	pop	{r7, pc}
 8015718:	58024400 	.word	0x58024400
 801571c:	0801f490 	.word	0x0801f490

08015720 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8015720:	b580      	push	{r7, lr}
 8015722:	b086      	sub	sp, #24
 8015724:	af00      	add	r7, sp, #0
 8015726:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8015728:	2300      	movs	r3, #0
 801572a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801572c:	2300      	movs	r3, #0
 801572e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8015738:	2b00      	cmp	r3, #0
 801573a:	d03d      	beq.n	80157b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015740:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015744:	d013      	beq.n	801576e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8015746:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801574a:	d802      	bhi.n	8015752 <HAL_RCCEx_PeriphCLKConfig+0x32>
 801574c:	2b00      	cmp	r3, #0
 801574e:	d007      	beq.n	8015760 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8015750:	e01f      	b.n	8015792 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8015752:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015756:	d013      	beq.n	8015780 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8015758:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801575c:	d01c      	beq.n	8015798 <HAL_RCCEx_PeriphCLKConfig+0x78>
 801575e:	e018      	b.n	8015792 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015760:	4baf      	ldr	r3, [pc, #700]	; (8015a20 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015764:	4aae      	ldr	r2, [pc, #696]	; (8015a20 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015766:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801576a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 801576c:	e015      	b.n	801579a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	3304      	adds	r3, #4
 8015772:	2102      	movs	r1, #2
 8015774:	4618      	mov	r0, r3
 8015776:	f001 f95f 	bl	8016a38 <RCCEx_PLL2_Config>
 801577a:	4603      	mov	r3, r0
 801577c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 801577e:	e00c      	b.n	801579a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	3324      	adds	r3, #36	; 0x24
 8015784:	2102      	movs	r1, #2
 8015786:	4618      	mov	r0, r3
 8015788:	f001 fa08 	bl	8016b9c <RCCEx_PLL3_Config>
 801578c:	4603      	mov	r3, r0
 801578e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8015790:	e003      	b.n	801579a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015792:	2301      	movs	r3, #1
 8015794:	75fb      	strb	r3, [r7, #23]
      break;
 8015796:	e000      	b.n	801579a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8015798:	bf00      	nop
    }

    if(ret == HAL_OK)
 801579a:	7dfb      	ldrb	r3, [r7, #23]
 801579c:	2b00      	cmp	r3, #0
 801579e:	d109      	bne.n	80157b4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80157a0:	4b9f      	ldr	r3, [pc, #636]	; (8015a20 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80157a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80157a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80157ac:	499c      	ldr	r1, [pc, #624]	; (8015a20 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80157ae:	4313      	orrs	r3, r2
 80157b0:	650b      	str	r3, [r1, #80]	; 0x50
 80157b2:	e001      	b.n	80157b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80157b4:	7dfb      	ldrb	r3, [r7, #23]
 80157b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	681b      	ldr	r3, [r3, #0]
 80157bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d03d      	beq.n	8015840 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80157c8:	2b04      	cmp	r3, #4
 80157ca:	d826      	bhi.n	801581a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80157cc:	a201      	add	r2, pc, #4	; (adr r2, 80157d4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80157ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157d2:	bf00      	nop
 80157d4:	080157e9 	.word	0x080157e9
 80157d8:	080157f7 	.word	0x080157f7
 80157dc:	08015809 	.word	0x08015809
 80157e0:	08015821 	.word	0x08015821
 80157e4:	08015821 	.word	0x08015821
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80157e8:	4b8d      	ldr	r3, [pc, #564]	; (8015a20 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80157ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80157ec:	4a8c      	ldr	r2, [pc, #560]	; (8015a20 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80157ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80157f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80157f4:	e015      	b.n	8015822 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	3304      	adds	r3, #4
 80157fa:	2100      	movs	r1, #0
 80157fc:	4618      	mov	r0, r3
 80157fe:	f001 f91b 	bl	8016a38 <RCCEx_PLL2_Config>
 8015802:	4603      	mov	r3, r0
 8015804:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8015806:	e00c      	b.n	8015822 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	3324      	adds	r3, #36	; 0x24
 801580c:	2100      	movs	r1, #0
 801580e:	4618      	mov	r0, r3
 8015810:	f001 f9c4 	bl	8016b9c <RCCEx_PLL3_Config>
 8015814:	4603      	mov	r3, r0
 8015816:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8015818:	e003      	b.n	8015822 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801581a:	2301      	movs	r3, #1
 801581c:	75fb      	strb	r3, [r7, #23]
      break;
 801581e:	e000      	b.n	8015822 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8015820:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015822:	7dfb      	ldrb	r3, [r7, #23]
 8015824:	2b00      	cmp	r3, #0
 8015826:	d109      	bne.n	801583c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8015828:	4b7d      	ldr	r3, [pc, #500]	; (8015a20 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801582a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801582c:	f023 0207 	bic.w	r2, r3, #7
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015834:	497a      	ldr	r1, [pc, #488]	; (8015a20 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015836:	4313      	orrs	r3, r2
 8015838:	650b      	str	r3, [r1, #80]	; 0x50
 801583a:	e001      	b.n	8015840 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801583c:	7dfb      	ldrb	r3, [r7, #23]
 801583e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8015848:	2b00      	cmp	r3, #0
 801584a:	d03e      	beq.n	80158ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015850:	2b80      	cmp	r3, #128	; 0x80
 8015852:	d01c      	beq.n	801588e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8015854:	2b80      	cmp	r3, #128	; 0x80
 8015856:	d804      	bhi.n	8015862 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8015858:	2b00      	cmp	r3, #0
 801585a:	d008      	beq.n	801586e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 801585c:	2b40      	cmp	r3, #64	; 0x40
 801585e:	d00d      	beq.n	801587c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8015860:	e01e      	b.n	80158a0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8015862:	2bc0      	cmp	r3, #192	; 0xc0
 8015864:	d01f      	beq.n	80158a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8015866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801586a:	d01e      	beq.n	80158aa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 801586c:	e018      	b.n	80158a0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801586e:	4b6c      	ldr	r3, [pc, #432]	; (8015a20 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015872:	4a6b      	ldr	r2, [pc, #428]	; (8015a20 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015878:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 801587a:	e017      	b.n	80158ac <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	3304      	adds	r3, #4
 8015880:	2100      	movs	r1, #0
 8015882:	4618      	mov	r0, r3
 8015884:	f001 f8d8 	bl	8016a38 <RCCEx_PLL2_Config>
 8015888:	4603      	mov	r3, r0
 801588a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 801588c:	e00e      	b.n	80158ac <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	3324      	adds	r3, #36	; 0x24
 8015892:	2100      	movs	r1, #0
 8015894:	4618      	mov	r0, r3
 8015896:	f001 f981 	bl	8016b9c <RCCEx_PLL3_Config>
 801589a:	4603      	mov	r3, r0
 801589c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 801589e:	e005      	b.n	80158ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80158a0:	2301      	movs	r3, #1
 80158a2:	75fb      	strb	r3, [r7, #23]
      break;
 80158a4:	e002      	b.n	80158ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80158a6:	bf00      	nop
 80158a8:	e000      	b.n	80158ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80158aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80158ac:	7dfb      	ldrb	r3, [r7, #23]
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d109      	bne.n	80158c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80158b2:	4b5b      	ldr	r3, [pc, #364]	; (8015a20 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80158b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80158b6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80158be:	4958      	ldr	r1, [pc, #352]	; (8015a20 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80158c0:	4313      	orrs	r3, r2
 80158c2:	650b      	str	r3, [r1, #80]	; 0x50
 80158c4:	e001      	b.n	80158ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80158c6:	7dfb      	ldrb	r3, [r7, #23]
 80158c8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	681b      	ldr	r3, [r3, #0]
 80158ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d044      	beq.n	8015960 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80158dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80158e0:	d01f      	beq.n	8015922 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80158e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80158e6:	d805      	bhi.n	80158f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d00a      	beq.n	8015902 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80158ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80158f0:	d00e      	beq.n	8015910 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80158f2:	e01f      	b.n	8015934 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80158f4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80158f8:	d01f      	beq.n	801593a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80158fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80158fe:	d01e      	beq.n	801593e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8015900:	e018      	b.n	8015934 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015902:	4b47      	ldr	r3, [pc, #284]	; (8015a20 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015906:	4a46      	ldr	r2, [pc, #280]	; (8015a20 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801590c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801590e:	e017      	b.n	8015940 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	3304      	adds	r3, #4
 8015914:	2100      	movs	r1, #0
 8015916:	4618      	mov	r0, r3
 8015918:	f001 f88e 	bl	8016a38 <RCCEx_PLL2_Config>
 801591c:	4603      	mov	r3, r0
 801591e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8015920:	e00e      	b.n	8015940 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	3324      	adds	r3, #36	; 0x24
 8015926:	2100      	movs	r1, #0
 8015928:	4618      	mov	r0, r3
 801592a:	f001 f937 	bl	8016b9c <RCCEx_PLL3_Config>
 801592e:	4603      	mov	r3, r0
 8015930:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8015932:	e005      	b.n	8015940 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015934:	2301      	movs	r3, #1
 8015936:	75fb      	strb	r3, [r7, #23]
      break;
 8015938:	e002      	b.n	8015940 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 801593a:	bf00      	nop
 801593c:	e000      	b.n	8015940 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 801593e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015940:	7dfb      	ldrb	r3, [r7, #23]
 8015942:	2b00      	cmp	r3, #0
 8015944:	d10a      	bne.n	801595c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8015946:	4b36      	ldr	r3, [pc, #216]	; (8015a20 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801594a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8015954:	4932      	ldr	r1, [pc, #200]	; (8015a20 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015956:	4313      	orrs	r3, r2
 8015958:	658b      	str	r3, [r1, #88]	; 0x58
 801595a:	e001      	b.n	8015960 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801595c:	7dfb      	ldrb	r3, [r7, #23]
 801595e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	681b      	ldr	r3, [r3, #0]
 8015964:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015968:	2b00      	cmp	r3, #0
 801596a:	d044      	beq.n	80159f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015972:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8015976:	d01f      	beq.n	80159b8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8015978:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801597c:	d805      	bhi.n	801598a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 801597e:	2b00      	cmp	r3, #0
 8015980:	d00a      	beq.n	8015998 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8015982:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8015986:	d00e      	beq.n	80159a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8015988:	e01f      	b.n	80159ca <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 801598a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801598e:	d01f      	beq.n	80159d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8015990:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8015994:	d01e      	beq.n	80159d4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8015996:	e018      	b.n	80159ca <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015998:	4b21      	ldr	r3, [pc, #132]	; (8015a20 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801599a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801599c:	4a20      	ldr	r2, [pc, #128]	; (8015a20 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801599e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80159a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80159a4:	e017      	b.n	80159d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	3304      	adds	r3, #4
 80159aa:	2100      	movs	r1, #0
 80159ac:	4618      	mov	r0, r3
 80159ae:	f001 f843 	bl	8016a38 <RCCEx_PLL2_Config>
 80159b2:	4603      	mov	r3, r0
 80159b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80159b6:	e00e      	b.n	80159d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	3324      	adds	r3, #36	; 0x24
 80159bc:	2100      	movs	r1, #0
 80159be:	4618      	mov	r0, r3
 80159c0:	f001 f8ec 	bl	8016b9c <RCCEx_PLL3_Config>
 80159c4:	4603      	mov	r3, r0
 80159c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80159c8:	e005      	b.n	80159d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80159ca:	2301      	movs	r3, #1
 80159cc:	75fb      	strb	r3, [r7, #23]
      break;
 80159ce:	e002      	b.n	80159d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80159d0:	bf00      	nop
 80159d2:	e000      	b.n	80159d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80159d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80159d6:	7dfb      	ldrb	r3, [r7, #23]
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d10a      	bne.n	80159f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80159dc:	4b10      	ldr	r3, [pc, #64]	; (8015a20 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80159de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80159e0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80159ea:	490d      	ldr	r1, [pc, #52]	; (8015a20 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80159ec:	4313      	orrs	r3, r2
 80159ee:	658b      	str	r3, [r1, #88]	; 0x58
 80159f0:	e001      	b.n	80159f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80159f2:	7dfb      	ldrb	r3, [r7, #23]
 80159f4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	681b      	ldr	r3, [r3, #0]
 80159fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d035      	beq.n	8015a6e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015a06:	2b10      	cmp	r3, #16
 8015a08:	d00c      	beq.n	8015a24 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8015a0a:	2b10      	cmp	r3, #16
 8015a0c:	d802      	bhi.n	8015a14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d01b      	beq.n	8015a4a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8015a12:	e017      	b.n	8015a44 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8015a14:	2b20      	cmp	r3, #32
 8015a16:	d00c      	beq.n	8015a32 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8015a18:	2b30      	cmp	r3, #48	; 0x30
 8015a1a:	d018      	beq.n	8015a4e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8015a1c:	e012      	b.n	8015a44 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8015a1e:	bf00      	nop
 8015a20:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015a24:	4baf      	ldr	r3, [pc, #700]	; (8015ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a28:	4aae      	ldr	r2, [pc, #696]	; (8015ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015a2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015a2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8015a30:	e00e      	b.n	8015a50 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	3304      	adds	r3, #4
 8015a36:	2102      	movs	r1, #2
 8015a38:	4618      	mov	r0, r3
 8015a3a:	f000 fffd 	bl	8016a38 <RCCEx_PLL2_Config>
 8015a3e:	4603      	mov	r3, r0
 8015a40:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8015a42:	e005      	b.n	8015a50 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8015a44:	2301      	movs	r3, #1
 8015a46:	75fb      	strb	r3, [r7, #23]
      break;
 8015a48:	e002      	b.n	8015a50 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8015a4a:	bf00      	nop
 8015a4c:	e000      	b.n	8015a50 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8015a4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015a50:	7dfb      	ldrb	r3, [r7, #23]
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d109      	bne.n	8015a6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8015a56:	4ba3      	ldr	r3, [pc, #652]	; (8015ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015a5a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015a62:	49a0      	ldr	r1, [pc, #640]	; (8015ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015a64:	4313      	orrs	r3, r2
 8015a66:	64cb      	str	r3, [r1, #76]	; 0x4c
 8015a68:	e001      	b.n	8015a6e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015a6a:	7dfb      	ldrb	r3, [r7, #23]
 8015a6c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	681b      	ldr	r3, [r3, #0]
 8015a72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d042      	beq.n	8015b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015a7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015a82:	d01f      	beq.n	8015ac4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8015a84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015a88:	d805      	bhi.n	8015a96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d00a      	beq.n	8015aa4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8015a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015a92:	d00e      	beq.n	8015ab2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8015a94:	e01f      	b.n	8015ad6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8015a96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8015a9a:	d01f      	beq.n	8015adc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8015a9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015aa0:	d01e      	beq.n	8015ae0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8015aa2:	e018      	b.n	8015ad6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015aa4:	4b8f      	ldr	r3, [pc, #572]	; (8015ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015aa8:	4a8e      	ldr	r2, [pc, #568]	; (8015ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015aae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8015ab0:	e017      	b.n	8015ae2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	3304      	adds	r3, #4
 8015ab6:	2100      	movs	r1, #0
 8015ab8:	4618      	mov	r0, r3
 8015aba:	f000 ffbd 	bl	8016a38 <RCCEx_PLL2_Config>
 8015abe:	4603      	mov	r3, r0
 8015ac0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8015ac2:	e00e      	b.n	8015ae2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	3324      	adds	r3, #36	; 0x24
 8015ac8:	2100      	movs	r1, #0
 8015aca:	4618      	mov	r0, r3
 8015acc:	f001 f866 	bl	8016b9c <RCCEx_PLL3_Config>
 8015ad0:	4603      	mov	r3, r0
 8015ad2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8015ad4:	e005      	b.n	8015ae2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015ad6:	2301      	movs	r3, #1
 8015ad8:	75fb      	strb	r3, [r7, #23]
      break;
 8015ada:	e002      	b.n	8015ae2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8015adc:	bf00      	nop
 8015ade:	e000      	b.n	8015ae2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8015ae0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015ae2:	7dfb      	ldrb	r3, [r7, #23]
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d109      	bne.n	8015afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8015ae8:	4b7e      	ldr	r3, [pc, #504]	; (8015ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015aec:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015af4:	497b      	ldr	r1, [pc, #492]	; (8015ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015af6:	4313      	orrs	r3, r2
 8015af8:	650b      	str	r3, [r1, #80]	; 0x50
 8015afa:	e001      	b.n	8015b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015afc:	7dfb      	ldrb	r3, [r7, #23]
 8015afe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	681b      	ldr	r3, [r3, #0]
 8015b04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d042      	beq.n	8015b92 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015b10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8015b14:	d01b      	beq.n	8015b4e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8015b16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8015b1a:	d805      	bhi.n	8015b28 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d022      	beq.n	8015b66 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8015b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015b24:	d00a      	beq.n	8015b3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8015b26:	e01b      	b.n	8015b60 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8015b28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8015b2c:	d01d      	beq.n	8015b6a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8015b2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8015b32:	d01c      	beq.n	8015b6e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8015b34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8015b38:	d01b      	beq.n	8015b72 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8015b3a:	e011      	b.n	8015b60 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	3304      	adds	r3, #4
 8015b40:	2101      	movs	r1, #1
 8015b42:	4618      	mov	r0, r3
 8015b44:	f000 ff78 	bl	8016a38 <RCCEx_PLL2_Config>
 8015b48:	4603      	mov	r3, r0
 8015b4a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8015b4c:	e012      	b.n	8015b74 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	3324      	adds	r3, #36	; 0x24
 8015b52:	2101      	movs	r1, #1
 8015b54:	4618      	mov	r0, r3
 8015b56:	f001 f821 	bl	8016b9c <RCCEx_PLL3_Config>
 8015b5a:	4603      	mov	r3, r0
 8015b5c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8015b5e:	e009      	b.n	8015b74 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015b60:	2301      	movs	r3, #1
 8015b62:	75fb      	strb	r3, [r7, #23]
      break;
 8015b64:	e006      	b.n	8015b74 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8015b66:	bf00      	nop
 8015b68:	e004      	b.n	8015b74 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8015b6a:	bf00      	nop
 8015b6c:	e002      	b.n	8015b74 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8015b6e:	bf00      	nop
 8015b70:	e000      	b.n	8015b74 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8015b72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015b74:	7dfb      	ldrb	r3, [r7, #23]
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d109      	bne.n	8015b8e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8015b7a:	4b5a      	ldr	r3, [pc, #360]	; (8015ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015b7e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015b86:	4957      	ldr	r1, [pc, #348]	; (8015ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015b88:	4313      	orrs	r3, r2
 8015b8a:	650b      	str	r3, [r1, #80]	; 0x50
 8015b8c:	e001      	b.n	8015b92 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015b8e:	7dfb      	ldrb	r3, [r7, #23]
 8015b90:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	681b      	ldr	r3, [r3, #0]
 8015b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d044      	beq.n	8015c28 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8015ba4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015ba8:	d01b      	beq.n	8015be2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8015baa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015bae:	d805      	bhi.n	8015bbc <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d022      	beq.n	8015bfa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8015bb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015bb8:	d00a      	beq.n	8015bd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8015bba:	e01b      	b.n	8015bf4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8015bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015bc0:	d01d      	beq.n	8015bfe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8015bc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015bc6:	d01c      	beq.n	8015c02 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8015bc8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8015bcc:	d01b      	beq.n	8015c06 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8015bce:	e011      	b.n	8015bf4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	3304      	adds	r3, #4
 8015bd4:	2101      	movs	r1, #1
 8015bd6:	4618      	mov	r0, r3
 8015bd8:	f000 ff2e 	bl	8016a38 <RCCEx_PLL2_Config>
 8015bdc:	4603      	mov	r3, r0
 8015bde:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8015be0:	e012      	b.n	8015c08 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	3324      	adds	r3, #36	; 0x24
 8015be6:	2101      	movs	r1, #1
 8015be8:	4618      	mov	r0, r3
 8015bea:	f000 ffd7 	bl	8016b9c <RCCEx_PLL3_Config>
 8015bee:	4603      	mov	r3, r0
 8015bf0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8015bf2:	e009      	b.n	8015c08 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8015bf4:	2301      	movs	r3, #1
 8015bf6:	75fb      	strb	r3, [r7, #23]
      break;
 8015bf8:	e006      	b.n	8015c08 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8015bfa:	bf00      	nop
 8015bfc:	e004      	b.n	8015c08 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8015bfe:	bf00      	nop
 8015c00:	e002      	b.n	8015c08 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8015c02:	bf00      	nop
 8015c04:	e000      	b.n	8015c08 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8015c06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015c08:	7dfb      	ldrb	r3, [r7, #23]
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d10a      	bne.n	8015c24 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8015c0e:	4b35      	ldr	r3, [pc, #212]	; (8015ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015c12:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8015c1c:	4931      	ldr	r1, [pc, #196]	; (8015ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015c1e:	4313      	orrs	r3, r2
 8015c20:	658b      	str	r3, [r1, #88]	; 0x58
 8015c22:	e001      	b.n	8015c28 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015c24:	7dfb      	ldrb	r3, [r7, #23]
 8015c26:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	681b      	ldr	r3, [r3, #0]
 8015c2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d02d      	beq.n	8015c90 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015c38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015c3c:	d005      	beq.n	8015c4a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8015c3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015c42:	d009      	beq.n	8015c58 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d013      	beq.n	8015c70 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8015c48:	e00f      	b.n	8015c6a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015c4a:	4b26      	ldr	r3, [pc, #152]	; (8015ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c4e:	4a25      	ldr	r2, [pc, #148]	; (8015ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015c54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8015c56:	e00c      	b.n	8015c72 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	3304      	adds	r3, #4
 8015c5c:	2101      	movs	r1, #1
 8015c5e:	4618      	mov	r0, r3
 8015c60:	f000 feea 	bl	8016a38 <RCCEx_PLL2_Config>
 8015c64:	4603      	mov	r3, r0
 8015c66:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8015c68:	e003      	b.n	8015c72 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015c6a:	2301      	movs	r3, #1
 8015c6c:	75fb      	strb	r3, [r7, #23]
      break;
 8015c6e:	e000      	b.n	8015c72 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8015c70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015c72:	7dfb      	ldrb	r3, [r7, #23]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d109      	bne.n	8015c8c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8015c78:	4b1a      	ldr	r3, [pc, #104]	; (8015ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015c7c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015c84:	4917      	ldr	r1, [pc, #92]	; (8015ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015c86:	4313      	orrs	r3, r2
 8015c88:	650b      	str	r3, [r1, #80]	; 0x50
 8015c8a:	e001      	b.n	8015c90 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015c8c:	7dfb      	ldrb	r3, [r7, #23]
 8015c8e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	681b      	ldr	r3, [r3, #0]
 8015c94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d035      	beq.n	8015d08 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015ca0:	2b03      	cmp	r3, #3
 8015ca2:	d81b      	bhi.n	8015cdc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8015ca4:	a201      	add	r2, pc, #4	; (adr r2, 8015cac <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8015ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015caa:	bf00      	nop
 8015cac:	08015ce9 	.word	0x08015ce9
 8015cb0:	08015cbd 	.word	0x08015cbd
 8015cb4:	08015ccb 	.word	0x08015ccb
 8015cb8:	08015ce9 	.word	0x08015ce9
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015cbc:	4b09      	ldr	r3, [pc, #36]	; (8015ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015cc0:	4a08      	ldr	r2, [pc, #32]	; (8015ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015cc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015cc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8015cc8:	e00f      	b.n	8015cea <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	3304      	adds	r3, #4
 8015cce:	2102      	movs	r1, #2
 8015cd0:	4618      	mov	r0, r3
 8015cd2:	f000 feb1 	bl	8016a38 <RCCEx_PLL2_Config>
 8015cd6:	4603      	mov	r3, r0
 8015cd8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8015cda:	e006      	b.n	8015cea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8015cdc:	2301      	movs	r3, #1
 8015cde:	75fb      	strb	r3, [r7, #23]
      break;
 8015ce0:	e003      	b.n	8015cea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8015ce2:	bf00      	nop
 8015ce4:	58024400 	.word	0x58024400
      break;
 8015ce8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015cea:	7dfb      	ldrb	r3, [r7, #23]
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d109      	bne.n	8015d04 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8015cf0:	4bba      	ldr	r3, [pc, #744]	; (8015fdc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015cf4:	f023 0203 	bic.w	r2, r3, #3
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015cfc:	49b7      	ldr	r1, [pc, #732]	; (8015fdc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015cfe:	4313      	orrs	r3, r2
 8015d00:	64cb      	str	r3, [r1, #76]	; 0x4c
 8015d02:	e001      	b.n	8015d08 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015d04:	7dfb      	ldrb	r3, [r7, #23]
 8015d06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	681b      	ldr	r3, [r3, #0]
 8015d0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	f000 8086 	beq.w	8015e22 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8015d16:	4bb2      	ldr	r3, [pc, #712]	; (8015fe0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8015d18:	681b      	ldr	r3, [r3, #0]
 8015d1a:	4ab1      	ldr	r2, [pc, #708]	; (8015fe0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8015d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015d20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8015d22:	f7fc fdf3 	bl	801290c <HAL_GetTick>
 8015d26:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8015d28:	e009      	b.n	8015d3e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015d2a:	f7fc fdef 	bl	801290c <HAL_GetTick>
 8015d2e:	4602      	mov	r2, r0
 8015d30:	693b      	ldr	r3, [r7, #16]
 8015d32:	1ad3      	subs	r3, r2, r3
 8015d34:	2b64      	cmp	r3, #100	; 0x64
 8015d36:	d902      	bls.n	8015d3e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8015d38:	2303      	movs	r3, #3
 8015d3a:	75fb      	strb	r3, [r7, #23]
        break;
 8015d3c:	e005      	b.n	8015d4a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8015d3e:	4ba8      	ldr	r3, [pc, #672]	; (8015fe0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8015d40:	681b      	ldr	r3, [r3, #0]
 8015d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d0ef      	beq.n	8015d2a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8015d4a:	7dfb      	ldrb	r3, [r7, #23]
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d166      	bne.n	8015e1e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8015d50:	4ba2      	ldr	r3, [pc, #648]	; (8015fdc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015d52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015d5a:	4053      	eors	r3, r2
 8015d5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d013      	beq.n	8015d8c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8015d64:	4b9d      	ldr	r3, [pc, #628]	; (8015fdc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015d6c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8015d6e:	4b9b      	ldr	r3, [pc, #620]	; (8015fdc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015d72:	4a9a      	ldr	r2, [pc, #616]	; (8015fdc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015d78:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8015d7a:	4b98      	ldr	r3, [pc, #608]	; (8015fdc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015d7e:	4a97      	ldr	r2, [pc, #604]	; (8015fdc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8015d84:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8015d86:	4a95      	ldr	r2, [pc, #596]	; (8015fdc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015d88:	68fb      	ldr	r3, [r7, #12]
 8015d8a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015d96:	d115      	bne.n	8015dc4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015d98:	f7fc fdb8 	bl	801290c <HAL_GetTick>
 8015d9c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015d9e:	e00b      	b.n	8015db8 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8015da0:	f7fc fdb4 	bl	801290c <HAL_GetTick>
 8015da4:	4602      	mov	r2, r0
 8015da6:	693b      	ldr	r3, [r7, #16]
 8015da8:	1ad3      	subs	r3, r2, r3
 8015daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8015dae:	4293      	cmp	r3, r2
 8015db0:	d902      	bls.n	8015db8 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8015db2:	2303      	movs	r3, #3
 8015db4:	75fb      	strb	r3, [r7, #23]
            break;
 8015db6:	e005      	b.n	8015dc4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015db8:	4b88      	ldr	r3, [pc, #544]	; (8015fdc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015dbc:	f003 0302 	and.w	r3, r3, #2
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d0ed      	beq.n	8015da0 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8015dc4:	7dfb      	ldrb	r3, [r7, #23]
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d126      	bne.n	8015e18 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015dd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015dd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015dd8:	d10d      	bne.n	8015df6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8015dda:	4b80      	ldr	r3, [pc, #512]	; (8015fdc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015ddc:	691b      	ldr	r3, [r3, #16]
 8015dde:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015de8:	0919      	lsrs	r1, r3, #4
 8015dea:	4b7e      	ldr	r3, [pc, #504]	; (8015fe4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8015dec:	400b      	ands	r3, r1
 8015dee:	497b      	ldr	r1, [pc, #492]	; (8015fdc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015df0:	4313      	orrs	r3, r2
 8015df2:	610b      	str	r3, [r1, #16]
 8015df4:	e005      	b.n	8015e02 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8015df6:	4b79      	ldr	r3, [pc, #484]	; (8015fdc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015df8:	691b      	ldr	r3, [r3, #16]
 8015dfa:	4a78      	ldr	r2, [pc, #480]	; (8015fdc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015dfc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015e00:	6113      	str	r3, [r2, #16]
 8015e02:	4b76      	ldr	r3, [pc, #472]	; (8015fdc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015e04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015e10:	4972      	ldr	r1, [pc, #456]	; (8015fdc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015e12:	4313      	orrs	r3, r2
 8015e14:	670b      	str	r3, [r1, #112]	; 0x70
 8015e16:	e004      	b.n	8015e22 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8015e18:	7dfb      	ldrb	r3, [r7, #23]
 8015e1a:	75bb      	strb	r3, [r7, #22]
 8015e1c:	e001      	b.n	8015e22 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015e1e:	7dfb      	ldrb	r3, [r7, #23]
 8015e20:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	681b      	ldr	r3, [r3, #0]
 8015e26:	f003 0301 	and.w	r3, r3, #1
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d07d      	beq.n	8015f2a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015e32:	2b28      	cmp	r3, #40	; 0x28
 8015e34:	d866      	bhi.n	8015f04 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8015e36:	a201      	add	r2, pc, #4	; (adr r2, 8015e3c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8015e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e3c:	08015f0b 	.word	0x08015f0b
 8015e40:	08015f05 	.word	0x08015f05
 8015e44:	08015f05 	.word	0x08015f05
 8015e48:	08015f05 	.word	0x08015f05
 8015e4c:	08015f05 	.word	0x08015f05
 8015e50:	08015f05 	.word	0x08015f05
 8015e54:	08015f05 	.word	0x08015f05
 8015e58:	08015f05 	.word	0x08015f05
 8015e5c:	08015ee1 	.word	0x08015ee1
 8015e60:	08015f05 	.word	0x08015f05
 8015e64:	08015f05 	.word	0x08015f05
 8015e68:	08015f05 	.word	0x08015f05
 8015e6c:	08015f05 	.word	0x08015f05
 8015e70:	08015f05 	.word	0x08015f05
 8015e74:	08015f05 	.word	0x08015f05
 8015e78:	08015f05 	.word	0x08015f05
 8015e7c:	08015ef3 	.word	0x08015ef3
 8015e80:	08015f05 	.word	0x08015f05
 8015e84:	08015f05 	.word	0x08015f05
 8015e88:	08015f05 	.word	0x08015f05
 8015e8c:	08015f05 	.word	0x08015f05
 8015e90:	08015f05 	.word	0x08015f05
 8015e94:	08015f05 	.word	0x08015f05
 8015e98:	08015f05 	.word	0x08015f05
 8015e9c:	08015f0b 	.word	0x08015f0b
 8015ea0:	08015f05 	.word	0x08015f05
 8015ea4:	08015f05 	.word	0x08015f05
 8015ea8:	08015f05 	.word	0x08015f05
 8015eac:	08015f05 	.word	0x08015f05
 8015eb0:	08015f05 	.word	0x08015f05
 8015eb4:	08015f05 	.word	0x08015f05
 8015eb8:	08015f05 	.word	0x08015f05
 8015ebc:	08015f0b 	.word	0x08015f0b
 8015ec0:	08015f05 	.word	0x08015f05
 8015ec4:	08015f05 	.word	0x08015f05
 8015ec8:	08015f05 	.word	0x08015f05
 8015ecc:	08015f05 	.word	0x08015f05
 8015ed0:	08015f05 	.word	0x08015f05
 8015ed4:	08015f05 	.word	0x08015f05
 8015ed8:	08015f05 	.word	0x08015f05
 8015edc:	08015f0b 	.word	0x08015f0b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	3304      	adds	r3, #4
 8015ee4:	2101      	movs	r1, #1
 8015ee6:	4618      	mov	r0, r3
 8015ee8:	f000 fda6 	bl	8016a38 <RCCEx_PLL2_Config>
 8015eec:	4603      	mov	r3, r0
 8015eee:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8015ef0:	e00c      	b.n	8015f0c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	3324      	adds	r3, #36	; 0x24
 8015ef6:	2101      	movs	r1, #1
 8015ef8:	4618      	mov	r0, r3
 8015efa:	f000 fe4f 	bl	8016b9c <RCCEx_PLL3_Config>
 8015efe:	4603      	mov	r3, r0
 8015f00:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8015f02:	e003      	b.n	8015f0c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015f04:	2301      	movs	r3, #1
 8015f06:	75fb      	strb	r3, [r7, #23]
      break;
 8015f08:	e000      	b.n	8015f0c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8015f0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015f0c:	7dfb      	ldrb	r3, [r7, #23]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d109      	bne.n	8015f26 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8015f12:	4b32      	ldr	r3, [pc, #200]	; (8015fdc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015f16:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015f1e:	492f      	ldr	r1, [pc, #188]	; (8015fdc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015f20:	4313      	orrs	r3, r2
 8015f22:	654b      	str	r3, [r1, #84]	; 0x54
 8015f24:	e001      	b.n	8015f2a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015f26:	7dfb      	ldrb	r3, [r7, #23]
 8015f28:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	f003 0302 	and.w	r3, r3, #2
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d037      	beq.n	8015fa6 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015f3a:	2b05      	cmp	r3, #5
 8015f3c:	d820      	bhi.n	8015f80 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8015f3e:	a201      	add	r2, pc, #4	; (adr r2, 8015f44 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8015f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f44:	08015f87 	.word	0x08015f87
 8015f48:	08015f5d 	.word	0x08015f5d
 8015f4c:	08015f6f 	.word	0x08015f6f
 8015f50:	08015f87 	.word	0x08015f87
 8015f54:	08015f87 	.word	0x08015f87
 8015f58:	08015f87 	.word	0x08015f87
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	3304      	adds	r3, #4
 8015f60:	2101      	movs	r1, #1
 8015f62:	4618      	mov	r0, r3
 8015f64:	f000 fd68 	bl	8016a38 <RCCEx_PLL2_Config>
 8015f68:	4603      	mov	r3, r0
 8015f6a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8015f6c:	e00c      	b.n	8015f88 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	3324      	adds	r3, #36	; 0x24
 8015f72:	2101      	movs	r1, #1
 8015f74:	4618      	mov	r0, r3
 8015f76:	f000 fe11 	bl	8016b9c <RCCEx_PLL3_Config>
 8015f7a:	4603      	mov	r3, r0
 8015f7c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8015f7e:	e003      	b.n	8015f88 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015f80:	2301      	movs	r3, #1
 8015f82:	75fb      	strb	r3, [r7, #23]
      break;
 8015f84:	e000      	b.n	8015f88 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8015f86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015f88:	7dfb      	ldrb	r3, [r7, #23]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d109      	bne.n	8015fa2 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8015f8e:	4b13      	ldr	r3, [pc, #76]	; (8015fdc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015f92:	f023 0207 	bic.w	r2, r3, #7
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015f9a:	4910      	ldr	r1, [pc, #64]	; (8015fdc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015f9c:	4313      	orrs	r3, r2
 8015f9e:	654b      	str	r3, [r1, #84]	; 0x54
 8015fa0:	e001      	b.n	8015fa6 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015fa2:	7dfb      	ldrb	r3, [r7, #23]
 8015fa4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	f003 0304 	and.w	r3, r3, #4
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d040      	beq.n	8016034 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015fb8:	2b05      	cmp	r3, #5
 8015fba:	d827      	bhi.n	801600c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8015fbc:	a201      	add	r2, pc, #4	; (adr r2, 8015fc4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8015fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015fc2:	bf00      	nop
 8015fc4:	08016013 	.word	0x08016013
 8015fc8:	08015fe9 	.word	0x08015fe9
 8015fcc:	08015ffb 	.word	0x08015ffb
 8015fd0:	08016013 	.word	0x08016013
 8015fd4:	08016013 	.word	0x08016013
 8015fd8:	08016013 	.word	0x08016013
 8015fdc:	58024400 	.word	0x58024400
 8015fe0:	58024800 	.word	0x58024800
 8015fe4:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	3304      	adds	r3, #4
 8015fec:	2101      	movs	r1, #1
 8015fee:	4618      	mov	r0, r3
 8015ff0:	f000 fd22 	bl	8016a38 <RCCEx_PLL2_Config>
 8015ff4:	4603      	mov	r3, r0
 8015ff6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8015ff8:	e00c      	b.n	8016014 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	3324      	adds	r3, #36	; 0x24
 8015ffe:	2101      	movs	r1, #1
 8016000:	4618      	mov	r0, r3
 8016002:	f000 fdcb 	bl	8016b9c <RCCEx_PLL3_Config>
 8016006:	4603      	mov	r3, r0
 8016008:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 801600a:	e003      	b.n	8016014 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801600c:	2301      	movs	r3, #1
 801600e:	75fb      	strb	r3, [r7, #23]
      break;
 8016010:	e000      	b.n	8016014 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8016012:	bf00      	nop
    }

    if(ret == HAL_OK)
 8016014:	7dfb      	ldrb	r3, [r7, #23]
 8016016:	2b00      	cmp	r3, #0
 8016018:	d10a      	bne.n	8016030 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801601a:	4bb2      	ldr	r3, [pc, #712]	; (80162e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801601c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801601e:	f023 0207 	bic.w	r2, r3, #7
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016028:	49ae      	ldr	r1, [pc, #696]	; (80162e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801602a:	4313      	orrs	r3, r2
 801602c:	658b      	str	r3, [r1, #88]	; 0x58
 801602e:	e001      	b.n	8016034 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016030:	7dfb      	ldrb	r3, [r7, #23]
 8016032:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	681b      	ldr	r3, [r3, #0]
 8016038:	f003 0320 	and.w	r3, r3, #32
 801603c:	2b00      	cmp	r3, #0
 801603e:	d044      	beq.n	80160ca <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016046:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801604a:	d01b      	beq.n	8016084 <HAL_RCCEx_PeriphCLKConfig+0x964>
 801604c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8016050:	d805      	bhi.n	801605e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8016052:	2b00      	cmp	r3, #0
 8016054:	d022      	beq.n	801609c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8016056:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801605a:	d00a      	beq.n	8016072 <HAL_RCCEx_PeriphCLKConfig+0x952>
 801605c:	e01b      	b.n	8016096 <HAL_RCCEx_PeriphCLKConfig+0x976>
 801605e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016062:	d01d      	beq.n	80160a0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8016064:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8016068:	d01c      	beq.n	80160a4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 801606a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801606e:	d01b      	beq.n	80160a8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8016070:	e011      	b.n	8016096 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	3304      	adds	r3, #4
 8016076:	2100      	movs	r1, #0
 8016078:	4618      	mov	r0, r3
 801607a:	f000 fcdd 	bl	8016a38 <RCCEx_PLL2_Config>
 801607e:	4603      	mov	r3, r0
 8016080:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8016082:	e012      	b.n	80160aa <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	3324      	adds	r3, #36	; 0x24
 8016088:	2102      	movs	r1, #2
 801608a:	4618      	mov	r0, r3
 801608c:	f000 fd86 	bl	8016b9c <RCCEx_PLL3_Config>
 8016090:	4603      	mov	r3, r0
 8016092:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8016094:	e009      	b.n	80160aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8016096:	2301      	movs	r3, #1
 8016098:	75fb      	strb	r3, [r7, #23]
      break;
 801609a:	e006      	b.n	80160aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 801609c:	bf00      	nop
 801609e:	e004      	b.n	80160aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80160a0:	bf00      	nop
 80160a2:	e002      	b.n	80160aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80160a4:	bf00      	nop
 80160a6:	e000      	b.n	80160aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80160a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80160aa:	7dfb      	ldrb	r3, [r7, #23]
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d10a      	bne.n	80160c6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80160b0:	4b8c      	ldr	r3, [pc, #560]	; (80162e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80160b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80160b4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80160be:	4989      	ldr	r1, [pc, #548]	; (80162e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80160c0:	4313      	orrs	r3, r2
 80160c2:	654b      	str	r3, [r1, #84]	; 0x54
 80160c4:	e001      	b.n	80160ca <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80160c6:	7dfb      	ldrb	r3, [r7, #23]
 80160c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	681b      	ldr	r3, [r3, #0]
 80160ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d044      	beq.n	8016160 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80160dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80160e0:	d01b      	beq.n	801611a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80160e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80160e6:	d805      	bhi.n	80160f4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d022      	beq.n	8016132 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80160ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80160f0:	d00a      	beq.n	8016108 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80160f2:	e01b      	b.n	801612c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80160f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80160f8:	d01d      	beq.n	8016136 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80160fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80160fe:	d01c      	beq.n	801613a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8016100:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8016104:	d01b      	beq.n	801613e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8016106:	e011      	b.n	801612c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	3304      	adds	r3, #4
 801610c:	2100      	movs	r1, #0
 801610e:	4618      	mov	r0, r3
 8016110:	f000 fc92 	bl	8016a38 <RCCEx_PLL2_Config>
 8016114:	4603      	mov	r3, r0
 8016116:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8016118:	e012      	b.n	8016140 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	3324      	adds	r3, #36	; 0x24
 801611e:	2102      	movs	r1, #2
 8016120:	4618      	mov	r0, r3
 8016122:	f000 fd3b 	bl	8016b9c <RCCEx_PLL3_Config>
 8016126:	4603      	mov	r3, r0
 8016128:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 801612a:	e009      	b.n	8016140 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801612c:	2301      	movs	r3, #1
 801612e:	75fb      	strb	r3, [r7, #23]
      break;
 8016130:	e006      	b.n	8016140 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8016132:	bf00      	nop
 8016134:	e004      	b.n	8016140 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8016136:	bf00      	nop
 8016138:	e002      	b.n	8016140 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 801613a:	bf00      	nop
 801613c:	e000      	b.n	8016140 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 801613e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8016140:	7dfb      	ldrb	r3, [r7, #23]
 8016142:	2b00      	cmp	r3, #0
 8016144:	d10a      	bne.n	801615c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8016146:	4b67      	ldr	r3, [pc, #412]	; (80162e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8016148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801614a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016154:	4963      	ldr	r1, [pc, #396]	; (80162e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8016156:	4313      	orrs	r3, r2
 8016158:	658b      	str	r3, [r1, #88]	; 0x58
 801615a:	e001      	b.n	8016160 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801615c:	7dfb      	ldrb	r3, [r7, #23]
 801615e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016168:	2b00      	cmp	r3, #0
 801616a:	d044      	beq.n	80161f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8016172:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016176:	d01b      	beq.n	80161b0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8016178:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801617c:	d805      	bhi.n	801618a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 801617e:	2b00      	cmp	r3, #0
 8016180:	d022      	beq.n	80161c8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8016182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8016186:	d00a      	beq.n	801619e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8016188:	e01b      	b.n	80161c2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 801618a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801618e:	d01d      	beq.n	80161cc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8016190:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8016194:	d01c      	beq.n	80161d0 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8016196:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 801619a:	d01b      	beq.n	80161d4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 801619c:	e011      	b.n	80161c2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	3304      	adds	r3, #4
 80161a2:	2100      	movs	r1, #0
 80161a4:	4618      	mov	r0, r3
 80161a6:	f000 fc47 	bl	8016a38 <RCCEx_PLL2_Config>
 80161aa:	4603      	mov	r3, r0
 80161ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80161ae:	e012      	b.n	80161d6 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	3324      	adds	r3, #36	; 0x24
 80161b4:	2102      	movs	r1, #2
 80161b6:	4618      	mov	r0, r3
 80161b8:	f000 fcf0 	bl	8016b9c <RCCEx_PLL3_Config>
 80161bc:	4603      	mov	r3, r0
 80161be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80161c0:	e009      	b.n	80161d6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80161c2:	2301      	movs	r3, #1
 80161c4:	75fb      	strb	r3, [r7, #23]
      break;
 80161c6:	e006      	b.n	80161d6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80161c8:	bf00      	nop
 80161ca:	e004      	b.n	80161d6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80161cc:	bf00      	nop
 80161ce:	e002      	b.n	80161d6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80161d0:	bf00      	nop
 80161d2:	e000      	b.n	80161d6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80161d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80161d6:	7dfb      	ldrb	r3, [r7, #23]
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d10a      	bne.n	80161f2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80161dc:	4b41      	ldr	r3, [pc, #260]	; (80162e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80161de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80161e0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80161ea:	493e      	ldr	r1, [pc, #248]	; (80162e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80161ec:	4313      	orrs	r3, r2
 80161ee:	658b      	str	r3, [r1, #88]	; 0x58
 80161f0:	e001      	b.n	80161f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80161f2:	7dfb      	ldrb	r3, [r7, #23]
 80161f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	681b      	ldr	r3, [r3, #0]
 80161fa:	f003 0308 	and.w	r3, r3, #8
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d01a      	beq.n	8016238 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801620c:	d10a      	bne.n	8016224 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	3324      	adds	r3, #36	; 0x24
 8016212:	2102      	movs	r1, #2
 8016214:	4618      	mov	r0, r3
 8016216:	f000 fcc1 	bl	8016b9c <RCCEx_PLL3_Config>
 801621a:	4603      	mov	r3, r0
 801621c:	2b00      	cmp	r3, #0
 801621e:	d001      	beq.n	8016224 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8016220:	2301      	movs	r3, #1
 8016222:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8016224:	4b2f      	ldr	r3, [pc, #188]	; (80162e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8016226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016228:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016232:	492c      	ldr	r1, [pc, #176]	; (80162e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8016234:	4313      	orrs	r3, r2
 8016236:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	f003 0310 	and.w	r3, r3, #16
 8016240:	2b00      	cmp	r3, #0
 8016242:	d01a      	beq.n	801627a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801624a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801624e:	d10a      	bne.n	8016266 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	3324      	adds	r3, #36	; 0x24
 8016254:	2102      	movs	r1, #2
 8016256:	4618      	mov	r0, r3
 8016258:	f000 fca0 	bl	8016b9c <RCCEx_PLL3_Config>
 801625c:	4603      	mov	r3, r0
 801625e:	2b00      	cmp	r3, #0
 8016260:	d001      	beq.n	8016266 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8016262:	2301      	movs	r3, #1
 8016264:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8016266:	4b1f      	ldr	r3, [pc, #124]	; (80162e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8016268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801626a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016274:	491b      	ldr	r1, [pc, #108]	; (80162e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8016276:	4313      	orrs	r3, r2
 8016278:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	681b      	ldr	r3, [r3, #0]
 801627e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8016282:	2b00      	cmp	r3, #0
 8016284:	d032      	beq.n	80162ec <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801628c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016290:	d00d      	beq.n	80162ae <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8016292:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8016296:	d016      	beq.n	80162c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8016298:	2b00      	cmp	r3, #0
 801629a:	d111      	bne.n	80162c0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	3304      	adds	r3, #4
 80162a0:	2100      	movs	r1, #0
 80162a2:	4618      	mov	r0, r3
 80162a4:	f000 fbc8 	bl	8016a38 <RCCEx_PLL2_Config>
 80162a8:	4603      	mov	r3, r0
 80162aa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80162ac:	e00c      	b.n	80162c8 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	3324      	adds	r3, #36	; 0x24
 80162b2:	2102      	movs	r1, #2
 80162b4:	4618      	mov	r0, r3
 80162b6:	f000 fc71 	bl	8016b9c <RCCEx_PLL3_Config>
 80162ba:	4603      	mov	r3, r0
 80162bc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80162be:	e003      	b.n	80162c8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80162c0:	2301      	movs	r3, #1
 80162c2:	75fb      	strb	r3, [r7, #23]
      break;
 80162c4:	e000      	b.n	80162c8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80162c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80162c8:	7dfb      	ldrb	r3, [r7, #23]
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d10c      	bne.n	80162e8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80162ce:	4b05      	ldr	r3, [pc, #20]	; (80162e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80162d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80162d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80162dc:	4901      	ldr	r1, [pc, #4]	; (80162e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80162de:	4313      	orrs	r3, r2
 80162e0:	658b      	str	r3, [r1, #88]	; 0x58
 80162e2:	e003      	b.n	80162ec <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80162e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80162e8:	7dfb      	ldrb	r3, [r7, #23]
 80162ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	681b      	ldr	r3, [r3, #0]
 80162f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d02f      	beq.n	8016358 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80162fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8016302:	d00c      	beq.n	801631e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8016304:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8016308:	d015      	beq.n	8016336 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 801630a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801630e:	d10f      	bne.n	8016330 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8016310:	4b71      	ldr	r3, [pc, #452]	; (80164d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016314:	4a70      	ldr	r2, [pc, #448]	; (80164d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801631a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 801631c:	e00c      	b.n	8016338 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	3324      	adds	r3, #36	; 0x24
 8016322:	2101      	movs	r1, #1
 8016324:	4618      	mov	r0, r3
 8016326:	f000 fc39 	bl	8016b9c <RCCEx_PLL3_Config>
 801632a:	4603      	mov	r3, r0
 801632c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 801632e:	e003      	b.n	8016338 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8016330:	2301      	movs	r3, #1
 8016332:	75fb      	strb	r3, [r7, #23]
      break;
 8016334:	e000      	b.n	8016338 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8016336:	bf00      	nop
    }

    if(ret == HAL_OK)
 8016338:	7dfb      	ldrb	r3, [r7, #23]
 801633a:	2b00      	cmp	r3, #0
 801633c:	d10a      	bne.n	8016354 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801633e:	4b66      	ldr	r3, [pc, #408]	; (80164d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016342:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801634c:	4962      	ldr	r1, [pc, #392]	; (80164d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 801634e:	4313      	orrs	r3, r2
 8016350:	654b      	str	r3, [r1, #84]	; 0x54
 8016352:	e001      	b.n	8016358 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016354:	7dfb      	ldrb	r3, [r7, #23]
 8016356:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016360:	2b00      	cmp	r3, #0
 8016362:	d029      	beq.n	80163b8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016368:	2b00      	cmp	r3, #0
 801636a:	d003      	beq.n	8016374 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 801636c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016370:	d007      	beq.n	8016382 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8016372:	e00f      	b.n	8016394 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8016374:	4b58      	ldr	r3, [pc, #352]	; (80164d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016378:	4a57      	ldr	r2, [pc, #348]	; (80164d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 801637a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801637e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8016380:	e00b      	b.n	801639a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	3304      	adds	r3, #4
 8016386:	2102      	movs	r1, #2
 8016388:	4618      	mov	r0, r3
 801638a:	f000 fb55 	bl	8016a38 <RCCEx_PLL2_Config>
 801638e:	4603      	mov	r3, r0
 8016390:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8016392:	e002      	b.n	801639a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8016394:	2301      	movs	r3, #1
 8016396:	75fb      	strb	r3, [r7, #23]
      break;
 8016398:	bf00      	nop
    }

    if(ret == HAL_OK)
 801639a:	7dfb      	ldrb	r3, [r7, #23]
 801639c:	2b00      	cmp	r3, #0
 801639e:	d109      	bne.n	80163b4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80163a0:	4b4d      	ldr	r3, [pc, #308]	; (80164d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80163a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80163a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80163ac:	494a      	ldr	r1, [pc, #296]	; (80164d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80163ae:	4313      	orrs	r3, r2
 80163b0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80163b2:	e001      	b.n	80163b8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80163b4:	7dfb      	ldrb	r3, [r7, #23]
 80163b6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	681b      	ldr	r3, [r3, #0]
 80163bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d00a      	beq.n	80163da <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	3324      	adds	r3, #36	; 0x24
 80163c8:	2102      	movs	r1, #2
 80163ca:	4618      	mov	r0, r3
 80163cc:	f000 fbe6 	bl	8016b9c <RCCEx_PLL3_Config>
 80163d0:	4603      	mov	r3, r0
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	d001      	beq.n	80163da <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80163d6:	2301      	movs	r3, #1
 80163d8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	681b      	ldr	r3, [r3, #0]
 80163de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d02f      	beq.n	8016446 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80163ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80163ee:	d00c      	beq.n	801640a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80163f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80163f4:	d802      	bhi.n	80163fc <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d011      	beq.n	801641e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80163fa:	e00d      	b.n	8016418 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80163fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016400:	d00f      	beq.n	8016422 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8016402:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8016406:	d00e      	beq.n	8016426 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8016408:	e006      	b.n	8016418 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801640a:	4b33      	ldr	r3, [pc, #204]	; (80164d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 801640c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801640e:	4a32      	ldr	r2, [pc, #200]	; (80164d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8016414:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8016416:	e007      	b.n	8016428 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8016418:	2301      	movs	r3, #1
 801641a:	75fb      	strb	r3, [r7, #23]
      break;
 801641c:	e004      	b.n	8016428 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 801641e:	bf00      	nop
 8016420:	e002      	b.n	8016428 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8016422:	bf00      	nop
 8016424:	e000      	b.n	8016428 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8016426:	bf00      	nop
    }

    if(ret == HAL_OK)
 8016428:	7dfb      	ldrb	r3, [r7, #23]
 801642a:	2b00      	cmp	r3, #0
 801642c:	d109      	bne.n	8016442 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801642e:	4b2a      	ldr	r3, [pc, #168]	; (80164d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016432:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801643a:	4927      	ldr	r1, [pc, #156]	; (80164d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 801643c:	4313      	orrs	r3, r2
 801643e:	654b      	str	r3, [r1, #84]	; 0x54
 8016440:	e001      	b.n	8016446 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016442:	7dfb      	ldrb	r3, [r7, #23]
 8016444:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	681b      	ldr	r3, [r3, #0]
 801644a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801644e:	2b00      	cmp	r3, #0
 8016450:	d008      	beq.n	8016464 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8016452:	4b21      	ldr	r3, [pc, #132]	; (80164d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016456:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801645e:	491e      	ldr	r1, [pc, #120]	; (80164d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016460:	4313      	orrs	r3, r2
 8016462:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	681b      	ldr	r3, [r3, #0]
 8016468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801646c:	2b00      	cmp	r3, #0
 801646e:	d008      	beq.n	8016482 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8016470:	4b19      	ldr	r3, [pc, #100]	; (80164d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016474:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801647c:	4916      	ldr	r1, [pc, #88]	; (80164d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 801647e:	4313      	orrs	r3, r2
 8016480:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	681b      	ldr	r3, [r3, #0]
 8016486:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801648a:	2b00      	cmp	r3, #0
 801648c:	d00d      	beq.n	80164aa <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801648e:	4b12      	ldr	r3, [pc, #72]	; (80164d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016490:	691b      	ldr	r3, [r3, #16]
 8016492:	4a11      	ldr	r2, [pc, #68]	; (80164d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016494:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8016498:	6113      	str	r3, [r2, #16]
 801649a:	4b0f      	ldr	r3, [pc, #60]	; (80164d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 801649c:	691a      	ldr	r2, [r3, #16]
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80164a4:	490c      	ldr	r1, [pc, #48]	; (80164d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80164a6:	4313      	orrs	r3, r2
 80164a8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	681b      	ldr	r3, [r3, #0]
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	da08      	bge.n	80164c4 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80164b2:	4b09      	ldr	r3, [pc, #36]	; (80164d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80164b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80164b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80164be:	4906      	ldr	r1, [pc, #24]	; (80164d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80164c0:	4313      	orrs	r3, r2
 80164c2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80164c4:	7dbb      	ldrb	r3, [r7, #22]
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d101      	bne.n	80164ce <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 80164ca:	2300      	movs	r3, #0
 80164cc:	e000      	b.n	80164d0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 80164ce:	2301      	movs	r3, #1
}
 80164d0:	4618      	mov	r0, r3
 80164d2:	3718      	adds	r7, #24
 80164d4:	46bd      	mov	sp, r7
 80164d6:	bd80      	pop	{r7, pc}
 80164d8:	58024400 	.word	0x58024400

080164dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80164dc:	b580      	push	{r7, lr}
 80164de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80164e0:	f7ff f8c2 	bl	8015668 <HAL_RCC_GetHCLKFreq>
 80164e4:	4601      	mov	r1, r0
 80164e6:	4b06      	ldr	r3, [pc, #24]	; (8016500 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80164e8:	6a1b      	ldr	r3, [r3, #32]
 80164ea:	091b      	lsrs	r3, r3, #4
 80164ec:	f003 0307 	and.w	r3, r3, #7
 80164f0:	4a04      	ldr	r2, [pc, #16]	; (8016504 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80164f2:	5cd3      	ldrb	r3, [r2, r3]
 80164f4:	f003 031f 	and.w	r3, r3, #31
 80164f8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80164fc:	4618      	mov	r0, r3
 80164fe:	bd80      	pop	{r7, pc}
 8016500:	58024400 	.word	0x58024400
 8016504:	0801f490 	.word	0x0801f490

08016508 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8016508:	b480      	push	{r7}
 801650a:	b089      	sub	sp, #36	; 0x24
 801650c:	af00      	add	r7, sp, #0
 801650e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8016510:	4b9d      	ldr	r3, [pc, #628]	; (8016788 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016514:	f003 0303 	and.w	r3, r3, #3
 8016518:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 801651a:	4b9b      	ldr	r3, [pc, #620]	; (8016788 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801651c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801651e:	0b1b      	lsrs	r3, r3, #12
 8016520:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016524:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8016526:	4b98      	ldr	r3, [pc, #608]	; (8016788 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801652a:	091b      	lsrs	r3, r3, #4
 801652c:	f003 0301 	and.w	r3, r3, #1
 8016530:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8016532:	4b95      	ldr	r3, [pc, #596]	; (8016788 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016536:	08db      	lsrs	r3, r3, #3
 8016538:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801653c:	693a      	ldr	r2, [r7, #16]
 801653e:	fb02 f303 	mul.w	r3, r2, r3
 8016542:	ee07 3a90 	vmov	s15, r3
 8016546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801654a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801654e:	697b      	ldr	r3, [r7, #20]
 8016550:	2b00      	cmp	r3, #0
 8016552:	f000 810a 	beq.w	801676a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8016556:	69bb      	ldr	r3, [r7, #24]
 8016558:	2b01      	cmp	r3, #1
 801655a:	d05a      	beq.n	8016612 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 801655c:	2b01      	cmp	r3, #1
 801655e:	d302      	bcc.n	8016566 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8016560:	2b02      	cmp	r3, #2
 8016562:	d078      	beq.n	8016656 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8016564:	e099      	b.n	801669a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016566:	4b88      	ldr	r3, [pc, #544]	; (8016788 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016568:	681b      	ldr	r3, [r3, #0]
 801656a:	f003 0320 	and.w	r3, r3, #32
 801656e:	2b00      	cmp	r3, #0
 8016570:	d02d      	beq.n	80165ce <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8016572:	4b85      	ldr	r3, [pc, #532]	; (8016788 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016574:	681b      	ldr	r3, [r3, #0]
 8016576:	08db      	lsrs	r3, r3, #3
 8016578:	f003 0303 	and.w	r3, r3, #3
 801657c:	4a83      	ldr	r2, [pc, #524]	; (801678c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 801657e:	fa22 f303 	lsr.w	r3, r2, r3
 8016582:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8016584:	68bb      	ldr	r3, [r7, #8]
 8016586:	ee07 3a90 	vmov	s15, r3
 801658a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801658e:	697b      	ldr	r3, [r7, #20]
 8016590:	ee07 3a90 	vmov	s15, r3
 8016594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016598:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801659c:	4b7a      	ldr	r3, [pc, #488]	; (8016788 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801659e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80165a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80165a4:	ee07 3a90 	vmov	s15, r3
 80165a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80165ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80165b0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8016790 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80165b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80165b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80165bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80165c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80165c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80165c8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80165cc:	e087      	b.n	80166de <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80165ce:	697b      	ldr	r3, [r7, #20]
 80165d0:	ee07 3a90 	vmov	s15, r3
 80165d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80165d8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8016794 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80165dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80165e0:	4b69      	ldr	r3, [pc, #420]	; (8016788 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80165e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80165e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80165e8:	ee07 3a90 	vmov	s15, r3
 80165ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80165f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80165f4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8016790 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80165f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80165fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016600:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016604:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016608:	ee67 7a27 	vmul.f32	s15, s14, s15
 801660c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8016610:	e065      	b.n	80166de <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8016612:	697b      	ldr	r3, [r7, #20]
 8016614:	ee07 3a90 	vmov	s15, r3
 8016618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801661c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8016798 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8016620:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016624:	4b58      	ldr	r3, [pc, #352]	; (8016788 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801662c:	ee07 3a90 	vmov	s15, r3
 8016630:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016634:	ed97 6a03 	vldr	s12, [r7, #12]
 8016638:	eddf 5a55 	vldr	s11, [pc, #340]	; 8016790 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 801663c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016640:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016644:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016648:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801664c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016650:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8016654:	e043      	b.n	80166de <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8016656:	697b      	ldr	r3, [r7, #20]
 8016658:	ee07 3a90 	vmov	s15, r3
 801665c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016660:	eddf 6a4e 	vldr	s13, [pc, #312]	; 801679c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8016664:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016668:	4b47      	ldr	r3, [pc, #284]	; (8016788 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801666a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801666c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016670:	ee07 3a90 	vmov	s15, r3
 8016674:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016678:	ed97 6a03 	vldr	s12, [r7, #12]
 801667c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8016790 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8016680:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016684:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016688:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801668c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016694:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8016698:	e021      	b.n	80166de <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 801669a:	697b      	ldr	r3, [r7, #20]
 801669c:	ee07 3a90 	vmov	s15, r3
 80166a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80166a4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8016798 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80166a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80166ac:	4b36      	ldr	r3, [pc, #216]	; (8016788 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80166ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80166b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80166b4:	ee07 3a90 	vmov	s15, r3
 80166b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80166bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80166c0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8016790 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80166c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80166c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80166cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80166d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80166d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80166d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80166dc:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80166de:	4b2a      	ldr	r3, [pc, #168]	; (8016788 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80166e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80166e2:	0a5b      	lsrs	r3, r3, #9
 80166e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80166e8:	ee07 3a90 	vmov	s15, r3
 80166ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80166f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80166f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80166f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80166fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016700:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016704:	ee17 2a90 	vmov	r2, s15
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 801670c:	4b1e      	ldr	r3, [pc, #120]	; (8016788 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801670e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016710:	0c1b      	lsrs	r3, r3, #16
 8016712:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016716:	ee07 3a90 	vmov	s15, r3
 801671a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801671e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016722:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016726:	edd7 6a07 	vldr	s13, [r7, #28]
 801672a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801672e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016732:	ee17 2a90 	vmov	r2, s15
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 801673a:	4b13      	ldr	r3, [pc, #76]	; (8016788 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801673c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801673e:	0e1b      	lsrs	r3, r3, #24
 8016740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016744:	ee07 3a90 	vmov	s15, r3
 8016748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801674c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016750:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016754:	edd7 6a07 	vldr	s13, [r7, #28]
 8016758:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801675c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016760:	ee17 2a90 	vmov	r2, s15
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8016768:	e008      	b.n	801677c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	2200      	movs	r2, #0
 801676e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	2200      	movs	r2, #0
 8016774:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	2200      	movs	r2, #0
 801677a:	609a      	str	r2, [r3, #8]
}
 801677c:	bf00      	nop
 801677e:	3724      	adds	r7, #36	; 0x24
 8016780:	46bd      	mov	sp, r7
 8016782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016786:	4770      	bx	lr
 8016788:	58024400 	.word	0x58024400
 801678c:	03d09000 	.word	0x03d09000
 8016790:	46000000 	.word	0x46000000
 8016794:	4c742400 	.word	0x4c742400
 8016798:	4a742400 	.word	0x4a742400
 801679c:	4af42400 	.word	0x4af42400

080167a0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80167a0:	b480      	push	{r7}
 80167a2:	b089      	sub	sp, #36	; 0x24
 80167a4:	af00      	add	r7, sp, #0
 80167a6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80167a8:	4b9d      	ldr	r3, [pc, #628]	; (8016a20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80167aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80167ac:	f003 0303 	and.w	r3, r3, #3
 80167b0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80167b2:	4b9b      	ldr	r3, [pc, #620]	; (8016a20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80167b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80167b6:	0d1b      	lsrs	r3, r3, #20
 80167b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80167bc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80167be:	4b98      	ldr	r3, [pc, #608]	; (8016a20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80167c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167c2:	0a1b      	lsrs	r3, r3, #8
 80167c4:	f003 0301 	and.w	r3, r3, #1
 80167c8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80167ca:	4b95      	ldr	r3, [pc, #596]	; (8016a20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80167cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80167ce:	08db      	lsrs	r3, r3, #3
 80167d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80167d4:	693a      	ldr	r2, [r7, #16]
 80167d6:	fb02 f303 	mul.w	r3, r2, r3
 80167da:	ee07 3a90 	vmov	s15, r3
 80167de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80167e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80167e6:	697b      	ldr	r3, [r7, #20]
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	f000 810a 	beq.w	8016a02 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80167ee:	69bb      	ldr	r3, [r7, #24]
 80167f0:	2b01      	cmp	r3, #1
 80167f2:	d05a      	beq.n	80168aa <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80167f4:	2b01      	cmp	r3, #1
 80167f6:	d302      	bcc.n	80167fe <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80167f8:	2b02      	cmp	r3, #2
 80167fa:	d078      	beq.n	80168ee <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80167fc:	e099      	b.n	8016932 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80167fe:	4b88      	ldr	r3, [pc, #544]	; (8016a20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016800:	681b      	ldr	r3, [r3, #0]
 8016802:	f003 0320 	and.w	r3, r3, #32
 8016806:	2b00      	cmp	r3, #0
 8016808:	d02d      	beq.n	8016866 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801680a:	4b85      	ldr	r3, [pc, #532]	; (8016a20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	08db      	lsrs	r3, r3, #3
 8016810:	f003 0303 	and.w	r3, r3, #3
 8016814:	4a83      	ldr	r2, [pc, #524]	; (8016a24 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8016816:	fa22 f303 	lsr.w	r3, r2, r3
 801681a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 801681c:	68bb      	ldr	r3, [r7, #8]
 801681e:	ee07 3a90 	vmov	s15, r3
 8016822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016826:	697b      	ldr	r3, [r7, #20]
 8016828:	ee07 3a90 	vmov	s15, r3
 801682c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016830:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016834:	4b7a      	ldr	r3, [pc, #488]	; (8016a20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801683c:	ee07 3a90 	vmov	s15, r3
 8016840:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016844:	ed97 6a03 	vldr	s12, [r7, #12]
 8016848:	eddf 5a77 	vldr	s11, [pc, #476]	; 8016a28 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 801684c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016850:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016854:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016858:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801685c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016860:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8016864:	e087      	b.n	8016976 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8016866:	697b      	ldr	r3, [r7, #20]
 8016868:	ee07 3a90 	vmov	s15, r3
 801686c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016870:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8016a2c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8016874:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016878:	4b69      	ldr	r3, [pc, #420]	; (8016a20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801687a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801687c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016880:	ee07 3a90 	vmov	s15, r3
 8016884:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016888:	ed97 6a03 	vldr	s12, [r7, #12]
 801688c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8016a28 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8016890:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016894:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016898:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801689c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80168a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80168a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80168a8:	e065      	b.n	8016976 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80168aa:	697b      	ldr	r3, [r7, #20]
 80168ac:	ee07 3a90 	vmov	s15, r3
 80168b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80168b4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8016a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80168b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80168bc:	4b58      	ldr	r3, [pc, #352]	; (8016a20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80168be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80168c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80168c4:	ee07 3a90 	vmov	s15, r3
 80168c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80168cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80168d0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8016a28 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80168d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80168d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80168dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80168e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80168e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80168e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80168ec:	e043      	b.n	8016976 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80168ee:	697b      	ldr	r3, [r7, #20]
 80168f0:	ee07 3a90 	vmov	s15, r3
 80168f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80168f8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8016a34 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80168fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016900:	4b47      	ldr	r3, [pc, #284]	; (8016a20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016908:	ee07 3a90 	vmov	s15, r3
 801690c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016910:	ed97 6a03 	vldr	s12, [r7, #12]
 8016914:	eddf 5a44 	vldr	s11, [pc, #272]	; 8016a28 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8016918:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801691c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016920:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016924:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016928:	ee67 7a27 	vmul.f32	s15, s14, s15
 801692c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8016930:	e021      	b.n	8016976 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8016932:	697b      	ldr	r3, [r7, #20]
 8016934:	ee07 3a90 	vmov	s15, r3
 8016938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801693c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8016a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8016940:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016944:	4b36      	ldr	r3, [pc, #216]	; (8016a20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801694c:	ee07 3a90 	vmov	s15, r3
 8016950:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016954:	ed97 6a03 	vldr	s12, [r7, #12]
 8016958:	eddf 5a33 	vldr	s11, [pc, #204]	; 8016a28 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 801695c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016960:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016964:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016968:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801696c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016970:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8016974:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8016976:	4b2a      	ldr	r3, [pc, #168]	; (8016a20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801697a:	0a5b      	lsrs	r3, r3, #9
 801697c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016980:	ee07 3a90 	vmov	s15, r3
 8016984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016988:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801698c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016990:	edd7 6a07 	vldr	s13, [r7, #28]
 8016994:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016998:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801699c:	ee17 2a90 	vmov	r2, s15
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80169a4:	4b1e      	ldr	r3, [pc, #120]	; (8016a20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80169a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80169a8:	0c1b      	lsrs	r3, r3, #16
 80169aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80169ae:	ee07 3a90 	vmov	s15, r3
 80169b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80169b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80169ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80169be:	edd7 6a07 	vldr	s13, [r7, #28]
 80169c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80169c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80169ca:	ee17 2a90 	vmov	r2, s15
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80169d2:	4b13      	ldr	r3, [pc, #76]	; (8016a20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80169d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80169d6:	0e1b      	lsrs	r3, r3, #24
 80169d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80169dc:	ee07 3a90 	vmov	s15, r3
 80169e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80169e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80169e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80169ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80169f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80169f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80169f8:	ee17 2a90 	vmov	r2, s15
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8016a00:	e008      	b.n	8016a14 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	2200      	movs	r2, #0
 8016a06:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	2200      	movs	r2, #0
 8016a0c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	2200      	movs	r2, #0
 8016a12:	609a      	str	r2, [r3, #8]
}
 8016a14:	bf00      	nop
 8016a16:	3724      	adds	r7, #36	; 0x24
 8016a18:	46bd      	mov	sp, r7
 8016a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a1e:	4770      	bx	lr
 8016a20:	58024400 	.word	0x58024400
 8016a24:	03d09000 	.word	0x03d09000
 8016a28:	46000000 	.word	0x46000000
 8016a2c:	4c742400 	.word	0x4c742400
 8016a30:	4a742400 	.word	0x4a742400
 8016a34:	4af42400 	.word	0x4af42400

08016a38 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8016a38:	b580      	push	{r7, lr}
 8016a3a:	b084      	sub	sp, #16
 8016a3c:	af00      	add	r7, sp, #0
 8016a3e:	6078      	str	r0, [r7, #4]
 8016a40:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8016a42:	2300      	movs	r3, #0
 8016a44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8016a46:	4b53      	ldr	r3, [pc, #332]	; (8016b94 <RCCEx_PLL2_Config+0x15c>)
 8016a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016a4a:	f003 0303 	and.w	r3, r3, #3
 8016a4e:	2b03      	cmp	r3, #3
 8016a50:	d101      	bne.n	8016a56 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8016a52:	2301      	movs	r3, #1
 8016a54:	e099      	b.n	8016b8a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8016a56:	4b4f      	ldr	r3, [pc, #316]	; (8016b94 <RCCEx_PLL2_Config+0x15c>)
 8016a58:	681b      	ldr	r3, [r3, #0]
 8016a5a:	4a4e      	ldr	r2, [pc, #312]	; (8016b94 <RCCEx_PLL2_Config+0x15c>)
 8016a5c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8016a60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8016a62:	f7fb ff53 	bl	801290c <HAL_GetTick>
 8016a66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8016a68:	e008      	b.n	8016a7c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8016a6a:	f7fb ff4f 	bl	801290c <HAL_GetTick>
 8016a6e:	4602      	mov	r2, r0
 8016a70:	68bb      	ldr	r3, [r7, #8]
 8016a72:	1ad3      	subs	r3, r2, r3
 8016a74:	2b02      	cmp	r3, #2
 8016a76:	d901      	bls.n	8016a7c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8016a78:	2303      	movs	r3, #3
 8016a7a:	e086      	b.n	8016b8a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8016a7c:	4b45      	ldr	r3, [pc, #276]	; (8016b94 <RCCEx_PLL2_Config+0x15c>)
 8016a7e:	681b      	ldr	r3, [r3, #0]
 8016a80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d1f0      	bne.n	8016a6a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8016a88:	4b42      	ldr	r3, [pc, #264]	; (8016b94 <RCCEx_PLL2_Config+0x15c>)
 8016a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016a8c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	681b      	ldr	r3, [r3, #0]
 8016a94:	031b      	lsls	r3, r3, #12
 8016a96:	493f      	ldr	r1, [pc, #252]	; (8016b94 <RCCEx_PLL2_Config+0x15c>)
 8016a98:	4313      	orrs	r3, r2
 8016a9a:	628b      	str	r3, [r1, #40]	; 0x28
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	685b      	ldr	r3, [r3, #4]
 8016aa0:	3b01      	subs	r3, #1
 8016aa2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	689b      	ldr	r3, [r3, #8]
 8016aaa:	3b01      	subs	r3, #1
 8016aac:	025b      	lsls	r3, r3, #9
 8016aae:	b29b      	uxth	r3, r3
 8016ab0:	431a      	orrs	r2, r3
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	68db      	ldr	r3, [r3, #12]
 8016ab6:	3b01      	subs	r3, #1
 8016ab8:	041b      	lsls	r3, r3, #16
 8016aba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8016abe:	431a      	orrs	r2, r3
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	691b      	ldr	r3, [r3, #16]
 8016ac4:	3b01      	subs	r3, #1
 8016ac6:	061b      	lsls	r3, r3, #24
 8016ac8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8016acc:	4931      	ldr	r1, [pc, #196]	; (8016b94 <RCCEx_PLL2_Config+0x15c>)
 8016ace:	4313      	orrs	r3, r2
 8016ad0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8016ad2:	4b30      	ldr	r3, [pc, #192]	; (8016b94 <RCCEx_PLL2_Config+0x15c>)
 8016ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ad6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	695b      	ldr	r3, [r3, #20]
 8016ade:	492d      	ldr	r1, [pc, #180]	; (8016b94 <RCCEx_PLL2_Config+0x15c>)
 8016ae0:	4313      	orrs	r3, r2
 8016ae2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8016ae4:	4b2b      	ldr	r3, [pc, #172]	; (8016b94 <RCCEx_PLL2_Config+0x15c>)
 8016ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ae8:	f023 0220 	bic.w	r2, r3, #32
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	699b      	ldr	r3, [r3, #24]
 8016af0:	4928      	ldr	r1, [pc, #160]	; (8016b94 <RCCEx_PLL2_Config+0x15c>)
 8016af2:	4313      	orrs	r3, r2
 8016af4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8016af6:	4b27      	ldr	r3, [pc, #156]	; (8016b94 <RCCEx_PLL2_Config+0x15c>)
 8016af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016afa:	4a26      	ldr	r2, [pc, #152]	; (8016b94 <RCCEx_PLL2_Config+0x15c>)
 8016afc:	f023 0310 	bic.w	r3, r3, #16
 8016b00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8016b02:	4b24      	ldr	r3, [pc, #144]	; (8016b94 <RCCEx_PLL2_Config+0x15c>)
 8016b04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8016b06:	4b24      	ldr	r3, [pc, #144]	; (8016b98 <RCCEx_PLL2_Config+0x160>)
 8016b08:	4013      	ands	r3, r2
 8016b0a:	687a      	ldr	r2, [r7, #4]
 8016b0c:	69d2      	ldr	r2, [r2, #28]
 8016b0e:	00d2      	lsls	r2, r2, #3
 8016b10:	4920      	ldr	r1, [pc, #128]	; (8016b94 <RCCEx_PLL2_Config+0x15c>)
 8016b12:	4313      	orrs	r3, r2
 8016b14:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8016b16:	4b1f      	ldr	r3, [pc, #124]	; (8016b94 <RCCEx_PLL2_Config+0x15c>)
 8016b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b1a:	4a1e      	ldr	r2, [pc, #120]	; (8016b94 <RCCEx_PLL2_Config+0x15c>)
 8016b1c:	f043 0310 	orr.w	r3, r3, #16
 8016b20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8016b22:	683b      	ldr	r3, [r7, #0]
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	d106      	bne.n	8016b36 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8016b28:	4b1a      	ldr	r3, [pc, #104]	; (8016b94 <RCCEx_PLL2_Config+0x15c>)
 8016b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b2c:	4a19      	ldr	r2, [pc, #100]	; (8016b94 <RCCEx_PLL2_Config+0x15c>)
 8016b2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8016b32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8016b34:	e00f      	b.n	8016b56 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8016b36:	683b      	ldr	r3, [r7, #0]
 8016b38:	2b01      	cmp	r3, #1
 8016b3a:	d106      	bne.n	8016b4a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8016b3c:	4b15      	ldr	r3, [pc, #84]	; (8016b94 <RCCEx_PLL2_Config+0x15c>)
 8016b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b40:	4a14      	ldr	r2, [pc, #80]	; (8016b94 <RCCEx_PLL2_Config+0x15c>)
 8016b42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016b46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8016b48:	e005      	b.n	8016b56 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8016b4a:	4b12      	ldr	r3, [pc, #72]	; (8016b94 <RCCEx_PLL2_Config+0x15c>)
 8016b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b4e:	4a11      	ldr	r2, [pc, #68]	; (8016b94 <RCCEx_PLL2_Config+0x15c>)
 8016b50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8016b54:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8016b56:	4b0f      	ldr	r3, [pc, #60]	; (8016b94 <RCCEx_PLL2_Config+0x15c>)
 8016b58:	681b      	ldr	r3, [r3, #0]
 8016b5a:	4a0e      	ldr	r2, [pc, #56]	; (8016b94 <RCCEx_PLL2_Config+0x15c>)
 8016b5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8016b60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8016b62:	f7fb fed3 	bl	801290c <HAL_GetTick>
 8016b66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8016b68:	e008      	b.n	8016b7c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8016b6a:	f7fb fecf 	bl	801290c <HAL_GetTick>
 8016b6e:	4602      	mov	r2, r0
 8016b70:	68bb      	ldr	r3, [r7, #8]
 8016b72:	1ad3      	subs	r3, r2, r3
 8016b74:	2b02      	cmp	r3, #2
 8016b76:	d901      	bls.n	8016b7c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8016b78:	2303      	movs	r3, #3
 8016b7a:	e006      	b.n	8016b8a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8016b7c:	4b05      	ldr	r3, [pc, #20]	; (8016b94 <RCCEx_PLL2_Config+0x15c>)
 8016b7e:	681b      	ldr	r3, [r3, #0]
 8016b80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	d0f0      	beq.n	8016b6a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8016b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b8a:	4618      	mov	r0, r3
 8016b8c:	3710      	adds	r7, #16
 8016b8e:	46bd      	mov	sp, r7
 8016b90:	bd80      	pop	{r7, pc}
 8016b92:	bf00      	nop
 8016b94:	58024400 	.word	0x58024400
 8016b98:	ffff0007 	.word	0xffff0007

08016b9c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8016b9c:	b580      	push	{r7, lr}
 8016b9e:	b084      	sub	sp, #16
 8016ba0:	af00      	add	r7, sp, #0
 8016ba2:	6078      	str	r0, [r7, #4]
 8016ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8016ba6:	2300      	movs	r3, #0
 8016ba8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8016baa:	4b53      	ldr	r3, [pc, #332]	; (8016cf8 <RCCEx_PLL3_Config+0x15c>)
 8016bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016bae:	f003 0303 	and.w	r3, r3, #3
 8016bb2:	2b03      	cmp	r3, #3
 8016bb4:	d101      	bne.n	8016bba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8016bb6:	2301      	movs	r3, #1
 8016bb8:	e099      	b.n	8016cee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8016bba:	4b4f      	ldr	r3, [pc, #316]	; (8016cf8 <RCCEx_PLL3_Config+0x15c>)
 8016bbc:	681b      	ldr	r3, [r3, #0]
 8016bbe:	4a4e      	ldr	r2, [pc, #312]	; (8016cf8 <RCCEx_PLL3_Config+0x15c>)
 8016bc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016bc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8016bc6:	f7fb fea1 	bl	801290c <HAL_GetTick>
 8016bca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8016bcc:	e008      	b.n	8016be0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8016bce:	f7fb fe9d 	bl	801290c <HAL_GetTick>
 8016bd2:	4602      	mov	r2, r0
 8016bd4:	68bb      	ldr	r3, [r7, #8]
 8016bd6:	1ad3      	subs	r3, r2, r3
 8016bd8:	2b02      	cmp	r3, #2
 8016bda:	d901      	bls.n	8016be0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8016bdc:	2303      	movs	r3, #3
 8016bde:	e086      	b.n	8016cee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8016be0:	4b45      	ldr	r3, [pc, #276]	; (8016cf8 <RCCEx_PLL3_Config+0x15c>)
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d1f0      	bne.n	8016bce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8016bec:	4b42      	ldr	r3, [pc, #264]	; (8016cf8 <RCCEx_PLL3_Config+0x15c>)
 8016bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016bf0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	681b      	ldr	r3, [r3, #0]
 8016bf8:	051b      	lsls	r3, r3, #20
 8016bfa:	493f      	ldr	r1, [pc, #252]	; (8016cf8 <RCCEx_PLL3_Config+0x15c>)
 8016bfc:	4313      	orrs	r3, r2
 8016bfe:	628b      	str	r3, [r1, #40]	; 0x28
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	685b      	ldr	r3, [r3, #4]
 8016c04:	3b01      	subs	r3, #1
 8016c06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	689b      	ldr	r3, [r3, #8]
 8016c0e:	3b01      	subs	r3, #1
 8016c10:	025b      	lsls	r3, r3, #9
 8016c12:	b29b      	uxth	r3, r3
 8016c14:	431a      	orrs	r2, r3
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	68db      	ldr	r3, [r3, #12]
 8016c1a:	3b01      	subs	r3, #1
 8016c1c:	041b      	lsls	r3, r3, #16
 8016c1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8016c22:	431a      	orrs	r2, r3
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	691b      	ldr	r3, [r3, #16]
 8016c28:	3b01      	subs	r3, #1
 8016c2a:	061b      	lsls	r3, r3, #24
 8016c2c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8016c30:	4931      	ldr	r1, [pc, #196]	; (8016cf8 <RCCEx_PLL3_Config+0x15c>)
 8016c32:	4313      	orrs	r3, r2
 8016c34:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8016c36:	4b30      	ldr	r3, [pc, #192]	; (8016cf8 <RCCEx_PLL3_Config+0x15c>)
 8016c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c3a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	695b      	ldr	r3, [r3, #20]
 8016c42:	492d      	ldr	r1, [pc, #180]	; (8016cf8 <RCCEx_PLL3_Config+0x15c>)
 8016c44:	4313      	orrs	r3, r2
 8016c46:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8016c48:	4b2b      	ldr	r3, [pc, #172]	; (8016cf8 <RCCEx_PLL3_Config+0x15c>)
 8016c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c4c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	699b      	ldr	r3, [r3, #24]
 8016c54:	4928      	ldr	r1, [pc, #160]	; (8016cf8 <RCCEx_PLL3_Config+0x15c>)
 8016c56:	4313      	orrs	r3, r2
 8016c58:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8016c5a:	4b27      	ldr	r3, [pc, #156]	; (8016cf8 <RCCEx_PLL3_Config+0x15c>)
 8016c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c5e:	4a26      	ldr	r2, [pc, #152]	; (8016cf8 <RCCEx_PLL3_Config+0x15c>)
 8016c60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016c64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8016c66:	4b24      	ldr	r3, [pc, #144]	; (8016cf8 <RCCEx_PLL3_Config+0x15c>)
 8016c68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016c6a:	4b24      	ldr	r3, [pc, #144]	; (8016cfc <RCCEx_PLL3_Config+0x160>)
 8016c6c:	4013      	ands	r3, r2
 8016c6e:	687a      	ldr	r2, [r7, #4]
 8016c70:	69d2      	ldr	r2, [r2, #28]
 8016c72:	00d2      	lsls	r2, r2, #3
 8016c74:	4920      	ldr	r1, [pc, #128]	; (8016cf8 <RCCEx_PLL3_Config+0x15c>)
 8016c76:	4313      	orrs	r3, r2
 8016c78:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8016c7a:	4b1f      	ldr	r3, [pc, #124]	; (8016cf8 <RCCEx_PLL3_Config+0x15c>)
 8016c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c7e:	4a1e      	ldr	r2, [pc, #120]	; (8016cf8 <RCCEx_PLL3_Config+0x15c>)
 8016c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016c84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8016c86:	683b      	ldr	r3, [r7, #0]
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d106      	bne.n	8016c9a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8016c8c:	4b1a      	ldr	r3, [pc, #104]	; (8016cf8 <RCCEx_PLL3_Config+0x15c>)
 8016c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c90:	4a19      	ldr	r2, [pc, #100]	; (8016cf8 <RCCEx_PLL3_Config+0x15c>)
 8016c92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8016c96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8016c98:	e00f      	b.n	8016cba <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8016c9a:	683b      	ldr	r3, [r7, #0]
 8016c9c:	2b01      	cmp	r3, #1
 8016c9e:	d106      	bne.n	8016cae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8016ca0:	4b15      	ldr	r3, [pc, #84]	; (8016cf8 <RCCEx_PLL3_Config+0x15c>)
 8016ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ca4:	4a14      	ldr	r2, [pc, #80]	; (8016cf8 <RCCEx_PLL3_Config+0x15c>)
 8016ca6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8016caa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8016cac:	e005      	b.n	8016cba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8016cae:	4b12      	ldr	r3, [pc, #72]	; (8016cf8 <RCCEx_PLL3_Config+0x15c>)
 8016cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cb2:	4a11      	ldr	r2, [pc, #68]	; (8016cf8 <RCCEx_PLL3_Config+0x15c>)
 8016cb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8016cb8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8016cba:	4b0f      	ldr	r3, [pc, #60]	; (8016cf8 <RCCEx_PLL3_Config+0x15c>)
 8016cbc:	681b      	ldr	r3, [r3, #0]
 8016cbe:	4a0e      	ldr	r2, [pc, #56]	; (8016cf8 <RCCEx_PLL3_Config+0x15c>)
 8016cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016cc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8016cc6:	f7fb fe21 	bl	801290c <HAL_GetTick>
 8016cca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8016ccc:	e008      	b.n	8016ce0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8016cce:	f7fb fe1d 	bl	801290c <HAL_GetTick>
 8016cd2:	4602      	mov	r2, r0
 8016cd4:	68bb      	ldr	r3, [r7, #8]
 8016cd6:	1ad3      	subs	r3, r2, r3
 8016cd8:	2b02      	cmp	r3, #2
 8016cda:	d901      	bls.n	8016ce0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8016cdc:	2303      	movs	r3, #3
 8016cde:	e006      	b.n	8016cee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8016ce0:	4b05      	ldr	r3, [pc, #20]	; (8016cf8 <RCCEx_PLL3_Config+0x15c>)
 8016ce2:	681b      	ldr	r3, [r3, #0]
 8016ce4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d0f0      	beq.n	8016cce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8016cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8016cee:	4618      	mov	r0, r3
 8016cf0:	3710      	adds	r7, #16
 8016cf2:	46bd      	mov	sp, r7
 8016cf4:	bd80      	pop	{r7, pc}
 8016cf6:	bf00      	nop
 8016cf8:	58024400 	.word	0x58024400
 8016cfc:	ffff0007 	.word	0xffff0007

08016d00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8016d00:	b580      	push	{r7, lr}
 8016d02:	b082      	sub	sp, #8
 8016d04:	af00      	add	r7, sp, #0
 8016d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d101      	bne.n	8016d12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8016d0e:	2301      	movs	r3, #1
 8016d10:	e01d      	b.n	8016d4e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016d18:	b2db      	uxtb	r3, r3
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d106      	bne.n	8016d2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	2200      	movs	r2, #0
 8016d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8016d26:	6878      	ldr	r0, [r7, #4]
 8016d28:	f7eb f8b2 	bl	8001e90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	2202      	movs	r2, #2
 8016d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	681a      	ldr	r2, [r3, #0]
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	3304      	adds	r3, #4
 8016d3c:	4619      	mov	r1, r3
 8016d3e:	4610      	mov	r0, r2
 8016d40:	f000 fb18 	bl	8017374 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	2201      	movs	r2, #1
 8016d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8016d4c:	2300      	movs	r3, #0
}
 8016d4e:	4618      	mov	r0, r3
 8016d50:	3708      	adds	r7, #8
 8016d52:	46bd      	mov	sp, r7
 8016d54:	bd80      	pop	{r7, pc}
	...

08016d58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8016d58:	b480      	push	{r7}
 8016d5a:	b085      	sub	sp, #20
 8016d5c:	af00      	add	r7, sp, #0
 8016d5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	681b      	ldr	r3, [r3, #0]
 8016d64:	68da      	ldr	r2, [r3, #12]
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	681b      	ldr	r3, [r3, #0]
 8016d6a:	f042 0201 	orr.w	r2, r2, #1
 8016d6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	681b      	ldr	r3, [r3, #0]
 8016d74:	689a      	ldr	r2, [r3, #8]
 8016d76:	4b0c      	ldr	r3, [pc, #48]	; (8016da8 <HAL_TIM_Base_Start_IT+0x50>)
 8016d78:	4013      	ands	r3, r2
 8016d7a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016d7c:	68fb      	ldr	r3, [r7, #12]
 8016d7e:	2b06      	cmp	r3, #6
 8016d80:	d00b      	beq.n	8016d9a <HAL_TIM_Base_Start_IT+0x42>
 8016d82:	68fb      	ldr	r3, [r7, #12]
 8016d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016d88:	d007      	beq.n	8016d9a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	681b      	ldr	r3, [r3, #0]
 8016d8e:	681a      	ldr	r2, [r3, #0]
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	681b      	ldr	r3, [r3, #0]
 8016d94:	f042 0201 	orr.w	r2, r2, #1
 8016d98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8016d9a:	2300      	movs	r3, #0
}
 8016d9c:	4618      	mov	r0, r3
 8016d9e:	3714      	adds	r7, #20
 8016da0:	46bd      	mov	sp, r7
 8016da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016da6:	4770      	bx	lr
 8016da8:	00010007 	.word	0x00010007

08016dac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8016dac:	b580      	push	{r7, lr}
 8016dae:	b082      	sub	sp, #8
 8016db0:	af00      	add	r7, sp, #0
 8016db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	d101      	bne.n	8016dbe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8016dba:	2301      	movs	r3, #1
 8016dbc:	e01d      	b.n	8016dfa <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016dc4:	b2db      	uxtb	r3, r3
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d106      	bne.n	8016dd8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	2200      	movs	r2, #0
 8016dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8016dd2:	6878      	ldr	r0, [r7, #4]
 8016dd4:	f7ea fff6 	bl	8001dc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	2202      	movs	r2, #2
 8016ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	681a      	ldr	r2, [r3, #0]
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	3304      	adds	r3, #4
 8016de8:	4619      	mov	r1, r3
 8016dea:	4610      	mov	r0, r2
 8016dec:	f000 fac2 	bl	8017374 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	2201      	movs	r2, #1
 8016df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8016df8:	2300      	movs	r3, #0
}
 8016dfa:	4618      	mov	r0, r3
 8016dfc:	3708      	adds	r7, #8
 8016dfe:	46bd      	mov	sp, r7
 8016e00:	bd80      	pop	{r7, pc}
	...

08016e04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8016e04:	b580      	push	{r7, lr}
 8016e06:	b084      	sub	sp, #16
 8016e08:	af00      	add	r7, sp, #0
 8016e0a:	6078      	str	r0, [r7, #4]
 8016e0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	681b      	ldr	r3, [r3, #0]
 8016e12:	2201      	movs	r2, #1
 8016e14:	6839      	ldr	r1, [r7, #0]
 8016e16:	4618      	mov	r0, r3
 8016e18:	f000 fe14 	bl	8017a44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	681b      	ldr	r3, [r3, #0]
 8016e20:	4a1e      	ldr	r2, [pc, #120]	; (8016e9c <HAL_TIM_PWM_Start+0x98>)
 8016e22:	4293      	cmp	r3, r2
 8016e24:	d013      	beq.n	8016e4e <HAL_TIM_PWM_Start+0x4a>
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	681b      	ldr	r3, [r3, #0]
 8016e2a:	4a1d      	ldr	r2, [pc, #116]	; (8016ea0 <HAL_TIM_PWM_Start+0x9c>)
 8016e2c:	4293      	cmp	r3, r2
 8016e2e:	d00e      	beq.n	8016e4e <HAL_TIM_PWM_Start+0x4a>
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	4a1b      	ldr	r2, [pc, #108]	; (8016ea4 <HAL_TIM_PWM_Start+0xa0>)
 8016e36:	4293      	cmp	r3, r2
 8016e38:	d009      	beq.n	8016e4e <HAL_TIM_PWM_Start+0x4a>
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	681b      	ldr	r3, [r3, #0]
 8016e3e:	4a1a      	ldr	r2, [pc, #104]	; (8016ea8 <HAL_TIM_PWM_Start+0xa4>)
 8016e40:	4293      	cmp	r3, r2
 8016e42:	d004      	beq.n	8016e4e <HAL_TIM_PWM_Start+0x4a>
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	681b      	ldr	r3, [r3, #0]
 8016e48:	4a18      	ldr	r2, [pc, #96]	; (8016eac <HAL_TIM_PWM_Start+0xa8>)
 8016e4a:	4293      	cmp	r3, r2
 8016e4c:	d101      	bne.n	8016e52 <HAL_TIM_PWM_Start+0x4e>
 8016e4e:	2301      	movs	r3, #1
 8016e50:	e000      	b.n	8016e54 <HAL_TIM_PWM_Start+0x50>
 8016e52:	2300      	movs	r3, #0
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	d007      	beq.n	8016e68 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	681b      	ldr	r3, [r3, #0]
 8016e5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	681b      	ldr	r3, [r3, #0]
 8016e62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8016e66:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	681b      	ldr	r3, [r3, #0]
 8016e6c:	689a      	ldr	r2, [r3, #8]
 8016e6e:	4b10      	ldr	r3, [pc, #64]	; (8016eb0 <HAL_TIM_PWM_Start+0xac>)
 8016e70:	4013      	ands	r3, r2
 8016e72:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016e74:	68fb      	ldr	r3, [r7, #12]
 8016e76:	2b06      	cmp	r3, #6
 8016e78:	d00b      	beq.n	8016e92 <HAL_TIM_PWM_Start+0x8e>
 8016e7a:	68fb      	ldr	r3, [r7, #12]
 8016e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016e80:	d007      	beq.n	8016e92 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	681b      	ldr	r3, [r3, #0]
 8016e86:	681a      	ldr	r2, [r3, #0]
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	f042 0201 	orr.w	r2, r2, #1
 8016e90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8016e92:	2300      	movs	r3, #0
}
 8016e94:	4618      	mov	r0, r3
 8016e96:	3710      	adds	r7, #16
 8016e98:	46bd      	mov	sp, r7
 8016e9a:	bd80      	pop	{r7, pc}
 8016e9c:	40010000 	.word	0x40010000
 8016ea0:	40010400 	.word	0x40010400
 8016ea4:	40014000 	.word	0x40014000
 8016ea8:	40014400 	.word	0x40014400
 8016eac:	40014800 	.word	0x40014800
 8016eb0:	00010007 	.word	0x00010007

08016eb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8016eb4:	b580      	push	{r7, lr}
 8016eb6:	b082      	sub	sp, #8
 8016eb8:	af00      	add	r7, sp, #0
 8016eba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	681b      	ldr	r3, [r3, #0]
 8016ec0:	691b      	ldr	r3, [r3, #16]
 8016ec2:	f003 0302 	and.w	r3, r3, #2
 8016ec6:	2b02      	cmp	r3, #2
 8016ec8:	d122      	bne.n	8016f10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	681b      	ldr	r3, [r3, #0]
 8016ece:	68db      	ldr	r3, [r3, #12]
 8016ed0:	f003 0302 	and.w	r3, r3, #2
 8016ed4:	2b02      	cmp	r3, #2
 8016ed6:	d11b      	bne.n	8016f10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	681b      	ldr	r3, [r3, #0]
 8016edc:	f06f 0202 	mvn.w	r2, #2
 8016ee0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	2201      	movs	r2, #1
 8016ee6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	681b      	ldr	r3, [r3, #0]
 8016eec:	699b      	ldr	r3, [r3, #24]
 8016eee:	f003 0303 	and.w	r3, r3, #3
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	d003      	beq.n	8016efe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8016ef6:	6878      	ldr	r0, [r7, #4]
 8016ef8:	f000 fa1e 	bl	8017338 <HAL_TIM_IC_CaptureCallback>
 8016efc:	e005      	b.n	8016f0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8016efe:	6878      	ldr	r0, [r7, #4]
 8016f00:	f000 fa10 	bl	8017324 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016f04:	6878      	ldr	r0, [r7, #4]
 8016f06:	f000 fa21 	bl	801734c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	2200      	movs	r2, #0
 8016f0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	681b      	ldr	r3, [r3, #0]
 8016f14:	691b      	ldr	r3, [r3, #16]
 8016f16:	f003 0304 	and.w	r3, r3, #4
 8016f1a:	2b04      	cmp	r3, #4
 8016f1c:	d122      	bne.n	8016f64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	681b      	ldr	r3, [r3, #0]
 8016f22:	68db      	ldr	r3, [r3, #12]
 8016f24:	f003 0304 	and.w	r3, r3, #4
 8016f28:	2b04      	cmp	r3, #4
 8016f2a:	d11b      	bne.n	8016f64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	681b      	ldr	r3, [r3, #0]
 8016f30:	f06f 0204 	mvn.w	r2, #4
 8016f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	2202      	movs	r2, #2
 8016f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	681b      	ldr	r3, [r3, #0]
 8016f40:	699b      	ldr	r3, [r3, #24]
 8016f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	d003      	beq.n	8016f52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016f4a:	6878      	ldr	r0, [r7, #4]
 8016f4c:	f000 f9f4 	bl	8017338 <HAL_TIM_IC_CaptureCallback>
 8016f50:	e005      	b.n	8016f5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016f52:	6878      	ldr	r0, [r7, #4]
 8016f54:	f000 f9e6 	bl	8017324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016f58:	6878      	ldr	r0, [r7, #4]
 8016f5a:	f000 f9f7 	bl	801734c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	2200      	movs	r2, #0
 8016f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	681b      	ldr	r3, [r3, #0]
 8016f68:	691b      	ldr	r3, [r3, #16]
 8016f6a:	f003 0308 	and.w	r3, r3, #8
 8016f6e:	2b08      	cmp	r3, #8
 8016f70:	d122      	bne.n	8016fb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	681b      	ldr	r3, [r3, #0]
 8016f76:	68db      	ldr	r3, [r3, #12]
 8016f78:	f003 0308 	and.w	r3, r3, #8
 8016f7c:	2b08      	cmp	r3, #8
 8016f7e:	d11b      	bne.n	8016fb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	681b      	ldr	r3, [r3, #0]
 8016f84:	f06f 0208 	mvn.w	r2, #8
 8016f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	2204      	movs	r2, #4
 8016f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	681b      	ldr	r3, [r3, #0]
 8016f94:	69db      	ldr	r3, [r3, #28]
 8016f96:	f003 0303 	and.w	r3, r3, #3
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	d003      	beq.n	8016fa6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016f9e:	6878      	ldr	r0, [r7, #4]
 8016fa0:	f000 f9ca 	bl	8017338 <HAL_TIM_IC_CaptureCallback>
 8016fa4:	e005      	b.n	8016fb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016fa6:	6878      	ldr	r0, [r7, #4]
 8016fa8:	f000 f9bc 	bl	8017324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016fac:	6878      	ldr	r0, [r7, #4]
 8016fae:	f000 f9cd 	bl	801734c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	2200      	movs	r2, #0
 8016fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	681b      	ldr	r3, [r3, #0]
 8016fbc:	691b      	ldr	r3, [r3, #16]
 8016fbe:	f003 0310 	and.w	r3, r3, #16
 8016fc2:	2b10      	cmp	r3, #16
 8016fc4:	d122      	bne.n	801700c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	681b      	ldr	r3, [r3, #0]
 8016fca:	68db      	ldr	r3, [r3, #12]
 8016fcc:	f003 0310 	and.w	r3, r3, #16
 8016fd0:	2b10      	cmp	r3, #16
 8016fd2:	d11b      	bne.n	801700c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	681b      	ldr	r3, [r3, #0]
 8016fd8:	f06f 0210 	mvn.w	r2, #16
 8016fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	2208      	movs	r2, #8
 8016fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	681b      	ldr	r3, [r3, #0]
 8016fe8:	69db      	ldr	r3, [r3, #28]
 8016fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	d003      	beq.n	8016ffa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016ff2:	6878      	ldr	r0, [r7, #4]
 8016ff4:	f000 f9a0 	bl	8017338 <HAL_TIM_IC_CaptureCallback>
 8016ff8:	e005      	b.n	8017006 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016ffa:	6878      	ldr	r0, [r7, #4]
 8016ffc:	f000 f992 	bl	8017324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017000:	6878      	ldr	r0, [r7, #4]
 8017002:	f000 f9a3 	bl	801734c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	2200      	movs	r2, #0
 801700a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	681b      	ldr	r3, [r3, #0]
 8017010:	691b      	ldr	r3, [r3, #16]
 8017012:	f003 0301 	and.w	r3, r3, #1
 8017016:	2b01      	cmp	r3, #1
 8017018:	d10e      	bne.n	8017038 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	681b      	ldr	r3, [r3, #0]
 801701e:	68db      	ldr	r3, [r3, #12]
 8017020:	f003 0301 	and.w	r3, r3, #1
 8017024:	2b01      	cmp	r3, #1
 8017026:	d107      	bne.n	8017038 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8017028:	687b      	ldr	r3, [r7, #4]
 801702a:	681b      	ldr	r3, [r3, #0]
 801702c:	f06f 0201 	mvn.w	r2, #1
 8017030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8017032:	6878      	ldr	r0, [r7, #4]
 8017034:	f7e9 fe10 	bl	8000c58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	681b      	ldr	r3, [r3, #0]
 801703c:	691b      	ldr	r3, [r3, #16]
 801703e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017042:	2b80      	cmp	r3, #128	; 0x80
 8017044:	d10e      	bne.n	8017064 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	681b      	ldr	r3, [r3, #0]
 801704a:	68db      	ldr	r3, [r3, #12]
 801704c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017050:	2b80      	cmp	r3, #128	; 0x80
 8017052:	d107      	bne.n	8017064 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	681b      	ldr	r3, [r3, #0]
 8017058:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801705c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801705e:	6878      	ldr	r0, [r7, #4]
 8017060:	f000 fe26 	bl	8017cb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	681b      	ldr	r3, [r3, #0]
 8017068:	691b      	ldr	r3, [r3, #16]
 801706a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801706e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017072:	d10e      	bne.n	8017092 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	681b      	ldr	r3, [r3, #0]
 8017078:	68db      	ldr	r3, [r3, #12]
 801707a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801707e:	2b80      	cmp	r3, #128	; 0x80
 8017080:	d107      	bne.n	8017092 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	681b      	ldr	r3, [r3, #0]
 8017086:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801708a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801708c:	6878      	ldr	r0, [r7, #4]
 801708e:	f000 fe19 	bl	8017cc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8017092:	687b      	ldr	r3, [r7, #4]
 8017094:	681b      	ldr	r3, [r3, #0]
 8017096:	691b      	ldr	r3, [r3, #16]
 8017098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801709c:	2b40      	cmp	r3, #64	; 0x40
 801709e:	d10e      	bne.n	80170be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	681b      	ldr	r3, [r3, #0]
 80170a4:	68db      	ldr	r3, [r3, #12]
 80170a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80170aa:	2b40      	cmp	r3, #64	; 0x40
 80170ac:	d107      	bne.n	80170be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	681b      	ldr	r3, [r3, #0]
 80170b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80170b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80170b8:	6878      	ldr	r0, [r7, #4]
 80170ba:	f000 f951 	bl	8017360 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80170be:	687b      	ldr	r3, [r7, #4]
 80170c0:	681b      	ldr	r3, [r3, #0]
 80170c2:	691b      	ldr	r3, [r3, #16]
 80170c4:	f003 0320 	and.w	r3, r3, #32
 80170c8:	2b20      	cmp	r3, #32
 80170ca:	d10e      	bne.n	80170ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	681b      	ldr	r3, [r3, #0]
 80170d0:	68db      	ldr	r3, [r3, #12]
 80170d2:	f003 0320 	and.w	r3, r3, #32
 80170d6:	2b20      	cmp	r3, #32
 80170d8:	d107      	bne.n	80170ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	681b      	ldr	r3, [r3, #0]
 80170de:	f06f 0220 	mvn.w	r2, #32
 80170e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80170e4:	6878      	ldr	r0, [r7, #4]
 80170e6:	f000 fdd9 	bl	8017c9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80170ea:	bf00      	nop
 80170ec:	3708      	adds	r7, #8
 80170ee:	46bd      	mov	sp, r7
 80170f0:	bd80      	pop	{r7, pc}
	...

080170f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80170f4:	b580      	push	{r7, lr}
 80170f6:	b084      	sub	sp, #16
 80170f8:	af00      	add	r7, sp, #0
 80170fa:	60f8      	str	r0, [r7, #12]
 80170fc:	60b9      	str	r1, [r7, #8]
 80170fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8017100:	68fb      	ldr	r3, [r7, #12]
 8017102:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017106:	2b01      	cmp	r3, #1
 8017108:	d101      	bne.n	801710e <HAL_TIM_PWM_ConfigChannel+0x1a>
 801710a:	2302      	movs	r3, #2
 801710c:	e105      	b.n	801731a <HAL_TIM_PWM_ConfigChannel+0x226>
 801710e:	68fb      	ldr	r3, [r7, #12]
 8017110:	2201      	movs	r2, #1
 8017112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8017116:	68fb      	ldr	r3, [r7, #12]
 8017118:	2202      	movs	r2, #2
 801711a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	2b14      	cmp	r3, #20
 8017122:	f200 80f0 	bhi.w	8017306 <HAL_TIM_PWM_ConfigChannel+0x212>
 8017126:	a201      	add	r2, pc, #4	; (adr r2, 801712c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8017128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801712c:	08017181 	.word	0x08017181
 8017130:	08017307 	.word	0x08017307
 8017134:	08017307 	.word	0x08017307
 8017138:	08017307 	.word	0x08017307
 801713c:	080171c1 	.word	0x080171c1
 8017140:	08017307 	.word	0x08017307
 8017144:	08017307 	.word	0x08017307
 8017148:	08017307 	.word	0x08017307
 801714c:	08017203 	.word	0x08017203
 8017150:	08017307 	.word	0x08017307
 8017154:	08017307 	.word	0x08017307
 8017158:	08017307 	.word	0x08017307
 801715c:	08017243 	.word	0x08017243
 8017160:	08017307 	.word	0x08017307
 8017164:	08017307 	.word	0x08017307
 8017168:	08017307 	.word	0x08017307
 801716c:	08017285 	.word	0x08017285
 8017170:	08017307 	.word	0x08017307
 8017174:	08017307 	.word	0x08017307
 8017178:	08017307 	.word	0x08017307
 801717c:	080172c5 	.word	0x080172c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8017180:	68fb      	ldr	r3, [r7, #12]
 8017182:	681b      	ldr	r3, [r3, #0]
 8017184:	68b9      	ldr	r1, [r7, #8]
 8017186:	4618      	mov	r0, r3
 8017188:	f000 f98e 	bl	80174a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801718c:	68fb      	ldr	r3, [r7, #12]
 801718e:	681b      	ldr	r3, [r3, #0]
 8017190:	699a      	ldr	r2, [r3, #24]
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	681b      	ldr	r3, [r3, #0]
 8017196:	f042 0208 	orr.w	r2, r2, #8
 801719a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801719c:	68fb      	ldr	r3, [r7, #12]
 801719e:	681b      	ldr	r3, [r3, #0]
 80171a0:	699a      	ldr	r2, [r3, #24]
 80171a2:	68fb      	ldr	r3, [r7, #12]
 80171a4:	681b      	ldr	r3, [r3, #0]
 80171a6:	f022 0204 	bic.w	r2, r2, #4
 80171aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80171ac:	68fb      	ldr	r3, [r7, #12]
 80171ae:	681b      	ldr	r3, [r3, #0]
 80171b0:	6999      	ldr	r1, [r3, #24]
 80171b2:	68bb      	ldr	r3, [r7, #8]
 80171b4:	691a      	ldr	r2, [r3, #16]
 80171b6:	68fb      	ldr	r3, [r7, #12]
 80171b8:	681b      	ldr	r3, [r3, #0]
 80171ba:	430a      	orrs	r2, r1
 80171bc:	619a      	str	r2, [r3, #24]
      break;
 80171be:	e0a3      	b.n	8017308 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80171c0:	68fb      	ldr	r3, [r7, #12]
 80171c2:	681b      	ldr	r3, [r3, #0]
 80171c4:	68b9      	ldr	r1, [r7, #8]
 80171c6:	4618      	mov	r0, r3
 80171c8:	f000 f9fe 	bl	80175c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80171cc:	68fb      	ldr	r3, [r7, #12]
 80171ce:	681b      	ldr	r3, [r3, #0]
 80171d0:	699a      	ldr	r2, [r3, #24]
 80171d2:	68fb      	ldr	r3, [r7, #12]
 80171d4:	681b      	ldr	r3, [r3, #0]
 80171d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80171da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	681b      	ldr	r3, [r3, #0]
 80171e0:	699a      	ldr	r2, [r3, #24]
 80171e2:	68fb      	ldr	r3, [r7, #12]
 80171e4:	681b      	ldr	r3, [r3, #0]
 80171e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80171ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80171ec:	68fb      	ldr	r3, [r7, #12]
 80171ee:	681b      	ldr	r3, [r3, #0]
 80171f0:	6999      	ldr	r1, [r3, #24]
 80171f2:	68bb      	ldr	r3, [r7, #8]
 80171f4:	691b      	ldr	r3, [r3, #16]
 80171f6:	021a      	lsls	r2, r3, #8
 80171f8:	68fb      	ldr	r3, [r7, #12]
 80171fa:	681b      	ldr	r3, [r3, #0]
 80171fc:	430a      	orrs	r2, r1
 80171fe:	619a      	str	r2, [r3, #24]
      break;
 8017200:	e082      	b.n	8017308 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8017202:	68fb      	ldr	r3, [r7, #12]
 8017204:	681b      	ldr	r3, [r3, #0]
 8017206:	68b9      	ldr	r1, [r7, #8]
 8017208:	4618      	mov	r0, r3
 801720a:	f000 fa67 	bl	80176dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801720e:	68fb      	ldr	r3, [r7, #12]
 8017210:	681b      	ldr	r3, [r3, #0]
 8017212:	69da      	ldr	r2, [r3, #28]
 8017214:	68fb      	ldr	r3, [r7, #12]
 8017216:	681b      	ldr	r3, [r3, #0]
 8017218:	f042 0208 	orr.w	r2, r2, #8
 801721c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801721e:	68fb      	ldr	r3, [r7, #12]
 8017220:	681b      	ldr	r3, [r3, #0]
 8017222:	69da      	ldr	r2, [r3, #28]
 8017224:	68fb      	ldr	r3, [r7, #12]
 8017226:	681b      	ldr	r3, [r3, #0]
 8017228:	f022 0204 	bic.w	r2, r2, #4
 801722c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801722e:	68fb      	ldr	r3, [r7, #12]
 8017230:	681b      	ldr	r3, [r3, #0]
 8017232:	69d9      	ldr	r1, [r3, #28]
 8017234:	68bb      	ldr	r3, [r7, #8]
 8017236:	691a      	ldr	r2, [r3, #16]
 8017238:	68fb      	ldr	r3, [r7, #12]
 801723a:	681b      	ldr	r3, [r3, #0]
 801723c:	430a      	orrs	r2, r1
 801723e:	61da      	str	r2, [r3, #28]
      break;
 8017240:	e062      	b.n	8017308 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8017242:	68fb      	ldr	r3, [r7, #12]
 8017244:	681b      	ldr	r3, [r3, #0]
 8017246:	68b9      	ldr	r1, [r7, #8]
 8017248:	4618      	mov	r0, r3
 801724a:	f000 facd 	bl	80177e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801724e:	68fb      	ldr	r3, [r7, #12]
 8017250:	681b      	ldr	r3, [r3, #0]
 8017252:	69da      	ldr	r2, [r3, #28]
 8017254:	68fb      	ldr	r3, [r7, #12]
 8017256:	681b      	ldr	r3, [r3, #0]
 8017258:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801725c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801725e:	68fb      	ldr	r3, [r7, #12]
 8017260:	681b      	ldr	r3, [r3, #0]
 8017262:	69da      	ldr	r2, [r3, #28]
 8017264:	68fb      	ldr	r3, [r7, #12]
 8017266:	681b      	ldr	r3, [r3, #0]
 8017268:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801726c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801726e:	68fb      	ldr	r3, [r7, #12]
 8017270:	681b      	ldr	r3, [r3, #0]
 8017272:	69d9      	ldr	r1, [r3, #28]
 8017274:	68bb      	ldr	r3, [r7, #8]
 8017276:	691b      	ldr	r3, [r3, #16]
 8017278:	021a      	lsls	r2, r3, #8
 801727a:	68fb      	ldr	r3, [r7, #12]
 801727c:	681b      	ldr	r3, [r3, #0]
 801727e:	430a      	orrs	r2, r1
 8017280:	61da      	str	r2, [r3, #28]
      break;
 8017282:	e041      	b.n	8017308 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8017284:	68fb      	ldr	r3, [r7, #12]
 8017286:	681b      	ldr	r3, [r3, #0]
 8017288:	68b9      	ldr	r1, [r7, #8]
 801728a:	4618      	mov	r0, r3
 801728c:	f000 fb14 	bl	80178b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8017290:	68fb      	ldr	r3, [r7, #12]
 8017292:	681b      	ldr	r3, [r3, #0]
 8017294:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8017296:	68fb      	ldr	r3, [r7, #12]
 8017298:	681b      	ldr	r3, [r3, #0]
 801729a:	f042 0208 	orr.w	r2, r2, #8
 801729e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80172a0:	68fb      	ldr	r3, [r7, #12]
 80172a2:	681b      	ldr	r3, [r3, #0]
 80172a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80172a6:	68fb      	ldr	r3, [r7, #12]
 80172a8:	681b      	ldr	r3, [r3, #0]
 80172aa:	f022 0204 	bic.w	r2, r2, #4
 80172ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80172b0:	68fb      	ldr	r3, [r7, #12]
 80172b2:	681b      	ldr	r3, [r3, #0]
 80172b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80172b6:	68bb      	ldr	r3, [r7, #8]
 80172b8:	691a      	ldr	r2, [r3, #16]
 80172ba:	68fb      	ldr	r3, [r7, #12]
 80172bc:	681b      	ldr	r3, [r3, #0]
 80172be:	430a      	orrs	r2, r1
 80172c0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80172c2:	e021      	b.n	8017308 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80172c4:	68fb      	ldr	r3, [r7, #12]
 80172c6:	681b      	ldr	r3, [r3, #0]
 80172c8:	68b9      	ldr	r1, [r7, #8]
 80172ca:	4618      	mov	r0, r3
 80172cc:	f000 fb56 	bl	801797c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80172d0:	68fb      	ldr	r3, [r7, #12]
 80172d2:	681b      	ldr	r3, [r3, #0]
 80172d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80172d6:	68fb      	ldr	r3, [r7, #12]
 80172d8:	681b      	ldr	r3, [r3, #0]
 80172da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80172de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80172e0:	68fb      	ldr	r3, [r7, #12]
 80172e2:	681b      	ldr	r3, [r3, #0]
 80172e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	681b      	ldr	r3, [r3, #0]
 80172ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80172ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80172f0:	68fb      	ldr	r3, [r7, #12]
 80172f2:	681b      	ldr	r3, [r3, #0]
 80172f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80172f6:	68bb      	ldr	r3, [r7, #8]
 80172f8:	691b      	ldr	r3, [r3, #16]
 80172fa:	021a      	lsls	r2, r3, #8
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	681b      	ldr	r3, [r3, #0]
 8017300:	430a      	orrs	r2, r1
 8017302:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8017304:	e000      	b.n	8017308 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8017306:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8017308:	68fb      	ldr	r3, [r7, #12]
 801730a:	2201      	movs	r2, #1
 801730c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8017310:	68fb      	ldr	r3, [r7, #12]
 8017312:	2200      	movs	r2, #0
 8017314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8017318:	2300      	movs	r3, #0
}
 801731a:	4618      	mov	r0, r3
 801731c:	3710      	adds	r7, #16
 801731e:	46bd      	mov	sp, r7
 8017320:	bd80      	pop	{r7, pc}
 8017322:	bf00      	nop

08017324 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8017324:	b480      	push	{r7}
 8017326:	b083      	sub	sp, #12
 8017328:	af00      	add	r7, sp, #0
 801732a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801732c:	bf00      	nop
 801732e:	370c      	adds	r7, #12
 8017330:	46bd      	mov	sp, r7
 8017332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017336:	4770      	bx	lr

08017338 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8017338:	b480      	push	{r7}
 801733a:	b083      	sub	sp, #12
 801733c:	af00      	add	r7, sp, #0
 801733e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8017340:	bf00      	nop
 8017342:	370c      	adds	r7, #12
 8017344:	46bd      	mov	sp, r7
 8017346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801734a:	4770      	bx	lr

0801734c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801734c:	b480      	push	{r7}
 801734e:	b083      	sub	sp, #12
 8017350:	af00      	add	r7, sp, #0
 8017352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8017354:	bf00      	nop
 8017356:	370c      	adds	r7, #12
 8017358:	46bd      	mov	sp, r7
 801735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801735e:	4770      	bx	lr

08017360 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8017360:	b480      	push	{r7}
 8017362:	b083      	sub	sp, #12
 8017364:	af00      	add	r7, sp, #0
 8017366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8017368:	bf00      	nop
 801736a:	370c      	adds	r7, #12
 801736c:	46bd      	mov	sp, r7
 801736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017372:	4770      	bx	lr

08017374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8017374:	b480      	push	{r7}
 8017376:	b085      	sub	sp, #20
 8017378:	af00      	add	r7, sp, #0
 801737a:	6078      	str	r0, [r7, #4]
 801737c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	681b      	ldr	r3, [r3, #0]
 8017382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	4a40      	ldr	r2, [pc, #256]	; (8017488 <TIM_Base_SetConfig+0x114>)
 8017388:	4293      	cmp	r3, r2
 801738a:	d013      	beq.n	80173b4 <TIM_Base_SetConfig+0x40>
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017392:	d00f      	beq.n	80173b4 <TIM_Base_SetConfig+0x40>
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	4a3d      	ldr	r2, [pc, #244]	; (801748c <TIM_Base_SetConfig+0x118>)
 8017398:	4293      	cmp	r3, r2
 801739a:	d00b      	beq.n	80173b4 <TIM_Base_SetConfig+0x40>
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	4a3c      	ldr	r2, [pc, #240]	; (8017490 <TIM_Base_SetConfig+0x11c>)
 80173a0:	4293      	cmp	r3, r2
 80173a2:	d007      	beq.n	80173b4 <TIM_Base_SetConfig+0x40>
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	4a3b      	ldr	r2, [pc, #236]	; (8017494 <TIM_Base_SetConfig+0x120>)
 80173a8:	4293      	cmp	r3, r2
 80173aa:	d003      	beq.n	80173b4 <TIM_Base_SetConfig+0x40>
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	4a3a      	ldr	r2, [pc, #232]	; (8017498 <TIM_Base_SetConfig+0x124>)
 80173b0:	4293      	cmp	r3, r2
 80173b2:	d108      	bne.n	80173c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80173b4:	68fb      	ldr	r3, [r7, #12]
 80173b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80173ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80173bc:	683b      	ldr	r3, [r7, #0]
 80173be:	685b      	ldr	r3, [r3, #4]
 80173c0:	68fa      	ldr	r2, [r7, #12]
 80173c2:	4313      	orrs	r3, r2
 80173c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	4a2f      	ldr	r2, [pc, #188]	; (8017488 <TIM_Base_SetConfig+0x114>)
 80173ca:	4293      	cmp	r3, r2
 80173cc:	d01f      	beq.n	801740e <TIM_Base_SetConfig+0x9a>
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80173d4:	d01b      	beq.n	801740e <TIM_Base_SetConfig+0x9a>
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	4a2c      	ldr	r2, [pc, #176]	; (801748c <TIM_Base_SetConfig+0x118>)
 80173da:	4293      	cmp	r3, r2
 80173dc:	d017      	beq.n	801740e <TIM_Base_SetConfig+0x9a>
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	4a2b      	ldr	r2, [pc, #172]	; (8017490 <TIM_Base_SetConfig+0x11c>)
 80173e2:	4293      	cmp	r3, r2
 80173e4:	d013      	beq.n	801740e <TIM_Base_SetConfig+0x9a>
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	4a2a      	ldr	r2, [pc, #168]	; (8017494 <TIM_Base_SetConfig+0x120>)
 80173ea:	4293      	cmp	r3, r2
 80173ec:	d00f      	beq.n	801740e <TIM_Base_SetConfig+0x9a>
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	4a29      	ldr	r2, [pc, #164]	; (8017498 <TIM_Base_SetConfig+0x124>)
 80173f2:	4293      	cmp	r3, r2
 80173f4:	d00b      	beq.n	801740e <TIM_Base_SetConfig+0x9a>
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	4a28      	ldr	r2, [pc, #160]	; (801749c <TIM_Base_SetConfig+0x128>)
 80173fa:	4293      	cmp	r3, r2
 80173fc:	d007      	beq.n	801740e <TIM_Base_SetConfig+0x9a>
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	4a27      	ldr	r2, [pc, #156]	; (80174a0 <TIM_Base_SetConfig+0x12c>)
 8017402:	4293      	cmp	r3, r2
 8017404:	d003      	beq.n	801740e <TIM_Base_SetConfig+0x9a>
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	4a26      	ldr	r2, [pc, #152]	; (80174a4 <TIM_Base_SetConfig+0x130>)
 801740a:	4293      	cmp	r3, r2
 801740c:	d108      	bne.n	8017420 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801740e:	68fb      	ldr	r3, [r7, #12]
 8017410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8017414:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8017416:	683b      	ldr	r3, [r7, #0]
 8017418:	68db      	ldr	r3, [r3, #12]
 801741a:	68fa      	ldr	r2, [r7, #12]
 801741c:	4313      	orrs	r3, r2
 801741e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8017420:	68fb      	ldr	r3, [r7, #12]
 8017422:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8017426:	683b      	ldr	r3, [r7, #0]
 8017428:	695b      	ldr	r3, [r3, #20]
 801742a:	4313      	orrs	r3, r2
 801742c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	68fa      	ldr	r2, [r7, #12]
 8017432:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8017434:	683b      	ldr	r3, [r7, #0]
 8017436:	689a      	ldr	r2, [r3, #8]
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801743c:	683b      	ldr	r3, [r7, #0]
 801743e:	681a      	ldr	r2, [r3, #0]
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	4a10      	ldr	r2, [pc, #64]	; (8017488 <TIM_Base_SetConfig+0x114>)
 8017448:	4293      	cmp	r3, r2
 801744a:	d00f      	beq.n	801746c <TIM_Base_SetConfig+0xf8>
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	4a12      	ldr	r2, [pc, #72]	; (8017498 <TIM_Base_SetConfig+0x124>)
 8017450:	4293      	cmp	r3, r2
 8017452:	d00b      	beq.n	801746c <TIM_Base_SetConfig+0xf8>
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	4a11      	ldr	r2, [pc, #68]	; (801749c <TIM_Base_SetConfig+0x128>)
 8017458:	4293      	cmp	r3, r2
 801745a:	d007      	beq.n	801746c <TIM_Base_SetConfig+0xf8>
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	4a10      	ldr	r2, [pc, #64]	; (80174a0 <TIM_Base_SetConfig+0x12c>)
 8017460:	4293      	cmp	r3, r2
 8017462:	d003      	beq.n	801746c <TIM_Base_SetConfig+0xf8>
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	4a0f      	ldr	r2, [pc, #60]	; (80174a4 <TIM_Base_SetConfig+0x130>)
 8017468:	4293      	cmp	r3, r2
 801746a:	d103      	bne.n	8017474 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801746c:	683b      	ldr	r3, [r7, #0]
 801746e:	691a      	ldr	r2, [r3, #16]
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	2201      	movs	r2, #1
 8017478:	615a      	str	r2, [r3, #20]
}
 801747a:	bf00      	nop
 801747c:	3714      	adds	r7, #20
 801747e:	46bd      	mov	sp, r7
 8017480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017484:	4770      	bx	lr
 8017486:	bf00      	nop
 8017488:	40010000 	.word	0x40010000
 801748c:	40000400 	.word	0x40000400
 8017490:	40000800 	.word	0x40000800
 8017494:	40000c00 	.word	0x40000c00
 8017498:	40010400 	.word	0x40010400
 801749c:	40014000 	.word	0x40014000
 80174a0:	40014400 	.word	0x40014400
 80174a4:	40014800 	.word	0x40014800

080174a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80174a8:	b480      	push	{r7}
 80174aa:	b087      	sub	sp, #28
 80174ac:	af00      	add	r7, sp, #0
 80174ae:	6078      	str	r0, [r7, #4]
 80174b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80174b2:	687b      	ldr	r3, [r7, #4]
 80174b4:	6a1b      	ldr	r3, [r3, #32]
 80174b6:	f023 0201 	bic.w	r2, r3, #1
 80174ba:	687b      	ldr	r3, [r7, #4]
 80174bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	6a1b      	ldr	r3, [r3, #32]
 80174c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	685b      	ldr	r3, [r3, #4]
 80174c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	699b      	ldr	r3, [r3, #24]
 80174ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80174d0:	68fa      	ldr	r2, [r7, #12]
 80174d2:	4b37      	ldr	r3, [pc, #220]	; (80175b0 <TIM_OC1_SetConfig+0x108>)
 80174d4:	4013      	ands	r3, r2
 80174d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80174d8:	68fb      	ldr	r3, [r7, #12]
 80174da:	f023 0303 	bic.w	r3, r3, #3
 80174de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80174e0:	683b      	ldr	r3, [r7, #0]
 80174e2:	681b      	ldr	r3, [r3, #0]
 80174e4:	68fa      	ldr	r2, [r7, #12]
 80174e6:	4313      	orrs	r3, r2
 80174e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80174ea:	697b      	ldr	r3, [r7, #20]
 80174ec:	f023 0302 	bic.w	r3, r3, #2
 80174f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80174f2:	683b      	ldr	r3, [r7, #0]
 80174f4:	689b      	ldr	r3, [r3, #8]
 80174f6:	697a      	ldr	r2, [r7, #20]
 80174f8:	4313      	orrs	r3, r2
 80174fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	4a2d      	ldr	r2, [pc, #180]	; (80175b4 <TIM_OC1_SetConfig+0x10c>)
 8017500:	4293      	cmp	r3, r2
 8017502:	d00f      	beq.n	8017524 <TIM_OC1_SetConfig+0x7c>
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	4a2c      	ldr	r2, [pc, #176]	; (80175b8 <TIM_OC1_SetConfig+0x110>)
 8017508:	4293      	cmp	r3, r2
 801750a:	d00b      	beq.n	8017524 <TIM_OC1_SetConfig+0x7c>
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	4a2b      	ldr	r2, [pc, #172]	; (80175bc <TIM_OC1_SetConfig+0x114>)
 8017510:	4293      	cmp	r3, r2
 8017512:	d007      	beq.n	8017524 <TIM_OC1_SetConfig+0x7c>
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	4a2a      	ldr	r2, [pc, #168]	; (80175c0 <TIM_OC1_SetConfig+0x118>)
 8017518:	4293      	cmp	r3, r2
 801751a:	d003      	beq.n	8017524 <TIM_OC1_SetConfig+0x7c>
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	4a29      	ldr	r2, [pc, #164]	; (80175c4 <TIM_OC1_SetConfig+0x11c>)
 8017520:	4293      	cmp	r3, r2
 8017522:	d10c      	bne.n	801753e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8017524:	697b      	ldr	r3, [r7, #20]
 8017526:	f023 0308 	bic.w	r3, r3, #8
 801752a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801752c:	683b      	ldr	r3, [r7, #0]
 801752e:	68db      	ldr	r3, [r3, #12]
 8017530:	697a      	ldr	r2, [r7, #20]
 8017532:	4313      	orrs	r3, r2
 8017534:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8017536:	697b      	ldr	r3, [r7, #20]
 8017538:	f023 0304 	bic.w	r3, r3, #4
 801753c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	4a1c      	ldr	r2, [pc, #112]	; (80175b4 <TIM_OC1_SetConfig+0x10c>)
 8017542:	4293      	cmp	r3, r2
 8017544:	d00f      	beq.n	8017566 <TIM_OC1_SetConfig+0xbe>
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	4a1b      	ldr	r2, [pc, #108]	; (80175b8 <TIM_OC1_SetConfig+0x110>)
 801754a:	4293      	cmp	r3, r2
 801754c:	d00b      	beq.n	8017566 <TIM_OC1_SetConfig+0xbe>
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	4a1a      	ldr	r2, [pc, #104]	; (80175bc <TIM_OC1_SetConfig+0x114>)
 8017552:	4293      	cmp	r3, r2
 8017554:	d007      	beq.n	8017566 <TIM_OC1_SetConfig+0xbe>
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	4a19      	ldr	r2, [pc, #100]	; (80175c0 <TIM_OC1_SetConfig+0x118>)
 801755a:	4293      	cmp	r3, r2
 801755c:	d003      	beq.n	8017566 <TIM_OC1_SetConfig+0xbe>
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	4a18      	ldr	r2, [pc, #96]	; (80175c4 <TIM_OC1_SetConfig+0x11c>)
 8017562:	4293      	cmp	r3, r2
 8017564:	d111      	bne.n	801758a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8017566:	693b      	ldr	r3, [r7, #16]
 8017568:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801756c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801756e:	693b      	ldr	r3, [r7, #16]
 8017570:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8017574:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8017576:	683b      	ldr	r3, [r7, #0]
 8017578:	695b      	ldr	r3, [r3, #20]
 801757a:	693a      	ldr	r2, [r7, #16]
 801757c:	4313      	orrs	r3, r2
 801757e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8017580:	683b      	ldr	r3, [r7, #0]
 8017582:	699b      	ldr	r3, [r3, #24]
 8017584:	693a      	ldr	r2, [r7, #16]
 8017586:	4313      	orrs	r3, r2
 8017588:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	693a      	ldr	r2, [r7, #16]
 801758e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	68fa      	ldr	r2, [r7, #12]
 8017594:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8017596:	683b      	ldr	r3, [r7, #0]
 8017598:	685a      	ldr	r2, [r3, #4]
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	697a      	ldr	r2, [r7, #20]
 80175a2:	621a      	str	r2, [r3, #32]
}
 80175a4:	bf00      	nop
 80175a6:	371c      	adds	r7, #28
 80175a8:	46bd      	mov	sp, r7
 80175aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175ae:	4770      	bx	lr
 80175b0:	fffeff8f 	.word	0xfffeff8f
 80175b4:	40010000 	.word	0x40010000
 80175b8:	40010400 	.word	0x40010400
 80175bc:	40014000 	.word	0x40014000
 80175c0:	40014400 	.word	0x40014400
 80175c4:	40014800 	.word	0x40014800

080175c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80175c8:	b480      	push	{r7}
 80175ca:	b087      	sub	sp, #28
 80175cc:	af00      	add	r7, sp, #0
 80175ce:	6078      	str	r0, [r7, #4]
 80175d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	6a1b      	ldr	r3, [r3, #32]
 80175d6:	f023 0210 	bic.w	r2, r3, #16
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	6a1b      	ldr	r3, [r3, #32]
 80175e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	685b      	ldr	r3, [r3, #4]
 80175e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	699b      	ldr	r3, [r3, #24]
 80175ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80175f0:	68fa      	ldr	r2, [r7, #12]
 80175f2:	4b34      	ldr	r3, [pc, #208]	; (80176c4 <TIM_OC2_SetConfig+0xfc>)
 80175f4:	4013      	ands	r3, r2
 80175f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80175f8:	68fb      	ldr	r3, [r7, #12]
 80175fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80175fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017600:	683b      	ldr	r3, [r7, #0]
 8017602:	681b      	ldr	r3, [r3, #0]
 8017604:	021b      	lsls	r3, r3, #8
 8017606:	68fa      	ldr	r2, [r7, #12]
 8017608:	4313      	orrs	r3, r2
 801760a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801760c:	697b      	ldr	r3, [r7, #20]
 801760e:	f023 0320 	bic.w	r3, r3, #32
 8017612:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8017614:	683b      	ldr	r3, [r7, #0]
 8017616:	689b      	ldr	r3, [r3, #8]
 8017618:	011b      	lsls	r3, r3, #4
 801761a:	697a      	ldr	r2, [r7, #20]
 801761c:	4313      	orrs	r3, r2
 801761e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	4a29      	ldr	r2, [pc, #164]	; (80176c8 <TIM_OC2_SetConfig+0x100>)
 8017624:	4293      	cmp	r3, r2
 8017626:	d003      	beq.n	8017630 <TIM_OC2_SetConfig+0x68>
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	4a28      	ldr	r2, [pc, #160]	; (80176cc <TIM_OC2_SetConfig+0x104>)
 801762c:	4293      	cmp	r3, r2
 801762e:	d10d      	bne.n	801764c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8017630:	697b      	ldr	r3, [r7, #20]
 8017632:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017636:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8017638:	683b      	ldr	r3, [r7, #0]
 801763a:	68db      	ldr	r3, [r3, #12]
 801763c:	011b      	lsls	r3, r3, #4
 801763e:	697a      	ldr	r2, [r7, #20]
 8017640:	4313      	orrs	r3, r2
 8017642:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8017644:	697b      	ldr	r3, [r7, #20]
 8017646:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801764a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	4a1e      	ldr	r2, [pc, #120]	; (80176c8 <TIM_OC2_SetConfig+0x100>)
 8017650:	4293      	cmp	r3, r2
 8017652:	d00f      	beq.n	8017674 <TIM_OC2_SetConfig+0xac>
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	4a1d      	ldr	r2, [pc, #116]	; (80176cc <TIM_OC2_SetConfig+0x104>)
 8017658:	4293      	cmp	r3, r2
 801765a:	d00b      	beq.n	8017674 <TIM_OC2_SetConfig+0xac>
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	4a1c      	ldr	r2, [pc, #112]	; (80176d0 <TIM_OC2_SetConfig+0x108>)
 8017660:	4293      	cmp	r3, r2
 8017662:	d007      	beq.n	8017674 <TIM_OC2_SetConfig+0xac>
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	4a1b      	ldr	r2, [pc, #108]	; (80176d4 <TIM_OC2_SetConfig+0x10c>)
 8017668:	4293      	cmp	r3, r2
 801766a:	d003      	beq.n	8017674 <TIM_OC2_SetConfig+0xac>
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	4a1a      	ldr	r2, [pc, #104]	; (80176d8 <TIM_OC2_SetConfig+0x110>)
 8017670:	4293      	cmp	r3, r2
 8017672:	d113      	bne.n	801769c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8017674:	693b      	ldr	r3, [r7, #16]
 8017676:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801767a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801767c:	693b      	ldr	r3, [r7, #16]
 801767e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8017682:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8017684:	683b      	ldr	r3, [r7, #0]
 8017686:	695b      	ldr	r3, [r3, #20]
 8017688:	009b      	lsls	r3, r3, #2
 801768a:	693a      	ldr	r2, [r7, #16]
 801768c:	4313      	orrs	r3, r2
 801768e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8017690:	683b      	ldr	r3, [r7, #0]
 8017692:	699b      	ldr	r3, [r3, #24]
 8017694:	009b      	lsls	r3, r3, #2
 8017696:	693a      	ldr	r2, [r7, #16]
 8017698:	4313      	orrs	r3, r2
 801769a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	693a      	ldr	r2, [r7, #16]
 80176a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	68fa      	ldr	r2, [r7, #12]
 80176a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80176a8:	683b      	ldr	r3, [r7, #0]
 80176aa:	685a      	ldr	r2, [r3, #4]
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	697a      	ldr	r2, [r7, #20]
 80176b4:	621a      	str	r2, [r3, #32]
}
 80176b6:	bf00      	nop
 80176b8:	371c      	adds	r7, #28
 80176ba:	46bd      	mov	sp, r7
 80176bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176c0:	4770      	bx	lr
 80176c2:	bf00      	nop
 80176c4:	feff8fff 	.word	0xfeff8fff
 80176c8:	40010000 	.word	0x40010000
 80176cc:	40010400 	.word	0x40010400
 80176d0:	40014000 	.word	0x40014000
 80176d4:	40014400 	.word	0x40014400
 80176d8:	40014800 	.word	0x40014800

080176dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80176dc:	b480      	push	{r7}
 80176de:	b087      	sub	sp, #28
 80176e0:	af00      	add	r7, sp, #0
 80176e2:	6078      	str	r0, [r7, #4]
 80176e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	6a1b      	ldr	r3, [r3, #32]
 80176ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	6a1b      	ldr	r3, [r3, #32]
 80176f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	685b      	ldr	r3, [r3, #4]
 80176fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	69db      	ldr	r3, [r3, #28]
 8017702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8017704:	68fb      	ldr	r3, [r7, #12]
 8017706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801770a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801770c:	68fb      	ldr	r3, [r7, #12]
 801770e:	f023 0303 	bic.w	r3, r3, #3
 8017712:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8017714:	683b      	ldr	r3, [r7, #0]
 8017716:	681b      	ldr	r3, [r3, #0]
 8017718:	68fa      	ldr	r2, [r7, #12]
 801771a:	4313      	orrs	r3, r2
 801771c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801771e:	697b      	ldr	r3, [r7, #20]
 8017720:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8017724:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8017726:	683b      	ldr	r3, [r7, #0]
 8017728:	689b      	ldr	r3, [r3, #8]
 801772a:	021b      	lsls	r3, r3, #8
 801772c:	697a      	ldr	r2, [r7, #20]
 801772e:	4313      	orrs	r3, r2
 8017730:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	4a27      	ldr	r2, [pc, #156]	; (80177d4 <TIM_OC3_SetConfig+0xf8>)
 8017736:	4293      	cmp	r3, r2
 8017738:	d003      	beq.n	8017742 <TIM_OC3_SetConfig+0x66>
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	4a26      	ldr	r2, [pc, #152]	; (80177d8 <TIM_OC3_SetConfig+0xfc>)
 801773e:	4293      	cmp	r3, r2
 8017740:	d10d      	bne.n	801775e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8017742:	697b      	ldr	r3, [r7, #20]
 8017744:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8017748:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801774a:	683b      	ldr	r3, [r7, #0]
 801774c:	68db      	ldr	r3, [r3, #12]
 801774e:	021b      	lsls	r3, r3, #8
 8017750:	697a      	ldr	r2, [r7, #20]
 8017752:	4313      	orrs	r3, r2
 8017754:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8017756:	697b      	ldr	r3, [r7, #20]
 8017758:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801775c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	4a1c      	ldr	r2, [pc, #112]	; (80177d4 <TIM_OC3_SetConfig+0xf8>)
 8017762:	4293      	cmp	r3, r2
 8017764:	d00f      	beq.n	8017786 <TIM_OC3_SetConfig+0xaa>
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	4a1b      	ldr	r2, [pc, #108]	; (80177d8 <TIM_OC3_SetConfig+0xfc>)
 801776a:	4293      	cmp	r3, r2
 801776c:	d00b      	beq.n	8017786 <TIM_OC3_SetConfig+0xaa>
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	4a1a      	ldr	r2, [pc, #104]	; (80177dc <TIM_OC3_SetConfig+0x100>)
 8017772:	4293      	cmp	r3, r2
 8017774:	d007      	beq.n	8017786 <TIM_OC3_SetConfig+0xaa>
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	4a19      	ldr	r2, [pc, #100]	; (80177e0 <TIM_OC3_SetConfig+0x104>)
 801777a:	4293      	cmp	r3, r2
 801777c:	d003      	beq.n	8017786 <TIM_OC3_SetConfig+0xaa>
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	4a18      	ldr	r2, [pc, #96]	; (80177e4 <TIM_OC3_SetConfig+0x108>)
 8017782:	4293      	cmp	r3, r2
 8017784:	d113      	bne.n	80177ae <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8017786:	693b      	ldr	r3, [r7, #16]
 8017788:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801778c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801778e:	693b      	ldr	r3, [r7, #16]
 8017790:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8017794:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8017796:	683b      	ldr	r3, [r7, #0]
 8017798:	695b      	ldr	r3, [r3, #20]
 801779a:	011b      	lsls	r3, r3, #4
 801779c:	693a      	ldr	r2, [r7, #16]
 801779e:	4313      	orrs	r3, r2
 80177a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80177a2:	683b      	ldr	r3, [r7, #0]
 80177a4:	699b      	ldr	r3, [r3, #24]
 80177a6:	011b      	lsls	r3, r3, #4
 80177a8:	693a      	ldr	r2, [r7, #16]
 80177aa:	4313      	orrs	r3, r2
 80177ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	693a      	ldr	r2, [r7, #16]
 80177b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	68fa      	ldr	r2, [r7, #12]
 80177b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80177ba:	683b      	ldr	r3, [r7, #0]
 80177bc:	685a      	ldr	r2, [r3, #4]
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	697a      	ldr	r2, [r7, #20]
 80177c6:	621a      	str	r2, [r3, #32]
}
 80177c8:	bf00      	nop
 80177ca:	371c      	adds	r7, #28
 80177cc:	46bd      	mov	sp, r7
 80177ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177d2:	4770      	bx	lr
 80177d4:	40010000 	.word	0x40010000
 80177d8:	40010400 	.word	0x40010400
 80177dc:	40014000 	.word	0x40014000
 80177e0:	40014400 	.word	0x40014400
 80177e4:	40014800 	.word	0x40014800

080177e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80177e8:	b480      	push	{r7}
 80177ea:	b087      	sub	sp, #28
 80177ec:	af00      	add	r7, sp, #0
 80177ee:	6078      	str	r0, [r7, #4]
 80177f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	6a1b      	ldr	r3, [r3, #32]
 80177f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	6a1b      	ldr	r3, [r3, #32]
 8017802:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	685b      	ldr	r3, [r3, #4]
 8017808:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	69db      	ldr	r3, [r3, #28]
 801780e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8017810:	68fb      	ldr	r3, [r7, #12]
 8017812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8017816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8017818:	68fb      	ldr	r3, [r7, #12]
 801781a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801781e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017820:	683b      	ldr	r3, [r7, #0]
 8017822:	681b      	ldr	r3, [r3, #0]
 8017824:	021b      	lsls	r3, r3, #8
 8017826:	68fa      	ldr	r2, [r7, #12]
 8017828:	4313      	orrs	r3, r2
 801782a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801782c:	693b      	ldr	r3, [r7, #16]
 801782e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8017832:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8017834:	683b      	ldr	r3, [r7, #0]
 8017836:	689b      	ldr	r3, [r3, #8]
 8017838:	031b      	lsls	r3, r3, #12
 801783a:	693a      	ldr	r2, [r7, #16]
 801783c:	4313      	orrs	r3, r2
 801783e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	4a18      	ldr	r2, [pc, #96]	; (80178a4 <TIM_OC4_SetConfig+0xbc>)
 8017844:	4293      	cmp	r3, r2
 8017846:	d00f      	beq.n	8017868 <TIM_OC4_SetConfig+0x80>
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	4a17      	ldr	r2, [pc, #92]	; (80178a8 <TIM_OC4_SetConfig+0xc0>)
 801784c:	4293      	cmp	r3, r2
 801784e:	d00b      	beq.n	8017868 <TIM_OC4_SetConfig+0x80>
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	4a16      	ldr	r2, [pc, #88]	; (80178ac <TIM_OC4_SetConfig+0xc4>)
 8017854:	4293      	cmp	r3, r2
 8017856:	d007      	beq.n	8017868 <TIM_OC4_SetConfig+0x80>
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	4a15      	ldr	r2, [pc, #84]	; (80178b0 <TIM_OC4_SetConfig+0xc8>)
 801785c:	4293      	cmp	r3, r2
 801785e:	d003      	beq.n	8017868 <TIM_OC4_SetConfig+0x80>
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	4a14      	ldr	r2, [pc, #80]	; (80178b4 <TIM_OC4_SetConfig+0xcc>)
 8017864:	4293      	cmp	r3, r2
 8017866:	d109      	bne.n	801787c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8017868:	697b      	ldr	r3, [r7, #20]
 801786a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801786e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8017870:	683b      	ldr	r3, [r7, #0]
 8017872:	695b      	ldr	r3, [r3, #20]
 8017874:	019b      	lsls	r3, r3, #6
 8017876:	697a      	ldr	r2, [r7, #20]
 8017878:	4313      	orrs	r3, r2
 801787a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	697a      	ldr	r2, [r7, #20]
 8017880:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	68fa      	ldr	r2, [r7, #12]
 8017886:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8017888:	683b      	ldr	r3, [r7, #0]
 801788a:	685a      	ldr	r2, [r3, #4]
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	693a      	ldr	r2, [r7, #16]
 8017894:	621a      	str	r2, [r3, #32]
}
 8017896:	bf00      	nop
 8017898:	371c      	adds	r7, #28
 801789a:	46bd      	mov	sp, r7
 801789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178a0:	4770      	bx	lr
 80178a2:	bf00      	nop
 80178a4:	40010000 	.word	0x40010000
 80178a8:	40010400 	.word	0x40010400
 80178ac:	40014000 	.word	0x40014000
 80178b0:	40014400 	.word	0x40014400
 80178b4:	40014800 	.word	0x40014800

080178b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80178b8:	b480      	push	{r7}
 80178ba:	b087      	sub	sp, #28
 80178bc:	af00      	add	r7, sp, #0
 80178be:	6078      	str	r0, [r7, #4]
 80178c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80178c2:	687b      	ldr	r3, [r7, #4]
 80178c4:	6a1b      	ldr	r3, [r3, #32]
 80178c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	6a1b      	ldr	r3, [r3, #32]
 80178d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	685b      	ldr	r3, [r3, #4]
 80178d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80178de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80178e0:	68fb      	ldr	r3, [r7, #12]
 80178e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80178e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80178e8:	683b      	ldr	r3, [r7, #0]
 80178ea:	681b      	ldr	r3, [r3, #0]
 80178ec:	68fa      	ldr	r2, [r7, #12]
 80178ee:	4313      	orrs	r3, r2
 80178f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80178f2:	693b      	ldr	r3, [r7, #16]
 80178f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80178f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80178fa:	683b      	ldr	r3, [r7, #0]
 80178fc:	689b      	ldr	r3, [r3, #8]
 80178fe:	041b      	lsls	r3, r3, #16
 8017900:	693a      	ldr	r2, [r7, #16]
 8017902:	4313      	orrs	r3, r2
 8017904:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	4a17      	ldr	r2, [pc, #92]	; (8017968 <TIM_OC5_SetConfig+0xb0>)
 801790a:	4293      	cmp	r3, r2
 801790c:	d00f      	beq.n	801792e <TIM_OC5_SetConfig+0x76>
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	4a16      	ldr	r2, [pc, #88]	; (801796c <TIM_OC5_SetConfig+0xb4>)
 8017912:	4293      	cmp	r3, r2
 8017914:	d00b      	beq.n	801792e <TIM_OC5_SetConfig+0x76>
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	4a15      	ldr	r2, [pc, #84]	; (8017970 <TIM_OC5_SetConfig+0xb8>)
 801791a:	4293      	cmp	r3, r2
 801791c:	d007      	beq.n	801792e <TIM_OC5_SetConfig+0x76>
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	4a14      	ldr	r2, [pc, #80]	; (8017974 <TIM_OC5_SetConfig+0xbc>)
 8017922:	4293      	cmp	r3, r2
 8017924:	d003      	beq.n	801792e <TIM_OC5_SetConfig+0x76>
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	4a13      	ldr	r2, [pc, #76]	; (8017978 <TIM_OC5_SetConfig+0xc0>)
 801792a:	4293      	cmp	r3, r2
 801792c:	d109      	bne.n	8017942 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801792e:	697b      	ldr	r3, [r7, #20]
 8017930:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8017934:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8017936:	683b      	ldr	r3, [r7, #0]
 8017938:	695b      	ldr	r3, [r3, #20]
 801793a:	021b      	lsls	r3, r3, #8
 801793c:	697a      	ldr	r2, [r7, #20]
 801793e:	4313      	orrs	r3, r2
 8017940:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	697a      	ldr	r2, [r7, #20]
 8017946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	68fa      	ldr	r2, [r7, #12]
 801794c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801794e:	683b      	ldr	r3, [r7, #0]
 8017950:	685a      	ldr	r2, [r3, #4]
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	693a      	ldr	r2, [r7, #16]
 801795a:	621a      	str	r2, [r3, #32]
}
 801795c:	bf00      	nop
 801795e:	371c      	adds	r7, #28
 8017960:	46bd      	mov	sp, r7
 8017962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017966:	4770      	bx	lr
 8017968:	40010000 	.word	0x40010000
 801796c:	40010400 	.word	0x40010400
 8017970:	40014000 	.word	0x40014000
 8017974:	40014400 	.word	0x40014400
 8017978:	40014800 	.word	0x40014800

0801797c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801797c:	b480      	push	{r7}
 801797e:	b087      	sub	sp, #28
 8017980:	af00      	add	r7, sp, #0
 8017982:	6078      	str	r0, [r7, #4]
 8017984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	6a1b      	ldr	r3, [r3, #32]
 801798a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	6a1b      	ldr	r3, [r3, #32]
 8017996:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	685b      	ldr	r3, [r3, #4]
 801799c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80179a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80179a4:	68fb      	ldr	r3, [r7, #12]
 80179a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80179aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80179ac:	683b      	ldr	r3, [r7, #0]
 80179ae:	681b      	ldr	r3, [r3, #0]
 80179b0:	021b      	lsls	r3, r3, #8
 80179b2:	68fa      	ldr	r2, [r7, #12]
 80179b4:	4313      	orrs	r3, r2
 80179b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80179b8:	693b      	ldr	r3, [r7, #16]
 80179ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80179be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80179c0:	683b      	ldr	r3, [r7, #0]
 80179c2:	689b      	ldr	r3, [r3, #8]
 80179c4:	051b      	lsls	r3, r3, #20
 80179c6:	693a      	ldr	r2, [r7, #16]
 80179c8:	4313      	orrs	r3, r2
 80179ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	4a18      	ldr	r2, [pc, #96]	; (8017a30 <TIM_OC6_SetConfig+0xb4>)
 80179d0:	4293      	cmp	r3, r2
 80179d2:	d00f      	beq.n	80179f4 <TIM_OC6_SetConfig+0x78>
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	4a17      	ldr	r2, [pc, #92]	; (8017a34 <TIM_OC6_SetConfig+0xb8>)
 80179d8:	4293      	cmp	r3, r2
 80179da:	d00b      	beq.n	80179f4 <TIM_OC6_SetConfig+0x78>
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	4a16      	ldr	r2, [pc, #88]	; (8017a38 <TIM_OC6_SetConfig+0xbc>)
 80179e0:	4293      	cmp	r3, r2
 80179e2:	d007      	beq.n	80179f4 <TIM_OC6_SetConfig+0x78>
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	4a15      	ldr	r2, [pc, #84]	; (8017a3c <TIM_OC6_SetConfig+0xc0>)
 80179e8:	4293      	cmp	r3, r2
 80179ea:	d003      	beq.n	80179f4 <TIM_OC6_SetConfig+0x78>
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	4a14      	ldr	r2, [pc, #80]	; (8017a40 <TIM_OC6_SetConfig+0xc4>)
 80179f0:	4293      	cmp	r3, r2
 80179f2:	d109      	bne.n	8017a08 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80179f4:	697b      	ldr	r3, [r7, #20]
 80179f6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80179fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80179fc:	683b      	ldr	r3, [r7, #0]
 80179fe:	695b      	ldr	r3, [r3, #20]
 8017a00:	029b      	lsls	r3, r3, #10
 8017a02:	697a      	ldr	r2, [r7, #20]
 8017a04:	4313      	orrs	r3, r2
 8017a06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	697a      	ldr	r2, [r7, #20]
 8017a0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	68fa      	ldr	r2, [r7, #12]
 8017a12:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8017a14:	683b      	ldr	r3, [r7, #0]
 8017a16:	685a      	ldr	r2, [r3, #4]
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	693a      	ldr	r2, [r7, #16]
 8017a20:	621a      	str	r2, [r3, #32]
}
 8017a22:	bf00      	nop
 8017a24:	371c      	adds	r7, #28
 8017a26:	46bd      	mov	sp, r7
 8017a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a2c:	4770      	bx	lr
 8017a2e:	bf00      	nop
 8017a30:	40010000 	.word	0x40010000
 8017a34:	40010400 	.word	0x40010400
 8017a38:	40014000 	.word	0x40014000
 8017a3c:	40014400 	.word	0x40014400
 8017a40:	40014800 	.word	0x40014800

08017a44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8017a44:	b480      	push	{r7}
 8017a46:	b087      	sub	sp, #28
 8017a48:	af00      	add	r7, sp, #0
 8017a4a:	60f8      	str	r0, [r7, #12]
 8017a4c:	60b9      	str	r1, [r7, #8]
 8017a4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8017a50:	68bb      	ldr	r3, [r7, #8]
 8017a52:	f003 031f 	and.w	r3, r3, #31
 8017a56:	2201      	movs	r2, #1
 8017a58:	fa02 f303 	lsl.w	r3, r2, r3
 8017a5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8017a5e:	68fb      	ldr	r3, [r7, #12]
 8017a60:	6a1a      	ldr	r2, [r3, #32]
 8017a62:	697b      	ldr	r3, [r7, #20]
 8017a64:	43db      	mvns	r3, r3
 8017a66:	401a      	ands	r2, r3
 8017a68:	68fb      	ldr	r3, [r7, #12]
 8017a6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8017a6c:	68fb      	ldr	r3, [r7, #12]
 8017a6e:	6a1a      	ldr	r2, [r3, #32]
 8017a70:	68bb      	ldr	r3, [r7, #8]
 8017a72:	f003 031f 	and.w	r3, r3, #31
 8017a76:	6879      	ldr	r1, [r7, #4]
 8017a78:	fa01 f303 	lsl.w	r3, r1, r3
 8017a7c:	431a      	orrs	r2, r3
 8017a7e:	68fb      	ldr	r3, [r7, #12]
 8017a80:	621a      	str	r2, [r3, #32]
}
 8017a82:	bf00      	nop
 8017a84:	371c      	adds	r7, #28
 8017a86:	46bd      	mov	sp, r7
 8017a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a8c:	4770      	bx	lr
	...

08017a90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8017a90:	b480      	push	{r7}
 8017a92:	b085      	sub	sp, #20
 8017a94:	af00      	add	r7, sp, #0
 8017a96:	6078      	str	r0, [r7, #4]
 8017a98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8017a9a:	687b      	ldr	r3, [r7, #4]
 8017a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017aa0:	2b01      	cmp	r3, #1
 8017aa2:	d101      	bne.n	8017aa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8017aa4:	2302      	movs	r3, #2
 8017aa6:	e068      	b.n	8017b7a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	2201      	movs	r2, #1
 8017aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	2202      	movs	r2, #2
 8017ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	681b      	ldr	r3, [r3, #0]
 8017abc:	685b      	ldr	r3, [r3, #4]
 8017abe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	681b      	ldr	r3, [r3, #0]
 8017ac4:	689b      	ldr	r3, [r3, #8]
 8017ac6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	681b      	ldr	r3, [r3, #0]
 8017acc:	4a2e      	ldr	r2, [pc, #184]	; (8017b88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8017ace:	4293      	cmp	r3, r2
 8017ad0:	d004      	beq.n	8017adc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	681b      	ldr	r3, [r3, #0]
 8017ad6:	4a2d      	ldr	r2, [pc, #180]	; (8017b8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8017ad8:	4293      	cmp	r3, r2
 8017ada:	d108      	bne.n	8017aee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8017adc:	68fb      	ldr	r3, [r7, #12]
 8017ade:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8017ae2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8017ae4:	683b      	ldr	r3, [r7, #0]
 8017ae6:	685b      	ldr	r3, [r3, #4]
 8017ae8:	68fa      	ldr	r2, [r7, #12]
 8017aea:	4313      	orrs	r3, r2
 8017aec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8017aee:	68fb      	ldr	r3, [r7, #12]
 8017af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017af4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8017af6:	683b      	ldr	r3, [r7, #0]
 8017af8:	681b      	ldr	r3, [r3, #0]
 8017afa:	68fa      	ldr	r2, [r7, #12]
 8017afc:	4313      	orrs	r3, r2
 8017afe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	681b      	ldr	r3, [r3, #0]
 8017b04:	68fa      	ldr	r2, [r7, #12]
 8017b06:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	681b      	ldr	r3, [r3, #0]
 8017b0c:	4a1e      	ldr	r2, [pc, #120]	; (8017b88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8017b0e:	4293      	cmp	r3, r2
 8017b10:	d01d      	beq.n	8017b4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	681b      	ldr	r3, [r3, #0]
 8017b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017b1a:	d018      	beq.n	8017b4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	681b      	ldr	r3, [r3, #0]
 8017b20:	4a1b      	ldr	r2, [pc, #108]	; (8017b90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8017b22:	4293      	cmp	r3, r2
 8017b24:	d013      	beq.n	8017b4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	681b      	ldr	r3, [r3, #0]
 8017b2a:	4a1a      	ldr	r2, [pc, #104]	; (8017b94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8017b2c:	4293      	cmp	r3, r2
 8017b2e:	d00e      	beq.n	8017b4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	681b      	ldr	r3, [r3, #0]
 8017b34:	4a18      	ldr	r2, [pc, #96]	; (8017b98 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8017b36:	4293      	cmp	r3, r2
 8017b38:	d009      	beq.n	8017b4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	681b      	ldr	r3, [r3, #0]
 8017b3e:	4a13      	ldr	r2, [pc, #76]	; (8017b8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8017b40:	4293      	cmp	r3, r2
 8017b42:	d004      	beq.n	8017b4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	681b      	ldr	r3, [r3, #0]
 8017b48:	4a14      	ldr	r2, [pc, #80]	; (8017b9c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8017b4a:	4293      	cmp	r3, r2
 8017b4c:	d10c      	bne.n	8017b68 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8017b4e:	68bb      	ldr	r3, [r7, #8]
 8017b50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017b54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8017b56:	683b      	ldr	r3, [r7, #0]
 8017b58:	689b      	ldr	r3, [r3, #8]
 8017b5a:	68ba      	ldr	r2, [r7, #8]
 8017b5c:	4313      	orrs	r3, r2
 8017b5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	681b      	ldr	r3, [r3, #0]
 8017b64:	68ba      	ldr	r2, [r7, #8]
 8017b66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8017b68:	687b      	ldr	r3, [r7, #4]
 8017b6a:	2201      	movs	r2, #1
 8017b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	2200      	movs	r2, #0
 8017b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8017b78:	2300      	movs	r3, #0
}
 8017b7a:	4618      	mov	r0, r3
 8017b7c:	3714      	adds	r7, #20
 8017b7e:	46bd      	mov	sp, r7
 8017b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b84:	4770      	bx	lr
 8017b86:	bf00      	nop
 8017b88:	40010000 	.word	0x40010000
 8017b8c:	40010400 	.word	0x40010400
 8017b90:	40000400 	.word	0x40000400
 8017b94:	40000800 	.word	0x40000800
 8017b98:	40000c00 	.word	0x40000c00
 8017b9c:	40001800 	.word	0x40001800

08017ba0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8017ba0:	b480      	push	{r7}
 8017ba2:	b085      	sub	sp, #20
 8017ba4:	af00      	add	r7, sp, #0
 8017ba6:	6078      	str	r0, [r7, #4]
 8017ba8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8017baa:	2300      	movs	r3, #0
 8017bac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017bb4:	2b01      	cmp	r3, #1
 8017bb6:	d101      	bne.n	8017bbc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8017bb8:	2302      	movs	r3, #2
 8017bba:	e065      	b.n	8017c88 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	2201      	movs	r2, #1
 8017bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8017bc4:	68fb      	ldr	r3, [r7, #12]
 8017bc6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8017bca:	683b      	ldr	r3, [r7, #0]
 8017bcc:	68db      	ldr	r3, [r3, #12]
 8017bce:	4313      	orrs	r3, r2
 8017bd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8017bd2:	68fb      	ldr	r3, [r7, #12]
 8017bd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8017bd8:	683b      	ldr	r3, [r7, #0]
 8017bda:	689b      	ldr	r3, [r3, #8]
 8017bdc:	4313      	orrs	r3, r2
 8017bde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8017be0:	68fb      	ldr	r3, [r7, #12]
 8017be2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8017be6:	683b      	ldr	r3, [r7, #0]
 8017be8:	685b      	ldr	r3, [r3, #4]
 8017bea:	4313      	orrs	r3, r2
 8017bec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8017bee:	68fb      	ldr	r3, [r7, #12]
 8017bf0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8017bf4:	683b      	ldr	r3, [r7, #0]
 8017bf6:	681b      	ldr	r3, [r3, #0]
 8017bf8:	4313      	orrs	r3, r2
 8017bfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8017bfc:	68fb      	ldr	r3, [r7, #12]
 8017bfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8017c02:	683b      	ldr	r3, [r7, #0]
 8017c04:	691b      	ldr	r3, [r3, #16]
 8017c06:	4313      	orrs	r3, r2
 8017c08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8017c0a:	68fb      	ldr	r3, [r7, #12]
 8017c0c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8017c10:	683b      	ldr	r3, [r7, #0]
 8017c12:	695b      	ldr	r3, [r3, #20]
 8017c14:	4313      	orrs	r3, r2
 8017c16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8017c18:	68fb      	ldr	r3, [r7, #12]
 8017c1a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8017c1e:	683b      	ldr	r3, [r7, #0]
 8017c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017c22:	4313      	orrs	r3, r2
 8017c24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8017c26:	68fb      	ldr	r3, [r7, #12]
 8017c28:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8017c2c:	683b      	ldr	r3, [r7, #0]
 8017c2e:	699b      	ldr	r3, [r3, #24]
 8017c30:	041b      	lsls	r3, r3, #16
 8017c32:	4313      	orrs	r3, r2
 8017c34:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	681b      	ldr	r3, [r3, #0]
 8017c3a:	4a16      	ldr	r2, [pc, #88]	; (8017c94 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8017c3c:	4293      	cmp	r3, r2
 8017c3e:	d004      	beq.n	8017c4a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	681b      	ldr	r3, [r3, #0]
 8017c44:	4a14      	ldr	r2, [pc, #80]	; (8017c98 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8017c46:	4293      	cmp	r3, r2
 8017c48:	d115      	bne.n	8017c76 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8017c4a:	68fb      	ldr	r3, [r7, #12]
 8017c4c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8017c50:	683b      	ldr	r3, [r7, #0]
 8017c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c54:	051b      	lsls	r3, r3, #20
 8017c56:	4313      	orrs	r3, r2
 8017c58:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8017c5a:	68fb      	ldr	r3, [r7, #12]
 8017c5c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8017c60:	683b      	ldr	r3, [r7, #0]
 8017c62:	69db      	ldr	r3, [r3, #28]
 8017c64:	4313      	orrs	r3, r2
 8017c66:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8017c68:	68fb      	ldr	r3, [r7, #12]
 8017c6a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8017c6e:	683b      	ldr	r3, [r7, #0]
 8017c70:	6a1b      	ldr	r3, [r3, #32]
 8017c72:	4313      	orrs	r3, r2
 8017c74:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	681b      	ldr	r3, [r3, #0]
 8017c7a:	68fa      	ldr	r2, [r7, #12]
 8017c7c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	2200      	movs	r2, #0
 8017c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8017c86:	2300      	movs	r3, #0
}
 8017c88:	4618      	mov	r0, r3
 8017c8a:	3714      	adds	r7, #20
 8017c8c:	46bd      	mov	sp, r7
 8017c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c92:	4770      	bx	lr
 8017c94:	40010000 	.word	0x40010000
 8017c98:	40010400 	.word	0x40010400

08017c9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8017c9c:	b480      	push	{r7}
 8017c9e:	b083      	sub	sp, #12
 8017ca0:	af00      	add	r7, sp, #0
 8017ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8017ca4:	bf00      	nop
 8017ca6:	370c      	adds	r7, #12
 8017ca8:	46bd      	mov	sp, r7
 8017caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cae:	4770      	bx	lr

08017cb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8017cb0:	b480      	push	{r7}
 8017cb2:	b083      	sub	sp, #12
 8017cb4:	af00      	add	r7, sp, #0
 8017cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8017cb8:	bf00      	nop
 8017cba:	370c      	adds	r7, #12
 8017cbc:	46bd      	mov	sp, r7
 8017cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cc2:	4770      	bx	lr

08017cc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8017cc4:	b480      	push	{r7}
 8017cc6:	b083      	sub	sp, #12
 8017cc8:	af00      	add	r7, sp, #0
 8017cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8017ccc:	bf00      	nop
 8017cce:	370c      	adds	r7, #12
 8017cd0:	46bd      	mov	sp, r7
 8017cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cd6:	4770      	bx	lr

08017cd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8017cd8:	b580      	push	{r7, lr}
 8017cda:	b082      	sub	sp, #8
 8017cdc:	af00      	add	r7, sp, #0
 8017cde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	d101      	bne.n	8017cea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8017ce6:	2301      	movs	r3, #1
 8017ce8:	e042      	b.n	8017d70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8017cea:	687b      	ldr	r3, [r7, #4]
 8017cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017cf0:	2b00      	cmp	r3, #0
 8017cf2:	d106      	bne.n	8017d02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	2200      	movs	r2, #0
 8017cf8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8017cfc:	6878      	ldr	r0, [r7, #4]
 8017cfe:	f7ea f9c1 	bl	8002084 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	2224      	movs	r2, #36	; 0x24
 8017d06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8017d0a:	687b      	ldr	r3, [r7, #4]
 8017d0c:	681b      	ldr	r3, [r3, #0]
 8017d0e:	681a      	ldr	r2, [r3, #0]
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	681b      	ldr	r3, [r3, #0]
 8017d14:	f022 0201 	bic.w	r2, r2, #1
 8017d18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8017d1a:	6878      	ldr	r0, [r7, #4]
 8017d1c:	f000 f9c0 	bl	80180a0 <UART_SetConfig>
 8017d20:	4603      	mov	r3, r0
 8017d22:	2b01      	cmp	r3, #1
 8017d24:	d101      	bne.n	8017d2a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8017d26:	2301      	movs	r3, #1
 8017d28:	e022      	b.n	8017d70 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	d002      	beq.n	8017d38 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8017d32:	6878      	ldr	r0, [r7, #4]
 8017d34:	f002 fb32 	bl	801a39c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	681b      	ldr	r3, [r3, #0]
 8017d3c:	685a      	ldr	r2, [r3, #4]
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	681b      	ldr	r3, [r3, #0]
 8017d42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8017d46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	681b      	ldr	r3, [r3, #0]
 8017d4c:	689a      	ldr	r2, [r3, #8]
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	681b      	ldr	r3, [r3, #0]
 8017d52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8017d56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	681b      	ldr	r3, [r3, #0]
 8017d5c:	681a      	ldr	r2, [r3, #0]
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	681b      	ldr	r3, [r3, #0]
 8017d62:	f042 0201 	orr.w	r2, r2, #1
 8017d66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8017d68:	6878      	ldr	r0, [r7, #4]
 8017d6a:	f002 fbb9 	bl	801a4e0 <UART_CheckIdleState>
 8017d6e:	4603      	mov	r3, r0
}
 8017d70:	4618      	mov	r0, r3
 8017d72:	3708      	adds	r7, #8
 8017d74:	46bd      	mov	sp, r7
 8017d76:	bd80      	pop	{r7, pc}

08017d78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8017d78:	b580      	push	{r7, lr}
 8017d7a:	b088      	sub	sp, #32
 8017d7c:	af00      	add	r7, sp, #0
 8017d7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	681b      	ldr	r3, [r3, #0]
 8017d84:	69db      	ldr	r3, [r3, #28]
 8017d86:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	681b      	ldr	r3, [r3, #0]
 8017d8c:	681b      	ldr	r3, [r3, #0]
 8017d8e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	681b      	ldr	r3, [r3, #0]
 8017d94:	689b      	ldr	r3, [r3, #8]
 8017d96:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8017d98:	69fa      	ldr	r2, [r7, #28]
 8017d9a:	f640 030f 	movw	r3, #2063	; 0x80f
 8017d9e:	4013      	ands	r3, r2
 8017da0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8017da2:	693b      	ldr	r3, [r7, #16]
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	d118      	bne.n	8017dda <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8017da8:	69fb      	ldr	r3, [r7, #28]
 8017daa:	f003 0320 	and.w	r3, r3, #32
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	d013      	beq.n	8017dda <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8017db2:	69bb      	ldr	r3, [r7, #24]
 8017db4:	f003 0320 	and.w	r3, r3, #32
 8017db8:	2b00      	cmp	r3, #0
 8017dba:	d104      	bne.n	8017dc6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8017dbc:	697b      	ldr	r3, [r7, #20]
 8017dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	d009      	beq.n	8017dda <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8017dc6:	687b      	ldr	r3, [r7, #4]
 8017dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	f000 8145 	beq.w	801805a <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017dd4:	6878      	ldr	r0, [r7, #4]
 8017dd6:	4798      	blx	r3
      }
      return;
 8017dd8:	e13f      	b.n	801805a <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8017dda:	693b      	ldr	r3, [r7, #16]
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	f000 80e8 	beq.w	8017fb2 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8017de2:	697a      	ldr	r2, [r7, #20]
 8017de4:	4ba1      	ldr	r3, [pc, #644]	; (801806c <HAL_UART_IRQHandler+0x2f4>)
 8017de6:	4013      	ands	r3, r2
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	d105      	bne.n	8017df8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8017dec:	69ba      	ldr	r2, [r7, #24]
 8017dee:	4ba0      	ldr	r3, [pc, #640]	; (8018070 <HAL_UART_IRQHandler+0x2f8>)
 8017df0:	4013      	ands	r3, r2
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	f000 80dd 	beq.w	8017fb2 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8017df8:	69fb      	ldr	r3, [r7, #28]
 8017dfa:	f003 0301 	and.w	r3, r3, #1
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	d010      	beq.n	8017e24 <HAL_UART_IRQHandler+0xac>
 8017e02:	69bb      	ldr	r3, [r7, #24]
 8017e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	d00b      	beq.n	8017e24 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8017e0c:	687b      	ldr	r3, [r7, #4]
 8017e0e:	681b      	ldr	r3, [r3, #0]
 8017e10:	2201      	movs	r2, #1
 8017e12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8017e14:	687b      	ldr	r3, [r7, #4]
 8017e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017e1a:	f043 0201 	orr.w	r2, r3, #1
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017e24:	69fb      	ldr	r3, [r7, #28]
 8017e26:	f003 0302 	and.w	r3, r3, #2
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	d010      	beq.n	8017e50 <HAL_UART_IRQHandler+0xd8>
 8017e2e:	697b      	ldr	r3, [r7, #20]
 8017e30:	f003 0301 	and.w	r3, r3, #1
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	d00b      	beq.n	8017e50 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	681b      	ldr	r3, [r3, #0]
 8017e3c:	2202      	movs	r2, #2
 8017e3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017e46:	f043 0204 	orr.w	r2, r3, #4
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017e50:	69fb      	ldr	r3, [r7, #28]
 8017e52:	f003 0304 	and.w	r3, r3, #4
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	d010      	beq.n	8017e7c <HAL_UART_IRQHandler+0x104>
 8017e5a:	697b      	ldr	r3, [r7, #20]
 8017e5c:	f003 0301 	and.w	r3, r3, #1
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	d00b      	beq.n	8017e7c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8017e64:	687b      	ldr	r3, [r7, #4]
 8017e66:	681b      	ldr	r3, [r3, #0]
 8017e68:	2204      	movs	r2, #4
 8017e6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017e72:	f043 0202 	orr.w	r2, r3, #2
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8017e7c:	69fb      	ldr	r3, [r7, #28]
 8017e7e:	f003 0308 	and.w	r3, r3, #8
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	d015      	beq.n	8017eb2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8017e86:	69bb      	ldr	r3, [r7, #24]
 8017e88:	f003 0320 	and.w	r3, r3, #32
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	d104      	bne.n	8017e9a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8017e90:	697a      	ldr	r2, [r7, #20]
 8017e92:	4b76      	ldr	r3, [pc, #472]	; (801806c <HAL_UART_IRQHandler+0x2f4>)
 8017e94:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	d00b      	beq.n	8017eb2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8017e9a:	687b      	ldr	r3, [r7, #4]
 8017e9c:	681b      	ldr	r3, [r3, #0]
 8017e9e:	2208      	movs	r2, #8
 8017ea0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8017ea2:	687b      	ldr	r3, [r7, #4]
 8017ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017ea8:	f043 0208 	orr.w	r2, r3, #8
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8017eb2:	69fb      	ldr	r3, [r7, #28]
 8017eb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	d011      	beq.n	8017ee0 <HAL_UART_IRQHandler+0x168>
 8017ebc:	69bb      	ldr	r3, [r7, #24]
 8017ebe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	d00c      	beq.n	8017ee0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	681b      	ldr	r3, [r3, #0]
 8017eca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017ece:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017ed6:	f043 0220 	orr.w	r2, r3, #32
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	f000 80b9 	beq.w	801805e <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8017eec:	69fb      	ldr	r3, [r7, #28]
 8017eee:	f003 0320 	and.w	r3, r3, #32
 8017ef2:	2b00      	cmp	r3, #0
 8017ef4:	d011      	beq.n	8017f1a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8017ef6:	69bb      	ldr	r3, [r7, #24]
 8017ef8:	f003 0320 	and.w	r3, r3, #32
 8017efc:	2b00      	cmp	r3, #0
 8017efe:	d104      	bne.n	8017f0a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8017f00:	697b      	ldr	r3, [r7, #20]
 8017f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017f06:	2b00      	cmp	r3, #0
 8017f08:	d007      	beq.n	8017f1a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017f0e:	2b00      	cmp	r3, #0
 8017f10:	d003      	beq.n	8017f1a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017f16:	6878      	ldr	r0, [r7, #4]
 8017f18:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8017f1a:	687b      	ldr	r3, [r7, #4]
 8017f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017f20:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	681b      	ldr	r3, [r3, #0]
 8017f26:	689b      	ldr	r3, [r3, #8]
 8017f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017f2c:	2b40      	cmp	r3, #64	; 0x40
 8017f2e:	d004      	beq.n	8017f3a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8017f30:	68fb      	ldr	r3, [r7, #12]
 8017f32:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8017f36:	2b00      	cmp	r3, #0
 8017f38:	d031      	beq.n	8017f9e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8017f3a:	6878      	ldr	r0, [r7, #4]
 8017f3c:	f002 fb98 	bl	801a670 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	681b      	ldr	r3, [r3, #0]
 8017f44:	689b      	ldr	r3, [r3, #8]
 8017f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017f4a:	2b40      	cmp	r3, #64	; 0x40
 8017f4c:	d123      	bne.n	8017f96 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017f4e:	687b      	ldr	r3, [r7, #4]
 8017f50:	681b      	ldr	r3, [r3, #0]
 8017f52:	689a      	ldr	r2, [r3, #8]
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	681b      	ldr	r3, [r3, #0]
 8017f58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8017f5c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017f62:	2b00      	cmp	r3, #0
 8017f64:	d013      	beq.n	8017f8e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017f6a:	4a42      	ldr	r2, [pc, #264]	; (8018074 <HAL_UART_IRQHandler+0x2fc>)
 8017f6c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017f72:	4618      	mov	r0, r3
 8017f74:	f7fa fe14 	bl	8012ba0 <HAL_DMA_Abort_IT>
 8017f78:	4603      	mov	r3, r0
 8017f7a:	2b00      	cmp	r3, #0
 8017f7c:	d017      	beq.n	8017fae <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017f84:	687a      	ldr	r2, [r7, #4]
 8017f86:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8017f88:	4610      	mov	r0, r2
 8017f8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017f8c:	e00f      	b.n	8017fae <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8017f8e:	6878      	ldr	r0, [r7, #4]
 8017f90:	f000 f87c 	bl	801808c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017f94:	e00b      	b.n	8017fae <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8017f96:	6878      	ldr	r0, [r7, #4]
 8017f98:	f000 f878 	bl	801808c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017f9c:	e007      	b.n	8017fae <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8017f9e:	6878      	ldr	r0, [r7, #4]
 8017fa0:	f000 f874 	bl	801808c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	2200      	movs	r2, #0
 8017fa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8017fac:	e057      	b.n	801805e <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017fae:	bf00      	nop
    return;
 8017fb0:	e055      	b.n	801805e <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8017fb2:	69fb      	ldr	r3, [r7, #28]
 8017fb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	d00d      	beq.n	8017fd8 <HAL_UART_IRQHandler+0x260>
 8017fbc:	697b      	ldr	r3, [r7, #20]
 8017fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8017fc2:	2b00      	cmp	r3, #0
 8017fc4:	d008      	beq.n	8017fd8 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	681b      	ldr	r3, [r3, #0]
 8017fca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8017fce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8017fd0:	6878      	ldr	r0, [r7, #4]
 8017fd2:	f002 fba1 	bl	801a718 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8017fd6:	e045      	b.n	8018064 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8017fd8:	69fb      	ldr	r3, [r7, #28]
 8017fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017fde:	2b00      	cmp	r3, #0
 8017fe0:	d012      	beq.n	8018008 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8017fe2:	69bb      	ldr	r3, [r7, #24]
 8017fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d104      	bne.n	8017ff6 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8017fec:	697b      	ldr	r3, [r7, #20]
 8017fee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	d008      	beq.n	8018008 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	d031      	beq.n	8018062 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018002:	6878      	ldr	r0, [r7, #4]
 8018004:	4798      	blx	r3
    }
    return;
 8018006:	e02c      	b.n	8018062 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8018008:	69fb      	ldr	r3, [r7, #28]
 801800a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801800e:	2b00      	cmp	r3, #0
 8018010:	d008      	beq.n	8018024 <HAL_UART_IRQHandler+0x2ac>
 8018012:	69bb      	ldr	r3, [r7, #24]
 8018014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018018:	2b00      	cmp	r3, #0
 801801a:	d003      	beq.n	8018024 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 801801c:	6878      	ldr	r0, [r7, #4]
 801801e:	f002 fb61 	bl	801a6e4 <UART_EndTransmit_IT>
    return;
 8018022:	e01f      	b.n	8018064 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8018024:	69fb      	ldr	r3, [r7, #28]
 8018026:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801802a:	2b00      	cmp	r3, #0
 801802c:	d008      	beq.n	8018040 <HAL_UART_IRQHandler+0x2c8>
 801802e:	69bb      	ldr	r3, [r7, #24]
 8018030:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8018034:	2b00      	cmp	r3, #0
 8018036:	d003      	beq.n	8018040 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8018038:	6878      	ldr	r0, [r7, #4]
 801803a:	f002 fb81 	bl	801a740 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801803e:	e011      	b.n	8018064 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8018040:	69fb      	ldr	r3, [r7, #28]
 8018042:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8018046:	2b00      	cmp	r3, #0
 8018048:	d00c      	beq.n	8018064 <HAL_UART_IRQHandler+0x2ec>
 801804a:	69bb      	ldr	r3, [r7, #24]
 801804c:	2b00      	cmp	r3, #0
 801804e:	da09      	bge.n	8018064 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8018050:	6878      	ldr	r0, [r7, #4]
 8018052:	f002 fb6b 	bl	801a72c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8018056:	bf00      	nop
 8018058:	e004      	b.n	8018064 <HAL_UART_IRQHandler+0x2ec>
      return;
 801805a:	bf00      	nop
 801805c:	e002      	b.n	8018064 <HAL_UART_IRQHandler+0x2ec>
    return;
 801805e:	bf00      	nop
 8018060:	e000      	b.n	8018064 <HAL_UART_IRQHandler+0x2ec>
    return;
 8018062:	bf00      	nop
  }
}
 8018064:	3720      	adds	r7, #32
 8018066:	46bd      	mov	sp, r7
 8018068:	bd80      	pop	{r7, pc}
 801806a:	bf00      	nop
 801806c:	10000001 	.word	0x10000001
 8018070:	04000120 	.word	0x04000120
 8018074:	0801a6b9 	.word	0x0801a6b9

08018078 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8018078:	b480      	push	{r7}
 801807a:	b083      	sub	sp, #12
 801807c:	af00      	add	r7, sp, #0
 801807e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8018080:	bf00      	nop
 8018082:	370c      	adds	r7, #12
 8018084:	46bd      	mov	sp, r7
 8018086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801808a:	4770      	bx	lr

0801808c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801808c:	b480      	push	{r7}
 801808e:	b083      	sub	sp, #12
 8018090:	af00      	add	r7, sp, #0
 8018092:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8018094:	bf00      	nop
 8018096:	370c      	adds	r7, #12
 8018098:	46bd      	mov	sp, r7
 801809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801809e:	4770      	bx	lr

080180a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80180a0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80180a4:	b090      	sub	sp, #64	; 0x40
 80180a6:	af00      	add	r7, sp, #0
 80180a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80180aa:	2300      	movs	r3, #0
 80180ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 80180ae:	2300      	movs	r3, #0
 80180b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80180b4:	2300      	movs	r3, #0
 80180b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	689a      	ldr	r2, [r3, #8]
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	691b      	ldr	r3, [r3, #16]
 80180c0:	431a      	orrs	r2, r3
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	695b      	ldr	r3, [r3, #20]
 80180c6:	431a      	orrs	r2, r3
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	69db      	ldr	r3, [r3, #28]
 80180cc:	4313      	orrs	r3, r2
 80180ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80180d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80180d6:	4313      	orrs	r3, r2
 80180d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	681b      	ldr	r3, [r3, #0]
 80180de:	681a      	ldr	r2, [r3, #0]
 80180e0:	4bc1      	ldr	r3, [pc, #772]	; (80183e8 <UART_SetConfig+0x348>)
 80180e2:	4013      	ands	r3, r2
 80180e4:	687a      	ldr	r2, [r7, #4]
 80180e6:	6812      	ldr	r2, [r2, #0]
 80180e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80180ea:	430b      	orrs	r3, r1
 80180ec:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80180ee:	687b      	ldr	r3, [r7, #4]
 80180f0:	681b      	ldr	r3, [r3, #0]
 80180f2:	685b      	ldr	r3, [r3, #4]
 80180f4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80180f8:	687b      	ldr	r3, [r7, #4]
 80180fa:	68da      	ldr	r2, [r3, #12]
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	681b      	ldr	r3, [r3, #0]
 8018100:	430a      	orrs	r2, r1
 8018102:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	699b      	ldr	r3, [r3, #24]
 8018108:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	681b      	ldr	r3, [r3, #0]
 801810e:	4ab7      	ldr	r2, [pc, #732]	; (80183ec <UART_SetConfig+0x34c>)
 8018110:	4293      	cmp	r3, r2
 8018112:	d004      	beq.n	801811e <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	6a1b      	ldr	r3, [r3, #32]
 8018118:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801811a:	4313      	orrs	r3, r2
 801811c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	681b      	ldr	r3, [r3, #0]
 8018122:	689a      	ldr	r2, [r3, #8]
 8018124:	4bb2      	ldr	r3, [pc, #712]	; (80183f0 <UART_SetConfig+0x350>)
 8018126:	4013      	ands	r3, r2
 8018128:	687a      	ldr	r2, [r7, #4]
 801812a:	6812      	ldr	r2, [r2, #0]
 801812c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801812e:	430b      	orrs	r3, r1
 8018130:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	681b      	ldr	r3, [r3, #0]
 8018136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018138:	f023 010f 	bic.w	r1, r3, #15
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	681b      	ldr	r3, [r3, #0]
 8018144:	430a      	orrs	r2, r1
 8018146:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	681b      	ldr	r3, [r3, #0]
 801814c:	4aa9      	ldr	r2, [pc, #676]	; (80183f4 <UART_SetConfig+0x354>)
 801814e:	4293      	cmp	r3, r2
 8018150:	d177      	bne.n	8018242 <UART_SetConfig+0x1a2>
 8018152:	4ba9      	ldr	r3, [pc, #676]	; (80183f8 <UART_SetConfig+0x358>)
 8018154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018156:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801815a:	2b28      	cmp	r3, #40	; 0x28
 801815c:	d86c      	bhi.n	8018238 <UART_SetConfig+0x198>
 801815e:	a201      	add	r2, pc, #4	; (adr r2, 8018164 <UART_SetConfig+0xc4>)
 8018160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018164:	08018209 	.word	0x08018209
 8018168:	08018239 	.word	0x08018239
 801816c:	08018239 	.word	0x08018239
 8018170:	08018239 	.word	0x08018239
 8018174:	08018239 	.word	0x08018239
 8018178:	08018239 	.word	0x08018239
 801817c:	08018239 	.word	0x08018239
 8018180:	08018239 	.word	0x08018239
 8018184:	08018211 	.word	0x08018211
 8018188:	08018239 	.word	0x08018239
 801818c:	08018239 	.word	0x08018239
 8018190:	08018239 	.word	0x08018239
 8018194:	08018239 	.word	0x08018239
 8018198:	08018239 	.word	0x08018239
 801819c:	08018239 	.word	0x08018239
 80181a0:	08018239 	.word	0x08018239
 80181a4:	08018219 	.word	0x08018219
 80181a8:	08018239 	.word	0x08018239
 80181ac:	08018239 	.word	0x08018239
 80181b0:	08018239 	.word	0x08018239
 80181b4:	08018239 	.word	0x08018239
 80181b8:	08018239 	.word	0x08018239
 80181bc:	08018239 	.word	0x08018239
 80181c0:	08018239 	.word	0x08018239
 80181c4:	08018221 	.word	0x08018221
 80181c8:	08018239 	.word	0x08018239
 80181cc:	08018239 	.word	0x08018239
 80181d0:	08018239 	.word	0x08018239
 80181d4:	08018239 	.word	0x08018239
 80181d8:	08018239 	.word	0x08018239
 80181dc:	08018239 	.word	0x08018239
 80181e0:	08018239 	.word	0x08018239
 80181e4:	08018229 	.word	0x08018229
 80181e8:	08018239 	.word	0x08018239
 80181ec:	08018239 	.word	0x08018239
 80181f0:	08018239 	.word	0x08018239
 80181f4:	08018239 	.word	0x08018239
 80181f8:	08018239 	.word	0x08018239
 80181fc:	08018239 	.word	0x08018239
 8018200:	08018239 	.word	0x08018239
 8018204:	08018231 	.word	0x08018231
 8018208:	2301      	movs	r3, #1
 801820a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801820e:	e233      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018210:	2304      	movs	r3, #4
 8018212:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018216:	e22f      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018218:	2308      	movs	r3, #8
 801821a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801821e:	e22b      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018220:	2310      	movs	r3, #16
 8018222:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018226:	e227      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018228:	2320      	movs	r3, #32
 801822a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801822e:	e223      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018230:	2340      	movs	r3, #64	; 0x40
 8018232:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018236:	e21f      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018238:	2380      	movs	r3, #128	; 0x80
 801823a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801823e:	bf00      	nop
 8018240:	e21a      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018242:	687b      	ldr	r3, [r7, #4]
 8018244:	681b      	ldr	r3, [r3, #0]
 8018246:	4a6d      	ldr	r2, [pc, #436]	; (80183fc <UART_SetConfig+0x35c>)
 8018248:	4293      	cmp	r3, r2
 801824a:	d132      	bne.n	80182b2 <UART_SetConfig+0x212>
 801824c:	4b6a      	ldr	r3, [pc, #424]	; (80183f8 <UART_SetConfig+0x358>)
 801824e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018250:	f003 0307 	and.w	r3, r3, #7
 8018254:	2b05      	cmp	r3, #5
 8018256:	d827      	bhi.n	80182a8 <UART_SetConfig+0x208>
 8018258:	a201      	add	r2, pc, #4	; (adr r2, 8018260 <UART_SetConfig+0x1c0>)
 801825a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801825e:	bf00      	nop
 8018260:	08018279 	.word	0x08018279
 8018264:	08018281 	.word	0x08018281
 8018268:	08018289 	.word	0x08018289
 801826c:	08018291 	.word	0x08018291
 8018270:	08018299 	.word	0x08018299
 8018274:	080182a1 	.word	0x080182a1
 8018278:	2300      	movs	r3, #0
 801827a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801827e:	e1fb      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018280:	2304      	movs	r3, #4
 8018282:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018286:	e1f7      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018288:	2308      	movs	r3, #8
 801828a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801828e:	e1f3      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018290:	2310      	movs	r3, #16
 8018292:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018296:	e1ef      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018298:	2320      	movs	r3, #32
 801829a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801829e:	e1eb      	b.n	8018678 <UART_SetConfig+0x5d8>
 80182a0:	2340      	movs	r3, #64	; 0x40
 80182a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80182a6:	e1e7      	b.n	8018678 <UART_SetConfig+0x5d8>
 80182a8:	2380      	movs	r3, #128	; 0x80
 80182aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80182ae:	bf00      	nop
 80182b0:	e1e2      	b.n	8018678 <UART_SetConfig+0x5d8>
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	681b      	ldr	r3, [r3, #0]
 80182b6:	4a52      	ldr	r2, [pc, #328]	; (8018400 <UART_SetConfig+0x360>)
 80182b8:	4293      	cmp	r3, r2
 80182ba:	d132      	bne.n	8018322 <UART_SetConfig+0x282>
 80182bc:	4b4e      	ldr	r3, [pc, #312]	; (80183f8 <UART_SetConfig+0x358>)
 80182be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80182c0:	f003 0307 	and.w	r3, r3, #7
 80182c4:	2b05      	cmp	r3, #5
 80182c6:	d827      	bhi.n	8018318 <UART_SetConfig+0x278>
 80182c8:	a201      	add	r2, pc, #4	; (adr r2, 80182d0 <UART_SetConfig+0x230>)
 80182ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80182ce:	bf00      	nop
 80182d0:	080182e9 	.word	0x080182e9
 80182d4:	080182f1 	.word	0x080182f1
 80182d8:	080182f9 	.word	0x080182f9
 80182dc:	08018301 	.word	0x08018301
 80182e0:	08018309 	.word	0x08018309
 80182e4:	08018311 	.word	0x08018311
 80182e8:	2300      	movs	r3, #0
 80182ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80182ee:	e1c3      	b.n	8018678 <UART_SetConfig+0x5d8>
 80182f0:	2304      	movs	r3, #4
 80182f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80182f6:	e1bf      	b.n	8018678 <UART_SetConfig+0x5d8>
 80182f8:	2308      	movs	r3, #8
 80182fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80182fe:	e1bb      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018300:	2310      	movs	r3, #16
 8018302:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018306:	e1b7      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018308:	2320      	movs	r3, #32
 801830a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801830e:	e1b3      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018310:	2340      	movs	r3, #64	; 0x40
 8018312:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018316:	e1af      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018318:	2380      	movs	r3, #128	; 0x80
 801831a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801831e:	bf00      	nop
 8018320:	e1aa      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	681b      	ldr	r3, [r3, #0]
 8018326:	4a37      	ldr	r2, [pc, #220]	; (8018404 <UART_SetConfig+0x364>)
 8018328:	4293      	cmp	r3, r2
 801832a:	d132      	bne.n	8018392 <UART_SetConfig+0x2f2>
 801832c:	4b32      	ldr	r3, [pc, #200]	; (80183f8 <UART_SetConfig+0x358>)
 801832e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018330:	f003 0307 	and.w	r3, r3, #7
 8018334:	2b05      	cmp	r3, #5
 8018336:	d827      	bhi.n	8018388 <UART_SetConfig+0x2e8>
 8018338:	a201      	add	r2, pc, #4	; (adr r2, 8018340 <UART_SetConfig+0x2a0>)
 801833a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801833e:	bf00      	nop
 8018340:	08018359 	.word	0x08018359
 8018344:	08018361 	.word	0x08018361
 8018348:	08018369 	.word	0x08018369
 801834c:	08018371 	.word	0x08018371
 8018350:	08018379 	.word	0x08018379
 8018354:	08018381 	.word	0x08018381
 8018358:	2300      	movs	r3, #0
 801835a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801835e:	e18b      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018360:	2304      	movs	r3, #4
 8018362:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018366:	e187      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018368:	2308      	movs	r3, #8
 801836a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801836e:	e183      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018370:	2310      	movs	r3, #16
 8018372:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018376:	e17f      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018378:	2320      	movs	r3, #32
 801837a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801837e:	e17b      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018380:	2340      	movs	r3, #64	; 0x40
 8018382:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018386:	e177      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018388:	2380      	movs	r3, #128	; 0x80
 801838a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801838e:	bf00      	nop
 8018390:	e172      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	681b      	ldr	r3, [r3, #0]
 8018396:	4a1c      	ldr	r2, [pc, #112]	; (8018408 <UART_SetConfig+0x368>)
 8018398:	4293      	cmp	r3, r2
 801839a:	d144      	bne.n	8018426 <UART_SetConfig+0x386>
 801839c:	4b16      	ldr	r3, [pc, #88]	; (80183f8 <UART_SetConfig+0x358>)
 801839e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80183a0:	f003 0307 	and.w	r3, r3, #7
 80183a4:	2b05      	cmp	r3, #5
 80183a6:	d839      	bhi.n	801841c <UART_SetConfig+0x37c>
 80183a8:	a201      	add	r2, pc, #4	; (adr r2, 80183b0 <UART_SetConfig+0x310>)
 80183aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80183ae:	bf00      	nop
 80183b0:	080183c9 	.word	0x080183c9
 80183b4:	080183d1 	.word	0x080183d1
 80183b8:	080183d9 	.word	0x080183d9
 80183bc:	080183e1 	.word	0x080183e1
 80183c0:	0801840d 	.word	0x0801840d
 80183c4:	08018415 	.word	0x08018415
 80183c8:	2300      	movs	r3, #0
 80183ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80183ce:	e153      	b.n	8018678 <UART_SetConfig+0x5d8>
 80183d0:	2304      	movs	r3, #4
 80183d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80183d6:	e14f      	b.n	8018678 <UART_SetConfig+0x5d8>
 80183d8:	2308      	movs	r3, #8
 80183da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80183de:	e14b      	b.n	8018678 <UART_SetConfig+0x5d8>
 80183e0:	2310      	movs	r3, #16
 80183e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80183e6:	e147      	b.n	8018678 <UART_SetConfig+0x5d8>
 80183e8:	cfff69f3 	.word	0xcfff69f3
 80183ec:	58000c00 	.word	0x58000c00
 80183f0:	11fff4ff 	.word	0x11fff4ff
 80183f4:	40011000 	.word	0x40011000
 80183f8:	58024400 	.word	0x58024400
 80183fc:	40004400 	.word	0x40004400
 8018400:	40004800 	.word	0x40004800
 8018404:	40004c00 	.word	0x40004c00
 8018408:	40005000 	.word	0x40005000
 801840c:	2320      	movs	r3, #32
 801840e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018412:	e131      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018414:	2340      	movs	r3, #64	; 0x40
 8018416:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801841a:	e12d      	b.n	8018678 <UART_SetConfig+0x5d8>
 801841c:	2380      	movs	r3, #128	; 0x80
 801841e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018422:	bf00      	nop
 8018424:	e128      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	681b      	ldr	r3, [r3, #0]
 801842a:	4ac3      	ldr	r2, [pc, #780]	; (8018738 <UART_SetConfig+0x698>)
 801842c:	4293      	cmp	r3, r2
 801842e:	d178      	bne.n	8018522 <UART_SetConfig+0x482>
 8018430:	4bc2      	ldr	r3, [pc, #776]	; (801873c <UART_SetConfig+0x69c>)
 8018432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018434:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8018438:	2b28      	cmp	r3, #40	; 0x28
 801843a:	d86d      	bhi.n	8018518 <UART_SetConfig+0x478>
 801843c:	a201      	add	r2, pc, #4	; (adr r2, 8018444 <UART_SetConfig+0x3a4>)
 801843e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018442:	bf00      	nop
 8018444:	080184e9 	.word	0x080184e9
 8018448:	08018519 	.word	0x08018519
 801844c:	08018519 	.word	0x08018519
 8018450:	08018519 	.word	0x08018519
 8018454:	08018519 	.word	0x08018519
 8018458:	08018519 	.word	0x08018519
 801845c:	08018519 	.word	0x08018519
 8018460:	08018519 	.word	0x08018519
 8018464:	080184f1 	.word	0x080184f1
 8018468:	08018519 	.word	0x08018519
 801846c:	08018519 	.word	0x08018519
 8018470:	08018519 	.word	0x08018519
 8018474:	08018519 	.word	0x08018519
 8018478:	08018519 	.word	0x08018519
 801847c:	08018519 	.word	0x08018519
 8018480:	08018519 	.word	0x08018519
 8018484:	080184f9 	.word	0x080184f9
 8018488:	08018519 	.word	0x08018519
 801848c:	08018519 	.word	0x08018519
 8018490:	08018519 	.word	0x08018519
 8018494:	08018519 	.word	0x08018519
 8018498:	08018519 	.word	0x08018519
 801849c:	08018519 	.word	0x08018519
 80184a0:	08018519 	.word	0x08018519
 80184a4:	08018501 	.word	0x08018501
 80184a8:	08018519 	.word	0x08018519
 80184ac:	08018519 	.word	0x08018519
 80184b0:	08018519 	.word	0x08018519
 80184b4:	08018519 	.word	0x08018519
 80184b8:	08018519 	.word	0x08018519
 80184bc:	08018519 	.word	0x08018519
 80184c0:	08018519 	.word	0x08018519
 80184c4:	08018509 	.word	0x08018509
 80184c8:	08018519 	.word	0x08018519
 80184cc:	08018519 	.word	0x08018519
 80184d0:	08018519 	.word	0x08018519
 80184d4:	08018519 	.word	0x08018519
 80184d8:	08018519 	.word	0x08018519
 80184dc:	08018519 	.word	0x08018519
 80184e0:	08018519 	.word	0x08018519
 80184e4:	08018511 	.word	0x08018511
 80184e8:	2301      	movs	r3, #1
 80184ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80184ee:	e0c3      	b.n	8018678 <UART_SetConfig+0x5d8>
 80184f0:	2304      	movs	r3, #4
 80184f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80184f6:	e0bf      	b.n	8018678 <UART_SetConfig+0x5d8>
 80184f8:	2308      	movs	r3, #8
 80184fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80184fe:	e0bb      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018500:	2310      	movs	r3, #16
 8018502:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018506:	e0b7      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018508:	2320      	movs	r3, #32
 801850a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801850e:	e0b3      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018510:	2340      	movs	r3, #64	; 0x40
 8018512:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018516:	e0af      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018518:	2380      	movs	r3, #128	; 0x80
 801851a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801851e:	bf00      	nop
 8018520:	e0aa      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	681b      	ldr	r3, [r3, #0]
 8018526:	4a86      	ldr	r2, [pc, #536]	; (8018740 <UART_SetConfig+0x6a0>)
 8018528:	4293      	cmp	r3, r2
 801852a:	d132      	bne.n	8018592 <UART_SetConfig+0x4f2>
 801852c:	4b83      	ldr	r3, [pc, #524]	; (801873c <UART_SetConfig+0x69c>)
 801852e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018530:	f003 0307 	and.w	r3, r3, #7
 8018534:	2b05      	cmp	r3, #5
 8018536:	d827      	bhi.n	8018588 <UART_SetConfig+0x4e8>
 8018538:	a201      	add	r2, pc, #4	; (adr r2, 8018540 <UART_SetConfig+0x4a0>)
 801853a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801853e:	bf00      	nop
 8018540:	08018559 	.word	0x08018559
 8018544:	08018561 	.word	0x08018561
 8018548:	08018569 	.word	0x08018569
 801854c:	08018571 	.word	0x08018571
 8018550:	08018579 	.word	0x08018579
 8018554:	08018581 	.word	0x08018581
 8018558:	2300      	movs	r3, #0
 801855a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801855e:	e08b      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018560:	2304      	movs	r3, #4
 8018562:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018566:	e087      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018568:	2308      	movs	r3, #8
 801856a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801856e:	e083      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018570:	2310      	movs	r3, #16
 8018572:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018576:	e07f      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018578:	2320      	movs	r3, #32
 801857a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801857e:	e07b      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018580:	2340      	movs	r3, #64	; 0x40
 8018582:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018586:	e077      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018588:	2380      	movs	r3, #128	; 0x80
 801858a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801858e:	bf00      	nop
 8018590:	e072      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018592:	687b      	ldr	r3, [r7, #4]
 8018594:	681b      	ldr	r3, [r3, #0]
 8018596:	4a6b      	ldr	r2, [pc, #428]	; (8018744 <UART_SetConfig+0x6a4>)
 8018598:	4293      	cmp	r3, r2
 801859a:	d132      	bne.n	8018602 <UART_SetConfig+0x562>
 801859c:	4b67      	ldr	r3, [pc, #412]	; (801873c <UART_SetConfig+0x69c>)
 801859e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80185a0:	f003 0307 	and.w	r3, r3, #7
 80185a4:	2b05      	cmp	r3, #5
 80185a6:	d827      	bhi.n	80185f8 <UART_SetConfig+0x558>
 80185a8:	a201      	add	r2, pc, #4	; (adr r2, 80185b0 <UART_SetConfig+0x510>)
 80185aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80185ae:	bf00      	nop
 80185b0:	080185c9 	.word	0x080185c9
 80185b4:	080185d1 	.word	0x080185d1
 80185b8:	080185d9 	.word	0x080185d9
 80185bc:	080185e1 	.word	0x080185e1
 80185c0:	080185e9 	.word	0x080185e9
 80185c4:	080185f1 	.word	0x080185f1
 80185c8:	2300      	movs	r3, #0
 80185ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80185ce:	e053      	b.n	8018678 <UART_SetConfig+0x5d8>
 80185d0:	2304      	movs	r3, #4
 80185d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80185d6:	e04f      	b.n	8018678 <UART_SetConfig+0x5d8>
 80185d8:	2308      	movs	r3, #8
 80185da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80185de:	e04b      	b.n	8018678 <UART_SetConfig+0x5d8>
 80185e0:	2310      	movs	r3, #16
 80185e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80185e6:	e047      	b.n	8018678 <UART_SetConfig+0x5d8>
 80185e8:	2320      	movs	r3, #32
 80185ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80185ee:	e043      	b.n	8018678 <UART_SetConfig+0x5d8>
 80185f0:	2340      	movs	r3, #64	; 0x40
 80185f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80185f6:	e03f      	b.n	8018678 <UART_SetConfig+0x5d8>
 80185f8:	2380      	movs	r3, #128	; 0x80
 80185fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80185fe:	bf00      	nop
 8018600:	e03a      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018602:	687b      	ldr	r3, [r7, #4]
 8018604:	681b      	ldr	r3, [r3, #0]
 8018606:	4a50      	ldr	r2, [pc, #320]	; (8018748 <UART_SetConfig+0x6a8>)
 8018608:	4293      	cmp	r3, r2
 801860a:	d132      	bne.n	8018672 <UART_SetConfig+0x5d2>
 801860c:	4b4b      	ldr	r3, [pc, #300]	; (801873c <UART_SetConfig+0x69c>)
 801860e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018610:	f003 0307 	and.w	r3, r3, #7
 8018614:	2b05      	cmp	r3, #5
 8018616:	d827      	bhi.n	8018668 <UART_SetConfig+0x5c8>
 8018618:	a201      	add	r2, pc, #4	; (adr r2, 8018620 <UART_SetConfig+0x580>)
 801861a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801861e:	bf00      	nop
 8018620:	08018639 	.word	0x08018639
 8018624:	08018641 	.word	0x08018641
 8018628:	08018649 	.word	0x08018649
 801862c:	08018651 	.word	0x08018651
 8018630:	08018659 	.word	0x08018659
 8018634:	08018661 	.word	0x08018661
 8018638:	2302      	movs	r3, #2
 801863a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801863e:	e01b      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018640:	2304      	movs	r3, #4
 8018642:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018646:	e017      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018648:	2308      	movs	r3, #8
 801864a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801864e:	e013      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018650:	2310      	movs	r3, #16
 8018652:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018656:	e00f      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018658:	2320      	movs	r3, #32
 801865a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801865e:	e00b      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018660:	2340      	movs	r3, #64	; 0x40
 8018662:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018666:	e007      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018668:	2380      	movs	r3, #128	; 0x80
 801866a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801866e:	bf00      	nop
 8018670:	e002      	b.n	8018678 <UART_SetConfig+0x5d8>
 8018672:	2380      	movs	r3, #128	; 0x80
 8018674:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	681b      	ldr	r3, [r3, #0]
 801867c:	4a32      	ldr	r2, [pc, #200]	; (8018748 <UART_SetConfig+0x6a8>)
 801867e:	4293      	cmp	r3, r2
 8018680:	f040 86f7 	bne.w	8019472 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8018684:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8018688:	2b08      	cmp	r3, #8
 801868a:	f000 80c0 	beq.w	801880e <UART_SetConfig+0x76e>
 801868e:	2b08      	cmp	r3, #8
 8018690:	dc04      	bgt.n	801869c <UART_SetConfig+0x5fc>
 8018692:	2b02      	cmp	r3, #2
 8018694:	d00c      	beq.n	80186b0 <UART_SetConfig+0x610>
 8018696:	2b04      	cmp	r3, #4
 8018698:	d065      	beq.n	8018766 <UART_SetConfig+0x6c6>
 801869a:	e27a      	b.n	8018b92 <UART_SetConfig+0xaf2>
 801869c:	2b20      	cmp	r3, #32
 801869e:	f000 81b0 	beq.w	8018a02 <UART_SetConfig+0x962>
 80186a2:	2b40      	cmp	r3, #64	; 0x40
 80186a4:	f000 821e 	beq.w	8018ae4 <UART_SetConfig+0xa44>
 80186a8:	2b10      	cmp	r3, #16
 80186aa:	f000 8104 	beq.w	80188b6 <UART_SetConfig+0x816>
 80186ae:	e270      	b.n	8018b92 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80186b0:	f7fd ff14 	bl	80164dc <HAL_RCCEx_GetD3PCLK1Freq>
 80186b4:	4602      	mov	r2, r0
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186ba:	2b00      	cmp	r3, #0
 80186bc:	d04e      	beq.n	801875c <UART_SetConfig+0x6bc>
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186c2:	2b01      	cmp	r3, #1
 80186c4:	d048      	beq.n	8018758 <UART_SetConfig+0x6b8>
 80186c6:	687b      	ldr	r3, [r7, #4]
 80186c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186ca:	2b02      	cmp	r3, #2
 80186cc:	d042      	beq.n	8018754 <UART_SetConfig+0x6b4>
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186d2:	2b03      	cmp	r3, #3
 80186d4:	d03c      	beq.n	8018750 <UART_SetConfig+0x6b0>
 80186d6:	687b      	ldr	r3, [r7, #4]
 80186d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186da:	2b04      	cmp	r3, #4
 80186dc:	d036      	beq.n	801874c <UART_SetConfig+0x6ac>
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186e2:	2b05      	cmp	r3, #5
 80186e4:	d026      	beq.n	8018734 <UART_SetConfig+0x694>
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186ea:	2b06      	cmp	r3, #6
 80186ec:	d020      	beq.n	8018730 <UART_SetConfig+0x690>
 80186ee:	687b      	ldr	r3, [r7, #4]
 80186f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186f2:	2b07      	cmp	r3, #7
 80186f4:	d01a      	beq.n	801872c <UART_SetConfig+0x68c>
 80186f6:	687b      	ldr	r3, [r7, #4]
 80186f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186fa:	2b08      	cmp	r3, #8
 80186fc:	d014      	beq.n	8018728 <UART_SetConfig+0x688>
 80186fe:	687b      	ldr	r3, [r7, #4]
 8018700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018702:	2b09      	cmp	r3, #9
 8018704:	d00e      	beq.n	8018724 <UART_SetConfig+0x684>
 8018706:	687b      	ldr	r3, [r7, #4]
 8018708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801870a:	2b0a      	cmp	r3, #10
 801870c:	d008      	beq.n	8018720 <UART_SetConfig+0x680>
 801870e:	687b      	ldr	r3, [r7, #4]
 8018710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018712:	2b0b      	cmp	r3, #11
 8018714:	d102      	bne.n	801871c <UART_SetConfig+0x67c>
 8018716:	f44f 7380 	mov.w	r3, #256	; 0x100
 801871a:	e020      	b.n	801875e <UART_SetConfig+0x6be>
 801871c:	2301      	movs	r3, #1
 801871e:	e01e      	b.n	801875e <UART_SetConfig+0x6be>
 8018720:	2380      	movs	r3, #128	; 0x80
 8018722:	e01c      	b.n	801875e <UART_SetConfig+0x6be>
 8018724:	2340      	movs	r3, #64	; 0x40
 8018726:	e01a      	b.n	801875e <UART_SetConfig+0x6be>
 8018728:	2320      	movs	r3, #32
 801872a:	e018      	b.n	801875e <UART_SetConfig+0x6be>
 801872c:	2310      	movs	r3, #16
 801872e:	e016      	b.n	801875e <UART_SetConfig+0x6be>
 8018730:	230c      	movs	r3, #12
 8018732:	e014      	b.n	801875e <UART_SetConfig+0x6be>
 8018734:	230a      	movs	r3, #10
 8018736:	e012      	b.n	801875e <UART_SetConfig+0x6be>
 8018738:	40011400 	.word	0x40011400
 801873c:	58024400 	.word	0x58024400
 8018740:	40007800 	.word	0x40007800
 8018744:	40007c00 	.word	0x40007c00
 8018748:	58000c00 	.word	0x58000c00
 801874c:	2308      	movs	r3, #8
 801874e:	e006      	b.n	801875e <UART_SetConfig+0x6be>
 8018750:	2306      	movs	r3, #6
 8018752:	e004      	b.n	801875e <UART_SetConfig+0x6be>
 8018754:	2304      	movs	r3, #4
 8018756:	e002      	b.n	801875e <UART_SetConfig+0x6be>
 8018758:	2302      	movs	r3, #2
 801875a:	e000      	b.n	801875e <UART_SetConfig+0x6be>
 801875c:	2301      	movs	r3, #1
 801875e:	fbb2 f3f3 	udiv	r3, r2, r3
 8018762:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8018764:	e219      	b.n	8018b9a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018766:	f107 0318 	add.w	r3, r7, #24
 801876a:	4618      	mov	r0, r3
 801876c:	f7fd fecc 	bl	8016508 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8018770:	69fa      	ldr	r2, [r7, #28]
 8018772:	687b      	ldr	r3, [r7, #4]
 8018774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018776:	2b00      	cmp	r3, #0
 8018778:	d044      	beq.n	8018804 <UART_SetConfig+0x764>
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801877e:	2b01      	cmp	r3, #1
 8018780:	d03e      	beq.n	8018800 <UART_SetConfig+0x760>
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018786:	2b02      	cmp	r3, #2
 8018788:	d038      	beq.n	80187fc <UART_SetConfig+0x75c>
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801878e:	2b03      	cmp	r3, #3
 8018790:	d032      	beq.n	80187f8 <UART_SetConfig+0x758>
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018796:	2b04      	cmp	r3, #4
 8018798:	d02c      	beq.n	80187f4 <UART_SetConfig+0x754>
 801879a:	687b      	ldr	r3, [r7, #4]
 801879c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801879e:	2b05      	cmp	r3, #5
 80187a0:	d026      	beq.n	80187f0 <UART_SetConfig+0x750>
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187a6:	2b06      	cmp	r3, #6
 80187a8:	d020      	beq.n	80187ec <UART_SetConfig+0x74c>
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187ae:	2b07      	cmp	r3, #7
 80187b0:	d01a      	beq.n	80187e8 <UART_SetConfig+0x748>
 80187b2:	687b      	ldr	r3, [r7, #4]
 80187b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187b6:	2b08      	cmp	r3, #8
 80187b8:	d014      	beq.n	80187e4 <UART_SetConfig+0x744>
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187be:	2b09      	cmp	r3, #9
 80187c0:	d00e      	beq.n	80187e0 <UART_SetConfig+0x740>
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187c6:	2b0a      	cmp	r3, #10
 80187c8:	d008      	beq.n	80187dc <UART_SetConfig+0x73c>
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187ce:	2b0b      	cmp	r3, #11
 80187d0:	d102      	bne.n	80187d8 <UART_SetConfig+0x738>
 80187d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80187d6:	e016      	b.n	8018806 <UART_SetConfig+0x766>
 80187d8:	2301      	movs	r3, #1
 80187da:	e014      	b.n	8018806 <UART_SetConfig+0x766>
 80187dc:	2380      	movs	r3, #128	; 0x80
 80187de:	e012      	b.n	8018806 <UART_SetConfig+0x766>
 80187e0:	2340      	movs	r3, #64	; 0x40
 80187e2:	e010      	b.n	8018806 <UART_SetConfig+0x766>
 80187e4:	2320      	movs	r3, #32
 80187e6:	e00e      	b.n	8018806 <UART_SetConfig+0x766>
 80187e8:	2310      	movs	r3, #16
 80187ea:	e00c      	b.n	8018806 <UART_SetConfig+0x766>
 80187ec:	230c      	movs	r3, #12
 80187ee:	e00a      	b.n	8018806 <UART_SetConfig+0x766>
 80187f0:	230a      	movs	r3, #10
 80187f2:	e008      	b.n	8018806 <UART_SetConfig+0x766>
 80187f4:	2308      	movs	r3, #8
 80187f6:	e006      	b.n	8018806 <UART_SetConfig+0x766>
 80187f8:	2306      	movs	r3, #6
 80187fa:	e004      	b.n	8018806 <UART_SetConfig+0x766>
 80187fc:	2304      	movs	r3, #4
 80187fe:	e002      	b.n	8018806 <UART_SetConfig+0x766>
 8018800:	2302      	movs	r3, #2
 8018802:	e000      	b.n	8018806 <UART_SetConfig+0x766>
 8018804:	2301      	movs	r3, #1
 8018806:	fbb2 f3f3 	udiv	r3, r2, r3
 801880a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801880c:	e1c5      	b.n	8018b9a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801880e:	f107 030c 	add.w	r3, r7, #12
 8018812:	4618      	mov	r0, r3
 8018814:	f7fd ffc4 	bl	80167a0 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8018818:	693a      	ldr	r2, [r7, #16]
 801881a:	687b      	ldr	r3, [r7, #4]
 801881c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801881e:	2b00      	cmp	r3, #0
 8018820:	d044      	beq.n	80188ac <UART_SetConfig+0x80c>
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018826:	2b01      	cmp	r3, #1
 8018828:	d03e      	beq.n	80188a8 <UART_SetConfig+0x808>
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801882e:	2b02      	cmp	r3, #2
 8018830:	d038      	beq.n	80188a4 <UART_SetConfig+0x804>
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018836:	2b03      	cmp	r3, #3
 8018838:	d032      	beq.n	80188a0 <UART_SetConfig+0x800>
 801883a:	687b      	ldr	r3, [r7, #4]
 801883c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801883e:	2b04      	cmp	r3, #4
 8018840:	d02c      	beq.n	801889c <UART_SetConfig+0x7fc>
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018846:	2b05      	cmp	r3, #5
 8018848:	d026      	beq.n	8018898 <UART_SetConfig+0x7f8>
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801884e:	2b06      	cmp	r3, #6
 8018850:	d020      	beq.n	8018894 <UART_SetConfig+0x7f4>
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018856:	2b07      	cmp	r3, #7
 8018858:	d01a      	beq.n	8018890 <UART_SetConfig+0x7f0>
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801885e:	2b08      	cmp	r3, #8
 8018860:	d014      	beq.n	801888c <UART_SetConfig+0x7ec>
 8018862:	687b      	ldr	r3, [r7, #4]
 8018864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018866:	2b09      	cmp	r3, #9
 8018868:	d00e      	beq.n	8018888 <UART_SetConfig+0x7e8>
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801886e:	2b0a      	cmp	r3, #10
 8018870:	d008      	beq.n	8018884 <UART_SetConfig+0x7e4>
 8018872:	687b      	ldr	r3, [r7, #4]
 8018874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018876:	2b0b      	cmp	r3, #11
 8018878:	d102      	bne.n	8018880 <UART_SetConfig+0x7e0>
 801887a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801887e:	e016      	b.n	80188ae <UART_SetConfig+0x80e>
 8018880:	2301      	movs	r3, #1
 8018882:	e014      	b.n	80188ae <UART_SetConfig+0x80e>
 8018884:	2380      	movs	r3, #128	; 0x80
 8018886:	e012      	b.n	80188ae <UART_SetConfig+0x80e>
 8018888:	2340      	movs	r3, #64	; 0x40
 801888a:	e010      	b.n	80188ae <UART_SetConfig+0x80e>
 801888c:	2320      	movs	r3, #32
 801888e:	e00e      	b.n	80188ae <UART_SetConfig+0x80e>
 8018890:	2310      	movs	r3, #16
 8018892:	e00c      	b.n	80188ae <UART_SetConfig+0x80e>
 8018894:	230c      	movs	r3, #12
 8018896:	e00a      	b.n	80188ae <UART_SetConfig+0x80e>
 8018898:	230a      	movs	r3, #10
 801889a:	e008      	b.n	80188ae <UART_SetConfig+0x80e>
 801889c:	2308      	movs	r3, #8
 801889e:	e006      	b.n	80188ae <UART_SetConfig+0x80e>
 80188a0:	2306      	movs	r3, #6
 80188a2:	e004      	b.n	80188ae <UART_SetConfig+0x80e>
 80188a4:	2304      	movs	r3, #4
 80188a6:	e002      	b.n	80188ae <UART_SetConfig+0x80e>
 80188a8:	2302      	movs	r3, #2
 80188aa:	e000      	b.n	80188ae <UART_SetConfig+0x80e>
 80188ac:	2301      	movs	r3, #1
 80188ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80188b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80188b4:	e171      	b.n	8018b9a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80188b6:	4b7a      	ldr	r3, [pc, #488]	; (8018aa0 <UART_SetConfig+0xa00>)
 80188b8:	681b      	ldr	r3, [r3, #0]
 80188ba:	f003 0320 	and.w	r3, r3, #32
 80188be:	2b00      	cmp	r3, #0
 80188c0:	d054      	beq.n	801896c <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80188c2:	4b77      	ldr	r3, [pc, #476]	; (8018aa0 <UART_SetConfig+0xa00>)
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	08db      	lsrs	r3, r3, #3
 80188c8:	f003 0303 	and.w	r3, r3, #3
 80188cc:	4a75      	ldr	r2, [pc, #468]	; (8018aa4 <UART_SetConfig+0xa04>)
 80188ce:	40da      	lsrs	r2, r3
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	d044      	beq.n	8018962 <UART_SetConfig+0x8c2>
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188dc:	2b01      	cmp	r3, #1
 80188de:	d03e      	beq.n	801895e <UART_SetConfig+0x8be>
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188e4:	2b02      	cmp	r3, #2
 80188e6:	d038      	beq.n	801895a <UART_SetConfig+0x8ba>
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188ec:	2b03      	cmp	r3, #3
 80188ee:	d032      	beq.n	8018956 <UART_SetConfig+0x8b6>
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188f4:	2b04      	cmp	r3, #4
 80188f6:	d02c      	beq.n	8018952 <UART_SetConfig+0x8b2>
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188fc:	2b05      	cmp	r3, #5
 80188fe:	d026      	beq.n	801894e <UART_SetConfig+0x8ae>
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018904:	2b06      	cmp	r3, #6
 8018906:	d020      	beq.n	801894a <UART_SetConfig+0x8aa>
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801890c:	2b07      	cmp	r3, #7
 801890e:	d01a      	beq.n	8018946 <UART_SetConfig+0x8a6>
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018914:	2b08      	cmp	r3, #8
 8018916:	d014      	beq.n	8018942 <UART_SetConfig+0x8a2>
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801891c:	2b09      	cmp	r3, #9
 801891e:	d00e      	beq.n	801893e <UART_SetConfig+0x89e>
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018924:	2b0a      	cmp	r3, #10
 8018926:	d008      	beq.n	801893a <UART_SetConfig+0x89a>
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801892c:	2b0b      	cmp	r3, #11
 801892e:	d102      	bne.n	8018936 <UART_SetConfig+0x896>
 8018930:	f44f 7380 	mov.w	r3, #256	; 0x100
 8018934:	e016      	b.n	8018964 <UART_SetConfig+0x8c4>
 8018936:	2301      	movs	r3, #1
 8018938:	e014      	b.n	8018964 <UART_SetConfig+0x8c4>
 801893a:	2380      	movs	r3, #128	; 0x80
 801893c:	e012      	b.n	8018964 <UART_SetConfig+0x8c4>
 801893e:	2340      	movs	r3, #64	; 0x40
 8018940:	e010      	b.n	8018964 <UART_SetConfig+0x8c4>
 8018942:	2320      	movs	r3, #32
 8018944:	e00e      	b.n	8018964 <UART_SetConfig+0x8c4>
 8018946:	2310      	movs	r3, #16
 8018948:	e00c      	b.n	8018964 <UART_SetConfig+0x8c4>
 801894a:	230c      	movs	r3, #12
 801894c:	e00a      	b.n	8018964 <UART_SetConfig+0x8c4>
 801894e:	230a      	movs	r3, #10
 8018950:	e008      	b.n	8018964 <UART_SetConfig+0x8c4>
 8018952:	2308      	movs	r3, #8
 8018954:	e006      	b.n	8018964 <UART_SetConfig+0x8c4>
 8018956:	2306      	movs	r3, #6
 8018958:	e004      	b.n	8018964 <UART_SetConfig+0x8c4>
 801895a:	2304      	movs	r3, #4
 801895c:	e002      	b.n	8018964 <UART_SetConfig+0x8c4>
 801895e:	2302      	movs	r3, #2
 8018960:	e000      	b.n	8018964 <UART_SetConfig+0x8c4>
 8018962:	2301      	movs	r3, #1
 8018964:	fbb2 f3f3 	udiv	r3, r2, r3
 8018968:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 801896a:	e116      	b.n	8018b9a <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018970:	2b00      	cmp	r3, #0
 8018972:	d043      	beq.n	80189fc <UART_SetConfig+0x95c>
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018978:	2b01      	cmp	r3, #1
 801897a:	d03d      	beq.n	80189f8 <UART_SetConfig+0x958>
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018980:	2b02      	cmp	r3, #2
 8018982:	d037      	beq.n	80189f4 <UART_SetConfig+0x954>
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018988:	2b03      	cmp	r3, #3
 801898a:	d031      	beq.n	80189f0 <UART_SetConfig+0x950>
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018990:	2b04      	cmp	r3, #4
 8018992:	d02b      	beq.n	80189ec <UART_SetConfig+0x94c>
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018998:	2b05      	cmp	r3, #5
 801899a:	d025      	beq.n	80189e8 <UART_SetConfig+0x948>
 801899c:	687b      	ldr	r3, [r7, #4]
 801899e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189a0:	2b06      	cmp	r3, #6
 80189a2:	d01f      	beq.n	80189e4 <UART_SetConfig+0x944>
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189a8:	2b07      	cmp	r3, #7
 80189aa:	d019      	beq.n	80189e0 <UART_SetConfig+0x940>
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189b0:	2b08      	cmp	r3, #8
 80189b2:	d013      	beq.n	80189dc <UART_SetConfig+0x93c>
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189b8:	2b09      	cmp	r3, #9
 80189ba:	d00d      	beq.n	80189d8 <UART_SetConfig+0x938>
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189c0:	2b0a      	cmp	r3, #10
 80189c2:	d007      	beq.n	80189d4 <UART_SetConfig+0x934>
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189c8:	2b0b      	cmp	r3, #11
 80189ca:	d101      	bne.n	80189d0 <UART_SetConfig+0x930>
 80189cc:	4b36      	ldr	r3, [pc, #216]	; (8018aa8 <UART_SetConfig+0xa08>)
 80189ce:	e016      	b.n	80189fe <UART_SetConfig+0x95e>
 80189d0:	4b34      	ldr	r3, [pc, #208]	; (8018aa4 <UART_SetConfig+0xa04>)
 80189d2:	e014      	b.n	80189fe <UART_SetConfig+0x95e>
 80189d4:	4b35      	ldr	r3, [pc, #212]	; (8018aac <UART_SetConfig+0xa0c>)
 80189d6:	e012      	b.n	80189fe <UART_SetConfig+0x95e>
 80189d8:	4b35      	ldr	r3, [pc, #212]	; (8018ab0 <UART_SetConfig+0xa10>)
 80189da:	e010      	b.n	80189fe <UART_SetConfig+0x95e>
 80189dc:	4b35      	ldr	r3, [pc, #212]	; (8018ab4 <UART_SetConfig+0xa14>)
 80189de:	e00e      	b.n	80189fe <UART_SetConfig+0x95e>
 80189e0:	4b35      	ldr	r3, [pc, #212]	; (8018ab8 <UART_SetConfig+0xa18>)
 80189e2:	e00c      	b.n	80189fe <UART_SetConfig+0x95e>
 80189e4:	4b35      	ldr	r3, [pc, #212]	; (8018abc <UART_SetConfig+0xa1c>)
 80189e6:	e00a      	b.n	80189fe <UART_SetConfig+0x95e>
 80189e8:	4b35      	ldr	r3, [pc, #212]	; (8018ac0 <UART_SetConfig+0xa20>)
 80189ea:	e008      	b.n	80189fe <UART_SetConfig+0x95e>
 80189ec:	4b35      	ldr	r3, [pc, #212]	; (8018ac4 <UART_SetConfig+0xa24>)
 80189ee:	e006      	b.n	80189fe <UART_SetConfig+0x95e>
 80189f0:	4b35      	ldr	r3, [pc, #212]	; (8018ac8 <UART_SetConfig+0xa28>)
 80189f2:	e004      	b.n	80189fe <UART_SetConfig+0x95e>
 80189f4:	4b35      	ldr	r3, [pc, #212]	; (8018acc <UART_SetConfig+0xa2c>)
 80189f6:	e002      	b.n	80189fe <UART_SetConfig+0x95e>
 80189f8:	4b35      	ldr	r3, [pc, #212]	; (8018ad0 <UART_SetConfig+0xa30>)
 80189fa:	e000      	b.n	80189fe <UART_SetConfig+0x95e>
 80189fc:	4b29      	ldr	r3, [pc, #164]	; (8018aa4 <UART_SetConfig+0xa04>)
 80189fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8018a00:	e0cb      	b.n	8018b9a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a06:	2b00      	cmp	r3, #0
 8018a08:	d046      	beq.n	8018a98 <UART_SetConfig+0x9f8>
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a0e:	2b01      	cmp	r3, #1
 8018a10:	d040      	beq.n	8018a94 <UART_SetConfig+0x9f4>
 8018a12:	687b      	ldr	r3, [r7, #4]
 8018a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a16:	2b02      	cmp	r3, #2
 8018a18:	d03a      	beq.n	8018a90 <UART_SetConfig+0x9f0>
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a1e:	2b03      	cmp	r3, #3
 8018a20:	d034      	beq.n	8018a8c <UART_SetConfig+0x9ec>
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a26:	2b04      	cmp	r3, #4
 8018a28:	d02e      	beq.n	8018a88 <UART_SetConfig+0x9e8>
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a2e:	2b05      	cmp	r3, #5
 8018a30:	d028      	beq.n	8018a84 <UART_SetConfig+0x9e4>
 8018a32:	687b      	ldr	r3, [r7, #4]
 8018a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a36:	2b06      	cmp	r3, #6
 8018a38:	d022      	beq.n	8018a80 <UART_SetConfig+0x9e0>
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a3e:	2b07      	cmp	r3, #7
 8018a40:	d01c      	beq.n	8018a7c <UART_SetConfig+0x9dc>
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a46:	2b08      	cmp	r3, #8
 8018a48:	d016      	beq.n	8018a78 <UART_SetConfig+0x9d8>
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a4e:	2b09      	cmp	r3, #9
 8018a50:	d00f      	beq.n	8018a72 <UART_SetConfig+0x9d2>
 8018a52:	687b      	ldr	r3, [r7, #4]
 8018a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a56:	2b0a      	cmp	r3, #10
 8018a58:	d008      	beq.n	8018a6c <UART_SetConfig+0x9cc>
 8018a5a:	687b      	ldr	r3, [r7, #4]
 8018a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a5e:	2b0b      	cmp	r3, #11
 8018a60:	d102      	bne.n	8018a68 <UART_SetConfig+0x9c8>
 8018a62:	f643 5309 	movw	r3, #15625	; 0x3d09
 8018a66:	e018      	b.n	8018a9a <UART_SetConfig+0x9fa>
 8018a68:	4b13      	ldr	r3, [pc, #76]	; (8018ab8 <UART_SetConfig+0xa18>)
 8018a6a:	e016      	b.n	8018a9a <UART_SetConfig+0x9fa>
 8018a6c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8018a70:	e013      	b.n	8018a9a <UART_SetConfig+0x9fa>
 8018a72:	f24f 4324 	movw	r3, #62500	; 0xf424
 8018a76:	e010      	b.n	8018a9a <UART_SetConfig+0x9fa>
 8018a78:	4b16      	ldr	r3, [pc, #88]	; (8018ad4 <UART_SetConfig+0xa34>)
 8018a7a:	e00e      	b.n	8018a9a <UART_SetConfig+0x9fa>
 8018a7c:	4b0a      	ldr	r3, [pc, #40]	; (8018aa8 <UART_SetConfig+0xa08>)
 8018a7e:	e00c      	b.n	8018a9a <UART_SetConfig+0x9fa>
 8018a80:	4b15      	ldr	r3, [pc, #84]	; (8018ad8 <UART_SetConfig+0xa38>)
 8018a82:	e00a      	b.n	8018a9a <UART_SetConfig+0x9fa>
 8018a84:	4b15      	ldr	r3, [pc, #84]	; (8018adc <UART_SetConfig+0xa3c>)
 8018a86:	e008      	b.n	8018a9a <UART_SetConfig+0x9fa>
 8018a88:	4b08      	ldr	r3, [pc, #32]	; (8018aac <UART_SetConfig+0xa0c>)
 8018a8a:	e006      	b.n	8018a9a <UART_SetConfig+0x9fa>
 8018a8c:	4b14      	ldr	r3, [pc, #80]	; (8018ae0 <UART_SetConfig+0xa40>)
 8018a8e:	e004      	b.n	8018a9a <UART_SetConfig+0x9fa>
 8018a90:	4b07      	ldr	r3, [pc, #28]	; (8018ab0 <UART_SetConfig+0xa10>)
 8018a92:	e002      	b.n	8018a9a <UART_SetConfig+0x9fa>
 8018a94:	4b07      	ldr	r3, [pc, #28]	; (8018ab4 <UART_SetConfig+0xa14>)
 8018a96:	e000      	b.n	8018a9a <UART_SetConfig+0x9fa>
 8018a98:	4b07      	ldr	r3, [pc, #28]	; (8018ab8 <UART_SetConfig+0xa18>)
 8018a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8018a9c:	e07d      	b.n	8018b9a <UART_SetConfig+0xafa>
 8018a9e:	bf00      	nop
 8018aa0:	58024400 	.word	0x58024400
 8018aa4:	03d09000 	.word	0x03d09000
 8018aa8:	0003d090 	.word	0x0003d090
 8018aac:	0007a120 	.word	0x0007a120
 8018ab0:	000f4240 	.word	0x000f4240
 8018ab4:	001e8480 	.word	0x001e8480
 8018ab8:	003d0900 	.word	0x003d0900
 8018abc:	00516155 	.word	0x00516155
 8018ac0:	0061a800 	.word	0x0061a800
 8018ac4:	007a1200 	.word	0x007a1200
 8018ac8:	00a2c2aa 	.word	0x00a2c2aa
 8018acc:	00f42400 	.word	0x00f42400
 8018ad0:	01e84800 	.word	0x01e84800
 8018ad4:	0001e848 	.word	0x0001e848
 8018ad8:	00051615 	.word	0x00051615
 8018adc:	00061a80 	.word	0x00061a80
 8018ae0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	d04e      	beq.n	8018b8a <UART_SetConfig+0xaea>
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018af0:	2b01      	cmp	r3, #1
 8018af2:	d047      	beq.n	8018b84 <UART_SetConfig+0xae4>
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018af8:	2b02      	cmp	r3, #2
 8018afa:	d040      	beq.n	8018b7e <UART_SetConfig+0xade>
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b00:	2b03      	cmp	r3, #3
 8018b02:	d039      	beq.n	8018b78 <UART_SetConfig+0xad8>
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b08:	2b04      	cmp	r3, #4
 8018b0a:	d032      	beq.n	8018b72 <UART_SetConfig+0xad2>
 8018b0c:	687b      	ldr	r3, [r7, #4]
 8018b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b10:	2b05      	cmp	r3, #5
 8018b12:	d02b      	beq.n	8018b6c <UART_SetConfig+0xacc>
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b18:	2b06      	cmp	r3, #6
 8018b1a:	d024      	beq.n	8018b66 <UART_SetConfig+0xac6>
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b20:	2b07      	cmp	r3, #7
 8018b22:	d01d      	beq.n	8018b60 <UART_SetConfig+0xac0>
 8018b24:	687b      	ldr	r3, [r7, #4]
 8018b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b28:	2b08      	cmp	r3, #8
 8018b2a:	d016      	beq.n	8018b5a <UART_SetConfig+0xaba>
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b30:	2b09      	cmp	r3, #9
 8018b32:	d00f      	beq.n	8018b54 <UART_SetConfig+0xab4>
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b38:	2b0a      	cmp	r3, #10
 8018b3a:	d008      	beq.n	8018b4e <UART_SetConfig+0xaae>
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b40:	2b0b      	cmp	r3, #11
 8018b42:	d101      	bne.n	8018b48 <UART_SetConfig+0xaa8>
 8018b44:	2380      	movs	r3, #128	; 0x80
 8018b46:	e022      	b.n	8018b8e <UART_SetConfig+0xaee>
 8018b48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018b4c:	e01f      	b.n	8018b8e <UART_SetConfig+0xaee>
 8018b4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8018b52:	e01c      	b.n	8018b8e <UART_SetConfig+0xaee>
 8018b54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018b58:	e019      	b.n	8018b8e <UART_SetConfig+0xaee>
 8018b5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018b5e:	e016      	b.n	8018b8e <UART_SetConfig+0xaee>
 8018b60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018b64:	e013      	b.n	8018b8e <UART_SetConfig+0xaee>
 8018b66:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8018b6a:	e010      	b.n	8018b8e <UART_SetConfig+0xaee>
 8018b6c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8018b70:	e00d      	b.n	8018b8e <UART_SetConfig+0xaee>
 8018b72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8018b76:	e00a      	b.n	8018b8e <UART_SetConfig+0xaee>
 8018b78:	f241 5355 	movw	r3, #5461	; 0x1555
 8018b7c:	e007      	b.n	8018b8e <UART_SetConfig+0xaee>
 8018b7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018b82:	e004      	b.n	8018b8e <UART_SetConfig+0xaee>
 8018b84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8018b88:	e001      	b.n	8018b8e <UART_SetConfig+0xaee>
 8018b8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8018b90:	e003      	b.n	8018b9a <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 8018b92:	2301      	movs	r3, #1
 8018b94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8018b98:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8018b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b9c:	2b00      	cmp	r3, #0
 8018b9e:	f001 83e8 	beq.w	801a372 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	685a      	ldr	r2, [r3, #4]
 8018ba6:	4613      	mov	r3, r2
 8018ba8:	005b      	lsls	r3, r3, #1
 8018baa:	4413      	add	r3, r2
 8018bac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018bae:	429a      	cmp	r2, r3
 8018bb0:	d305      	bcc.n	8018bbe <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	685b      	ldr	r3, [r3, #4]
 8018bb6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8018bb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018bba:	429a      	cmp	r2, r3
 8018bbc:	d904      	bls.n	8018bc8 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 8018bbe:	2301      	movs	r3, #1
 8018bc0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8018bc4:	f001 bbd5 	b.w	801a372 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8018bc8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8018bcc:	2b08      	cmp	r3, #8
 8018bce:	f000 8154 	beq.w	8018e7a <UART_SetConfig+0xdda>
 8018bd2:	2b08      	cmp	r3, #8
 8018bd4:	dc06      	bgt.n	8018be4 <UART_SetConfig+0xb44>
 8018bd6:	2b02      	cmp	r3, #2
 8018bd8:	d00f      	beq.n	8018bfa <UART_SetConfig+0xb5a>
 8018bda:	2b04      	cmp	r3, #4
 8018bdc:	f000 80ac 	beq.w	8018d38 <UART_SetConfig+0xc98>
 8018be0:	f000 bc30 	b.w	8019444 <UART_SetConfig+0x13a4>
 8018be4:	2b20      	cmp	r3, #32
 8018be6:	f000 832d 	beq.w	8019244 <UART_SetConfig+0x11a4>
 8018bea:	2b40      	cmp	r3, #64	; 0x40
 8018bec:	f000 83a5 	beq.w	801933a <UART_SetConfig+0x129a>
 8018bf0:	2b10      	cmp	r3, #16
 8018bf2:	f000 81e3 	beq.w	8018fbc <UART_SetConfig+0xf1c>
 8018bf6:	f000 bc25 	b.w	8019444 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8018bfa:	f7fd fc6f 	bl	80164dc <HAL_RCCEx_GetD3PCLK1Freq>
 8018bfe:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c02:	4618      	mov	r0, r3
 8018c04:	f04f 0100 	mov.w	r1, #0
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c0c:	2b00      	cmp	r3, #0
 8018c0e:	d067      	beq.n	8018ce0 <UART_SetConfig+0xc40>
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c14:	2b01      	cmp	r3, #1
 8018c16:	d05e      	beq.n	8018cd6 <UART_SetConfig+0xc36>
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c1c:	2b02      	cmp	r3, #2
 8018c1e:	d055      	beq.n	8018ccc <UART_SetConfig+0xc2c>
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c24:	2b03      	cmp	r3, #3
 8018c26:	d04c      	beq.n	8018cc2 <UART_SetConfig+0xc22>
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c2c:	2b04      	cmp	r3, #4
 8018c2e:	d043      	beq.n	8018cb8 <UART_SetConfig+0xc18>
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c34:	2b05      	cmp	r3, #5
 8018c36:	d03a      	beq.n	8018cae <UART_SetConfig+0xc0e>
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c3c:	2b06      	cmp	r3, #6
 8018c3e:	d031      	beq.n	8018ca4 <UART_SetConfig+0xc04>
 8018c40:	687b      	ldr	r3, [r7, #4]
 8018c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c44:	2b07      	cmp	r3, #7
 8018c46:	d028      	beq.n	8018c9a <UART_SetConfig+0xbfa>
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c4c:	2b08      	cmp	r3, #8
 8018c4e:	d01f      	beq.n	8018c90 <UART_SetConfig+0xbf0>
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c54:	2b09      	cmp	r3, #9
 8018c56:	d016      	beq.n	8018c86 <UART_SetConfig+0xbe6>
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c5c:	2b0a      	cmp	r3, #10
 8018c5e:	d00d      	beq.n	8018c7c <UART_SetConfig+0xbdc>
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c64:	2b0b      	cmp	r3, #11
 8018c66:	d104      	bne.n	8018c72 <UART_SetConfig+0xbd2>
 8018c68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8018c6c:	f04f 0400 	mov.w	r4, #0
 8018c70:	e03a      	b.n	8018ce8 <UART_SetConfig+0xc48>
 8018c72:	f04f 0301 	mov.w	r3, #1
 8018c76:	f04f 0400 	mov.w	r4, #0
 8018c7a:	e035      	b.n	8018ce8 <UART_SetConfig+0xc48>
 8018c7c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8018c80:	f04f 0400 	mov.w	r4, #0
 8018c84:	e030      	b.n	8018ce8 <UART_SetConfig+0xc48>
 8018c86:	f04f 0340 	mov.w	r3, #64	; 0x40
 8018c8a:	f04f 0400 	mov.w	r4, #0
 8018c8e:	e02b      	b.n	8018ce8 <UART_SetConfig+0xc48>
 8018c90:	f04f 0320 	mov.w	r3, #32
 8018c94:	f04f 0400 	mov.w	r4, #0
 8018c98:	e026      	b.n	8018ce8 <UART_SetConfig+0xc48>
 8018c9a:	f04f 0310 	mov.w	r3, #16
 8018c9e:	f04f 0400 	mov.w	r4, #0
 8018ca2:	e021      	b.n	8018ce8 <UART_SetConfig+0xc48>
 8018ca4:	f04f 030c 	mov.w	r3, #12
 8018ca8:	f04f 0400 	mov.w	r4, #0
 8018cac:	e01c      	b.n	8018ce8 <UART_SetConfig+0xc48>
 8018cae:	f04f 030a 	mov.w	r3, #10
 8018cb2:	f04f 0400 	mov.w	r4, #0
 8018cb6:	e017      	b.n	8018ce8 <UART_SetConfig+0xc48>
 8018cb8:	f04f 0308 	mov.w	r3, #8
 8018cbc:	f04f 0400 	mov.w	r4, #0
 8018cc0:	e012      	b.n	8018ce8 <UART_SetConfig+0xc48>
 8018cc2:	f04f 0306 	mov.w	r3, #6
 8018cc6:	f04f 0400 	mov.w	r4, #0
 8018cca:	e00d      	b.n	8018ce8 <UART_SetConfig+0xc48>
 8018ccc:	f04f 0304 	mov.w	r3, #4
 8018cd0:	f04f 0400 	mov.w	r4, #0
 8018cd4:	e008      	b.n	8018ce8 <UART_SetConfig+0xc48>
 8018cd6:	f04f 0302 	mov.w	r3, #2
 8018cda:	f04f 0400 	mov.w	r4, #0
 8018cde:	e003      	b.n	8018ce8 <UART_SetConfig+0xc48>
 8018ce0:	f04f 0301 	mov.w	r3, #1
 8018ce4:	f04f 0400 	mov.w	r4, #0
 8018ce8:	461a      	mov	r2, r3
 8018cea:	4623      	mov	r3, r4
 8018cec:	f7e7 fafc 	bl	80002e8 <__aeabi_uldivmod>
 8018cf0:	4603      	mov	r3, r0
 8018cf2:	460c      	mov	r4, r1
 8018cf4:	4619      	mov	r1, r3
 8018cf6:	4622      	mov	r2, r4
 8018cf8:	f04f 0300 	mov.w	r3, #0
 8018cfc:	f04f 0400 	mov.w	r4, #0
 8018d00:	0214      	lsls	r4, r2, #8
 8018d02:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8018d06:	020b      	lsls	r3, r1, #8
 8018d08:	687a      	ldr	r2, [r7, #4]
 8018d0a:	6852      	ldr	r2, [r2, #4]
 8018d0c:	0852      	lsrs	r2, r2, #1
 8018d0e:	4611      	mov	r1, r2
 8018d10:	f04f 0200 	mov.w	r2, #0
 8018d14:	eb13 0b01 	adds.w	fp, r3, r1
 8018d18:	eb44 0c02 	adc.w	ip, r4, r2
 8018d1c:	4658      	mov	r0, fp
 8018d1e:	4661      	mov	r1, ip
 8018d20:	687b      	ldr	r3, [r7, #4]
 8018d22:	685b      	ldr	r3, [r3, #4]
 8018d24:	f04f 0400 	mov.w	r4, #0
 8018d28:	461a      	mov	r2, r3
 8018d2a:	4623      	mov	r3, r4
 8018d2c:	f7e7 fadc 	bl	80002e8 <__aeabi_uldivmod>
 8018d30:	4603      	mov	r3, r0
 8018d32:	460c      	mov	r4, r1
 8018d34:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8018d36:	e389      	b.n	801944c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018d38:	f107 0318 	add.w	r3, r7, #24
 8018d3c:	4618      	mov	r0, r3
 8018d3e:	f7fd fbe3 	bl	8016508 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018d42:	69fb      	ldr	r3, [r7, #28]
 8018d44:	4618      	mov	r0, r3
 8018d46:	f04f 0100 	mov.w	r1, #0
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d4e:	2b00      	cmp	r3, #0
 8018d50:	d067      	beq.n	8018e22 <UART_SetConfig+0xd82>
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d56:	2b01      	cmp	r3, #1
 8018d58:	d05e      	beq.n	8018e18 <UART_SetConfig+0xd78>
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d5e:	2b02      	cmp	r3, #2
 8018d60:	d055      	beq.n	8018e0e <UART_SetConfig+0xd6e>
 8018d62:	687b      	ldr	r3, [r7, #4]
 8018d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d66:	2b03      	cmp	r3, #3
 8018d68:	d04c      	beq.n	8018e04 <UART_SetConfig+0xd64>
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d6e:	2b04      	cmp	r3, #4
 8018d70:	d043      	beq.n	8018dfa <UART_SetConfig+0xd5a>
 8018d72:	687b      	ldr	r3, [r7, #4]
 8018d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d76:	2b05      	cmp	r3, #5
 8018d78:	d03a      	beq.n	8018df0 <UART_SetConfig+0xd50>
 8018d7a:	687b      	ldr	r3, [r7, #4]
 8018d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d7e:	2b06      	cmp	r3, #6
 8018d80:	d031      	beq.n	8018de6 <UART_SetConfig+0xd46>
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d86:	2b07      	cmp	r3, #7
 8018d88:	d028      	beq.n	8018ddc <UART_SetConfig+0xd3c>
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d8e:	2b08      	cmp	r3, #8
 8018d90:	d01f      	beq.n	8018dd2 <UART_SetConfig+0xd32>
 8018d92:	687b      	ldr	r3, [r7, #4]
 8018d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d96:	2b09      	cmp	r3, #9
 8018d98:	d016      	beq.n	8018dc8 <UART_SetConfig+0xd28>
 8018d9a:	687b      	ldr	r3, [r7, #4]
 8018d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d9e:	2b0a      	cmp	r3, #10
 8018da0:	d00d      	beq.n	8018dbe <UART_SetConfig+0xd1e>
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018da6:	2b0b      	cmp	r3, #11
 8018da8:	d104      	bne.n	8018db4 <UART_SetConfig+0xd14>
 8018daa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8018dae:	f04f 0400 	mov.w	r4, #0
 8018db2:	e03a      	b.n	8018e2a <UART_SetConfig+0xd8a>
 8018db4:	f04f 0301 	mov.w	r3, #1
 8018db8:	f04f 0400 	mov.w	r4, #0
 8018dbc:	e035      	b.n	8018e2a <UART_SetConfig+0xd8a>
 8018dbe:	f04f 0380 	mov.w	r3, #128	; 0x80
 8018dc2:	f04f 0400 	mov.w	r4, #0
 8018dc6:	e030      	b.n	8018e2a <UART_SetConfig+0xd8a>
 8018dc8:	f04f 0340 	mov.w	r3, #64	; 0x40
 8018dcc:	f04f 0400 	mov.w	r4, #0
 8018dd0:	e02b      	b.n	8018e2a <UART_SetConfig+0xd8a>
 8018dd2:	f04f 0320 	mov.w	r3, #32
 8018dd6:	f04f 0400 	mov.w	r4, #0
 8018dda:	e026      	b.n	8018e2a <UART_SetConfig+0xd8a>
 8018ddc:	f04f 0310 	mov.w	r3, #16
 8018de0:	f04f 0400 	mov.w	r4, #0
 8018de4:	e021      	b.n	8018e2a <UART_SetConfig+0xd8a>
 8018de6:	f04f 030c 	mov.w	r3, #12
 8018dea:	f04f 0400 	mov.w	r4, #0
 8018dee:	e01c      	b.n	8018e2a <UART_SetConfig+0xd8a>
 8018df0:	f04f 030a 	mov.w	r3, #10
 8018df4:	f04f 0400 	mov.w	r4, #0
 8018df8:	e017      	b.n	8018e2a <UART_SetConfig+0xd8a>
 8018dfa:	f04f 0308 	mov.w	r3, #8
 8018dfe:	f04f 0400 	mov.w	r4, #0
 8018e02:	e012      	b.n	8018e2a <UART_SetConfig+0xd8a>
 8018e04:	f04f 0306 	mov.w	r3, #6
 8018e08:	f04f 0400 	mov.w	r4, #0
 8018e0c:	e00d      	b.n	8018e2a <UART_SetConfig+0xd8a>
 8018e0e:	f04f 0304 	mov.w	r3, #4
 8018e12:	f04f 0400 	mov.w	r4, #0
 8018e16:	e008      	b.n	8018e2a <UART_SetConfig+0xd8a>
 8018e18:	f04f 0302 	mov.w	r3, #2
 8018e1c:	f04f 0400 	mov.w	r4, #0
 8018e20:	e003      	b.n	8018e2a <UART_SetConfig+0xd8a>
 8018e22:	f04f 0301 	mov.w	r3, #1
 8018e26:	f04f 0400 	mov.w	r4, #0
 8018e2a:	461a      	mov	r2, r3
 8018e2c:	4623      	mov	r3, r4
 8018e2e:	f7e7 fa5b 	bl	80002e8 <__aeabi_uldivmod>
 8018e32:	4603      	mov	r3, r0
 8018e34:	460c      	mov	r4, r1
 8018e36:	4619      	mov	r1, r3
 8018e38:	4622      	mov	r2, r4
 8018e3a:	f04f 0300 	mov.w	r3, #0
 8018e3e:	f04f 0400 	mov.w	r4, #0
 8018e42:	0214      	lsls	r4, r2, #8
 8018e44:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8018e48:	020b      	lsls	r3, r1, #8
 8018e4a:	687a      	ldr	r2, [r7, #4]
 8018e4c:	6852      	ldr	r2, [r2, #4]
 8018e4e:	0852      	lsrs	r2, r2, #1
 8018e50:	4611      	mov	r1, r2
 8018e52:	f04f 0200 	mov.w	r2, #0
 8018e56:	eb13 0b01 	adds.w	fp, r3, r1
 8018e5a:	eb44 0c02 	adc.w	ip, r4, r2
 8018e5e:	4658      	mov	r0, fp
 8018e60:	4661      	mov	r1, ip
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	685b      	ldr	r3, [r3, #4]
 8018e66:	f04f 0400 	mov.w	r4, #0
 8018e6a:	461a      	mov	r2, r3
 8018e6c:	4623      	mov	r3, r4
 8018e6e:	f7e7 fa3b 	bl	80002e8 <__aeabi_uldivmod>
 8018e72:	4603      	mov	r3, r0
 8018e74:	460c      	mov	r4, r1
 8018e76:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8018e78:	e2e8      	b.n	801944c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8018e7a:	f107 030c 	add.w	r3, r7, #12
 8018e7e:	4618      	mov	r0, r3
 8018e80:	f7fd fc8e 	bl	80167a0 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018e84:	693b      	ldr	r3, [r7, #16]
 8018e86:	4618      	mov	r0, r3
 8018e88:	f04f 0100 	mov.w	r1, #0
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	d067      	beq.n	8018f64 <UART_SetConfig+0xec4>
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e98:	2b01      	cmp	r3, #1
 8018e9a:	d05e      	beq.n	8018f5a <UART_SetConfig+0xeba>
 8018e9c:	687b      	ldr	r3, [r7, #4]
 8018e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ea0:	2b02      	cmp	r3, #2
 8018ea2:	d055      	beq.n	8018f50 <UART_SetConfig+0xeb0>
 8018ea4:	687b      	ldr	r3, [r7, #4]
 8018ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ea8:	2b03      	cmp	r3, #3
 8018eaa:	d04c      	beq.n	8018f46 <UART_SetConfig+0xea6>
 8018eac:	687b      	ldr	r3, [r7, #4]
 8018eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018eb0:	2b04      	cmp	r3, #4
 8018eb2:	d043      	beq.n	8018f3c <UART_SetConfig+0xe9c>
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018eb8:	2b05      	cmp	r3, #5
 8018eba:	d03a      	beq.n	8018f32 <UART_SetConfig+0xe92>
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ec0:	2b06      	cmp	r3, #6
 8018ec2:	d031      	beq.n	8018f28 <UART_SetConfig+0xe88>
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ec8:	2b07      	cmp	r3, #7
 8018eca:	d028      	beq.n	8018f1e <UART_SetConfig+0xe7e>
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ed0:	2b08      	cmp	r3, #8
 8018ed2:	d01f      	beq.n	8018f14 <UART_SetConfig+0xe74>
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ed8:	2b09      	cmp	r3, #9
 8018eda:	d016      	beq.n	8018f0a <UART_SetConfig+0xe6a>
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ee0:	2b0a      	cmp	r3, #10
 8018ee2:	d00d      	beq.n	8018f00 <UART_SetConfig+0xe60>
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ee8:	2b0b      	cmp	r3, #11
 8018eea:	d104      	bne.n	8018ef6 <UART_SetConfig+0xe56>
 8018eec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8018ef0:	f04f 0400 	mov.w	r4, #0
 8018ef4:	e03a      	b.n	8018f6c <UART_SetConfig+0xecc>
 8018ef6:	f04f 0301 	mov.w	r3, #1
 8018efa:	f04f 0400 	mov.w	r4, #0
 8018efe:	e035      	b.n	8018f6c <UART_SetConfig+0xecc>
 8018f00:	f04f 0380 	mov.w	r3, #128	; 0x80
 8018f04:	f04f 0400 	mov.w	r4, #0
 8018f08:	e030      	b.n	8018f6c <UART_SetConfig+0xecc>
 8018f0a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8018f0e:	f04f 0400 	mov.w	r4, #0
 8018f12:	e02b      	b.n	8018f6c <UART_SetConfig+0xecc>
 8018f14:	f04f 0320 	mov.w	r3, #32
 8018f18:	f04f 0400 	mov.w	r4, #0
 8018f1c:	e026      	b.n	8018f6c <UART_SetConfig+0xecc>
 8018f1e:	f04f 0310 	mov.w	r3, #16
 8018f22:	f04f 0400 	mov.w	r4, #0
 8018f26:	e021      	b.n	8018f6c <UART_SetConfig+0xecc>
 8018f28:	f04f 030c 	mov.w	r3, #12
 8018f2c:	f04f 0400 	mov.w	r4, #0
 8018f30:	e01c      	b.n	8018f6c <UART_SetConfig+0xecc>
 8018f32:	f04f 030a 	mov.w	r3, #10
 8018f36:	f04f 0400 	mov.w	r4, #0
 8018f3a:	e017      	b.n	8018f6c <UART_SetConfig+0xecc>
 8018f3c:	f04f 0308 	mov.w	r3, #8
 8018f40:	f04f 0400 	mov.w	r4, #0
 8018f44:	e012      	b.n	8018f6c <UART_SetConfig+0xecc>
 8018f46:	f04f 0306 	mov.w	r3, #6
 8018f4a:	f04f 0400 	mov.w	r4, #0
 8018f4e:	e00d      	b.n	8018f6c <UART_SetConfig+0xecc>
 8018f50:	f04f 0304 	mov.w	r3, #4
 8018f54:	f04f 0400 	mov.w	r4, #0
 8018f58:	e008      	b.n	8018f6c <UART_SetConfig+0xecc>
 8018f5a:	f04f 0302 	mov.w	r3, #2
 8018f5e:	f04f 0400 	mov.w	r4, #0
 8018f62:	e003      	b.n	8018f6c <UART_SetConfig+0xecc>
 8018f64:	f04f 0301 	mov.w	r3, #1
 8018f68:	f04f 0400 	mov.w	r4, #0
 8018f6c:	461a      	mov	r2, r3
 8018f6e:	4623      	mov	r3, r4
 8018f70:	f7e7 f9ba 	bl	80002e8 <__aeabi_uldivmod>
 8018f74:	4603      	mov	r3, r0
 8018f76:	460c      	mov	r4, r1
 8018f78:	4619      	mov	r1, r3
 8018f7a:	4622      	mov	r2, r4
 8018f7c:	f04f 0300 	mov.w	r3, #0
 8018f80:	f04f 0400 	mov.w	r4, #0
 8018f84:	0214      	lsls	r4, r2, #8
 8018f86:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8018f8a:	020b      	lsls	r3, r1, #8
 8018f8c:	687a      	ldr	r2, [r7, #4]
 8018f8e:	6852      	ldr	r2, [r2, #4]
 8018f90:	0852      	lsrs	r2, r2, #1
 8018f92:	4611      	mov	r1, r2
 8018f94:	f04f 0200 	mov.w	r2, #0
 8018f98:	eb13 0b01 	adds.w	fp, r3, r1
 8018f9c:	eb44 0c02 	adc.w	ip, r4, r2
 8018fa0:	4658      	mov	r0, fp
 8018fa2:	4661      	mov	r1, ip
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	685b      	ldr	r3, [r3, #4]
 8018fa8:	f04f 0400 	mov.w	r4, #0
 8018fac:	461a      	mov	r2, r3
 8018fae:	4623      	mov	r3, r4
 8018fb0:	f7e7 f99a 	bl	80002e8 <__aeabi_uldivmod>
 8018fb4:	4603      	mov	r3, r0
 8018fb6:	460c      	mov	r4, r1
 8018fb8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8018fba:	e247      	b.n	801944c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018fbc:	4b96      	ldr	r3, [pc, #600]	; (8019218 <UART_SetConfig+0x1178>)
 8018fbe:	681b      	ldr	r3, [r3, #0]
 8018fc0:	f003 0320 	and.w	r3, r3, #32
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	f000 80a3 	beq.w	8019110 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018fca:	4b93      	ldr	r3, [pc, #588]	; (8019218 <UART_SetConfig+0x1178>)
 8018fcc:	681b      	ldr	r3, [r3, #0]
 8018fce:	08db      	lsrs	r3, r3, #3
 8018fd0:	f003 0303 	and.w	r3, r3, #3
 8018fd4:	4a91      	ldr	r2, [pc, #580]	; (801921c <UART_SetConfig+0x117c>)
 8018fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8018fda:	4618      	mov	r0, r3
 8018fdc:	f04f 0100 	mov.w	r1, #0
 8018fe0:	687b      	ldr	r3, [r7, #4]
 8018fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fe4:	2b00      	cmp	r3, #0
 8018fe6:	d067      	beq.n	80190b8 <UART_SetConfig+0x1018>
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fec:	2b01      	cmp	r3, #1
 8018fee:	d05e      	beq.n	80190ae <UART_SetConfig+0x100e>
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ff4:	2b02      	cmp	r3, #2
 8018ff6:	d055      	beq.n	80190a4 <UART_SetConfig+0x1004>
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ffc:	2b03      	cmp	r3, #3
 8018ffe:	d04c      	beq.n	801909a <UART_SetConfig+0xffa>
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019004:	2b04      	cmp	r3, #4
 8019006:	d043      	beq.n	8019090 <UART_SetConfig+0xff0>
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801900c:	2b05      	cmp	r3, #5
 801900e:	d03a      	beq.n	8019086 <UART_SetConfig+0xfe6>
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019014:	2b06      	cmp	r3, #6
 8019016:	d031      	beq.n	801907c <UART_SetConfig+0xfdc>
 8019018:	687b      	ldr	r3, [r7, #4]
 801901a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801901c:	2b07      	cmp	r3, #7
 801901e:	d028      	beq.n	8019072 <UART_SetConfig+0xfd2>
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019024:	2b08      	cmp	r3, #8
 8019026:	d01f      	beq.n	8019068 <UART_SetConfig+0xfc8>
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801902c:	2b09      	cmp	r3, #9
 801902e:	d016      	beq.n	801905e <UART_SetConfig+0xfbe>
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019034:	2b0a      	cmp	r3, #10
 8019036:	d00d      	beq.n	8019054 <UART_SetConfig+0xfb4>
 8019038:	687b      	ldr	r3, [r7, #4]
 801903a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801903c:	2b0b      	cmp	r3, #11
 801903e:	d104      	bne.n	801904a <UART_SetConfig+0xfaa>
 8019040:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019044:	f04f 0400 	mov.w	r4, #0
 8019048:	e03a      	b.n	80190c0 <UART_SetConfig+0x1020>
 801904a:	f04f 0301 	mov.w	r3, #1
 801904e:	f04f 0400 	mov.w	r4, #0
 8019052:	e035      	b.n	80190c0 <UART_SetConfig+0x1020>
 8019054:	f04f 0380 	mov.w	r3, #128	; 0x80
 8019058:	f04f 0400 	mov.w	r4, #0
 801905c:	e030      	b.n	80190c0 <UART_SetConfig+0x1020>
 801905e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8019062:	f04f 0400 	mov.w	r4, #0
 8019066:	e02b      	b.n	80190c0 <UART_SetConfig+0x1020>
 8019068:	f04f 0320 	mov.w	r3, #32
 801906c:	f04f 0400 	mov.w	r4, #0
 8019070:	e026      	b.n	80190c0 <UART_SetConfig+0x1020>
 8019072:	f04f 0310 	mov.w	r3, #16
 8019076:	f04f 0400 	mov.w	r4, #0
 801907a:	e021      	b.n	80190c0 <UART_SetConfig+0x1020>
 801907c:	f04f 030c 	mov.w	r3, #12
 8019080:	f04f 0400 	mov.w	r4, #0
 8019084:	e01c      	b.n	80190c0 <UART_SetConfig+0x1020>
 8019086:	f04f 030a 	mov.w	r3, #10
 801908a:	f04f 0400 	mov.w	r4, #0
 801908e:	e017      	b.n	80190c0 <UART_SetConfig+0x1020>
 8019090:	f04f 0308 	mov.w	r3, #8
 8019094:	f04f 0400 	mov.w	r4, #0
 8019098:	e012      	b.n	80190c0 <UART_SetConfig+0x1020>
 801909a:	f04f 0306 	mov.w	r3, #6
 801909e:	f04f 0400 	mov.w	r4, #0
 80190a2:	e00d      	b.n	80190c0 <UART_SetConfig+0x1020>
 80190a4:	f04f 0304 	mov.w	r3, #4
 80190a8:	f04f 0400 	mov.w	r4, #0
 80190ac:	e008      	b.n	80190c0 <UART_SetConfig+0x1020>
 80190ae:	f04f 0302 	mov.w	r3, #2
 80190b2:	f04f 0400 	mov.w	r4, #0
 80190b6:	e003      	b.n	80190c0 <UART_SetConfig+0x1020>
 80190b8:	f04f 0301 	mov.w	r3, #1
 80190bc:	f04f 0400 	mov.w	r4, #0
 80190c0:	461a      	mov	r2, r3
 80190c2:	4623      	mov	r3, r4
 80190c4:	f7e7 f910 	bl	80002e8 <__aeabi_uldivmod>
 80190c8:	4603      	mov	r3, r0
 80190ca:	460c      	mov	r4, r1
 80190cc:	4619      	mov	r1, r3
 80190ce:	4622      	mov	r2, r4
 80190d0:	f04f 0300 	mov.w	r3, #0
 80190d4:	f04f 0400 	mov.w	r4, #0
 80190d8:	0214      	lsls	r4, r2, #8
 80190da:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80190de:	020b      	lsls	r3, r1, #8
 80190e0:	687a      	ldr	r2, [r7, #4]
 80190e2:	6852      	ldr	r2, [r2, #4]
 80190e4:	0852      	lsrs	r2, r2, #1
 80190e6:	4611      	mov	r1, r2
 80190e8:	f04f 0200 	mov.w	r2, #0
 80190ec:	eb13 0b01 	adds.w	fp, r3, r1
 80190f0:	eb44 0c02 	adc.w	ip, r4, r2
 80190f4:	4658      	mov	r0, fp
 80190f6:	4661      	mov	r1, ip
 80190f8:	687b      	ldr	r3, [r7, #4]
 80190fa:	685b      	ldr	r3, [r3, #4]
 80190fc:	f04f 0400 	mov.w	r4, #0
 8019100:	461a      	mov	r2, r3
 8019102:	4623      	mov	r3, r4
 8019104:	f7e7 f8f0 	bl	80002e8 <__aeabi_uldivmod>
 8019108:	4603      	mov	r3, r0
 801910a:	460c      	mov	r4, r1
 801910c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 801910e:	e19d      	b.n	801944c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019110:	687b      	ldr	r3, [r7, #4]
 8019112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019114:	2b00      	cmp	r3, #0
 8019116:	d05b      	beq.n	80191d0 <UART_SetConfig+0x1130>
 8019118:	687b      	ldr	r3, [r7, #4]
 801911a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801911c:	2b01      	cmp	r3, #1
 801911e:	d053      	beq.n	80191c8 <UART_SetConfig+0x1128>
 8019120:	687b      	ldr	r3, [r7, #4]
 8019122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019124:	2b02      	cmp	r3, #2
 8019126:	d04b      	beq.n	80191c0 <UART_SetConfig+0x1120>
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801912c:	2b03      	cmp	r3, #3
 801912e:	d043      	beq.n	80191b8 <UART_SetConfig+0x1118>
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019134:	2b04      	cmp	r3, #4
 8019136:	d03b      	beq.n	80191b0 <UART_SetConfig+0x1110>
 8019138:	687b      	ldr	r3, [r7, #4]
 801913a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801913c:	2b05      	cmp	r3, #5
 801913e:	d033      	beq.n	80191a8 <UART_SetConfig+0x1108>
 8019140:	687b      	ldr	r3, [r7, #4]
 8019142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019144:	2b06      	cmp	r3, #6
 8019146:	d02b      	beq.n	80191a0 <UART_SetConfig+0x1100>
 8019148:	687b      	ldr	r3, [r7, #4]
 801914a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801914c:	2b07      	cmp	r3, #7
 801914e:	d023      	beq.n	8019198 <UART_SetConfig+0x10f8>
 8019150:	687b      	ldr	r3, [r7, #4]
 8019152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019154:	2b08      	cmp	r3, #8
 8019156:	d01b      	beq.n	8019190 <UART_SetConfig+0x10f0>
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801915c:	2b09      	cmp	r3, #9
 801915e:	d013      	beq.n	8019188 <UART_SetConfig+0x10e8>
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019164:	2b0a      	cmp	r3, #10
 8019166:	d00b      	beq.n	8019180 <UART_SetConfig+0x10e0>
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801916c:	2b0b      	cmp	r3, #11
 801916e:	d103      	bne.n	8019178 <UART_SetConfig+0x10d8>
 8019170:	4b2a      	ldr	r3, [pc, #168]	; (801921c <UART_SetConfig+0x117c>)
 8019172:	f04f 0400 	mov.w	r4, #0
 8019176:	e02e      	b.n	80191d6 <UART_SetConfig+0x1136>
 8019178:	4b29      	ldr	r3, [pc, #164]	; (8019220 <UART_SetConfig+0x1180>)
 801917a:	f04f 0403 	mov.w	r4, #3
 801917e:	e02a      	b.n	80191d6 <UART_SetConfig+0x1136>
 8019180:	4b28      	ldr	r3, [pc, #160]	; (8019224 <UART_SetConfig+0x1184>)
 8019182:	f04f 0400 	mov.w	r4, #0
 8019186:	e026      	b.n	80191d6 <UART_SetConfig+0x1136>
 8019188:	4b27      	ldr	r3, [pc, #156]	; (8019228 <UART_SetConfig+0x1188>)
 801918a:	f04f 0400 	mov.w	r4, #0
 801918e:	e022      	b.n	80191d6 <UART_SetConfig+0x1136>
 8019190:	4b26      	ldr	r3, [pc, #152]	; (801922c <UART_SetConfig+0x118c>)
 8019192:	f04f 0400 	mov.w	r4, #0
 8019196:	e01e      	b.n	80191d6 <UART_SetConfig+0x1136>
 8019198:	4b25      	ldr	r3, [pc, #148]	; (8019230 <UART_SetConfig+0x1190>)
 801919a:	f04f 0400 	mov.w	r4, #0
 801919e:	e01a      	b.n	80191d6 <UART_SetConfig+0x1136>
 80191a0:	a419      	add	r4, pc, #100	; (adr r4, 8019208 <UART_SetConfig+0x1168>)
 80191a2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80191a6:	e016      	b.n	80191d6 <UART_SetConfig+0x1136>
 80191a8:	4b22      	ldr	r3, [pc, #136]	; (8019234 <UART_SetConfig+0x1194>)
 80191aa:	f04f 0400 	mov.w	r4, #0
 80191ae:	e012      	b.n	80191d6 <UART_SetConfig+0x1136>
 80191b0:	4b21      	ldr	r3, [pc, #132]	; (8019238 <UART_SetConfig+0x1198>)
 80191b2:	f04f 0400 	mov.w	r4, #0
 80191b6:	e00e      	b.n	80191d6 <UART_SetConfig+0x1136>
 80191b8:	a415      	add	r4, pc, #84	; (adr r4, 8019210 <UART_SetConfig+0x1170>)
 80191ba:	e9d4 3400 	ldrd	r3, r4, [r4]
 80191be:	e00a      	b.n	80191d6 <UART_SetConfig+0x1136>
 80191c0:	4b1e      	ldr	r3, [pc, #120]	; (801923c <UART_SetConfig+0x119c>)
 80191c2:	f04f 0400 	mov.w	r4, #0
 80191c6:	e006      	b.n	80191d6 <UART_SetConfig+0x1136>
 80191c8:	4b1d      	ldr	r3, [pc, #116]	; (8019240 <UART_SetConfig+0x11a0>)
 80191ca:	f04f 0401 	mov.w	r4, #1
 80191ce:	e002      	b.n	80191d6 <UART_SetConfig+0x1136>
 80191d0:	4b13      	ldr	r3, [pc, #76]	; (8019220 <UART_SetConfig+0x1180>)
 80191d2:	f04f 0403 	mov.w	r4, #3
 80191d6:	687a      	ldr	r2, [r7, #4]
 80191d8:	6852      	ldr	r2, [r2, #4]
 80191da:	0852      	lsrs	r2, r2, #1
 80191dc:	4611      	mov	r1, r2
 80191de:	f04f 0200 	mov.w	r2, #0
 80191e2:	eb13 0b01 	adds.w	fp, r3, r1
 80191e6:	eb44 0c02 	adc.w	ip, r4, r2
 80191ea:	4658      	mov	r0, fp
 80191ec:	4661      	mov	r1, ip
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	685b      	ldr	r3, [r3, #4]
 80191f2:	f04f 0400 	mov.w	r4, #0
 80191f6:	461a      	mov	r2, r3
 80191f8:	4623      	mov	r3, r4
 80191fa:	f7e7 f875 	bl	80002e8 <__aeabi_uldivmod>
 80191fe:	4603      	mov	r3, r0
 8019200:	460c      	mov	r4, r1
 8019202:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8019204:	e122      	b.n	801944c <UART_SetConfig+0x13ac>
 8019206:	bf00      	nop
 8019208:	51615500 	.word	0x51615500
 801920c:	00000000 	.word	0x00000000
 8019210:	a2c2aa00 	.word	0xa2c2aa00
 8019214:	00000000 	.word	0x00000000
 8019218:	58024400 	.word	0x58024400
 801921c:	03d09000 	.word	0x03d09000
 8019220:	d0900000 	.word	0xd0900000
 8019224:	07a12000 	.word	0x07a12000
 8019228:	0f424000 	.word	0x0f424000
 801922c:	1e848000 	.word	0x1e848000
 8019230:	3d090000 	.word	0x3d090000
 8019234:	61a80000 	.word	0x61a80000
 8019238:	7a120000 	.word	0x7a120000
 801923c:	f4240000 	.word	0xf4240000
 8019240:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019244:	687b      	ldr	r3, [r7, #4]
 8019246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019248:	2b00      	cmp	r3, #0
 801924a:	d05b      	beq.n	8019304 <UART_SetConfig+0x1264>
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019250:	2b01      	cmp	r3, #1
 8019252:	d053      	beq.n	80192fc <UART_SetConfig+0x125c>
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019258:	2b02      	cmp	r3, #2
 801925a:	d04b      	beq.n	80192f4 <UART_SetConfig+0x1254>
 801925c:	687b      	ldr	r3, [r7, #4]
 801925e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019260:	2b03      	cmp	r3, #3
 8019262:	d043      	beq.n	80192ec <UART_SetConfig+0x124c>
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019268:	2b04      	cmp	r3, #4
 801926a:	d03b      	beq.n	80192e4 <UART_SetConfig+0x1244>
 801926c:	687b      	ldr	r3, [r7, #4]
 801926e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019270:	2b05      	cmp	r3, #5
 8019272:	d033      	beq.n	80192dc <UART_SetConfig+0x123c>
 8019274:	687b      	ldr	r3, [r7, #4]
 8019276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019278:	2b06      	cmp	r3, #6
 801927a:	d02b      	beq.n	80192d4 <UART_SetConfig+0x1234>
 801927c:	687b      	ldr	r3, [r7, #4]
 801927e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019280:	2b07      	cmp	r3, #7
 8019282:	d023      	beq.n	80192cc <UART_SetConfig+0x122c>
 8019284:	687b      	ldr	r3, [r7, #4]
 8019286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019288:	2b08      	cmp	r3, #8
 801928a:	d01b      	beq.n	80192c4 <UART_SetConfig+0x1224>
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019290:	2b09      	cmp	r3, #9
 8019292:	d013      	beq.n	80192bc <UART_SetConfig+0x121c>
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019298:	2b0a      	cmp	r3, #10
 801929a:	d00b      	beq.n	80192b4 <UART_SetConfig+0x1214>
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192a0:	2b0b      	cmp	r3, #11
 80192a2:	d103      	bne.n	80192ac <UART_SetConfig+0x120c>
 80192a4:	4bc0      	ldr	r3, [pc, #768]	; (80195a8 <UART_SetConfig+0x1508>)
 80192a6:	f04f 0400 	mov.w	r4, #0
 80192aa:	e02e      	b.n	801930a <UART_SetConfig+0x126a>
 80192ac:	4bbf      	ldr	r3, [pc, #764]	; (80195ac <UART_SetConfig+0x150c>)
 80192ae:	f04f 0400 	mov.w	r4, #0
 80192b2:	e02a      	b.n	801930a <UART_SetConfig+0x126a>
 80192b4:	4bbe      	ldr	r3, [pc, #760]	; (80195b0 <UART_SetConfig+0x1510>)
 80192b6:	f04f 0400 	mov.w	r4, #0
 80192ba:	e026      	b.n	801930a <UART_SetConfig+0x126a>
 80192bc:	4bbd      	ldr	r3, [pc, #756]	; (80195b4 <UART_SetConfig+0x1514>)
 80192be:	f04f 0400 	mov.w	r4, #0
 80192c2:	e022      	b.n	801930a <UART_SetConfig+0x126a>
 80192c4:	4bbc      	ldr	r3, [pc, #752]	; (80195b8 <UART_SetConfig+0x1518>)
 80192c6:	f04f 0400 	mov.w	r4, #0
 80192ca:	e01e      	b.n	801930a <UART_SetConfig+0x126a>
 80192cc:	4bbb      	ldr	r3, [pc, #748]	; (80195bc <UART_SetConfig+0x151c>)
 80192ce:	f04f 0400 	mov.w	r4, #0
 80192d2:	e01a      	b.n	801930a <UART_SetConfig+0x126a>
 80192d4:	a4b0      	add	r4, pc, #704	; (adr r4, 8019598 <UART_SetConfig+0x14f8>)
 80192d6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80192da:	e016      	b.n	801930a <UART_SetConfig+0x126a>
 80192dc:	4bb8      	ldr	r3, [pc, #736]	; (80195c0 <UART_SetConfig+0x1520>)
 80192de:	f04f 0400 	mov.w	r4, #0
 80192e2:	e012      	b.n	801930a <UART_SetConfig+0x126a>
 80192e4:	4bb7      	ldr	r3, [pc, #732]	; (80195c4 <UART_SetConfig+0x1524>)
 80192e6:	f04f 0400 	mov.w	r4, #0
 80192ea:	e00e      	b.n	801930a <UART_SetConfig+0x126a>
 80192ec:	a4ac      	add	r4, pc, #688	; (adr r4, 80195a0 <UART_SetConfig+0x1500>)
 80192ee:	e9d4 3400 	ldrd	r3, r4, [r4]
 80192f2:	e00a      	b.n	801930a <UART_SetConfig+0x126a>
 80192f4:	4bb4      	ldr	r3, [pc, #720]	; (80195c8 <UART_SetConfig+0x1528>)
 80192f6:	f04f 0400 	mov.w	r4, #0
 80192fa:	e006      	b.n	801930a <UART_SetConfig+0x126a>
 80192fc:	4bb3      	ldr	r3, [pc, #716]	; (80195cc <UART_SetConfig+0x152c>)
 80192fe:	f04f 0400 	mov.w	r4, #0
 8019302:	e002      	b.n	801930a <UART_SetConfig+0x126a>
 8019304:	4ba9      	ldr	r3, [pc, #676]	; (80195ac <UART_SetConfig+0x150c>)
 8019306:	f04f 0400 	mov.w	r4, #0
 801930a:	687a      	ldr	r2, [r7, #4]
 801930c:	6852      	ldr	r2, [r2, #4]
 801930e:	0852      	lsrs	r2, r2, #1
 8019310:	4611      	mov	r1, r2
 8019312:	f04f 0200 	mov.w	r2, #0
 8019316:	eb13 0b01 	adds.w	fp, r3, r1
 801931a:	eb44 0c02 	adc.w	ip, r4, r2
 801931e:	4658      	mov	r0, fp
 8019320:	4661      	mov	r1, ip
 8019322:	687b      	ldr	r3, [r7, #4]
 8019324:	685b      	ldr	r3, [r3, #4]
 8019326:	f04f 0400 	mov.w	r4, #0
 801932a:	461a      	mov	r2, r3
 801932c:	4623      	mov	r3, r4
 801932e:	f7e6 ffdb 	bl	80002e8 <__aeabi_uldivmod>
 8019332:	4603      	mov	r3, r0
 8019334:	460c      	mov	r4, r1
 8019336:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8019338:	e088      	b.n	801944c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801933e:	2b00      	cmp	r3, #0
 8019340:	d064      	beq.n	801940c <UART_SetConfig+0x136c>
 8019342:	687b      	ldr	r3, [r7, #4]
 8019344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019346:	2b01      	cmp	r3, #1
 8019348:	d05b      	beq.n	8019402 <UART_SetConfig+0x1362>
 801934a:	687b      	ldr	r3, [r7, #4]
 801934c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801934e:	2b02      	cmp	r3, #2
 8019350:	d052      	beq.n	80193f8 <UART_SetConfig+0x1358>
 8019352:	687b      	ldr	r3, [r7, #4]
 8019354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019356:	2b03      	cmp	r3, #3
 8019358:	d04a      	beq.n	80193f0 <UART_SetConfig+0x1350>
 801935a:	687b      	ldr	r3, [r7, #4]
 801935c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801935e:	2b04      	cmp	r3, #4
 8019360:	d041      	beq.n	80193e6 <UART_SetConfig+0x1346>
 8019362:	687b      	ldr	r3, [r7, #4]
 8019364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019366:	2b05      	cmp	r3, #5
 8019368:	d039      	beq.n	80193de <UART_SetConfig+0x133e>
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801936e:	2b06      	cmp	r3, #6
 8019370:	d031      	beq.n	80193d6 <UART_SetConfig+0x1336>
 8019372:	687b      	ldr	r3, [r7, #4]
 8019374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019376:	2b07      	cmp	r3, #7
 8019378:	d028      	beq.n	80193cc <UART_SetConfig+0x132c>
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801937e:	2b08      	cmp	r3, #8
 8019380:	d01f      	beq.n	80193c2 <UART_SetConfig+0x1322>
 8019382:	687b      	ldr	r3, [r7, #4]
 8019384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019386:	2b09      	cmp	r3, #9
 8019388:	d016      	beq.n	80193b8 <UART_SetConfig+0x1318>
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801938e:	2b0a      	cmp	r3, #10
 8019390:	d00d      	beq.n	80193ae <UART_SetConfig+0x130e>
 8019392:	687b      	ldr	r3, [r7, #4]
 8019394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019396:	2b0b      	cmp	r3, #11
 8019398:	d104      	bne.n	80193a4 <UART_SetConfig+0x1304>
 801939a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801939e:	f04f 0400 	mov.w	r4, #0
 80193a2:	e037      	b.n	8019414 <UART_SetConfig+0x1374>
 80193a4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80193a8:	f04f 0400 	mov.w	r4, #0
 80193ac:	e032      	b.n	8019414 <UART_SetConfig+0x1374>
 80193ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80193b2:	f04f 0400 	mov.w	r4, #0
 80193b6:	e02d      	b.n	8019414 <UART_SetConfig+0x1374>
 80193b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80193bc:	f04f 0400 	mov.w	r4, #0
 80193c0:	e028      	b.n	8019414 <UART_SetConfig+0x1374>
 80193c2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80193c6:	f04f 0400 	mov.w	r4, #0
 80193ca:	e023      	b.n	8019414 <UART_SetConfig+0x1374>
 80193cc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80193d0:	f04f 0400 	mov.w	r4, #0
 80193d4:	e01e      	b.n	8019414 <UART_SetConfig+0x1374>
 80193d6:	4b7e      	ldr	r3, [pc, #504]	; (80195d0 <UART_SetConfig+0x1530>)
 80193d8:	f04f 0400 	mov.w	r4, #0
 80193dc:	e01a      	b.n	8019414 <UART_SetConfig+0x1374>
 80193de:	4b7d      	ldr	r3, [pc, #500]	; (80195d4 <UART_SetConfig+0x1534>)
 80193e0:	f04f 0400 	mov.w	r4, #0
 80193e4:	e016      	b.n	8019414 <UART_SetConfig+0x1374>
 80193e6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80193ea:	f04f 0400 	mov.w	r4, #0
 80193ee:	e011      	b.n	8019414 <UART_SetConfig+0x1374>
 80193f0:	4b79      	ldr	r3, [pc, #484]	; (80195d8 <UART_SetConfig+0x1538>)
 80193f2:	f04f 0400 	mov.w	r4, #0
 80193f6:	e00d      	b.n	8019414 <UART_SetConfig+0x1374>
 80193f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80193fc:	f04f 0400 	mov.w	r4, #0
 8019400:	e008      	b.n	8019414 <UART_SetConfig+0x1374>
 8019402:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8019406:	f04f 0400 	mov.w	r4, #0
 801940a:	e003      	b.n	8019414 <UART_SetConfig+0x1374>
 801940c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8019410:	f04f 0400 	mov.w	r4, #0
 8019414:	687a      	ldr	r2, [r7, #4]
 8019416:	6852      	ldr	r2, [r2, #4]
 8019418:	0852      	lsrs	r2, r2, #1
 801941a:	4611      	mov	r1, r2
 801941c:	f04f 0200 	mov.w	r2, #0
 8019420:	eb13 0b01 	adds.w	fp, r3, r1
 8019424:	eb44 0c02 	adc.w	ip, r4, r2
 8019428:	4658      	mov	r0, fp
 801942a:	4661      	mov	r1, ip
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	685b      	ldr	r3, [r3, #4]
 8019430:	f04f 0400 	mov.w	r4, #0
 8019434:	461a      	mov	r2, r3
 8019436:	4623      	mov	r3, r4
 8019438:	f7e6 ff56 	bl	80002e8 <__aeabi_uldivmod>
 801943c:	4603      	mov	r3, r0
 801943e:	460c      	mov	r4, r1
 8019440:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8019442:	e003      	b.n	801944c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8019444:	2301      	movs	r3, #1
 8019446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 801944a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801944c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801944e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8019452:	d309      	bcc.n	8019468 <UART_SetConfig+0x13c8>
 8019454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019456:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801945a:	d205      	bcs.n	8019468 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 801945c:	687b      	ldr	r3, [r7, #4]
 801945e:	681b      	ldr	r3, [r3, #0]
 8019460:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019462:	60da      	str	r2, [r3, #12]
 8019464:	f000 bf85 	b.w	801a372 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8019468:	2301      	movs	r3, #1
 801946a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801946e:	f000 bf80 	b.w	801a372 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8019472:	687b      	ldr	r3, [r7, #4]
 8019474:	69db      	ldr	r3, [r3, #28]
 8019476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801947a:	f040 83da 	bne.w	8019c32 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 801947e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8019482:	2b40      	cmp	r3, #64	; 0x40
 8019484:	f200 83b3 	bhi.w	8019bee <UART_SetConfig+0x1b4e>
 8019488:	a201      	add	r2, pc, #4	; (adr r2, 8019490 <UART_SetConfig+0x13f0>)
 801948a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801948e:	bf00      	nop
 8019490:	080195dd 	.word	0x080195dd
 8019494:	08019695 	.word	0x08019695
 8019498:	08019bef 	.word	0x08019bef
 801949c:	08019bef 	.word	0x08019bef
 80194a0:	0801974d 	.word	0x0801974d
 80194a4:	08019bef 	.word	0x08019bef
 80194a8:	08019bef 	.word	0x08019bef
 80194ac:	08019bef 	.word	0x08019bef
 80194b0:	08019809 	.word	0x08019809
 80194b4:	08019bef 	.word	0x08019bef
 80194b8:	08019bef 	.word	0x08019bef
 80194bc:	08019bef 	.word	0x08019bef
 80194c0:	08019bef 	.word	0x08019bef
 80194c4:	08019bef 	.word	0x08019bef
 80194c8:	08019bef 	.word	0x08019bef
 80194cc:	08019bef 	.word	0x08019bef
 80194d0:	080198c5 	.word	0x080198c5
 80194d4:	08019bef 	.word	0x08019bef
 80194d8:	08019bef 	.word	0x08019bef
 80194dc:	08019bef 	.word	0x08019bef
 80194e0:	08019bef 	.word	0x08019bef
 80194e4:	08019bef 	.word	0x08019bef
 80194e8:	08019bef 	.word	0x08019bef
 80194ec:	08019bef 	.word	0x08019bef
 80194f0:	08019bef 	.word	0x08019bef
 80194f4:	08019bef 	.word	0x08019bef
 80194f8:	08019bef 	.word	0x08019bef
 80194fc:	08019bef 	.word	0x08019bef
 8019500:	08019bef 	.word	0x08019bef
 8019504:	08019bef 	.word	0x08019bef
 8019508:	08019bef 	.word	0x08019bef
 801950c:	08019bef 	.word	0x08019bef
 8019510:	08019a37 	.word	0x08019a37
 8019514:	08019bef 	.word	0x08019bef
 8019518:	08019bef 	.word	0x08019bef
 801951c:	08019bef 	.word	0x08019bef
 8019520:	08019bef 	.word	0x08019bef
 8019524:	08019bef 	.word	0x08019bef
 8019528:	08019bef 	.word	0x08019bef
 801952c:	08019bef 	.word	0x08019bef
 8019530:	08019bef 	.word	0x08019bef
 8019534:	08019bef 	.word	0x08019bef
 8019538:	08019bef 	.word	0x08019bef
 801953c:	08019bef 	.word	0x08019bef
 8019540:	08019bef 	.word	0x08019bef
 8019544:	08019bef 	.word	0x08019bef
 8019548:	08019bef 	.word	0x08019bef
 801954c:	08019bef 	.word	0x08019bef
 8019550:	08019bef 	.word	0x08019bef
 8019554:	08019bef 	.word	0x08019bef
 8019558:	08019bef 	.word	0x08019bef
 801955c:	08019bef 	.word	0x08019bef
 8019560:	08019bef 	.word	0x08019bef
 8019564:	08019bef 	.word	0x08019bef
 8019568:	08019bef 	.word	0x08019bef
 801956c:	08019bef 	.word	0x08019bef
 8019570:	08019bef 	.word	0x08019bef
 8019574:	08019bef 	.word	0x08019bef
 8019578:	08019bef 	.word	0x08019bef
 801957c:	08019bef 	.word	0x08019bef
 8019580:	08019bef 	.word	0x08019bef
 8019584:	08019bef 	.word	0x08019bef
 8019588:	08019bef 	.word	0x08019bef
 801958c:	08019bef 	.word	0x08019bef
 8019590:	08019b2d 	.word	0x08019b2d
 8019594:	f3af 8000 	nop.w
 8019598:	05161500 	.word	0x05161500
 801959c:	00000000 	.word	0x00000000
 80195a0:	0a2c2a00 	.word	0x0a2c2a00
 80195a4:	00000000 	.word	0x00000000
 80195a8:	003d0900 	.word	0x003d0900
 80195ac:	3d090000 	.word	0x3d090000
 80195b0:	007a1200 	.word	0x007a1200
 80195b4:	00f42400 	.word	0x00f42400
 80195b8:	01e84800 	.word	0x01e84800
 80195bc:	03d09000 	.word	0x03d09000
 80195c0:	061a8000 	.word	0x061a8000
 80195c4:	07a12000 	.word	0x07a12000
 80195c8:	0f424000 	.word	0x0f424000
 80195cc:	1e848000 	.word	0x1e848000
 80195d0:	000aaa00 	.word	0x000aaa00
 80195d4:	000ccc00 	.word	0x000ccc00
 80195d8:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80195dc:	f7fc f874 	bl	80156c8 <HAL_RCC_GetPCLK1Freq>
 80195e0:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80195e2:	687b      	ldr	r3, [r7, #4]
 80195e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195e6:	2b00      	cmp	r3, #0
 80195e8:	d044      	beq.n	8019674 <UART_SetConfig+0x15d4>
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195ee:	2b01      	cmp	r3, #1
 80195f0:	d03e      	beq.n	8019670 <UART_SetConfig+0x15d0>
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195f6:	2b02      	cmp	r3, #2
 80195f8:	d038      	beq.n	801966c <UART_SetConfig+0x15cc>
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195fe:	2b03      	cmp	r3, #3
 8019600:	d032      	beq.n	8019668 <UART_SetConfig+0x15c8>
 8019602:	687b      	ldr	r3, [r7, #4]
 8019604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019606:	2b04      	cmp	r3, #4
 8019608:	d02c      	beq.n	8019664 <UART_SetConfig+0x15c4>
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801960e:	2b05      	cmp	r3, #5
 8019610:	d026      	beq.n	8019660 <UART_SetConfig+0x15c0>
 8019612:	687b      	ldr	r3, [r7, #4]
 8019614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019616:	2b06      	cmp	r3, #6
 8019618:	d020      	beq.n	801965c <UART_SetConfig+0x15bc>
 801961a:	687b      	ldr	r3, [r7, #4]
 801961c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801961e:	2b07      	cmp	r3, #7
 8019620:	d01a      	beq.n	8019658 <UART_SetConfig+0x15b8>
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019626:	2b08      	cmp	r3, #8
 8019628:	d014      	beq.n	8019654 <UART_SetConfig+0x15b4>
 801962a:	687b      	ldr	r3, [r7, #4]
 801962c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801962e:	2b09      	cmp	r3, #9
 8019630:	d00e      	beq.n	8019650 <UART_SetConfig+0x15b0>
 8019632:	687b      	ldr	r3, [r7, #4]
 8019634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019636:	2b0a      	cmp	r3, #10
 8019638:	d008      	beq.n	801964c <UART_SetConfig+0x15ac>
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801963e:	2b0b      	cmp	r3, #11
 8019640:	d102      	bne.n	8019648 <UART_SetConfig+0x15a8>
 8019642:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019646:	e016      	b.n	8019676 <UART_SetConfig+0x15d6>
 8019648:	2301      	movs	r3, #1
 801964a:	e014      	b.n	8019676 <UART_SetConfig+0x15d6>
 801964c:	2380      	movs	r3, #128	; 0x80
 801964e:	e012      	b.n	8019676 <UART_SetConfig+0x15d6>
 8019650:	2340      	movs	r3, #64	; 0x40
 8019652:	e010      	b.n	8019676 <UART_SetConfig+0x15d6>
 8019654:	2320      	movs	r3, #32
 8019656:	e00e      	b.n	8019676 <UART_SetConfig+0x15d6>
 8019658:	2310      	movs	r3, #16
 801965a:	e00c      	b.n	8019676 <UART_SetConfig+0x15d6>
 801965c:	230c      	movs	r3, #12
 801965e:	e00a      	b.n	8019676 <UART_SetConfig+0x15d6>
 8019660:	230a      	movs	r3, #10
 8019662:	e008      	b.n	8019676 <UART_SetConfig+0x15d6>
 8019664:	2308      	movs	r3, #8
 8019666:	e006      	b.n	8019676 <UART_SetConfig+0x15d6>
 8019668:	2306      	movs	r3, #6
 801966a:	e004      	b.n	8019676 <UART_SetConfig+0x15d6>
 801966c:	2304      	movs	r3, #4
 801966e:	e002      	b.n	8019676 <UART_SetConfig+0x15d6>
 8019670:	2302      	movs	r3, #2
 8019672:	e000      	b.n	8019676 <UART_SetConfig+0x15d6>
 8019674:	2301      	movs	r3, #1
 8019676:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019678:	fbb2 f3f3 	udiv	r3, r2, r3
 801967c:	005a      	lsls	r2, r3, #1
 801967e:	687b      	ldr	r3, [r7, #4]
 8019680:	685b      	ldr	r3, [r3, #4]
 8019682:	085b      	lsrs	r3, r3, #1
 8019684:	441a      	add	r2, r3
 8019686:	687b      	ldr	r3, [r7, #4]
 8019688:	685b      	ldr	r3, [r3, #4]
 801968a:	fbb2 f3f3 	udiv	r3, r2, r3
 801968e:	b29b      	uxth	r3, r3
 8019690:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8019692:	e2b0      	b.n	8019bf6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8019694:	f7fc f82e 	bl	80156f4 <HAL_RCC_GetPCLK2Freq>
 8019698:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801969a:	687b      	ldr	r3, [r7, #4]
 801969c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801969e:	2b00      	cmp	r3, #0
 80196a0:	d044      	beq.n	801972c <UART_SetConfig+0x168c>
 80196a2:	687b      	ldr	r3, [r7, #4]
 80196a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196a6:	2b01      	cmp	r3, #1
 80196a8:	d03e      	beq.n	8019728 <UART_SetConfig+0x1688>
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196ae:	2b02      	cmp	r3, #2
 80196b0:	d038      	beq.n	8019724 <UART_SetConfig+0x1684>
 80196b2:	687b      	ldr	r3, [r7, #4]
 80196b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196b6:	2b03      	cmp	r3, #3
 80196b8:	d032      	beq.n	8019720 <UART_SetConfig+0x1680>
 80196ba:	687b      	ldr	r3, [r7, #4]
 80196bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196be:	2b04      	cmp	r3, #4
 80196c0:	d02c      	beq.n	801971c <UART_SetConfig+0x167c>
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196c6:	2b05      	cmp	r3, #5
 80196c8:	d026      	beq.n	8019718 <UART_SetConfig+0x1678>
 80196ca:	687b      	ldr	r3, [r7, #4]
 80196cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196ce:	2b06      	cmp	r3, #6
 80196d0:	d020      	beq.n	8019714 <UART_SetConfig+0x1674>
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196d6:	2b07      	cmp	r3, #7
 80196d8:	d01a      	beq.n	8019710 <UART_SetConfig+0x1670>
 80196da:	687b      	ldr	r3, [r7, #4]
 80196dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196de:	2b08      	cmp	r3, #8
 80196e0:	d014      	beq.n	801970c <UART_SetConfig+0x166c>
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196e6:	2b09      	cmp	r3, #9
 80196e8:	d00e      	beq.n	8019708 <UART_SetConfig+0x1668>
 80196ea:	687b      	ldr	r3, [r7, #4]
 80196ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196ee:	2b0a      	cmp	r3, #10
 80196f0:	d008      	beq.n	8019704 <UART_SetConfig+0x1664>
 80196f2:	687b      	ldr	r3, [r7, #4]
 80196f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196f6:	2b0b      	cmp	r3, #11
 80196f8:	d102      	bne.n	8019700 <UART_SetConfig+0x1660>
 80196fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80196fe:	e016      	b.n	801972e <UART_SetConfig+0x168e>
 8019700:	2301      	movs	r3, #1
 8019702:	e014      	b.n	801972e <UART_SetConfig+0x168e>
 8019704:	2380      	movs	r3, #128	; 0x80
 8019706:	e012      	b.n	801972e <UART_SetConfig+0x168e>
 8019708:	2340      	movs	r3, #64	; 0x40
 801970a:	e010      	b.n	801972e <UART_SetConfig+0x168e>
 801970c:	2320      	movs	r3, #32
 801970e:	e00e      	b.n	801972e <UART_SetConfig+0x168e>
 8019710:	2310      	movs	r3, #16
 8019712:	e00c      	b.n	801972e <UART_SetConfig+0x168e>
 8019714:	230c      	movs	r3, #12
 8019716:	e00a      	b.n	801972e <UART_SetConfig+0x168e>
 8019718:	230a      	movs	r3, #10
 801971a:	e008      	b.n	801972e <UART_SetConfig+0x168e>
 801971c:	2308      	movs	r3, #8
 801971e:	e006      	b.n	801972e <UART_SetConfig+0x168e>
 8019720:	2306      	movs	r3, #6
 8019722:	e004      	b.n	801972e <UART_SetConfig+0x168e>
 8019724:	2304      	movs	r3, #4
 8019726:	e002      	b.n	801972e <UART_SetConfig+0x168e>
 8019728:	2302      	movs	r3, #2
 801972a:	e000      	b.n	801972e <UART_SetConfig+0x168e>
 801972c:	2301      	movs	r3, #1
 801972e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019730:	fbb2 f3f3 	udiv	r3, r2, r3
 8019734:	005a      	lsls	r2, r3, #1
 8019736:	687b      	ldr	r3, [r7, #4]
 8019738:	685b      	ldr	r3, [r3, #4]
 801973a:	085b      	lsrs	r3, r3, #1
 801973c:	441a      	add	r2, r3
 801973e:	687b      	ldr	r3, [r7, #4]
 8019740:	685b      	ldr	r3, [r3, #4]
 8019742:	fbb2 f3f3 	udiv	r3, r2, r3
 8019746:	b29b      	uxth	r3, r3
 8019748:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801974a:	e254      	b.n	8019bf6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801974c:	f107 0318 	add.w	r3, r7, #24
 8019750:	4618      	mov	r0, r3
 8019752:	f7fc fed9 	bl	8016508 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019756:	69fa      	ldr	r2, [r7, #28]
 8019758:	687b      	ldr	r3, [r7, #4]
 801975a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801975c:	2b00      	cmp	r3, #0
 801975e:	d044      	beq.n	80197ea <UART_SetConfig+0x174a>
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019764:	2b01      	cmp	r3, #1
 8019766:	d03e      	beq.n	80197e6 <UART_SetConfig+0x1746>
 8019768:	687b      	ldr	r3, [r7, #4]
 801976a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801976c:	2b02      	cmp	r3, #2
 801976e:	d038      	beq.n	80197e2 <UART_SetConfig+0x1742>
 8019770:	687b      	ldr	r3, [r7, #4]
 8019772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019774:	2b03      	cmp	r3, #3
 8019776:	d032      	beq.n	80197de <UART_SetConfig+0x173e>
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801977c:	2b04      	cmp	r3, #4
 801977e:	d02c      	beq.n	80197da <UART_SetConfig+0x173a>
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019784:	2b05      	cmp	r3, #5
 8019786:	d026      	beq.n	80197d6 <UART_SetConfig+0x1736>
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801978c:	2b06      	cmp	r3, #6
 801978e:	d020      	beq.n	80197d2 <UART_SetConfig+0x1732>
 8019790:	687b      	ldr	r3, [r7, #4]
 8019792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019794:	2b07      	cmp	r3, #7
 8019796:	d01a      	beq.n	80197ce <UART_SetConfig+0x172e>
 8019798:	687b      	ldr	r3, [r7, #4]
 801979a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801979c:	2b08      	cmp	r3, #8
 801979e:	d014      	beq.n	80197ca <UART_SetConfig+0x172a>
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197a4:	2b09      	cmp	r3, #9
 80197a6:	d00e      	beq.n	80197c6 <UART_SetConfig+0x1726>
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197ac:	2b0a      	cmp	r3, #10
 80197ae:	d008      	beq.n	80197c2 <UART_SetConfig+0x1722>
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197b4:	2b0b      	cmp	r3, #11
 80197b6:	d102      	bne.n	80197be <UART_SetConfig+0x171e>
 80197b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80197bc:	e016      	b.n	80197ec <UART_SetConfig+0x174c>
 80197be:	2301      	movs	r3, #1
 80197c0:	e014      	b.n	80197ec <UART_SetConfig+0x174c>
 80197c2:	2380      	movs	r3, #128	; 0x80
 80197c4:	e012      	b.n	80197ec <UART_SetConfig+0x174c>
 80197c6:	2340      	movs	r3, #64	; 0x40
 80197c8:	e010      	b.n	80197ec <UART_SetConfig+0x174c>
 80197ca:	2320      	movs	r3, #32
 80197cc:	e00e      	b.n	80197ec <UART_SetConfig+0x174c>
 80197ce:	2310      	movs	r3, #16
 80197d0:	e00c      	b.n	80197ec <UART_SetConfig+0x174c>
 80197d2:	230c      	movs	r3, #12
 80197d4:	e00a      	b.n	80197ec <UART_SetConfig+0x174c>
 80197d6:	230a      	movs	r3, #10
 80197d8:	e008      	b.n	80197ec <UART_SetConfig+0x174c>
 80197da:	2308      	movs	r3, #8
 80197dc:	e006      	b.n	80197ec <UART_SetConfig+0x174c>
 80197de:	2306      	movs	r3, #6
 80197e0:	e004      	b.n	80197ec <UART_SetConfig+0x174c>
 80197e2:	2304      	movs	r3, #4
 80197e4:	e002      	b.n	80197ec <UART_SetConfig+0x174c>
 80197e6:	2302      	movs	r3, #2
 80197e8:	e000      	b.n	80197ec <UART_SetConfig+0x174c>
 80197ea:	2301      	movs	r3, #1
 80197ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80197f0:	005a      	lsls	r2, r3, #1
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	685b      	ldr	r3, [r3, #4]
 80197f6:	085b      	lsrs	r3, r3, #1
 80197f8:	441a      	add	r2, r3
 80197fa:	687b      	ldr	r3, [r7, #4]
 80197fc:	685b      	ldr	r3, [r3, #4]
 80197fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8019802:	b29b      	uxth	r3, r3
 8019804:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8019806:	e1f6      	b.n	8019bf6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8019808:	f107 030c 	add.w	r3, r7, #12
 801980c:	4618      	mov	r0, r3
 801980e:	f7fc ffc7 	bl	80167a0 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019812:	693a      	ldr	r2, [r7, #16]
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019818:	2b00      	cmp	r3, #0
 801981a:	d044      	beq.n	80198a6 <UART_SetConfig+0x1806>
 801981c:	687b      	ldr	r3, [r7, #4]
 801981e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019820:	2b01      	cmp	r3, #1
 8019822:	d03e      	beq.n	80198a2 <UART_SetConfig+0x1802>
 8019824:	687b      	ldr	r3, [r7, #4]
 8019826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019828:	2b02      	cmp	r3, #2
 801982a:	d038      	beq.n	801989e <UART_SetConfig+0x17fe>
 801982c:	687b      	ldr	r3, [r7, #4]
 801982e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019830:	2b03      	cmp	r3, #3
 8019832:	d032      	beq.n	801989a <UART_SetConfig+0x17fa>
 8019834:	687b      	ldr	r3, [r7, #4]
 8019836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019838:	2b04      	cmp	r3, #4
 801983a:	d02c      	beq.n	8019896 <UART_SetConfig+0x17f6>
 801983c:	687b      	ldr	r3, [r7, #4]
 801983e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019840:	2b05      	cmp	r3, #5
 8019842:	d026      	beq.n	8019892 <UART_SetConfig+0x17f2>
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019848:	2b06      	cmp	r3, #6
 801984a:	d020      	beq.n	801988e <UART_SetConfig+0x17ee>
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019850:	2b07      	cmp	r3, #7
 8019852:	d01a      	beq.n	801988a <UART_SetConfig+0x17ea>
 8019854:	687b      	ldr	r3, [r7, #4]
 8019856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019858:	2b08      	cmp	r3, #8
 801985a:	d014      	beq.n	8019886 <UART_SetConfig+0x17e6>
 801985c:	687b      	ldr	r3, [r7, #4]
 801985e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019860:	2b09      	cmp	r3, #9
 8019862:	d00e      	beq.n	8019882 <UART_SetConfig+0x17e2>
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019868:	2b0a      	cmp	r3, #10
 801986a:	d008      	beq.n	801987e <UART_SetConfig+0x17de>
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019870:	2b0b      	cmp	r3, #11
 8019872:	d102      	bne.n	801987a <UART_SetConfig+0x17da>
 8019874:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019878:	e016      	b.n	80198a8 <UART_SetConfig+0x1808>
 801987a:	2301      	movs	r3, #1
 801987c:	e014      	b.n	80198a8 <UART_SetConfig+0x1808>
 801987e:	2380      	movs	r3, #128	; 0x80
 8019880:	e012      	b.n	80198a8 <UART_SetConfig+0x1808>
 8019882:	2340      	movs	r3, #64	; 0x40
 8019884:	e010      	b.n	80198a8 <UART_SetConfig+0x1808>
 8019886:	2320      	movs	r3, #32
 8019888:	e00e      	b.n	80198a8 <UART_SetConfig+0x1808>
 801988a:	2310      	movs	r3, #16
 801988c:	e00c      	b.n	80198a8 <UART_SetConfig+0x1808>
 801988e:	230c      	movs	r3, #12
 8019890:	e00a      	b.n	80198a8 <UART_SetConfig+0x1808>
 8019892:	230a      	movs	r3, #10
 8019894:	e008      	b.n	80198a8 <UART_SetConfig+0x1808>
 8019896:	2308      	movs	r3, #8
 8019898:	e006      	b.n	80198a8 <UART_SetConfig+0x1808>
 801989a:	2306      	movs	r3, #6
 801989c:	e004      	b.n	80198a8 <UART_SetConfig+0x1808>
 801989e:	2304      	movs	r3, #4
 80198a0:	e002      	b.n	80198a8 <UART_SetConfig+0x1808>
 80198a2:	2302      	movs	r3, #2
 80198a4:	e000      	b.n	80198a8 <UART_SetConfig+0x1808>
 80198a6:	2301      	movs	r3, #1
 80198a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80198ac:	005a      	lsls	r2, r3, #1
 80198ae:	687b      	ldr	r3, [r7, #4]
 80198b0:	685b      	ldr	r3, [r3, #4]
 80198b2:	085b      	lsrs	r3, r3, #1
 80198b4:	441a      	add	r2, r3
 80198b6:	687b      	ldr	r3, [r7, #4]
 80198b8:	685b      	ldr	r3, [r3, #4]
 80198ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80198be:	b29b      	uxth	r3, r3
 80198c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80198c2:	e198      	b.n	8019bf6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80198c4:	4b87      	ldr	r3, [pc, #540]	; (8019ae4 <UART_SetConfig+0x1a44>)
 80198c6:	681b      	ldr	r3, [r3, #0]
 80198c8:	f003 0320 	and.w	r3, r3, #32
 80198cc:	2b00      	cmp	r3, #0
 80198ce:	d05e      	beq.n	801998e <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80198d0:	4b84      	ldr	r3, [pc, #528]	; (8019ae4 <UART_SetConfig+0x1a44>)
 80198d2:	681b      	ldr	r3, [r3, #0]
 80198d4:	08db      	lsrs	r3, r3, #3
 80198d6:	f003 0303 	and.w	r3, r3, #3
 80198da:	4a83      	ldr	r2, [pc, #524]	; (8019ae8 <UART_SetConfig+0x1a48>)
 80198dc:	40da      	lsrs	r2, r3
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198e2:	2b00      	cmp	r3, #0
 80198e4:	d044      	beq.n	8019970 <UART_SetConfig+0x18d0>
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198ea:	2b01      	cmp	r3, #1
 80198ec:	d03e      	beq.n	801996c <UART_SetConfig+0x18cc>
 80198ee:	687b      	ldr	r3, [r7, #4]
 80198f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198f2:	2b02      	cmp	r3, #2
 80198f4:	d038      	beq.n	8019968 <UART_SetConfig+0x18c8>
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198fa:	2b03      	cmp	r3, #3
 80198fc:	d032      	beq.n	8019964 <UART_SetConfig+0x18c4>
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019902:	2b04      	cmp	r3, #4
 8019904:	d02c      	beq.n	8019960 <UART_SetConfig+0x18c0>
 8019906:	687b      	ldr	r3, [r7, #4]
 8019908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801990a:	2b05      	cmp	r3, #5
 801990c:	d026      	beq.n	801995c <UART_SetConfig+0x18bc>
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019912:	2b06      	cmp	r3, #6
 8019914:	d020      	beq.n	8019958 <UART_SetConfig+0x18b8>
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801991a:	2b07      	cmp	r3, #7
 801991c:	d01a      	beq.n	8019954 <UART_SetConfig+0x18b4>
 801991e:	687b      	ldr	r3, [r7, #4]
 8019920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019922:	2b08      	cmp	r3, #8
 8019924:	d014      	beq.n	8019950 <UART_SetConfig+0x18b0>
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801992a:	2b09      	cmp	r3, #9
 801992c:	d00e      	beq.n	801994c <UART_SetConfig+0x18ac>
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019932:	2b0a      	cmp	r3, #10
 8019934:	d008      	beq.n	8019948 <UART_SetConfig+0x18a8>
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801993a:	2b0b      	cmp	r3, #11
 801993c:	d102      	bne.n	8019944 <UART_SetConfig+0x18a4>
 801993e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019942:	e016      	b.n	8019972 <UART_SetConfig+0x18d2>
 8019944:	2301      	movs	r3, #1
 8019946:	e014      	b.n	8019972 <UART_SetConfig+0x18d2>
 8019948:	2380      	movs	r3, #128	; 0x80
 801994a:	e012      	b.n	8019972 <UART_SetConfig+0x18d2>
 801994c:	2340      	movs	r3, #64	; 0x40
 801994e:	e010      	b.n	8019972 <UART_SetConfig+0x18d2>
 8019950:	2320      	movs	r3, #32
 8019952:	e00e      	b.n	8019972 <UART_SetConfig+0x18d2>
 8019954:	2310      	movs	r3, #16
 8019956:	e00c      	b.n	8019972 <UART_SetConfig+0x18d2>
 8019958:	230c      	movs	r3, #12
 801995a:	e00a      	b.n	8019972 <UART_SetConfig+0x18d2>
 801995c:	230a      	movs	r3, #10
 801995e:	e008      	b.n	8019972 <UART_SetConfig+0x18d2>
 8019960:	2308      	movs	r3, #8
 8019962:	e006      	b.n	8019972 <UART_SetConfig+0x18d2>
 8019964:	2306      	movs	r3, #6
 8019966:	e004      	b.n	8019972 <UART_SetConfig+0x18d2>
 8019968:	2304      	movs	r3, #4
 801996a:	e002      	b.n	8019972 <UART_SetConfig+0x18d2>
 801996c:	2302      	movs	r3, #2
 801996e:	e000      	b.n	8019972 <UART_SetConfig+0x18d2>
 8019970:	2301      	movs	r3, #1
 8019972:	fbb2 f3f3 	udiv	r3, r2, r3
 8019976:	005a      	lsls	r2, r3, #1
 8019978:	687b      	ldr	r3, [r7, #4]
 801997a:	685b      	ldr	r3, [r3, #4]
 801997c:	085b      	lsrs	r3, r3, #1
 801997e:	441a      	add	r2, r3
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	685b      	ldr	r3, [r3, #4]
 8019984:	fbb2 f3f3 	udiv	r3, r2, r3
 8019988:	b29b      	uxth	r3, r3
 801998a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 801998c:	e133      	b.n	8019bf6 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801998e:	687b      	ldr	r3, [r7, #4]
 8019990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019992:	2b00      	cmp	r3, #0
 8019994:	d043      	beq.n	8019a1e <UART_SetConfig+0x197e>
 8019996:	687b      	ldr	r3, [r7, #4]
 8019998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801999a:	2b01      	cmp	r3, #1
 801999c:	d03d      	beq.n	8019a1a <UART_SetConfig+0x197a>
 801999e:	687b      	ldr	r3, [r7, #4]
 80199a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199a2:	2b02      	cmp	r3, #2
 80199a4:	d037      	beq.n	8019a16 <UART_SetConfig+0x1976>
 80199a6:	687b      	ldr	r3, [r7, #4]
 80199a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199aa:	2b03      	cmp	r3, #3
 80199ac:	d031      	beq.n	8019a12 <UART_SetConfig+0x1972>
 80199ae:	687b      	ldr	r3, [r7, #4]
 80199b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199b2:	2b04      	cmp	r3, #4
 80199b4:	d02b      	beq.n	8019a0e <UART_SetConfig+0x196e>
 80199b6:	687b      	ldr	r3, [r7, #4]
 80199b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199ba:	2b05      	cmp	r3, #5
 80199bc:	d025      	beq.n	8019a0a <UART_SetConfig+0x196a>
 80199be:	687b      	ldr	r3, [r7, #4]
 80199c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199c2:	2b06      	cmp	r3, #6
 80199c4:	d01f      	beq.n	8019a06 <UART_SetConfig+0x1966>
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199ca:	2b07      	cmp	r3, #7
 80199cc:	d019      	beq.n	8019a02 <UART_SetConfig+0x1962>
 80199ce:	687b      	ldr	r3, [r7, #4]
 80199d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199d2:	2b08      	cmp	r3, #8
 80199d4:	d013      	beq.n	80199fe <UART_SetConfig+0x195e>
 80199d6:	687b      	ldr	r3, [r7, #4]
 80199d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199da:	2b09      	cmp	r3, #9
 80199dc:	d00d      	beq.n	80199fa <UART_SetConfig+0x195a>
 80199de:	687b      	ldr	r3, [r7, #4]
 80199e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199e2:	2b0a      	cmp	r3, #10
 80199e4:	d007      	beq.n	80199f6 <UART_SetConfig+0x1956>
 80199e6:	687b      	ldr	r3, [r7, #4]
 80199e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199ea:	2b0b      	cmp	r3, #11
 80199ec:	d101      	bne.n	80199f2 <UART_SetConfig+0x1952>
 80199ee:	4b3f      	ldr	r3, [pc, #252]	; (8019aec <UART_SetConfig+0x1a4c>)
 80199f0:	e016      	b.n	8019a20 <UART_SetConfig+0x1980>
 80199f2:	4b3f      	ldr	r3, [pc, #252]	; (8019af0 <UART_SetConfig+0x1a50>)
 80199f4:	e014      	b.n	8019a20 <UART_SetConfig+0x1980>
 80199f6:	4b3f      	ldr	r3, [pc, #252]	; (8019af4 <UART_SetConfig+0x1a54>)
 80199f8:	e012      	b.n	8019a20 <UART_SetConfig+0x1980>
 80199fa:	4b3f      	ldr	r3, [pc, #252]	; (8019af8 <UART_SetConfig+0x1a58>)
 80199fc:	e010      	b.n	8019a20 <UART_SetConfig+0x1980>
 80199fe:	4b3f      	ldr	r3, [pc, #252]	; (8019afc <UART_SetConfig+0x1a5c>)
 8019a00:	e00e      	b.n	8019a20 <UART_SetConfig+0x1980>
 8019a02:	4b3f      	ldr	r3, [pc, #252]	; (8019b00 <UART_SetConfig+0x1a60>)
 8019a04:	e00c      	b.n	8019a20 <UART_SetConfig+0x1980>
 8019a06:	4b3f      	ldr	r3, [pc, #252]	; (8019b04 <UART_SetConfig+0x1a64>)
 8019a08:	e00a      	b.n	8019a20 <UART_SetConfig+0x1980>
 8019a0a:	4b3f      	ldr	r3, [pc, #252]	; (8019b08 <UART_SetConfig+0x1a68>)
 8019a0c:	e008      	b.n	8019a20 <UART_SetConfig+0x1980>
 8019a0e:	4b3f      	ldr	r3, [pc, #252]	; (8019b0c <UART_SetConfig+0x1a6c>)
 8019a10:	e006      	b.n	8019a20 <UART_SetConfig+0x1980>
 8019a12:	4b3f      	ldr	r3, [pc, #252]	; (8019b10 <UART_SetConfig+0x1a70>)
 8019a14:	e004      	b.n	8019a20 <UART_SetConfig+0x1980>
 8019a16:	4b3f      	ldr	r3, [pc, #252]	; (8019b14 <UART_SetConfig+0x1a74>)
 8019a18:	e002      	b.n	8019a20 <UART_SetConfig+0x1980>
 8019a1a:	4b33      	ldr	r3, [pc, #204]	; (8019ae8 <UART_SetConfig+0x1a48>)
 8019a1c:	e000      	b.n	8019a20 <UART_SetConfig+0x1980>
 8019a1e:	4b34      	ldr	r3, [pc, #208]	; (8019af0 <UART_SetConfig+0x1a50>)
 8019a20:	687a      	ldr	r2, [r7, #4]
 8019a22:	6852      	ldr	r2, [r2, #4]
 8019a24:	0852      	lsrs	r2, r2, #1
 8019a26:	441a      	add	r2, r3
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	685b      	ldr	r3, [r3, #4]
 8019a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8019a30:	b29b      	uxth	r3, r3
 8019a32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8019a34:	e0df      	b.n	8019bf6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019a36:	687b      	ldr	r3, [r7, #4]
 8019a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a3a:	2b00      	cmp	r3, #0
 8019a3c:	d045      	beq.n	8019aca <UART_SetConfig+0x1a2a>
 8019a3e:	687b      	ldr	r3, [r7, #4]
 8019a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a42:	2b01      	cmp	r3, #1
 8019a44:	d03f      	beq.n	8019ac6 <UART_SetConfig+0x1a26>
 8019a46:	687b      	ldr	r3, [r7, #4]
 8019a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a4a:	2b02      	cmp	r3, #2
 8019a4c:	d039      	beq.n	8019ac2 <UART_SetConfig+0x1a22>
 8019a4e:	687b      	ldr	r3, [r7, #4]
 8019a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a52:	2b03      	cmp	r3, #3
 8019a54:	d033      	beq.n	8019abe <UART_SetConfig+0x1a1e>
 8019a56:	687b      	ldr	r3, [r7, #4]
 8019a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a5a:	2b04      	cmp	r3, #4
 8019a5c:	d02d      	beq.n	8019aba <UART_SetConfig+0x1a1a>
 8019a5e:	687b      	ldr	r3, [r7, #4]
 8019a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a62:	2b05      	cmp	r3, #5
 8019a64:	d027      	beq.n	8019ab6 <UART_SetConfig+0x1a16>
 8019a66:	687b      	ldr	r3, [r7, #4]
 8019a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a6a:	2b06      	cmp	r3, #6
 8019a6c:	d021      	beq.n	8019ab2 <UART_SetConfig+0x1a12>
 8019a6e:	687b      	ldr	r3, [r7, #4]
 8019a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a72:	2b07      	cmp	r3, #7
 8019a74:	d01b      	beq.n	8019aae <UART_SetConfig+0x1a0e>
 8019a76:	687b      	ldr	r3, [r7, #4]
 8019a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a7a:	2b08      	cmp	r3, #8
 8019a7c:	d015      	beq.n	8019aaa <UART_SetConfig+0x1a0a>
 8019a7e:	687b      	ldr	r3, [r7, #4]
 8019a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a82:	2b09      	cmp	r3, #9
 8019a84:	d00f      	beq.n	8019aa6 <UART_SetConfig+0x1a06>
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a8a:	2b0a      	cmp	r3, #10
 8019a8c:	d008      	beq.n	8019aa0 <UART_SetConfig+0x1a00>
 8019a8e:	687b      	ldr	r3, [r7, #4]
 8019a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a92:	2b0b      	cmp	r3, #11
 8019a94:	d102      	bne.n	8019a9c <UART_SetConfig+0x19fc>
 8019a96:	f647 2312 	movw	r3, #31250	; 0x7a12
 8019a9a:	e017      	b.n	8019acc <UART_SetConfig+0x1a2c>
 8019a9c:	4b18      	ldr	r3, [pc, #96]	; (8019b00 <UART_SetConfig+0x1a60>)
 8019a9e:	e015      	b.n	8019acc <UART_SetConfig+0x1a2c>
 8019aa0:	f24f 4324 	movw	r3, #62500	; 0xf424
 8019aa4:	e012      	b.n	8019acc <UART_SetConfig+0x1a2c>
 8019aa6:	4b1c      	ldr	r3, [pc, #112]	; (8019b18 <UART_SetConfig+0x1a78>)
 8019aa8:	e010      	b.n	8019acc <UART_SetConfig+0x1a2c>
 8019aaa:	4b1c      	ldr	r3, [pc, #112]	; (8019b1c <UART_SetConfig+0x1a7c>)
 8019aac:	e00e      	b.n	8019acc <UART_SetConfig+0x1a2c>
 8019aae:	4b0f      	ldr	r3, [pc, #60]	; (8019aec <UART_SetConfig+0x1a4c>)
 8019ab0:	e00c      	b.n	8019acc <UART_SetConfig+0x1a2c>
 8019ab2:	4b1b      	ldr	r3, [pc, #108]	; (8019b20 <UART_SetConfig+0x1a80>)
 8019ab4:	e00a      	b.n	8019acc <UART_SetConfig+0x1a2c>
 8019ab6:	4b1b      	ldr	r3, [pc, #108]	; (8019b24 <UART_SetConfig+0x1a84>)
 8019ab8:	e008      	b.n	8019acc <UART_SetConfig+0x1a2c>
 8019aba:	4b0e      	ldr	r3, [pc, #56]	; (8019af4 <UART_SetConfig+0x1a54>)
 8019abc:	e006      	b.n	8019acc <UART_SetConfig+0x1a2c>
 8019abe:	4b1a      	ldr	r3, [pc, #104]	; (8019b28 <UART_SetConfig+0x1a88>)
 8019ac0:	e004      	b.n	8019acc <UART_SetConfig+0x1a2c>
 8019ac2:	4b0d      	ldr	r3, [pc, #52]	; (8019af8 <UART_SetConfig+0x1a58>)
 8019ac4:	e002      	b.n	8019acc <UART_SetConfig+0x1a2c>
 8019ac6:	4b0d      	ldr	r3, [pc, #52]	; (8019afc <UART_SetConfig+0x1a5c>)
 8019ac8:	e000      	b.n	8019acc <UART_SetConfig+0x1a2c>
 8019aca:	4b0d      	ldr	r3, [pc, #52]	; (8019b00 <UART_SetConfig+0x1a60>)
 8019acc:	687a      	ldr	r2, [r7, #4]
 8019ace:	6852      	ldr	r2, [r2, #4]
 8019ad0:	0852      	lsrs	r2, r2, #1
 8019ad2:	441a      	add	r2, r3
 8019ad4:	687b      	ldr	r3, [r7, #4]
 8019ad6:	685b      	ldr	r3, [r3, #4]
 8019ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8019adc:	b29b      	uxth	r3, r3
 8019ade:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8019ae0:	e089      	b.n	8019bf6 <UART_SetConfig+0x1b56>
 8019ae2:	bf00      	nop
 8019ae4:	58024400 	.word	0x58024400
 8019ae8:	03d09000 	.word	0x03d09000
 8019aec:	0007a120 	.word	0x0007a120
 8019af0:	07a12000 	.word	0x07a12000
 8019af4:	000f4240 	.word	0x000f4240
 8019af8:	001e8480 	.word	0x001e8480
 8019afc:	003d0900 	.word	0x003d0900
 8019b00:	007a1200 	.word	0x007a1200
 8019b04:	00a2c2aa 	.word	0x00a2c2aa
 8019b08:	00c35000 	.word	0x00c35000
 8019b0c:	00f42400 	.word	0x00f42400
 8019b10:	01458554 	.word	0x01458554
 8019b14:	01e84800 	.word	0x01e84800
 8019b18:	0001e848 	.word	0x0001e848
 8019b1c:	0003d090 	.word	0x0003d090
 8019b20:	000a2c2a 	.word	0x000a2c2a
 8019b24:	000c3500 	.word	0x000c3500
 8019b28:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b30:	2b00      	cmp	r3, #0
 8019b32:	d04f      	beq.n	8019bd4 <UART_SetConfig+0x1b34>
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b38:	2b01      	cmp	r3, #1
 8019b3a:	d048      	beq.n	8019bce <UART_SetConfig+0x1b2e>
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b40:	2b02      	cmp	r3, #2
 8019b42:	d041      	beq.n	8019bc8 <UART_SetConfig+0x1b28>
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b48:	2b03      	cmp	r3, #3
 8019b4a:	d03a      	beq.n	8019bc2 <UART_SetConfig+0x1b22>
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b50:	2b04      	cmp	r3, #4
 8019b52:	d033      	beq.n	8019bbc <UART_SetConfig+0x1b1c>
 8019b54:	687b      	ldr	r3, [r7, #4]
 8019b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b58:	2b05      	cmp	r3, #5
 8019b5a:	d02c      	beq.n	8019bb6 <UART_SetConfig+0x1b16>
 8019b5c:	687b      	ldr	r3, [r7, #4]
 8019b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b60:	2b06      	cmp	r3, #6
 8019b62:	d025      	beq.n	8019bb0 <UART_SetConfig+0x1b10>
 8019b64:	687b      	ldr	r3, [r7, #4]
 8019b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b68:	2b07      	cmp	r3, #7
 8019b6a:	d01e      	beq.n	8019baa <UART_SetConfig+0x1b0a>
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b70:	2b08      	cmp	r3, #8
 8019b72:	d017      	beq.n	8019ba4 <UART_SetConfig+0x1b04>
 8019b74:	687b      	ldr	r3, [r7, #4]
 8019b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b78:	2b09      	cmp	r3, #9
 8019b7a:	d010      	beq.n	8019b9e <UART_SetConfig+0x1afe>
 8019b7c:	687b      	ldr	r3, [r7, #4]
 8019b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b80:	2b0a      	cmp	r3, #10
 8019b82:	d009      	beq.n	8019b98 <UART_SetConfig+0x1af8>
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b88:	2b0b      	cmp	r3, #11
 8019b8a:	d102      	bne.n	8019b92 <UART_SetConfig+0x1af2>
 8019b8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019b90:	e022      	b.n	8019bd8 <UART_SetConfig+0x1b38>
 8019b92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8019b96:	e01f      	b.n	8019bd8 <UART_SetConfig+0x1b38>
 8019b98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019b9c:	e01c      	b.n	8019bd8 <UART_SetConfig+0x1b38>
 8019b9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019ba2:	e019      	b.n	8019bd8 <UART_SetConfig+0x1b38>
 8019ba4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019ba8:	e016      	b.n	8019bd8 <UART_SetConfig+0x1b38>
 8019baa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8019bae:	e013      	b.n	8019bd8 <UART_SetConfig+0x1b38>
 8019bb0:	f241 5354 	movw	r3, #5460	; 0x1554
 8019bb4:	e010      	b.n	8019bd8 <UART_SetConfig+0x1b38>
 8019bb6:	f641 1398 	movw	r3, #6552	; 0x1998
 8019bba:	e00d      	b.n	8019bd8 <UART_SetConfig+0x1b38>
 8019bbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8019bc0:	e00a      	b.n	8019bd8 <UART_SetConfig+0x1b38>
 8019bc2:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8019bc6:	e007      	b.n	8019bd8 <UART_SetConfig+0x1b38>
 8019bc8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8019bcc:	e004      	b.n	8019bd8 <UART_SetConfig+0x1b38>
 8019bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019bd2:	e001      	b.n	8019bd8 <UART_SetConfig+0x1b38>
 8019bd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8019bd8:	687a      	ldr	r2, [r7, #4]
 8019bda:	6852      	ldr	r2, [r2, #4]
 8019bdc:	0852      	lsrs	r2, r2, #1
 8019bde:	441a      	add	r2, r3
 8019be0:	687b      	ldr	r3, [r7, #4]
 8019be2:	685b      	ldr	r3, [r3, #4]
 8019be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8019be8:	b29b      	uxth	r3, r3
 8019bea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8019bec:	e003      	b.n	8019bf6 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 8019bee:	2301      	movs	r3, #1
 8019bf0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8019bf4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8019bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019bf8:	2b0f      	cmp	r3, #15
 8019bfa:	d916      	bls.n	8019c2a <UART_SetConfig+0x1b8a>
 8019bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019c02:	d212      	bcs.n	8019c2a <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8019c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019c06:	b29b      	uxth	r3, r3
 8019c08:	f023 030f 	bic.w	r3, r3, #15
 8019c0c:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8019c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019c10:	085b      	lsrs	r3, r3, #1
 8019c12:	b29b      	uxth	r3, r3
 8019c14:	f003 0307 	and.w	r3, r3, #7
 8019c18:	b29a      	uxth	r2, r3
 8019c1a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8019c1c:	4313      	orrs	r3, r2
 8019c1e:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8019c20:	687b      	ldr	r3, [r7, #4]
 8019c22:	681b      	ldr	r3, [r3, #0]
 8019c24:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019c26:	60da      	str	r2, [r3, #12]
 8019c28:	e3a3      	b.n	801a372 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8019c2a:	2301      	movs	r3, #1
 8019c2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8019c30:	e39f      	b.n	801a372 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 8019c32:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8019c36:	2b40      	cmp	r3, #64	; 0x40
 8019c38:	f200 8388 	bhi.w	801a34c <UART_SetConfig+0x22ac>
 8019c3c:	a201      	add	r2, pc, #4	; (adr r2, 8019c44 <UART_SetConfig+0x1ba4>)
 8019c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019c42:	bf00      	nop
 8019c44:	08019d49 	.word	0x08019d49
 8019c48:	08019dff 	.word	0x08019dff
 8019c4c:	0801a34d 	.word	0x0801a34d
 8019c50:	0801a34d 	.word	0x0801a34d
 8019c54:	08019eb5 	.word	0x08019eb5
 8019c58:	0801a34d 	.word	0x0801a34d
 8019c5c:	0801a34d 	.word	0x0801a34d
 8019c60:	0801a34d 	.word	0x0801a34d
 8019c64:	08019f6f 	.word	0x08019f6f
 8019c68:	0801a34d 	.word	0x0801a34d
 8019c6c:	0801a34d 	.word	0x0801a34d
 8019c70:	0801a34d 	.word	0x0801a34d
 8019c74:	0801a34d 	.word	0x0801a34d
 8019c78:	0801a34d 	.word	0x0801a34d
 8019c7c:	0801a34d 	.word	0x0801a34d
 8019c80:	0801a34d 	.word	0x0801a34d
 8019c84:	0801a029 	.word	0x0801a029
 8019c88:	0801a34d 	.word	0x0801a34d
 8019c8c:	0801a34d 	.word	0x0801a34d
 8019c90:	0801a34d 	.word	0x0801a34d
 8019c94:	0801a34d 	.word	0x0801a34d
 8019c98:	0801a34d 	.word	0x0801a34d
 8019c9c:	0801a34d 	.word	0x0801a34d
 8019ca0:	0801a34d 	.word	0x0801a34d
 8019ca4:	0801a34d 	.word	0x0801a34d
 8019ca8:	0801a34d 	.word	0x0801a34d
 8019cac:	0801a34d 	.word	0x0801a34d
 8019cb0:	0801a34d 	.word	0x0801a34d
 8019cb4:	0801a34d 	.word	0x0801a34d
 8019cb8:	0801a34d 	.word	0x0801a34d
 8019cbc:	0801a34d 	.word	0x0801a34d
 8019cc0:	0801a34d 	.word	0x0801a34d
 8019cc4:	0801a199 	.word	0x0801a199
 8019cc8:	0801a34d 	.word	0x0801a34d
 8019ccc:	0801a34d 	.word	0x0801a34d
 8019cd0:	0801a34d 	.word	0x0801a34d
 8019cd4:	0801a34d 	.word	0x0801a34d
 8019cd8:	0801a34d 	.word	0x0801a34d
 8019cdc:	0801a34d 	.word	0x0801a34d
 8019ce0:	0801a34d 	.word	0x0801a34d
 8019ce4:	0801a34d 	.word	0x0801a34d
 8019ce8:	0801a34d 	.word	0x0801a34d
 8019cec:	0801a34d 	.word	0x0801a34d
 8019cf0:	0801a34d 	.word	0x0801a34d
 8019cf4:	0801a34d 	.word	0x0801a34d
 8019cf8:	0801a34d 	.word	0x0801a34d
 8019cfc:	0801a34d 	.word	0x0801a34d
 8019d00:	0801a34d 	.word	0x0801a34d
 8019d04:	0801a34d 	.word	0x0801a34d
 8019d08:	0801a34d 	.word	0x0801a34d
 8019d0c:	0801a34d 	.word	0x0801a34d
 8019d10:	0801a34d 	.word	0x0801a34d
 8019d14:	0801a34d 	.word	0x0801a34d
 8019d18:	0801a34d 	.word	0x0801a34d
 8019d1c:	0801a34d 	.word	0x0801a34d
 8019d20:	0801a34d 	.word	0x0801a34d
 8019d24:	0801a34d 	.word	0x0801a34d
 8019d28:	0801a34d 	.word	0x0801a34d
 8019d2c:	0801a34d 	.word	0x0801a34d
 8019d30:	0801a34d 	.word	0x0801a34d
 8019d34:	0801a34d 	.word	0x0801a34d
 8019d38:	0801a34d 	.word	0x0801a34d
 8019d3c:	0801a34d 	.word	0x0801a34d
 8019d40:	0801a34d 	.word	0x0801a34d
 8019d44:	0801a28d 	.word	0x0801a28d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8019d48:	f7fb fcbe 	bl	80156c8 <HAL_RCC_GetPCLK1Freq>
 8019d4c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019d4e:	687b      	ldr	r3, [r7, #4]
 8019d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d52:	2b00      	cmp	r3, #0
 8019d54:	d044      	beq.n	8019de0 <UART_SetConfig+0x1d40>
 8019d56:	687b      	ldr	r3, [r7, #4]
 8019d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d5a:	2b01      	cmp	r3, #1
 8019d5c:	d03e      	beq.n	8019ddc <UART_SetConfig+0x1d3c>
 8019d5e:	687b      	ldr	r3, [r7, #4]
 8019d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d62:	2b02      	cmp	r3, #2
 8019d64:	d038      	beq.n	8019dd8 <UART_SetConfig+0x1d38>
 8019d66:	687b      	ldr	r3, [r7, #4]
 8019d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d6a:	2b03      	cmp	r3, #3
 8019d6c:	d032      	beq.n	8019dd4 <UART_SetConfig+0x1d34>
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d72:	2b04      	cmp	r3, #4
 8019d74:	d02c      	beq.n	8019dd0 <UART_SetConfig+0x1d30>
 8019d76:	687b      	ldr	r3, [r7, #4]
 8019d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d7a:	2b05      	cmp	r3, #5
 8019d7c:	d026      	beq.n	8019dcc <UART_SetConfig+0x1d2c>
 8019d7e:	687b      	ldr	r3, [r7, #4]
 8019d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d82:	2b06      	cmp	r3, #6
 8019d84:	d020      	beq.n	8019dc8 <UART_SetConfig+0x1d28>
 8019d86:	687b      	ldr	r3, [r7, #4]
 8019d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d8a:	2b07      	cmp	r3, #7
 8019d8c:	d01a      	beq.n	8019dc4 <UART_SetConfig+0x1d24>
 8019d8e:	687b      	ldr	r3, [r7, #4]
 8019d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d92:	2b08      	cmp	r3, #8
 8019d94:	d014      	beq.n	8019dc0 <UART_SetConfig+0x1d20>
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d9a:	2b09      	cmp	r3, #9
 8019d9c:	d00e      	beq.n	8019dbc <UART_SetConfig+0x1d1c>
 8019d9e:	687b      	ldr	r3, [r7, #4]
 8019da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019da2:	2b0a      	cmp	r3, #10
 8019da4:	d008      	beq.n	8019db8 <UART_SetConfig+0x1d18>
 8019da6:	687b      	ldr	r3, [r7, #4]
 8019da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019daa:	2b0b      	cmp	r3, #11
 8019dac:	d102      	bne.n	8019db4 <UART_SetConfig+0x1d14>
 8019dae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019db2:	e016      	b.n	8019de2 <UART_SetConfig+0x1d42>
 8019db4:	2301      	movs	r3, #1
 8019db6:	e014      	b.n	8019de2 <UART_SetConfig+0x1d42>
 8019db8:	2380      	movs	r3, #128	; 0x80
 8019dba:	e012      	b.n	8019de2 <UART_SetConfig+0x1d42>
 8019dbc:	2340      	movs	r3, #64	; 0x40
 8019dbe:	e010      	b.n	8019de2 <UART_SetConfig+0x1d42>
 8019dc0:	2320      	movs	r3, #32
 8019dc2:	e00e      	b.n	8019de2 <UART_SetConfig+0x1d42>
 8019dc4:	2310      	movs	r3, #16
 8019dc6:	e00c      	b.n	8019de2 <UART_SetConfig+0x1d42>
 8019dc8:	230c      	movs	r3, #12
 8019dca:	e00a      	b.n	8019de2 <UART_SetConfig+0x1d42>
 8019dcc:	230a      	movs	r3, #10
 8019dce:	e008      	b.n	8019de2 <UART_SetConfig+0x1d42>
 8019dd0:	2308      	movs	r3, #8
 8019dd2:	e006      	b.n	8019de2 <UART_SetConfig+0x1d42>
 8019dd4:	2306      	movs	r3, #6
 8019dd6:	e004      	b.n	8019de2 <UART_SetConfig+0x1d42>
 8019dd8:	2304      	movs	r3, #4
 8019dda:	e002      	b.n	8019de2 <UART_SetConfig+0x1d42>
 8019ddc:	2302      	movs	r3, #2
 8019dde:	e000      	b.n	8019de2 <UART_SetConfig+0x1d42>
 8019de0:	2301      	movs	r3, #1
 8019de2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019de4:	fbb2 f2f3 	udiv	r2, r2, r3
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	685b      	ldr	r3, [r3, #4]
 8019dec:	085b      	lsrs	r3, r3, #1
 8019dee:	441a      	add	r2, r3
 8019df0:	687b      	ldr	r3, [r7, #4]
 8019df2:	685b      	ldr	r3, [r3, #4]
 8019df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8019df8:	b29b      	uxth	r3, r3
 8019dfa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8019dfc:	e2aa      	b.n	801a354 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8019dfe:	f7fb fc79 	bl	80156f4 <HAL_RCC_GetPCLK2Freq>
 8019e02:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	d044      	beq.n	8019e96 <UART_SetConfig+0x1df6>
 8019e0c:	687b      	ldr	r3, [r7, #4]
 8019e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e10:	2b01      	cmp	r3, #1
 8019e12:	d03e      	beq.n	8019e92 <UART_SetConfig+0x1df2>
 8019e14:	687b      	ldr	r3, [r7, #4]
 8019e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e18:	2b02      	cmp	r3, #2
 8019e1a:	d038      	beq.n	8019e8e <UART_SetConfig+0x1dee>
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e20:	2b03      	cmp	r3, #3
 8019e22:	d032      	beq.n	8019e8a <UART_SetConfig+0x1dea>
 8019e24:	687b      	ldr	r3, [r7, #4]
 8019e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e28:	2b04      	cmp	r3, #4
 8019e2a:	d02c      	beq.n	8019e86 <UART_SetConfig+0x1de6>
 8019e2c:	687b      	ldr	r3, [r7, #4]
 8019e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e30:	2b05      	cmp	r3, #5
 8019e32:	d026      	beq.n	8019e82 <UART_SetConfig+0x1de2>
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e38:	2b06      	cmp	r3, #6
 8019e3a:	d020      	beq.n	8019e7e <UART_SetConfig+0x1dde>
 8019e3c:	687b      	ldr	r3, [r7, #4]
 8019e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e40:	2b07      	cmp	r3, #7
 8019e42:	d01a      	beq.n	8019e7a <UART_SetConfig+0x1dda>
 8019e44:	687b      	ldr	r3, [r7, #4]
 8019e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e48:	2b08      	cmp	r3, #8
 8019e4a:	d014      	beq.n	8019e76 <UART_SetConfig+0x1dd6>
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e50:	2b09      	cmp	r3, #9
 8019e52:	d00e      	beq.n	8019e72 <UART_SetConfig+0x1dd2>
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e58:	2b0a      	cmp	r3, #10
 8019e5a:	d008      	beq.n	8019e6e <UART_SetConfig+0x1dce>
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e60:	2b0b      	cmp	r3, #11
 8019e62:	d102      	bne.n	8019e6a <UART_SetConfig+0x1dca>
 8019e64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019e68:	e016      	b.n	8019e98 <UART_SetConfig+0x1df8>
 8019e6a:	2301      	movs	r3, #1
 8019e6c:	e014      	b.n	8019e98 <UART_SetConfig+0x1df8>
 8019e6e:	2380      	movs	r3, #128	; 0x80
 8019e70:	e012      	b.n	8019e98 <UART_SetConfig+0x1df8>
 8019e72:	2340      	movs	r3, #64	; 0x40
 8019e74:	e010      	b.n	8019e98 <UART_SetConfig+0x1df8>
 8019e76:	2320      	movs	r3, #32
 8019e78:	e00e      	b.n	8019e98 <UART_SetConfig+0x1df8>
 8019e7a:	2310      	movs	r3, #16
 8019e7c:	e00c      	b.n	8019e98 <UART_SetConfig+0x1df8>
 8019e7e:	230c      	movs	r3, #12
 8019e80:	e00a      	b.n	8019e98 <UART_SetConfig+0x1df8>
 8019e82:	230a      	movs	r3, #10
 8019e84:	e008      	b.n	8019e98 <UART_SetConfig+0x1df8>
 8019e86:	2308      	movs	r3, #8
 8019e88:	e006      	b.n	8019e98 <UART_SetConfig+0x1df8>
 8019e8a:	2306      	movs	r3, #6
 8019e8c:	e004      	b.n	8019e98 <UART_SetConfig+0x1df8>
 8019e8e:	2304      	movs	r3, #4
 8019e90:	e002      	b.n	8019e98 <UART_SetConfig+0x1df8>
 8019e92:	2302      	movs	r3, #2
 8019e94:	e000      	b.n	8019e98 <UART_SetConfig+0x1df8>
 8019e96:	2301      	movs	r3, #1
 8019e98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019e9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8019e9e:	687b      	ldr	r3, [r7, #4]
 8019ea0:	685b      	ldr	r3, [r3, #4]
 8019ea2:	085b      	lsrs	r3, r3, #1
 8019ea4:	441a      	add	r2, r3
 8019ea6:	687b      	ldr	r3, [r7, #4]
 8019ea8:	685b      	ldr	r3, [r3, #4]
 8019eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8019eae:	b29b      	uxth	r3, r3
 8019eb0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8019eb2:	e24f      	b.n	801a354 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8019eb4:	f107 0318 	add.w	r3, r7, #24
 8019eb8:	4618      	mov	r0, r3
 8019eba:	f7fc fb25 	bl	8016508 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019ebe:	69fa      	ldr	r2, [r7, #28]
 8019ec0:	687b      	ldr	r3, [r7, #4]
 8019ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ec4:	2b00      	cmp	r3, #0
 8019ec6:	d044      	beq.n	8019f52 <UART_SetConfig+0x1eb2>
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ecc:	2b01      	cmp	r3, #1
 8019ece:	d03e      	beq.n	8019f4e <UART_SetConfig+0x1eae>
 8019ed0:	687b      	ldr	r3, [r7, #4]
 8019ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ed4:	2b02      	cmp	r3, #2
 8019ed6:	d038      	beq.n	8019f4a <UART_SetConfig+0x1eaa>
 8019ed8:	687b      	ldr	r3, [r7, #4]
 8019eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019edc:	2b03      	cmp	r3, #3
 8019ede:	d032      	beq.n	8019f46 <UART_SetConfig+0x1ea6>
 8019ee0:	687b      	ldr	r3, [r7, #4]
 8019ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ee4:	2b04      	cmp	r3, #4
 8019ee6:	d02c      	beq.n	8019f42 <UART_SetConfig+0x1ea2>
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019eec:	2b05      	cmp	r3, #5
 8019eee:	d026      	beq.n	8019f3e <UART_SetConfig+0x1e9e>
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ef4:	2b06      	cmp	r3, #6
 8019ef6:	d020      	beq.n	8019f3a <UART_SetConfig+0x1e9a>
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019efc:	2b07      	cmp	r3, #7
 8019efe:	d01a      	beq.n	8019f36 <UART_SetConfig+0x1e96>
 8019f00:	687b      	ldr	r3, [r7, #4]
 8019f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f04:	2b08      	cmp	r3, #8
 8019f06:	d014      	beq.n	8019f32 <UART_SetConfig+0x1e92>
 8019f08:	687b      	ldr	r3, [r7, #4]
 8019f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f0c:	2b09      	cmp	r3, #9
 8019f0e:	d00e      	beq.n	8019f2e <UART_SetConfig+0x1e8e>
 8019f10:	687b      	ldr	r3, [r7, #4]
 8019f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f14:	2b0a      	cmp	r3, #10
 8019f16:	d008      	beq.n	8019f2a <UART_SetConfig+0x1e8a>
 8019f18:	687b      	ldr	r3, [r7, #4]
 8019f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f1c:	2b0b      	cmp	r3, #11
 8019f1e:	d102      	bne.n	8019f26 <UART_SetConfig+0x1e86>
 8019f20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019f24:	e016      	b.n	8019f54 <UART_SetConfig+0x1eb4>
 8019f26:	2301      	movs	r3, #1
 8019f28:	e014      	b.n	8019f54 <UART_SetConfig+0x1eb4>
 8019f2a:	2380      	movs	r3, #128	; 0x80
 8019f2c:	e012      	b.n	8019f54 <UART_SetConfig+0x1eb4>
 8019f2e:	2340      	movs	r3, #64	; 0x40
 8019f30:	e010      	b.n	8019f54 <UART_SetConfig+0x1eb4>
 8019f32:	2320      	movs	r3, #32
 8019f34:	e00e      	b.n	8019f54 <UART_SetConfig+0x1eb4>
 8019f36:	2310      	movs	r3, #16
 8019f38:	e00c      	b.n	8019f54 <UART_SetConfig+0x1eb4>
 8019f3a:	230c      	movs	r3, #12
 8019f3c:	e00a      	b.n	8019f54 <UART_SetConfig+0x1eb4>
 8019f3e:	230a      	movs	r3, #10
 8019f40:	e008      	b.n	8019f54 <UART_SetConfig+0x1eb4>
 8019f42:	2308      	movs	r3, #8
 8019f44:	e006      	b.n	8019f54 <UART_SetConfig+0x1eb4>
 8019f46:	2306      	movs	r3, #6
 8019f48:	e004      	b.n	8019f54 <UART_SetConfig+0x1eb4>
 8019f4a:	2304      	movs	r3, #4
 8019f4c:	e002      	b.n	8019f54 <UART_SetConfig+0x1eb4>
 8019f4e:	2302      	movs	r3, #2
 8019f50:	e000      	b.n	8019f54 <UART_SetConfig+0x1eb4>
 8019f52:	2301      	movs	r3, #1
 8019f54:	fbb2 f2f3 	udiv	r2, r2, r3
 8019f58:	687b      	ldr	r3, [r7, #4]
 8019f5a:	685b      	ldr	r3, [r3, #4]
 8019f5c:	085b      	lsrs	r3, r3, #1
 8019f5e:	441a      	add	r2, r3
 8019f60:	687b      	ldr	r3, [r7, #4]
 8019f62:	685b      	ldr	r3, [r3, #4]
 8019f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8019f68:	b29b      	uxth	r3, r3
 8019f6a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8019f6c:	e1f2      	b.n	801a354 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8019f6e:	f107 030c 	add.w	r3, r7, #12
 8019f72:	4618      	mov	r0, r3
 8019f74:	f7fc fc14 	bl	80167a0 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019f78:	693a      	ldr	r2, [r7, #16]
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f7e:	2b00      	cmp	r3, #0
 8019f80:	d044      	beq.n	801a00c <UART_SetConfig+0x1f6c>
 8019f82:	687b      	ldr	r3, [r7, #4]
 8019f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f86:	2b01      	cmp	r3, #1
 8019f88:	d03e      	beq.n	801a008 <UART_SetConfig+0x1f68>
 8019f8a:	687b      	ldr	r3, [r7, #4]
 8019f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f8e:	2b02      	cmp	r3, #2
 8019f90:	d038      	beq.n	801a004 <UART_SetConfig+0x1f64>
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f96:	2b03      	cmp	r3, #3
 8019f98:	d032      	beq.n	801a000 <UART_SetConfig+0x1f60>
 8019f9a:	687b      	ldr	r3, [r7, #4]
 8019f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f9e:	2b04      	cmp	r3, #4
 8019fa0:	d02c      	beq.n	8019ffc <UART_SetConfig+0x1f5c>
 8019fa2:	687b      	ldr	r3, [r7, #4]
 8019fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fa6:	2b05      	cmp	r3, #5
 8019fa8:	d026      	beq.n	8019ff8 <UART_SetConfig+0x1f58>
 8019faa:	687b      	ldr	r3, [r7, #4]
 8019fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fae:	2b06      	cmp	r3, #6
 8019fb0:	d020      	beq.n	8019ff4 <UART_SetConfig+0x1f54>
 8019fb2:	687b      	ldr	r3, [r7, #4]
 8019fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fb6:	2b07      	cmp	r3, #7
 8019fb8:	d01a      	beq.n	8019ff0 <UART_SetConfig+0x1f50>
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fbe:	2b08      	cmp	r3, #8
 8019fc0:	d014      	beq.n	8019fec <UART_SetConfig+0x1f4c>
 8019fc2:	687b      	ldr	r3, [r7, #4]
 8019fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fc6:	2b09      	cmp	r3, #9
 8019fc8:	d00e      	beq.n	8019fe8 <UART_SetConfig+0x1f48>
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fce:	2b0a      	cmp	r3, #10
 8019fd0:	d008      	beq.n	8019fe4 <UART_SetConfig+0x1f44>
 8019fd2:	687b      	ldr	r3, [r7, #4]
 8019fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fd6:	2b0b      	cmp	r3, #11
 8019fd8:	d102      	bne.n	8019fe0 <UART_SetConfig+0x1f40>
 8019fda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019fde:	e016      	b.n	801a00e <UART_SetConfig+0x1f6e>
 8019fe0:	2301      	movs	r3, #1
 8019fe2:	e014      	b.n	801a00e <UART_SetConfig+0x1f6e>
 8019fe4:	2380      	movs	r3, #128	; 0x80
 8019fe6:	e012      	b.n	801a00e <UART_SetConfig+0x1f6e>
 8019fe8:	2340      	movs	r3, #64	; 0x40
 8019fea:	e010      	b.n	801a00e <UART_SetConfig+0x1f6e>
 8019fec:	2320      	movs	r3, #32
 8019fee:	e00e      	b.n	801a00e <UART_SetConfig+0x1f6e>
 8019ff0:	2310      	movs	r3, #16
 8019ff2:	e00c      	b.n	801a00e <UART_SetConfig+0x1f6e>
 8019ff4:	230c      	movs	r3, #12
 8019ff6:	e00a      	b.n	801a00e <UART_SetConfig+0x1f6e>
 8019ff8:	230a      	movs	r3, #10
 8019ffa:	e008      	b.n	801a00e <UART_SetConfig+0x1f6e>
 8019ffc:	2308      	movs	r3, #8
 8019ffe:	e006      	b.n	801a00e <UART_SetConfig+0x1f6e>
 801a000:	2306      	movs	r3, #6
 801a002:	e004      	b.n	801a00e <UART_SetConfig+0x1f6e>
 801a004:	2304      	movs	r3, #4
 801a006:	e002      	b.n	801a00e <UART_SetConfig+0x1f6e>
 801a008:	2302      	movs	r3, #2
 801a00a:	e000      	b.n	801a00e <UART_SetConfig+0x1f6e>
 801a00c:	2301      	movs	r3, #1
 801a00e:	fbb2 f2f3 	udiv	r2, r2, r3
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	685b      	ldr	r3, [r3, #4]
 801a016:	085b      	lsrs	r3, r3, #1
 801a018:	441a      	add	r2, r3
 801a01a:	687b      	ldr	r3, [r7, #4]
 801a01c:	685b      	ldr	r3, [r3, #4]
 801a01e:	fbb2 f3f3 	udiv	r3, r2, r3
 801a022:	b29b      	uxth	r3, r3
 801a024:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801a026:	e195      	b.n	801a354 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801a028:	4b87      	ldr	r3, [pc, #540]	; (801a248 <UART_SetConfig+0x21a8>)
 801a02a:	681b      	ldr	r3, [r3, #0]
 801a02c:	f003 0320 	and.w	r3, r3, #32
 801a030:	2b00      	cmp	r3, #0
 801a032:	d05d      	beq.n	801a0f0 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a034:	4b84      	ldr	r3, [pc, #528]	; (801a248 <UART_SetConfig+0x21a8>)
 801a036:	681b      	ldr	r3, [r3, #0]
 801a038:	08db      	lsrs	r3, r3, #3
 801a03a:	f003 0303 	and.w	r3, r3, #3
 801a03e:	4a83      	ldr	r2, [pc, #524]	; (801a24c <UART_SetConfig+0x21ac>)
 801a040:	40da      	lsrs	r2, r3
 801a042:	687b      	ldr	r3, [r7, #4]
 801a044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a046:	2b00      	cmp	r3, #0
 801a048:	d044      	beq.n	801a0d4 <UART_SetConfig+0x2034>
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a04e:	2b01      	cmp	r3, #1
 801a050:	d03e      	beq.n	801a0d0 <UART_SetConfig+0x2030>
 801a052:	687b      	ldr	r3, [r7, #4]
 801a054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a056:	2b02      	cmp	r3, #2
 801a058:	d038      	beq.n	801a0cc <UART_SetConfig+0x202c>
 801a05a:	687b      	ldr	r3, [r7, #4]
 801a05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a05e:	2b03      	cmp	r3, #3
 801a060:	d032      	beq.n	801a0c8 <UART_SetConfig+0x2028>
 801a062:	687b      	ldr	r3, [r7, #4]
 801a064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a066:	2b04      	cmp	r3, #4
 801a068:	d02c      	beq.n	801a0c4 <UART_SetConfig+0x2024>
 801a06a:	687b      	ldr	r3, [r7, #4]
 801a06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a06e:	2b05      	cmp	r3, #5
 801a070:	d026      	beq.n	801a0c0 <UART_SetConfig+0x2020>
 801a072:	687b      	ldr	r3, [r7, #4]
 801a074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a076:	2b06      	cmp	r3, #6
 801a078:	d020      	beq.n	801a0bc <UART_SetConfig+0x201c>
 801a07a:	687b      	ldr	r3, [r7, #4]
 801a07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a07e:	2b07      	cmp	r3, #7
 801a080:	d01a      	beq.n	801a0b8 <UART_SetConfig+0x2018>
 801a082:	687b      	ldr	r3, [r7, #4]
 801a084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a086:	2b08      	cmp	r3, #8
 801a088:	d014      	beq.n	801a0b4 <UART_SetConfig+0x2014>
 801a08a:	687b      	ldr	r3, [r7, #4]
 801a08c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a08e:	2b09      	cmp	r3, #9
 801a090:	d00e      	beq.n	801a0b0 <UART_SetConfig+0x2010>
 801a092:	687b      	ldr	r3, [r7, #4]
 801a094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a096:	2b0a      	cmp	r3, #10
 801a098:	d008      	beq.n	801a0ac <UART_SetConfig+0x200c>
 801a09a:	687b      	ldr	r3, [r7, #4]
 801a09c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a09e:	2b0b      	cmp	r3, #11
 801a0a0:	d102      	bne.n	801a0a8 <UART_SetConfig+0x2008>
 801a0a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a0a6:	e016      	b.n	801a0d6 <UART_SetConfig+0x2036>
 801a0a8:	2301      	movs	r3, #1
 801a0aa:	e014      	b.n	801a0d6 <UART_SetConfig+0x2036>
 801a0ac:	2380      	movs	r3, #128	; 0x80
 801a0ae:	e012      	b.n	801a0d6 <UART_SetConfig+0x2036>
 801a0b0:	2340      	movs	r3, #64	; 0x40
 801a0b2:	e010      	b.n	801a0d6 <UART_SetConfig+0x2036>
 801a0b4:	2320      	movs	r3, #32
 801a0b6:	e00e      	b.n	801a0d6 <UART_SetConfig+0x2036>
 801a0b8:	2310      	movs	r3, #16
 801a0ba:	e00c      	b.n	801a0d6 <UART_SetConfig+0x2036>
 801a0bc:	230c      	movs	r3, #12
 801a0be:	e00a      	b.n	801a0d6 <UART_SetConfig+0x2036>
 801a0c0:	230a      	movs	r3, #10
 801a0c2:	e008      	b.n	801a0d6 <UART_SetConfig+0x2036>
 801a0c4:	2308      	movs	r3, #8
 801a0c6:	e006      	b.n	801a0d6 <UART_SetConfig+0x2036>
 801a0c8:	2306      	movs	r3, #6
 801a0ca:	e004      	b.n	801a0d6 <UART_SetConfig+0x2036>
 801a0cc:	2304      	movs	r3, #4
 801a0ce:	e002      	b.n	801a0d6 <UART_SetConfig+0x2036>
 801a0d0:	2302      	movs	r3, #2
 801a0d2:	e000      	b.n	801a0d6 <UART_SetConfig+0x2036>
 801a0d4:	2301      	movs	r3, #1
 801a0d6:	fbb2 f2f3 	udiv	r2, r2, r3
 801a0da:	687b      	ldr	r3, [r7, #4]
 801a0dc:	685b      	ldr	r3, [r3, #4]
 801a0de:	085b      	lsrs	r3, r3, #1
 801a0e0:	441a      	add	r2, r3
 801a0e2:	687b      	ldr	r3, [r7, #4]
 801a0e4:	685b      	ldr	r3, [r3, #4]
 801a0e6:	fbb2 f3f3 	udiv	r3, r2, r3
 801a0ea:	b29b      	uxth	r3, r3
 801a0ec:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 801a0ee:	e131      	b.n	801a354 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a0f0:	687b      	ldr	r3, [r7, #4]
 801a0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0f4:	2b00      	cmp	r3, #0
 801a0f6:	d043      	beq.n	801a180 <UART_SetConfig+0x20e0>
 801a0f8:	687b      	ldr	r3, [r7, #4]
 801a0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0fc:	2b01      	cmp	r3, #1
 801a0fe:	d03d      	beq.n	801a17c <UART_SetConfig+0x20dc>
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a104:	2b02      	cmp	r3, #2
 801a106:	d037      	beq.n	801a178 <UART_SetConfig+0x20d8>
 801a108:	687b      	ldr	r3, [r7, #4]
 801a10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a10c:	2b03      	cmp	r3, #3
 801a10e:	d031      	beq.n	801a174 <UART_SetConfig+0x20d4>
 801a110:	687b      	ldr	r3, [r7, #4]
 801a112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a114:	2b04      	cmp	r3, #4
 801a116:	d02b      	beq.n	801a170 <UART_SetConfig+0x20d0>
 801a118:	687b      	ldr	r3, [r7, #4]
 801a11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a11c:	2b05      	cmp	r3, #5
 801a11e:	d025      	beq.n	801a16c <UART_SetConfig+0x20cc>
 801a120:	687b      	ldr	r3, [r7, #4]
 801a122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a124:	2b06      	cmp	r3, #6
 801a126:	d01f      	beq.n	801a168 <UART_SetConfig+0x20c8>
 801a128:	687b      	ldr	r3, [r7, #4]
 801a12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a12c:	2b07      	cmp	r3, #7
 801a12e:	d019      	beq.n	801a164 <UART_SetConfig+0x20c4>
 801a130:	687b      	ldr	r3, [r7, #4]
 801a132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a134:	2b08      	cmp	r3, #8
 801a136:	d013      	beq.n	801a160 <UART_SetConfig+0x20c0>
 801a138:	687b      	ldr	r3, [r7, #4]
 801a13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a13c:	2b09      	cmp	r3, #9
 801a13e:	d00d      	beq.n	801a15c <UART_SetConfig+0x20bc>
 801a140:	687b      	ldr	r3, [r7, #4]
 801a142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a144:	2b0a      	cmp	r3, #10
 801a146:	d007      	beq.n	801a158 <UART_SetConfig+0x20b8>
 801a148:	687b      	ldr	r3, [r7, #4]
 801a14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a14c:	2b0b      	cmp	r3, #11
 801a14e:	d101      	bne.n	801a154 <UART_SetConfig+0x20b4>
 801a150:	4b3f      	ldr	r3, [pc, #252]	; (801a250 <UART_SetConfig+0x21b0>)
 801a152:	e016      	b.n	801a182 <UART_SetConfig+0x20e2>
 801a154:	4b3d      	ldr	r3, [pc, #244]	; (801a24c <UART_SetConfig+0x21ac>)
 801a156:	e014      	b.n	801a182 <UART_SetConfig+0x20e2>
 801a158:	4b3e      	ldr	r3, [pc, #248]	; (801a254 <UART_SetConfig+0x21b4>)
 801a15a:	e012      	b.n	801a182 <UART_SetConfig+0x20e2>
 801a15c:	4b3e      	ldr	r3, [pc, #248]	; (801a258 <UART_SetConfig+0x21b8>)
 801a15e:	e010      	b.n	801a182 <UART_SetConfig+0x20e2>
 801a160:	4b3e      	ldr	r3, [pc, #248]	; (801a25c <UART_SetConfig+0x21bc>)
 801a162:	e00e      	b.n	801a182 <UART_SetConfig+0x20e2>
 801a164:	4b3e      	ldr	r3, [pc, #248]	; (801a260 <UART_SetConfig+0x21c0>)
 801a166:	e00c      	b.n	801a182 <UART_SetConfig+0x20e2>
 801a168:	4b3e      	ldr	r3, [pc, #248]	; (801a264 <UART_SetConfig+0x21c4>)
 801a16a:	e00a      	b.n	801a182 <UART_SetConfig+0x20e2>
 801a16c:	4b3e      	ldr	r3, [pc, #248]	; (801a268 <UART_SetConfig+0x21c8>)
 801a16e:	e008      	b.n	801a182 <UART_SetConfig+0x20e2>
 801a170:	4b3e      	ldr	r3, [pc, #248]	; (801a26c <UART_SetConfig+0x21cc>)
 801a172:	e006      	b.n	801a182 <UART_SetConfig+0x20e2>
 801a174:	4b3e      	ldr	r3, [pc, #248]	; (801a270 <UART_SetConfig+0x21d0>)
 801a176:	e004      	b.n	801a182 <UART_SetConfig+0x20e2>
 801a178:	4b3e      	ldr	r3, [pc, #248]	; (801a274 <UART_SetConfig+0x21d4>)
 801a17a:	e002      	b.n	801a182 <UART_SetConfig+0x20e2>
 801a17c:	4b3e      	ldr	r3, [pc, #248]	; (801a278 <UART_SetConfig+0x21d8>)
 801a17e:	e000      	b.n	801a182 <UART_SetConfig+0x20e2>
 801a180:	4b32      	ldr	r3, [pc, #200]	; (801a24c <UART_SetConfig+0x21ac>)
 801a182:	687a      	ldr	r2, [r7, #4]
 801a184:	6852      	ldr	r2, [r2, #4]
 801a186:	0852      	lsrs	r2, r2, #1
 801a188:	441a      	add	r2, r3
 801a18a:	687b      	ldr	r3, [r7, #4]
 801a18c:	685b      	ldr	r3, [r3, #4]
 801a18e:	fbb2 f3f3 	udiv	r3, r2, r3
 801a192:	b29b      	uxth	r3, r3
 801a194:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801a196:	e0dd      	b.n	801a354 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a198:	687b      	ldr	r3, [r7, #4]
 801a19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a19c:	2b00      	cmp	r3, #0
 801a19e:	d046      	beq.n	801a22e <UART_SetConfig+0x218e>
 801a1a0:	687b      	ldr	r3, [r7, #4]
 801a1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1a4:	2b01      	cmp	r3, #1
 801a1a6:	d040      	beq.n	801a22a <UART_SetConfig+0x218a>
 801a1a8:	687b      	ldr	r3, [r7, #4]
 801a1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1ac:	2b02      	cmp	r3, #2
 801a1ae:	d03a      	beq.n	801a226 <UART_SetConfig+0x2186>
 801a1b0:	687b      	ldr	r3, [r7, #4]
 801a1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1b4:	2b03      	cmp	r3, #3
 801a1b6:	d034      	beq.n	801a222 <UART_SetConfig+0x2182>
 801a1b8:	687b      	ldr	r3, [r7, #4]
 801a1ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1bc:	2b04      	cmp	r3, #4
 801a1be:	d02e      	beq.n	801a21e <UART_SetConfig+0x217e>
 801a1c0:	687b      	ldr	r3, [r7, #4]
 801a1c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1c4:	2b05      	cmp	r3, #5
 801a1c6:	d028      	beq.n	801a21a <UART_SetConfig+0x217a>
 801a1c8:	687b      	ldr	r3, [r7, #4]
 801a1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1cc:	2b06      	cmp	r3, #6
 801a1ce:	d022      	beq.n	801a216 <UART_SetConfig+0x2176>
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1d4:	2b07      	cmp	r3, #7
 801a1d6:	d01c      	beq.n	801a212 <UART_SetConfig+0x2172>
 801a1d8:	687b      	ldr	r3, [r7, #4]
 801a1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1dc:	2b08      	cmp	r3, #8
 801a1de:	d016      	beq.n	801a20e <UART_SetConfig+0x216e>
 801a1e0:	687b      	ldr	r3, [r7, #4]
 801a1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1e4:	2b09      	cmp	r3, #9
 801a1e6:	d00f      	beq.n	801a208 <UART_SetConfig+0x2168>
 801a1e8:	687b      	ldr	r3, [r7, #4]
 801a1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1ec:	2b0a      	cmp	r3, #10
 801a1ee:	d008      	beq.n	801a202 <UART_SetConfig+0x2162>
 801a1f0:	687b      	ldr	r3, [r7, #4]
 801a1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1f4:	2b0b      	cmp	r3, #11
 801a1f6:	d102      	bne.n	801a1fe <UART_SetConfig+0x215e>
 801a1f8:	f643 5309 	movw	r3, #15625	; 0x3d09
 801a1fc:	e018      	b.n	801a230 <UART_SetConfig+0x2190>
 801a1fe:	4b18      	ldr	r3, [pc, #96]	; (801a260 <UART_SetConfig+0x21c0>)
 801a200:	e016      	b.n	801a230 <UART_SetConfig+0x2190>
 801a202:	f647 2312 	movw	r3, #31250	; 0x7a12
 801a206:	e013      	b.n	801a230 <UART_SetConfig+0x2190>
 801a208:	f24f 4324 	movw	r3, #62500	; 0xf424
 801a20c:	e010      	b.n	801a230 <UART_SetConfig+0x2190>
 801a20e:	4b1b      	ldr	r3, [pc, #108]	; (801a27c <UART_SetConfig+0x21dc>)
 801a210:	e00e      	b.n	801a230 <UART_SetConfig+0x2190>
 801a212:	4b0f      	ldr	r3, [pc, #60]	; (801a250 <UART_SetConfig+0x21b0>)
 801a214:	e00c      	b.n	801a230 <UART_SetConfig+0x2190>
 801a216:	4b1a      	ldr	r3, [pc, #104]	; (801a280 <UART_SetConfig+0x21e0>)
 801a218:	e00a      	b.n	801a230 <UART_SetConfig+0x2190>
 801a21a:	4b1a      	ldr	r3, [pc, #104]	; (801a284 <UART_SetConfig+0x21e4>)
 801a21c:	e008      	b.n	801a230 <UART_SetConfig+0x2190>
 801a21e:	4b0d      	ldr	r3, [pc, #52]	; (801a254 <UART_SetConfig+0x21b4>)
 801a220:	e006      	b.n	801a230 <UART_SetConfig+0x2190>
 801a222:	4b19      	ldr	r3, [pc, #100]	; (801a288 <UART_SetConfig+0x21e8>)
 801a224:	e004      	b.n	801a230 <UART_SetConfig+0x2190>
 801a226:	4b0c      	ldr	r3, [pc, #48]	; (801a258 <UART_SetConfig+0x21b8>)
 801a228:	e002      	b.n	801a230 <UART_SetConfig+0x2190>
 801a22a:	4b0c      	ldr	r3, [pc, #48]	; (801a25c <UART_SetConfig+0x21bc>)
 801a22c:	e000      	b.n	801a230 <UART_SetConfig+0x2190>
 801a22e:	4b0c      	ldr	r3, [pc, #48]	; (801a260 <UART_SetConfig+0x21c0>)
 801a230:	687a      	ldr	r2, [r7, #4]
 801a232:	6852      	ldr	r2, [r2, #4]
 801a234:	0852      	lsrs	r2, r2, #1
 801a236:	441a      	add	r2, r3
 801a238:	687b      	ldr	r3, [r7, #4]
 801a23a:	685b      	ldr	r3, [r3, #4]
 801a23c:	fbb2 f3f3 	udiv	r3, r2, r3
 801a240:	b29b      	uxth	r3, r3
 801a242:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801a244:	e086      	b.n	801a354 <UART_SetConfig+0x22b4>
 801a246:	bf00      	nop
 801a248:	58024400 	.word	0x58024400
 801a24c:	03d09000 	.word	0x03d09000
 801a250:	0003d090 	.word	0x0003d090
 801a254:	0007a120 	.word	0x0007a120
 801a258:	000f4240 	.word	0x000f4240
 801a25c:	001e8480 	.word	0x001e8480
 801a260:	003d0900 	.word	0x003d0900
 801a264:	00516155 	.word	0x00516155
 801a268:	0061a800 	.word	0x0061a800
 801a26c:	007a1200 	.word	0x007a1200
 801a270:	00a2c2aa 	.word	0x00a2c2aa
 801a274:	00f42400 	.word	0x00f42400
 801a278:	01e84800 	.word	0x01e84800
 801a27c:	0001e848 	.word	0x0001e848
 801a280:	00051615 	.word	0x00051615
 801a284:	00061a80 	.word	0x00061a80
 801a288:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a28c:	687b      	ldr	r3, [r7, #4]
 801a28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a290:	2b00      	cmp	r3, #0
 801a292:	d04e      	beq.n	801a332 <UART_SetConfig+0x2292>
 801a294:	687b      	ldr	r3, [r7, #4]
 801a296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a298:	2b01      	cmp	r3, #1
 801a29a:	d047      	beq.n	801a32c <UART_SetConfig+0x228c>
 801a29c:	687b      	ldr	r3, [r7, #4]
 801a29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2a0:	2b02      	cmp	r3, #2
 801a2a2:	d040      	beq.n	801a326 <UART_SetConfig+0x2286>
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2a8:	2b03      	cmp	r3, #3
 801a2aa:	d039      	beq.n	801a320 <UART_SetConfig+0x2280>
 801a2ac:	687b      	ldr	r3, [r7, #4]
 801a2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2b0:	2b04      	cmp	r3, #4
 801a2b2:	d032      	beq.n	801a31a <UART_SetConfig+0x227a>
 801a2b4:	687b      	ldr	r3, [r7, #4]
 801a2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2b8:	2b05      	cmp	r3, #5
 801a2ba:	d02b      	beq.n	801a314 <UART_SetConfig+0x2274>
 801a2bc:	687b      	ldr	r3, [r7, #4]
 801a2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2c0:	2b06      	cmp	r3, #6
 801a2c2:	d024      	beq.n	801a30e <UART_SetConfig+0x226e>
 801a2c4:	687b      	ldr	r3, [r7, #4]
 801a2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2c8:	2b07      	cmp	r3, #7
 801a2ca:	d01d      	beq.n	801a308 <UART_SetConfig+0x2268>
 801a2cc:	687b      	ldr	r3, [r7, #4]
 801a2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2d0:	2b08      	cmp	r3, #8
 801a2d2:	d016      	beq.n	801a302 <UART_SetConfig+0x2262>
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2d8:	2b09      	cmp	r3, #9
 801a2da:	d00f      	beq.n	801a2fc <UART_SetConfig+0x225c>
 801a2dc:	687b      	ldr	r3, [r7, #4]
 801a2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2e0:	2b0a      	cmp	r3, #10
 801a2e2:	d008      	beq.n	801a2f6 <UART_SetConfig+0x2256>
 801a2e4:	687b      	ldr	r3, [r7, #4]
 801a2e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2e8:	2b0b      	cmp	r3, #11
 801a2ea:	d101      	bne.n	801a2f0 <UART_SetConfig+0x2250>
 801a2ec:	2380      	movs	r3, #128	; 0x80
 801a2ee:	e022      	b.n	801a336 <UART_SetConfig+0x2296>
 801a2f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a2f4:	e01f      	b.n	801a336 <UART_SetConfig+0x2296>
 801a2f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a2fa:	e01c      	b.n	801a336 <UART_SetConfig+0x2296>
 801a2fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 801a300:	e019      	b.n	801a336 <UART_SetConfig+0x2296>
 801a302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a306:	e016      	b.n	801a336 <UART_SetConfig+0x2296>
 801a308:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a30c:	e013      	b.n	801a336 <UART_SetConfig+0x2296>
 801a30e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 801a312:	e010      	b.n	801a336 <UART_SetConfig+0x2296>
 801a314:	f640 43cc 	movw	r3, #3276	; 0xccc
 801a318:	e00d      	b.n	801a336 <UART_SetConfig+0x2296>
 801a31a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a31e:	e00a      	b.n	801a336 <UART_SetConfig+0x2296>
 801a320:	f241 5355 	movw	r3, #5461	; 0x1555
 801a324:	e007      	b.n	801a336 <UART_SetConfig+0x2296>
 801a326:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801a32a:	e004      	b.n	801a336 <UART_SetConfig+0x2296>
 801a32c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801a330:	e001      	b.n	801a336 <UART_SetConfig+0x2296>
 801a332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a336:	687a      	ldr	r2, [r7, #4]
 801a338:	6852      	ldr	r2, [r2, #4]
 801a33a:	0852      	lsrs	r2, r2, #1
 801a33c:	441a      	add	r2, r3
 801a33e:	687b      	ldr	r3, [r7, #4]
 801a340:	685b      	ldr	r3, [r3, #4]
 801a342:	fbb2 f3f3 	udiv	r3, r2, r3
 801a346:	b29b      	uxth	r3, r3
 801a348:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801a34a:	e003      	b.n	801a354 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 801a34c:	2301      	movs	r3, #1
 801a34e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 801a352:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801a354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a356:	2b0f      	cmp	r3, #15
 801a358:	d908      	bls.n	801a36c <UART_SetConfig+0x22cc>
 801a35a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a35c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a360:	d204      	bcs.n	801a36c <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	681b      	ldr	r3, [r3, #0]
 801a366:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a368:	60da      	str	r2, [r3, #12]
 801a36a:	e002      	b.n	801a372 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 801a36c:	2301      	movs	r3, #1
 801a36e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801a372:	687b      	ldr	r3, [r7, #4]
 801a374:	2201      	movs	r2, #1
 801a376:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	2201      	movs	r2, #1
 801a37e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801a382:	687b      	ldr	r3, [r7, #4]
 801a384:	2200      	movs	r2, #0
 801a386:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 801a388:	687b      	ldr	r3, [r7, #4]
 801a38a:	2200      	movs	r2, #0
 801a38c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 801a38e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 801a392:	4618      	mov	r0, r3
 801a394:	3740      	adds	r7, #64	; 0x40
 801a396:	46bd      	mov	sp, r7
 801a398:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0801a39c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801a39c:	b480      	push	{r7}
 801a39e:	b083      	sub	sp, #12
 801a3a0:	af00      	add	r7, sp, #0
 801a3a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801a3a4:	687b      	ldr	r3, [r7, #4]
 801a3a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a3a8:	f003 0301 	and.w	r3, r3, #1
 801a3ac:	2b00      	cmp	r3, #0
 801a3ae:	d00a      	beq.n	801a3c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	681b      	ldr	r3, [r3, #0]
 801a3b4:	685b      	ldr	r3, [r3, #4]
 801a3b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801a3ba:	687b      	ldr	r3, [r7, #4]
 801a3bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a3be:	687b      	ldr	r3, [r7, #4]
 801a3c0:	681b      	ldr	r3, [r3, #0]
 801a3c2:	430a      	orrs	r2, r1
 801a3c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801a3c6:	687b      	ldr	r3, [r7, #4]
 801a3c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a3ca:	f003 0302 	and.w	r3, r3, #2
 801a3ce:	2b00      	cmp	r3, #0
 801a3d0:	d00a      	beq.n	801a3e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801a3d2:	687b      	ldr	r3, [r7, #4]
 801a3d4:	681b      	ldr	r3, [r3, #0]
 801a3d6:	685b      	ldr	r3, [r3, #4]
 801a3d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801a3dc:	687b      	ldr	r3, [r7, #4]
 801a3de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a3e0:	687b      	ldr	r3, [r7, #4]
 801a3e2:	681b      	ldr	r3, [r3, #0]
 801a3e4:	430a      	orrs	r2, r1
 801a3e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801a3e8:	687b      	ldr	r3, [r7, #4]
 801a3ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a3ec:	f003 0304 	and.w	r3, r3, #4
 801a3f0:	2b00      	cmp	r3, #0
 801a3f2:	d00a      	beq.n	801a40a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	681b      	ldr	r3, [r3, #0]
 801a3f8:	685b      	ldr	r3, [r3, #4]
 801a3fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801a3fe:	687b      	ldr	r3, [r7, #4]
 801a400:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801a402:	687b      	ldr	r3, [r7, #4]
 801a404:	681b      	ldr	r3, [r3, #0]
 801a406:	430a      	orrs	r2, r1
 801a408:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801a40a:	687b      	ldr	r3, [r7, #4]
 801a40c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a40e:	f003 0308 	and.w	r3, r3, #8
 801a412:	2b00      	cmp	r3, #0
 801a414:	d00a      	beq.n	801a42c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801a416:	687b      	ldr	r3, [r7, #4]
 801a418:	681b      	ldr	r3, [r3, #0]
 801a41a:	685b      	ldr	r3, [r3, #4]
 801a41c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801a420:	687b      	ldr	r3, [r7, #4]
 801a422:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a424:	687b      	ldr	r3, [r7, #4]
 801a426:	681b      	ldr	r3, [r3, #0]
 801a428:	430a      	orrs	r2, r1
 801a42a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801a42c:	687b      	ldr	r3, [r7, #4]
 801a42e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a430:	f003 0310 	and.w	r3, r3, #16
 801a434:	2b00      	cmp	r3, #0
 801a436:	d00a      	beq.n	801a44e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801a438:	687b      	ldr	r3, [r7, #4]
 801a43a:	681b      	ldr	r3, [r3, #0]
 801a43c:	689b      	ldr	r3, [r3, #8]
 801a43e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801a442:	687b      	ldr	r3, [r7, #4]
 801a444:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801a446:	687b      	ldr	r3, [r7, #4]
 801a448:	681b      	ldr	r3, [r3, #0]
 801a44a:	430a      	orrs	r2, r1
 801a44c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801a44e:	687b      	ldr	r3, [r7, #4]
 801a450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a452:	f003 0320 	and.w	r3, r3, #32
 801a456:	2b00      	cmp	r3, #0
 801a458:	d00a      	beq.n	801a470 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801a45a:	687b      	ldr	r3, [r7, #4]
 801a45c:	681b      	ldr	r3, [r3, #0]
 801a45e:	689b      	ldr	r3, [r3, #8]
 801a460:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801a464:	687b      	ldr	r3, [r7, #4]
 801a466:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801a468:	687b      	ldr	r3, [r7, #4]
 801a46a:	681b      	ldr	r3, [r3, #0]
 801a46c:	430a      	orrs	r2, r1
 801a46e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801a470:	687b      	ldr	r3, [r7, #4]
 801a472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a478:	2b00      	cmp	r3, #0
 801a47a:	d01a      	beq.n	801a4b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801a47c:	687b      	ldr	r3, [r7, #4]
 801a47e:	681b      	ldr	r3, [r3, #0]
 801a480:	685b      	ldr	r3, [r3, #4]
 801a482:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801a486:	687b      	ldr	r3, [r7, #4]
 801a488:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a48a:	687b      	ldr	r3, [r7, #4]
 801a48c:	681b      	ldr	r3, [r3, #0]
 801a48e:	430a      	orrs	r2, r1
 801a490:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801a492:	687b      	ldr	r3, [r7, #4]
 801a494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a496:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a49a:	d10a      	bne.n	801a4b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801a49c:	687b      	ldr	r3, [r7, #4]
 801a49e:	681b      	ldr	r3, [r3, #0]
 801a4a0:	685b      	ldr	r3, [r3, #4]
 801a4a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801a4a6:	687b      	ldr	r3, [r7, #4]
 801a4a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801a4aa:	687b      	ldr	r3, [r7, #4]
 801a4ac:	681b      	ldr	r3, [r3, #0]
 801a4ae:	430a      	orrs	r2, r1
 801a4b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801a4b2:	687b      	ldr	r3, [r7, #4]
 801a4b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a4b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a4ba:	2b00      	cmp	r3, #0
 801a4bc:	d00a      	beq.n	801a4d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801a4be:	687b      	ldr	r3, [r7, #4]
 801a4c0:	681b      	ldr	r3, [r3, #0]
 801a4c2:	685b      	ldr	r3, [r3, #4]
 801a4c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801a4c8:	687b      	ldr	r3, [r7, #4]
 801a4ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801a4cc:	687b      	ldr	r3, [r7, #4]
 801a4ce:	681b      	ldr	r3, [r3, #0]
 801a4d0:	430a      	orrs	r2, r1
 801a4d2:	605a      	str	r2, [r3, #4]
  }
}
 801a4d4:	bf00      	nop
 801a4d6:	370c      	adds	r7, #12
 801a4d8:	46bd      	mov	sp, r7
 801a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4de:	4770      	bx	lr

0801a4e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801a4e0:	b580      	push	{r7, lr}
 801a4e2:	b086      	sub	sp, #24
 801a4e4:	af02      	add	r7, sp, #8
 801a4e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a4e8:	687b      	ldr	r3, [r7, #4]
 801a4ea:	2200      	movs	r2, #0
 801a4ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 801a4f0:	f7f8 fa0c 	bl	801290c <HAL_GetTick>
 801a4f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801a4f6:	687b      	ldr	r3, [r7, #4]
 801a4f8:	681b      	ldr	r3, [r3, #0]
 801a4fa:	681b      	ldr	r3, [r3, #0]
 801a4fc:	f003 0308 	and.w	r3, r3, #8
 801a500:	2b08      	cmp	r3, #8
 801a502:	d10e      	bne.n	801a522 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801a504:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801a508:	9300      	str	r3, [sp, #0]
 801a50a:	68fb      	ldr	r3, [r7, #12]
 801a50c:	2200      	movs	r2, #0
 801a50e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801a512:	6878      	ldr	r0, [r7, #4]
 801a514:	f000 f82c 	bl	801a570 <UART_WaitOnFlagUntilTimeout>
 801a518:	4603      	mov	r3, r0
 801a51a:	2b00      	cmp	r3, #0
 801a51c:	d001      	beq.n	801a522 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801a51e:	2303      	movs	r3, #3
 801a520:	e022      	b.n	801a568 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801a522:	687b      	ldr	r3, [r7, #4]
 801a524:	681b      	ldr	r3, [r3, #0]
 801a526:	681b      	ldr	r3, [r3, #0]
 801a528:	f003 0304 	and.w	r3, r3, #4
 801a52c:	2b04      	cmp	r3, #4
 801a52e:	d10e      	bne.n	801a54e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801a530:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801a534:	9300      	str	r3, [sp, #0]
 801a536:	68fb      	ldr	r3, [r7, #12]
 801a538:	2200      	movs	r2, #0
 801a53a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801a53e:	6878      	ldr	r0, [r7, #4]
 801a540:	f000 f816 	bl	801a570 <UART_WaitOnFlagUntilTimeout>
 801a544:	4603      	mov	r3, r0
 801a546:	2b00      	cmp	r3, #0
 801a548:	d001      	beq.n	801a54e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801a54a:	2303      	movs	r3, #3
 801a54c:	e00c      	b.n	801a568 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801a54e:	687b      	ldr	r3, [r7, #4]
 801a550:	2220      	movs	r2, #32
 801a552:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 801a556:	687b      	ldr	r3, [r7, #4]
 801a558:	2220      	movs	r2, #32
 801a55a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 801a55e:	687b      	ldr	r3, [r7, #4]
 801a560:	2200      	movs	r2, #0
 801a562:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 801a566:	2300      	movs	r3, #0
}
 801a568:	4618      	mov	r0, r3
 801a56a:	3710      	adds	r7, #16
 801a56c:	46bd      	mov	sp, r7
 801a56e:	bd80      	pop	{r7, pc}

0801a570 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801a570:	b580      	push	{r7, lr}
 801a572:	b084      	sub	sp, #16
 801a574:	af00      	add	r7, sp, #0
 801a576:	60f8      	str	r0, [r7, #12]
 801a578:	60b9      	str	r1, [r7, #8]
 801a57a:	603b      	str	r3, [r7, #0]
 801a57c:	4613      	mov	r3, r2
 801a57e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801a580:	e062      	b.n	801a648 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801a582:	69bb      	ldr	r3, [r7, #24]
 801a584:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a588:	d05e      	beq.n	801a648 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a58a:	f7f8 f9bf 	bl	801290c <HAL_GetTick>
 801a58e:	4602      	mov	r2, r0
 801a590:	683b      	ldr	r3, [r7, #0]
 801a592:	1ad3      	subs	r3, r2, r3
 801a594:	69ba      	ldr	r2, [r7, #24]
 801a596:	429a      	cmp	r2, r3
 801a598:	d302      	bcc.n	801a5a0 <UART_WaitOnFlagUntilTimeout+0x30>
 801a59a:	69bb      	ldr	r3, [r7, #24]
 801a59c:	2b00      	cmp	r3, #0
 801a59e:	d11d      	bne.n	801a5dc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 801a5a0:	68fb      	ldr	r3, [r7, #12]
 801a5a2:	681b      	ldr	r3, [r3, #0]
 801a5a4:	681a      	ldr	r2, [r3, #0]
 801a5a6:	68fb      	ldr	r3, [r7, #12]
 801a5a8:	681b      	ldr	r3, [r3, #0]
 801a5aa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801a5ae:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a5b0:	68fb      	ldr	r3, [r7, #12]
 801a5b2:	681b      	ldr	r3, [r3, #0]
 801a5b4:	689a      	ldr	r2, [r3, #8]
 801a5b6:	68fb      	ldr	r3, [r7, #12]
 801a5b8:	681b      	ldr	r3, [r3, #0]
 801a5ba:	f022 0201 	bic.w	r2, r2, #1
 801a5be:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 801a5c0:	68fb      	ldr	r3, [r7, #12]
 801a5c2:	2220      	movs	r2, #32
 801a5c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 801a5c8:	68fb      	ldr	r3, [r7, #12]
 801a5ca:	2220      	movs	r2, #32
 801a5cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 801a5d0:	68fb      	ldr	r3, [r7, #12]
 801a5d2:	2200      	movs	r2, #0
 801a5d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 801a5d8:	2303      	movs	r3, #3
 801a5da:	e045      	b.n	801a668 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801a5dc:	68fb      	ldr	r3, [r7, #12]
 801a5de:	681b      	ldr	r3, [r3, #0]
 801a5e0:	681b      	ldr	r3, [r3, #0]
 801a5e2:	f003 0304 	and.w	r3, r3, #4
 801a5e6:	2b00      	cmp	r3, #0
 801a5e8:	d02e      	beq.n	801a648 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801a5ea:	68fb      	ldr	r3, [r7, #12]
 801a5ec:	681b      	ldr	r3, [r3, #0]
 801a5ee:	69db      	ldr	r3, [r3, #28]
 801a5f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801a5f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a5f8:	d126      	bne.n	801a648 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801a5fa:	68fb      	ldr	r3, [r7, #12]
 801a5fc:	681b      	ldr	r3, [r3, #0]
 801a5fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a602:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 801a604:	68fb      	ldr	r3, [r7, #12]
 801a606:	681b      	ldr	r3, [r3, #0]
 801a608:	681a      	ldr	r2, [r3, #0]
 801a60a:	68fb      	ldr	r3, [r7, #12]
 801a60c:	681b      	ldr	r3, [r3, #0]
 801a60e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801a612:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a614:	68fb      	ldr	r3, [r7, #12]
 801a616:	681b      	ldr	r3, [r3, #0]
 801a618:	689a      	ldr	r2, [r3, #8]
 801a61a:	68fb      	ldr	r3, [r7, #12]
 801a61c:	681b      	ldr	r3, [r3, #0]
 801a61e:	f022 0201 	bic.w	r2, r2, #1
 801a622:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 801a624:	68fb      	ldr	r3, [r7, #12]
 801a626:	2220      	movs	r2, #32
 801a628:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 801a62c:	68fb      	ldr	r3, [r7, #12]
 801a62e:	2220      	movs	r2, #32
 801a630:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801a634:	68fb      	ldr	r3, [r7, #12]
 801a636:	2220      	movs	r2, #32
 801a638:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801a63c:	68fb      	ldr	r3, [r7, #12]
 801a63e:	2200      	movs	r2, #0
 801a640:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 801a644:	2303      	movs	r3, #3
 801a646:	e00f      	b.n	801a668 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801a648:	68fb      	ldr	r3, [r7, #12]
 801a64a:	681b      	ldr	r3, [r3, #0]
 801a64c:	69da      	ldr	r2, [r3, #28]
 801a64e:	68bb      	ldr	r3, [r7, #8]
 801a650:	4013      	ands	r3, r2
 801a652:	68ba      	ldr	r2, [r7, #8]
 801a654:	429a      	cmp	r2, r3
 801a656:	bf0c      	ite	eq
 801a658:	2301      	moveq	r3, #1
 801a65a:	2300      	movne	r3, #0
 801a65c:	b2db      	uxtb	r3, r3
 801a65e:	461a      	mov	r2, r3
 801a660:	79fb      	ldrb	r3, [r7, #7]
 801a662:	429a      	cmp	r2, r3
 801a664:	d08d      	beq.n	801a582 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801a666:	2300      	movs	r3, #0
}
 801a668:	4618      	mov	r0, r3
 801a66a:	3710      	adds	r7, #16
 801a66c:	46bd      	mov	sp, r7
 801a66e:	bd80      	pop	{r7, pc}

0801a670 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801a670:	b480      	push	{r7}
 801a672:	b083      	sub	sp, #12
 801a674:	af00      	add	r7, sp, #0
 801a676:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a678:	687b      	ldr	r3, [r7, #4]
 801a67a:	681b      	ldr	r3, [r3, #0]
 801a67c:	681a      	ldr	r2, [r3, #0]
 801a67e:	687b      	ldr	r3, [r7, #4]
 801a680:	681b      	ldr	r3, [r3, #0]
 801a682:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801a686:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a688:	687b      	ldr	r3, [r7, #4]
 801a68a:	681b      	ldr	r3, [r3, #0]
 801a68c:	6899      	ldr	r1, [r3, #8]
 801a68e:	687b      	ldr	r3, [r7, #4]
 801a690:	681a      	ldr	r2, [r3, #0]
 801a692:	4b08      	ldr	r3, [pc, #32]	; (801a6b4 <UART_EndRxTransfer+0x44>)
 801a694:	400b      	ands	r3, r1
 801a696:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801a698:	687b      	ldr	r3, [r7, #4]
 801a69a:	2220      	movs	r2, #32
 801a69c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801a6a0:	687b      	ldr	r3, [r7, #4]
 801a6a2:	2200      	movs	r2, #0
 801a6a4:	66da      	str	r2, [r3, #108]	; 0x6c
}
 801a6a6:	bf00      	nop
 801a6a8:	370c      	adds	r7, #12
 801a6aa:	46bd      	mov	sp, r7
 801a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6b0:	4770      	bx	lr
 801a6b2:	bf00      	nop
 801a6b4:	effffffe 	.word	0xeffffffe

0801a6b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801a6b8:	b580      	push	{r7, lr}
 801a6ba:	b084      	sub	sp, #16
 801a6bc:	af00      	add	r7, sp, #0
 801a6be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801a6c0:	687b      	ldr	r3, [r7, #4]
 801a6c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a6c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801a6c6:	68fb      	ldr	r3, [r7, #12]
 801a6c8:	2200      	movs	r2, #0
 801a6ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801a6ce:	68fb      	ldr	r3, [r7, #12]
 801a6d0:	2200      	movs	r2, #0
 801a6d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801a6d6:	68f8      	ldr	r0, [r7, #12]
 801a6d8:	f7fd fcd8 	bl	801808c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801a6dc:	bf00      	nop
 801a6de:	3710      	adds	r7, #16
 801a6e0:	46bd      	mov	sp, r7
 801a6e2:	bd80      	pop	{r7, pc}

0801a6e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801a6e4:	b580      	push	{r7, lr}
 801a6e6:	b082      	sub	sp, #8
 801a6e8:	af00      	add	r7, sp, #0
 801a6ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801a6ec:	687b      	ldr	r3, [r7, #4]
 801a6ee:	681b      	ldr	r3, [r3, #0]
 801a6f0:	681a      	ldr	r2, [r3, #0]
 801a6f2:	687b      	ldr	r3, [r7, #4]
 801a6f4:	681b      	ldr	r3, [r3, #0]
 801a6f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801a6fa:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801a6fc:	687b      	ldr	r3, [r7, #4]
 801a6fe:	2220      	movs	r2, #32
 801a700:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	2200      	movs	r2, #0
 801a708:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801a70a:	6878      	ldr	r0, [r7, #4]
 801a70c:	f7fd fcb4 	bl	8018078 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801a710:	bf00      	nop
 801a712:	3708      	adds	r7, #8
 801a714:	46bd      	mov	sp, r7
 801a716:	bd80      	pop	{r7, pc}

0801a718 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801a718:	b480      	push	{r7}
 801a71a:	b083      	sub	sp, #12
 801a71c:	af00      	add	r7, sp, #0
 801a71e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801a720:	bf00      	nop
 801a722:	370c      	adds	r7, #12
 801a724:	46bd      	mov	sp, r7
 801a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a72a:	4770      	bx	lr

0801a72c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801a72c:	b480      	push	{r7}
 801a72e:	b083      	sub	sp, #12
 801a730:	af00      	add	r7, sp, #0
 801a732:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801a734:	bf00      	nop
 801a736:	370c      	adds	r7, #12
 801a738:	46bd      	mov	sp, r7
 801a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a73e:	4770      	bx	lr

0801a740 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801a740:	b480      	push	{r7}
 801a742:	b083      	sub	sp, #12
 801a744:	af00      	add	r7, sp, #0
 801a746:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801a748:	bf00      	nop
 801a74a:	370c      	adds	r7, #12
 801a74c:	46bd      	mov	sp, r7
 801a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a752:	4770      	bx	lr

0801a754 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801a754:	b480      	push	{r7}
 801a756:	b085      	sub	sp, #20
 801a758:	af00      	add	r7, sp, #0
 801a75a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a75c:	687b      	ldr	r3, [r7, #4]
 801a75e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801a762:	2b01      	cmp	r3, #1
 801a764:	d101      	bne.n	801a76a <HAL_UARTEx_DisableFifoMode+0x16>
 801a766:	2302      	movs	r3, #2
 801a768:	e027      	b.n	801a7ba <HAL_UARTEx_DisableFifoMode+0x66>
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	2201      	movs	r2, #1
 801a76e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 801a772:	687b      	ldr	r3, [r7, #4]
 801a774:	2224      	movs	r2, #36	; 0x24
 801a776:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a77a:	687b      	ldr	r3, [r7, #4]
 801a77c:	681b      	ldr	r3, [r3, #0]
 801a77e:	681b      	ldr	r3, [r3, #0]
 801a780:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a782:	687b      	ldr	r3, [r7, #4]
 801a784:	681b      	ldr	r3, [r3, #0]
 801a786:	681a      	ldr	r2, [r3, #0]
 801a788:	687b      	ldr	r3, [r7, #4]
 801a78a:	681b      	ldr	r3, [r3, #0]
 801a78c:	f022 0201 	bic.w	r2, r2, #1
 801a790:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801a792:	68fb      	ldr	r3, [r7, #12]
 801a794:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801a798:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	2200      	movs	r2, #0
 801a79e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a7a0:	687b      	ldr	r3, [r7, #4]
 801a7a2:	681b      	ldr	r3, [r3, #0]
 801a7a4:	68fa      	ldr	r2, [r7, #12]
 801a7a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	2220      	movs	r2, #32
 801a7ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a7b0:	687b      	ldr	r3, [r7, #4]
 801a7b2:	2200      	movs	r2, #0
 801a7b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 801a7b8:	2300      	movs	r3, #0
}
 801a7ba:	4618      	mov	r0, r3
 801a7bc:	3714      	adds	r7, #20
 801a7be:	46bd      	mov	sp, r7
 801a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7c4:	4770      	bx	lr

0801a7c6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801a7c6:	b580      	push	{r7, lr}
 801a7c8:	b084      	sub	sp, #16
 801a7ca:	af00      	add	r7, sp, #0
 801a7cc:	6078      	str	r0, [r7, #4]
 801a7ce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a7d0:	687b      	ldr	r3, [r7, #4]
 801a7d2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801a7d6:	2b01      	cmp	r3, #1
 801a7d8:	d101      	bne.n	801a7de <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801a7da:	2302      	movs	r3, #2
 801a7dc:	e02d      	b.n	801a83a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801a7de:	687b      	ldr	r3, [r7, #4]
 801a7e0:	2201      	movs	r2, #1
 801a7e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 801a7e6:	687b      	ldr	r3, [r7, #4]
 801a7e8:	2224      	movs	r2, #36	; 0x24
 801a7ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a7ee:	687b      	ldr	r3, [r7, #4]
 801a7f0:	681b      	ldr	r3, [r3, #0]
 801a7f2:	681b      	ldr	r3, [r3, #0]
 801a7f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a7f6:	687b      	ldr	r3, [r7, #4]
 801a7f8:	681b      	ldr	r3, [r3, #0]
 801a7fa:	681a      	ldr	r2, [r3, #0]
 801a7fc:	687b      	ldr	r3, [r7, #4]
 801a7fe:	681b      	ldr	r3, [r3, #0]
 801a800:	f022 0201 	bic.w	r2, r2, #1
 801a804:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801a806:	687b      	ldr	r3, [r7, #4]
 801a808:	681b      	ldr	r3, [r3, #0]
 801a80a:	689b      	ldr	r3, [r3, #8]
 801a80c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801a810:	687b      	ldr	r3, [r7, #4]
 801a812:	681b      	ldr	r3, [r3, #0]
 801a814:	683a      	ldr	r2, [r7, #0]
 801a816:	430a      	orrs	r2, r1
 801a818:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801a81a:	6878      	ldr	r0, [r7, #4]
 801a81c:	f000 f850 	bl	801a8c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a820:	687b      	ldr	r3, [r7, #4]
 801a822:	681b      	ldr	r3, [r3, #0]
 801a824:	68fa      	ldr	r2, [r7, #12]
 801a826:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a828:	687b      	ldr	r3, [r7, #4]
 801a82a:	2220      	movs	r2, #32
 801a82c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a830:	687b      	ldr	r3, [r7, #4]
 801a832:	2200      	movs	r2, #0
 801a834:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 801a838:	2300      	movs	r3, #0
}
 801a83a:	4618      	mov	r0, r3
 801a83c:	3710      	adds	r7, #16
 801a83e:	46bd      	mov	sp, r7
 801a840:	bd80      	pop	{r7, pc}

0801a842 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801a842:	b580      	push	{r7, lr}
 801a844:	b084      	sub	sp, #16
 801a846:	af00      	add	r7, sp, #0
 801a848:	6078      	str	r0, [r7, #4]
 801a84a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a84c:	687b      	ldr	r3, [r7, #4]
 801a84e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801a852:	2b01      	cmp	r3, #1
 801a854:	d101      	bne.n	801a85a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801a856:	2302      	movs	r3, #2
 801a858:	e02d      	b.n	801a8b6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801a85a:	687b      	ldr	r3, [r7, #4]
 801a85c:	2201      	movs	r2, #1
 801a85e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 801a862:	687b      	ldr	r3, [r7, #4]
 801a864:	2224      	movs	r2, #36	; 0x24
 801a866:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a86a:	687b      	ldr	r3, [r7, #4]
 801a86c:	681b      	ldr	r3, [r3, #0]
 801a86e:	681b      	ldr	r3, [r3, #0]
 801a870:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a872:	687b      	ldr	r3, [r7, #4]
 801a874:	681b      	ldr	r3, [r3, #0]
 801a876:	681a      	ldr	r2, [r3, #0]
 801a878:	687b      	ldr	r3, [r7, #4]
 801a87a:	681b      	ldr	r3, [r3, #0]
 801a87c:	f022 0201 	bic.w	r2, r2, #1
 801a880:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801a882:	687b      	ldr	r3, [r7, #4]
 801a884:	681b      	ldr	r3, [r3, #0]
 801a886:	689b      	ldr	r3, [r3, #8]
 801a888:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801a88c:	687b      	ldr	r3, [r7, #4]
 801a88e:	681b      	ldr	r3, [r3, #0]
 801a890:	683a      	ldr	r2, [r7, #0]
 801a892:	430a      	orrs	r2, r1
 801a894:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801a896:	6878      	ldr	r0, [r7, #4]
 801a898:	f000 f812 	bl	801a8c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a89c:	687b      	ldr	r3, [r7, #4]
 801a89e:	681b      	ldr	r3, [r3, #0]
 801a8a0:	68fa      	ldr	r2, [r7, #12]
 801a8a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a8a4:	687b      	ldr	r3, [r7, #4]
 801a8a6:	2220      	movs	r2, #32
 801a8a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	2200      	movs	r2, #0
 801a8b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 801a8b4:	2300      	movs	r3, #0
}
 801a8b6:	4618      	mov	r0, r3
 801a8b8:	3710      	adds	r7, #16
 801a8ba:	46bd      	mov	sp, r7
 801a8bc:	bd80      	pop	{r7, pc}
	...

0801a8c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801a8c0:	b480      	push	{r7}
 801a8c2:	b089      	sub	sp, #36	; 0x24
 801a8c4:	af00      	add	r7, sp, #0
 801a8c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 801a8c8:	4a2f      	ldr	r2, [pc, #188]	; (801a988 <UARTEx_SetNbDataToProcess+0xc8>)
 801a8ca:	f107 0314 	add.w	r3, r7, #20
 801a8ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a8d2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 801a8d6:	4a2d      	ldr	r2, [pc, #180]	; (801a98c <UARTEx_SetNbDataToProcess+0xcc>)
 801a8d8:	f107 030c 	add.w	r3, r7, #12
 801a8dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a8e0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801a8e4:	687b      	ldr	r3, [r7, #4]
 801a8e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801a8e8:	2b00      	cmp	r3, #0
 801a8ea:	d108      	bne.n	801a8fe <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 801a8ec:	687b      	ldr	r3, [r7, #4]
 801a8ee:	2201      	movs	r2, #1
 801a8f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801a8f4:	687b      	ldr	r3, [r7, #4]
 801a8f6:	2201      	movs	r2, #1
 801a8f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801a8fc:	e03d      	b.n	801a97a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801a8fe:	2308      	movs	r3, #8
 801a900:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801a902:	2308      	movs	r3, #8
 801a904:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801a906:	687b      	ldr	r3, [r7, #4]
 801a908:	681b      	ldr	r3, [r3, #0]
 801a90a:	689b      	ldr	r3, [r3, #8]
 801a90c:	0e5b      	lsrs	r3, r3, #25
 801a90e:	b2db      	uxtb	r3, r3
 801a910:	f003 0307 	and.w	r3, r3, #7
 801a914:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801a916:	687b      	ldr	r3, [r7, #4]
 801a918:	681b      	ldr	r3, [r3, #0]
 801a91a:	689b      	ldr	r3, [r3, #8]
 801a91c:	0f5b      	lsrs	r3, r3, #29
 801a91e:	b2db      	uxtb	r3, r3
 801a920:	f003 0307 	and.w	r3, r3, #7
 801a924:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 801a926:	7fbb      	ldrb	r3, [r7, #30]
 801a928:	7f3a      	ldrb	r2, [r7, #28]
 801a92a:	f107 0120 	add.w	r1, r7, #32
 801a92e:	440a      	add	r2, r1
 801a930:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 801a934:	fb02 f303 	mul.w	r3, r2, r3
 801a938:	7f3a      	ldrb	r2, [r7, #28]
 801a93a:	f107 0120 	add.w	r1, r7, #32
 801a93e:	440a      	add	r2, r1
 801a940:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 801a944:	fb93 f3f2 	sdiv	r3, r3, r2
 801a948:	b29a      	uxth	r2, r3
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 801a950:	7ffb      	ldrb	r3, [r7, #31]
 801a952:	7f7a      	ldrb	r2, [r7, #29]
 801a954:	f107 0120 	add.w	r1, r7, #32
 801a958:	440a      	add	r2, r1
 801a95a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 801a95e:	fb02 f303 	mul.w	r3, r2, r3
 801a962:	7f7a      	ldrb	r2, [r7, #29]
 801a964:	f107 0120 	add.w	r1, r7, #32
 801a968:	440a      	add	r2, r1
 801a96a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 801a96e:	fb93 f3f2 	sdiv	r3, r3, r2
 801a972:	b29a      	uxth	r2, r3
 801a974:	687b      	ldr	r3, [r7, #4]
 801a976:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801a97a:	bf00      	nop
 801a97c:	3724      	adds	r7, #36	; 0x24
 801a97e:	46bd      	mov	sp, r7
 801a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a984:	4770      	bx	lr
 801a986:	bf00      	nop
 801a988:	0801f344 	.word	0x0801f344
 801a98c:	0801f34c 	.word	0x0801f34c

0801a990 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801a990:	b084      	sub	sp, #16
 801a992:	b580      	push	{r7, lr}
 801a994:	b084      	sub	sp, #16
 801a996:	af00      	add	r7, sp, #0
 801a998:	6078      	str	r0, [r7, #4]
 801a99a:	f107 001c 	add.w	r0, r7, #28
 801a99e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801a9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9a4:	2b01      	cmp	r3, #1
 801a9a6:	d120      	bne.n	801a9ea <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801a9a8:	687b      	ldr	r3, [r7, #4]
 801a9aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a9ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801a9b0:	687b      	ldr	r3, [r7, #4]
 801a9b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801a9b4:	687b      	ldr	r3, [r7, #4]
 801a9b6:	68da      	ldr	r2, [r3, #12]
 801a9b8:	4b25      	ldr	r3, [pc, #148]	; (801aa50 <USB_CoreInit+0xc0>)
 801a9ba:	4013      	ands	r3, r2
 801a9bc:	687a      	ldr	r2, [r7, #4]
 801a9be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	68db      	ldr	r3, [r3, #12]
 801a9c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801a9c8:	687b      	ldr	r3, [r7, #4]
 801a9ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801a9cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a9ce:	2b01      	cmp	r3, #1
 801a9d0:	d105      	bne.n	801a9de <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801a9d2:	687b      	ldr	r3, [r7, #4]
 801a9d4:	68db      	ldr	r3, [r3, #12]
 801a9d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801a9da:	687b      	ldr	r3, [r7, #4]
 801a9dc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 801a9de:	6878      	ldr	r0, [r7, #4]
 801a9e0:	f001 fa66 	bl	801beb0 <USB_CoreReset>
 801a9e4:	4603      	mov	r3, r0
 801a9e6:	73fb      	strb	r3, [r7, #15]
 801a9e8:	e01a      	b.n	801aa20 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801a9ea:	687b      	ldr	r3, [r7, #4]
 801a9ec:	68db      	ldr	r3, [r3, #12]
 801a9ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801a9f2:	687b      	ldr	r3, [r7, #4]
 801a9f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 801a9f6:	6878      	ldr	r0, [r7, #4]
 801a9f8:	f001 fa5a 	bl	801beb0 <USB_CoreReset>
 801a9fc:	4603      	mov	r3, r0
 801a9fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801aa00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801aa02:	2b00      	cmp	r3, #0
 801aa04:	d106      	bne.n	801aa14 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801aa06:	687b      	ldr	r3, [r7, #4]
 801aa08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aa0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801aa0e:	687b      	ldr	r3, [r7, #4]
 801aa10:	639a      	str	r2, [r3, #56]	; 0x38
 801aa12:	e005      	b.n	801aa20 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aa18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801aa1c:	687b      	ldr	r3, [r7, #4]
 801aa1e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801aa20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa22:	2b01      	cmp	r3, #1
 801aa24:	d10b      	bne.n	801aa3e <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801aa26:	687b      	ldr	r3, [r7, #4]
 801aa28:	689b      	ldr	r3, [r3, #8]
 801aa2a:	f043 0206 	orr.w	r2, r3, #6
 801aa2e:	687b      	ldr	r3, [r7, #4]
 801aa30:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801aa32:	687b      	ldr	r3, [r7, #4]
 801aa34:	689b      	ldr	r3, [r3, #8]
 801aa36:	f043 0220 	orr.w	r2, r3, #32
 801aa3a:	687b      	ldr	r3, [r7, #4]
 801aa3c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801aa3e:	7bfb      	ldrb	r3, [r7, #15]
}
 801aa40:	4618      	mov	r0, r3
 801aa42:	3710      	adds	r7, #16
 801aa44:	46bd      	mov	sp, r7
 801aa46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801aa4a:	b004      	add	sp, #16
 801aa4c:	4770      	bx	lr
 801aa4e:	bf00      	nop
 801aa50:	ffbdffbf 	.word	0xffbdffbf

0801aa54 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801aa54:	b480      	push	{r7}
 801aa56:	b087      	sub	sp, #28
 801aa58:	af00      	add	r7, sp, #0
 801aa5a:	60f8      	str	r0, [r7, #12]
 801aa5c:	60b9      	str	r1, [r7, #8]
 801aa5e:	4613      	mov	r3, r2
 801aa60:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801aa62:	79fb      	ldrb	r3, [r7, #7]
 801aa64:	2b02      	cmp	r3, #2
 801aa66:	d165      	bne.n	801ab34 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801aa68:	68bb      	ldr	r3, [r7, #8]
 801aa6a:	4a41      	ldr	r2, [pc, #260]	; (801ab70 <USB_SetTurnaroundTime+0x11c>)
 801aa6c:	4293      	cmp	r3, r2
 801aa6e:	d906      	bls.n	801aa7e <USB_SetTurnaroundTime+0x2a>
 801aa70:	68bb      	ldr	r3, [r7, #8]
 801aa72:	4a40      	ldr	r2, [pc, #256]	; (801ab74 <USB_SetTurnaroundTime+0x120>)
 801aa74:	4293      	cmp	r3, r2
 801aa76:	d802      	bhi.n	801aa7e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801aa78:	230f      	movs	r3, #15
 801aa7a:	617b      	str	r3, [r7, #20]
 801aa7c:	e062      	b.n	801ab44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801aa7e:	68bb      	ldr	r3, [r7, #8]
 801aa80:	4a3c      	ldr	r2, [pc, #240]	; (801ab74 <USB_SetTurnaroundTime+0x120>)
 801aa82:	4293      	cmp	r3, r2
 801aa84:	d906      	bls.n	801aa94 <USB_SetTurnaroundTime+0x40>
 801aa86:	68bb      	ldr	r3, [r7, #8]
 801aa88:	4a3b      	ldr	r2, [pc, #236]	; (801ab78 <USB_SetTurnaroundTime+0x124>)
 801aa8a:	4293      	cmp	r3, r2
 801aa8c:	d802      	bhi.n	801aa94 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801aa8e:	230e      	movs	r3, #14
 801aa90:	617b      	str	r3, [r7, #20]
 801aa92:	e057      	b.n	801ab44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801aa94:	68bb      	ldr	r3, [r7, #8]
 801aa96:	4a38      	ldr	r2, [pc, #224]	; (801ab78 <USB_SetTurnaroundTime+0x124>)
 801aa98:	4293      	cmp	r3, r2
 801aa9a:	d906      	bls.n	801aaaa <USB_SetTurnaroundTime+0x56>
 801aa9c:	68bb      	ldr	r3, [r7, #8]
 801aa9e:	4a37      	ldr	r2, [pc, #220]	; (801ab7c <USB_SetTurnaroundTime+0x128>)
 801aaa0:	4293      	cmp	r3, r2
 801aaa2:	d802      	bhi.n	801aaaa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801aaa4:	230d      	movs	r3, #13
 801aaa6:	617b      	str	r3, [r7, #20]
 801aaa8:	e04c      	b.n	801ab44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801aaaa:	68bb      	ldr	r3, [r7, #8]
 801aaac:	4a33      	ldr	r2, [pc, #204]	; (801ab7c <USB_SetTurnaroundTime+0x128>)
 801aaae:	4293      	cmp	r3, r2
 801aab0:	d906      	bls.n	801aac0 <USB_SetTurnaroundTime+0x6c>
 801aab2:	68bb      	ldr	r3, [r7, #8]
 801aab4:	4a32      	ldr	r2, [pc, #200]	; (801ab80 <USB_SetTurnaroundTime+0x12c>)
 801aab6:	4293      	cmp	r3, r2
 801aab8:	d802      	bhi.n	801aac0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801aaba:	230c      	movs	r3, #12
 801aabc:	617b      	str	r3, [r7, #20]
 801aabe:	e041      	b.n	801ab44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801aac0:	68bb      	ldr	r3, [r7, #8]
 801aac2:	4a2f      	ldr	r2, [pc, #188]	; (801ab80 <USB_SetTurnaroundTime+0x12c>)
 801aac4:	4293      	cmp	r3, r2
 801aac6:	d906      	bls.n	801aad6 <USB_SetTurnaroundTime+0x82>
 801aac8:	68bb      	ldr	r3, [r7, #8]
 801aaca:	4a2e      	ldr	r2, [pc, #184]	; (801ab84 <USB_SetTurnaroundTime+0x130>)
 801aacc:	4293      	cmp	r3, r2
 801aace:	d802      	bhi.n	801aad6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 801aad0:	230b      	movs	r3, #11
 801aad2:	617b      	str	r3, [r7, #20]
 801aad4:	e036      	b.n	801ab44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801aad6:	68bb      	ldr	r3, [r7, #8]
 801aad8:	4a2a      	ldr	r2, [pc, #168]	; (801ab84 <USB_SetTurnaroundTime+0x130>)
 801aada:	4293      	cmp	r3, r2
 801aadc:	d906      	bls.n	801aaec <USB_SetTurnaroundTime+0x98>
 801aade:	68bb      	ldr	r3, [r7, #8]
 801aae0:	4a29      	ldr	r2, [pc, #164]	; (801ab88 <USB_SetTurnaroundTime+0x134>)
 801aae2:	4293      	cmp	r3, r2
 801aae4:	d802      	bhi.n	801aaec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801aae6:	230a      	movs	r3, #10
 801aae8:	617b      	str	r3, [r7, #20]
 801aaea:	e02b      	b.n	801ab44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801aaec:	68bb      	ldr	r3, [r7, #8]
 801aaee:	4a26      	ldr	r2, [pc, #152]	; (801ab88 <USB_SetTurnaroundTime+0x134>)
 801aaf0:	4293      	cmp	r3, r2
 801aaf2:	d906      	bls.n	801ab02 <USB_SetTurnaroundTime+0xae>
 801aaf4:	68bb      	ldr	r3, [r7, #8]
 801aaf6:	4a25      	ldr	r2, [pc, #148]	; (801ab8c <USB_SetTurnaroundTime+0x138>)
 801aaf8:	4293      	cmp	r3, r2
 801aafa:	d802      	bhi.n	801ab02 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801aafc:	2309      	movs	r3, #9
 801aafe:	617b      	str	r3, [r7, #20]
 801ab00:	e020      	b.n	801ab44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801ab02:	68bb      	ldr	r3, [r7, #8]
 801ab04:	4a21      	ldr	r2, [pc, #132]	; (801ab8c <USB_SetTurnaroundTime+0x138>)
 801ab06:	4293      	cmp	r3, r2
 801ab08:	d906      	bls.n	801ab18 <USB_SetTurnaroundTime+0xc4>
 801ab0a:	68bb      	ldr	r3, [r7, #8]
 801ab0c:	4a20      	ldr	r2, [pc, #128]	; (801ab90 <USB_SetTurnaroundTime+0x13c>)
 801ab0e:	4293      	cmp	r3, r2
 801ab10:	d802      	bhi.n	801ab18 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801ab12:	2308      	movs	r3, #8
 801ab14:	617b      	str	r3, [r7, #20]
 801ab16:	e015      	b.n	801ab44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801ab18:	68bb      	ldr	r3, [r7, #8]
 801ab1a:	4a1d      	ldr	r2, [pc, #116]	; (801ab90 <USB_SetTurnaroundTime+0x13c>)
 801ab1c:	4293      	cmp	r3, r2
 801ab1e:	d906      	bls.n	801ab2e <USB_SetTurnaroundTime+0xda>
 801ab20:	68bb      	ldr	r3, [r7, #8]
 801ab22:	4a1c      	ldr	r2, [pc, #112]	; (801ab94 <USB_SetTurnaroundTime+0x140>)
 801ab24:	4293      	cmp	r3, r2
 801ab26:	d802      	bhi.n	801ab2e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 801ab28:	2307      	movs	r3, #7
 801ab2a:	617b      	str	r3, [r7, #20]
 801ab2c:	e00a      	b.n	801ab44 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801ab2e:	2306      	movs	r3, #6
 801ab30:	617b      	str	r3, [r7, #20]
 801ab32:	e007      	b.n	801ab44 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801ab34:	79fb      	ldrb	r3, [r7, #7]
 801ab36:	2b00      	cmp	r3, #0
 801ab38:	d102      	bne.n	801ab40 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801ab3a:	2309      	movs	r3, #9
 801ab3c:	617b      	str	r3, [r7, #20]
 801ab3e:	e001      	b.n	801ab44 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801ab40:	2309      	movs	r3, #9
 801ab42:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801ab44:	68fb      	ldr	r3, [r7, #12]
 801ab46:	68db      	ldr	r3, [r3, #12]
 801ab48:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 801ab4c:	68fb      	ldr	r3, [r7, #12]
 801ab4e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801ab50:	68fb      	ldr	r3, [r7, #12]
 801ab52:	68da      	ldr	r2, [r3, #12]
 801ab54:	697b      	ldr	r3, [r7, #20]
 801ab56:	029b      	lsls	r3, r3, #10
 801ab58:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 801ab5c:	431a      	orrs	r2, r3
 801ab5e:	68fb      	ldr	r3, [r7, #12]
 801ab60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801ab62:	2300      	movs	r3, #0
}
 801ab64:	4618      	mov	r0, r3
 801ab66:	371c      	adds	r7, #28
 801ab68:	46bd      	mov	sp, r7
 801ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab6e:	4770      	bx	lr
 801ab70:	00d8acbf 	.word	0x00d8acbf
 801ab74:	00e4e1bf 	.word	0x00e4e1bf
 801ab78:	00f423ff 	.word	0x00f423ff
 801ab7c:	0106737f 	.word	0x0106737f
 801ab80:	011a499f 	.word	0x011a499f
 801ab84:	01312cff 	.word	0x01312cff
 801ab88:	014ca43f 	.word	0x014ca43f
 801ab8c:	016e35ff 	.word	0x016e35ff
 801ab90:	01a6ab1f 	.word	0x01a6ab1f
 801ab94:	01e847ff 	.word	0x01e847ff

0801ab98 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801ab98:	b480      	push	{r7}
 801ab9a:	b083      	sub	sp, #12
 801ab9c:	af00      	add	r7, sp, #0
 801ab9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801aba0:	687b      	ldr	r3, [r7, #4]
 801aba2:	689b      	ldr	r3, [r3, #8]
 801aba4:	f043 0201 	orr.w	r2, r3, #1
 801aba8:	687b      	ldr	r3, [r7, #4]
 801abaa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801abac:	2300      	movs	r3, #0
}
 801abae:	4618      	mov	r0, r3
 801abb0:	370c      	adds	r7, #12
 801abb2:	46bd      	mov	sp, r7
 801abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abb8:	4770      	bx	lr

0801abba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801abba:	b480      	push	{r7}
 801abbc:	b083      	sub	sp, #12
 801abbe:	af00      	add	r7, sp, #0
 801abc0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801abc2:	687b      	ldr	r3, [r7, #4]
 801abc4:	689b      	ldr	r3, [r3, #8]
 801abc6:	f023 0201 	bic.w	r2, r3, #1
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801abce:	2300      	movs	r3, #0
}
 801abd0:	4618      	mov	r0, r3
 801abd2:	370c      	adds	r7, #12
 801abd4:	46bd      	mov	sp, r7
 801abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abda:	4770      	bx	lr

0801abdc <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801abdc:	b580      	push	{r7, lr}
 801abde:	b082      	sub	sp, #8
 801abe0:	af00      	add	r7, sp, #0
 801abe2:	6078      	str	r0, [r7, #4]
 801abe4:	460b      	mov	r3, r1
 801abe6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801abe8:	687b      	ldr	r3, [r7, #4]
 801abea:	68db      	ldr	r3, [r3, #12]
 801abec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801abf0:	687b      	ldr	r3, [r7, #4]
 801abf2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801abf4:	78fb      	ldrb	r3, [r7, #3]
 801abf6:	2b01      	cmp	r3, #1
 801abf8:	d106      	bne.n	801ac08 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801abfa:	687b      	ldr	r3, [r7, #4]
 801abfc:	68db      	ldr	r3, [r3, #12]
 801abfe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801ac02:	687b      	ldr	r3, [r7, #4]
 801ac04:	60da      	str	r2, [r3, #12]
 801ac06:	e00b      	b.n	801ac20 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 801ac08:	78fb      	ldrb	r3, [r7, #3]
 801ac0a:	2b00      	cmp	r3, #0
 801ac0c:	d106      	bne.n	801ac1c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801ac0e:	687b      	ldr	r3, [r7, #4]
 801ac10:	68db      	ldr	r3, [r3, #12]
 801ac12:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801ac16:	687b      	ldr	r3, [r7, #4]
 801ac18:	60da      	str	r2, [r3, #12]
 801ac1a:	e001      	b.n	801ac20 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 801ac1c:	2301      	movs	r3, #1
 801ac1e:	e003      	b.n	801ac28 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 801ac20:	2032      	movs	r0, #50	; 0x32
 801ac22:	f7f7 fe7f 	bl	8012924 <HAL_Delay>

  return HAL_OK;
 801ac26:	2300      	movs	r3, #0
}
 801ac28:	4618      	mov	r0, r3
 801ac2a:	3708      	adds	r7, #8
 801ac2c:	46bd      	mov	sp, r7
 801ac2e:	bd80      	pop	{r7, pc}

0801ac30 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801ac30:	b084      	sub	sp, #16
 801ac32:	b580      	push	{r7, lr}
 801ac34:	b086      	sub	sp, #24
 801ac36:	af00      	add	r7, sp, #0
 801ac38:	6078      	str	r0, [r7, #4]
 801ac3a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801ac3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801ac42:	2300      	movs	r3, #0
 801ac44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ac46:	687b      	ldr	r3, [r7, #4]
 801ac48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801ac4a:	2300      	movs	r3, #0
 801ac4c:	613b      	str	r3, [r7, #16]
 801ac4e:	e009      	b.n	801ac64 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801ac50:	687a      	ldr	r2, [r7, #4]
 801ac52:	693b      	ldr	r3, [r7, #16]
 801ac54:	3340      	adds	r3, #64	; 0x40
 801ac56:	009b      	lsls	r3, r3, #2
 801ac58:	4413      	add	r3, r2
 801ac5a:	2200      	movs	r2, #0
 801ac5c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801ac5e:	693b      	ldr	r3, [r7, #16]
 801ac60:	3301      	adds	r3, #1
 801ac62:	613b      	str	r3, [r7, #16]
 801ac64:	693b      	ldr	r3, [r7, #16]
 801ac66:	2b0e      	cmp	r3, #14
 801ac68:	d9f2      	bls.n	801ac50 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801ac6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ac6c:	2b00      	cmp	r3, #0
 801ac6e:	d11c      	bne.n	801acaa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801ac70:	68fb      	ldr	r3, [r7, #12]
 801ac72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ac76:	685b      	ldr	r3, [r3, #4]
 801ac78:	68fa      	ldr	r2, [r7, #12]
 801ac7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801ac7e:	f043 0302 	orr.w	r3, r3, #2
 801ac82:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ac88:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801ac8c:	687b      	ldr	r3, [r7, #4]
 801ac8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801ac90:	687b      	ldr	r3, [r7, #4]
 801ac92:	681b      	ldr	r3, [r3, #0]
 801ac94:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801ac9c:	687b      	ldr	r3, [r7, #4]
 801ac9e:	681b      	ldr	r3, [r3, #0]
 801aca0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801aca4:	687b      	ldr	r3, [r7, #4]
 801aca6:	601a      	str	r2, [r3, #0]
 801aca8:	e005      	b.n	801acb6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801acaa:	687b      	ldr	r3, [r7, #4]
 801acac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801acae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801acb2:	687b      	ldr	r3, [r7, #4]
 801acb4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801acb6:	68fb      	ldr	r3, [r7, #12]
 801acb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801acbc:	461a      	mov	r2, r3
 801acbe:	2300      	movs	r3, #0
 801acc0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801acc2:	68fb      	ldr	r3, [r7, #12]
 801acc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801acc8:	4619      	mov	r1, r3
 801acca:	68fb      	ldr	r3, [r7, #12]
 801accc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801acd0:	461a      	mov	r2, r3
 801acd2:	680b      	ldr	r3, [r1, #0]
 801acd4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801acd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801acd8:	2b01      	cmp	r3, #1
 801acda:	d10c      	bne.n	801acf6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801acdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801acde:	2b00      	cmp	r3, #0
 801ace0:	d104      	bne.n	801acec <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801ace2:	2100      	movs	r1, #0
 801ace4:	6878      	ldr	r0, [r7, #4]
 801ace6:	f000 f949 	bl	801af7c <USB_SetDevSpeed>
 801acea:	e008      	b.n	801acfe <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801acec:	2101      	movs	r1, #1
 801acee:	6878      	ldr	r0, [r7, #4]
 801acf0:	f000 f944 	bl	801af7c <USB_SetDevSpeed>
 801acf4:	e003      	b.n	801acfe <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801acf6:	2103      	movs	r1, #3
 801acf8:	6878      	ldr	r0, [r7, #4]
 801acfa:	f000 f93f 	bl	801af7c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801acfe:	2110      	movs	r1, #16
 801ad00:	6878      	ldr	r0, [r7, #4]
 801ad02:	f000 f8f3 	bl	801aeec <USB_FlushTxFifo>
 801ad06:	4603      	mov	r3, r0
 801ad08:	2b00      	cmp	r3, #0
 801ad0a:	d001      	beq.n	801ad10 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 801ad0c:	2301      	movs	r3, #1
 801ad0e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801ad10:	6878      	ldr	r0, [r7, #4]
 801ad12:	f000 f911 	bl	801af38 <USB_FlushRxFifo>
 801ad16:	4603      	mov	r3, r0
 801ad18:	2b00      	cmp	r3, #0
 801ad1a:	d001      	beq.n	801ad20 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 801ad1c:	2301      	movs	r3, #1
 801ad1e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801ad20:	68fb      	ldr	r3, [r7, #12]
 801ad22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ad26:	461a      	mov	r2, r3
 801ad28:	2300      	movs	r3, #0
 801ad2a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801ad2c:	68fb      	ldr	r3, [r7, #12]
 801ad2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ad32:	461a      	mov	r2, r3
 801ad34:	2300      	movs	r3, #0
 801ad36:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801ad38:	68fb      	ldr	r3, [r7, #12]
 801ad3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ad3e:	461a      	mov	r2, r3
 801ad40:	2300      	movs	r3, #0
 801ad42:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801ad44:	2300      	movs	r3, #0
 801ad46:	613b      	str	r3, [r7, #16]
 801ad48:	e043      	b.n	801add2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801ad4a:	693b      	ldr	r3, [r7, #16]
 801ad4c:	015a      	lsls	r2, r3, #5
 801ad4e:	68fb      	ldr	r3, [r7, #12]
 801ad50:	4413      	add	r3, r2
 801ad52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ad56:	681b      	ldr	r3, [r3, #0]
 801ad58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801ad5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801ad60:	d118      	bne.n	801ad94 <USB_DevInit+0x164>
    {
      if (i == 0U)
 801ad62:	693b      	ldr	r3, [r7, #16]
 801ad64:	2b00      	cmp	r3, #0
 801ad66:	d10a      	bne.n	801ad7e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801ad68:	693b      	ldr	r3, [r7, #16]
 801ad6a:	015a      	lsls	r2, r3, #5
 801ad6c:	68fb      	ldr	r3, [r7, #12]
 801ad6e:	4413      	add	r3, r2
 801ad70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ad74:	461a      	mov	r2, r3
 801ad76:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801ad7a:	6013      	str	r3, [r2, #0]
 801ad7c:	e013      	b.n	801ada6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801ad7e:	693b      	ldr	r3, [r7, #16]
 801ad80:	015a      	lsls	r2, r3, #5
 801ad82:	68fb      	ldr	r3, [r7, #12]
 801ad84:	4413      	add	r3, r2
 801ad86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ad8a:	461a      	mov	r2, r3
 801ad8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801ad90:	6013      	str	r3, [r2, #0]
 801ad92:	e008      	b.n	801ada6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801ad94:	693b      	ldr	r3, [r7, #16]
 801ad96:	015a      	lsls	r2, r3, #5
 801ad98:	68fb      	ldr	r3, [r7, #12]
 801ad9a:	4413      	add	r3, r2
 801ad9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ada0:	461a      	mov	r2, r3
 801ada2:	2300      	movs	r3, #0
 801ada4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801ada6:	693b      	ldr	r3, [r7, #16]
 801ada8:	015a      	lsls	r2, r3, #5
 801adaa:	68fb      	ldr	r3, [r7, #12]
 801adac:	4413      	add	r3, r2
 801adae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801adb2:	461a      	mov	r2, r3
 801adb4:	2300      	movs	r3, #0
 801adb6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801adb8:	693b      	ldr	r3, [r7, #16]
 801adba:	015a      	lsls	r2, r3, #5
 801adbc:	68fb      	ldr	r3, [r7, #12]
 801adbe:	4413      	add	r3, r2
 801adc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801adc4:	461a      	mov	r2, r3
 801adc6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801adca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801adcc:	693b      	ldr	r3, [r7, #16]
 801adce:	3301      	adds	r3, #1
 801add0:	613b      	str	r3, [r7, #16]
 801add2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801add4:	693a      	ldr	r2, [r7, #16]
 801add6:	429a      	cmp	r2, r3
 801add8:	d3b7      	bcc.n	801ad4a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801adda:	2300      	movs	r3, #0
 801addc:	613b      	str	r3, [r7, #16]
 801adde:	e043      	b.n	801ae68 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801ade0:	693b      	ldr	r3, [r7, #16]
 801ade2:	015a      	lsls	r2, r3, #5
 801ade4:	68fb      	ldr	r3, [r7, #12]
 801ade6:	4413      	add	r3, r2
 801ade8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801adec:	681b      	ldr	r3, [r3, #0]
 801adee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801adf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801adf6:	d118      	bne.n	801ae2a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 801adf8:	693b      	ldr	r3, [r7, #16]
 801adfa:	2b00      	cmp	r3, #0
 801adfc:	d10a      	bne.n	801ae14 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801adfe:	693b      	ldr	r3, [r7, #16]
 801ae00:	015a      	lsls	r2, r3, #5
 801ae02:	68fb      	ldr	r3, [r7, #12]
 801ae04:	4413      	add	r3, r2
 801ae06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ae0a:	461a      	mov	r2, r3
 801ae0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801ae10:	6013      	str	r3, [r2, #0]
 801ae12:	e013      	b.n	801ae3c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801ae14:	693b      	ldr	r3, [r7, #16]
 801ae16:	015a      	lsls	r2, r3, #5
 801ae18:	68fb      	ldr	r3, [r7, #12]
 801ae1a:	4413      	add	r3, r2
 801ae1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ae20:	461a      	mov	r2, r3
 801ae22:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801ae26:	6013      	str	r3, [r2, #0]
 801ae28:	e008      	b.n	801ae3c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801ae2a:	693b      	ldr	r3, [r7, #16]
 801ae2c:	015a      	lsls	r2, r3, #5
 801ae2e:	68fb      	ldr	r3, [r7, #12]
 801ae30:	4413      	add	r3, r2
 801ae32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ae36:	461a      	mov	r2, r3
 801ae38:	2300      	movs	r3, #0
 801ae3a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801ae3c:	693b      	ldr	r3, [r7, #16]
 801ae3e:	015a      	lsls	r2, r3, #5
 801ae40:	68fb      	ldr	r3, [r7, #12]
 801ae42:	4413      	add	r3, r2
 801ae44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ae48:	461a      	mov	r2, r3
 801ae4a:	2300      	movs	r3, #0
 801ae4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801ae4e:	693b      	ldr	r3, [r7, #16]
 801ae50:	015a      	lsls	r2, r3, #5
 801ae52:	68fb      	ldr	r3, [r7, #12]
 801ae54:	4413      	add	r3, r2
 801ae56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ae5a:	461a      	mov	r2, r3
 801ae5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801ae60:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801ae62:	693b      	ldr	r3, [r7, #16]
 801ae64:	3301      	adds	r3, #1
 801ae66:	613b      	str	r3, [r7, #16]
 801ae68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae6a:	693a      	ldr	r2, [r7, #16]
 801ae6c:	429a      	cmp	r2, r3
 801ae6e:	d3b7      	bcc.n	801ade0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801ae70:	68fb      	ldr	r3, [r7, #12]
 801ae72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ae76:	691b      	ldr	r3, [r3, #16]
 801ae78:	68fa      	ldr	r2, [r7, #12]
 801ae7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801ae7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801ae82:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801ae84:	687b      	ldr	r3, [r7, #4]
 801ae86:	2200      	movs	r2, #0
 801ae88:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801ae8a:	687b      	ldr	r3, [r7, #4]
 801ae8c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801ae90:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801ae92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae94:	2b00      	cmp	r3, #0
 801ae96:	d105      	bne.n	801aea4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801ae98:	687b      	ldr	r3, [r7, #4]
 801ae9a:	699b      	ldr	r3, [r3, #24]
 801ae9c:	f043 0210 	orr.w	r2, r3, #16
 801aea0:	687b      	ldr	r3, [r7, #4]
 801aea2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801aea4:	687b      	ldr	r3, [r7, #4]
 801aea6:	699a      	ldr	r2, [r3, #24]
 801aea8:	4b0e      	ldr	r3, [pc, #56]	; (801aee4 <USB_DevInit+0x2b4>)
 801aeaa:	4313      	orrs	r3, r2
 801aeac:	687a      	ldr	r2, [r7, #4]
 801aeae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801aeb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801aeb2:	2b00      	cmp	r3, #0
 801aeb4:	d005      	beq.n	801aec2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801aeb6:	687b      	ldr	r3, [r7, #4]
 801aeb8:	699b      	ldr	r3, [r3, #24]
 801aeba:	f043 0208 	orr.w	r2, r3, #8
 801aebe:	687b      	ldr	r3, [r7, #4]
 801aec0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801aec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801aec4:	2b01      	cmp	r3, #1
 801aec6:	d105      	bne.n	801aed4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801aec8:	687b      	ldr	r3, [r7, #4]
 801aeca:	699a      	ldr	r2, [r3, #24]
 801aecc:	4b06      	ldr	r3, [pc, #24]	; (801aee8 <USB_DevInit+0x2b8>)
 801aece:	4313      	orrs	r3, r2
 801aed0:	687a      	ldr	r2, [r7, #4]
 801aed2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801aed4:	7dfb      	ldrb	r3, [r7, #23]
}
 801aed6:	4618      	mov	r0, r3
 801aed8:	3718      	adds	r7, #24
 801aeda:	46bd      	mov	sp, r7
 801aedc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801aee0:	b004      	add	sp, #16
 801aee2:	4770      	bx	lr
 801aee4:	803c3800 	.word	0x803c3800
 801aee8:	40000004 	.word	0x40000004

0801aeec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801aeec:	b480      	push	{r7}
 801aeee:	b085      	sub	sp, #20
 801aef0:	af00      	add	r7, sp, #0
 801aef2:	6078      	str	r0, [r7, #4]
 801aef4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 801aef6:	2300      	movs	r3, #0
 801aef8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801aefa:	683b      	ldr	r3, [r7, #0]
 801aefc:	019b      	lsls	r3, r3, #6
 801aefe:	f043 0220 	orr.w	r2, r3, #32
 801af02:	687b      	ldr	r3, [r7, #4]
 801af04:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801af06:	68fb      	ldr	r3, [r7, #12]
 801af08:	3301      	adds	r3, #1
 801af0a:	60fb      	str	r3, [r7, #12]
 801af0c:	68fb      	ldr	r3, [r7, #12]
 801af0e:	4a09      	ldr	r2, [pc, #36]	; (801af34 <USB_FlushTxFifo+0x48>)
 801af10:	4293      	cmp	r3, r2
 801af12:	d901      	bls.n	801af18 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 801af14:	2303      	movs	r3, #3
 801af16:	e006      	b.n	801af26 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801af18:	687b      	ldr	r3, [r7, #4]
 801af1a:	691b      	ldr	r3, [r3, #16]
 801af1c:	f003 0320 	and.w	r3, r3, #32
 801af20:	2b20      	cmp	r3, #32
 801af22:	d0f0      	beq.n	801af06 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 801af24:	2300      	movs	r3, #0
}
 801af26:	4618      	mov	r0, r3
 801af28:	3714      	adds	r7, #20
 801af2a:	46bd      	mov	sp, r7
 801af2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af30:	4770      	bx	lr
 801af32:	bf00      	nop
 801af34:	00030d40 	.word	0x00030d40

0801af38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801af38:	b480      	push	{r7}
 801af3a:	b085      	sub	sp, #20
 801af3c:	af00      	add	r7, sp, #0
 801af3e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 801af40:	2300      	movs	r3, #0
 801af42:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801af44:	687b      	ldr	r3, [r7, #4]
 801af46:	2210      	movs	r2, #16
 801af48:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801af4a:	68fb      	ldr	r3, [r7, #12]
 801af4c:	3301      	adds	r3, #1
 801af4e:	60fb      	str	r3, [r7, #12]
 801af50:	68fb      	ldr	r3, [r7, #12]
 801af52:	4a09      	ldr	r2, [pc, #36]	; (801af78 <USB_FlushRxFifo+0x40>)
 801af54:	4293      	cmp	r3, r2
 801af56:	d901      	bls.n	801af5c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 801af58:	2303      	movs	r3, #3
 801af5a:	e006      	b.n	801af6a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801af5c:	687b      	ldr	r3, [r7, #4]
 801af5e:	691b      	ldr	r3, [r3, #16]
 801af60:	f003 0310 	and.w	r3, r3, #16
 801af64:	2b10      	cmp	r3, #16
 801af66:	d0f0      	beq.n	801af4a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 801af68:	2300      	movs	r3, #0
}
 801af6a:	4618      	mov	r0, r3
 801af6c:	3714      	adds	r7, #20
 801af6e:	46bd      	mov	sp, r7
 801af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af74:	4770      	bx	lr
 801af76:	bf00      	nop
 801af78:	00030d40 	.word	0x00030d40

0801af7c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801af7c:	b480      	push	{r7}
 801af7e:	b085      	sub	sp, #20
 801af80:	af00      	add	r7, sp, #0
 801af82:	6078      	str	r0, [r7, #4]
 801af84:	460b      	mov	r3, r1
 801af86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801af88:	687b      	ldr	r3, [r7, #4]
 801af8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801af8c:	68fb      	ldr	r3, [r7, #12]
 801af8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801af92:	681a      	ldr	r2, [r3, #0]
 801af94:	78fb      	ldrb	r3, [r7, #3]
 801af96:	68f9      	ldr	r1, [r7, #12]
 801af98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801af9c:	4313      	orrs	r3, r2
 801af9e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801afa0:	2300      	movs	r3, #0
}
 801afa2:	4618      	mov	r0, r3
 801afa4:	3714      	adds	r7, #20
 801afa6:	46bd      	mov	sp, r7
 801afa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afac:	4770      	bx	lr

0801afae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801afae:	b480      	push	{r7}
 801afb0:	b087      	sub	sp, #28
 801afb2:	af00      	add	r7, sp, #0
 801afb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801afb6:	687b      	ldr	r3, [r7, #4]
 801afb8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801afba:	693b      	ldr	r3, [r7, #16]
 801afbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801afc0:	689b      	ldr	r3, [r3, #8]
 801afc2:	f003 0306 	and.w	r3, r3, #6
 801afc6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801afc8:	68fb      	ldr	r3, [r7, #12]
 801afca:	2b00      	cmp	r3, #0
 801afcc:	d102      	bne.n	801afd4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801afce:	2300      	movs	r3, #0
 801afd0:	75fb      	strb	r3, [r7, #23]
 801afd2:	e00a      	b.n	801afea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801afd4:	68fb      	ldr	r3, [r7, #12]
 801afd6:	2b02      	cmp	r3, #2
 801afd8:	d002      	beq.n	801afe0 <USB_GetDevSpeed+0x32>
 801afda:	68fb      	ldr	r3, [r7, #12]
 801afdc:	2b06      	cmp	r3, #6
 801afde:	d102      	bne.n	801afe6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801afe0:	2302      	movs	r3, #2
 801afe2:	75fb      	strb	r3, [r7, #23]
 801afe4:	e001      	b.n	801afea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801afe6:	230f      	movs	r3, #15
 801afe8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801afea:	7dfb      	ldrb	r3, [r7, #23]
}
 801afec:	4618      	mov	r0, r3
 801afee:	371c      	adds	r7, #28
 801aff0:	46bd      	mov	sp, r7
 801aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aff6:	4770      	bx	lr

0801aff8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801aff8:	b480      	push	{r7}
 801affa:	b085      	sub	sp, #20
 801affc:	af00      	add	r7, sp, #0
 801affe:	6078      	str	r0, [r7, #4]
 801b000:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b002:	687b      	ldr	r3, [r7, #4]
 801b004:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801b006:	683b      	ldr	r3, [r7, #0]
 801b008:	781b      	ldrb	r3, [r3, #0]
 801b00a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801b00c:	683b      	ldr	r3, [r7, #0]
 801b00e:	785b      	ldrb	r3, [r3, #1]
 801b010:	2b01      	cmp	r3, #1
 801b012:	d139      	bne.n	801b088 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801b014:	68fb      	ldr	r3, [r7, #12]
 801b016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b01a:	69da      	ldr	r2, [r3, #28]
 801b01c:	683b      	ldr	r3, [r7, #0]
 801b01e:	781b      	ldrb	r3, [r3, #0]
 801b020:	f003 030f 	and.w	r3, r3, #15
 801b024:	2101      	movs	r1, #1
 801b026:	fa01 f303 	lsl.w	r3, r1, r3
 801b02a:	b29b      	uxth	r3, r3
 801b02c:	68f9      	ldr	r1, [r7, #12]
 801b02e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b032:	4313      	orrs	r3, r2
 801b034:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801b036:	68bb      	ldr	r3, [r7, #8]
 801b038:	015a      	lsls	r2, r3, #5
 801b03a:	68fb      	ldr	r3, [r7, #12]
 801b03c:	4413      	add	r3, r2
 801b03e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b042:	681b      	ldr	r3, [r3, #0]
 801b044:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801b048:	2b00      	cmp	r3, #0
 801b04a:	d153      	bne.n	801b0f4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801b04c:	68bb      	ldr	r3, [r7, #8]
 801b04e:	015a      	lsls	r2, r3, #5
 801b050:	68fb      	ldr	r3, [r7, #12]
 801b052:	4413      	add	r3, r2
 801b054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b058:	681a      	ldr	r2, [r3, #0]
 801b05a:	683b      	ldr	r3, [r7, #0]
 801b05c:	689b      	ldr	r3, [r3, #8]
 801b05e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801b062:	683b      	ldr	r3, [r7, #0]
 801b064:	78db      	ldrb	r3, [r3, #3]
 801b066:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801b068:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801b06a:	68bb      	ldr	r3, [r7, #8]
 801b06c:	059b      	lsls	r3, r3, #22
 801b06e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801b070:	431a      	orrs	r2, r3
 801b072:	68bb      	ldr	r3, [r7, #8]
 801b074:	0159      	lsls	r1, r3, #5
 801b076:	68fb      	ldr	r3, [r7, #12]
 801b078:	440b      	add	r3, r1
 801b07a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b07e:	4619      	mov	r1, r3
 801b080:	4b20      	ldr	r3, [pc, #128]	; (801b104 <USB_ActivateEndpoint+0x10c>)
 801b082:	4313      	orrs	r3, r2
 801b084:	600b      	str	r3, [r1, #0]
 801b086:	e035      	b.n	801b0f4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801b088:	68fb      	ldr	r3, [r7, #12]
 801b08a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b08e:	69da      	ldr	r2, [r3, #28]
 801b090:	683b      	ldr	r3, [r7, #0]
 801b092:	781b      	ldrb	r3, [r3, #0]
 801b094:	f003 030f 	and.w	r3, r3, #15
 801b098:	2101      	movs	r1, #1
 801b09a:	fa01 f303 	lsl.w	r3, r1, r3
 801b09e:	041b      	lsls	r3, r3, #16
 801b0a0:	68f9      	ldr	r1, [r7, #12]
 801b0a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b0a6:	4313      	orrs	r3, r2
 801b0a8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801b0aa:	68bb      	ldr	r3, [r7, #8]
 801b0ac:	015a      	lsls	r2, r3, #5
 801b0ae:	68fb      	ldr	r3, [r7, #12]
 801b0b0:	4413      	add	r3, r2
 801b0b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b0b6:	681b      	ldr	r3, [r3, #0]
 801b0b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801b0bc:	2b00      	cmp	r3, #0
 801b0be:	d119      	bne.n	801b0f4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801b0c0:	68bb      	ldr	r3, [r7, #8]
 801b0c2:	015a      	lsls	r2, r3, #5
 801b0c4:	68fb      	ldr	r3, [r7, #12]
 801b0c6:	4413      	add	r3, r2
 801b0c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b0cc:	681a      	ldr	r2, [r3, #0]
 801b0ce:	683b      	ldr	r3, [r7, #0]
 801b0d0:	689b      	ldr	r3, [r3, #8]
 801b0d2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801b0d6:	683b      	ldr	r3, [r7, #0]
 801b0d8:	78db      	ldrb	r3, [r3, #3]
 801b0da:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801b0dc:	430b      	orrs	r3, r1
 801b0de:	431a      	orrs	r2, r3
 801b0e0:	68bb      	ldr	r3, [r7, #8]
 801b0e2:	0159      	lsls	r1, r3, #5
 801b0e4:	68fb      	ldr	r3, [r7, #12]
 801b0e6:	440b      	add	r3, r1
 801b0e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b0ec:	4619      	mov	r1, r3
 801b0ee:	4b05      	ldr	r3, [pc, #20]	; (801b104 <USB_ActivateEndpoint+0x10c>)
 801b0f0:	4313      	orrs	r3, r2
 801b0f2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801b0f4:	2300      	movs	r3, #0
}
 801b0f6:	4618      	mov	r0, r3
 801b0f8:	3714      	adds	r7, #20
 801b0fa:	46bd      	mov	sp, r7
 801b0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b100:	4770      	bx	lr
 801b102:	bf00      	nop
 801b104:	10008000 	.word	0x10008000

0801b108 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801b108:	b480      	push	{r7}
 801b10a:	b085      	sub	sp, #20
 801b10c:	af00      	add	r7, sp, #0
 801b10e:	6078      	str	r0, [r7, #4]
 801b110:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b112:	687b      	ldr	r3, [r7, #4]
 801b114:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801b116:	683b      	ldr	r3, [r7, #0]
 801b118:	781b      	ldrb	r3, [r3, #0]
 801b11a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801b11c:	683b      	ldr	r3, [r7, #0]
 801b11e:	785b      	ldrb	r3, [r3, #1]
 801b120:	2b01      	cmp	r3, #1
 801b122:	d135      	bne.n	801b190 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801b124:	68fb      	ldr	r3, [r7, #12]
 801b126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b12a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801b12c:	683b      	ldr	r3, [r7, #0]
 801b12e:	781b      	ldrb	r3, [r3, #0]
 801b130:	f003 030f 	and.w	r3, r3, #15
 801b134:	2101      	movs	r1, #1
 801b136:	fa01 f303 	lsl.w	r3, r1, r3
 801b13a:	b29b      	uxth	r3, r3
 801b13c:	43db      	mvns	r3, r3
 801b13e:	68f9      	ldr	r1, [r7, #12]
 801b140:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b144:	4013      	ands	r3, r2
 801b146:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801b148:	68fb      	ldr	r3, [r7, #12]
 801b14a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b14e:	69da      	ldr	r2, [r3, #28]
 801b150:	683b      	ldr	r3, [r7, #0]
 801b152:	781b      	ldrb	r3, [r3, #0]
 801b154:	f003 030f 	and.w	r3, r3, #15
 801b158:	2101      	movs	r1, #1
 801b15a:	fa01 f303 	lsl.w	r3, r1, r3
 801b15e:	b29b      	uxth	r3, r3
 801b160:	43db      	mvns	r3, r3
 801b162:	68f9      	ldr	r1, [r7, #12]
 801b164:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b168:	4013      	ands	r3, r2
 801b16a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801b16c:	68bb      	ldr	r3, [r7, #8]
 801b16e:	015a      	lsls	r2, r3, #5
 801b170:	68fb      	ldr	r3, [r7, #12]
 801b172:	4413      	add	r3, r2
 801b174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b178:	681a      	ldr	r2, [r3, #0]
 801b17a:	68bb      	ldr	r3, [r7, #8]
 801b17c:	0159      	lsls	r1, r3, #5
 801b17e:	68fb      	ldr	r3, [r7, #12]
 801b180:	440b      	add	r3, r1
 801b182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b186:	4619      	mov	r1, r3
 801b188:	4b1f      	ldr	r3, [pc, #124]	; (801b208 <USB_DeactivateEndpoint+0x100>)
 801b18a:	4013      	ands	r3, r2
 801b18c:	600b      	str	r3, [r1, #0]
 801b18e:	e034      	b.n	801b1fa <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801b190:	68fb      	ldr	r3, [r7, #12]
 801b192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b196:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801b198:	683b      	ldr	r3, [r7, #0]
 801b19a:	781b      	ldrb	r3, [r3, #0]
 801b19c:	f003 030f 	and.w	r3, r3, #15
 801b1a0:	2101      	movs	r1, #1
 801b1a2:	fa01 f303 	lsl.w	r3, r1, r3
 801b1a6:	041b      	lsls	r3, r3, #16
 801b1a8:	43db      	mvns	r3, r3
 801b1aa:	68f9      	ldr	r1, [r7, #12]
 801b1ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b1b0:	4013      	ands	r3, r2
 801b1b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801b1b4:	68fb      	ldr	r3, [r7, #12]
 801b1b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b1ba:	69da      	ldr	r2, [r3, #28]
 801b1bc:	683b      	ldr	r3, [r7, #0]
 801b1be:	781b      	ldrb	r3, [r3, #0]
 801b1c0:	f003 030f 	and.w	r3, r3, #15
 801b1c4:	2101      	movs	r1, #1
 801b1c6:	fa01 f303 	lsl.w	r3, r1, r3
 801b1ca:	041b      	lsls	r3, r3, #16
 801b1cc:	43db      	mvns	r3, r3
 801b1ce:	68f9      	ldr	r1, [r7, #12]
 801b1d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b1d4:	4013      	ands	r3, r2
 801b1d6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801b1d8:	68bb      	ldr	r3, [r7, #8]
 801b1da:	015a      	lsls	r2, r3, #5
 801b1dc:	68fb      	ldr	r3, [r7, #12]
 801b1de:	4413      	add	r3, r2
 801b1e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b1e4:	681a      	ldr	r2, [r3, #0]
 801b1e6:	68bb      	ldr	r3, [r7, #8]
 801b1e8:	0159      	lsls	r1, r3, #5
 801b1ea:	68fb      	ldr	r3, [r7, #12]
 801b1ec:	440b      	add	r3, r1
 801b1ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b1f2:	4619      	mov	r1, r3
 801b1f4:	4b05      	ldr	r3, [pc, #20]	; (801b20c <USB_DeactivateEndpoint+0x104>)
 801b1f6:	4013      	ands	r3, r2
 801b1f8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801b1fa:	2300      	movs	r3, #0
}
 801b1fc:	4618      	mov	r0, r3
 801b1fe:	3714      	adds	r7, #20
 801b200:	46bd      	mov	sp, r7
 801b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b206:	4770      	bx	lr
 801b208:	ec337800 	.word	0xec337800
 801b20c:	eff37800 	.word	0xeff37800

0801b210 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801b210:	b580      	push	{r7, lr}
 801b212:	b08a      	sub	sp, #40	; 0x28
 801b214:	af02      	add	r7, sp, #8
 801b216:	60f8      	str	r0, [r7, #12]
 801b218:	60b9      	str	r1, [r7, #8]
 801b21a:	4613      	mov	r3, r2
 801b21c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b21e:	68fb      	ldr	r3, [r7, #12]
 801b220:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801b222:	68bb      	ldr	r3, [r7, #8]
 801b224:	781b      	ldrb	r3, [r3, #0]
 801b226:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801b228:	68bb      	ldr	r3, [r7, #8]
 801b22a:	785b      	ldrb	r3, [r3, #1]
 801b22c:	2b01      	cmp	r3, #1
 801b22e:	f040 8163 	bne.w	801b4f8 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801b232:	68bb      	ldr	r3, [r7, #8]
 801b234:	695b      	ldr	r3, [r3, #20]
 801b236:	2b00      	cmp	r3, #0
 801b238:	d132      	bne.n	801b2a0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801b23a:	69bb      	ldr	r3, [r7, #24]
 801b23c:	015a      	lsls	r2, r3, #5
 801b23e:	69fb      	ldr	r3, [r7, #28]
 801b240:	4413      	add	r3, r2
 801b242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b246:	691a      	ldr	r2, [r3, #16]
 801b248:	69bb      	ldr	r3, [r7, #24]
 801b24a:	0159      	lsls	r1, r3, #5
 801b24c:	69fb      	ldr	r3, [r7, #28]
 801b24e:	440b      	add	r3, r1
 801b250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b254:	4619      	mov	r1, r3
 801b256:	4ba5      	ldr	r3, [pc, #660]	; (801b4ec <USB_EPStartXfer+0x2dc>)
 801b258:	4013      	ands	r3, r2
 801b25a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801b25c:	69bb      	ldr	r3, [r7, #24]
 801b25e:	015a      	lsls	r2, r3, #5
 801b260:	69fb      	ldr	r3, [r7, #28]
 801b262:	4413      	add	r3, r2
 801b264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b268:	691b      	ldr	r3, [r3, #16]
 801b26a:	69ba      	ldr	r2, [r7, #24]
 801b26c:	0151      	lsls	r1, r2, #5
 801b26e:	69fa      	ldr	r2, [r7, #28]
 801b270:	440a      	add	r2, r1
 801b272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b276:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801b27a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801b27c:	69bb      	ldr	r3, [r7, #24]
 801b27e:	015a      	lsls	r2, r3, #5
 801b280:	69fb      	ldr	r3, [r7, #28]
 801b282:	4413      	add	r3, r2
 801b284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b288:	691a      	ldr	r2, [r3, #16]
 801b28a:	69bb      	ldr	r3, [r7, #24]
 801b28c:	0159      	lsls	r1, r3, #5
 801b28e:	69fb      	ldr	r3, [r7, #28]
 801b290:	440b      	add	r3, r1
 801b292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b296:	4619      	mov	r1, r3
 801b298:	4b95      	ldr	r3, [pc, #596]	; (801b4f0 <USB_EPStartXfer+0x2e0>)
 801b29a:	4013      	ands	r3, r2
 801b29c:	610b      	str	r3, [r1, #16]
 801b29e:	e074      	b.n	801b38a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801b2a0:	69bb      	ldr	r3, [r7, #24]
 801b2a2:	015a      	lsls	r2, r3, #5
 801b2a4:	69fb      	ldr	r3, [r7, #28]
 801b2a6:	4413      	add	r3, r2
 801b2a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b2ac:	691a      	ldr	r2, [r3, #16]
 801b2ae:	69bb      	ldr	r3, [r7, #24]
 801b2b0:	0159      	lsls	r1, r3, #5
 801b2b2:	69fb      	ldr	r3, [r7, #28]
 801b2b4:	440b      	add	r3, r1
 801b2b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b2ba:	4619      	mov	r1, r3
 801b2bc:	4b8c      	ldr	r3, [pc, #560]	; (801b4f0 <USB_EPStartXfer+0x2e0>)
 801b2be:	4013      	ands	r3, r2
 801b2c0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801b2c2:	69bb      	ldr	r3, [r7, #24]
 801b2c4:	015a      	lsls	r2, r3, #5
 801b2c6:	69fb      	ldr	r3, [r7, #28]
 801b2c8:	4413      	add	r3, r2
 801b2ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b2ce:	691a      	ldr	r2, [r3, #16]
 801b2d0:	69bb      	ldr	r3, [r7, #24]
 801b2d2:	0159      	lsls	r1, r3, #5
 801b2d4:	69fb      	ldr	r3, [r7, #28]
 801b2d6:	440b      	add	r3, r1
 801b2d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b2dc:	4619      	mov	r1, r3
 801b2de:	4b83      	ldr	r3, [pc, #524]	; (801b4ec <USB_EPStartXfer+0x2dc>)
 801b2e0:	4013      	ands	r3, r2
 801b2e2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801b2e4:	69bb      	ldr	r3, [r7, #24]
 801b2e6:	015a      	lsls	r2, r3, #5
 801b2e8:	69fb      	ldr	r3, [r7, #28]
 801b2ea:	4413      	add	r3, r2
 801b2ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b2f0:	691a      	ldr	r2, [r3, #16]
 801b2f2:	68bb      	ldr	r3, [r7, #8]
 801b2f4:	6959      	ldr	r1, [r3, #20]
 801b2f6:	68bb      	ldr	r3, [r7, #8]
 801b2f8:	689b      	ldr	r3, [r3, #8]
 801b2fa:	440b      	add	r3, r1
 801b2fc:	1e59      	subs	r1, r3, #1
 801b2fe:	68bb      	ldr	r3, [r7, #8]
 801b300:	689b      	ldr	r3, [r3, #8]
 801b302:	fbb1 f3f3 	udiv	r3, r1, r3
 801b306:	04d9      	lsls	r1, r3, #19
 801b308:	4b7a      	ldr	r3, [pc, #488]	; (801b4f4 <USB_EPStartXfer+0x2e4>)
 801b30a:	400b      	ands	r3, r1
 801b30c:	69b9      	ldr	r1, [r7, #24]
 801b30e:	0148      	lsls	r0, r1, #5
 801b310:	69f9      	ldr	r1, [r7, #28]
 801b312:	4401      	add	r1, r0
 801b314:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801b318:	4313      	orrs	r3, r2
 801b31a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801b31c:	69bb      	ldr	r3, [r7, #24]
 801b31e:	015a      	lsls	r2, r3, #5
 801b320:	69fb      	ldr	r3, [r7, #28]
 801b322:	4413      	add	r3, r2
 801b324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b328:	691a      	ldr	r2, [r3, #16]
 801b32a:	68bb      	ldr	r3, [r7, #8]
 801b32c:	695b      	ldr	r3, [r3, #20]
 801b32e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801b332:	69b9      	ldr	r1, [r7, #24]
 801b334:	0148      	lsls	r0, r1, #5
 801b336:	69f9      	ldr	r1, [r7, #28]
 801b338:	4401      	add	r1, r0
 801b33a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801b33e:	4313      	orrs	r3, r2
 801b340:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801b342:	68bb      	ldr	r3, [r7, #8]
 801b344:	78db      	ldrb	r3, [r3, #3]
 801b346:	2b01      	cmp	r3, #1
 801b348:	d11f      	bne.n	801b38a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801b34a:	69bb      	ldr	r3, [r7, #24]
 801b34c:	015a      	lsls	r2, r3, #5
 801b34e:	69fb      	ldr	r3, [r7, #28]
 801b350:	4413      	add	r3, r2
 801b352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b356:	691b      	ldr	r3, [r3, #16]
 801b358:	69ba      	ldr	r2, [r7, #24]
 801b35a:	0151      	lsls	r1, r2, #5
 801b35c:	69fa      	ldr	r2, [r7, #28]
 801b35e:	440a      	add	r2, r1
 801b360:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b364:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801b368:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801b36a:	69bb      	ldr	r3, [r7, #24]
 801b36c:	015a      	lsls	r2, r3, #5
 801b36e:	69fb      	ldr	r3, [r7, #28]
 801b370:	4413      	add	r3, r2
 801b372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b376:	691b      	ldr	r3, [r3, #16]
 801b378:	69ba      	ldr	r2, [r7, #24]
 801b37a:	0151      	lsls	r1, r2, #5
 801b37c:	69fa      	ldr	r2, [r7, #28]
 801b37e:	440a      	add	r2, r1
 801b380:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b384:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801b388:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801b38a:	79fb      	ldrb	r3, [r7, #7]
 801b38c:	2b01      	cmp	r3, #1
 801b38e:	d14b      	bne.n	801b428 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801b390:	68bb      	ldr	r3, [r7, #8]
 801b392:	691b      	ldr	r3, [r3, #16]
 801b394:	2b00      	cmp	r3, #0
 801b396:	d009      	beq.n	801b3ac <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801b398:	69bb      	ldr	r3, [r7, #24]
 801b39a:	015a      	lsls	r2, r3, #5
 801b39c:	69fb      	ldr	r3, [r7, #28]
 801b39e:	4413      	add	r3, r2
 801b3a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b3a4:	461a      	mov	r2, r3
 801b3a6:	68bb      	ldr	r3, [r7, #8]
 801b3a8:	691b      	ldr	r3, [r3, #16]
 801b3aa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801b3ac:	68bb      	ldr	r3, [r7, #8]
 801b3ae:	78db      	ldrb	r3, [r3, #3]
 801b3b0:	2b01      	cmp	r3, #1
 801b3b2:	d128      	bne.n	801b406 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801b3b4:	69fb      	ldr	r3, [r7, #28]
 801b3b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b3ba:	689b      	ldr	r3, [r3, #8]
 801b3bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b3c0:	2b00      	cmp	r3, #0
 801b3c2:	d110      	bne.n	801b3e6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801b3c4:	69bb      	ldr	r3, [r7, #24]
 801b3c6:	015a      	lsls	r2, r3, #5
 801b3c8:	69fb      	ldr	r3, [r7, #28]
 801b3ca:	4413      	add	r3, r2
 801b3cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b3d0:	681b      	ldr	r3, [r3, #0]
 801b3d2:	69ba      	ldr	r2, [r7, #24]
 801b3d4:	0151      	lsls	r1, r2, #5
 801b3d6:	69fa      	ldr	r2, [r7, #28]
 801b3d8:	440a      	add	r2, r1
 801b3da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b3de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801b3e2:	6013      	str	r3, [r2, #0]
 801b3e4:	e00f      	b.n	801b406 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801b3e6:	69bb      	ldr	r3, [r7, #24]
 801b3e8:	015a      	lsls	r2, r3, #5
 801b3ea:	69fb      	ldr	r3, [r7, #28]
 801b3ec:	4413      	add	r3, r2
 801b3ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b3f2:	681b      	ldr	r3, [r3, #0]
 801b3f4:	69ba      	ldr	r2, [r7, #24]
 801b3f6:	0151      	lsls	r1, r2, #5
 801b3f8:	69fa      	ldr	r2, [r7, #28]
 801b3fa:	440a      	add	r2, r1
 801b3fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b404:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801b406:	69bb      	ldr	r3, [r7, #24]
 801b408:	015a      	lsls	r2, r3, #5
 801b40a:	69fb      	ldr	r3, [r7, #28]
 801b40c:	4413      	add	r3, r2
 801b40e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b412:	681b      	ldr	r3, [r3, #0]
 801b414:	69ba      	ldr	r2, [r7, #24]
 801b416:	0151      	lsls	r1, r2, #5
 801b418:	69fa      	ldr	r2, [r7, #28]
 801b41a:	440a      	add	r2, r1
 801b41c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b420:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801b424:	6013      	str	r3, [r2, #0]
 801b426:	e133      	b.n	801b690 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801b428:	69bb      	ldr	r3, [r7, #24]
 801b42a:	015a      	lsls	r2, r3, #5
 801b42c:	69fb      	ldr	r3, [r7, #28]
 801b42e:	4413      	add	r3, r2
 801b430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b434:	681b      	ldr	r3, [r3, #0]
 801b436:	69ba      	ldr	r2, [r7, #24]
 801b438:	0151      	lsls	r1, r2, #5
 801b43a:	69fa      	ldr	r2, [r7, #28]
 801b43c:	440a      	add	r2, r1
 801b43e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b442:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801b446:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801b448:	68bb      	ldr	r3, [r7, #8]
 801b44a:	78db      	ldrb	r3, [r3, #3]
 801b44c:	2b01      	cmp	r3, #1
 801b44e:	d015      	beq.n	801b47c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801b450:	68bb      	ldr	r3, [r7, #8]
 801b452:	695b      	ldr	r3, [r3, #20]
 801b454:	2b00      	cmp	r3, #0
 801b456:	f000 811b 	beq.w	801b690 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801b45a:	69fb      	ldr	r3, [r7, #28]
 801b45c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b460:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801b462:	68bb      	ldr	r3, [r7, #8]
 801b464:	781b      	ldrb	r3, [r3, #0]
 801b466:	f003 030f 	and.w	r3, r3, #15
 801b46a:	2101      	movs	r1, #1
 801b46c:	fa01 f303 	lsl.w	r3, r1, r3
 801b470:	69f9      	ldr	r1, [r7, #28]
 801b472:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b476:	4313      	orrs	r3, r2
 801b478:	634b      	str	r3, [r1, #52]	; 0x34
 801b47a:	e109      	b.n	801b690 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801b47c:	69fb      	ldr	r3, [r7, #28]
 801b47e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b482:	689b      	ldr	r3, [r3, #8]
 801b484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b488:	2b00      	cmp	r3, #0
 801b48a:	d110      	bne.n	801b4ae <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801b48c:	69bb      	ldr	r3, [r7, #24]
 801b48e:	015a      	lsls	r2, r3, #5
 801b490:	69fb      	ldr	r3, [r7, #28]
 801b492:	4413      	add	r3, r2
 801b494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b498:	681b      	ldr	r3, [r3, #0]
 801b49a:	69ba      	ldr	r2, [r7, #24]
 801b49c:	0151      	lsls	r1, r2, #5
 801b49e:	69fa      	ldr	r2, [r7, #28]
 801b4a0:	440a      	add	r2, r1
 801b4a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b4a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801b4aa:	6013      	str	r3, [r2, #0]
 801b4ac:	e00f      	b.n	801b4ce <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801b4ae:	69bb      	ldr	r3, [r7, #24]
 801b4b0:	015a      	lsls	r2, r3, #5
 801b4b2:	69fb      	ldr	r3, [r7, #28]
 801b4b4:	4413      	add	r3, r2
 801b4b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b4ba:	681b      	ldr	r3, [r3, #0]
 801b4bc:	69ba      	ldr	r2, [r7, #24]
 801b4be:	0151      	lsls	r1, r2, #5
 801b4c0:	69fa      	ldr	r2, [r7, #28]
 801b4c2:	440a      	add	r2, r1
 801b4c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b4c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b4cc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801b4ce:	68bb      	ldr	r3, [r7, #8]
 801b4d0:	68d9      	ldr	r1, [r3, #12]
 801b4d2:	68bb      	ldr	r3, [r7, #8]
 801b4d4:	781a      	ldrb	r2, [r3, #0]
 801b4d6:	68bb      	ldr	r3, [r7, #8]
 801b4d8:	695b      	ldr	r3, [r3, #20]
 801b4da:	b298      	uxth	r0, r3
 801b4dc:	79fb      	ldrb	r3, [r7, #7]
 801b4de:	9300      	str	r3, [sp, #0]
 801b4e0:	4603      	mov	r3, r0
 801b4e2:	68f8      	ldr	r0, [r7, #12]
 801b4e4:	f000 fa38 	bl	801b958 <USB_WritePacket>
 801b4e8:	e0d2      	b.n	801b690 <USB_EPStartXfer+0x480>
 801b4ea:	bf00      	nop
 801b4ec:	e007ffff 	.word	0xe007ffff
 801b4f0:	fff80000 	.word	0xfff80000
 801b4f4:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801b4f8:	69bb      	ldr	r3, [r7, #24]
 801b4fa:	015a      	lsls	r2, r3, #5
 801b4fc:	69fb      	ldr	r3, [r7, #28]
 801b4fe:	4413      	add	r3, r2
 801b500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b504:	691a      	ldr	r2, [r3, #16]
 801b506:	69bb      	ldr	r3, [r7, #24]
 801b508:	0159      	lsls	r1, r3, #5
 801b50a:	69fb      	ldr	r3, [r7, #28]
 801b50c:	440b      	add	r3, r1
 801b50e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b512:	4619      	mov	r1, r3
 801b514:	4b61      	ldr	r3, [pc, #388]	; (801b69c <USB_EPStartXfer+0x48c>)
 801b516:	4013      	ands	r3, r2
 801b518:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801b51a:	69bb      	ldr	r3, [r7, #24]
 801b51c:	015a      	lsls	r2, r3, #5
 801b51e:	69fb      	ldr	r3, [r7, #28]
 801b520:	4413      	add	r3, r2
 801b522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b526:	691a      	ldr	r2, [r3, #16]
 801b528:	69bb      	ldr	r3, [r7, #24]
 801b52a:	0159      	lsls	r1, r3, #5
 801b52c:	69fb      	ldr	r3, [r7, #28]
 801b52e:	440b      	add	r3, r1
 801b530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b534:	4619      	mov	r1, r3
 801b536:	4b5a      	ldr	r3, [pc, #360]	; (801b6a0 <USB_EPStartXfer+0x490>)
 801b538:	4013      	ands	r3, r2
 801b53a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 801b53c:	68bb      	ldr	r3, [r7, #8]
 801b53e:	695b      	ldr	r3, [r3, #20]
 801b540:	2b00      	cmp	r3, #0
 801b542:	d123      	bne.n	801b58c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801b544:	69bb      	ldr	r3, [r7, #24]
 801b546:	015a      	lsls	r2, r3, #5
 801b548:	69fb      	ldr	r3, [r7, #28]
 801b54a:	4413      	add	r3, r2
 801b54c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b550:	691a      	ldr	r2, [r3, #16]
 801b552:	68bb      	ldr	r3, [r7, #8]
 801b554:	689b      	ldr	r3, [r3, #8]
 801b556:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801b55a:	69b9      	ldr	r1, [r7, #24]
 801b55c:	0148      	lsls	r0, r1, #5
 801b55e:	69f9      	ldr	r1, [r7, #28]
 801b560:	4401      	add	r1, r0
 801b562:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801b566:	4313      	orrs	r3, r2
 801b568:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801b56a:	69bb      	ldr	r3, [r7, #24]
 801b56c:	015a      	lsls	r2, r3, #5
 801b56e:	69fb      	ldr	r3, [r7, #28]
 801b570:	4413      	add	r3, r2
 801b572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b576:	691b      	ldr	r3, [r3, #16]
 801b578:	69ba      	ldr	r2, [r7, #24]
 801b57a:	0151      	lsls	r1, r2, #5
 801b57c:	69fa      	ldr	r2, [r7, #28]
 801b57e:	440a      	add	r2, r1
 801b580:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b584:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801b588:	6113      	str	r3, [r2, #16]
 801b58a:	e033      	b.n	801b5f4 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801b58c:	68bb      	ldr	r3, [r7, #8]
 801b58e:	695a      	ldr	r2, [r3, #20]
 801b590:	68bb      	ldr	r3, [r7, #8]
 801b592:	689b      	ldr	r3, [r3, #8]
 801b594:	4413      	add	r3, r2
 801b596:	1e5a      	subs	r2, r3, #1
 801b598:	68bb      	ldr	r3, [r7, #8]
 801b59a:	689b      	ldr	r3, [r3, #8]
 801b59c:	fbb2 f3f3 	udiv	r3, r2, r3
 801b5a0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801b5a2:	69bb      	ldr	r3, [r7, #24]
 801b5a4:	015a      	lsls	r2, r3, #5
 801b5a6:	69fb      	ldr	r3, [r7, #28]
 801b5a8:	4413      	add	r3, r2
 801b5aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b5ae:	691a      	ldr	r2, [r3, #16]
 801b5b0:	8afb      	ldrh	r3, [r7, #22]
 801b5b2:	04d9      	lsls	r1, r3, #19
 801b5b4:	4b3b      	ldr	r3, [pc, #236]	; (801b6a4 <USB_EPStartXfer+0x494>)
 801b5b6:	400b      	ands	r3, r1
 801b5b8:	69b9      	ldr	r1, [r7, #24]
 801b5ba:	0148      	lsls	r0, r1, #5
 801b5bc:	69f9      	ldr	r1, [r7, #28]
 801b5be:	4401      	add	r1, r0
 801b5c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801b5c4:	4313      	orrs	r3, r2
 801b5c6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 801b5c8:	69bb      	ldr	r3, [r7, #24]
 801b5ca:	015a      	lsls	r2, r3, #5
 801b5cc:	69fb      	ldr	r3, [r7, #28]
 801b5ce:	4413      	add	r3, r2
 801b5d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b5d4:	691a      	ldr	r2, [r3, #16]
 801b5d6:	68bb      	ldr	r3, [r7, #8]
 801b5d8:	689b      	ldr	r3, [r3, #8]
 801b5da:	8af9      	ldrh	r1, [r7, #22]
 801b5dc:	fb01 f303 	mul.w	r3, r1, r3
 801b5e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801b5e4:	69b9      	ldr	r1, [r7, #24]
 801b5e6:	0148      	lsls	r0, r1, #5
 801b5e8:	69f9      	ldr	r1, [r7, #28]
 801b5ea:	4401      	add	r1, r0
 801b5ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801b5f0:	4313      	orrs	r3, r2
 801b5f2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801b5f4:	79fb      	ldrb	r3, [r7, #7]
 801b5f6:	2b01      	cmp	r3, #1
 801b5f8:	d10d      	bne.n	801b616 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801b5fa:	68bb      	ldr	r3, [r7, #8]
 801b5fc:	68db      	ldr	r3, [r3, #12]
 801b5fe:	2b00      	cmp	r3, #0
 801b600:	d009      	beq.n	801b616 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801b602:	68bb      	ldr	r3, [r7, #8]
 801b604:	68d9      	ldr	r1, [r3, #12]
 801b606:	69bb      	ldr	r3, [r7, #24]
 801b608:	015a      	lsls	r2, r3, #5
 801b60a:	69fb      	ldr	r3, [r7, #28]
 801b60c:	4413      	add	r3, r2
 801b60e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b612:	460a      	mov	r2, r1
 801b614:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801b616:	68bb      	ldr	r3, [r7, #8]
 801b618:	78db      	ldrb	r3, [r3, #3]
 801b61a:	2b01      	cmp	r3, #1
 801b61c:	d128      	bne.n	801b670 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801b61e:	69fb      	ldr	r3, [r7, #28]
 801b620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b624:	689b      	ldr	r3, [r3, #8]
 801b626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b62a:	2b00      	cmp	r3, #0
 801b62c:	d110      	bne.n	801b650 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801b62e:	69bb      	ldr	r3, [r7, #24]
 801b630:	015a      	lsls	r2, r3, #5
 801b632:	69fb      	ldr	r3, [r7, #28]
 801b634:	4413      	add	r3, r2
 801b636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b63a:	681b      	ldr	r3, [r3, #0]
 801b63c:	69ba      	ldr	r2, [r7, #24]
 801b63e:	0151      	lsls	r1, r2, #5
 801b640:	69fa      	ldr	r2, [r7, #28]
 801b642:	440a      	add	r2, r1
 801b644:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b648:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801b64c:	6013      	str	r3, [r2, #0]
 801b64e:	e00f      	b.n	801b670 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801b650:	69bb      	ldr	r3, [r7, #24]
 801b652:	015a      	lsls	r2, r3, #5
 801b654:	69fb      	ldr	r3, [r7, #28]
 801b656:	4413      	add	r3, r2
 801b658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b65c:	681b      	ldr	r3, [r3, #0]
 801b65e:	69ba      	ldr	r2, [r7, #24]
 801b660:	0151      	lsls	r1, r2, #5
 801b662:	69fa      	ldr	r2, [r7, #28]
 801b664:	440a      	add	r2, r1
 801b666:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b66a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b66e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801b670:	69bb      	ldr	r3, [r7, #24]
 801b672:	015a      	lsls	r2, r3, #5
 801b674:	69fb      	ldr	r3, [r7, #28]
 801b676:	4413      	add	r3, r2
 801b678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b67c:	681b      	ldr	r3, [r3, #0]
 801b67e:	69ba      	ldr	r2, [r7, #24]
 801b680:	0151      	lsls	r1, r2, #5
 801b682:	69fa      	ldr	r2, [r7, #28]
 801b684:	440a      	add	r2, r1
 801b686:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b68a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801b68e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801b690:	2300      	movs	r3, #0
}
 801b692:	4618      	mov	r0, r3
 801b694:	3720      	adds	r7, #32
 801b696:	46bd      	mov	sp, r7
 801b698:	bd80      	pop	{r7, pc}
 801b69a:	bf00      	nop
 801b69c:	fff80000 	.word	0xfff80000
 801b6a0:	e007ffff 	.word	0xe007ffff
 801b6a4:	1ff80000 	.word	0x1ff80000

0801b6a8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801b6a8:	b480      	push	{r7}
 801b6aa:	b087      	sub	sp, #28
 801b6ac:	af00      	add	r7, sp, #0
 801b6ae:	60f8      	str	r0, [r7, #12]
 801b6b0:	60b9      	str	r1, [r7, #8]
 801b6b2:	4613      	mov	r3, r2
 801b6b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b6b6:	68fb      	ldr	r3, [r7, #12]
 801b6b8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801b6ba:	68bb      	ldr	r3, [r7, #8]
 801b6bc:	781b      	ldrb	r3, [r3, #0]
 801b6be:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801b6c0:	68bb      	ldr	r3, [r7, #8]
 801b6c2:	785b      	ldrb	r3, [r3, #1]
 801b6c4:	2b01      	cmp	r3, #1
 801b6c6:	f040 80cd 	bne.w	801b864 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801b6ca:	68bb      	ldr	r3, [r7, #8]
 801b6cc:	695b      	ldr	r3, [r3, #20]
 801b6ce:	2b00      	cmp	r3, #0
 801b6d0:	d132      	bne.n	801b738 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801b6d2:	693b      	ldr	r3, [r7, #16]
 801b6d4:	015a      	lsls	r2, r3, #5
 801b6d6:	697b      	ldr	r3, [r7, #20]
 801b6d8:	4413      	add	r3, r2
 801b6da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b6de:	691a      	ldr	r2, [r3, #16]
 801b6e0:	693b      	ldr	r3, [r7, #16]
 801b6e2:	0159      	lsls	r1, r3, #5
 801b6e4:	697b      	ldr	r3, [r7, #20]
 801b6e6:	440b      	add	r3, r1
 801b6e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b6ec:	4619      	mov	r1, r3
 801b6ee:	4b98      	ldr	r3, [pc, #608]	; (801b950 <USB_EP0StartXfer+0x2a8>)
 801b6f0:	4013      	ands	r3, r2
 801b6f2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801b6f4:	693b      	ldr	r3, [r7, #16]
 801b6f6:	015a      	lsls	r2, r3, #5
 801b6f8:	697b      	ldr	r3, [r7, #20]
 801b6fa:	4413      	add	r3, r2
 801b6fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b700:	691b      	ldr	r3, [r3, #16]
 801b702:	693a      	ldr	r2, [r7, #16]
 801b704:	0151      	lsls	r1, r2, #5
 801b706:	697a      	ldr	r2, [r7, #20]
 801b708:	440a      	add	r2, r1
 801b70a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b70e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801b712:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801b714:	693b      	ldr	r3, [r7, #16]
 801b716:	015a      	lsls	r2, r3, #5
 801b718:	697b      	ldr	r3, [r7, #20]
 801b71a:	4413      	add	r3, r2
 801b71c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b720:	691a      	ldr	r2, [r3, #16]
 801b722:	693b      	ldr	r3, [r7, #16]
 801b724:	0159      	lsls	r1, r3, #5
 801b726:	697b      	ldr	r3, [r7, #20]
 801b728:	440b      	add	r3, r1
 801b72a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b72e:	4619      	mov	r1, r3
 801b730:	4b88      	ldr	r3, [pc, #544]	; (801b954 <USB_EP0StartXfer+0x2ac>)
 801b732:	4013      	ands	r3, r2
 801b734:	610b      	str	r3, [r1, #16]
 801b736:	e04e      	b.n	801b7d6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801b738:	693b      	ldr	r3, [r7, #16]
 801b73a:	015a      	lsls	r2, r3, #5
 801b73c:	697b      	ldr	r3, [r7, #20]
 801b73e:	4413      	add	r3, r2
 801b740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b744:	691a      	ldr	r2, [r3, #16]
 801b746:	693b      	ldr	r3, [r7, #16]
 801b748:	0159      	lsls	r1, r3, #5
 801b74a:	697b      	ldr	r3, [r7, #20]
 801b74c:	440b      	add	r3, r1
 801b74e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b752:	4619      	mov	r1, r3
 801b754:	4b7f      	ldr	r3, [pc, #508]	; (801b954 <USB_EP0StartXfer+0x2ac>)
 801b756:	4013      	ands	r3, r2
 801b758:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801b75a:	693b      	ldr	r3, [r7, #16]
 801b75c:	015a      	lsls	r2, r3, #5
 801b75e:	697b      	ldr	r3, [r7, #20]
 801b760:	4413      	add	r3, r2
 801b762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b766:	691a      	ldr	r2, [r3, #16]
 801b768:	693b      	ldr	r3, [r7, #16]
 801b76a:	0159      	lsls	r1, r3, #5
 801b76c:	697b      	ldr	r3, [r7, #20]
 801b76e:	440b      	add	r3, r1
 801b770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b774:	4619      	mov	r1, r3
 801b776:	4b76      	ldr	r3, [pc, #472]	; (801b950 <USB_EP0StartXfer+0x2a8>)
 801b778:	4013      	ands	r3, r2
 801b77a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 801b77c:	68bb      	ldr	r3, [r7, #8]
 801b77e:	695a      	ldr	r2, [r3, #20]
 801b780:	68bb      	ldr	r3, [r7, #8]
 801b782:	689b      	ldr	r3, [r3, #8]
 801b784:	429a      	cmp	r2, r3
 801b786:	d903      	bls.n	801b790 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 801b788:	68bb      	ldr	r3, [r7, #8]
 801b78a:	689a      	ldr	r2, [r3, #8]
 801b78c:	68bb      	ldr	r3, [r7, #8]
 801b78e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801b790:	693b      	ldr	r3, [r7, #16]
 801b792:	015a      	lsls	r2, r3, #5
 801b794:	697b      	ldr	r3, [r7, #20]
 801b796:	4413      	add	r3, r2
 801b798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b79c:	691b      	ldr	r3, [r3, #16]
 801b79e:	693a      	ldr	r2, [r7, #16]
 801b7a0:	0151      	lsls	r1, r2, #5
 801b7a2:	697a      	ldr	r2, [r7, #20]
 801b7a4:	440a      	add	r2, r1
 801b7a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b7aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801b7ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801b7b0:	693b      	ldr	r3, [r7, #16]
 801b7b2:	015a      	lsls	r2, r3, #5
 801b7b4:	697b      	ldr	r3, [r7, #20]
 801b7b6:	4413      	add	r3, r2
 801b7b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b7bc:	691a      	ldr	r2, [r3, #16]
 801b7be:	68bb      	ldr	r3, [r7, #8]
 801b7c0:	695b      	ldr	r3, [r3, #20]
 801b7c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801b7c6:	6939      	ldr	r1, [r7, #16]
 801b7c8:	0148      	lsls	r0, r1, #5
 801b7ca:	6979      	ldr	r1, [r7, #20]
 801b7cc:	4401      	add	r1, r0
 801b7ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801b7d2:	4313      	orrs	r3, r2
 801b7d4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801b7d6:	79fb      	ldrb	r3, [r7, #7]
 801b7d8:	2b01      	cmp	r3, #1
 801b7da:	d11e      	bne.n	801b81a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801b7dc:	68bb      	ldr	r3, [r7, #8]
 801b7de:	691b      	ldr	r3, [r3, #16]
 801b7e0:	2b00      	cmp	r3, #0
 801b7e2:	d009      	beq.n	801b7f8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801b7e4:	693b      	ldr	r3, [r7, #16]
 801b7e6:	015a      	lsls	r2, r3, #5
 801b7e8:	697b      	ldr	r3, [r7, #20]
 801b7ea:	4413      	add	r3, r2
 801b7ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b7f0:	461a      	mov	r2, r3
 801b7f2:	68bb      	ldr	r3, [r7, #8]
 801b7f4:	691b      	ldr	r3, [r3, #16]
 801b7f6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801b7f8:	693b      	ldr	r3, [r7, #16]
 801b7fa:	015a      	lsls	r2, r3, #5
 801b7fc:	697b      	ldr	r3, [r7, #20]
 801b7fe:	4413      	add	r3, r2
 801b800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b804:	681b      	ldr	r3, [r3, #0]
 801b806:	693a      	ldr	r2, [r7, #16]
 801b808:	0151      	lsls	r1, r2, #5
 801b80a:	697a      	ldr	r2, [r7, #20]
 801b80c:	440a      	add	r2, r1
 801b80e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b812:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801b816:	6013      	str	r3, [r2, #0]
 801b818:	e092      	b.n	801b940 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801b81a:	693b      	ldr	r3, [r7, #16]
 801b81c:	015a      	lsls	r2, r3, #5
 801b81e:	697b      	ldr	r3, [r7, #20]
 801b820:	4413      	add	r3, r2
 801b822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b826:	681b      	ldr	r3, [r3, #0]
 801b828:	693a      	ldr	r2, [r7, #16]
 801b82a:	0151      	lsls	r1, r2, #5
 801b82c:	697a      	ldr	r2, [r7, #20]
 801b82e:	440a      	add	r2, r1
 801b830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b834:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801b838:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801b83a:	68bb      	ldr	r3, [r7, #8]
 801b83c:	695b      	ldr	r3, [r3, #20]
 801b83e:	2b00      	cmp	r3, #0
 801b840:	d07e      	beq.n	801b940 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801b842:	697b      	ldr	r3, [r7, #20]
 801b844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b848:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801b84a:	68bb      	ldr	r3, [r7, #8]
 801b84c:	781b      	ldrb	r3, [r3, #0]
 801b84e:	f003 030f 	and.w	r3, r3, #15
 801b852:	2101      	movs	r1, #1
 801b854:	fa01 f303 	lsl.w	r3, r1, r3
 801b858:	6979      	ldr	r1, [r7, #20]
 801b85a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b85e:	4313      	orrs	r3, r2
 801b860:	634b      	str	r3, [r1, #52]	; 0x34
 801b862:	e06d      	b.n	801b940 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801b864:	693b      	ldr	r3, [r7, #16]
 801b866:	015a      	lsls	r2, r3, #5
 801b868:	697b      	ldr	r3, [r7, #20]
 801b86a:	4413      	add	r3, r2
 801b86c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b870:	691a      	ldr	r2, [r3, #16]
 801b872:	693b      	ldr	r3, [r7, #16]
 801b874:	0159      	lsls	r1, r3, #5
 801b876:	697b      	ldr	r3, [r7, #20]
 801b878:	440b      	add	r3, r1
 801b87a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b87e:	4619      	mov	r1, r3
 801b880:	4b34      	ldr	r3, [pc, #208]	; (801b954 <USB_EP0StartXfer+0x2ac>)
 801b882:	4013      	ands	r3, r2
 801b884:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801b886:	693b      	ldr	r3, [r7, #16]
 801b888:	015a      	lsls	r2, r3, #5
 801b88a:	697b      	ldr	r3, [r7, #20]
 801b88c:	4413      	add	r3, r2
 801b88e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b892:	691a      	ldr	r2, [r3, #16]
 801b894:	693b      	ldr	r3, [r7, #16]
 801b896:	0159      	lsls	r1, r3, #5
 801b898:	697b      	ldr	r3, [r7, #20]
 801b89a:	440b      	add	r3, r1
 801b89c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b8a0:	4619      	mov	r1, r3
 801b8a2:	4b2b      	ldr	r3, [pc, #172]	; (801b950 <USB_EP0StartXfer+0x2a8>)
 801b8a4:	4013      	ands	r3, r2
 801b8a6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 801b8a8:	68bb      	ldr	r3, [r7, #8]
 801b8aa:	695b      	ldr	r3, [r3, #20]
 801b8ac:	2b00      	cmp	r3, #0
 801b8ae:	d003      	beq.n	801b8b8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 801b8b0:	68bb      	ldr	r3, [r7, #8]
 801b8b2:	689a      	ldr	r2, [r3, #8]
 801b8b4:	68bb      	ldr	r3, [r7, #8]
 801b8b6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801b8b8:	693b      	ldr	r3, [r7, #16]
 801b8ba:	015a      	lsls	r2, r3, #5
 801b8bc:	697b      	ldr	r3, [r7, #20]
 801b8be:	4413      	add	r3, r2
 801b8c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b8c4:	691b      	ldr	r3, [r3, #16]
 801b8c6:	693a      	ldr	r2, [r7, #16]
 801b8c8:	0151      	lsls	r1, r2, #5
 801b8ca:	697a      	ldr	r2, [r7, #20]
 801b8cc:	440a      	add	r2, r1
 801b8ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b8d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801b8d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 801b8d8:	693b      	ldr	r3, [r7, #16]
 801b8da:	015a      	lsls	r2, r3, #5
 801b8dc:	697b      	ldr	r3, [r7, #20]
 801b8de:	4413      	add	r3, r2
 801b8e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b8e4:	691a      	ldr	r2, [r3, #16]
 801b8e6:	68bb      	ldr	r3, [r7, #8]
 801b8e8:	689b      	ldr	r3, [r3, #8]
 801b8ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801b8ee:	6939      	ldr	r1, [r7, #16]
 801b8f0:	0148      	lsls	r0, r1, #5
 801b8f2:	6979      	ldr	r1, [r7, #20]
 801b8f4:	4401      	add	r1, r0
 801b8f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801b8fa:	4313      	orrs	r3, r2
 801b8fc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 801b8fe:	79fb      	ldrb	r3, [r7, #7]
 801b900:	2b01      	cmp	r3, #1
 801b902:	d10d      	bne.n	801b920 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801b904:	68bb      	ldr	r3, [r7, #8]
 801b906:	68db      	ldr	r3, [r3, #12]
 801b908:	2b00      	cmp	r3, #0
 801b90a:	d009      	beq.n	801b920 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801b90c:	68bb      	ldr	r3, [r7, #8]
 801b90e:	68d9      	ldr	r1, [r3, #12]
 801b910:	693b      	ldr	r3, [r7, #16]
 801b912:	015a      	lsls	r2, r3, #5
 801b914:	697b      	ldr	r3, [r7, #20]
 801b916:	4413      	add	r3, r2
 801b918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b91c:	460a      	mov	r2, r1
 801b91e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801b920:	693b      	ldr	r3, [r7, #16]
 801b922:	015a      	lsls	r2, r3, #5
 801b924:	697b      	ldr	r3, [r7, #20]
 801b926:	4413      	add	r3, r2
 801b928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b92c:	681b      	ldr	r3, [r3, #0]
 801b92e:	693a      	ldr	r2, [r7, #16]
 801b930:	0151      	lsls	r1, r2, #5
 801b932:	697a      	ldr	r2, [r7, #20]
 801b934:	440a      	add	r2, r1
 801b936:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b93a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801b93e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801b940:	2300      	movs	r3, #0
}
 801b942:	4618      	mov	r0, r3
 801b944:	371c      	adds	r7, #28
 801b946:	46bd      	mov	sp, r7
 801b948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b94c:	4770      	bx	lr
 801b94e:	bf00      	nop
 801b950:	e007ffff 	.word	0xe007ffff
 801b954:	fff80000 	.word	0xfff80000

0801b958 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801b958:	b480      	push	{r7}
 801b95a:	b089      	sub	sp, #36	; 0x24
 801b95c:	af00      	add	r7, sp, #0
 801b95e:	60f8      	str	r0, [r7, #12]
 801b960:	60b9      	str	r1, [r7, #8]
 801b962:	4611      	mov	r1, r2
 801b964:	461a      	mov	r2, r3
 801b966:	460b      	mov	r3, r1
 801b968:	71fb      	strb	r3, [r7, #7]
 801b96a:	4613      	mov	r3, r2
 801b96c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b96e:	68fb      	ldr	r3, [r7, #12]
 801b970:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 801b972:	68bb      	ldr	r3, [r7, #8]
 801b974:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 801b976:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801b97a:	2b00      	cmp	r3, #0
 801b97c:	d11a      	bne.n	801b9b4 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801b97e:	88bb      	ldrh	r3, [r7, #4]
 801b980:	3303      	adds	r3, #3
 801b982:	089b      	lsrs	r3, r3, #2
 801b984:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801b986:	2300      	movs	r3, #0
 801b988:	61bb      	str	r3, [r7, #24]
 801b98a:	e00f      	b.n	801b9ac <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801b98c:	79fb      	ldrb	r3, [r7, #7]
 801b98e:	031a      	lsls	r2, r3, #12
 801b990:	697b      	ldr	r3, [r7, #20]
 801b992:	4413      	add	r3, r2
 801b994:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b998:	461a      	mov	r2, r3
 801b99a:	69fb      	ldr	r3, [r7, #28]
 801b99c:	681b      	ldr	r3, [r3, #0]
 801b99e:	6013      	str	r3, [r2, #0]
      pSrc++;
 801b9a0:	69fb      	ldr	r3, [r7, #28]
 801b9a2:	3304      	adds	r3, #4
 801b9a4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801b9a6:	69bb      	ldr	r3, [r7, #24]
 801b9a8:	3301      	adds	r3, #1
 801b9aa:	61bb      	str	r3, [r7, #24]
 801b9ac:	69ba      	ldr	r2, [r7, #24]
 801b9ae:	693b      	ldr	r3, [r7, #16]
 801b9b0:	429a      	cmp	r2, r3
 801b9b2:	d3eb      	bcc.n	801b98c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801b9b4:	2300      	movs	r3, #0
}
 801b9b6:	4618      	mov	r0, r3
 801b9b8:	3724      	adds	r7, #36	; 0x24
 801b9ba:	46bd      	mov	sp, r7
 801b9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9c0:	4770      	bx	lr

0801b9c2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801b9c2:	b480      	push	{r7}
 801b9c4:	b089      	sub	sp, #36	; 0x24
 801b9c6:	af00      	add	r7, sp, #0
 801b9c8:	60f8      	str	r0, [r7, #12]
 801b9ca:	60b9      	str	r1, [r7, #8]
 801b9cc:	4613      	mov	r3, r2
 801b9ce:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b9d0:	68fb      	ldr	r3, [r7, #12]
 801b9d2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 801b9d4:	68bb      	ldr	r3, [r7, #8]
 801b9d6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 801b9d8:	88fb      	ldrh	r3, [r7, #6]
 801b9da:	3303      	adds	r3, #3
 801b9dc:	089b      	lsrs	r3, r3, #2
 801b9de:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 801b9e0:	2300      	movs	r3, #0
 801b9e2:	61bb      	str	r3, [r7, #24]
 801b9e4:	e00b      	b.n	801b9fe <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801b9e6:	697b      	ldr	r3, [r7, #20]
 801b9e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b9ec:	681a      	ldr	r2, [r3, #0]
 801b9ee:	69fb      	ldr	r3, [r7, #28]
 801b9f0:	601a      	str	r2, [r3, #0]
    pDest++;
 801b9f2:	69fb      	ldr	r3, [r7, #28]
 801b9f4:	3304      	adds	r3, #4
 801b9f6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 801b9f8:	69bb      	ldr	r3, [r7, #24]
 801b9fa:	3301      	adds	r3, #1
 801b9fc:	61bb      	str	r3, [r7, #24]
 801b9fe:	69ba      	ldr	r2, [r7, #24]
 801ba00:	693b      	ldr	r3, [r7, #16]
 801ba02:	429a      	cmp	r2, r3
 801ba04:	d3ef      	bcc.n	801b9e6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 801ba06:	69fb      	ldr	r3, [r7, #28]
}
 801ba08:	4618      	mov	r0, r3
 801ba0a:	3724      	adds	r7, #36	; 0x24
 801ba0c:	46bd      	mov	sp, r7
 801ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba12:	4770      	bx	lr

0801ba14 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801ba14:	b480      	push	{r7}
 801ba16:	b085      	sub	sp, #20
 801ba18:	af00      	add	r7, sp, #0
 801ba1a:	6078      	str	r0, [r7, #4]
 801ba1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ba1e:	687b      	ldr	r3, [r7, #4]
 801ba20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801ba22:	683b      	ldr	r3, [r7, #0]
 801ba24:	781b      	ldrb	r3, [r3, #0]
 801ba26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801ba28:	683b      	ldr	r3, [r7, #0]
 801ba2a:	785b      	ldrb	r3, [r3, #1]
 801ba2c:	2b01      	cmp	r3, #1
 801ba2e:	d12c      	bne.n	801ba8a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801ba30:	68bb      	ldr	r3, [r7, #8]
 801ba32:	015a      	lsls	r2, r3, #5
 801ba34:	68fb      	ldr	r3, [r7, #12]
 801ba36:	4413      	add	r3, r2
 801ba38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ba3c:	681b      	ldr	r3, [r3, #0]
 801ba3e:	2b00      	cmp	r3, #0
 801ba40:	db12      	blt.n	801ba68 <USB_EPSetStall+0x54>
 801ba42:	68bb      	ldr	r3, [r7, #8]
 801ba44:	2b00      	cmp	r3, #0
 801ba46:	d00f      	beq.n	801ba68 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801ba48:	68bb      	ldr	r3, [r7, #8]
 801ba4a:	015a      	lsls	r2, r3, #5
 801ba4c:	68fb      	ldr	r3, [r7, #12]
 801ba4e:	4413      	add	r3, r2
 801ba50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ba54:	681b      	ldr	r3, [r3, #0]
 801ba56:	68ba      	ldr	r2, [r7, #8]
 801ba58:	0151      	lsls	r1, r2, #5
 801ba5a:	68fa      	ldr	r2, [r7, #12]
 801ba5c:	440a      	add	r2, r1
 801ba5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ba62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801ba66:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801ba68:	68bb      	ldr	r3, [r7, #8]
 801ba6a:	015a      	lsls	r2, r3, #5
 801ba6c:	68fb      	ldr	r3, [r7, #12]
 801ba6e:	4413      	add	r3, r2
 801ba70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ba74:	681b      	ldr	r3, [r3, #0]
 801ba76:	68ba      	ldr	r2, [r7, #8]
 801ba78:	0151      	lsls	r1, r2, #5
 801ba7a:	68fa      	ldr	r2, [r7, #12]
 801ba7c:	440a      	add	r2, r1
 801ba7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ba82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801ba86:	6013      	str	r3, [r2, #0]
 801ba88:	e02b      	b.n	801bae2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801ba8a:	68bb      	ldr	r3, [r7, #8]
 801ba8c:	015a      	lsls	r2, r3, #5
 801ba8e:	68fb      	ldr	r3, [r7, #12]
 801ba90:	4413      	add	r3, r2
 801ba92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ba96:	681b      	ldr	r3, [r3, #0]
 801ba98:	2b00      	cmp	r3, #0
 801ba9a:	db12      	blt.n	801bac2 <USB_EPSetStall+0xae>
 801ba9c:	68bb      	ldr	r3, [r7, #8]
 801ba9e:	2b00      	cmp	r3, #0
 801baa0:	d00f      	beq.n	801bac2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801baa2:	68bb      	ldr	r3, [r7, #8]
 801baa4:	015a      	lsls	r2, r3, #5
 801baa6:	68fb      	ldr	r3, [r7, #12]
 801baa8:	4413      	add	r3, r2
 801baaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801baae:	681b      	ldr	r3, [r3, #0]
 801bab0:	68ba      	ldr	r2, [r7, #8]
 801bab2:	0151      	lsls	r1, r2, #5
 801bab4:	68fa      	ldr	r2, [r7, #12]
 801bab6:	440a      	add	r2, r1
 801bab8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801babc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801bac0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801bac2:	68bb      	ldr	r3, [r7, #8]
 801bac4:	015a      	lsls	r2, r3, #5
 801bac6:	68fb      	ldr	r3, [r7, #12]
 801bac8:	4413      	add	r3, r2
 801baca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bace:	681b      	ldr	r3, [r3, #0]
 801bad0:	68ba      	ldr	r2, [r7, #8]
 801bad2:	0151      	lsls	r1, r2, #5
 801bad4:	68fa      	ldr	r2, [r7, #12]
 801bad6:	440a      	add	r2, r1
 801bad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801badc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801bae0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801bae2:	2300      	movs	r3, #0
}
 801bae4:	4618      	mov	r0, r3
 801bae6:	3714      	adds	r7, #20
 801bae8:	46bd      	mov	sp, r7
 801baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801baee:	4770      	bx	lr

0801baf0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801baf0:	b480      	push	{r7}
 801baf2:	b085      	sub	sp, #20
 801baf4:	af00      	add	r7, sp, #0
 801baf6:	6078      	str	r0, [r7, #4]
 801baf8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bafa:	687b      	ldr	r3, [r7, #4]
 801bafc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801bafe:	683b      	ldr	r3, [r7, #0]
 801bb00:	781b      	ldrb	r3, [r3, #0]
 801bb02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801bb04:	683b      	ldr	r3, [r7, #0]
 801bb06:	785b      	ldrb	r3, [r3, #1]
 801bb08:	2b01      	cmp	r3, #1
 801bb0a:	d128      	bne.n	801bb5e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801bb0c:	68bb      	ldr	r3, [r7, #8]
 801bb0e:	015a      	lsls	r2, r3, #5
 801bb10:	68fb      	ldr	r3, [r7, #12]
 801bb12:	4413      	add	r3, r2
 801bb14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bb18:	681b      	ldr	r3, [r3, #0]
 801bb1a:	68ba      	ldr	r2, [r7, #8]
 801bb1c:	0151      	lsls	r1, r2, #5
 801bb1e:	68fa      	ldr	r2, [r7, #12]
 801bb20:	440a      	add	r2, r1
 801bb22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801bb26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801bb2a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801bb2c:	683b      	ldr	r3, [r7, #0]
 801bb2e:	78db      	ldrb	r3, [r3, #3]
 801bb30:	2b03      	cmp	r3, #3
 801bb32:	d003      	beq.n	801bb3c <USB_EPClearStall+0x4c>
 801bb34:	683b      	ldr	r3, [r7, #0]
 801bb36:	78db      	ldrb	r3, [r3, #3]
 801bb38:	2b02      	cmp	r3, #2
 801bb3a:	d138      	bne.n	801bbae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801bb3c:	68bb      	ldr	r3, [r7, #8]
 801bb3e:	015a      	lsls	r2, r3, #5
 801bb40:	68fb      	ldr	r3, [r7, #12]
 801bb42:	4413      	add	r3, r2
 801bb44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bb48:	681b      	ldr	r3, [r3, #0]
 801bb4a:	68ba      	ldr	r2, [r7, #8]
 801bb4c:	0151      	lsls	r1, r2, #5
 801bb4e:	68fa      	ldr	r2, [r7, #12]
 801bb50:	440a      	add	r2, r1
 801bb52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801bb56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801bb5a:	6013      	str	r3, [r2, #0]
 801bb5c:	e027      	b.n	801bbae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801bb5e:	68bb      	ldr	r3, [r7, #8]
 801bb60:	015a      	lsls	r2, r3, #5
 801bb62:	68fb      	ldr	r3, [r7, #12]
 801bb64:	4413      	add	r3, r2
 801bb66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bb6a:	681b      	ldr	r3, [r3, #0]
 801bb6c:	68ba      	ldr	r2, [r7, #8]
 801bb6e:	0151      	lsls	r1, r2, #5
 801bb70:	68fa      	ldr	r2, [r7, #12]
 801bb72:	440a      	add	r2, r1
 801bb74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801bb78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801bb7c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801bb7e:	683b      	ldr	r3, [r7, #0]
 801bb80:	78db      	ldrb	r3, [r3, #3]
 801bb82:	2b03      	cmp	r3, #3
 801bb84:	d003      	beq.n	801bb8e <USB_EPClearStall+0x9e>
 801bb86:	683b      	ldr	r3, [r7, #0]
 801bb88:	78db      	ldrb	r3, [r3, #3]
 801bb8a:	2b02      	cmp	r3, #2
 801bb8c:	d10f      	bne.n	801bbae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801bb8e:	68bb      	ldr	r3, [r7, #8]
 801bb90:	015a      	lsls	r2, r3, #5
 801bb92:	68fb      	ldr	r3, [r7, #12]
 801bb94:	4413      	add	r3, r2
 801bb96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bb9a:	681b      	ldr	r3, [r3, #0]
 801bb9c:	68ba      	ldr	r2, [r7, #8]
 801bb9e:	0151      	lsls	r1, r2, #5
 801bba0:	68fa      	ldr	r2, [r7, #12]
 801bba2:	440a      	add	r2, r1
 801bba4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801bba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801bbac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801bbae:	2300      	movs	r3, #0
}
 801bbb0:	4618      	mov	r0, r3
 801bbb2:	3714      	adds	r7, #20
 801bbb4:	46bd      	mov	sp, r7
 801bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbba:	4770      	bx	lr

0801bbbc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801bbbc:	b480      	push	{r7}
 801bbbe:	b085      	sub	sp, #20
 801bbc0:	af00      	add	r7, sp, #0
 801bbc2:	6078      	str	r0, [r7, #4]
 801bbc4:	460b      	mov	r3, r1
 801bbc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bbc8:	687b      	ldr	r3, [r7, #4]
 801bbca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801bbcc:	68fb      	ldr	r3, [r7, #12]
 801bbce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bbd2:	681b      	ldr	r3, [r3, #0]
 801bbd4:	68fa      	ldr	r2, [r7, #12]
 801bbd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801bbda:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801bbde:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801bbe0:	68fb      	ldr	r3, [r7, #12]
 801bbe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bbe6:	681a      	ldr	r2, [r3, #0]
 801bbe8:	78fb      	ldrb	r3, [r7, #3]
 801bbea:	011b      	lsls	r3, r3, #4
 801bbec:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801bbf0:	68f9      	ldr	r1, [r7, #12]
 801bbf2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801bbf6:	4313      	orrs	r3, r2
 801bbf8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801bbfa:	2300      	movs	r3, #0
}
 801bbfc:	4618      	mov	r0, r3
 801bbfe:	3714      	adds	r7, #20
 801bc00:	46bd      	mov	sp, r7
 801bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc06:	4770      	bx	lr

0801bc08 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801bc08:	b580      	push	{r7, lr}
 801bc0a:	b084      	sub	sp, #16
 801bc0c:	af00      	add	r7, sp, #0
 801bc0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bc10:	687b      	ldr	r3, [r7, #4]
 801bc12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801bc14:	68fb      	ldr	r3, [r7, #12]
 801bc16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bc1a:	685b      	ldr	r3, [r3, #4]
 801bc1c:	68fa      	ldr	r2, [r7, #12]
 801bc1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801bc22:	f023 0302 	bic.w	r3, r3, #2
 801bc26:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 801bc28:	2003      	movs	r0, #3
 801bc2a:	f7f6 fe7b 	bl	8012924 <HAL_Delay>

  return HAL_OK;
 801bc2e:	2300      	movs	r3, #0
}
 801bc30:	4618      	mov	r0, r3
 801bc32:	3710      	adds	r7, #16
 801bc34:	46bd      	mov	sp, r7
 801bc36:	bd80      	pop	{r7, pc}

0801bc38 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801bc38:	b580      	push	{r7, lr}
 801bc3a:	b084      	sub	sp, #16
 801bc3c:	af00      	add	r7, sp, #0
 801bc3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bc40:	687b      	ldr	r3, [r7, #4]
 801bc42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801bc44:	68fb      	ldr	r3, [r7, #12]
 801bc46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bc4a:	685b      	ldr	r3, [r3, #4]
 801bc4c:	68fa      	ldr	r2, [r7, #12]
 801bc4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801bc52:	f043 0302 	orr.w	r3, r3, #2
 801bc56:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 801bc58:	2003      	movs	r0, #3
 801bc5a:	f7f6 fe63 	bl	8012924 <HAL_Delay>

  return HAL_OK;
 801bc5e:	2300      	movs	r3, #0
}
 801bc60:	4618      	mov	r0, r3
 801bc62:	3710      	adds	r7, #16
 801bc64:	46bd      	mov	sp, r7
 801bc66:	bd80      	pop	{r7, pc}

0801bc68 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801bc68:	b480      	push	{r7}
 801bc6a:	b085      	sub	sp, #20
 801bc6c:	af00      	add	r7, sp, #0
 801bc6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801bc70:	687b      	ldr	r3, [r7, #4]
 801bc72:	695b      	ldr	r3, [r3, #20]
 801bc74:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801bc76:	687b      	ldr	r3, [r7, #4]
 801bc78:	699b      	ldr	r3, [r3, #24]
 801bc7a:	68fa      	ldr	r2, [r7, #12]
 801bc7c:	4013      	ands	r3, r2
 801bc7e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801bc80:	68fb      	ldr	r3, [r7, #12]
}
 801bc82:	4618      	mov	r0, r3
 801bc84:	3714      	adds	r7, #20
 801bc86:	46bd      	mov	sp, r7
 801bc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc8c:	4770      	bx	lr

0801bc8e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801bc8e:	b480      	push	{r7}
 801bc90:	b085      	sub	sp, #20
 801bc92:	af00      	add	r7, sp, #0
 801bc94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bc96:	687b      	ldr	r3, [r7, #4]
 801bc98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801bc9a:	68fb      	ldr	r3, [r7, #12]
 801bc9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bca0:	699b      	ldr	r3, [r3, #24]
 801bca2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801bca4:	68fb      	ldr	r3, [r7, #12]
 801bca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bcaa:	69db      	ldr	r3, [r3, #28]
 801bcac:	68ba      	ldr	r2, [r7, #8]
 801bcae:	4013      	ands	r3, r2
 801bcb0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801bcb2:	68bb      	ldr	r3, [r7, #8]
 801bcb4:	0c1b      	lsrs	r3, r3, #16
}
 801bcb6:	4618      	mov	r0, r3
 801bcb8:	3714      	adds	r7, #20
 801bcba:	46bd      	mov	sp, r7
 801bcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcc0:	4770      	bx	lr

0801bcc2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801bcc2:	b480      	push	{r7}
 801bcc4:	b085      	sub	sp, #20
 801bcc6:	af00      	add	r7, sp, #0
 801bcc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bcca:	687b      	ldr	r3, [r7, #4]
 801bccc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801bcce:	68fb      	ldr	r3, [r7, #12]
 801bcd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bcd4:	699b      	ldr	r3, [r3, #24]
 801bcd6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801bcd8:	68fb      	ldr	r3, [r7, #12]
 801bcda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bcde:	69db      	ldr	r3, [r3, #28]
 801bce0:	68ba      	ldr	r2, [r7, #8]
 801bce2:	4013      	ands	r3, r2
 801bce4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801bce6:	68bb      	ldr	r3, [r7, #8]
 801bce8:	b29b      	uxth	r3, r3
}
 801bcea:	4618      	mov	r0, r3
 801bcec:	3714      	adds	r7, #20
 801bcee:	46bd      	mov	sp, r7
 801bcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcf4:	4770      	bx	lr

0801bcf6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801bcf6:	b480      	push	{r7}
 801bcf8:	b085      	sub	sp, #20
 801bcfa:	af00      	add	r7, sp, #0
 801bcfc:	6078      	str	r0, [r7, #4]
 801bcfe:	460b      	mov	r3, r1
 801bd00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bd02:	687b      	ldr	r3, [r7, #4]
 801bd04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801bd06:	78fb      	ldrb	r3, [r7, #3]
 801bd08:	015a      	lsls	r2, r3, #5
 801bd0a:	68fb      	ldr	r3, [r7, #12]
 801bd0c:	4413      	add	r3, r2
 801bd0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bd12:	689b      	ldr	r3, [r3, #8]
 801bd14:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801bd16:	68fb      	ldr	r3, [r7, #12]
 801bd18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bd1c:	695b      	ldr	r3, [r3, #20]
 801bd1e:	68ba      	ldr	r2, [r7, #8]
 801bd20:	4013      	ands	r3, r2
 801bd22:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801bd24:	68bb      	ldr	r3, [r7, #8]
}
 801bd26:	4618      	mov	r0, r3
 801bd28:	3714      	adds	r7, #20
 801bd2a:	46bd      	mov	sp, r7
 801bd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd30:	4770      	bx	lr

0801bd32 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801bd32:	b480      	push	{r7}
 801bd34:	b087      	sub	sp, #28
 801bd36:	af00      	add	r7, sp, #0
 801bd38:	6078      	str	r0, [r7, #4]
 801bd3a:	460b      	mov	r3, r1
 801bd3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bd3e:	687b      	ldr	r3, [r7, #4]
 801bd40:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 801bd42:	697b      	ldr	r3, [r7, #20]
 801bd44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bd48:	691b      	ldr	r3, [r3, #16]
 801bd4a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801bd4c:	697b      	ldr	r3, [r7, #20]
 801bd4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bd52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bd54:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801bd56:	78fb      	ldrb	r3, [r7, #3]
 801bd58:	f003 030f 	and.w	r3, r3, #15
 801bd5c:	68fa      	ldr	r2, [r7, #12]
 801bd5e:	fa22 f303 	lsr.w	r3, r2, r3
 801bd62:	01db      	lsls	r3, r3, #7
 801bd64:	b2db      	uxtb	r3, r3
 801bd66:	693a      	ldr	r2, [r7, #16]
 801bd68:	4313      	orrs	r3, r2
 801bd6a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801bd6c:	78fb      	ldrb	r3, [r7, #3]
 801bd6e:	015a      	lsls	r2, r3, #5
 801bd70:	697b      	ldr	r3, [r7, #20]
 801bd72:	4413      	add	r3, r2
 801bd74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bd78:	689b      	ldr	r3, [r3, #8]
 801bd7a:	693a      	ldr	r2, [r7, #16]
 801bd7c:	4013      	ands	r3, r2
 801bd7e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801bd80:	68bb      	ldr	r3, [r7, #8]
}
 801bd82:	4618      	mov	r0, r3
 801bd84:	371c      	adds	r7, #28
 801bd86:	46bd      	mov	sp, r7
 801bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd8c:	4770      	bx	lr

0801bd8e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801bd8e:	b480      	push	{r7}
 801bd90:	b083      	sub	sp, #12
 801bd92:	af00      	add	r7, sp, #0
 801bd94:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801bd96:	687b      	ldr	r3, [r7, #4]
 801bd98:	695b      	ldr	r3, [r3, #20]
 801bd9a:	f003 0301 	and.w	r3, r3, #1
}
 801bd9e:	4618      	mov	r0, r3
 801bda0:	370c      	adds	r7, #12
 801bda2:	46bd      	mov	sp, r7
 801bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bda8:	4770      	bx	lr
	...

0801bdac <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801bdac:	b480      	push	{r7}
 801bdae:	b085      	sub	sp, #20
 801bdb0:	af00      	add	r7, sp, #0
 801bdb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bdb4:	687b      	ldr	r3, [r7, #4]
 801bdb6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801bdb8:	68fb      	ldr	r3, [r7, #12]
 801bdba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bdbe:	681a      	ldr	r2, [r3, #0]
 801bdc0:	68fb      	ldr	r3, [r7, #12]
 801bdc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bdc6:	4619      	mov	r1, r3
 801bdc8:	4b09      	ldr	r3, [pc, #36]	; (801bdf0 <USB_ActivateSetup+0x44>)
 801bdca:	4013      	ands	r3, r2
 801bdcc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801bdce:	68fb      	ldr	r3, [r7, #12]
 801bdd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bdd4:	685b      	ldr	r3, [r3, #4]
 801bdd6:	68fa      	ldr	r2, [r7, #12]
 801bdd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801bddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801bde0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801bde2:	2300      	movs	r3, #0
}
 801bde4:	4618      	mov	r0, r3
 801bde6:	3714      	adds	r7, #20
 801bde8:	46bd      	mov	sp, r7
 801bdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdee:	4770      	bx	lr
 801bdf0:	fffff800 	.word	0xfffff800

0801bdf4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801bdf4:	b480      	push	{r7}
 801bdf6:	b087      	sub	sp, #28
 801bdf8:	af00      	add	r7, sp, #0
 801bdfa:	60f8      	str	r0, [r7, #12]
 801bdfc:	460b      	mov	r3, r1
 801bdfe:	607a      	str	r2, [r7, #4]
 801be00:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801be02:	68fb      	ldr	r3, [r7, #12]
 801be04:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801be06:	68fb      	ldr	r3, [r7, #12]
 801be08:	333c      	adds	r3, #60	; 0x3c
 801be0a:	3304      	adds	r3, #4
 801be0c:	681b      	ldr	r3, [r3, #0]
 801be0e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801be10:	693b      	ldr	r3, [r7, #16]
 801be12:	4a26      	ldr	r2, [pc, #152]	; (801beac <USB_EP0_OutStart+0xb8>)
 801be14:	4293      	cmp	r3, r2
 801be16:	d90a      	bls.n	801be2e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801be18:	697b      	ldr	r3, [r7, #20]
 801be1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801be1e:	681b      	ldr	r3, [r3, #0]
 801be20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801be24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801be28:	d101      	bne.n	801be2e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801be2a:	2300      	movs	r3, #0
 801be2c:	e037      	b.n	801be9e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801be2e:	697b      	ldr	r3, [r7, #20]
 801be30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801be34:	461a      	mov	r2, r3
 801be36:	2300      	movs	r3, #0
 801be38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801be3a:	697b      	ldr	r3, [r7, #20]
 801be3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801be40:	691b      	ldr	r3, [r3, #16]
 801be42:	697a      	ldr	r2, [r7, #20]
 801be44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801be48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801be4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801be4e:	697b      	ldr	r3, [r7, #20]
 801be50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801be54:	691b      	ldr	r3, [r3, #16]
 801be56:	697a      	ldr	r2, [r7, #20]
 801be58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801be5c:	f043 0318 	orr.w	r3, r3, #24
 801be60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801be62:	697b      	ldr	r3, [r7, #20]
 801be64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801be68:	691b      	ldr	r3, [r3, #16]
 801be6a:	697a      	ldr	r2, [r7, #20]
 801be6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801be70:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801be74:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801be76:	7afb      	ldrb	r3, [r7, #11]
 801be78:	2b01      	cmp	r3, #1
 801be7a:	d10f      	bne.n	801be9c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801be7c:	697b      	ldr	r3, [r7, #20]
 801be7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801be82:	461a      	mov	r2, r3
 801be84:	687b      	ldr	r3, [r7, #4]
 801be86:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801be88:	697b      	ldr	r3, [r7, #20]
 801be8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801be8e:	681b      	ldr	r3, [r3, #0]
 801be90:	697a      	ldr	r2, [r7, #20]
 801be92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801be96:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801be9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801be9c:	2300      	movs	r3, #0
}
 801be9e:	4618      	mov	r0, r3
 801bea0:	371c      	adds	r7, #28
 801bea2:	46bd      	mov	sp, r7
 801bea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bea8:	4770      	bx	lr
 801beaa:	bf00      	nop
 801beac:	4f54300a 	.word	0x4f54300a

0801beb0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801beb0:	b480      	push	{r7}
 801beb2:	b085      	sub	sp, #20
 801beb4:	af00      	add	r7, sp, #0
 801beb6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 801beb8:	2300      	movs	r3, #0
 801beba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801bebc:	68fb      	ldr	r3, [r7, #12]
 801bebe:	3301      	adds	r3, #1
 801bec0:	60fb      	str	r3, [r7, #12]
 801bec2:	68fb      	ldr	r3, [r7, #12]
 801bec4:	4a13      	ldr	r2, [pc, #76]	; (801bf14 <USB_CoreReset+0x64>)
 801bec6:	4293      	cmp	r3, r2
 801bec8:	d901      	bls.n	801bece <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801beca:	2303      	movs	r3, #3
 801becc:	e01b      	b.n	801bf06 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801bece:	687b      	ldr	r3, [r7, #4]
 801bed0:	691b      	ldr	r3, [r3, #16]
 801bed2:	2b00      	cmp	r3, #0
 801bed4:	daf2      	bge.n	801bebc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801bed6:	2300      	movs	r3, #0
 801bed8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801beda:	687b      	ldr	r3, [r7, #4]
 801bedc:	691b      	ldr	r3, [r3, #16]
 801bede:	f043 0201 	orr.w	r2, r3, #1
 801bee2:	687b      	ldr	r3, [r7, #4]
 801bee4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801bee6:	68fb      	ldr	r3, [r7, #12]
 801bee8:	3301      	adds	r3, #1
 801beea:	60fb      	str	r3, [r7, #12]
 801beec:	68fb      	ldr	r3, [r7, #12]
 801beee:	4a09      	ldr	r2, [pc, #36]	; (801bf14 <USB_CoreReset+0x64>)
 801bef0:	4293      	cmp	r3, r2
 801bef2:	d901      	bls.n	801bef8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801bef4:	2303      	movs	r3, #3
 801bef6:	e006      	b.n	801bf06 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801bef8:	687b      	ldr	r3, [r7, #4]
 801befa:	691b      	ldr	r3, [r3, #16]
 801befc:	f003 0301 	and.w	r3, r3, #1
 801bf00:	2b01      	cmp	r3, #1
 801bf02:	d0f0      	beq.n	801bee6 <USB_CoreReset+0x36>

  return HAL_OK;
 801bf04:	2300      	movs	r3, #0
}
 801bf06:	4618      	mov	r0, r3
 801bf08:	3714      	adds	r7, #20
 801bf0a:	46bd      	mov	sp, r7
 801bf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf10:	4770      	bx	lr
 801bf12:	bf00      	nop
 801bf14:	00030d40 	.word	0x00030d40

0801bf18 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801bf18:	b580      	push	{r7, lr}
 801bf1a:	b084      	sub	sp, #16
 801bf1c:	af00      	add	r7, sp, #0
 801bf1e:	6078      	str	r0, [r7, #4]
 801bf20:	460b      	mov	r3, r1
 801bf22:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 801bf24:	2300      	movs	r3, #0
 801bf26:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801bf28:	687b      	ldr	r3, [r7, #4]
 801bf2a:	7c1b      	ldrb	r3, [r3, #16]
 801bf2c:	2b00      	cmp	r3, #0
 801bf2e:	d115      	bne.n	801bf5c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801bf30:	f44f 7300 	mov.w	r3, #512	; 0x200
 801bf34:	2202      	movs	r2, #2
 801bf36:	2181      	movs	r1, #129	; 0x81
 801bf38:	6878      	ldr	r0, [r7, #4]
 801bf3a:	f001 ff6e 	bl	801de1a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801bf3e:	687b      	ldr	r3, [r7, #4]
 801bf40:	2201      	movs	r2, #1
 801bf42:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801bf44:	f44f 7300 	mov.w	r3, #512	; 0x200
 801bf48:	2202      	movs	r2, #2
 801bf4a:	2101      	movs	r1, #1
 801bf4c:	6878      	ldr	r0, [r7, #4]
 801bf4e:	f001 ff64 	bl	801de1a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801bf52:	687b      	ldr	r3, [r7, #4]
 801bf54:	2201      	movs	r2, #1
 801bf56:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 801bf5a:	e012      	b.n	801bf82 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801bf5c:	2340      	movs	r3, #64	; 0x40
 801bf5e:	2202      	movs	r2, #2
 801bf60:	2181      	movs	r1, #129	; 0x81
 801bf62:	6878      	ldr	r0, [r7, #4]
 801bf64:	f001 ff59 	bl	801de1a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801bf68:	687b      	ldr	r3, [r7, #4]
 801bf6a:	2201      	movs	r2, #1
 801bf6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801bf6e:	2340      	movs	r3, #64	; 0x40
 801bf70:	2202      	movs	r2, #2
 801bf72:	2101      	movs	r1, #1
 801bf74:	6878      	ldr	r0, [r7, #4]
 801bf76:	f001 ff50 	bl	801de1a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801bf7a:	687b      	ldr	r3, [r7, #4]
 801bf7c:	2201      	movs	r2, #1
 801bf7e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801bf82:	2308      	movs	r3, #8
 801bf84:	2203      	movs	r2, #3
 801bf86:	2182      	movs	r1, #130	; 0x82
 801bf88:	6878      	ldr	r0, [r7, #4]
 801bf8a:	f001 ff46 	bl	801de1a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801bf8e:	687b      	ldr	r3, [r7, #4]
 801bf90:	2201      	movs	r2, #1
 801bf92:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801bf94:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801bf98:	f002 f8d6 	bl	801e148 <malloc>
 801bf9c:	4603      	mov	r3, r0
 801bf9e:	461a      	mov	r2, r3
 801bfa0:	687b      	ldr	r3, [r7, #4]
 801bfa2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 801bfa6:	687b      	ldr	r3, [r7, #4]
 801bfa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801bfac:	2b00      	cmp	r3, #0
 801bfae:	d102      	bne.n	801bfb6 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 801bfb0:	2301      	movs	r3, #1
 801bfb2:	73fb      	strb	r3, [r7, #15]
 801bfb4:	e026      	b.n	801c004 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801bfb6:	687b      	ldr	r3, [r7, #4]
 801bfb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801bfbc:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801bfbe:	687b      	ldr	r3, [r7, #4]
 801bfc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801bfc4:	681b      	ldr	r3, [r3, #0]
 801bfc6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801bfc8:	68bb      	ldr	r3, [r7, #8]
 801bfca:	2200      	movs	r2, #0
 801bfcc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 801bfd0:	68bb      	ldr	r3, [r7, #8]
 801bfd2:	2200      	movs	r2, #0
 801bfd4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801bfd8:	687b      	ldr	r3, [r7, #4]
 801bfda:	7c1b      	ldrb	r3, [r3, #16]
 801bfdc:	2b00      	cmp	r3, #0
 801bfde:	d109      	bne.n	801bff4 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801bfe0:	68bb      	ldr	r3, [r7, #8]
 801bfe2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801bfe6:	f44f 7300 	mov.w	r3, #512	; 0x200
 801bfea:	2101      	movs	r1, #1
 801bfec:	6878      	ldr	r0, [r7, #4]
 801bfee:	f002 f805 	bl	801dffc <USBD_LL_PrepareReceive>
 801bff2:	e007      	b.n	801c004 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801bff4:	68bb      	ldr	r3, [r7, #8]
 801bff6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801bffa:	2340      	movs	r3, #64	; 0x40
 801bffc:	2101      	movs	r1, #1
 801bffe:	6878      	ldr	r0, [r7, #4]
 801c000:	f001 fffc 	bl	801dffc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801c004:	7bfb      	ldrb	r3, [r7, #15]
}
 801c006:	4618      	mov	r0, r3
 801c008:	3710      	adds	r7, #16
 801c00a:	46bd      	mov	sp, r7
 801c00c:	bd80      	pop	{r7, pc}

0801c00e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801c00e:	b580      	push	{r7, lr}
 801c010:	b084      	sub	sp, #16
 801c012:	af00      	add	r7, sp, #0
 801c014:	6078      	str	r0, [r7, #4]
 801c016:	460b      	mov	r3, r1
 801c018:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 801c01a:	2300      	movs	r3, #0
 801c01c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801c01e:	2181      	movs	r1, #129	; 0x81
 801c020:	6878      	ldr	r0, [r7, #4]
 801c022:	f001 ff20 	bl	801de66 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801c026:	687b      	ldr	r3, [r7, #4]
 801c028:	2200      	movs	r2, #0
 801c02a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801c02c:	2101      	movs	r1, #1
 801c02e:	6878      	ldr	r0, [r7, #4]
 801c030:	f001 ff19 	bl	801de66 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801c034:	687b      	ldr	r3, [r7, #4]
 801c036:	2200      	movs	r2, #0
 801c038:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801c03c:	2182      	movs	r1, #130	; 0x82
 801c03e:	6878      	ldr	r0, [r7, #4]
 801c040:	f001 ff11 	bl	801de66 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801c044:	687b      	ldr	r3, [r7, #4]
 801c046:	2200      	movs	r2, #0
 801c048:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801c04a:	687b      	ldr	r3, [r7, #4]
 801c04c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c050:	2b00      	cmp	r3, #0
 801c052:	d00e      	beq.n	801c072 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801c054:	687b      	ldr	r3, [r7, #4]
 801c056:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c05a:	685b      	ldr	r3, [r3, #4]
 801c05c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801c05e:	687b      	ldr	r3, [r7, #4]
 801c060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c064:	4618      	mov	r0, r3
 801c066:	f002 f877 	bl	801e158 <free>
    pdev->pClassData = NULL;
 801c06a:	687b      	ldr	r3, [r7, #4]
 801c06c:	2200      	movs	r2, #0
 801c06e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 801c072:	7bfb      	ldrb	r3, [r7, #15]
}
 801c074:	4618      	mov	r0, r3
 801c076:	3710      	adds	r7, #16
 801c078:	46bd      	mov	sp, r7
 801c07a:	bd80      	pop	{r7, pc}

0801c07c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801c07c:	b580      	push	{r7, lr}
 801c07e:	b086      	sub	sp, #24
 801c080:	af00      	add	r7, sp, #0
 801c082:	6078      	str	r0, [r7, #4]
 801c084:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c086:	687b      	ldr	r3, [r7, #4]
 801c088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c08c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801c08e:	2300      	movs	r3, #0
 801c090:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 801c092:	2300      	movs	r3, #0
 801c094:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 801c096:	2300      	movs	r3, #0
 801c098:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801c09a:	683b      	ldr	r3, [r7, #0]
 801c09c:	781b      	ldrb	r3, [r3, #0]
 801c09e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c0a2:	2b00      	cmp	r3, #0
 801c0a4:	d039      	beq.n	801c11a <USBD_CDC_Setup+0x9e>
 801c0a6:	2b20      	cmp	r3, #32
 801c0a8:	d17c      	bne.n	801c1a4 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801c0aa:	683b      	ldr	r3, [r7, #0]
 801c0ac:	88db      	ldrh	r3, [r3, #6]
 801c0ae:	2b00      	cmp	r3, #0
 801c0b0:	d029      	beq.n	801c106 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 801c0b2:	683b      	ldr	r3, [r7, #0]
 801c0b4:	781b      	ldrb	r3, [r3, #0]
 801c0b6:	b25b      	sxtb	r3, r3
 801c0b8:	2b00      	cmp	r3, #0
 801c0ba:	da11      	bge.n	801c0e0 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801c0bc:	687b      	ldr	r3, [r7, #4]
 801c0be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c0c2:	689b      	ldr	r3, [r3, #8]
 801c0c4:	683a      	ldr	r2, [r7, #0]
 801c0c6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801c0c8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801c0ca:	683a      	ldr	r2, [r7, #0]
 801c0cc:	88d2      	ldrh	r2, [r2, #6]
 801c0ce:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801c0d0:	6939      	ldr	r1, [r7, #16]
 801c0d2:	683b      	ldr	r3, [r7, #0]
 801c0d4:	88db      	ldrh	r3, [r3, #6]
 801c0d6:	461a      	mov	r2, r3
 801c0d8:	6878      	ldr	r0, [r7, #4]
 801c0da:	f001 fa3f 	bl	801d55c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801c0de:	e068      	b.n	801c1b2 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 801c0e0:	683b      	ldr	r3, [r7, #0]
 801c0e2:	785a      	ldrb	r2, [r3, #1]
 801c0e4:	693b      	ldr	r3, [r7, #16]
 801c0e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 801c0ea:	683b      	ldr	r3, [r7, #0]
 801c0ec:	88db      	ldrh	r3, [r3, #6]
 801c0ee:	b2da      	uxtb	r2, r3
 801c0f0:	693b      	ldr	r3, [r7, #16]
 801c0f2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801c0f6:	6939      	ldr	r1, [r7, #16]
 801c0f8:	683b      	ldr	r3, [r7, #0]
 801c0fa:	88db      	ldrh	r3, [r3, #6]
 801c0fc:	461a      	mov	r2, r3
 801c0fe:	6878      	ldr	r0, [r7, #4]
 801c100:	f001 fa5a 	bl	801d5b8 <USBD_CtlPrepareRx>
      break;
 801c104:	e055      	b.n	801c1b2 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801c106:	687b      	ldr	r3, [r7, #4]
 801c108:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c10c:	689b      	ldr	r3, [r3, #8]
 801c10e:	683a      	ldr	r2, [r7, #0]
 801c110:	7850      	ldrb	r0, [r2, #1]
 801c112:	2200      	movs	r2, #0
 801c114:	6839      	ldr	r1, [r7, #0]
 801c116:	4798      	blx	r3
      break;
 801c118:	e04b      	b.n	801c1b2 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801c11a:	683b      	ldr	r3, [r7, #0]
 801c11c:	785b      	ldrb	r3, [r3, #1]
 801c11e:	2b0a      	cmp	r3, #10
 801c120:	d017      	beq.n	801c152 <USBD_CDC_Setup+0xd6>
 801c122:	2b0b      	cmp	r3, #11
 801c124:	d029      	beq.n	801c17a <USBD_CDC_Setup+0xfe>
 801c126:	2b00      	cmp	r3, #0
 801c128:	d133      	bne.n	801c192 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c12a:	687b      	ldr	r3, [r7, #4]
 801c12c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c130:	2b03      	cmp	r3, #3
 801c132:	d107      	bne.n	801c144 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801c134:	f107 030c 	add.w	r3, r7, #12
 801c138:	2202      	movs	r2, #2
 801c13a:	4619      	mov	r1, r3
 801c13c:	6878      	ldr	r0, [r7, #4]
 801c13e:	f001 fa0d 	bl	801d55c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801c142:	e02e      	b.n	801c1a2 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 801c144:	6839      	ldr	r1, [r7, #0]
 801c146:	6878      	ldr	r0, [r7, #4]
 801c148:	f001 f99d 	bl	801d486 <USBD_CtlError>
            ret = USBD_FAIL;
 801c14c:	2302      	movs	r3, #2
 801c14e:	75fb      	strb	r3, [r7, #23]
          break;
 801c150:	e027      	b.n	801c1a2 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c152:	687b      	ldr	r3, [r7, #4]
 801c154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c158:	2b03      	cmp	r3, #3
 801c15a:	d107      	bne.n	801c16c <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801c15c:	f107 030f 	add.w	r3, r7, #15
 801c160:	2201      	movs	r2, #1
 801c162:	4619      	mov	r1, r3
 801c164:	6878      	ldr	r0, [r7, #4]
 801c166:	f001 f9f9 	bl	801d55c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801c16a:	e01a      	b.n	801c1a2 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 801c16c:	6839      	ldr	r1, [r7, #0]
 801c16e:	6878      	ldr	r0, [r7, #4]
 801c170:	f001 f989 	bl	801d486 <USBD_CtlError>
            ret = USBD_FAIL;
 801c174:	2302      	movs	r3, #2
 801c176:	75fb      	strb	r3, [r7, #23]
          break;
 801c178:	e013      	b.n	801c1a2 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801c17a:	687b      	ldr	r3, [r7, #4]
 801c17c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c180:	2b03      	cmp	r3, #3
 801c182:	d00d      	beq.n	801c1a0 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 801c184:	6839      	ldr	r1, [r7, #0]
 801c186:	6878      	ldr	r0, [r7, #4]
 801c188:	f001 f97d 	bl	801d486 <USBD_CtlError>
            ret = USBD_FAIL;
 801c18c:	2302      	movs	r3, #2
 801c18e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 801c190:	e006      	b.n	801c1a0 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 801c192:	6839      	ldr	r1, [r7, #0]
 801c194:	6878      	ldr	r0, [r7, #4]
 801c196:	f001 f976 	bl	801d486 <USBD_CtlError>
          ret = USBD_FAIL;
 801c19a:	2302      	movs	r3, #2
 801c19c:	75fb      	strb	r3, [r7, #23]
          break;
 801c19e:	e000      	b.n	801c1a2 <USBD_CDC_Setup+0x126>
          break;
 801c1a0:	bf00      	nop
      }
      break;
 801c1a2:	e006      	b.n	801c1b2 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 801c1a4:	6839      	ldr	r1, [r7, #0]
 801c1a6:	6878      	ldr	r0, [r7, #4]
 801c1a8:	f001 f96d 	bl	801d486 <USBD_CtlError>
      ret = USBD_FAIL;
 801c1ac:	2302      	movs	r3, #2
 801c1ae:	75fb      	strb	r3, [r7, #23]
      break;
 801c1b0:	bf00      	nop
  }

  return ret;
 801c1b2:	7dfb      	ldrb	r3, [r7, #23]
}
 801c1b4:	4618      	mov	r0, r3
 801c1b6:	3718      	adds	r7, #24
 801c1b8:	46bd      	mov	sp, r7
 801c1ba:	bd80      	pop	{r7, pc}

0801c1bc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801c1bc:	b580      	push	{r7, lr}
 801c1be:	b084      	sub	sp, #16
 801c1c0:	af00      	add	r7, sp, #0
 801c1c2:	6078      	str	r0, [r7, #4]
 801c1c4:	460b      	mov	r3, r1
 801c1c6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801c1c8:	687b      	ldr	r3, [r7, #4]
 801c1ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c1ce:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801c1d0:	687b      	ldr	r3, [r7, #4]
 801c1d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c1d6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801c1d8:	687b      	ldr	r3, [r7, #4]
 801c1da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c1de:	2b00      	cmp	r3, #0
 801c1e0:	d03a      	beq.n	801c258 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801c1e2:	78fa      	ldrb	r2, [r7, #3]
 801c1e4:	6879      	ldr	r1, [r7, #4]
 801c1e6:	4613      	mov	r3, r2
 801c1e8:	009b      	lsls	r3, r3, #2
 801c1ea:	4413      	add	r3, r2
 801c1ec:	009b      	lsls	r3, r3, #2
 801c1ee:	440b      	add	r3, r1
 801c1f0:	331c      	adds	r3, #28
 801c1f2:	681b      	ldr	r3, [r3, #0]
 801c1f4:	2b00      	cmp	r3, #0
 801c1f6:	d029      	beq.n	801c24c <USBD_CDC_DataIn+0x90>
 801c1f8:	78fa      	ldrb	r2, [r7, #3]
 801c1fa:	6879      	ldr	r1, [r7, #4]
 801c1fc:	4613      	mov	r3, r2
 801c1fe:	009b      	lsls	r3, r3, #2
 801c200:	4413      	add	r3, r2
 801c202:	009b      	lsls	r3, r3, #2
 801c204:	440b      	add	r3, r1
 801c206:	331c      	adds	r3, #28
 801c208:	681a      	ldr	r2, [r3, #0]
 801c20a:	78f9      	ldrb	r1, [r7, #3]
 801c20c:	68b8      	ldr	r0, [r7, #8]
 801c20e:	460b      	mov	r3, r1
 801c210:	00db      	lsls	r3, r3, #3
 801c212:	1a5b      	subs	r3, r3, r1
 801c214:	009b      	lsls	r3, r3, #2
 801c216:	4403      	add	r3, r0
 801c218:	3344      	adds	r3, #68	; 0x44
 801c21a:	681b      	ldr	r3, [r3, #0]
 801c21c:	fbb2 f1f3 	udiv	r1, r2, r3
 801c220:	fb03 f301 	mul.w	r3, r3, r1
 801c224:	1ad3      	subs	r3, r2, r3
 801c226:	2b00      	cmp	r3, #0
 801c228:	d110      	bne.n	801c24c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801c22a:	78fa      	ldrb	r2, [r7, #3]
 801c22c:	6879      	ldr	r1, [r7, #4]
 801c22e:	4613      	mov	r3, r2
 801c230:	009b      	lsls	r3, r3, #2
 801c232:	4413      	add	r3, r2
 801c234:	009b      	lsls	r3, r3, #2
 801c236:	440b      	add	r3, r1
 801c238:	331c      	adds	r3, #28
 801c23a:	2200      	movs	r2, #0
 801c23c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801c23e:	78f9      	ldrb	r1, [r7, #3]
 801c240:	2300      	movs	r3, #0
 801c242:	2200      	movs	r2, #0
 801c244:	6878      	ldr	r0, [r7, #4]
 801c246:	f001 feb6 	bl	801dfb6 <USBD_LL_Transmit>
 801c24a:	e003      	b.n	801c254 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 801c24c:	68fb      	ldr	r3, [r7, #12]
 801c24e:	2200      	movs	r2, #0
 801c250:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 801c254:	2300      	movs	r3, #0
 801c256:	e000      	b.n	801c25a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 801c258:	2302      	movs	r3, #2
  }
}
 801c25a:	4618      	mov	r0, r3
 801c25c:	3710      	adds	r7, #16
 801c25e:	46bd      	mov	sp, r7
 801c260:	bd80      	pop	{r7, pc}

0801c262 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801c262:	b580      	push	{r7, lr}
 801c264:	b084      	sub	sp, #16
 801c266:	af00      	add	r7, sp, #0
 801c268:	6078      	str	r0, [r7, #4]
 801c26a:	460b      	mov	r3, r1
 801c26c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c26e:	687b      	ldr	r3, [r7, #4]
 801c270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c274:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801c276:	78fb      	ldrb	r3, [r7, #3]
 801c278:	4619      	mov	r1, r3
 801c27a:	6878      	ldr	r0, [r7, #4]
 801c27c:	f001 fee1 	bl	801e042 <USBD_LL_GetRxDataSize>
 801c280:	4602      	mov	r2, r0
 801c282:	68fb      	ldr	r3, [r7, #12]
 801c284:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801c288:	687b      	ldr	r3, [r7, #4]
 801c28a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c28e:	2b00      	cmp	r3, #0
 801c290:	d00d      	beq.n	801c2ae <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801c292:	687b      	ldr	r3, [r7, #4]
 801c294:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c298:	68db      	ldr	r3, [r3, #12]
 801c29a:	68fa      	ldr	r2, [r7, #12]
 801c29c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801c2a0:	68fa      	ldr	r2, [r7, #12]
 801c2a2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801c2a6:	4611      	mov	r1, r2
 801c2a8:	4798      	blx	r3

    return USBD_OK;
 801c2aa:	2300      	movs	r3, #0
 801c2ac:	e000      	b.n	801c2b0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 801c2ae:	2302      	movs	r3, #2
  }
}
 801c2b0:	4618      	mov	r0, r3
 801c2b2:	3710      	adds	r7, #16
 801c2b4:	46bd      	mov	sp, r7
 801c2b6:	bd80      	pop	{r7, pc}

0801c2b8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801c2b8:	b580      	push	{r7, lr}
 801c2ba:	b084      	sub	sp, #16
 801c2bc:	af00      	add	r7, sp, #0
 801c2be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c2c0:	687b      	ldr	r3, [r7, #4]
 801c2c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c2c6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801c2c8:	687b      	ldr	r3, [r7, #4]
 801c2ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c2ce:	2b00      	cmp	r3, #0
 801c2d0:	d015      	beq.n	801c2fe <USBD_CDC_EP0_RxReady+0x46>
 801c2d2:	68fb      	ldr	r3, [r7, #12]
 801c2d4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801c2d8:	2bff      	cmp	r3, #255	; 0xff
 801c2da:	d010      	beq.n	801c2fe <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801c2dc:	687b      	ldr	r3, [r7, #4]
 801c2de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c2e2:	689b      	ldr	r3, [r3, #8]
 801c2e4:	68fa      	ldr	r2, [r7, #12]
 801c2e6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 801c2ea:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801c2ec:	68fa      	ldr	r2, [r7, #12]
 801c2ee:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801c2f2:	b292      	uxth	r2, r2
 801c2f4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801c2f6:	68fb      	ldr	r3, [r7, #12]
 801c2f8:	22ff      	movs	r2, #255	; 0xff
 801c2fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 801c2fe:	2300      	movs	r3, #0
}
 801c300:	4618      	mov	r0, r3
 801c302:	3710      	adds	r7, #16
 801c304:	46bd      	mov	sp, r7
 801c306:	bd80      	pop	{r7, pc}

0801c308 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801c308:	b480      	push	{r7}
 801c30a:	b083      	sub	sp, #12
 801c30c:	af00      	add	r7, sp, #0
 801c30e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801c310:	687b      	ldr	r3, [r7, #4]
 801c312:	2243      	movs	r2, #67	; 0x43
 801c314:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801c316:	4b03      	ldr	r3, [pc, #12]	; (801c324 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 801c318:	4618      	mov	r0, r3
 801c31a:	370c      	adds	r7, #12
 801c31c:	46bd      	mov	sp, r7
 801c31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c322:	4770      	bx	lr
 801c324:	240000a0 	.word	0x240000a0

0801c328 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801c328:	b480      	push	{r7}
 801c32a:	b083      	sub	sp, #12
 801c32c:	af00      	add	r7, sp, #0
 801c32e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801c330:	687b      	ldr	r3, [r7, #4]
 801c332:	2243      	movs	r2, #67	; 0x43
 801c334:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801c336:	4b03      	ldr	r3, [pc, #12]	; (801c344 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 801c338:	4618      	mov	r0, r3
 801c33a:	370c      	adds	r7, #12
 801c33c:	46bd      	mov	sp, r7
 801c33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c342:	4770      	bx	lr
 801c344:	2400005c 	.word	0x2400005c

0801c348 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801c348:	b480      	push	{r7}
 801c34a:	b083      	sub	sp, #12
 801c34c:	af00      	add	r7, sp, #0
 801c34e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801c350:	687b      	ldr	r3, [r7, #4]
 801c352:	2243      	movs	r2, #67	; 0x43
 801c354:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801c356:	4b03      	ldr	r3, [pc, #12]	; (801c364 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 801c358:	4618      	mov	r0, r3
 801c35a:	370c      	adds	r7, #12
 801c35c:	46bd      	mov	sp, r7
 801c35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c362:	4770      	bx	lr
 801c364:	240000e4 	.word	0x240000e4

0801c368 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801c368:	b480      	push	{r7}
 801c36a:	b083      	sub	sp, #12
 801c36c:	af00      	add	r7, sp, #0
 801c36e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 801c370:	687b      	ldr	r3, [r7, #4]
 801c372:	220a      	movs	r2, #10
 801c374:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801c376:	4b03      	ldr	r3, [pc, #12]	; (801c384 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801c378:	4618      	mov	r0, r3
 801c37a:	370c      	adds	r7, #12
 801c37c:	46bd      	mov	sp, r7
 801c37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c382:	4770      	bx	lr
 801c384:	24000018 	.word	0x24000018

0801c388 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 801c388:	b480      	push	{r7}
 801c38a:	b085      	sub	sp, #20
 801c38c:	af00      	add	r7, sp, #0
 801c38e:	6078      	str	r0, [r7, #4]
 801c390:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801c392:	2302      	movs	r3, #2
 801c394:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 801c396:	683b      	ldr	r3, [r7, #0]
 801c398:	2b00      	cmp	r3, #0
 801c39a:	d005      	beq.n	801c3a8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 801c39c:	687b      	ldr	r3, [r7, #4]
 801c39e:	683a      	ldr	r2, [r7, #0]
 801c3a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 801c3a4:	2300      	movs	r3, #0
 801c3a6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801c3a8:	7bfb      	ldrb	r3, [r7, #15]
}
 801c3aa:	4618      	mov	r0, r3
 801c3ac:	3714      	adds	r7, #20
 801c3ae:	46bd      	mov	sp, r7
 801c3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3b4:	4770      	bx	lr

0801c3b6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801c3b6:	b480      	push	{r7}
 801c3b8:	b087      	sub	sp, #28
 801c3ba:	af00      	add	r7, sp, #0
 801c3bc:	60f8      	str	r0, [r7, #12]
 801c3be:	60b9      	str	r1, [r7, #8]
 801c3c0:	4613      	mov	r3, r2
 801c3c2:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c3c4:	68fb      	ldr	r3, [r7, #12]
 801c3c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c3ca:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801c3cc:	697b      	ldr	r3, [r7, #20]
 801c3ce:	68ba      	ldr	r2, [r7, #8]
 801c3d0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801c3d4:	88fa      	ldrh	r2, [r7, #6]
 801c3d6:	697b      	ldr	r3, [r7, #20]
 801c3d8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 801c3dc:	2300      	movs	r3, #0
}
 801c3de:	4618      	mov	r0, r3
 801c3e0:	371c      	adds	r7, #28
 801c3e2:	46bd      	mov	sp, r7
 801c3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3e8:	4770      	bx	lr

0801c3ea <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801c3ea:	b480      	push	{r7}
 801c3ec:	b085      	sub	sp, #20
 801c3ee:	af00      	add	r7, sp, #0
 801c3f0:	6078      	str	r0, [r7, #4]
 801c3f2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c3f4:	687b      	ldr	r3, [r7, #4]
 801c3f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c3fa:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801c3fc:	68fb      	ldr	r3, [r7, #12]
 801c3fe:	683a      	ldr	r2, [r7, #0]
 801c400:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 801c404:	2300      	movs	r3, #0
}
 801c406:	4618      	mov	r0, r3
 801c408:	3714      	adds	r7, #20
 801c40a:	46bd      	mov	sp, r7
 801c40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c410:	4770      	bx	lr

0801c412 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801c412:	b580      	push	{r7, lr}
 801c414:	b084      	sub	sp, #16
 801c416:	af00      	add	r7, sp, #0
 801c418:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c41a:	687b      	ldr	r3, [r7, #4]
 801c41c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c420:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 801c422:	687b      	ldr	r3, [r7, #4]
 801c424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c428:	2b00      	cmp	r3, #0
 801c42a:	d01c      	beq.n	801c466 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 801c42c:	68fb      	ldr	r3, [r7, #12]
 801c42e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801c432:	2b00      	cmp	r3, #0
 801c434:	d115      	bne.n	801c462 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801c436:	68fb      	ldr	r3, [r7, #12]
 801c438:	2201      	movs	r2, #1
 801c43a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801c43e:	68fb      	ldr	r3, [r7, #12]
 801c440:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 801c444:	687b      	ldr	r3, [r7, #4]
 801c446:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801c448:	68fb      	ldr	r3, [r7, #12]
 801c44a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 801c44e:	68fb      	ldr	r3, [r7, #12]
 801c450:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801c454:	b29b      	uxth	r3, r3
 801c456:	2181      	movs	r1, #129	; 0x81
 801c458:	6878      	ldr	r0, [r7, #4]
 801c45a:	f001 fdac 	bl	801dfb6 <USBD_LL_Transmit>

      return USBD_OK;
 801c45e:	2300      	movs	r3, #0
 801c460:	e002      	b.n	801c468 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 801c462:	2301      	movs	r3, #1
 801c464:	e000      	b.n	801c468 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 801c466:	2302      	movs	r3, #2
  }
}
 801c468:	4618      	mov	r0, r3
 801c46a:	3710      	adds	r7, #16
 801c46c:	46bd      	mov	sp, r7
 801c46e:	bd80      	pop	{r7, pc}

0801c470 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801c470:	b580      	push	{r7, lr}
 801c472:	b084      	sub	sp, #16
 801c474:	af00      	add	r7, sp, #0
 801c476:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c478:	687b      	ldr	r3, [r7, #4]
 801c47a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c47e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801c480:	687b      	ldr	r3, [r7, #4]
 801c482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c486:	2b00      	cmp	r3, #0
 801c488:	d017      	beq.n	801c4ba <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c48a:	687b      	ldr	r3, [r7, #4]
 801c48c:	7c1b      	ldrb	r3, [r3, #16]
 801c48e:	2b00      	cmp	r3, #0
 801c490:	d109      	bne.n	801c4a6 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801c492:	68fb      	ldr	r3, [r7, #12]
 801c494:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801c498:	f44f 7300 	mov.w	r3, #512	; 0x200
 801c49c:	2101      	movs	r1, #1
 801c49e:	6878      	ldr	r0, [r7, #4]
 801c4a0:	f001 fdac 	bl	801dffc <USBD_LL_PrepareReceive>
 801c4a4:	e007      	b.n	801c4b6 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801c4a6:	68fb      	ldr	r3, [r7, #12]
 801c4a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801c4ac:	2340      	movs	r3, #64	; 0x40
 801c4ae:	2101      	movs	r1, #1
 801c4b0:	6878      	ldr	r0, [r7, #4]
 801c4b2:	f001 fda3 	bl	801dffc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801c4b6:	2300      	movs	r3, #0
 801c4b8:	e000      	b.n	801c4bc <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 801c4ba:	2302      	movs	r3, #2
  }
}
 801c4bc:	4618      	mov	r0, r3
 801c4be:	3710      	adds	r7, #16
 801c4c0:	46bd      	mov	sp, r7
 801c4c2:	bd80      	pop	{r7, pc}

0801c4c4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801c4c4:	b580      	push	{r7, lr}
 801c4c6:	b084      	sub	sp, #16
 801c4c8:	af00      	add	r7, sp, #0
 801c4ca:	60f8      	str	r0, [r7, #12]
 801c4cc:	60b9      	str	r1, [r7, #8]
 801c4ce:	4613      	mov	r3, r2
 801c4d0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801c4d2:	68fb      	ldr	r3, [r7, #12]
 801c4d4:	2b00      	cmp	r3, #0
 801c4d6:	d101      	bne.n	801c4dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801c4d8:	2302      	movs	r3, #2
 801c4da:	e01a      	b.n	801c512 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801c4dc:	68fb      	ldr	r3, [r7, #12]
 801c4de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c4e2:	2b00      	cmp	r3, #0
 801c4e4:	d003      	beq.n	801c4ee <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 801c4e6:	68fb      	ldr	r3, [r7, #12]
 801c4e8:	2200      	movs	r2, #0
 801c4ea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801c4ee:	68bb      	ldr	r3, [r7, #8]
 801c4f0:	2b00      	cmp	r3, #0
 801c4f2:	d003      	beq.n	801c4fc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 801c4f4:	68fb      	ldr	r3, [r7, #12]
 801c4f6:	68ba      	ldr	r2, [r7, #8]
 801c4f8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801c4fc:	68fb      	ldr	r3, [r7, #12]
 801c4fe:	2201      	movs	r2, #1
 801c500:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801c504:	68fb      	ldr	r3, [r7, #12]
 801c506:	79fa      	ldrb	r2, [r7, #7]
 801c508:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801c50a:	68f8      	ldr	r0, [r7, #12]
 801c50c:	f001 fc1a 	bl	801dd44 <USBD_LL_Init>

  return USBD_OK;
 801c510:	2300      	movs	r3, #0
}
 801c512:	4618      	mov	r0, r3
 801c514:	3710      	adds	r7, #16
 801c516:	46bd      	mov	sp, r7
 801c518:	bd80      	pop	{r7, pc}

0801c51a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801c51a:	b480      	push	{r7}
 801c51c:	b085      	sub	sp, #20
 801c51e:	af00      	add	r7, sp, #0
 801c520:	6078      	str	r0, [r7, #4]
 801c522:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 801c524:	2300      	movs	r3, #0
 801c526:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 801c528:	683b      	ldr	r3, [r7, #0]
 801c52a:	2b00      	cmp	r3, #0
 801c52c:	d006      	beq.n	801c53c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801c52e:	687b      	ldr	r3, [r7, #4]
 801c530:	683a      	ldr	r2, [r7, #0]
 801c532:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 801c536:	2300      	movs	r3, #0
 801c538:	73fb      	strb	r3, [r7, #15]
 801c53a:	e001      	b.n	801c540 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801c53c:	2302      	movs	r3, #2
 801c53e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801c540:	7bfb      	ldrb	r3, [r7, #15]
}
 801c542:	4618      	mov	r0, r3
 801c544:	3714      	adds	r7, #20
 801c546:	46bd      	mov	sp, r7
 801c548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c54c:	4770      	bx	lr

0801c54e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801c54e:	b580      	push	{r7, lr}
 801c550:	b082      	sub	sp, #8
 801c552:	af00      	add	r7, sp, #0
 801c554:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801c556:	6878      	ldr	r0, [r7, #4]
 801c558:	f001 fc44 	bl	801dde4 <USBD_LL_Start>

  return USBD_OK;
 801c55c:	2300      	movs	r3, #0
}
 801c55e:	4618      	mov	r0, r3
 801c560:	3708      	adds	r7, #8
 801c562:	46bd      	mov	sp, r7
 801c564:	bd80      	pop	{r7, pc}

0801c566 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801c566:	b480      	push	{r7}
 801c568:	b083      	sub	sp, #12
 801c56a:	af00      	add	r7, sp, #0
 801c56c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801c56e:	2300      	movs	r3, #0
}
 801c570:	4618      	mov	r0, r3
 801c572:	370c      	adds	r7, #12
 801c574:	46bd      	mov	sp, r7
 801c576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c57a:	4770      	bx	lr

0801c57c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801c57c:	b580      	push	{r7, lr}
 801c57e:	b084      	sub	sp, #16
 801c580:	af00      	add	r7, sp, #0
 801c582:	6078      	str	r0, [r7, #4]
 801c584:	460b      	mov	r3, r1
 801c586:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801c588:	2302      	movs	r3, #2
 801c58a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 801c58c:	687b      	ldr	r3, [r7, #4]
 801c58e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c592:	2b00      	cmp	r3, #0
 801c594:	d00c      	beq.n	801c5b0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801c596:	687b      	ldr	r3, [r7, #4]
 801c598:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c59c:	681b      	ldr	r3, [r3, #0]
 801c59e:	78fa      	ldrb	r2, [r7, #3]
 801c5a0:	4611      	mov	r1, r2
 801c5a2:	6878      	ldr	r0, [r7, #4]
 801c5a4:	4798      	blx	r3
 801c5a6:	4603      	mov	r3, r0
 801c5a8:	2b00      	cmp	r3, #0
 801c5aa:	d101      	bne.n	801c5b0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 801c5ac:	2300      	movs	r3, #0
 801c5ae:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 801c5b0:	7bfb      	ldrb	r3, [r7, #15]
}
 801c5b2:	4618      	mov	r0, r3
 801c5b4:	3710      	adds	r7, #16
 801c5b6:	46bd      	mov	sp, r7
 801c5b8:	bd80      	pop	{r7, pc}

0801c5ba <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801c5ba:	b580      	push	{r7, lr}
 801c5bc:	b082      	sub	sp, #8
 801c5be:	af00      	add	r7, sp, #0
 801c5c0:	6078      	str	r0, [r7, #4]
 801c5c2:	460b      	mov	r3, r1
 801c5c4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801c5c6:	687b      	ldr	r3, [r7, #4]
 801c5c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c5cc:	685b      	ldr	r3, [r3, #4]
 801c5ce:	78fa      	ldrb	r2, [r7, #3]
 801c5d0:	4611      	mov	r1, r2
 801c5d2:	6878      	ldr	r0, [r7, #4]
 801c5d4:	4798      	blx	r3

  return USBD_OK;
 801c5d6:	2300      	movs	r3, #0
}
 801c5d8:	4618      	mov	r0, r3
 801c5da:	3708      	adds	r7, #8
 801c5dc:	46bd      	mov	sp, r7
 801c5de:	bd80      	pop	{r7, pc}

0801c5e0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801c5e0:	b580      	push	{r7, lr}
 801c5e2:	b082      	sub	sp, #8
 801c5e4:	af00      	add	r7, sp, #0
 801c5e6:	6078      	str	r0, [r7, #4]
 801c5e8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801c5ea:	687b      	ldr	r3, [r7, #4]
 801c5ec:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 801c5f0:	6839      	ldr	r1, [r7, #0]
 801c5f2:	4618      	mov	r0, r3
 801c5f4:	f000 ff0a 	bl	801d40c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801c5f8:	687b      	ldr	r3, [r7, #4]
 801c5fa:	2201      	movs	r2, #1
 801c5fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801c600:	687b      	ldr	r3, [r7, #4]
 801c602:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801c606:	461a      	mov	r2, r3
 801c608:	687b      	ldr	r3, [r7, #4]
 801c60a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801c60e:	687b      	ldr	r3, [r7, #4]
 801c610:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 801c614:	f003 031f 	and.w	r3, r3, #31
 801c618:	2b01      	cmp	r3, #1
 801c61a:	d00c      	beq.n	801c636 <USBD_LL_SetupStage+0x56>
 801c61c:	2b01      	cmp	r3, #1
 801c61e:	d302      	bcc.n	801c626 <USBD_LL_SetupStage+0x46>
 801c620:	2b02      	cmp	r3, #2
 801c622:	d010      	beq.n	801c646 <USBD_LL_SetupStage+0x66>
 801c624:	e017      	b.n	801c656 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801c626:	687b      	ldr	r3, [r7, #4]
 801c628:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 801c62c:	4619      	mov	r1, r3
 801c62e:	6878      	ldr	r0, [r7, #4]
 801c630:	f000 fa0a 	bl	801ca48 <USBD_StdDevReq>
      break;
 801c634:	e01a      	b.n	801c66c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801c636:	687b      	ldr	r3, [r7, #4]
 801c638:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 801c63c:	4619      	mov	r1, r3
 801c63e:	6878      	ldr	r0, [r7, #4]
 801c640:	f000 fa6c 	bl	801cb1c <USBD_StdItfReq>
      break;
 801c644:	e012      	b.n	801c66c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801c646:	687b      	ldr	r3, [r7, #4]
 801c648:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 801c64c:	4619      	mov	r1, r3
 801c64e:	6878      	ldr	r0, [r7, #4]
 801c650:	f000 faaa 	bl	801cba8 <USBD_StdEPReq>
      break;
 801c654:	e00a      	b.n	801c66c <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801c656:	687b      	ldr	r3, [r7, #4]
 801c658:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 801c65c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801c660:	b2db      	uxtb	r3, r3
 801c662:	4619      	mov	r1, r3
 801c664:	6878      	ldr	r0, [r7, #4]
 801c666:	f001 fc1d 	bl	801dea4 <USBD_LL_StallEP>
      break;
 801c66a:	bf00      	nop
  }

  return USBD_OK;
 801c66c:	2300      	movs	r3, #0
}
 801c66e:	4618      	mov	r0, r3
 801c670:	3708      	adds	r7, #8
 801c672:	46bd      	mov	sp, r7
 801c674:	bd80      	pop	{r7, pc}

0801c676 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801c676:	b580      	push	{r7, lr}
 801c678:	b086      	sub	sp, #24
 801c67a:	af00      	add	r7, sp, #0
 801c67c:	60f8      	str	r0, [r7, #12]
 801c67e:	460b      	mov	r3, r1
 801c680:	607a      	str	r2, [r7, #4]
 801c682:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801c684:	7afb      	ldrb	r3, [r7, #11]
 801c686:	2b00      	cmp	r3, #0
 801c688:	d14b      	bne.n	801c722 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 801c68a:	68fb      	ldr	r3, [r7, #12]
 801c68c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801c690:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801c692:	68fb      	ldr	r3, [r7, #12]
 801c694:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801c698:	2b03      	cmp	r3, #3
 801c69a:	d134      	bne.n	801c706 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 801c69c:	697b      	ldr	r3, [r7, #20]
 801c69e:	68da      	ldr	r2, [r3, #12]
 801c6a0:	697b      	ldr	r3, [r7, #20]
 801c6a2:	691b      	ldr	r3, [r3, #16]
 801c6a4:	429a      	cmp	r2, r3
 801c6a6:	d919      	bls.n	801c6dc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801c6a8:	697b      	ldr	r3, [r7, #20]
 801c6aa:	68da      	ldr	r2, [r3, #12]
 801c6ac:	697b      	ldr	r3, [r7, #20]
 801c6ae:	691b      	ldr	r3, [r3, #16]
 801c6b0:	1ad2      	subs	r2, r2, r3
 801c6b2:	697b      	ldr	r3, [r7, #20]
 801c6b4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801c6b6:	697b      	ldr	r3, [r7, #20]
 801c6b8:	68da      	ldr	r2, [r3, #12]
 801c6ba:	697b      	ldr	r3, [r7, #20]
 801c6bc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801c6be:	429a      	cmp	r2, r3
 801c6c0:	d203      	bcs.n	801c6ca <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801c6c2:	697b      	ldr	r3, [r7, #20]
 801c6c4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801c6c6:	b29b      	uxth	r3, r3
 801c6c8:	e002      	b.n	801c6d0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801c6ca:	697b      	ldr	r3, [r7, #20]
 801c6cc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801c6ce:	b29b      	uxth	r3, r3
 801c6d0:	461a      	mov	r2, r3
 801c6d2:	6879      	ldr	r1, [r7, #4]
 801c6d4:	68f8      	ldr	r0, [r7, #12]
 801c6d6:	f000 ff8d 	bl	801d5f4 <USBD_CtlContinueRx>
 801c6da:	e038      	b.n	801c74e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801c6dc:	68fb      	ldr	r3, [r7, #12]
 801c6de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c6e2:	691b      	ldr	r3, [r3, #16]
 801c6e4:	2b00      	cmp	r3, #0
 801c6e6:	d00a      	beq.n	801c6fe <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801c6e8:	68fb      	ldr	r3, [r7, #12]
 801c6ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801c6ee:	2b03      	cmp	r3, #3
 801c6f0:	d105      	bne.n	801c6fe <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801c6f2:	68fb      	ldr	r3, [r7, #12]
 801c6f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c6f8:	691b      	ldr	r3, [r3, #16]
 801c6fa:	68f8      	ldr	r0, [r7, #12]
 801c6fc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801c6fe:	68f8      	ldr	r0, [r7, #12]
 801c700:	f000 ff8a 	bl	801d618 <USBD_CtlSendStatus>
 801c704:	e023      	b.n	801c74e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801c706:	68fb      	ldr	r3, [r7, #12]
 801c708:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801c70c:	2b05      	cmp	r3, #5
 801c70e:	d11e      	bne.n	801c74e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801c710:	68fb      	ldr	r3, [r7, #12]
 801c712:	2200      	movs	r2, #0
 801c714:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 801c718:	2100      	movs	r1, #0
 801c71a:	68f8      	ldr	r0, [r7, #12]
 801c71c:	f001 fbc2 	bl	801dea4 <USBD_LL_StallEP>
 801c720:	e015      	b.n	801c74e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801c722:	68fb      	ldr	r3, [r7, #12]
 801c724:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c728:	699b      	ldr	r3, [r3, #24]
 801c72a:	2b00      	cmp	r3, #0
 801c72c:	d00d      	beq.n	801c74a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801c72e:	68fb      	ldr	r3, [r7, #12]
 801c730:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 801c734:	2b03      	cmp	r3, #3
 801c736:	d108      	bne.n	801c74a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801c738:	68fb      	ldr	r3, [r7, #12]
 801c73a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c73e:	699b      	ldr	r3, [r3, #24]
 801c740:	7afa      	ldrb	r2, [r7, #11]
 801c742:	4611      	mov	r1, r2
 801c744:	68f8      	ldr	r0, [r7, #12]
 801c746:	4798      	blx	r3
 801c748:	e001      	b.n	801c74e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801c74a:	2302      	movs	r3, #2
 801c74c:	e000      	b.n	801c750 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 801c74e:	2300      	movs	r3, #0
}
 801c750:	4618      	mov	r0, r3
 801c752:	3718      	adds	r7, #24
 801c754:	46bd      	mov	sp, r7
 801c756:	bd80      	pop	{r7, pc}

0801c758 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801c758:	b580      	push	{r7, lr}
 801c75a:	b086      	sub	sp, #24
 801c75c:	af00      	add	r7, sp, #0
 801c75e:	60f8      	str	r0, [r7, #12]
 801c760:	460b      	mov	r3, r1
 801c762:	607a      	str	r2, [r7, #4]
 801c764:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801c766:	7afb      	ldrb	r3, [r7, #11]
 801c768:	2b00      	cmp	r3, #0
 801c76a:	d17f      	bne.n	801c86c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 801c76c:	68fb      	ldr	r3, [r7, #12]
 801c76e:	3314      	adds	r3, #20
 801c770:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801c772:	68fb      	ldr	r3, [r7, #12]
 801c774:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801c778:	2b02      	cmp	r3, #2
 801c77a:	d15c      	bne.n	801c836 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 801c77c:	697b      	ldr	r3, [r7, #20]
 801c77e:	68da      	ldr	r2, [r3, #12]
 801c780:	697b      	ldr	r3, [r7, #20]
 801c782:	691b      	ldr	r3, [r3, #16]
 801c784:	429a      	cmp	r2, r3
 801c786:	d915      	bls.n	801c7b4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 801c788:	697b      	ldr	r3, [r7, #20]
 801c78a:	68da      	ldr	r2, [r3, #12]
 801c78c:	697b      	ldr	r3, [r7, #20]
 801c78e:	691b      	ldr	r3, [r3, #16]
 801c790:	1ad2      	subs	r2, r2, r3
 801c792:	697b      	ldr	r3, [r7, #20]
 801c794:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801c796:	697b      	ldr	r3, [r7, #20]
 801c798:	68db      	ldr	r3, [r3, #12]
 801c79a:	b29b      	uxth	r3, r3
 801c79c:	461a      	mov	r2, r3
 801c79e:	6879      	ldr	r1, [r7, #4]
 801c7a0:	68f8      	ldr	r0, [r7, #12]
 801c7a2:	f000 fef7 	bl	801d594 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801c7a6:	2300      	movs	r3, #0
 801c7a8:	2200      	movs	r2, #0
 801c7aa:	2100      	movs	r1, #0
 801c7ac:	68f8      	ldr	r0, [r7, #12]
 801c7ae:	f001 fc25 	bl	801dffc <USBD_LL_PrepareReceive>
 801c7b2:	e04e      	b.n	801c852 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801c7b4:	697b      	ldr	r3, [r7, #20]
 801c7b6:	689b      	ldr	r3, [r3, #8]
 801c7b8:	697a      	ldr	r2, [r7, #20]
 801c7ba:	6912      	ldr	r2, [r2, #16]
 801c7bc:	fbb3 f1f2 	udiv	r1, r3, r2
 801c7c0:	fb02 f201 	mul.w	r2, r2, r1
 801c7c4:	1a9b      	subs	r3, r3, r2
 801c7c6:	2b00      	cmp	r3, #0
 801c7c8:	d11c      	bne.n	801c804 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 801c7ca:	697b      	ldr	r3, [r7, #20]
 801c7cc:	689a      	ldr	r2, [r3, #8]
 801c7ce:	697b      	ldr	r3, [r7, #20]
 801c7d0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801c7d2:	429a      	cmp	r2, r3
 801c7d4:	d316      	bcc.n	801c804 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 801c7d6:	697b      	ldr	r3, [r7, #20]
 801c7d8:	689a      	ldr	r2, [r3, #8]
 801c7da:	68fb      	ldr	r3, [r7, #12]
 801c7dc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801c7e0:	429a      	cmp	r2, r3
 801c7e2:	d20f      	bcs.n	801c804 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801c7e4:	2200      	movs	r2, #0
 801c7e6:	2100      	movs	r1, #0
 801c7e8:	68f8      	ldr	r0, [r7, #12]
 801c7ea:	f000 fed3 	bl	801d594 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801c7ee:	68fb      	ldr	r3, [r7, #12]
 801c7f0:	2200      	movs	r2, #0
 801c7f2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801c7f6:	2300      	movs	r3, #0
 801c7f8:	2200      	movs	r2, #0
 801c7fa:	2100      	movs	r1, #0
 801c7fc:	68f8      	ldr	r0, [r7, #12]
 801c7fe:	f001 fbfd 	bl	801dffc <USBD_LL_PrepareReceive>
 801c802:	e026      	b.n	801c852 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801c804:	68fb      	ldr	r3, [r7, #12]
 801c806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c80a:	68db      	ldr	r3, [r3, #12]
 801c80c:	2b00      	cmp	r3, #0
 801c80e:	d00a      	beq.n	801c826 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801c810:	68fb      	ldr	r3, [r7, #12]
 801c812:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801c816:	2b03      	cmp	r3, #3
 801c818:	d105      	bne.n	801c826 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801c81a:	68fb      	ldr	r3, [r7, #12]
 801c81c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c820:	68db      	ldr	r3, [r3, #12]
 801c822:	68f8      	ldr	r0, [r7, #12]
 801c824:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801c826:	2180      	movs	r1, #128	; 0x80
 801c828:	68f8      	ldr	r0, [r7, #12]
 801c82a:	f001 fb3b 	bl	801dea4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801c82e:	68f8      	ldr	r0, [r7, #12]
 801c830:	f000 ff05 	bl	801d63e <USBD_CtlReceiveStatus>
 801c834:	e00d      	b.n	801c852 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801c836:	68fb      	ldr	r3, [r7, #12]
 801c838:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801c83c:	2b04      	cmp	r3, #4
 801c83e:	d004      	beq.n	801c84a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801c840:	68fb      	ldr	r3, [r7, #12]
 801c842:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801c846:	2b00      	cmp	r3, #0
 801c848:	d103      	bne.n	801c852 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801c84a:	2180      	movs	r1, #128	; 0x80
 801c84c:	68f8      	ldr	r0, [r7, #12]
 801c84e:	f001 fb29 	bl	801dea4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801c852:	68fb      	ldr	r3, [r7, #12]
 801c854:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801c858:	2b01      	cmp	r3, #1
 801c85a:	d11d      	bne.n	801c898 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 801c85c:	68f8      	ldr	r0, [r7, #12]
 801c85e:	f7ff fe82 	bl	801c566 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801c862:	68fb      	ldr	r3, [r7, #12]
 801c864:	2200      	movs	r2, #0
 801c866:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801c86a:	e015      	b.n	801c898 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801c86c:	68fb      	ldr	r3, [r7, #12]
 801c86e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c872:	695b      	ldr	r3, [r3, #20]
 801c874:	2b00      	cmp	r3, #0
 801c876:	d00d      	beq.n	801c894 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801c878:	68fb      	ldr	r3, [r7, #12]
 801c87a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 801c87e:	2b03      	cmp	r3, #3
 801c880:	d108      	bne.n	801c894 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801c882:	68fb      	ldr	r3, [r7, #12]
 801c884:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c888:	695b      	ldr	r3, [r3, #20]
 801c88a:	7afa      	ldrb	r2, [r7, #11]
 801c88c:	4611      	mov	r1, r2
 801c88e:	68f8      	ldr	r0, [r7, #12]
 801c890:	4798      	blx	r3
 801c892:	e001      	b.n	801c898 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801c894:	2302      	movs	r3, #2
 801c896:	e000      	b.n	801c89a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 801c898:	2300      	movs	r3, #0
}
 801c89a:	4618      	mov	r0, r3
 801c89c:	3718      	adds	r7, #24
 801c89e:	46bd      	mov	sp, r7
 801c8a0:	bd80      	pop	{r7, pc}

0801c8a2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801c8a2:	b580      	push	{r7, lr}
 801c8a4:	b082      	sub	sp, #8
 801c8a6:	af00      	add	r7, sp, #0
 801c8a8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801c8aa:	2340      	movs	r3, #64	; 0x40
 801c8ac:	2200      	movs	r2, #0
 801c8ae:	2100      	movs	r1, #0
 801c8b0:	6878      	ldr	r0, [r7, #4]
 801c8b2:	f001 fab2 	bl	801de1a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801c8b6:	687b      	ldr	r3, [r7, #4]
 801c8b8:	2201      	movs	r2, #1
 801c8ba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801c8be:	687b      	ldr	r3, [r7, #4]
 801c8c0:	2240      	movs	r2, #64	; 0x40
 801c8c2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801c8c6:	2340      	movs	r3, #64	; 0x40
 801c8c8:	2200      	movs	r2, #0
 801c8ca:	2180      	movs	r1, #128	; 0x80
 801c8cc:	6878      	ldr	r0, [r7, #4]
 801c8ce:	f001 faa4 	bl	801de1a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801c8d2:	687b      	ldr	r3, [r7, #4]
 801c8d4:	2201      	movs	r2, #1
 801c8d6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801c8d8:	687b      	ldr	r3, [r7, #4]
 801c8da:	2240      	movs	r2, #64	; 0x40
 801c8dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801c8de:	687b      	ldr	r3, [r7, #4]
 801c8e0:	2201      	movs	r2, #1
 801c8e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801c8e6:	687b      	ldr	r3, [r7, #4]
 801c8e8:	2200      	movs	r2, #0
 801c8ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801c8ee:	687b      	ldr	r3, [r7, #4]
 801c8f0:	2200      	movs	r2, #0
 801c8f2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801c8f4:	687b      	ldr	r3, [r7, #4]
 801c8f6:	2200      	movs	r2, #0
 801c8f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 801c8fc:	687b      	ldr	r3, [r7, #4]
 801c8fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c902:	2b00      	cmp	r3, #0
 801c904:	d009      	beq.n	801c91a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801c906:	687b      	ldr	r3, [r7, #4]
 801c908:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c90c:	685b      	ldr	r3, [r3, #4]
 801c90e:	687a      	ldr	r2, [r7, #4]
 801c910:	6852      	ldr	r2, [r2, #4]
 801c912:	b2d2      	uxtb	r2, r2
 801c914:	4611      	mov	r1, r2
 801c916:	6878      	ldr	r0, [r7, #4]
 801c918:	4798      	blx	r3
  }

  return USBD_OK;
 801c91a:	2300      	movs	r3, #0
}
 801c91c:	4618      	mov	r0, r3
 801c91e:	3708      	adds	r7, #8
 801c920:	46bd      	mov	sp, r7
 801c922:	bd80      	pop	{r7, pc}

0801c924 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801c924:	b480      	push	{r7}
 801c926:	b083      	sub	sp, #12
 801c928:	af00      	add	r7, sp, #0
 801c92a:	6078      	str	r0, [r7, #4]
 801c92c:	460b      	mov	r3, r1
 801c92e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801c930:	687b      	ldr	r3, [r7, #4]
 801c932:	78fa      	ldrb	r2, [r7, #3]
 801c934:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801c936:	2300      	movs	r3, #0
}
 801c938:	4618      	mov	r0, r3
 801c93a:	370c      	adds	r7, #12
 801c93c:	46bd      	mov	sp, r7
 801c93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c942:	4770      	bx	lr

0801c944 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801c944:	b480      	push	{r7}
 801c946:	b083      	sub	sp, #12
 801c948:	af00      	add	r7, sp, #0
 801c94a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801c94c:	687b      	ldr	r3, [r7, #4]
 801c94e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 801c952:	687b      	ldr	r3, [r7, #4]
 801c954:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801c958:	687b      	ldr	r3, [r7, #4]
 801c95a:	2204      	movs	r2, #4
 801c95c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801c960:	2300      	movs	r3, #0
}
 801c962:	4618      	mov	r0, r3
 801c964:	370c      	adds	r7, #12
 801c966:	46bd      	mov	sp, r7
 801c968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c96c:	4770      	bx	lr

0801c96e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801c96e:	b480      	push	{r7}
 801c970:	b083      	sub	sp, #12
 801c972:	af00      	add	r7, sp, #0
 801c974:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801c976:	687b      	ldr	r3, [r7, #4]
 801c978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c97c:	2b04      	cmp	r3, #4
 801c97e:	d105      	bne.n	801c98c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 801c980:	687b      	ldr	r3, [r7, #4]
 801c982:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 801c986:	687b      	ldr	r3, [r7, #4]
 801c988:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801c98c:	2300      	movs	r3, #0
}
 801c98e:	4618      	mov	r0, r3
 801c990:	370c      	adds	r7, #12
 801c992:	46bd      	mov	sp, r7
 801c994:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c998:	4770      	bx	lr

0801c99a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801c99a:	b580      	push	{r7, lr}
 801c99c:	b082      	sub	sp, #8
 801c99e:	af00      	add	r7, sp, #0
 801c9a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c9a2:	687b      	ldr	r3, [r7, #4]
 801c9a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c9a8:	2b03      	cmp	r3, #3
 801c9aa:	d10b      	bne.n	801c9c4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 801c9ac:	687b      	ldr	r3, [r7, #4]
 801c9ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c9b2:	69db      	ldr	r3, [r3, #28]
 801c9b4:	2b00      	cmp	r3, #0
 801c9b6:	d005      	beq.n	801c9c4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 801c9b8:	687b      	ldr	r3, [r7, #4]
 801c9ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c9be:	69db      	ldr	r3, [r3, #28]
 801c9c0:	6878      	ldr	r0, [r7, #4]
 801c9c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801c9c4:	2300      	movs	r3, #0
}
 801c9c6:	4618      	mov	r0, r3
 801c9c8:	3708      	adds	r7, #8
 801c9ca:	46bd      	mov	sp, r7
 801c9cc:	bd80      	pop	{r7, pc}

0801c9ce <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801c9ce:	b480      	push	{r7}
 801c9d0:	b083      	sub	sp, #12
 801c9d2:	af00      	add	r7, sp, #0
 801c9d4:	6078      	str	r0, [r7, #4]
 801c9d6:	460b      	mov	r3, r1
 801c9d8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 801c9da:	2300      	movs	r3, #0
}
 801c9dc:	4618      	mov	r0, r3
 801c9de:	370c      	adds	r7, #12
 801c9e0:	46bd      	mov	sp, r7
 801c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9e6:	4770      	bx	lr

0801c9e8 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801c9e8:	b480      	push	{r7}
 801c9ea:	b083      	sub	sp, #12
 801c9ec:	af00      	add	r7, sp, #0
 801c9ee:	6078      	str	r0, [r7, #4]
 801c9f0:	460b      	mov	r3, r1
 801c9f2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 801c9f4:	2300      	movs	r3, #0
}
 801c9f6:	4618      	mov	r0, r3
 801c9f8:	370c      	adds	r7, #12
 801c9fa:	46bd      	mov	sp, r7
 801c9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca00:	4770      	bx	lr

0801ca02 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801ca02:	b480      	push	{r7}
 801ca04:	b083      	sub	sp, #12
 801ca06:	af00      	add	r7, sp, #0
 801ca08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801ca0a:	2300      	movs	r3, #0
}
 801ca0c:	4618      	mov	r0, r3
 801ca0e:	370c      	adds	r7, #12
 801ca10:	46bd      	mov	sp, r7
 801ca12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca16:	4770      	bx	lr

0801ca18 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801ca18:	b580      	push	{r7, lr}
 801ca1a:	b082      	sub	sp, #8
 801ca1c:	af00      	add	r7, sp, #0
 801ca1e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801ca20:	687b      	ldr	r3, [r7, #4]
 801ca22:	2201      	movs	r2, #1
 801ca24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801ca28:	687b      	ldr	r3, [r7, #4]
 801ca2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ca2e:	685b      	ldr	r3, [r3, #4]
 801ca30:	687a      	ldr	r2, [r7, #4]
 801ca32:	6852      	ldr	r2, [r2, #4]
 801ca34:	b2d2      	uxtb	r2, r2
 801ca36:	4611      	mov	r1, r2
 801ca38:	6878      	ldr	r0, [r7, #4]
 801ca3a:	4798      	blx	r3

  return USBD_OK;
 801ca3c:	2300      	movs	r3, #0
}
 801ca3e:	4618      	mov	r0, r3
 801ca40:	3708      	adds	r7, #8
 801ca42:	46bd      	mov	sp, r7
 801ca44:	bd80      	pop	{r7, pc}
	...

0801ca48 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801ca48:	b580      	push	{r7, lr}
 801ca4a:	b084      	sub	sp, #16
 801ca4c:	af00      	add	r7, sp, #0
 801ca4e:	6078      	str	r0, [r7, #4]
 801ca50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801ca52:	2300      	movs	r3, #0
 801ca54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801ca56:	683b      	ldr	r3, [r7, #0]
 801ca58:	781b      	ldrb	r3, [r3, #0]
 801ca5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801ca5e:	2b20      	cmp	r3, #32
 801ca60:	d004      	beq.n	801ca6c <USBD_StdDevReq+0x24>
 801ca62:	2b40      	cmp	r3, #64	; 0x40
 801ca64:	d002      	beq.n	801ca6c <USBD_StdDevReq+0x24>
 801ca66:	2b00      	cmp	r3, #0
 801ca68:	d008      	beq.n	801ca7c <USBD_StdDevReq+0x34>
 801ca6a:	e04c      	b.n	801cb06 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801ca6c:	687b      	ldr	r3, [r7, #4]
 801ca6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ca72:	689b      	ldr	r3, [r3, #8]
 801ca74:	6839      	ldr	r1, [r7, #0]
 801ca76:	6878      	ldr	r0, [r7, #4]
 801ca78:	4798      	blx	r3
      break;
 801ca7a:	e049      	b.n	801cb10 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801ca7c:	683b      	ldr	r3, [r7, #0]
 801ca7e:	785b      	ldrb	r3, [r3, #1]
 801ca80:	2b09      	cmp	r3, #9
 801ca82:	d83a      	bhi.n	801cafa <USBD_StdDevReq+0xb2>
 801ca84:	a201      	add	r2, pc, #4	; (adr r2, 801ca8c <USBD_StdDevReq+0x44>)
 801ca86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ca8a:	bf00      	nop
 801ca8c:	0801cadd 	.word	0x0801cadd
 801ca90:	0801caf1 	.word	0x0801caf1
 801ca94:	0801cafb 	.word	0x0801cafb
 801ca98:	0801cae7 	.word	0x0801cae7
 801ca9c:	0801cafb 	.word	0x0801cafb
 801caa0:	0801cabf 	.word	0x0801cabf
 801caa4:	0801cab5 	.word	0x0801cab5
 801caa8:	0801cafb 	.word	0x0801cafb
 801caac:	0801cad3 	.word	0x0801cad3
 801cab0:	0801cac9 	.word	0x0801cac9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801cab4:	6839      	ldr	r1, [r7, #0]
 801cab6:	6878      	ldr	r0, [r7, #4]
 801cab8:	f000 f9d4 	bl	801ce64 <USBD_GetDescriptor>
          break;
 801cabc:	e022      	b.n	801cb04 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801cabe:	6839      	ldr	r1, [r7, #0]
 801cac0:	6878      	ldr	r0, [r7, #4]
 801cac2:	f000 fb37 	bl	801d134 <USBD_SetAddress>
          break;
 801cac6:	e01d      	b.n	801cb04 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801cac8:	6839      	ldr	r1, [r7, #0]
 801caca:	6878      	ldr	r0, [r7, #4]
 801cacc:	f000 fb74 	bl	801d1b8 <USBD_SetConfig>
          break;
 801cad0:	e018      	b.n	801cb04 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801cad2:	6839      	ldr	r1, [r7, #0]
 801cad4:	6878      	ldr	r0, [r7, #4]
 801cad6:	f000 fbfd 	bl	801d2d4 <USBD_GetConfig>
          break;
 801cada:	e013      	b.n	801cb04 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801cadc:	6839      	ldr	r1, [r7, #0]
 801cade:	6878      	ldr	r0, [r7, #4]
 801cae0:	f000 fc2c 	bl	801d33c <USBD_GetStatus>
          break;
 801cae4:	e00e      	b.n	801cb04 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801cae6:	6839      	ldr	r1, [r7, #0]
 801cae8:	6878      	ldr	r0, [r7, #4]
 801caea:	f000 fc5a 	bl	801d3a2 <USBD_SetFeature>
          break;
 801caee:	e009      	b.n	801cb04 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801caf0:	6839      	ldr	r1, [r7, #0]
 801caf2:	6878      	ldr	r0, [r7, #4]
 801caf4:	f000 fc69 	bl	801d3ca <USBD_ClrFeature>
          break;
 801caf8:	e004      	b.n	801cb04 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 801cafa:	6839      	ldr	r1, [r7, #0]
 801cafc:	6878      	ldr	r0, [r7, #4]
 801cafe:	f000 fcc2 	bl	801d486 <USBD_CtlError>
          break;
 801cb02:	bf00      	nop
      }
      break;
 801cb04:	e004      	b.n	801cb10 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 801cb06:	6839      	ldr	r1, [r7, #0]
 801cb08:	6878      	ldr	r0, [r7, #4]
 801cb0a:	f000 fcbc 	bl	801d486 <USBD_CtlError>
      break;
 801cb0e:	bf00      	nop
  }

  return ret;
 801cb10:	7bfb      	ldrb	r3, [r7, #15]
}
 801cb12:	4618      	mov	r0, r3
 801cb14:	3710      	adds	r7, #16
 801cb16:	46bd      	mov	sp, r7
 801cb18:	bd80      	pop	{r7, pc}
 801cb1a:	bf00      	nop

0801cb1c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801cb1c:	b580      	push	{r7, lr}
 801cb1e:	b084      	sub	sp, #16
 801cb20:	af00      	add	r7, sp, #0
 801cb22:	6078      	str	r0, [r7, #4]
 801cb24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801cb26:	2300      	movs	r3, #0
 801cb28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801cb2a:	683b      	ldr	r3, [r7, #0]
 801cb2c:	781b      	ldrb	r3, [r3, #0]
 801cb2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801cb32:	2b20      	cmp	r3, #32
 801cb34:	d003      	beq.n	801cb3e <USBD_StdItfReq+0x22>
 801cb36:	2b40      	cmp	r3, #64	; 0x40
 801cb38:	d001      	beq.n	801cb3e <USBD_StdItfReq+0x22>
 801cb3a:	2b00      	cmp	r3, #0
 801cb3c:	d12a      	bne.n	801cb94 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801cb3e:	687b      	ldr	r3, [r7, #4]
 801cb40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801cb44:	3b01      	subs	r3, #1
 801cb46:	2b02      	cmp	r3, #2
 801cb48:	d81d      	bhi.n	801cb86 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801cb4a:	683b      	ldr	r3, [r7, #0]
 801cb4c:	889b      	ldrh	r3, [r3, #4]
 801cb4e:	b2db      	uxtb	r3, r3
 801cb50:	2b01      	cmp	r3, #1
 801cb52:	d813      	bhi.n	801cb7c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801cb54:	687b      	ldr	r3, [r7, #4]
 801cb56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cb5a:	689b      	ldr	r3, [r3, #8]
 801cb5c:	6839      	ldr	r1, [r7, #0]
 801cb5e:	6878      	ldr	r0, [r7, #4]
 801cb60:	4798      	blx	r3
 801cb62:	4603      	mov	r3, r0
 801cb64:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801cb66:	683b      	ldr	r3, [r7, #0]
 801cb68:	88db      	ldrh	r3, [r3, #6]
 801cb6a:	2b00      	cmp	r3, #0
 801cb6c:	d110      	bne.n	801cb90 <USBD_StdItfReq+0x74>
 801cb6e:	7bfb      	ldrb	r3, [r7, #15]
 801cb70:	2b00      	cmp	r3, #0
 801cb72:	d10d      	bne.n	801cb90 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 801cb74:	6878      	ldr	r0, [r7, #4]
 801cb76:	f000 fd4f 	bl	801d618 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801cb7a:	e009      	b.n	801cb90 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 801cb7c:	6839      	ldr	r1, [r7, #0]
 801cb7e:	6878      	ldr	r0, [r7, #4]
 801cb80:	f000 fc81 	bl	801d486 <USBD_CtlError>
          break;
 801cb84:	e004      	b.n	801cb90 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 801cb86:	6839      	ldr	r1, [r7, #0]
 801cb88:	6878      	ldr	r0, [r7, #4]
 801cb8a:	f000 fc7c 	bl	801d486 <USBD_CtlError>
          break;
 801cb8e:	e000      	b.n	801cb92 <USBD_StdItfReq+0x76>
          break;
 801cb90:	bf00      	nop
      }
      break;
 801cb92:	e004      	b.n	801cb9e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 801cb94:	6839      	ldr	r1, [r7, #0]
 801cb96:	6878      	ldr	r0, [r7, #4]
 801cb98:	f000 fc75 	bl	801d486 <USBD_CtlError>
      break;
 801cb9c:	bf00      	nop
  }

  return USBD_OK;
 801cb9e:	2300      	movs	r3, #0
}
 801cba0:	4618      	mov	r0, r3
 801cba2:	3710      	adds	r7, #16
 801cba4:	46bd      	mov	sp, r7
 801cba6:	bd80      	pop	{r7, pc}

0801cba8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801cba8:	b580      	push	{r7, lr}
 801cbaa:	b084      	sub	sp, #16
 801cbac:	af00      	add	r7, sp, #0
 801cbae:	6078      	str	r0, [r7, #4]
 801cbb0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801cbb2:	2300      	movs	r3, #0
 801cbb4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 801cbb6:	683b      	ldr	r3, [r7, #0]
 801cbb8:	889b      	ldrh	r3, [r3, #4]
 801cbba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801cbbc:	683b      	ldr	r3, [r7, #0]
 801cbbe:	781b      	ldrb	r3, [r3, #0]
 801cbc0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801cbc4:	2b20      	cmp	r3, #32
 801cbc6:	d004      	beq.n	801cbd2 <USBD_StdEPReq+0x2a>
 801cbc8:	2b40      	cmp	r3, #64	; 0x40
 801cbca:	d002      	beq.n	801cbd2 <USBD_StdEPReq+0x2a>
 801cbcc:	2b00      	cmp	r3, #0
 801cbce:	d008      	beq.n	801cbe2 <USBD_StdEPReq+0x3a>
 801cbd0:	e13d      	b.n	801ce4e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801cbd2:	687b      	ldr	r3, [r7, #4]
 801cbd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cbd8:	689b      	ldr	r3, [r3, #8]
 801cbda:	6839      	ldr	r1, [r7, #0]
 801cbdc:	6878      	ldr	r0, [r7, #4]
 801cbde:	4798      	blx	r3
      break;
 801cbe0:	e13a      	b.n	801ce58 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801cbe2:	683b      	ldr	r3, [r7, #0]
 801cbe4:	781b      	ldrb	r3, [r3, #0]
 801cbe6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801cbea:	2b20      	cmp	r3, #32
 801cbec:	d10a      	bne.n	801cc04 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801cbee:	687b      	ldr	r3, [r7, #4]
 801cbf0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cbf4:	689b      	ldr	r3, [r3, #8]
 801cbf6:	6839      	ldr	r1, [r7, #0]
 801cbf8:	6878      	ldr	r0, [r7, #4]
 801cbfa:	4798      	blx	r3
 801cbfc:	4603      	mov	r3, r0
 801cbfe:	73fb      	strb	r3, [r7, #15]

        return ret;
 801cc00:	7bfb      	ldrb	r3, [r7, #15]
 801cc02:	e12a      	b.n	801ce5a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 801cc04:	683b      	ldr	r3, [r7, #0]
 801cc06:	785b      	ldrb	r3, [r3, #1]
 801cc08:	2b01      	cmp	r3, #1
 801cc0a:	d03e      	beq.n	801cc8a <USBD_StdEPReq+0xe2>
 801cc0c:	2b03      	cmp	r3, #3
 801cc0e:	d002      	beq.n	801cc16 <USBD_StdEPReq+0x6e>
 801cc10:	2b00      	cmp	r3, #0
 801cc12:	d070      	beq.n	801ccf6 <USBD_StdEPReq+0x14e>
 801cc14:	e115      	b.n	801ce42 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801cc16:	687b      	ldr	r3, [r7, #4]
 801cc18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801cc1c:	2b02      	cmp	r3, #2
 801cc1e:	d002      	beq.n	801cc26 <USBD_StdEPReq+0x7e>
 801cc20:	2b03      	cmp	r3, #3
 801cc22:	d015      	beq.n	801cc50 <USBD_StdEPReq+0xa8>
 801cc24:	e02b      	b.n	801cc7e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801cc26:	7bbb      	ldrb	r3, [r7, #14]
 801cc28:	2b00      	cmp	r3, #0
 801cc2a:	d00c      	beq.n	801cc46 <USBD_StdEPReq+0x9e>
 801cc2c:	7bbb      	ldrb	r3, [r7, #14]
 801cc2e:	2b80      	cmp	r3, #128	; 0x80
 801cc30:	d009      	beq.n	801cc46 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801cc32:	7bbb      	ldrb	r3, [r7, #14]
 801cc34:	4619      	mov	r1, r3
 801cc36:	6878      	ldr	r0, [r7, #4]
 801cc38:	f001 f934 	bl	801dea4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801cc3c:	2180      	movs	r1, #128	; 0x80
 801cc3e:	6878      	ldr	r0, [r7, #4]
 801cc40:	f001 f930 	bl	801dea4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801cc44:	e020      	b.n	801cc88 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 801cc46:	6839      	ldr	r1, [r7, #0]
 801cc48:	6878      	ldr	r0, [r7, #4]
 801cc4a:	f000 fc1c 	bl	801d486 <USBD_CtlError>
              break;
 801cc4e:	e01b      	b.n	801cc88 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801cc50:	683b      	ldr	r3, [r7, #0]
 801cc52:	885b      	ldrh	r3, [r3, #2]
 801cc54:	2b00      	cmp	r3, #0
 801cc56:	d10e      	bne.n	801cc76 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 801cc58:	7bbb      	ldrb	r3, [r7, #14]
 801cc5a:	2b00      	cmp	r3, #0
 801cc5c:	d00b      	beq.n	801cc76 <USBD_StdEPReq+0xce>
 801cc5e:	7bbb      	ldrb	r3, [r7, #14]
 801cc60:	2b80      	cmp	r3, #128	; 0x80
 801cc62:	d008      	beq.n	801cc76 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801cc64:	683b      	ldr	r3, [r7, #0]
 801cc66:	88db      	ldrh	r3, [r3, #6]
 801cc68:	2b00      	cmp	r3, #0
 801cc6a:	d104      	bne.n	801cc76 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801cc6c:	7bbb      	ldrb	r3, [r7, #14]
 801cc6e:	4619      	mov	r1, r3
 801cc70:	6878      	ldr	r0, [r7, #4]
 801cc72:	f001 f917 	bl	801dea4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801cc76:	6878      	ldr	r0, [r7, #4]
 801cc78:	f000 fcce 	bl	801d618 <USBD_CtlSendStatus>

              break;
 801cc7c:	e004      	b.n	801cc88 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 801cc7e:	6839      	ldr	r1, [r7, #0]
 801cc80:	6878      	ldr	r0, [r7, #4]
 801cc82:	f000 fc00 	bl	801d486 <USBD_CtlError>
              break;
 801cc86:	bf00      	nop
          }
          break;
 801cc88:	e0e0      	b.n	801ce4c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801cc8a:	687b      	ldr	r3, [r7, #4]
 801cc8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801cc90:	2b02      	cmp	r3, #2
 801cc92:	d002      	beq.n	801cc9a <USBD_StdEPReq+0xf2>
 801cc94:	2b03      	cmp	r3, #3
 801cc96:	d015      	beq.n	801ccc4 <USBD_StdEPReq+0x11c>
 801cc98:	e026      	b.n	801cce8 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801cc9a:	7bbb      	ldrb	r3, [r7, #14]
 801cc9c:	2b00      	cmp	r3, #0
 801cc9e:	d00c      	beq.n	801ccba <USBD_StdEPReq+0x112>
 801cca0:	7bbb      	ldrb	r3, [r7, #14]
 801cca2:	2b80      	cmp	r3, #128	; 0x80
 801cca4:	d009      	beq.n	801ccba <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801cca6:	7bbb      	ldrb	r3, [r7, #14]
 801cca8:	4619      	mov	r1, r3
 801ccaa:	6878      	ldr	r0, [r7, #4]
 801ccac:	f001 f8fa 	bl	801dea4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801ccb0:	2180      	movs	r1, #128	; 0x80
 801ccb2:	6878      	ldr	r0, [r7, #4]
 801ccb4:	f001 f8f6 	bl	801dea4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801ccb8:	e01c      	b.n	801ccf4 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 801ccba:	6839      	ldr	r1, [r7, #0]
 801ccbc:	6878      	ldr	r0, [r7, #4]
 801ccbe:	f000 fbe2 	bl	801d486 <USBD_CtlError>
              break;
 801ccc2:	e017      	b.n	801ccf4 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801ccc4:	683b      	ldr	r3, [r7, #0]
 801ccc6:	885b      	ldrh	r3, [r3, #2]
 801ccc8:	2b00      	cmp	r3, #0
 801ccca:	d112      	bne.n	801ccf2 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801cccc:	7bbb      	ldrb	r3, [r7, #14]
 801ccce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ccd2:	2b00      	cmp	r3, #0
 801ccd4:	d004      	beq.n	801cce0 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801ccd6:	7bbb      	ldrb	r3, [r7, #14]
 801ccd8:	4619      	mov	r1, r3
 801ccda:	6878      	ldr	r0, [r7, #4]
 801ccdc:	f001 f901 	bl	801dee2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801cce0:	6878      	ldr	r0, [r7, #4]
 801cce2:	f000 fc99 	bl	801d618 <USBD_CtlSendStatus>
              }
              break;
 801cce6:	e004      	b.n	801ccf2 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 801cce8:	6839      	ldr	r1, [r7, #0]
 801ccea:	6878      	ldr	r0, [r7, #4]
 801ccec:	f000 fbcb 	bl	801d486 <USBD_CtlError>
              break;
 801ccf0:	e000      	b.n	801ccf4 <USBD_StdEPReq+0x14c>
              break;
 801ccf2:	bf00      	nop
          }
          break;
 801ccf4:	e0aa      	b.n	801ce4c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801ccf6:	687b      	ldr	r3, [r7, #4]
 801ccf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801ccfc:	2b02      	cmp	r3, #2
 801ccfe:	d002      	beq.n	801cd06 <USBD_StdEPReq+0x15e>
 801cd00:	2b03      	cmp	r3, #3
 801cd02:	d032      	beq.n	801cd6a <USBD_StdEPReq+0x1c2>
 801cd04:	e097      	b.n	801ce36 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801cd06:	7bbb      	ldrb	r3, [r7, #14]
 801cd08:	2b00      	cmp	r3, #0
 801cd0a:	d007      	beq.n	801cd1c <USBD_StdEPReq+0x174>
 801cd0c:	7bbb      	ldrb	r3, [r7, #14]
 801cd0e:	2b80      	cmp	r3, #128	; 0x80
 801cd10:	d004      	beq.n	801cd1c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 801cd12:	6839      	ldr	r1, [r7, #0]
 801cd14:	6878      	ldr	r0, [r7, #4]
 801cd16:	f000 fbb6 	bl	801d486 <USBD_CtlError>
                break;
 801cd1a:	e091      	b.n	801ce40 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801cd1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801cd20:	2b00      	cmp	r3, #0
 801cd22:	da0b      	bge.n	801cd3c <USBD_StdEPReq+0x194>
 801cd24:	7bbb      	ldrb	r3, [r7, #14]
 801cd26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801cd2a:	4613      	mov	r3, r2
 801cd2c:	009b      	lsls	r3, r3, #2
 801cd2e:	4413      	add	r3, r2
 801cd30:	009b      	lsls	r3, r3, #2
 801cd32:	3310      	adds	r3, #16
 801cd34:	687a      	ldr	r2, [r7, #4]
 801cd36:	4413      	add	r3, r2
 801cd38:	3304      	adds	r3, #4
 801cd3a:	e00b      	b.n	801cd54 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801cd3c:	7bbb      	ldrb	r3, [r7, #14]
 801cd3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801cd42:	4613      	mov	r3, r2
 801cd44:	009b      	lsls	r3, r3, #2
 801cd46:	4413      	add	r3, r2
 801cd48:	009b      	lsls	r3, r3, #2
 801cd4a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801cd4e:	687a      	ldr	r2, [r7, #4]
 801cd50:	4413      	add	r3, r2
 801cd52:	3304      	adds	r3, #4
 801cd54:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801cd56:	68bb      	ldr	r3, [r7, #8]
 801cd58:	2200      	movs	r2, #0
 801cd5a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801cd5c:	68bb      	ldr	r3, [r7, #8]
 801cd5e:	2202      	movs	r2, #2
 801cd60:	4619      	mov	r1, r3
 801cd62:	6878      	ldr	r0, [r7, #4]
 801cd64:	f000 fbfa 	bl	801d55c <USBD_CtlSendData>
              break;
 801cd68:	e06a      	b.n	801ce40 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801cd6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801cd6e:	2b00      	cmp	r3, #0
 801cd70:	da11      	bge.n	801cd96 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801cd72:	7bbb      	ldrb	r3, [r7, #14]
 801cd74:	f003 020f 	and.w	r2, r3, #15
 801cd78:	6879      	ldr	r1, [r7, #4]
 801cd7a:	4613      	mov	r3, r2
 801cd7c:	009b      	lsls	r3, r3, #2
 801cd7e:	4413      	add	r3, r2
 801cd80:	009b      	lsls	r3, r3, #2
 801cd82:	440b      	add	r3, r1
 801cd84:	3318      	adds	r3, #24
 801cd86:	681b      	ldr	r3, [r3, #0]
 801cd88:	2b00      	cmp	r3, #0
 801cd8a:	d117      	bne.n	801cdbc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 801cd8c:	6839      	ldr	r1, [r7, #0]
 801cd8e:	6878      	ldr	r0, [r7, #4]
 801cd90:	f000 fb79 	bl	801d486 <USBD_CtlError>
                  break;
 801cd94:	e054      	b.n	801ce40 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801cd96:	7bbb      	ldrb	r3, [r7, #14]
 801cd98:	f003 020f 	and.w	r2, r3, #15
 801cd9c:	6879      	ldr	r1, [r7, #4]
 801cd9e:	4613      	mov	r3, r2
 801cda0:	009b      	lsls	r3, r3, #2
 801cda2:	4413      	add	r3, r2
 801cda4:	009b      	lsls	r3, r3, #2
 801cda6:	440b      	add	r3, r1
 801cda8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 801cdac:	681b      	ldr	r3, [r3, #0]
 801cdae:	2b00      	cmp	r3, #0
 801cdb0:	d104      	bne.n	801cdbc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 801cdb2:	6839      	ldr	r1, [r7, #0]
 801cdb4:	6878      	ldr	r0, [r7, #4]
 801cdb6:	f000 fb66 	bl	801d486 <USBD_CtlError>
                  break;
 801cdba:	e041      	b.n	801ce40 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801cdbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801cdc0:	2b00      	cmp	r3, #0
 801cdc2:	da0b      	bge.n	801cddc <USBD_StdEPReq+0x234>
 801cdc4:	7bbb      	ldrb	r3, [r7, #14]
 801cdc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801cdca:	4613      	mov	r3, r2
 801cdcc:	009b      	lsls	r3, r3, #2
 801cdce:	4413      	add	r3, r2
 801cdd0:	009b      	lsls	r3, r3, #2
 801cdd2:	3310      	adds	r3, #16
 801cdd4:	687a      	ldr	r2, [r7, #4]
 801cdd6:	4413      	add	r3, r2
 801cdd8:	3304      	adds	r3, #4
 801cdda:	e00b      	b.n	801cdf4 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801cddc:	7bbb      	ldrb	r3, [r7, #14]
 801cdde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801cde2:	4613      	mov	r3, r2
 801cde4:	009b      	lsls	r3, r3, #2
 801cde6:	4413      	add	r3, r2
 801cde8:	009b      	lsls	r3, r3, #2
 801cdea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801cdee:	687a      	ldr	r2, [r7, #4]
 801cdf0:	4413      	add	r3, r2
 801cdf2:	3304      	adds	r3, #4
 801cdf4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801cdf6:	7bbb      	ldrb	r3, [r7, #14]
 801cdf8:	2b00      	cmp	r3, #0
 801cdfa:	d002      	beq.n	801ce02 <USBD_StdEPReq+0x25a>
 801cdfc:	7bbb      	ldrb	r3, [r7, #14]
 801cdfe:	2b80      	cmp	r3, #128	; 0x80
 801ce00:	d103      	bne.n	801ce0a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 801ce02:	68bb      	ldr	r3, [r7, #8]
 801ce04:	2200      	movs	r2, #0
 801ce06:	601a      	str	r2, [r3, #0]
 801ce08:	e00e      	b.n	801ce28 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801ce0a:	7bbb      	ldrb	r3, [r7, #14]
 801ce0c:	4619      	mov	r1, r3
 801ce0e:	6878      	ldr	r0, [r7, #4]
 801ce10:	f001 f886 	bl	801df20 <USBD_LL_IsStallEP>
 801ce14:	4603      	mov	r3, r0
 801ce16:	2b00      	cmp	r3, #0
 801ce18:	d003      	beq.n	801ce22 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 801ce1a:	68bb      	ldr	r3, [r7, #8]
 801ce1c:	2201      	movs	r2, #1
 801ce1e:	601a      	str	r2, [r3, #0]
 801ce20:	e002      	b.n	801ce28 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 801ce22:	68bb      	ldr	r3, [r7, #8]
 801ce24:	2200      	movs	r2, #0
 801ce26:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801ce28:	68bb      	ldr	r3, [r7, #8]
 801ce2a:	2202      	movs	r2, #2
 801ce2c:	4619      	mov	r1, r3
 801ce2e:	6878      	ldr	r0, [r7, #4]
 801ce30:	f000 fb94 	bl	801d55c <USBD_CtlSendData>
              break;
 801ce34:	e004      	b.n	801ce40 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 801ce36:	6839      	ldr	r1, [r7, #0]
 801ce38:	6878      	ldr	r0, [r7, #4]
 801ce3a:	f000 fb24 	bl	801d486 <USBD_CtlError>
              break;
 801ce3e:	bf00      	nop
          }
          break;
 801ce40:	e004      	b.n	801ce4c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 801ce42:	6839      	ldr	r1, [r7, #0]
 801ce44:	6878      	ldr	r0, [r7, #4]
 801ce46:	f000 fb1e 	bl	801d486 <USBD_CtlError>
          break;
 801ce4a:	bf00      	nop
      }
      break;
 801ce4c:	e004      	b.n	801ce58 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 801ce4e:	6839      	ldr	r1, [r7, #0]
 801ce50:	6878      	ldr	r0, [r7, #4]
 801ce52:	f000 fb18 	bl	801d486 <USBD_CtlError>
      break;
 801ce56:	bf00      	nop
  }

  return ret;
 801ce58:	7bfb      	ldrb	r3, [r7, #15]
}
 801ce5a:	4618      	mov	r0, r3
 801ce5c:	3710      	adds	r7, #16
 801ce5e:	46bd      	mov	sp, r7
 801ce60:	bd80      	pop	{r7, pc}
	...

0801ce64 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801ce64:	b580      	push	{r7, lr}
 801ce66:	b084      	sub	sp, #16
 801ce68:	af00      	add	r7, sp, #0
 801ce6a:	6078      	str	r0, [r7, #4]
 801ce6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801ce6e:	2300      	movs	r3, #0
 801ce70:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801ce72:	2300      	movs	r3, #0
 801ce74:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801ce76:	2300      	movs	r3, #0
 801ce78:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801ce7a:	683b      	ldr	r3, [r7, #0]
 801ce7c:	885b      	ldrh	r3, [r3, #2]
 801ce7e:	0a1b      	lsrs	r3, r3, #8
 801ce80:	b29b      	uxth	r3, r3
 801ce82:	3b01      	subs	r3, #1
 801ce84:	2b06      	cmp	r3, #6
 801ce86:	f200 8128 	bhi.w	801d0da <USBD_GetDescriptor+0x276>
 801ce8a:	a201      	add	r2, pc, #4	; (adr r2, 801ce90 <USBD_GetDescriptor+0x2c>)
 801ce8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ce90:	0801cead 	.word	0x0801cead
 801ce94:	0801cec5 	.word	0x0801cec5
 801ce98:	0801cf05 	.word	0x0801cf05
 801ce9c:	0801d0db 	.word	0x0801d0db
 801cea0:	0801d0db 	.word	0x0801d0db
 801cea4:	0801d07b 	.word	0x0801d07b
 801cea8:	0801d0a7 	.word	0x0801d0a7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801ceac:	687b      	ldr	r3, [r7, #4]
 801ceae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801ceb2:	681b      	ldr	r3, [r3, #0]
 801ceb4:	687a      	ldr	r2, [r7, #4]
 801ceb6:	7c12      	ldrb	r2, [r2, #16]
 801ceb8:	f107 0108 	add.w	r1, r7, #8
 801cebc:	4610      	mov	r0, r2
 801cebe:	4798      	blx	r3
 801cec0:	60f8      	str	r0, [r7, #12]
      break;
 801cec2:	e112      	b.n	801d0ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801cec4:	687b      	ldr	r3, [r7, #4]
 801cec6:	7c1b      	ldrb	r3, [r3, #16]
 801cec8:	2b00      	cmp	r3, #0
 801ceca:	d10d      	bne.n	801cee8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801cecc:	687b      	ldr	r3, [r7, #4]
 801cece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ced2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ced4:	f107 0208 	add.w	r2, r7, #8
 801ced8:	4610      	mov	r0, r2
 801ceda:	4798      	blx	r3
 801cedc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801cede:	68fb      	ldr	r3, [r7, #12]
 801cee0:	3301      	adds	r3, #1
 801cee2:	2202      	movs	r2, #2
 801cee4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801cee6:	e100      	b.n	801d0ea <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801cee8:	687b      	ldr	r3, [r7, #4]
 801ceea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ceee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cef0:	f107 0208 	add.w	r2, r7, #8
 801cef4:	4610      	mov	r0, r2
 801cef6:	4798      	blx	r3
 801cef8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801cefa:	68fb      	ldr	r3, [r7, #12]
 801cefc:	3301      	adds	r3, #1
 801cefe:	2202      	movs	r2, #2
 801cf00:	701a      	strb	r2, [r3, #0]
      break;
 801cf02:	e0f2      	b.n	801d0ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801cf04:	683b      	ldr	r3, [r7, #0]
 801cf06:	885b      	ldrh	r3, [r3, #2]
 801cf08:	b2db      	uxtb	r3, r3
 801cf0a:	2b05      	cmp	r3, #5
 801cf0c:	f200 80ac 	bhi.w	801d068 <USBD_GetDescriptor+0x204>
 801cf10:	a201      	add	r2, pc, #4	; (adr r2, 801cf18 <USBD_GetDescriptor+0xb4>)
 801cf12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cf16:	bf00      	nop
 801cf18:	0801cf31 	.word	0x0801cf31
 801cf1c:	0801cf65 	.word	0x0801cf65
 801cf20:	0801cf99 	.word	0x0801cf99
 801cf24:	0801cfcd 	.word	0x0801cfcd
 801cf28:	0801d001 	.word	0x0801d001
 801cf2c:	0801d035 	.word	0x0801d035
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801cf30:	687b      	ldr	r3, [r7, #4]
 801cf32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801cf36:	685b      	ldr	r3, [r3, #4]
 801cf38:	2b00      	cmp	r3, #0
 801cf3a:	d00b      	beq.n	801cf54 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801cf3c:	687b      	ldr	r3, [r7, #4]
 801cf3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801cf42:	685b      	ldr	r3, [r3, #4]
 801cf44:	687a      	ldr	r2, [r7, #4]
 801cf46:	7c12      	ldrb	r2, [r2, #16]
 801cf48:	f107 0108 	add.w	r1, r7, #8
 801cf4c:	4610      	mov	r0, r2
 801cf4e:	4798      	blx	r3
 801cf50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801cf52:	e091      	b.n	801d078 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801cf54:	6839      	ldr	r1, [r7, #0]
 801cf56:	6878      	ldr	r0, [r7, #4]
 801cf58:	f000 fa95 	bl	801d486 <USBD_CtlError>
            err++;
 801cf5c:	7afb      	ldrb	r3, [r7, #11]
 801cf5e:	3301      	adds	r3, #1
 801cf60:	72fb      	strb	r3, [r7, #11]
          break;
 801cf62:	e089      	b.n	801d078 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801cf64:	687b      	ldr	r3, [r7, #4]
 801cf66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801cf6a:	689b      	ldr	r3, [r3, #8]
 801cf6c:	2b00      	cmp	r3, #0
 801cf6e:	d00b      	beq.n	801cf88 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801cf70:	687b      	ldr	r3, [r7, #4]
 801cf72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801cf76:	689b      	ldr	r3, [r3, #8]
 801cf78:	687a      	ldr	r2, [r7, #4]
 801cf7a:	7c12      	ldrb	r2, [r2, #16]
 801cf7c:	f107 0108 	add.w	r1, r7, #8
 801cf80:	4610      	mov	r0, r2
 801cf82:	4798      	blx	r3
 801cf84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801cf86:	e077      	b.n	801d078 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801cf88:	6839      	ldr	r1, [r7, #0]
 801cf8a:	6878      	ldr	r0, [r7, #4]
 801cf8c:	f000 fa7b 	bl	801d486 <USBD_CtlError>
            err++;
 801cf90:	7afb      	ldrb	r3, [r7, #11]
 801cf92:	3301      	adds	r3, #1
 801cf94:	72fb      	strb	r3, [r7, #11]
          break;
 801cf96:	e06f      	b.n	801d078 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801cf98:	687b      	ldr	r3, [r7, #4]
 801cf9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801cf9e:	68db      	ldr	r3, [r3, #12]
 801cfa0:	2b00      	cmp	r3, #0
 801cfa2:	d00b      	beq.n	801cfbc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801cfa4:	687b      	ldr	r3, [r7, #4]
 801cfa6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801cfaa:	68db      	ldr	r3, [r3, #12]
 801cfac:	687a      	ldr	r2, [r7, #4]
 801cfae:	7c12      	ldrb	r2, [r2, #16]
 801cfb0:	f107 0108 	add.w	r1, r7, #8
 801cfb4:	4610      	mov	r0, r2
 801cfb6:	4798      	blx	r3
 801cfb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801cfba:	e05d      	b.n	801d078 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801cfbc:	6839      	ldr	r1, [r7, #0]
 801cfbe:	6878      	ldr	r0, [r7, #4]
 801cfc0:	f000 fa61 	bl	801d486 <USBD_CtlError>
            err++;
 801cfc4:	7afb      	ldrb	r3, [r7, #11]
 801cfc6:	3301      	adds	r3, #1
 801cfc8:	72fb      	strb	r3, [r7, #11]
          break;
 801cfca:	e055      	b.n	801d078 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801cfcc:	687b      	ldr	r3, [r7, #4]
 801cfce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801cfd2:	691b      	ldr	r3, [r3, #16]
 801cfd4:	2b00      	cmp	r3, #0
 801cfd6:	d00b      	beq.n	801cff0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801cfd8:	687b      	ldr	r3, [r7, #4]
 801cfda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801cfde:	691b      	ldr	r3, [r3, #16]
 801cfe0:	687a      	ldr	r2, [r7, #4]
 801cfe2:	7c12      	ldrb	r2, [r2, #16]
 801cfe4:	f107 0108 	add.w	r1, r7, #8
 801cfe8:	4610      	mov	r0, r2
 801cfea:	4798      	blx	r3
 801cfec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801cfee:	e043      	b.n	801d078 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801cff0:	6839      	ldr	r1, [r7, #0]
 801cff2:	6878      	ldr	r0, [r7, #4]
 801cff4:	f000 fa47 	bl	801d486 <USBD_CtlError>
            err++;
 801cff8:	7afb      	ldrb	r3, [r7, #11]
 801cffa:	3301      	adds	r3, #1
 801cffc:	72fb      	strb	r3, [r7, #11]
          break;
 801cffe:	e03b      	b.n	801d078 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801d000:	687b      	ldr	r3, [r7, #4]
 801d002:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d006:	695b      	ldr	r3, [r3, #20]
 801d008:	2b00      	cmp	r3, #0
 801d00a:	d00b      	beq.n	801d024 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801d00c:	687b      	ldr	r3, [r7, #4]
 801d00e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d012:	695b      	ldr	r3, [r3, #20]
 801d014:	687a      	ldr	r2, [r7, #4]
 801d016:	7c12      	ldrb	r2, [r2, #16]
 801d018:	f107 0108 	add.w	r1, r7, #8
 801d01c:	4610      	mov	r0, r2
 801d01e:	4798      	blx	r3
 801d020:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801d022:	e029      	b.n	801d078 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801d024:	6839      	ldr	r1, [r7, #0]
 801d026:	6878      	ldr	r0, [r7, #4]
 801d028:	f000 fa2d 	bl	801d486 <USBD_CtlError>
            err++;
 801d02c:	7afb      	ldrb	r3, [r7, #11]
 801d02e:	3301      	adds	r3, #1
 801d030:	72fb      	strb	r3, [r7, #11]
          break;
 801d032:	e021      	b.n	801d078 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801d034:	687b      	ldr	r3, [r7, #4]
 801d036:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d03a:	699b      	ldr	r3, [r3, #24]
 801d03c:	2b00      	cmp	r3, #0
 801d03e:	d00b      	beq.n	801d058 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801d040:	687b      	ldr	r3, [r7, #4]
 801d042:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d046:	699b      	ldr	r3, [r3, #24]
 801d048:	687a      	ldr	r2, [r7, #4]
 801d04a:	7c12      	ldrb	r2, [r2, #16]
 801d04c:	f107 0108 	add.w	r1, r7, #8
 801d050:	4610      	mov	r0, r2
 801d052:	4798      	blx	r3
 801d054:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801d056:	e00f      	b.n	801d078 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801d058:	6839      	ldr	r1, [r7, #0]
 801d05a:	6878      	ldr	r0, [r7, #4]
 801d05c:	f000 fa13 	bl	801d486 <USBD_CtlError>
            err++;
 801d060:	7afb      	ldrb	r3, [r7, #11]
 801d062:	3301      	adds	r3, #1
 801d064:	72fb      	strb	r3, [r7, #11]
          break;
 801d066:	e007      	b.n	801d078 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801d068:	6839      	ldr	r1, [r7, #0]
 801d06a:	6878      	ldr	r0, [r7, #4]
 801d06c:	f000 fa0b 	bl	801d486 <USBD_CtlError>
          err++;
 801d070:	7afb      	ldrb	r3, [r7, #11]
 801d072:	3301      	adds	r3, #1
 801d074:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 801d076:	e038      	b.n	801d0ea <USBD_GetDescriptor+0x286>
 801d078:	e037      	b.n	801d0ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801d07a:	687b      	ldr	r3, [r7, #4]
 801d07c:	7c1b      	ldrb	r3, [r3, #16]
 801d07e:	2b00      	cmp	r3, #0
 801d080:	d109      	bne.n	801d096 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801d082:	687b      	ldr	r3, [r7, #4]
 801d084:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d08a:	f107 0208 	add.w	r2, r7, #8
 801d08e:	4610      	mov	r0, r2
 801d090:	4798      	blx	r3
 801d092:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801d094:	e029      	b.n	801d0ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801d096:	6839      	ldr	r1, [r7, #0]
 801d098:	6878      	ldr	r0, [r7, #4]
 801d09a:	f000 f9f4 	bl	801d486 <USBD_CtlError>
        err++;
 801d09e:	7afb      	ldrb	r3, [r7, #11]
 801d0a0:	3301      	adds	r3, #1
 801d0a2:	72fb      	strb	r3, [r7, #11]
      break;
 801d0a4:	e021      	b.n	801d0ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801d0a6:	687b      	ldr	r3, [r7, #4]
 801d0a8:	7c1b      	ldrb	r3, [r3, #16]
 801d0aa:	2b00      	cmp	r3, #0
 801d0ac:	d10d      	bne.n	801d0ca <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801d0ae:	687b      	ldr	r3, [r7, #4]
 801d0b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d0b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d0b6:	f107 0208 	add.w	r2, r7, #8
 801d0ba:	4610      	mov	r0, r2
 801d0bc:	4798      	blx	r3
 801d0be:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801d0c0:	68fb      	ldr	r3, [r7, #12]
 801d0c2:	3301      	adds	r3, #1
 801d0c4:	2207      	movs	r2, #7
 801d0c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801d0c8:	e00f      	b.n	801d0ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801d0ca:	6839      	ldr	r1, [r7, #0]
 801d0cc:	6878      	ldr	r0, [r7, #4]
 801d0ce:	f000 f9da 	bl	801d486 <USBD_CtlError>
        err++;
 801d0d2:	7afb      	ldrb	r3, [r7, #11]
 801d0d4:	3301      	adds	r3, #1
 801d0d6:	72fb      	strb	r3, [r7, #11]
      break;
 801d0d8:	e007      	b.n	801d0ea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801d0da:	6839      	ldr	r1, [r7, #0]
 801d0dc:	6878      	ldr	r0, [r7, #4]
 801d0de:	f000 f9d2 	bl	801d486 <USBD_CtlError>
      err++;
 801d0e2:	7afb      	ldrb	r3, [r7, #11]
 801d0e4:	3301      	adds	r3, #1
 801d0e6:	72fb      	strb	r3, [r7, #11]
      break;
 801d0e8:	bf00      	nop
  }

  if (err != 0U)
 801d0ea:	7afb      	ldrb	r3, [r7, #11]
 801d0ec:	2b00      	cmp	r3, #0
 801d0ee:	d11c      	bne.n	801d12a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801d0f0:	893b      	ldrh	r3, [r7, #8]
 801d0f2:	2b00      	cmp	r3, #0
 801d0f4:	d011      	beq.n	801d11a <USBD_GetDescriptor+0x2b6>
 801d0f6:	683b      	ldr	r3, [r7, #0]
 801d0f8:	88db      	ldrh	r3, [r3, #6]
 801d0fa:	2b00      	cmp	r3, #0
 801d0fc:	d00d      	beq.n	801d11a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 801d0fe:	683b      	ldr	r3, [r7, #0]
 801d100:	88da      	ldrh	r2, [r3, #6]
 801d102:	893b      	ldrh	r3, [r7, #8]
 801d104:	4293      	cmp	r3, r2
 801d106:	bf28      	it	cs
 801d108:	4613      	movcs	r3, r2
 801d10a:	b29b      	uxth	r3, r3
 801d10c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801d10e:	893b      	ldrh	r3, [r7, #8]
 801d110:	461a      	mov	r2, r3
 801d112:	68f9      	ldr	r1, [r7, #12]
 801d114:	6878      	ldr	r0, [r7, #4]
 801d116:	f000 fa21 	bl	801d55c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801d11a:	683b      	ldr	r3, [r7, #0]
 801d11c:	88db      	ldrh	r3, [r3, #6]
 801d11e:	2b00      	cmp	r3, #0
 801d120:	d104      	bne.n	801d12c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 801d122:	6878      	ldr	r0, [r7, #4]
 801d124:	f000 fa78 	bl	801d618 <USBD_CtlSendStatus>
 801d128:	e000      	b.n	801d12c <USBD_GetDescriptor+0x2c8>
    return;
 801d12a:	bf00      	nop
    }
  }
}
 801d12c:	3710      	adds	r7, #16
 801d12e:	46bd      	mov	sp, r7
 801d130:	bd80      	pop	{r7, pc}
 801d132:	bf00      	nop

0801d134 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801d134:	b580      	push	{r7, lr}
 801d136:	b084      	sub	sp, #16
 801d138:	af00      	add	r7, sp, #0
 801d13a:	6078      	str	r0, [r7, #4]
 801d13c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801d13e:	683b      	ldr	r3, [r7, #0]
 801d140:	889b      	ldrh	r3, [r3, #4]
 801d142:	2b00      	cmp	r3, #0
 801d144:	d130      	bne.n	801d1a8 <USBD_SetAddress+0x74>
 801d146:	683b      	ldr	r3, [r7, #0]
 801d148:	88db      	ldrh	r3, [r3, #6]
 801d14a:	2b00      	cmp	r3, #0
 801d14c:	d12c      	bne.n	801d1a8 <USBD_SetAddress+0x74>
 801d14e:	683b      	ldr	r3, [r7, #0]
 801d150:	885b      	ldrh	r3, [r3, #2]
 801d152:	2b7f      	cmp	r3, #127	; 0x7f
 801d154:	d828      	bhi.n	801d1a8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801d156:	683b      	ldr	r3, [r7, #0]
 801d158:	885b      	ldrh	r3, [r3, #2]
 801d15a:	b2db      	uxtb	r3, r3
 801d15c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d160:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d162:	687b      	ldr	r3, [r7, #4]
 801d164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d168:	2b03      	cmp	r3, #3
 801d16a:	d104      	bne.n	801d176 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 801d16c:	6839      	ldr	r1, [r7, #0]
 801d16e:	6878      	ldr	r0, [r7, #4]
 801d170:	f000 f989 	bl	801d486 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d174:	e01c      	b.n	801d1b0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801d176:	687b      	ldr	r3, [r7, #4]
 801d178:	7bfa      	ldrb	r2, [r7, #15]
 801d17a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801d17e:	7bfb      	ldrb	r3, [r7, #15]
 801d180:	4619      	mov	r1, r3
 801d182:	6878      	ldr	r0, [r7, #4]
 801d184:	f000 fef8 	bl	801df78 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801d188:	6878      	ldr	r0, [r7, #4]
 801d18a:	f000 fa45 	bl	801d618 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801d18e:	7bfb      	ldrb	r3, [r7, #15]
 801d190:	2b00      	cmp	r3, #0
 801d192:	d004      	beq.n	801d19e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801d194:	687b      	ldr	r3, [r7, #4]
 801d196:	2202      	movs	r2, #2
 801d198:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d19c:	e008      	b.n	801d1b0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801d19e:	687b      	ldr	r3, [r7, #4]
 801d1a0:	2201      	movs	r2, #1
 801d1a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d1a6:	e003      	b.n	801d1b0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801d1a8:	6839      	ldr	r1, [r7, #0]
 801d1aa:	6878      	ldr	r0, [r7, #4]
 801d1ac:	f000 f96b 	bl	801d486 <USBD_CtlError>
  }
}
 801d1b0:	bf00      	nop
 801d1b2:	3710      	adds	r7, #16
 801d1b4:	46bd      	mov	sp, r7
 801d1b6:	bd80      	pop	{r7, pc}

0801d1b8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d1b8:	b580      	push	{r7, lr}
 801d1ba:	b082      	sub	sp, #8
 801d1bc:	af00      	add	r7, sp, #0
 801d1be:	6078      	str	r0, [r7, #4]
 801d1c0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801d1c2:	683b      	ldr	r3, [r7, #0]
 801d1c4:	885b      	ldrh	r3, [r3, #2]
 801d1c6:	b2da      	uxtb	r2, r3
 801d1c8:	4b41      	ldr	r3, [pc, #260]	; (801d2d0 <USBD_SetConfig+0x118>)
 801d1ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801d1cc:	4b40      	ldr	r3, [pc, #256]	; (801d2d0 <USBD_SetConfig+0x118>)
 801d1ce:	781b      	ldrb	r3, [r3, #0]
 801d1d0:	2b01      	cmp	r3, #1
 801d1d2:	d904      	bls.n	801d1de <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 801d1d4:	6839      	ldr	r1, [r7, #0]
 801d1d6:	6878      	ldr	r0, [r7, #4]
 801d1d8:	f000 f955 	bl	801d486 <USBD_CtlError>
 801d1dc:	e075      	b.n	801d2ca <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 801d1de:	687b      	ldr	r3, [r7, #4]
 801d1e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d1e4:	2b02      	cmp	r3, #2
 801d1e6:	d002      	beq.n	801d1ee <USBD_SetConfig+0x36>
 801d1e8:	2b03      	cmp	r3, #3
 801d1ea:	d023      	beq.n	801d234 <USBD_SetConfig+0x7c>
 801d1ec:	e062      	b.n	801d2b4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801d1ee:	4b38      	ldr	r3, [pc, #224]	; (801d2d0 <USBD_SetConfig+0x118>)
 801d1f0:	781b      	ldrb	r3, [r3, #0]
 801d1f2:	2b00      	cmp	r3, #0
 801d1f4:	d01a      	beq.n	801d22c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 801d1f6:	4b36      	ldr	r3, [pc, #216]	; (801d2d0 <USBD_SetConfig+0x118>)
 801d1f8:	781b      	ldrb	r3, [r3, #0]
 801d1fa:	461a      	mov	r2, r3
 801d1fc:	687b      	ldr	r3, [r7, #4]
 801d1fe:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801d200:	687b      	ldr	r3, [r7, #4]
 801d202:	2203      	movs	r2, #3
 801d204:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801d208:	4b31      	ldr	r3, [pc, #196]	; (801d2d0 <USBD_SetConfig+0x118>)
 801d20a:	781b      	ldrb	r3, [r3, #0]
 801d20c:	4619      	mov	r1, r3
 801d20e:	6878      	ldr	r0, [r7, #4]
 801d210:	f7ff f9b4 	bl	801c57c <USBD_SetClassConfig>
 801d214:	4603      	mov	r3, r0
 801d216:	2b02      	cmp	r3, #2
 801d218:	d104      	bne.n	801d224 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 801d21a:	6839      	ldr	r1, [r7, #0]
 801d21c:	6878      	ldr	r0, [r7, #4]
 801d21e:	f000 f932 	bl	801d486 <USBD_CtlError>
            return;
 801d222:	e052      	b.n	801d2ca <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 801d224:	6878      	ldr	r0, [r7, #4]
 801d226:	f000 f9f7 	bl	801d618 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801d22a:	e04e      	b.n	801d2ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 801d22c:	6878      	ldr	r0, [r7, #4]
 801d22e:	f000 f9f3 	bl	801d618 <USBD_CtlSendStatus>
        break;
 801d232:	e04a      	b.n	801d2ca <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801d234:	4b26      	ldr	r3, [pc, #152]	; (801d2d0 <USBD_SetConfig+0x118>)
 801d236:	781b      	ldrb	r3, [r3, #0]
 801d238:	2b00      	cmp	r3, #0
 801d23a:	d112      	bne.n	801d262 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801d23c:	687b      	ldr	r3, [r7, #4]
 801d23e:	2202      	movs	r2, #2
 801d240:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 801d244:	4b22      	ldr	r3, [pc, #136]	; (801d2d0 <USBD_SetConfig+0x118>)
 801d246:	781b      	ldrb	r3, [r3, #0]
 801d248:	461a      	mov	r2, r3
 801d24a:	687b      	ldr	r3, [r7, #4]
 801d24c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801d24e:	4b20      	ldr	r3, [pc, #128]	; (801d2d0 <USBD_SetConfig+0x118>)
 801d250:	781b      	ldrb	r3, [r3, #0]
 801d252:	4619      	mov	r1, r3
 801d254:	6878      	ldr	r0, [r7, #4]
 801d256:	f7ff f9b0 	bl	801c5ba <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801d25a:	6878      	ldr	r0, [r7, #4]
 801d25c:	f000 f9dc 	bl	801d618 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801d260:	e033      	b.n	801d2ca <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 801d262:	4b1b      	ldr	r3, [pc, #108]	; (801d2d0 <USBD_SetConfig+0x118>)
 801d264:	781b      	ldrb	r3, [r3, #0]
 801d266:	461a      	mov	r2, r3
 801d268:	687b      	ldr	r3, [r7, #4]
 801d26a:	685b      	ldr	r3, [r3, #4]
 801d26c:	429a      	cmp	r2, r3
 801d26e:	d01d      	beq.n	801d2ac <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801d270:	687b      	ldr	r3, [r7, #4]
 801d272:	685b      	ldr	r3, [r3, #4]
 801d274:	b2db      	uxtb	r3, r3
 801d276:	4619      	mov	r1, r3
 801d278:	6878      	ldr	r0, [r7, #4]
 801d27a:	f7ff f99e 	bl	801c5ba <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801d27e:	4b14      	ldr	r3, [pc, #80]	; (801d2d0 <USBD_SetConfig+0x118>)
 801d280:	781b      	ldrb	r3, [r3, #0]
 801d282:	461a      	mov	r2, r3
 801d284:	687b      	ldr	r3, [r7, #4]
 801d286:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801d288:	4b11      	ldr	r3, [pc, #68]	; (801d2d0 <USBD_SetConfig+0x118>)
 801d28a:	781b      	ldrb	r3, [r3, #0]
 801d28c:	4619      	mov	r1, r3
 801d28e:	6878      	ldr	r0, [r7, #4]
 801d290:	f7ff f974 	bl	801c57c <USBD_SetClassConfig>
 801d294:	4603      	mov	r3, r0
 801d296:	2b02      	cmp	r3, #2
 801d298:	d104      	bne.n	801d2a4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 801d29a:	6839      	ldr	r1, [r7, #0]
 801d29c:	6878      	ldr	r0, [r7, #4]
 801d29e:	f000 f8f2 	bl	801d486 <USBD_CtlError>
            return;
 801d2a2:	e012      	b.n	801d2ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 801d2a4:	6878      	ldr	r0, [r7, #4]
 801d2a6:	f000 f9b7 	bl	801d618 <USBD_CtlSendStatus>
        break;
 801d2aa:	e00e      	b.n	801d2ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 801d2ac:	6878      	ldr	r0, [r7, #4]
 801d2ae:	f000 f9b3 	bl	801d618 <USBD_CtlSendStatus>
        break;
 801d2b2:	e00a      	b.n	801d2ca <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 801d2b4:	6839      	ldr	r1, [r7, #0]
 801d2b6:	6878      	ldr	r0, [r7, #4]
 801d2b8:	f000 f8e5 	bl	801d486 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801d2bc:	4b04      	ldr	r3, [pc, #16]	; (801d2d0 <USBD_SetConfig+0x118>)
 801d2be:	781b      	ldrb	r3, [r3, #0]
 801d2c0:	4619      	mov	r1, r3
 801d2c2:	6878      	ldr	r0, [r7, #4]
 801d2c4:	f7ff f979 	bl	801c5ba <USBD_ClrClassConfig>
        break;
 801d2c8:	bf00      	nop
    }
  }
}
 801d2ca:	3708      	adds	r7, #8
 801d2cc:	46bd      	mov	sp, r7
 801d2ce:	bd80      	pop	{r7, pc}
 801d2d0:	24000305 	.word	0x24000305

0801d2d4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d2d4:	b580      	push	{r7, lr}
 801d2d6:	b082      	sub	sp, #8
 801d2d8:	af00      	add	r7, sp, #0
 801d2da:	6078      	str	r0, [r7, #4]
 801d2dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801d2de:	683b      	ldr	r3, [r7, #0]
 801d2e0:	88db      	ldrh	r3, [r3, #6]
 801d2e2:	2b01      	cmp	r3, #1
 801d2e4:	d004      	beq.n	801d2f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801d2e6:	6839      	ldr	r1, [r7, #0]
 801d2e8:	6878      	ldr	r0, [r7, #4]
 801d2ea:	f000 f8cc 	bl	801d486 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801d2ee:	e021      	b.n	801d334 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 801d2f0:	687b      	ldr	r3, [r7, #4]
 801d2f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d2f6:	2b01      	cmp	r3, #1
 801d2f8:	db17      	blt.n	801d32a <USBD_GetConfig+0x56>
 801d2fa:	2b02      	cmp	r3, #2
 801d2fc:	dd02      	ble.n	801d304 <USBD_GetConfig+0x30>
 801d2fe:	2b03      	cmp	r3, #3
 801d300:	d00b      	beq.n	801d31a <USBD_GetConfig+0x46>
 801d302:	e012      	b.n	801d32a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 801d304:	687b      	ldr	r3, [r7, #4]
 801d306:	2200      	movs	r2, #0
 801d308:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801d30a:	687b      	ldr	r3, [r7, #4]
 801d30c:	3308      	adds	r3, #8
 801d30e:	2201      	movs	r2, #1
 801d310:	4619      	mov	r1, r3
 801d312:	6878      	ldr	r0, [r7, #4]
 801d314:	f000 f922 	bl	801d55c <USBD_CtlSendData>
        break;
 801d318:	e00c      	b.n	801d334 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801d31a:	687b      	ldr	r3, [r7, #4]
 801d31c:	3304      	adds	r3, #4
 801d31e:	2201      	movs	r2, #1
 801d320:	4619      	mov	r1, r3
 801d322:	6878      	ldr	r0, [r7, #4]
 801d324:	f000 f91a 	bl	801d55c <USBD_CtlSendData>
        break;
 801d328:	e004      	b.n	801d334 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 801d32a:	6839      	ldr	r1, [r7, #0]
 801d32c:	6878      	ldr	r0, [r7, #4]
 801d32e:	f000 f8aa 	bl	801d486 <USBD_CtlError>
        break;
 801d332:	bf00      	nop
}
 801d334:	bf00      	nop
 801d336:	3708      	adds	r7, #8
 801d338:	46bd      	mov	sp, r7
 801d33a:	bd80      	pop	{r7, pc}

0801d33c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d33c:	b580      	push	{r7, lr}
 801d33e:	b082      	sub	sp, #8
 801d340:	af00      	add	r7, sp, #0
 801d342:	6078      	str	r0, [r7, #4]
 801d344:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801d346:	687b      	ldr	r3, [r7, #4]
 801d348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d34c:	3b01      	subs	r3, #1
 801d34e:	2b02      	cmp	r3, #2
 801d350:	d81e      	bhi.n	801d390 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801d352:	683b      	ldr	r3, [r7, #0]
 801d354:	88db      	ldrh	r3, [r3, #6]
 801d356:	2b02      	cmp	r3, #2
 801d358:	d004      	beq.n	801d364 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 801d35a:	6839      	ldr	r1, [r7, #0]
 801d35c:	6878      	ldr	r0, [r7, #4]
 801d35e:	f000 f892 	bl	801d486 <USBD_CtlError>
        break;
 801d362:	e01a      	b.n	801d39a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801d364:	687b      	ldr	r3, [r7, #4]
 801d366:	2201      	movs	r2, #1
 801d368:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801d36a:	687b      	ldr	r3, [r7, #4]
 801d36c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801d370:	2b00      	cmp	r3, #0
 801d372:	d005      	beq.n	801d380 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801d374:	687b      	ldr	r3, [r7, #4]
 801d376:	68db      	ldr	r3, [r3, #12]
 801d378:	f043 0202 	orr.w	r2, r3, #2
 801d37c:	687b      	ldr	r3, [r7, #4]
 801d37e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801d380:	687b      	ldr	r3, [r7, #4]
 801d382:	330c      	adds	r3, #12
 801d384:	2202      	movs	r2, #2
 801d386:	4619      	mov	r1, r3
 801d388:	6878      	ldr	r0, [r7, #4]
 801d38a:	f000 f8e7 	bl	801d55c <USBD_CtlSendData>
      break;
 801d38e:	e004      	b.n	801d39a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 801d390:	6839      	ldr	r1, [r7, #0]
 801d392:	6878      	ldr	r0, [r7, #4]
 801d394:	f000 f877 	bl	801d486 <USBD_CtlError>
      break;
 801d398:	bf00      	nop
  }
}
 801d39a:	bf00      	nop
 801d39c:	3708      	adds	r7, #8
 801d39e:	46bd      	mov	sp, r7
 801d3a0:	bd80      	pop	{r7, pc}

0801d3a2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801d3a2:	b580      	push	{r7, lr}
 801d3a4:	b082      	sub	sp, #8
 801d3a6:	af00      	add	r7, sp, #0
 801d3a8:	6078      	str	r0, [r7, #4]
 801d3aa:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801d3ac:	683b      	ldr	r3, [r7, #0]
 801d3ae:	885b      	ldrh	r3, [r3, #2]
 801d3b0:	2b01      	cmp	r3, #1
 801d3b2:	d106      	bne.n	801d3c2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801d3b4:	687b      	ldr	r3, [r7, #4]
 801d3b6:	2201      	movs	r2, #1
 801d3b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 801d3bc:	6878      	ldr	r0, [r7, #4]
 801d3be:	f000 f92b 	bl	801d618 <USBD_CtlSendStatus>
  }
}
 801d3c2:	bf00      	nop
 801d3c4:	3708      	adds	r7, #8
 801d3c6:	46bd      	mov	sp, r7
 801d3c8:	bd80      	pop	{r7, pc}

0801d3ca <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801d3ca:	b580      	push	{r7, lr}
 801d3cc:	b082      	sub	sp, #8
 801d3ce:	af00      	add	r7, sp, #0
 801d3d0:	6078      	str	r0, [r7, #4]
 801d3d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801d3d4:	687b      	ldr	r3, [r7, #4]
 801d3d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d3da:	3b01      	subs	r3, #1
 801d3dc:	2b02      	cmp	r3, #2
 801d3de:	d80b      	bhi.n	801d3f8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801d3e0:	683b      	ldr	r3, [r7, #0]
 801d3e2:	885b      	ldrh	r3, [r3, #2]
 801d3e4:	2b01      	cmp	r3, #1
 801d3e6:	d10c      	bne.n	801d402 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 801d3e8:	687b      	ldr	r3, [r7, #4]
 801d3ea:	2200      	movs	r2, #0
 801d3ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 801d3f0:	6878      	ldr	r0, [r7, #4]
 801d3f2:	f000 f911 	bl	801d618 <USBD_CtlSendStatus>
      }
      break;
 801d3f6:	e004      	b.n	801d402 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 801d3f8:	6839      	ldr	r1, [r7, #0]
 801d3fa:	6878      	ldr	r0, [r7, #4]
 801d3fc:	f000 f843 	bl	801d486 <USBD_CtlError>
      break;
 801d400:	e000      	b.n	801d404 <USBD_ClrFeature+0x3a>
      break;
 801d402:	bf00      	nop
  }
}
 801d404:	bf00      	nop
 801d406:	3708      	adds	r7, #8
 801d408:	46bd      	mov	sp, r7
 801d40a:	bd80      	pop	{r7, pc}

0801d40c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801d40c:	b480      	push	{r7}
 801d40e:	b083      	sub	sp, #12
 801d410:	af00      	add	r7, sp, #0
 801d412:	6078      	str	r0, [r7, #4]
 801d414:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801d416:	683b      	ldr	r3, [r7, #0]
 801d418:	781a      	ldrb	r2, [r3, #0]
 801d41a:	687b      	ldr	r3, [r7, #4]
 801d41c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801d41e:	683b      	ldr	r3, [r7, #0]
 801d420:	785a      	ldrb	r2, [r3, #1]
 801d422:	687b      	ldr	r3, [r7, #4]
 801d424:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801d426:	683b      	ldr	r3, [r7, #0]
 801d428:	3302      	adds	r3, #2
 801d42a:	781b      	ldrb	r3, [r3, #0]
 801d42c:	b29a      	uxth	r2, r3
 801d42e:	683b      	ldr	r3, [r7, #0]
 801d430:	3303      	adds	r3, #3
 801d432:	781b      	ldrb	r3, [r3, #0]
 801d434:	b29b      	uxth	r3, r3
 801d436:	021b      	lsls	r3, r3, #8
 801d438:	b29b      	uxth	r3, r3
 801d43a:	4413      	add	r3, r2
 801d43c:	b29a      	uxth	r2, r3
 801d43e:	687b      	ldr	r3, [r7, #4]
 801d440:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801d442:	683b      	ldr	r3, [r7, #0]
 801d444:	3304      	adds	r3, #4
 801d446:	781b      	ldrb	r3, [r3, #0]
 801d448:	b29a      	uxth	r2, r3
 801d44a:	683b      	ldr	r3, [r7, #0]
 801d44c:	3305      	adds	r3, #5
 801d44e:	781b      	ldrb	r3, [r3, #0]
 801d450:	b29b      	uxth	r3, r3
 801d452:	021b      	lsls	r3, r3, #8
 801d454:	b29b      	uxth	r3, r3
 801d456:	4413      	add	r3, r2
 801d458:	b29a      	uxth	r2, r3
 801d45a:	687b      	ldr	r3, [r7, #4]
 801d45c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801d45e:	683b      	ldr	r3, [r7, #0]
 801d460:	3306      	adds	r3, #6
 801d462:	781b      	ldrb	r3, [r3, #0]
 801d464:	b29a      	uxth	r2, r3
 801d466:	683b      	ldr	r3, [r7, #0]
 801d468:	3307      	adds	r3, #7
 801d46a:	781b      	ldrb	r3, [r3, #0]
 801d46c:	b29b      	uxth	r3, r3
 801d46e:	021b      	lsls	r3, r3, #8
 801d470:	b29b      	uxth	r3, r3
 801d472:	4413      	add	r3, r2
 801d474:	b29a      	uxth	r2, r3
 801d476:	687b      	ldr	r3, [r7, #4]
 801d478:	80da      	strh	r2, [r3, #6]

}
 801d47a:	bf00      	nop
 801d47c:	370c      	adds	r7, #12
 801d47e:	46bd      	mov	sp, r7
 801d480:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d484:	4770      	bx	lr

0801d486 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801d486:	b580      	push	{r7, lr}
 801d488:	b082      	sub	sp, #8
 801d48a:	af00      	add	r7, sp, #0
 801d48c:	6078      	str	r0, [r7, #4]
 801d48e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801d490:	2180      	movs	r1, #128	; 0x80
 801d492:	6878      	ldr	r0, [r7, #4]
 801d494:	f000 fd06 	bl	801dea4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801d498:	2100      	movs	r1, #0
 801d49a:	6878      	ldr	r0, [r7, #4]
 801d49c:	f000 fd02 	bl	801dea4 <USBD_LL_StallEP>
}
 801d4a0:	bf00      	nop
 801d4a2:	3708      	adds	r7, #8
 801d4a4:	46bd      	mov	sp, r7
 801d4a6:	bd80      	pop	{r7, pc}

0801d4a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801d4a8:	b580      	push	{r7, lr}
 801d4aa:	b086      	sub	sp, #24
 801d4ac:	af00      	add	r7, sp, #0
 801d4ae:	60f8      	str	r0, [r7, #12]
 801d4b0:	60b9      	str	r1, [r7, #8]
 801d4b2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801d4b4:	2300      	movs	r3, #0
 801d4b6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 801d4b8:	68fb      	ldr	r3, [r7, #12]
 801d4ba:	2b00      	cmp	r3, #0
 801d4bc:	d032      	beq.n	801d524 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801d4be:	68f8      	ldr	r0, [r7, #12]
 801d4c0:	f000 f834 	bl	801d52c <USBD_GetLen>
 801d4c4:	4603      	mov	r3, r0
 801d4c6:	3301      	adds	r3, #1
 801d4c8:	b29b      	uxth	r3, r3
 801d4ca:	005b      	lsls	r3, r3, #1
 801d4cc:	b29a      	uxth	r2, r3
 801d4ce:	687b      	ldr	r3, [r7, #4]
 801d4d0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801d4d2:	7dfb      	ldrb	r3, [r7, #23]
 801d4d4:	1c5a      	adds	r2, r3, #1
 801d4d6:	75fa      	strb	r2, [r7, #23]
 801d4d8:	461a      	mov	r2, r3
 801d4da:	68bb      	ldr	r3, [r7, #8]
 801d4dc:	4413      	add	r3, r2
 801d4de:	687a      	ldr	r2, [r7, #4]
 801d4e0:	7812      	ldrb	r2, [r2, #0]
 801d4e2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801d4e4:	7dfb      	ldrb	r3, [r7, #23]
 801d4e6:	1c5a      	adds	r2, r3, #1
 801d4e8:	75fa      	strb	r2, [r7, #23]
 801d4ea:	461a      	mov	r2, r3
 801d4ec:	68bb      	ldr	r3, [r7, #8]
 801d4ee:	4413      	add	r3, r2
 801d4f0:	2203      	movs	r2, #3
 801d4f2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801d4f4:	e012      	b.n	801d51c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 801d4f6:	68fb      	ldr	r3, [r7, #12]
 801d4f8:	1c5a      	adds	r2, r3, #1
 801d4fa:	60fa      	str	r2, [r7, #12]
 801d4fc:	7dfa      	ldrb	r2, [r7, #23]
 801d4fe:	1c51      	adds	r1, r2, #1
 801d500:	75f9      	strb	r1, [r7, #23]
 801d502:	4611      	mov	r1, r2
 801d504:	68ba      	ldr	r2, [r7, #8]
 801d506:	440a      	add	r2, r1
 801d508:	781b      	ldrb	r3, [r3, #0]
 801d50a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801d50c:	7dfb      	ldrb	r3, [r7, #23]
 801d50e:	1c5a      	adds	r2, r3, #1
 801d510:	75fa      	strb	r2, [r7, #23]
 801d512:	461a      	mov	r2, r3
 801d514:	68bb      	ldr	r3, [r7, #8]
 801d516:	4413      	add	r3, r2
 801d518:	2200      	movs	r2, #0
 801d51a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801d51c:	68fb      	ldr	r3, [r7, #12]
 801d51e:	781b      	ldrb	r3, [r3, #0]
 801d520:	2b00      	cmp	r3, #0
 801d522:	d1e8      	bne.n	801d4f6 <USBD_GetString+0x4e>
    }
  }
}
 801d524:	bf00      	nop
 801d526:	3718      	adds	r7, #24
 801d528:	46bd      	mov	sp, r7
 801d52a:	bd80      	pop	{r7, pc}

0801d52c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801d52c:	b480      	push	{r7}
 801d52e:	b085      	sub	sp, #20
 801d530:	af00      	add	r7, sp, #0
 801d532:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801d534:	2300      	movs	r3, #0
 801d536:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 801d538:	e005      	b.n	801d546 <USBD_GetLen+0x1a>
  {
    len++;
 801d53a:	7bfb      	ldrb	r3, [r7, #15]
 801d53c:	3301      	adds	r3, #1
 801d53e:	73fb      	strb	r3, [r7, #15]
    buf++;
 801d540:	687b      	ldr	r3, [r7, #4]
 801d542:	3301      	adds	r3, #1
 801d544:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801d546:	687b      	ldr	r3, [r7, #4]
 801d548:	781b      	ldrb	r3, [r3, #0]
 801d54a:	2b00      	cmp	r3, #0
 801d54c:	d1f5      	bne.n	801d53a <USBD_GetLen+0xe>
  }

  return len;
 801d54e:	7bfb      	ldrb	r3, [r7, #15]
}
 801d550:	4618      	mov	r0, r3
 801d552:	3714      	adds	r7, #20
 801d554:	46bd      	mov	sp, r7
 801d556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d55a:	4770      	bx	lr

0801d55c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801d55c:	b580      	push	{r7, lr}
 801d55e:	b084      	sub	sp, #16
 801d560:	af00      	add	r7, sp, #0
 801d562:	60f8      	str	r0, [r7, #12]
 801d564:	60b9      	str	r1, [r7, #8]
 801d566:	4613      	mov	r3, r2
 801d568:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801d56a:	68fb      	ldr	r3, [r7, #12]
 801d56c:	2202      	movs	r2, #2
 801d56e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801d572:	88fa      	ldrh	r2, [r7, #6]
 801d574:	68fb      	ldr	r3, [r7, #12]
 801d576:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801d578:	88fa      	ldrh	r2, [r7, #6]
 801d57a:	68fb      	ldr	r3, [r7, #12]
 801d57c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801d57e:	88fb      	ldrh	r3, [r7, #6]
 801d580:	68ba      	ldr	r2, [r7, #8]
 801d582:	2100      	movs	r1, #0
 801d584:	68f8      	ldr	r0, [r7, #12]
 801d586:	f000 fd16 	bl	801dfb6 <USBD_LL_Transmit>

  return USBD_OK;
 801d58a:	2300      	movs	r3, #0
}
 801d58c:	4618      	mov	r0, r3
 801d58e:	3710      	adds	r7, #16
 801d590:	46bd      	mov	sp, r7
 801d592:	bd80      	pop	{r7, pc}

0801d594 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801d594:	b580      	push	{r7, lr}
 801d596:	b084      	sub	sp, #16
 801d598:	af00      	add	r7, sp, #0
 801d59a:	60f8      	str	r0, [r7, #12]
 801d59c:	60b9      	str	r1, [r7, #8]
 801d59e:	4613      	mov	r3, r2
 801d5a0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801d5a2:	88fb      	ldrh	r3, [r7, #6]
 801d5a4:	68ba      	ldr	r2, [r7, #8]
 801d5a6:	2100      	movs	r1, #0
 801d5a8:	68f8      	ldr	r0, [r7, #12]
 801d5aa:	f000 fd04 	bl	801dfb6 <USBD_LL_Transmit>

  return USBD_OK;
 801d5ae:	2300      	movs	r3, #0
}
 801d5b0:	4618      	mov	r0, r3
 801d5b2:	3710      	adds	r7, #16
 801d5b4:	46bd      	mov	sp, r7
 801d5b6:	bd80      	pop	{r7, pc}

0801d5b8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801d5b8:	b580      	push	{r7, lr}
 801d5ba:	b084      	sub	sp, #16
 801d5bc:	af00      	add	r7, sp, #0
 801d5be:	60f8      	str	r0, [r7, #12]
 801d5c0:	60b9      	str	r1, [r7, #8]
 801d5c2:	4613      	mov	r3, r2
 801d5c4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801d5c6:	68fb      	ldr	r3, [r7, #12]
 801d5c8:	2203      	movs	r2, #3
 801d5ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801d5ce:	88fa      	ldrh	r2, [r7, #6]
 801d5d0:	68fb      	ldr	r3, [r7, #12]
 801d5d2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 801d5d6:	88fa      	ldrh	r2, [r7, #6]
 801d5d8:	68fb      	ldr	r3, [r7, #12]
 801d5da:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801d5de:	88fb      	ldrh	r3, [r7, #6]
 801d5e0:	68ba      	ldr	r2, [r7, #8]
 801d5e2:	2100      	movs	r1, #0
 801d5e4:	68f8      	ldr	r0, [r7, #12]
 801d5e6:	f000 fd09 	bl	801dffc <USBD_LL_PrepareReceive>

  return USBD_OK;
 801d5ea:	2300      	movs	r3, #0
}
 801d5ec:	4618      	mov	r0, r3
 801d5ee:	3710      	adds	r7, #16
 801d5f0:	46bd      	mov	sp, r7
 801d5f2:	bd80      	pop	{r7, pc}

0801d5f4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801d5f4:	b580      	push	{r7, lr}
 801d5f6:	b084      	sub	sp, #16
 801d5f8:	af00      	add	r7, sp, #0
 801d5fa:	60f8      	str	r0, [r7, #12]
 801d5fc:	60b9      	str	r1, [r7, #8]
 801d5fe:	4613      	mov	r3, r2
 801d600:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801d602:	88fb      	ldrh	r3, [r7, #6]
 801d604:	68ba      	ldr	r2, [r7, #8]
 801d606:	2100      	movs	r1, #0
 801d608:	68f8      	ldr	r0, [r7, #12]
 801d60a:	f000 fcf7 	bl	801dffc <USBD_LL_PrepareReceive>

  return USBD_OK;
 801d60e:	2300      	movs	r3, #0
}
 801d610:	4618      	mov	r0, r3
 801d612:	3710      	adds	r7, #16
 801d614:	46bd      	mov	sp, r7
 801d616:	bd80      	pop	{r7, pc}

0801d618 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801d618:	b580      	push	{r7, lr}
 801d61a:	b082      	sub	sp, #8
 801d61c:	af00      	add	r7, sp, #0
 801d61e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801d620:	687b      	ldr	r3, [r7, #4]
 801d622:	2204      	movs	r2, #4
 801d624:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801d628:	2300      	movs	r3, #0
 801d62a:	2200      	movs	r2, #0
 801d62c:	2100      	movs	r1, #0
 801d62e:	6878      	ldr	r0, [r7, #4]
 801d630:	f000 fcc1 	bl	801dfb6 <USBD_LL_Transmit>

  return USBD_OK;
 801d634:	2300      	movs	r3, #0
}
 801d636:	4618      	mov	r0, r3
 801d638:	3708      	adds	r7, #8
 801d63a:	46bd      	mov	sp, r7
 801d63c:	bd80      	pop	{r7, pc}

0801d63e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801d63e:	b580      	push	{r7, lr}
 801d640:	b082      	sub	sp, #8
 801d642:	af00      	add	r7, sp, #0
 801d644:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801d646:	687b      	ldr	r3, [r7, #4]
 801d648:	2205      	movs	r2, #5
 801d64a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801d64e:	2300      	movs	r3, #0
 801d650:	2200      	movs	r2, #0
 801d652:	2100      	movs	r1, #0
 801d654:	6878      	ldr	r0, [r7, #4]
 801d656:	f000 fcd1 	bl	801dffc <USBD_LL_PrepareReceive>

  return USBD_OK;
 801d65a:	2300      	movs	r3, #0
}
 801d65c:	4618      	mov	r0, r3
 801d65e:	3708      	adds	r7, #8
 801d660:	46bd      	mov	sp, r7
 801d662:	bd80      	pop	{r7, pc}

0801d664 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801d664:	b580      	push	{r7, lr}
 801d666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801d668:	2200      	movs	r2, #0
 801d66a:	4913      	ldr	r1, [pc, #76]	; (801d6b8 <MX_USB_DEVICE_Init+0x54>)
 801d66c:	4813      	ldr	r0, [pc, #76]	; (801d6bc <MX_USB_DEVICE_Init+0x58>)
 801d66e:	f7fe ff29 	bl	801c4c4 <USBD_Init>
 801d672:	4603      	mov	r3, r0
 801d674:	2b00      	cmp	r3, #0
 801d676:	d001      	beq.n	801d67c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801d678:	f7e4 fb82 	bl	8001d80 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801d67c:	4910      	ldr	r1, [pc, #64]	; (801d6c0 <MX_USB_DEVICE_Init+0x5c>)
 801d67e:	480f      	ldr	r0, [pc, #60]	; (801d6bc <MX_USB_DEVICE_Init+0x58>)
 801d680:	f7fe ff4b 	bl	801c51a <USBD_RegisterClass>
 801d684:	4603      	mov	r3, r0
 801d686:	2b00      	cmp	r3, #0
 801d688:	d001      	beq.n	801d68e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801d68a:	f7e4 fb79 	bl	8001d80 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801d68e:	490d      	ldr	r1, [pc, #52]	; (801d6c4 <MX_USB_DEVICE_Init+0x60>)
 801d690:	480a      	ldr	r0, [pc, #40]	; (801d6bc <MX_USB_DEVICE_Init+0x58>)
 801d692:	f7fe fe79 	bl	801c388 <USBD_CDC_RegisterInterface>
 801d696:	4603      	mov	r3, r0
 801d698:	2b00      	cmp	r3, #0
 801d69a:	d001      	beq.n	801d6a0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801d69c:	f7e4 fb70 	bl	8001d80 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801d6a0:	4806      	ldr	r0, [pc, #24]	; (801d6bc <MX_USB_DEVICE_Init+0x58>)
 801d6a2:	f7fe ff54 	bl	801c54e <USBD_Start>
 801d6a6:	4603      	mov	r3, r0
 801d6a8:	2b00      	cmp	r3, #0
 801d6aa:	d001      	beq.n	801d6b0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801d6ac:	f7e4 fb68 	bl	8001d80 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801d6b0:	f7f7 f8ca 	bl	8014848 <HAL_PWREx_EnableUSBVoltageDetector>
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801d6b4:	bf00      	nop
 801d6b6:	bd80      	pop	{r7, pc}
 801d6b8:	24000138 	.word	0x24000138
 801d6bc:	24000638 	.word	0x24000638
 801d6c0:	24000024 	.word	0x24000024
 801d6c4:	24000128 	.word	0x24000128

0801d6c8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801d6c8:	b580      	push	{r7, lr}
 801d6ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801d6cc:	2200      	movs	r2, #0
 801d6ce:	4905      	ldr	r1, [pc, #20]	; (801d6e4 <CDC_Init_FS+0x1c>)
 801d6d0:	4805      	ldr	r0, [pc, #20]	; (801d6e8 <CDC_Init_FS+0x20>)
 801d6d2:	f7fe fe70 	bl	801c3b6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801d6d6:	4905      	ldr	r1, [pc, #20]	; (801d6ec <CDC_Init_FS+0x24>)
 801d6d8:	4803      	ldr	r0, [pc, #12]	; (801d6e8 <CDC_Init_FS+0x20>)
 801d6da:	f7fe fe86 	bl	801c3ea <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801d6de:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801d6e0:	4618      	mov	r0, r3
 801d6e2:	bd80      	pop	{r7, pc}
 801d6e4:	240010fc 	.word	0x240010fc
 801d6e8:	24000638 	.word	0x24000638
 801d6ec:	240008fc 	.word	0x240008fc

0801d6f0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801d6f0:	b480      	push	{r7}
 801d6f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801d6f4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801d6f6:	4618      	mov	r0, r3
 801d6f8:	46bd      	mov	sp, r7
 801d6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6fe:	4770      	bx	lr

0801d700 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801d700:	b480      	push	{r7}
 801d702:	b085      	sub	sp, #20
 801d704:	af00      	add	r7, sp, #0
 801d706:	4603      	mov	r3, r0
 801d708:	6039      	str	r1, [r7, #0]
 801d70a:	71fb      	strb	r3, [r7, #7]
 801d70c:	4613      	mov	r3, r2
 801d70e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 801d710:	f107 0308 	add.w	r3, r7, #8
 801d714:	2200      	movs	r2, #0
 801d716:	601a      	str	r2, [r3, #0]
 801d718:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 801d71c:	79fb      	ldrb	r3, [r7, #7]
 801d71e:	2b23      	cmp	r3, #35	; 0x23
 801d720:	d87c      	bhi.n	801d81c <CDC_Control_FS+0x11c>
 801d722:	a201      	add	r2, pc, #4	; (adr r2, 801d728 <CDC_Control_FS+0x28>)
 801d724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d728:	0801d81d 	.word	0x0801d81d
 801d72c:	0801d81d 	.word	0x0801d81d
 801d730:	0801d81d 	.word	0x0801d81d
 801d734:	0801d81d 	.word	0x0801d81d
 801d738:	0801d81d 	.word	0x0801d81d
 801d73c:	0801d81d 	.word	0x0801d81d
 801d740:	0801d81d 	.word	0x0801d81d
 801d744:	0801d81d 	.word	0x0801d81d
 801d748:	0801d81d 	.word	0x0801d81d
 801d74c:	0801d81d 	.word	0x0801d81d
 801d750:	0801d81d 	.word	0x0801d81d
 801d754:	0801d81d 	.word	0x0801d81d
 801d758:	0801d81d 	.word	0x0801d81d
 801d75c:	0801d81d 	.word	0x0801d81d
 801d760:	0801d81d 	.word	0x0801d81d
 801d764:	0801d81d 	.word	0x0801d81d
 801d768:	0801d81d 	.word	0x0801d81d
 801d76c:	0801d81d 	.word	0x0801d81d
 801d770:	0801d81d 	.word	0x0801d81d
 801d774:	0801d81d 	.word	0x0801d81d
 801d778:	0801d81d 	.word	0x0801d81d
 801d77c:	0801d81d 	.word	0x0801d81d
 801d780:	0801d81d 	.word	0x0801d81d
 801d784:	0801d81d 	.word	0x0801d81d
 801d788:	0801d81d 	.word	0x0801d81d
 801d78c:	0801d81d 	.word	0x0801d81d
 801d790:	0801d81d 	.word	0x0801d81d
 801d794:	0801d81d 	.word	0x0801d81d
 801d798:	0801d81d 	.word	0x0801d81d
 801d79c:	0801d81d 	.word	0x0801d81d
 801d7a0:	0801d81d 	.word	0x0801d81d
 801d7a4:	0801d81d 	.word	0x0801d81d
 801d7a8:	0801d7b9 	.word	0x0801d7b9
 801d7ac:	0801d7e5 	.word	0x0801d7e5
 801d7b0:	0801d81d 	.word	0x0801d81d
 801d7b4:	0801d81d 	.word	0x0801d81d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
     	tempbuf[0] = pbuf[0];
 801d7b8:	683b      	ldr	r3, [r7, #0]
 801d7ba:	781b      	ldrb	r3, [r3, #0]
 801d7bc:	723b      	strb	r3, [r7, #8]
     	tempbuf[1] = pbuf[1];
 801d7be:	683b      	ldr	r3, [r7, #0]
 801d7c0:	785b      	ldrb	r3, [r3, #1]
 801d7c2:	727b      	strb	r3, [r7, #9]
     	tempbuf[2] = pbuf[2];
 801d7c4:	683b      	ldr	r3, [r7, #0]
 801d7c6:	789b      	ldrb	r3, [r3, #2]
 801d7c8:	72bb      	strb	r3, [r7, #10]
     	tempbuf[3] = pbuf[3];
 801d7ca:	683b      	ldr	r3, [r7, #0]
 801d7cc:	78db      	ldrb	r3, [r3, #3]
 801d7ce:	72fb      	strb	r3, [r7, #11]
     	tempbuf[4] = pbuf[4];
 801d7d0:	683b      	ldr	r3, [r7, #0]
 801d7d2:	791b      	ldrb	r3, [r3, #4]
 801d7d4:	733b      	strb	r3, [r7, #12]
     	tempbuf[5] = pbuf[5];
 801d7d6:	683b      	ldr	r3, [r7, #0]
 801d7d8:	795b      	ldrb	r3, [r3, #5]
 801d7da:	737b      	strb	r3, [r7, #13]
     	tempbuf[6] = pbuf[6];
 801d7dc:	683b      	ldr	r3, [r7, #0]
 801d7de:	799b      	ldrb	r3, [r3, #6]
 801d7e0:	73bb      	strb	r3, [r7, #14]
     	break;
 801d7e2:	e01c      	b.n	801d81e <CDC_Control_FS+0x11e>

     case CDC_GET_LINE_CODING:
     	pbuf[0] = tempbuf[0];
 801d7e4:	7a3a      	ldrb	r2, [r7, #8]
 801d7e6:	683b      	ldr	r3, [r7, #0]
 801d7e8:	701a      	strb	r2, [r3, #0]
     	pbuf[1] = tempbuf[1];
 801d7ea:	683b      	ldr	r3, [r7, #0]
 801d7ec:	3301      	adds	r3, #1
 801d7ee:	7a7a      	ldrb	r2, [r7, #9]
 801d7f0:	701a      	strb	r2, [r3, #0]
     	pbuf[2] = tempbuf[2];
 801d7f2:	683b      	ldr	r3, [r7, #0]
 801d7f4:	3302      	adds	r3, #2
 801d7f6:	7aba      	ldrb	r2, [r7, #10]
 801d7f8:	701a      	strb	r2, [r3, #0]
     	pbuf[3] = tempbuf[3];
 801d7fa:	683b      	ldr	r3, [r7, #0]
 801d7fc:	3303      	adds	r3, #3
 801d7fe:	7afa      	ldrb	r2, [r7, #11]
 801d800:	701a      	strb	r2, [r3, #0]
     	pbuf[4] = tempbuf[4];
 801d802:	683b      	ldr	r3, [r7, #0]
 801d804:	3304      	adds	r3, #4
 801d806:	7b3a      	ldrb	r2, [r7, #12]
 801d808:	701a      	strb	r2, [r3, #0]
     	pbuf[5] = tempbuf[5];
 801d80a:	683b      	ldr	r3, [r7, #0]
 801d80c:	3305      	adds	r3, #5
 801d80e:	7b7a      	ldrb	r2, [r7, #13]
 801d810:	701a      	strb	r2, [r3, #0]
     	pbuf[6] = tempbuf[6];
 801d812:	683b      	ldr	r3, [r7, #0]
 801d814:	3306      	adds	r3, #6
 801d816:	7bba      	ldrb	r2, [r7, #14]
 801d818:	701a      	strb	r2, [r3, #0]
     	break;
 801d81a:	e000      	b.n	801d81e <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801d81c:	bf00      	nop
  }

  return (USBD_OK);
 801d81e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801d820:	4618      	mov	r0, r3
 801d822:	3714      	adds	r7, #20
 801d824:	46bd      	mov	sp, r7
 801d826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d82a:	4770      	bx	lr

0801d82c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801d82c:	b580      	push	{r7, lr}
 801d82e:	b082      	sub	sp, #8
 801d830:	af00      	add	r7, sp, #0
 801d832:	6078      	str	r0, [r7, #4]
 801d834:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801d836:	6879      	ldr	r1, [r7, #4]
 801d838:	4805      	ldr	r0, [pc, #20]	; (801d850 <CDC_Receive_FS+0x24>)
 801d83a:	f7fe fdd6 	bl	801c3ea <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801d83e:	4804      	ldr	r0, [pc, #16]	; (801d850 <CDC_Receive_FS+0x24>)
 801d840:	f7fe fe16 	bl	801c470 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801d844:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801d846:	4618      	mov	r0, r3
 801d848:	3708      	adds	r7, #8
 801d84a:	46bd      	mov	sp, r7
 801d84c:	bd80      	pop	{r7, pc}
 801d84e:	bf00      	nop
 801d850:	24000638 	.word	0x24000638

0801d854 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801d854:	b580      	push	{r7, lr}
 801d856:	b084      	sub	sp, #16
 801d858:	af00      	add	r7, sp, #0
 801d85a:	6078      	str	r0, [r7, #4]
 801d85c:	460b      	mov	r3, r1
 801d85e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801d860:	2300      	movs	r3, #0
 801d862:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801d864:	4b0d      	ldr	r3, [pc, #52]	; (801d89c <CDC_Transmit_FS+0x48>)
 801d866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d86a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801d86c:	68bb      	ldr	r3, [r7, #8]
 801d86e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801d872:	2b00      	cmp	r3, #0
 801d874:	d001      	beq.n	801d87a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801d876:	2301      	movs	r3, #1
 801d878:	e00b      	b.n	801d892 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801d87a:	887b      	ldrh	r3, [r7, #2]
 801d87c:	461a      	mov	r2, r3
 801d87e:	6879      	ldr	r1, [r7, #4]
 801d880:	4806      	ldr	r0, [pc, #24]	; (801d89c <CDC_Transmit_FS+0x48>)
 801d882:	f7fe fd98 	bl	801c3b6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801d886:	4805      	ldr	r0, [pc, #20]	; (801d89c <CDC_Transmit_FS+0x48>)
 801d888:	f7fe fdc3 	bl	801c412 <USBD_CDC_TransmitPacket>
 801d88c:	4603      	mov	r3, r0
 801d88e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801d890:	7bfb      	ldrb	r3, [r7, #15]
}
 801d892:	4618      	mov	r0, r3
 801d894:	3710      	adds	r7, #16
 801d896:	46bd      	mov	sp, r7
 801d898:	bd80      	pop	{r7, pc}
 801d89a:	bf00      	nop
 801d89c:	24000638 	.word	0x24000638

0801d8a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d8a0:	b480      	push	{r7}
 801d8a2:	b083      	sub	sp, #12
 801d8a4:	af00      	add	r7, sp, #0
 801d8a6:	4603      	mov	r3, r0
 801d8a8:	6039      	str	r1, [r7, #0]
 801d8aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801d8ac:	683b      	ldr	r3, [r7, #0]
 801d8ae:	2212      	movs	r2, #18
 801d8b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801d8b2:	4b03      	ldr	r3, [pc, #12]	; (801d8c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 801d8b4:	4618      	mov	r0, r3
 801d8b6:	370c      	adds	r7, #12
 801d8b8:	46bd      	mov	sp, r7
 801d8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8be:	4770      	bx	lr
 801d8c0:	24000154 	.word	0x24000154

0801d8c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d8c4:	b480      	push	{r7}
 801d8c6:	b083      	sub	sp, #12
 801d8c8:	af00      	add	r7, sp, #0
 801d8ca:	4603      	mov	r3, r0
 801d8cc:	6039      	str	r1, [r7, #0]
 801d8ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801d8d0:	683b      	ldr	r3, [r7, #0]
 801d8d2:	2204      	movs	r2, #4
 801d8d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801d8d6:	4b03      	ldr	r3, [pc, #12]	; (801d8e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801d8d8:	4618      	mov	r0, r3
 801d8da:	370c      	adds	r7, #12
 801d8dc:	46bd      	mov	sp, r7
 801d8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8e2:	4770      	bx	lr
 801d8e4:	24000168 	.word	0x24000168

0801d8e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d8e8:	b580      	push	{r7, lr}
 801d8ea:	b082      	sub	sp, #8
 801d8ec:	af00      	add	r7, sp, #0
 801d8ee:	4603      	mov	r3, r0
 801d8f0:	6039      	str	r1, [r7, #0]
 801d8f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801d8f4:	79fb      	ldrb	r3, [r7, #7]
 801d8f6:	2b00      	cmp	r3, #0
 801d8f8:	d105      	bne.n	801d906 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801d8fa:	683a      	ldr	r2, [r7, #0]
 801d8fc:	4907      	ldr	r1, [pc, #28]	; (801d91c <USBD_FS_ProductStrDescriptor+0x34>)
 801d8fe:	4808      	ldr	r0, [pc, #32]	; (801d920 <USBD_FS_ProductStrDescriptor+0x38>)
 801d900:	f7ff fdd2 	bl	801d4a8 <USBD_GetString>
 801d904:	e004      	b.n	801d910 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801d906:	683a      	ldr	r2, [r7, #0]
 801d908:	4904      	ldr	r1, [pc, #16]	; (801d91c <USBD_FS_ProductStrDescriptor+0x34>)
 801d90a:	4805      	ldr	r0, [pc, #20]	; (801d920 <USBD_FS_ProductStrDescriptor+0x38>)
 801d90c:	f7ff fdcc 	bl	801d4a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801d910:	4b02      	ldr	r3, [pc, #8]	; (801d91c <USBD_FS_ProductStrDescriptor+0x34>)
}
 801d912:	4618      	mov	r0, r3
 801d914:	3708      	adds	r7, #8
 801d916:	46bd      	mov	sp, r7
 801d918:	bd80      	pop	{r7, pc}
 801d91a:	bf00      	nop
 801d91c:	240018fc 	.word	0x240018fc
 801d920:	0801f354 	.word	0x0801f354

0801d924 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d924:	b580      	push	{r7, lr}
 801d926:	b082      	sub	sp, #8
 801d928:	af00      	add	r7, sp, #0
 801d92a:	4603      	mov	r3, r0
 801d92c:	6039      	str	r1, [r7, #0]
 801d92e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801d930:	683a      	ldr	r2, [r7, #0]
 801d932:	4904      	ldr	r1, [pc, #16]	; (801d944 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801d934:	4804      	ldr	r0, [pc, #16]	; (801d948 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801d936:	f7ff fdb7 	bl	801d4a8 <USBD_GetString>
  return USBD_StrDesc;
 801d93a:	4b02      	ldr	r3, [pc, #8]	; (801d944 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801d93c:	4618      	mov	r0, r3
 801d93e:	3708      	adds	r7, #8
 801d940:	46bd      	mov	sp, r7
 801d942:	bd80      	pop	{r7, pc}
 801d944:	240018fc 	.word	0x240018fc
 801d948:	0801f36c 	.word	0x0801f36c

0801d94c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d94c:	b580      	push	{r7, lr}
 801d94e:	b082      	sub	sp, #8
 801d950:	af00      	add	r7, sp, #0
 801d952:	4603      	mov	r3, r0
 801d954:	6039      	str	r1, [r7, #0]
 801d956:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801d958:	683b      	ldr	r3, [r7, #0]
 801d95a:	221a      	movs	r2, #26
 801d95c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801d95e:	f000 f843 	bl	801d9e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801d962:	4b02      	ldr	r3, [pc, #8]	; (801d96c <USBD_FS_SerialStrDescriptor+0x20>)
}
 801d964:	4618      	mov	r0, r3
 801d966:	3708      	adds	r7, #8
 801d968:	46bd      	mov	sp, r7
 801d96a:	bd80      	pop	{r7, pc}
 801d96c:	2400016c 	.word	0x2400016c

0801d970 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d970:	b580      	push	{r7, lr}
 801d972:	b082      	sub	sp, #8
 801d974:	af00      	add	r7, sp, #0
 801d976:	4603      	mov	r3, r0
 801d978:	6039      	str	r1, [r7, #0]
 801d97a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801d97c:	79fb      	ldrb	r3, [r7, #7]
 801d97e:	2b00      	cmp	r3, #0
 801d980:	d105      	bne.n	801d98e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801d982:	683a      	ldr	r2, [r7, #0]
 801d984:	4907      	ldr	r1, [pc, #28]	; (801d9a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 801d986:	4808      	ldr	r0, [pc, #32]	; (801d9a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 801d988:	f7ff fd8e 	bl	801d4a8 <USBD_GetString>
 801d98c:	e004      	b.n	801d998 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801d98e:	683a      	ldr	r2, [r7, #0]
 801d990:	4904      	ldr	r1, [pc, #16]	; (801d9a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 801d992:	4805      	ldr	r0, [pc, #20]	; (801d9a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 801d994:	f7ff fd88 	bl	801d4a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801d998:	4b02      	ldr	r3, [pc, #8]	; (801d9a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801d99a:	4618      	mov	r0, r3
 801d99c:	3708      	adds	r7, #8
 801d99e:	46bd      	mov	sp, r7
 801d9a0:	bd80      	pop	{r7, pc}
 801d9a2:	bf00      	nop
 801d9a4:	240018fc 	.word	0x240018fc
 801d9a8:	0801f380 	.word	0x0801f380

0801d9ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d9ac:	b580      	push	{r7, lr}
 801d9ae:	b082      	sub	sp, #8
 801d9b0:	af00      	add	r7, sp, #0
 801d9b2:	4603      	mov	r3, r0
 801d9b4:	6039      	str	r1, [r7, #0]
 801d9b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801d9b8:	79fb      	ldrb	r3, [r7, #7]
 801d9ba:	2b00      	cmp	r3, #0
 801d9bc:	d105      	bne.n	801d9ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801d9be:	683a      	ldr	r2, [r7, #0]
 801d9c0:	4907      	ldr	r1, [pc, #28]	; (801d9e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801d9c2:	4808      	ldr	r0, [pc, #32]	; (801d9e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801d9c4:	f7ff fd70 	bl	801d4a8 <USBD_GetString>
 801d9c8:	e004      	b.n	801d9d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801d9ca:	683a      	ldr	r2, [r7, #0]
 801d9cc:	4904      	ldr	r1, [pc, #16]	; (801d9e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801d9ce:	4805      	ldr	r0, [pc, #20]	; (801d9e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801d9d0:	f7ff fd6a 	bl	801d4a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801d9d4:	4b02      	ldr	r3, [pc, #8]	; (801d9e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801d9d6:	4618      	mov	r0, r3
 801d9d8:	3708      	adds	r7, #8
 801d9da:	46bd      	mov	sp, r7
 801d9dc:	bd80      	pop	{r7, pc}
 801d9de:	bf00      	nop
 801d9e0:	240018fc 	.word	0x240018fc
 801d9e4:	0801f38c 	.word	0x0801f38c

0801d9e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 801d9e8:	b580      	push	{r7, lr}
 801d9ea:	b084      	sub	sp, #16
 801d9ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801d9ee:	4b0f      	ldr	r3, [pc, #60]	; (801da2c <Get_SerialNum+0x44>)
 801d9f0:	681b      	ldr	r3, [r3, #0]
 801d9f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801d9f4:	4b0e      	ldr	r3, [pc, #56]	; (801da30 <Get_SerialNum+0x48>)
 801d9f6:	681b      	ldr	r3, [r3, #0]
 801d9f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801d9fa:	4b0e      	ldr	r3, [pc, #56]	; (801da34 <Get_SerialNum+0x4c>)
 801d9fc:	681b      	ldr	r3, [r3, #0]
 801d9fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801da00:	68fa      	ldr	r2, [r7, #12]
 801da02:	687b      	ldr	r3, [r7, #4]
 801da04:	4413      	add	r3, r2
 801da06:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801da08:	68fb      	ldr	r3, [r7, #12]
 801da0a:	2b00      	cmp	r3, #0
 801da0c:	d009      	beq.n	801da22 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801da0e:	2208      	movs	r2, #8
 801da10:	4909      	ldr	r1, [pc, #36]	; (801da38 <Get_SerialNum+0x50>)
 801da12:	68f8      	ldr	r0, [r7, #12]
 801da14:	f000 f814 	bl	801da40 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801da18:	2204      	movs	r2, #4
 801da1a:	4908      	ldr	r1, [pc, #32]	; (801da3c <Get_SerialNum+0x54>)
 801da1c:	68b8      	ldr	r0, [r7, #8]
 801da1e:	f000 f80f 	bl	801da40 <IntToUnicode>
  }
}
 801da22:	bf00      	nop
 801da24:	3710      	adds	r7, #16
 801da26:	46bd      	mov	sp, r7
 801da28:	bd80      	pop	{r7, pc}
 801da2a:	bf00      	nop
 801da2c:	1ff1e800 	.word	0x1ff1e800
 801da30:	1ff1e804 	.word	0x1ff1e804
 801da34:	1ff1e808 	.word	0x1ff1e808
 801da38:	2400016e 	.word	0x2400016e
 801da3c:	2400017e 	.word	0x2400017e

0801da40 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801da40:	b480      	push	{r7}
 801da42:	b087      	sub	sp, #28
 801da44:	af00      	add	r7, sp, #0
 801da46:	60f8      	str	r0, [r7, #12]
 801da48:	60b9      	str	r1, [r7, #8]
 801da4a:	4613      	mov	r3, r2
 801da4c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801da4e:	2300      	movs	r3, #0
 801da50:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801da52:	2300      	movs	r3, #0
 801da54:	75fb      	strb	r3, [r7, #23]
 801da56:	e027      	b.n	801daa8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801da58:	68fb      	ldr	r3, [r7, #12]
 801da5a:	0f1b      	lsrs	r3, r3, #28
 801da5c:	2b09      	cmp	r3, #9
 801da5e:	d80b      	bhi.n	801da78 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801da60:	68fb      	ldr	r3, [r7, #12]
 801da62:	0f1b      	lsrs	r3, r3, #28
 801da64:	b2da      	uxtb	r2, r3
 801da66:	7dfb      	ldrb	r3, [r7, #23]
 801da68:	005b      	lsls	r3, r3, #1
 801da6a:	4619      	mov	r1, r3
 801da6c:	68bb      	ldr	r3, [r7, #8]
 801da6e:	440b      	add	r3, r1
 801da70:	3230      	adds	r2, #48	; 0x30
 801da72:	b2d2      	uxtb	r2, r2
 801da74:	701a      	strb	r2, [r3, #0]
 801da76:	e00a      	b.n	801da8e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801da78:	68fb      	ldr	r3, [r7, #12]
 801da7a:	0f1b      	lsrs	r3, r3, #28
 801da7c:	b2da      	uxtb	r2, r3
 801da7e:	7dfb      	ldrb	r3, [r7, #23]
 801da80:	005b      	lsls	r3, r3, #1
 801da82:	4619      	mov	r1, r3
 801da84:	68bb      	ldr	r3, [r7, #8]
 801da86:	440b      	add	r3, r1
 801da88:	3237      	adds	r2, #55	; 0x37
 801da8a:	b2d2      	uxtb	r2, r2
 801da8c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801da8e:	68fb      	ldr	r3, [r7, #12]
 801da90:	011b      	lsls	r3, r3, #4
 801da92:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801da94:	7dfb      	ldrb	r3, [r7, #23]
 801da96:	005b      	lsls	r3, r3, #1
 801da98:	3301      	adds	r3, #1
 801da9a:	68ba      	ldr	r2, [r7, #8]
 801da9c:	4413      	add	r3, r2
 801da9e:	2200      	movs	r2, #0
 801daa0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801daa2:	7dfb      	ldrb	r3, [r7, #23]
 801daa4:	3301      	adds	r3, #1
 801daa6:	75fb      	strb	r3, [r7, #23]
 801daa8:	7dfa      	ldrb	r2, [r7, #23]
 801daaa:	79fb      	ldrb	r3, [r7, #7]
 801daac:	429a      	cmp	r2, r3
 801daae:	d3d3      	bcc.n	801da58 <IntToUnicode+0x18>
  }
}
 801dab0:	bf00      	nop
 801dab2:	371c      	adds	r7, #28
 801dab4:	46bd      	mov	sp, r7
 801dab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801daba:	4770      	bx	lr

0801dabc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801dabc:	b580      	push	{r7, lr}
 801dabe:	b08a      	sub	sp, #40	; 0x28
 801dac0:	af00      	add	r7, sp, #0
 801dac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801dac4:	f107 0314 	add.w	r3, r7, #20
 801dac8:	2200      	movs	r2, #0
 801daca:	601a      	str	r2, [r3, #0]
 801dacc:	605a      	str	r2, [r3, #4]
 801dace:	609a      	str	r2, [r3, #8]
 801dad0:	60da      	str	r2, [r3, #12]
 801dad2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801dad4:	687b      	ldr	r3, [r7, #4]
 801dad6:	681b      	ldr	r3, [r3, #0]
 801dad8:	4a1e      	ldr	r2, [pc, #120]	; (801db54 <HAL_PCD_MspInit+0x98>)
 801dada:	4293      	cmp	r3, r2
 801dadc:	d136      	bne.n	801db4c <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801dade:	4b1e      	ldr	r3, [pc, #120]	; (801db58 <HAL_PCD_MspInit+0x9c>)
 801dae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801dae4:	4a1c      	ldr	r2, [pc, #112]	; (801db58 <HAL_PCD_MspInit+0x9c>)
 801dae6:	f043 0301 	orr.w	r3, r3, #1
 801daea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801daee:	4b1a      	ldr	r3, [pc, #104]	; (801db58 <HAL_PCD_MspInit+0x9c>)
 801daf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801daf4:	f003 0301 	and.w	r3, r3, #1
 801daf8:	613b      	str	r3, [r7, #16]
 801dafa:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 801dafc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 801db00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801db02:	2302      	movs	r3, #2
 801db04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801db06:	2300      	movs	r3, #0
 801db08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801db0a:	2300      	movs	r3, #0
 801db0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801db0e:	230a      	movs	r3, #10
 801db10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801db12:	f107 0314 	add.w	r3, r7, #20
 801db16:	4619      	mov	r1, r3
 801db18:	4810      	ldr	r0, [pc, #64]	; (801db5c <HAL_PCD_MspInit+0xa0>)
 801db1a:	f7f5 fa85 	bl	8013028 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801db1e:	4b0e      	ldr	r3, [pc, #56]	; (801db58 <HAL_PCD_MspInit+0x9c>)
 801db20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801db24:	4a0c      	ldr	r2, [pc, #48]	; (801db58 <HAL_PCD_MspInit+0x9c>)
 801db26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801db2a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801db2e:	4b0a      	ldr	r3, [pc, #40]	; (801db58 <HAL_PCD_MspInit+0x9c>)
 801db30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801db34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801db38:	60fb      	str	r3, [r7, #12]
 801db3a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801db3c:	2200      	movs	r2, #0
 801db3e:	2100      	movs	r1, #0
 801db40:	2065      	movs	r0, #101	; 0x65
 801db42:	f7f4 fff8 	bl	8012b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801db46:	2065      	movs	r0, #101	; 0x65
 801db48:	f7f5 f80f 	bl	8012b6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801db4c:	bf00      	nop
 801db4e:	3728      	adds	r7, #40	; 0x28
 801db50:	46bd      	mov	sp, r7
 801db52:	bd80      	pop	{r7, pc}
 801db54:	40080000 	.word	0x40080000
 801db58:	58024400 	.word	0x58024400
 801db5c:	58020000 	.word	0x58020000

0801db60 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801db60:	b580      	push	{r7, lr}
 801db62:	b082      	sub	sp, #8
 801db64:	af00      	add	r7, sp, #0
 801db66:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801db68:	687b      	ldr	r3, [r7, #4]
 801db6a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801db6e:	687b      	ldr	r3, [r7, #4]
 801db70:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801db74:	4619      	mov	r1, r3
 801db76:	4610      	mov	r0, r2
 801db78:	f7fe fd32 	bl	801c5e0 <USBD_LL_SetupStage>
}
 801db7c:	bf00      	nop
 801db7e:	3708      	adds	r7, #8
 801db80:	46bd      	mov	sp, r7
 801db82:	bd80      	pop	{r7, pc}

0801db84 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801db84:	b580      	push	{r7, lr}
 801db86:	b082      	sub	sp, #8
 801db88:	af00      	add	r7, sp, #0
 801db8a:	6078      	str	r0, [r7, #4]
 801db8c:	460b      	mov	r3, r1
 801db8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801db90:	687b      	ldr	r3, [r7, #4]
 801db92:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801db96:	78fa      	ldrb	r2, [r7, #3]
 801db98:	6879      	ldr	r1, [r7, #4]
 801db9a:	4613      	mov	r3, r2
 801db9c:	00db      	lsls	r3, r3, #3
 801db9e:	1a9b      	subs	r3, r3, r2
 801dba0:	009b      	lsls	r3, r3, #2
 801dba2:	440b      	add	r3, r1
 801dba4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801dba8:	681a      	ldr	r2, [r3, #0]
 801dbaa:	78fb      	ldrb	r3, [r7, #3]
 801dbac:	4619      	mov	r1, r3
 801dbae:	f7fe fd62 	bl	801c676 <USBD_LL_DataOutStage>
}
 801dbb2:	bf00      	nop
 801dbb4:	3708      	adds	r7, #8
 801dbb6:	46bd      	mov	sp, r7
 801dbb8:	bd80      	pop	{r7, pc}

0801dbba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dbba:	b580      	push	{r7, lr}
 801dbbc:	b082      	sub	sp, #8
 801dbbe:	af00      	add	r7, sp, #0
 801dbc0:	6078      	str	r0, [r7, #4]
 801dbc2:	460b      	mov	r3, r1
 801dbc4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801dbc6:	687b      	ldr	r3, [r7, #4]
 801dbc8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801dbcc:	78fa      	ldrb	r2, [r7, #3]
 801dbce:	6879      	ldr	r1, [r7, #4]
 801dbd0:	4613      	mov	r3, r2
 801dbd2:	00db      	lsls	r3, r3, #3
 801dbd4:	1a9b      	subs	r3, r3, r2
 801dbd6:	009b      	lsls	r3, r3, #2
 801dbd8:	440b      	add	r3, r1
 801dbda:	3348      	adds	r3, #72	; 0x48
 801dbdc:	681a      	ldr	r2, [r3, #0]
 801dbde:	78fb      	ldrb	r3, [r7, #3]
 801dbe0:	4619      	mov	r1, r3
 801dbe2:	f7fe fdb9 	bl	801c758 <USBD_LL_DataInStage>
}
 801dbe6:	bf00      	nop
 801dbe8:	3708      	adds	r7, #8
 801dbea:	46bd      	mov	sp, r7
 801dbec:	bd80      	pop	{r7, pc}

0801dbee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dbee:	b580      	push	{r7, lr}
 801dbf0:	b082      	sub	sp, #8
 801dbf2:	af00      	add	r7, sp, #0
 801dbf4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801dbf6:	687b      	ldr	r3, [r7, #4]
 801dbf8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801dbfc:	4618      	mov	r0, r3
 801dbfe:	f7fe fecc 	bl	801c99a <USBD_LL_SOF>
}
 801dc02:	bf00      	nop
 801dc04:	3708      	adds	r7, #8
 801dc06:	46bd      	mov	sp, r7
 801dc08:	bd80      	pop	{r7, pc}

0801dc0a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 801dc0a:	b580      	push	{r7, lr}
 801dc0c:	b084      	sub	sp, #16
 801dc0e:	af00      	add	r7, sp, #0
 801dc10:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801dc12:	2301      	movs	r3, #1
 801dc14:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801dc16:	687b      	ldr	r3, [r7, #4]
 801dc18:	68db      	ldr	r3, [r3, #12]
 801dc1a:	2b00      	cmp	r3, #0
 801dc1c:	d102      	bne.n	801dc24 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801dc1e:	2300      	movs	r3, #0
 801dc20:	73fb      	strb	r3, [r7, #15]
 801dc22:	e008      	b.n	801dc36 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801dc24:	687b      	ldr	r3, [r7, #4]
 801dc26:	68db      	ldr	r3, [r3, #12]
 801dc28:	2b02      	cmp	r3, #2
 801dc2a:	d102      	bne.n	801dc32 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801dc2c:	2301      	movs	r3, #1
 801dc2e:	73fb      	strb	r3, [r7, #15]
 801dc30:	e001      	b.n	801dc36 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801dc32:	f7e4 f8a5 	bl	8001d80 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801dc36:	687b      	ldr	r3, [r7, #4]
 801dc38:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801dc3c:	7bfa      	ldrb	r2, [r7, #15]
 801dc3e:	4611      	mov	r1, r2
 801dc40:	4618      	mov	r0, r3
 801dc42:	f7fe fe6f 	bl	801c924 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801dc46:	687b      	ldr	r3, [r7, #4]
 801dc48:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801dc4c:	4618      	mov	r0, r3
 801dc4e:	f7fe fe28 	bl	801c8a2 <USBD_LL_Reset>
}
 801dc52:	bf00      	nop
 801dc54:	3710      	adds	r7, #16
 801dc56:	46bd      	mov	sp, r7
 801dc58:	bd80      	pop	{r7, pc}
	...

0801dc5c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dc5c:	b580      	push	{r7, lr}
 801dc5e:	b082      	sub	sp, #8
 801dc60:	af00      	add	r7, sp, #0
 801dc62:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801dc64:	687b      	ldr	r3, [r7, #4]
 801dc66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801dc6a:	4618      	mov	r0, r3
 801dc6c:	f7fe fe6a 	bl	801c944 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801dc70:	687b      	ldr	r3, [r7, #4]
 801dc72:	681b      	ldr	r3, [r3, #0]
 801dc74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801dc78:	681b      	ldr	r3, [r3, #0]
 801dc7a:	687a      	ldr	r2, [r7, #4]
 801dc7c:	6812      	ldr	r2, [r2, #0]
 801dc7e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801dc82:	f043 0301 	orr.w	r3, r3, #1
 801dc86:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801dc88:	687b      	ldr	r3, [r7, #4]
 801dc8a:	6a1b      	ldr	r3, [r3, #32]
 801dc8c:	2b00      	cmp	r3, #0
 801dc8e:	d005      	beq.n	801dc9c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801dc90:	4b04      	ldr	r3, [pc, #16]	; (801dca4 <HAL_PCD_SuspendCallback+0x48>)
 801dc92:	691b      	ldr	r3, [r3, #16]
 801dc94:	4a03      	ldr	r2, [pc, #12]	; (801dca4 <HAL_PCD_SuspendCallback+0x48>)
 801dc96:	f043 0306 	orr.w	r3, r3, #6
 801dc9a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801dc9c:	bf00      	nop
 801dc9e:	3708      	adds	r7, #8
 801dca0:	46bd      	mov	sp, r7
 801dca2:	bd80      	pop	{r7, pc}
 801dca4:	e000ed00 	.word	0xe000ed00

0801dca8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dca8:	b580      	push	{r7, lr}
 801dcaa:	b082      	sub	sp, #8
 801dcac:	af00      	add	r7, sp, #0
 801dcae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801dcb0:	687b      	ldr	r3, [r7, #4]
 801dcb2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801dcb6:	4618      	mov	r0, r3
 801dcb8:	f7fe fe59 	bl	801c96e <USBD_LL_Resume>
}
 801dcbc:	bf00      	nop
 801dcbe:	3708      	adds	r7, #8
 801dcc0:	46bd      	mov	sp, r7
 801dcc2:	bd80      	pop	{r7, pc}

0801dcc4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dcc4:	b580      	push	{r7, lr}
 801dcc6:	b082      	sub	sp, #8
 801dcc8:	af00      	add	r7, sp, #0
 801dcca:	6078      	str	r0, [r7, #4]
 801dccc:	460b      	mov	r3, r1
 801dcce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801dcd0:	687b      	ldr	r3, [r7, #4]
 801dcd2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801dcd6:	78fa      	ldrb	r2, [r7, #3]
 801dcd8:	4611      	mov	r1, r2
 801dcda:	4618      	mov	r0, r3
 801dcdc:	f7fe fe84 	bl	801c9e8 <USBD_LL_IsoOUTIncomplete>
}
 801dce0:	bf00      	nop
 801dce2:	3708      	adds	r7, #8
 801dce4:	46bd      	mov	sp, r7
 801dce6:	bd80      	pop	{r7, pc}

0801dce8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dce8:	b580      	push	{r7, lr}
 801dcea:	b082      	sub	sp, #8
 801dcec:	af00      	add	r7, sp, #0
 801dcee:	6078      	str	r0, [r7, #4]
 801dcf0:	460b      	mov	r3, r1
 801dcf2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801dcf4:	687b      	ldr	r3, [r7, #4]
 801dcf6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801dcfa:	78fa      	ldrb	r2, [r7, #3]
 801dcfc:	4611      	mov	r1, r2
 801dcfe:	4618      	mov	r0, r3
 801dd00:	f7fe fe65 	bl	801c9ce <USBD_LL_IsoINIncomplete>
}
 801dd04:	bf00      	nop
 801dd06:	3708      	adds	r7, #8
 801dd08:	46bd      	mov	sp, r7
 801dd0a:	bd80      	pop	{r7, pc}

0801dd0c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dd0c:	b580      	push	{r7, lr}
 801dd0e:	b082      	sub	sp, #8
 801dd10:	af00      	add	r7, sp, #0
 801dd12:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801dd14:	687b      	ldr	r3, [r7, #4]
 801dd16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801dd1a:	4618      	mov	r0, r3
 801dd1c:	f7fe fe71 	bl	801ca02 <USBD_LL_DevConnected>
}
 801dd20:	bf00      	nop
 801dd22:	3708      	adds	r7, #8
 801dd24:	46bd      	mov	sp, r7
 801dd26:	bd80      	pop	{r7, pc}

0801dd28 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dd28:	b580      	push	{r7, lr}
 801dd2a:	b082      	sub	sp, #8
 801dd2c:	af00      	add	r7, sp, #0
 801dd2e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801dd30:	687b      	ldr	r3, [r7, #4]
 801dd32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801dd36:	4618      	mov	r0, r3
 801dd38:	f7fe fe6e 	bl	801ca18 <USBD_LL_DevDisconnected>
}
 801dd3c:	bf00      	nop
 801dd3e:	3708      	adds	r7, #8
 801dd40:	46bd      	mov	sp, r7
 801dd42:	bd80      	pop	{r7, pc}

0801dd44 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801dd44:	b580      	push	{r7, lr}
 801dd46:	b082      	sub	sp, #8
 801dd48:	af00      	add	r7, sp, #0
 801dd4a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801dd4c:	687b      	ldr	r3, [r7, #4]
 801dd4e:	781b      	ldrb	r3, [r3, #0]
 801dd50:	2b00      	cmp	r3, #0
 801dd52:	d13e      	bne.n	801ddd2 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801dd54:	4a21      	ldr	r2, [pc, #132]	; (801dddc <USBD_LL_Init+0x98>)
 801dd56:	687b      	ldr	r3, [r7, #4]
 801dd58:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801dd5c:	687b      	ldr	r3, [r7, #4]
 801dd5e:	4a1f      	ldr	r2, [pc, #124]	; (801dddc <USBD_LL_Init+0x98>)
 801dd60:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801dd64:	4b1d      	ldr	r3, [pc, #116]	; (801dddc <USBD_LL_Init+0x98>)
 801dd66:	4a1e      	ldr	r2, [pc, #120]	; (801dde0 <USBD_LL_Init+0x9c>)
 801dd68:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801dd6a:	4b1c      	ldr	r3, [pc, #112]	; (801dddc <USBD_LL_Init+0x98>)
 801dd6c:	2209      	movs	r2, #9
 801dd6e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801dd70:	4b1a      	ldr	r3, [pc, #104]	; (801dddc <USBD_LL_Init+0x98>)
 801dd72:	2202      	movs	r2, #2
 801dd74:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801dd76:	4b19      	ldr	r3, [pc, #100]	; (801dddc <USBD_LL_Init+0x98>)
 801dd78:	2200      	movs	r2, #0
 801dd7a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801dd7c:	4b17      	ldr	r3, [pc, #92]	; (801dddc <USBD_LL_Init+0x98>)
 801dd7e:	2202      	movs	r2, #2
 801dd80:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 801dd82:	4b16      	ldr	r3, [pc, #88]	; (801dddc <USBD_LL_Init+0x98>)
 801dd84:	2201      	movs	r2, #1
 801dd86:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801dd88:	4b14      	ldr	r3, [pc, #80]	; (801dddc <USBD_LL_Init+0x98>)
 801dd8a:	2200      	movs	r2, #0
 801dd8c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801dd8e:	4b13      	ldr	r3, [pc, #76]	; (801dddc <USBD_LL_Init+0x98>)
 801dd90:	2200      	movs	r2, #0
 801dd92:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801dd94:	4b11      	ldr	r3, [pc, #68]	; (801dddc <USBD_LL_Init+0x98>)
 801dd96:	2200      	movs	r2, #0
 801dd98:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801dd9a:	4b10      	ldr	r3, [pc, #64]	; (801dddc <USBD_LL_Init+0x98>)
 801dd9c:	2200      	movs	r2, #0
 801dd9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801dda0:	4b0e      	ldr	r3, [pc, #56]	; (801dddc <USBD_LL_Init+0x98>)
 801dda2:	2200      	movs	r2, #0
 801dda4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801dda6:	480d      	ldr	r0, [pc, #52]	; (801dddc <USBD_LL_Init+0x98>)
 801dda8:	f7f5 fb39 	bl	801341e <HAL_PCD_Init>
 801ddac:	4603      	mov	r3, r0
 801ddae:	2b00      	cmp	r3, #0
 801ddb0:	d001      	beq.n	801ddb6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801ddb2:	f7e3 ffe5 	bl	8001d80 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801ddb6:	2180      	movs	r1, #128	; 0x80
 801ddb8:	4808      	ldr	r0, [pc, #32]	; (801dddc <USBD_LL_Init+0x98>)
 801ddba:	f7f6 fcca 	bl	8014752 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801ddbe:	2240      	movs	r2, #64	; 0x40
 801ddc0:	2100      	movs	r1, #0
 801ddc2:	4806      	ldr	r0, [pc, #24]	; (801dddc <USBD_LL_Init+0x98>)
 801ddc4:	f7f6 fc7e 	bl	80146c4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801ddc8:	2280      	movs	r2, #128	; 0x80
 801ddca:	2101      	movs	r1, #1
 801ddcc:	4803      	ldr	r0, [pc, #12]	; (801dddc <USBD_LL_Init+0x98>)
 801ddce:	f7f6 fc79 	bl	80146c4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801ddd2:	2300      	movs	r3, #0
}
 801ddd4:	4618      	mov	r0, r3
 801ddd6:	3708      	adds	r7, #8
 801ddd8:	46bd      	mov	sp, r7
 801ddda:	bd80      	pop	{r7, pc}
 801dddc:	24001afc 	.word	0x24001afc
 801dde0:	40080000 	.word	0x40080000

0801dde4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801dde4:	b580      	push	{r7, lr}
 801dde6:	b084      	sub	sp, #16
 801dde8:	af00      	add	r7, sp, #0
 801ddea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ddec:	2300      	movs	r3, #0
 801ddee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ddf0:	2300      	movs	r3, #0
 801ddf2:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 801ddf4:	687b      	ldr	r3, [r7, #4]
 801ddf6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801ddfa:	4618      	mov	r0, r3
 801ddfc:	f7f5 fc33 	bl	8013666 <HAL_PCD_Start>
 801de00:	4603      	mov	r3, r0
 801de02:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 801de04:	7bfb      	ldrb	r3, [r7, #15]
 801de06:	4618      	mov	r0, r3
 801de08:	f000 f92e 	bl	801e068 <USBD_Get_USB_Status>
 801de0c:	4603      	mov	r3, r0
 801de0e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801de10:	7bbb      	ldrb	r3, [r7, #14]
}
 801de12:	4618      	mov	r0, r3
 801de14:	3710      	adds	r7, #16
 801de16:	46bd      	mov	sp, r7
 801de18:	bd80      	pop	{r7, pc}

0801de1a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801de1a:	b580      	push	{r7, lr}
 801de1c:	b084      	sub	sp, #16
 801de1e:	af00      	add	r7, sp, #0
 801de20:	6078      	str	r0, [r7, #4]
 801de22:	4608      	mov	r0, r1
 801de24:	4611      	mov	r1, r2
 801de26:	461a      	mov	r2, r3
 801de28:	4603      	mov	r3, r0
 801de2a:	70fb      	strb	r3, [r7, #3]
 801de2c:	460b      	mov	r3, r1
 801de2e:	70bb      	strb	r3, [r7, #2]
 801de30:	4613      	mov	r3, r2
 801de32:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801de34:	2300      	movs	r3, #0
 801de36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801de38:	2300      	movs	r3, #0
 801de3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801de3c:	687b      	ldr	r3, [r7, #4]
 801de3e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801de42:	78bb      	ldrb	r3, [r7, #2]
 801de44:	883a      	ldrh	r2, [r7, #0]
 801de46:	78f9      	ldrb	r1, [r7, #3]
 801de48:	f7f6 f844 	bl	8013ed4 <HAL_PCD_EP_Open>
 801de4c:	4603      	mov	r3, r0
 801de4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801de50:	7bfb      	ldrb	r3, [r7, #15]
 801de52:	4618      	mov	r0, r3
 801de54:	f000 f908 	bl	801e068 <USBD_Get_USB_Status>
 801de58:	4603      	mov	r3, r0
 801de5a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801de5c:	7bbb      	ldrb	r3, [r7, #14]
}
 801de5e:	4618      	mov	r0, r3
 801de60:	3710      	adds	r7, #16
 801de62:	46bd      	mov	sp, r7
 801de64:	bd80      	pop	{r7, pc}

0801de66 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801de66:	b580      	push	{r7, lr}
 801de68:	b084      	sub	sp, #16
 801de6a:	af00      	add	r7, sp, #0
 801de6c:	6078      	str	r0, [r7, #4]
 801de6e:	460b      	mov	r3, r1
 801de70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801de72:	2300      	movs	r3, #0
 801de74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801de76:	2300      	movs	r3, #0
 801de78:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801de7a:	687b      	ldr	r3, [r7, #4]
 801de7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801de80:	78fa      	ldrb	r2, [r7, #3]
 801de82:	4611      	mov	r1, r2
 801de84:	4618      	mov	r0, r3
 801de86:	f7f6 f88d 	bl	8013fa4 <HAL_PCD_EP_Close>
 801de8a:	4603      	mov	r3, r0
 801de8c:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 801de8e:	7bfb      	ldrb	r3, [r7, #15]
 801de90:	4618      	mov	r0, r3
 801de92:	f000 f8e9 	bl	801e068 <USBD_Get_USB_Status>
 801de96:	4603      	mov	r3, r0
 801de98:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 801de9a:	7bbb      	ldrb	r3, [r7, #14]
}
 801de9c:	4618      	mov	r0, r3
 801de9e:	3710      	adds	r7, #16
 801dea0:	46bd      	mov	sp, r7
 801dea2:	bd80      	pop	{r7, pc}

0801dea4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801dea4:	b580      	push	{r7, lr}
 801dea6:	b084      	sub	sp, #16
 801dea8:	af00      	add	r7, sp, #0
 801deaa:	6078      	str	r0, [r7, #4]
 801deac:	460b      	mov	r3, r1
 801deae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801deb0:	2300      	movs	r3, #0
 801deb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801deb4:	2300      	movs	r3, #0
 801deb6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801deb8:	687b      	ldr	r3, [r7, #4]
 801deba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801debe:	78fa      	ldrb	r2, [r7, #3]
 801dec0:	4611      	mov	r1, r2
 801dec2:	4618      	mov	r0, r3
 801dec4:	f7f6 f965 	bl	8014192 <HAL_PCD_EP_SetStall>
 801dec8:	4603      	mov	r3, r0
 801deca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801decc:	7bfb      	ldrb	r3, [r7, #15]
 801dece:	4618      	mov	r0, r3
 801ded0:	f000 f8ca 	bl	801e068 <USBD_Get_USB_Status>
 801ded4:	4603      	mov	r3, r0
 801ded6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 801ded8:	7bbb      	ldrb	r3, [r7, #14]
}
 801deda:	4618      	mov	r0, r3
 801dedc:	3710      	adds	r7, #16
 801dede:	46bd      	mov	sp, r7
 801dee0:	bd80      	pop	{r7, pc}

0801dee2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801dee2:	b580      	push	{r7, lr}
 801dee4:	b084      	sub	sp, #16
 801dee6:	af00      	add	r7, sp, #0
 801dee8:	6078      	str	r0, [r7, #4]
 801deea:	460b      	mov	r3, r1
 801deec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801deee:	2300      	movs	r3, #0
 801def0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801def2:	2300      	movs	r3, #0
 801def4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801def6:	687b      	ldr	r3, [r7, #4]
 801def8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801defc:	78fa      	ldrb	r2, [r7, #3]
 801defe:	4611      	mov	r1, r2
 801df00:	4618      	mov	r0, r3
 801df02:	f7f6 f9aa 	bl	801425a <HAL_PCD_EP_ClrStall>
 801df06:	4603      	mov	r3, r0
 801df08:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 801df0a:	7bfb      	ldrb	r3, [r7, #15]
 801df0c:	4618      	mov	r0, r3
 801df0e:	f000 f8ab 	bl	801e068 <USBD_Get_USB_Status>
 801df12:	4603      	mov	r3, r0
 801df14:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 801df16:	7bbb      	ldrb	r3, [r7, #14]
}
 801df18:	4618      	mov	r0, r3
 801df1a:	3710      	adds	r7, #16
 801df1c:	46bd      	mov	sp, r7
 801df1e:	bd80      	pop	{r7, pc}

0801df20 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801df20:	b480      	push	{r7}
 801df22:	b085      	sub	sp, #20
 801df24:	af00      	add	r7, sp, #0
 801df26:	6078      	str	r0, [r7, #4]
 801df28:	460b      	mov	r3, r1
 801df2a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801df2c:	687b      	ldr	r3, [r7, #4]
 801df2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801df32:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 801df34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801df38:	2b00      	cmp	r3, #0
 801df3a:	da0b      	bge.n	801df54 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 801df3c:	78fb      	ldrb	r3, [r7, #3]
 801df3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801df42:	68f9      	ldr	r1, [r7, #12]
 801df44:	4613      	mov	r3, r2
 801df46:	00db      	lsls	r3, r3, #3
 801df48:	1a9b      	subs	r3, r3, r2
 801df4a:	009b      	lsls	r3, r3, #2
 801df4c:	440b      	add	r3, r1
 801df4e:	333e      	adds	r3, #62	; 0x3e
 801df50:	781b      	ldrb	r3, [r3, #0]
 801df52:	e00b      	b.n	801df6c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 801df54:	78fb      	ldrb	r3, [r7, #3]
 801df56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801df5a:	68f9      	ldr	r1, [r7, #12]
 801df5c:	4613      	mov	r3, r2
 801df5e:	00db      	lsls	r3, r3, #3
 801df60:	1a9b      	subs	r3, r3, r2
 801df62:	009b      	lsls	r3, r3, #2
 801df64:	440b      	add	r3, r1
 801df66:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801df6a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801df6c:	4618      	mov	r0, r3
 801df6e:	3714      	adds	r7, #20
 801df70:	46bd      	mov	sp, r7
 801df72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df76:	4770      	bx	lr

0801df78 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801df78:	b580      	push	{r7, lr}
 801df7a:	b084      	sub	sp, #16
 801df7c:	af00      	add	r7, sp, #0
 801df7e:	6078      	str	r0, [r7, #4]
 801df80:	460b      	mov	r3, r1
 801df82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801df84:	2300      	movs	r3, #0
 801df86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801df88:	2300      	movs	r3, #0
 801df8a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801df8c:	687b      	ldr	r3, [r7, #4]
 801df8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801df92:	78fa      	ldrb	r2, [r7, #3]
 801df94:	4611      	mov	r1, r2
 801df96:	4618      	mov	r0, r3
 801df98:	f7f5 ff77 	bl	8013e8a <HAL_PCD_SetAddress>
 801df9c:	4603      	mov	r3, r0
 801df9e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 801dfa0:	7bfb      	ldrb	r3, [r7, #15]
 801dfa2:	4618      	mov	r0, r3
 801dfa4:	f000 f860 	bl	801e068 <USBD_Get_USB_Status>
 801dfa8:	4603      	mov	r3, r0
 801dfaa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 801dfac:	7bbb      	ldrb	r3, [r7, #14]
}
 801dfae:	4618      	mov	r0, r3
 801dfb0:	3710      	adds	r7, #16
 801dfb2:	46bd      	mov	sp, r7
 801dfb4:	bd80      	pop	{r7, pc}

0801dfb6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801dfb6:	b580      	push	{r7, lr}
 801dfb8:	b086      	sub	sp, #24
 801dfba:	af00      	add	r7, sp, #0
 801dfbc:	60f8      	str	r0, [r7, #12]
 801dfbe:	607a      	str	r2, [r7, #4]
 801dfc0:	461a      	mov	r2, r3
 801dfc2:	460b      	mov	r3, r1
 801dfc4:	72fb      	strb	r3, [r7, #11]
 801dfc6:	4613      	mov	r3, r2
 801dfc8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dfca:	2300      	movs	r3, #0
 801dfcc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dfce:	2300      	movs	r3, #0
 801dfd0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801dfd2:	68fb      	ldr	r3, [r7, #12]
 801dfd4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801dfd8:	893b      	ldrh	r3, [r7, #8]
 801dfda:	7af9      	ldrb	r1, [r7, #11]
 801dfdc:	687a      	ldr	r2, [r7, #4]
 801dfde:	f7f6 f88e 	bl	80140fe <HAL_PCD_EP_Transmit>
 801dfe2:	4603      	mov	r3, r0
 801dfe4:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 801dfe6:	7dfb      	ldrb	r3, [r7, #23]
 801dfe8:	4618      	mov	r0, r3
 801dfea:	f000 f83d 	bl	801e068 <USBD_Get_USB_Status>
 801dfee:	4603      	mov	r3, r0
 801dff0:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 801dff2:	7dbb      	ldrb	r3, [r7, #22]
}
 801dff4:	4618      	mov	r0, r3
 801dff6:	3718      	adds	r7, #24
 801dff8:	46bd      	mov	sp, r7
 801dffa:	bd80      	pop	{r7, pc}

0801dffc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801dffc:	b580      	push	{r7, lr}
 801dffe:	b086      	sub	sp, #24
 801e000:	af00      	add	r7, sp, #0
 801e002:	60f8      	str	r0, [r7, #12]
 801e004:	607a      	str	r2, [r7, #4]
 801e006:	461a      	mov	r2, r3
 801e008:	460b      	mov	r3, r1
 801e00a:	72fb      	strb	r3, [r7, #11]
 801e00c:	4613      	mov	r3, r2
 801e00e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e010:	2300      	movs	r3, #0
 801e012:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e014:	2300      	movs	r3, #0
 801e016:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801e018:	68fb      	ldr	r3, [r7, #12]
 801e01a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801e01e:	893b      	ldrh	r3, [r7, #8]
 801e020:	7af9      	ldrb	r1, [r7, #11]
 801e022:	687a      	ldr	r2, [r7, #4]
 801e024:	f7f6 f808 	bl	8014038 <HAL_PCD_EP_Receive>
 801e028:	4603      	mov	r3, r0
 801e02a:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 801e02c:	7dfb      	ldrb	r3, [r7, #23]
 801e02e:	4618      	mov	r0, r3
 801e030:	f000 f81a 	bl	801e068 <USBD_Get_USB_Status>
 801e034:	4603      	mov	r3, r0
 801e036:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 801e038:	7dbb      	ldrb	r3, [r7, #22]
}
 801e03a:	4618      	mov	r0, r3
 801e03c:	3718      	adds	r7, #24
 801e03e:	46bd      	mov	sp, r7
 801e040:	bd80      	pop	{r7, pc}

0801e042 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e042:	b580      	push	{r7, lr}
 801e044:	b082      	sub	sp, #8
 801e046:	af00      	add	r7, sp, #0
 801e048:	6078      	str	r0, [r7, #4]
 801e04a:	460b      	mov	r3, r1
 801e04c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801e04e:	687b      	ldr	r3, [r7, #4]
 801e050:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801e054:	78fa      	ldrb	r2, [r7, #3]
 801e056:	4611      	mov	r1, r2
 801e058:	4618      	mov	r0, r3
 801e05a:	f7f6 f838 	bl	80140ce <HAL_PCD_EP_GetRxCount>
 801e05e:	4603      	mov	r3, r0
}
 801e060:	4618      	mov	r0, r3
 801e062:	3708      	adds	r7, #8
 801e064:	46bd      	mov	sp, r7
 801e066:	bd80      	pop	{r7, pc}

0801e068 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801e068:	b480      	push	{r7}
 801e06a:	b085      	sub	sp, #20
 801e06c:	af00      	add	r7, sp, #0
 801e06e:	4603      	mov	r3, r0
 801e070:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e072:	2300      	movs	r3, #0
 801e074:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801e076:	79fb      	ldrb	r3, [r7, #7]
 801e078:	2b03      	cmp	r3, #3
 801e07a:	d817      	bhi.n	801e0ac <USBD_Get_USB_Status+0x44>
 801e07c:	a201      	add	r2, pc, #4	; (adr r2, 801e084 <USBD_Get_USB_Status+0x1c>)
 801e07e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e082:	bf00      	nop
 801e084:	0801e095 	.word	0x0801e095
 801e088:	0801e09b 	.word	0x0801e09b
 801e08c:	0801e0a1 	.word	0x0801e0a1
 801e090:	0801e0a7 	.word	0x0801e0a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801e094:	2300      	movs	r3, #0
 801e096:	73fb      	strb	r3, [r7, #15]
    break;
 801e098:	e00b      	b.n	801e0b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801e09a:	2302      	movs	r3, #2
 801e09c:	73fb      	strb	r3, [r7, #15]
    break;
 801e09e:	e008      	b.n	801e0b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801e0a0:	2301      	movs	r3, #1
 801e0a2:	73fb      	strb	r3, [r7, #15]
    break;
 801e0a4:	e005      	b.n	801e0b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801e0a6:	2302      	movs	r3, #2
 801e0a8:	73fb      	strb	r3, [r7, #15]
    break;
 801e0aa:	e002      	b.n	801e0b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801e0ac:	2302      	movs	r3, #2
 801e0ae:	73fb      	strb	r3, [r7, #15]
    break;
 801e0b0:	bf00      	nop
  }
  return usb_status;
 801e0b2:	7bfb      	ldrb	r3, [r7, #15]
}
 801e0b4:	4618      	mov	r0, r3
 801e0b6:	3714      	adds	r7, #20
 801e0b8:	46bd      	mov	sp, r7
 801e0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0be:	4770      	bx	lr

0801e0c0 <__errno>:
 801e0c0:	4b01      	ldr	r3, [pc, #4]	; (801e0c8 <__errno+0x8>)
 801e0c2:	6818      	ldr	r0, [r3, #0]
 801e0c4:	4770      	bx	lr
 801e0c6:	bf00      	nop
 801e0c8:	24000188 	.word	0x24000188

0801e0cc <__libc_init_array>:
 801e0cc:	b570      	push	{r4, r5, r6, lr}
 801e0ce:	4e0d      	ldr	r6, [pc, #52]	; (801e104 <__libc_init_array+0x38>)
 801e0d0:	4c0d      	ldr	r4, [pc, #52]	; (801e108 <__libc_init_array+0x3c>)
 801e0d2:	1ba4      	subs	r4, r4, r6
 801e0d4:	10a4      	asrs	r4, r4, #2
 801e0d6:	2500      	movs	r5, #0
 801e0d8:	42a5      	cmp	r5, r4
 801e0da:	d109      	bne.n	801e0f0 <__libc_init_array+0x24>
 801e0dc:	4e0b      	ldr	r6, [pc, #44]	; (801e10c <__libc_init_array+0x40>)
 801e0de:	4c0c      	ldr	r4, [pc, #48]	; (801e110 <__libc_init_array+0x44>)
 801e0e0:	f001 f908 	bl	801f2f4 <_init>
 801e0e4:	1ba4      	subs	r4, r4, r6
 801e0e6:	10a4      	asrs	r4, r4, #2
 801e0e8:	2500      	movs	r5, #0
 801e0ea:	42a5      	cmp	r5, r4
 801e0ec:	d105      	bne.n	801e0fa <__libc_init_array+0x2e>
 801e0ee:	bd70      	pop	{r4, r5, r6, pc}
 801e0f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801e0f4:	4798      	blx	r3
 801e0f6:	3501      	adds	r5, #1
 801e0f8:	e7ee      	b.n	801e0d8 <__libc_init_array+0xc>
 801e0fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801e0fe:	4798      	blx	r3
 801e100:	3501      	adds	r5, #1
 801e102:	e7f2      	b.n	801e0ea <__libc_init_array+0x1e>
 801e104:	0801f6e0 	.word	0x0801f6e0
 801e108:	0801f6e0 	.word	0x0801f6e0
 801e10c:	0801f6e0 	.word	0x0801f6e0
 801e110:	0801f6e4 	.word	0x0801f6e4

0801e114 <__itoa>:
 801e114:	1e93      	subs	r3, r2, #2
 801e116:	2b22      	cmp	r3, #34	; 0x22
 801e118:	b510      	push	{r4, lr}
 801e11a:	460c      	mov	r4, r1
 801e11c:	d904      	bls.n	801e128 <__itoa+0x14>
 801e11e:	2300      	movs	r3, #0
 801e120:	700b      	strb	r3, [r1, #0]
 801e122:	461c      	mov	r4, r3
 801e124:	4620      	mov	r0, r4
 801e126:	bd10      	pop	{r4, pc}
 801e128:	2a0a      	cmp	r2, #10
 801e12a:	d109      	bne.n	801e140 <__itoa+0x2c>
 801e12c:	2800      	cmp	r0, #0
 801e12e:	da07      	bge.n	801e140 <__itoa+0x2c>
 801e130:	232d      	movs	r3, #45	; 0x2d
 801e132:	700b      	strb	r3, [r1, #0]
 801e134:	4240      	negs	r0, r0
 801e136:	2101      	movs	r1, #1
 801e138:	4421      	add	r1, r4
 801e13a:	f000 f8ed 	bl	801e318 <__utoa>
 801e13e:	e7f1      	b.n	801e124 <__itoa+0x10>
 801e140:	2100      	movs	r1, #0
 801e142:	e7f9      	b.n	801e138 <__itoa+0x24>

0801e144 <itoa>:
 801e144:	f7ff bfe6 	b.w	801e114 <__itoa>

0801e148 <malloc>:
 801e148:	4b02      	ldr	r3, [pc, #8]	; (801e154 <malloc+0xc>)
 801e14a:	4601      	mov	r1, r0
 801e14c:	6818      	ldr	r0, [r3, #0]
 801e14e:	f000 b861 	b.w	801e214 <_malloc_r>
 801e152:	bf00      	nop
 801e154:	24000188 	.word	0x24000188

0801e158 <free>:
 801e158:	4b02      	ldr	r3, [pc, #8]	; (801e164 <free+0xc>)
 801e15a:	4601      	mov	r1, r0
 801e15c:	6818      	ldr	r0, [r3, #0]
 801e15e:	f000 b80b 	b.w	801e178 <_free_r>
 801e162:	bf00      	nop
 801e164:	24000188 	.word	0x24000188

0801e168 <memset>:
 801e168:	4402      	add	r2, r0
 801e16a:	4603      	mov	r3, r0
 801e16c:	4293      	cmp	r3, r2
 801e16e:	d100      	bne.n	801e172 <memset+0xa>
 801e170:	4770      	bx	lr
 801e172:	f803 1b01 	strb.w	r1, [r3], #1
 801e176:	e7f9      	b.n	801e16c <memset+0x4>

0801e178 <_free_r>:
 801e178:	b538      	push	{r3, r4, r5, lr}
 801e17a:	4605      	mov	r5, r0
 801e17c:	2900      	cmp	r1, #0
 801e17e:	d045      	beq.n	801e20c <_free_r+0x94>
 801e180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e184:	1f0c      	subs	r4, r1, #4
 801e186:	2b00      	cmp	r3, #0
 801e188:	bfb8      	it	lt
 801e18a:	18e4      	addlt	r4, r4, r3
 801e18c:	f000 f902 	bl	801e394 <__malloc_lock>
 801e190:	4a1f      	ldr	r2, [pc, #124]	; (801e210 <_free_r+0x98>)
 801e192:	6813      	ldr	r3, [r2, #0]
 801e194:	4610      	mov	r0, r2
 801e196:	b933      	cbnz	r3, 801e1a6 <_free_r+0x2e>
 801e198:	6063      	str	r3, [r4, #4]
 801e19a:	6014      	str	r4, [r2, #0]
 801e19c:	4628      	mov	r0, r5
 801e19e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e1a2:	f000 b8f8 	b.w	801e396 <__malloc_unlock>
 801e1a6:	42a3      	cmp	r3, r4
 801e1a8:	d90c      	bls.n	801e1c4 <_free_r+0x4c>
 801e1aa:	6821      	ldr	r1, [r4, #0]
 801e1ac:	1862      	adds	r2, r4, r1
 801e1ae:	4293      	cmp	r3, r2
 801e1b0:	bf04      	itt	eq
 801e1b2:	681a      	ldreq	r2, [r3, #0]
 801e1b4:	685b      	ldreq	r3, [r3, #4]
 801e1b6:	6063      	str	r3, [r4, #4]
 801e1b8:	bf04      	itt	eq
 801e1ba:	1852      	addeq	r2, r2, r1
 801e1bc:	6022      	streq	r2, [r4, #0]
 801e1be:	6004      	str	r4, [r0, #0]
 801e1c0:	e7ec      	b.n	801e19c <_free_r+0x24>
 801e1c2:	4613      	mov	r3, r2
 801e1c4:	685a      	ldr	r2, [r3, #4]
 801e1c6:	b10a      	cbz	r2, 801e1cc <_free_r+0x54>
 801e1c8:	42a2      	cmp	r2, r4
 801e1ca:	d9fa      	bls.n	801e1c2 <_free_r+0x4a>
 801e1cc:	6819      	ldr	r1, [r3, #0]
 801e1ce:	1858      	adds	r0, r3, r1
 801e1d0:	42a0      	cmp	r0, r4
 801e1d2:	d10b      	bne.n	801e1ec <_free_r+0x74>
 801e1d4:	6820      	ldr	r0, [r4, #0]
 801e1d6:	4401      	add	r1, r0
 801e1d8:	1858      	adds	r0, r3, r1
 801e1da:	4282      	cmp	r2, r0
 801e1dc:	6019      	str	r1, [r3, #0]
 801e1de:	d1dd      	bne.n	801e19c <_free_r+0x24>
 801e1e0:	6810      	ldr	r0, [r2, #0]
 801e1e2:	6852      	ldr	r2, [r2, #4]
 801e1e4:	605a      	str	r2, [r3, #4]
 801e1e6:	4401      	add	r1, r0
 801e1e8:	6019      	str	r1, [r3, #0]
 801e1ea:	e7d7      	b.n	801e19c <_free_r+0x24>
 801e1ec:	d902      	bls.n	801e1f4 <_free_r+0x7c>
 801e1ee:	230c      	movs	r3, #12
 801e1f0:	602b      	str	r3, [r5, #0]
 801e1f2:	e7d3      	b.n	801e19c <_free_r+0x24>
 801e1f4:	6820      	ldr	r0, [r4, #0]
 801e1f6:	1821      	adds	r1, r4, r0
 801e1f8:	428a      	cmp	r2, r1
 801e1fa:	bf04      	itt	eq
 801e1fc:	6811      	ldreq	r1, [r2, #0]
 801e1fe:	6852      	ldreq	r2, [r2, #4]
 801e200:	6062      	str	r2, [r4, #4]
 801e202:	bf04      	itt	eq
 801e204:	1809      	addeq	r1, r1, r0
 801e206:	6021      	streq	r1, [r4, #0]
 801e208:	605c      	str	r4, [r3, #4]
 801e20a:	e7c7      	b.n	801e19c <_free_r+0x24>
 801e20c:	bd38      	pop	{r3, r4, r5, pc}
 801e20e:	bf00      	nop
 801e210:	24000308 	.word	0x24000308

0801e214 <_malloc_r>:
 801e214:	b570      	push	{r4, r5, r6, lr}
 801e216:	1ccd      	adds	r5, r1, #3
 801e218:	f025 0503 	bic.w	r5, r5, #3
 801e21c:	3508      	adds	r5, #8
 801e21e:	2d0c      	cmp	r5, #12
 801e220:	bf38      	it	cc
 801e222:	250c      	movcc	r5, #12
 801e224:	2d00      	cmp	r5, #0
 801e226:	4606      	mov	r6, r0
 801e228:	db01      	blt.n	801e22e <_malloc_r+0x1a>
 801e22a:	42a9      	cmp	r1, r5
 801e22c:	d903      	bls.n	801e236 <_malloc_r+0x22>
 801e22e:	230c      	movs	r3, #12
 801e230:	6033      	str	r3, [r6, #0]
 801e232:	2000      	movs	r0, #0
 801e234:	bd70      	pop	{r4, r5, r6, pc}
 801e236:	f000 f8ad 	bl	801e394 <__malloc_lock>
 801e23a:	4a21      	ldr	r2, [pc, #132]	; (801e2c0 <_malloc_r+0xac>)
 801e23c:	6814      	ldr	r4, [r2, #0]
 801e23e:	4621      	mov	r1, r4
 801e240:	b991      	cbnz	r1, 801e268 <_malloc_r+0x54>
 801e242:	4c20      	ldr	r4, [pc, #128]	; (801e2c4 <_malloc_r+0xb0>)
 801e244:	6823      	ldr	r3, [r4, #0]
 801e246:	b91b      	cbnz	r3, 801e250 <_malloc_r+0x3c>
 801e248:	4630      	mov	r0, r6
 801e24a:	f000 f83d 	bl	801e2c8 <_sbrk_r>
 801e24e:	6020      	str	r0, [r4, #0]
 801e250:	4629      	mov	r1, r5
 801e252:	4630      	mov	r0, r6
 801e254:	f000 f838 	bl	801e2c8 <_sbrk_r>
 801e258:	1c43      	adds	r3, r0, #1
 801e25a:	d124      	bne.n	801e2a6 <_malloc_r+0x92>
 801e25c:	230c      	movs	r3, #12
 801e25e:	6033      	str	r3, [r6, #0]
 801e260:	4630      	mov	r0, r6
 801e262:	f000 f898 	bl	801e396 <__malloc_unlock>
 801e266:	e7e4      	b.n	801e232 <_malloc_r+0x1e>
 801e268:	680b      	ldr	r3, [r1, #0]
 801e26a:	1b5b      	subs	r3, r3, r5
 801e26c:	d418      	bmi.n	801e2a0 <_malloc_r+0x8c>
 801e26e:	2b0b      	cmp	r3, #11
 801e270:	d90f      	bls.n	801e292 <_malloc_r+0x7e>
 801e272:	600b      	str	r3, [r1, #0]
 801e274:	50cd      	str	r5, [r1, r3]
 801e276:	18cc      	adds	r4, r1, r3
 801e278:	4630      	mov	r0, r6
 801e27a:	f000 f88c 	bl	801e396 <__malloc_unlock>
 801e27e:	f104 000b 	add.w	r0, r4, #11
 801e282:	1d23      	adds	r3, r4, #4
 801e284:	f020 0007 	bic.w	r0, r0, #7
 801e288:	1ac3      	subs	r3, r0, r3
 801e28a:	d0d3      	beq.n	801e234 <_malloc_r+0x20>
 801e28c:	425a      	negs	r2, r3
 801e28e:	50e2      	str	r2, [r4, r3]
 801e290:	e7d0      	b.n	801e234 <_malloc_r+0x20>
 801e292:	428c      	cmp	r4, r1
 801e294:	684b      	ldr	r3, [r1, #4]
 801e296:	bf16      	itet	ne
 801e298:	6063      	strne	r3, [r4, #4]
 801e29a:	6013      	streq	r3, [r2, #0]
 801e29c:	460c      	movne	r4, r1
 801e29e:	e7eb      	b.n	801e278 <_malloc_r+0x64>
 801e2a0:	460c      	mov	r4, r1
 801e2a2:	6849      	ldr	r1, [r1, #4]
 801e2a4:	e7cc      	b.n	801e240 <_malloc_r+0x2c>
 801e2a6:	1cc4      	adds	r4, r0, #3
 801e2a8:	f024 0403 	bic.w	r4, r4, #3
 801e2ac:	42a0      	cmp	r0, r4
 801e2ae:	d005      	beq.n	801e2bc <_malloc_r+0xa8>
 801e2b0:	1a21      	subs	r1, r4, r0
 801e2b2:	4630      	mov	r0, r6
 801e2b4:	f000 f808 	bl	801e2c8 <_sbrk_r>
 801e2b8:	3001      	adds	r0, #1
 801e2ba:	d0cf      	beq.n	801e25c <_malloc_r+0x48>
 801e2bc:	6025      	str	r5, [r4, #0]
 801e2be:	e7db      	b.n	801e278 <_malloc_r+0x64>
 801e2c0:	24000308 	.word	0x24000308
 801e2c4:	2400030c 	.word	0x2400030c

0801e2c8 <_sbrk_r>:
 801e2c8:	b538      	push	{r3, r4, r5, lr}
 801e2ca:	4c06      	ldr	r4, [pc, #24]	; (801e2e4 <_sbrk_r+0x1c>)
 801e2cc:	2300      	movs	r3, #0
 801e2ce:	4605      	mov	r5, r0
 801e2d0:	4608      	mov	r0, r1
 801e2d2:	6023      	str	r3, [r4, #0]
 801e2d4:	f7e3 ffec 	bl	80022b0 <_sbrk>
 801e2d8:	1c43      	adds	r3, r0, #1
 801e2da:	d102      	bne.n	801e2e2 <_sbrk_r+0x1a>
 801e2dc:	6823      	ldr	r3, [r4, #0]
 801e2de:	b103      	cbz	r3, 801e2e2 <_sbrk_r+0x1a>
 801e2e0:	602b      	str	r3, [r5, #0]
 801e2e2:	bd38      	pop	{r3, r4, r5, pc}
 801e2e4:	24001f04 	.word	0x24001f04

0801e2e8 <strcat>:
 801e2e8:	b510      	push	{r4, lr}
 801e2ea:	4603      	mov	r3, r0
 801e2ec:	781a      	ldrb	r2, [r3, #0]
 801e2ee:	1c5c      	adds	r4, r3, #1
 801e2f0:	b93a      	cbnz	r2, 801e302 <strcat+0x1a>
 801e2f2:	3b01      	subs	r3, #1
 801e2f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e2f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e2fc:	2a00      	cmp	r2, #0
 801e2fe:	d1f9      	bne.n	801e2f4 <strcat+0xc>
 801e300:	bd10      	pop	{r4, pc}
 801e302:	4623      	mov	r3, r4
 801e304:	e7f2      	b.n	801e2ec <strcat+0x4>

0801e306 <strcpy>:
 801e306:	4603      	mov	r3, r0
 801e308:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e30c:	f803 2b01 	strb.w	r2, [r3], #1
 801e310:	2a00      	cmp	r2, #0
 801e312:	d1f9      	bne.n	801e308 <strcpy+0x2>
 801e314:	4770      	bx	lr
	...

0801e318 <__utoa>:
 801e318:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e31a:	4b1d      	ldr	r3, [pc, #116]	; (801e390 <__utoa+0x78>)
 801e31c:	b08b      	sub	sp, #44	; 0x2c
 801e31e:	4605      	mov	r5, r0
 801e320:	460c      	mov	r4, r1
 801e322:	466e      	mov	r6, sp
 801e324:	f103 0c20 	add.w	ip, r3, #32
 801e328:	6818      	ldr	r0, [r3, #0]
 801e32a:	6859      	ldr	r1, [r3, #4]
 801e32c:	4637      	mov	r7, r6
 801e32e:	c703      	stmia	r7!, {r0, r1}
 801e330:	3308      	adds	r3, #8
 801e332:	4563      	cmp	r3, ip
 801e334:	463e      	mov	r6, r7
 801e336:	d1f7      	bne.n	801e328 <__utoa+0x10>
 801e338:	6818      	ldr	r0, [r3, #0]
 801e33a:	791b      	ldrb	r3, [r3, #4]
 801e33c:	713b      	strb	r3, [r7, #4]
 801e33e:	1e93      	subs	r3, r2, #2
 801e340:	2b22      	cmp	r3, #34	; 0x22
 801e342:	6038      	str	r0, [r7, #0]
 801e344:	f04f 0300 	mov.w	r3, #0
 801e348:	d904      	bls.n	801e354 <__utoa+0x3c>
 801e34a:	7023      	strb	r3, [r4, #0]
 801e34c:	461c      	mov	r4, r3
 801e34e:	4620      	mov	r0, r4
 801e350:	b00b      	add	sp, #44	; 0x2c
 801e352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e354:	1e66      	subs	r6, r4, #1
 801e356:	fbb5 f0f2 	udiv	r0, r5, r2
 801e35a:	af0a      	add	r7, sp, #40	; 0x28
 801e35c:	fb02 5510 	mls	r5, r2, r0, r5
 801e360:	443d      	add	r5, r7
 801e362:	1c59      	adds	r1, r3, #1
 801e364:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 801e368:	f806 5f01 	strb.w	r5, [r6, #1]!
 801e36c:	4605      	mov	r5, r0
 801e36e:	b968      	cbnz	r0, 801e38c <__utoa+0x74>
 801e370:	5460      	strb	r0, [r4, r1]
 801e372:	4423      	add	r3, r4
 801e374:	4622      	mov	r2, r4
 801e376:	1b19      	subs	r1, r3, r4
 801e378:	1b10      	subs	r0, r2, r4
 801e37a:	4281      	cmp	r1, r0
 801e37c:	dde7      	ble.n	801e34e <__utoa+0x36>
 801e37e:	7811      	ldrb	r1, [r2, #0]
 801e380:	7818      	ldrb	r0, [r3, #0]
 801e382:	f802 0b01 	strb.w	r0, [r2], #1
 801e386:	f803 1901 	strb.w	r1, [r3], #-1
 801e38a:	e7f4      	b.n	801e376 <__utoa+0x5e>
 801e38c:	460b      	mov	r3, r1
 801e38e:	e7e2      	b.n	801e356 <__utoa+0x3e>
 801e390:	0801f4a0 	.word	0x0801f4a0

0801e394 <__malloc_lock>:
 801e394:	4770      	bx	lr

0801e396 <__malloc_unlock>:
 801e396:	4770      	bx	lr

0801e398 <cos>:
 801e398:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e39a:	eeb0 7b40 	vmov.f64	d7, d0
 801e39e:	ee17 3a90 	vmov	r3, s15
 801e3a2:	4a19      	ldr	r2, [pc, #100]	; (801e408 <cos+0x70>)
 801e3a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e3a8:	4293      	cmp	r3, r2
 801e3aa:	dc04      	bgt.n	801e3b6 <cos+0x1e>
 801e3ac:	ed9f 1b14 	vldr	d1, [pc, #80]	; 801e400 <cos+0x68>
 801e3b0:	f000 fb22 	bl	801e9f8 <__kernel_cos>
 801e3b4:	e004      	b.n	801e3c0 <cos+0x28>
 801e3b6:	4a15      	ldr	r2, [pc, #84]	; (801e40c <cos+0x74>)
 801e3b8:	4293      	cmp	r3, r2
 801e3ba:	dd04      	ble.n	801e3c6 <cos+0x2e>
 801e3bc:	ee30 0b40 	vsub.f64	d0, d0, d0
 801e3c0:	b005      	add	sp, #20
 801e3c2:	f85d fb04 	ldr.w	pc, [sp], #4
 801e3c6:	4668      	mov	r0, sp
 801e3c8:	f000 f9da 	bl	801e780 <__ieee754_rem_pio2>
 801e3cc:	f000 0003 	and.w	r0, r0, #3
 801e3d0:	2801      	cmp	r0, #1
 801e3d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e3d6:	ed9d 0b00 	vldr	d0, [sp]
 801e3da:	d007      	beq.n	801e3ec <cos+0x54>
 801e3dc:	2802      	cmp	r0, #2
 801e3de:	d00a      	beq.n	801e3f6 <cos+0x5e>
 801e3e0:	2800      	cmp	r0, #0
 801e3e2:	d0e5      	beq.n	801e3b0 <cos+0x18>
 801e3e4:	2001      	movs	r0, #1
 801e3e6:	f000 fe0f 	bl	801f008 <__kernel_sin>
 801e3ea:	e7e9      	b.n	801e3c0 <cos+0x28>
 801e3ec:	f000 fe0c 	bl	801f008 <__kernel_sin>
 801e3f0:	eeb1 0b40 	vneg.f64	d0, d0
 801e3f4:	e7e4      	b.n	801e3c0 <cos+0x28>
 801e3f6:	f000 faff 	bl	801e9f8 <__kernel_cos>
 801e3fa:	e7f9      	b.n	801e3f0 <cos+0x58>
 801e3fc:	f3af 8000 	nop.w
	...
 801e408:	3fe921fb 	.word	0x3fe921fb
 801e40c:	7fefffff 	.word	0x7fefffff

0801e410 <sin>:
 801e410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e412:	eeb0 7b40 	vmov.f64	d7, d0
 801e416:	ee17 3a90 	vmov	r3, s15
 801e41a:	4a19      	ldr	r2, [pc, #100]	; (801e480 <sin+0x70>)
 801e41c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e420:	4293      	cmp	r3, r2
 801e422:	dc05      	bgt.n	801e430 <sin+0x20>
 801e424:	ed9f 1b14 	vldr	d1, [pc, #80]	; 801e478 <sin+0x68>
 801e428:	2000      	movs	r0, #0
 801e42a:	f000 fded 	bl	801f008 <__kernel_sin>
 801e42e:	e004      	b.n	801e43a <sin+0x2a>
 801e430:	4a14      	ldr	r2, [pc, #80]	; (801e484 <sin+0x74>)
 801e432:	4293      	cmp	r3, r2
 801e434:	dd04      	ble.n	801e440 <sin+0x30>
 801e436:	ee30 0b40 	vsub.f64	d0, d0, d0
 801e43a:	b005      	add	sp, #20
 801e43c:	f85d fb04 	ldr.w	pc, [sp], #4
 801e440:	4668      	mov	r0, sp
 801e442:	f000 f99d 	bl	801e780 <__ieee754_rem_pio2>
 801e446:	f000 0003 	and.w	r0, r0, #3
 801e44a:	2801      	cmp	r0, #1
 801e44c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e450:	ed9d 0b00 	vldr	d0, [sp]
 801e454:	d004      	beq.n	801e460 <sin+0x50>
 801e456:	2802      	cmp	r0, #2
 801e458:	d005      	beq.n	801e466 <sin+0x56>
 801e45a:	b950      	cbnz	r0, 801e472 <sin+0x62>
 801e45c:	2001      	movs	r0, #1
 801e45e:	e7e4      	b.n	801e42a <sin+0x1a>
 801e460:	f000 faca 	bl	801e9f8 <__kernel_cos>
 801e464:	e7e9      	b.n	801e43a <sin+0x2a>
 801e466:	2001      	movs	r0, #1
 801e468:	f000 fdce 	bl	801f008 <__kernel_sin>
 801e46c:	eeb1 0b40 	vneg.f64	d0, d0
 801e470:	e7e3      	b.n	801e43a <sin+0x2a>
 801e472:	f000 fac1 	bl	801e9f8 <__kernel_cos>
 801e476:	e7f9      	b.n	801e46c <sin+0x5c>
	...
 801e480:	3fe921fb 	.word	0x3fe921fb
 801e484:	7fefffff 	.word	0x7fefffff

0801e488 <exp>:
 801e488:	b510      	push	{r4, lr}
 801e48a:	ed2d 8b04 	vpush	{d8-d9}
 801e48e:	eeb0 8b40 	vmov.f64	d8, d0
 801e492:	4c33      	ldr	r4, [pc, #204]	; (801e560 <exp+0xd8>)
 801e494:	b08a      	sub	sp, #40	; 0x28
 801e496:	f000 f86b 	bl	801e570 <__ieee754_exp>
 801e49a:	f994 3000 	ldrsb.w	r3, [r4]
 801e49e:	eeb0 9b40 	vmov.f64	d9, d0
 801e4a2:	3301      	adds	r3, #1
 801e4a4:	d029      	beq.n	801e4fa <exp+0x72>
 801e4a6:	eeb0 0b48 	vmov.f64	d0, d8
 801e4aa:	f000 fe0e 	bl	801f0ca <finite>
 801e4ae:	b320      	cbz	r0, 801e4fa <exp+0x72>
 801e4b0:	ed9f 7b27 	vldr	d7, [pc, #156]	; 801e550 <exp+0xc8>
 801e4b4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801e4b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4bc:	dd2e      	ble.n	801e51c <exp+0x94>
 801e4be:	2303      	movs	r3, #3
 801e4c0:	9300      	str	r3, [sp, #0]
 801e4c2:	4b28      	ldr	r3, [pc, #160]	; (801e564 <exp+0xdc>)
 801e4c4:	9301      	str	r3, [sp, #4]
 801e4c6:	2300      	movs	r3, #0
 801e4c8:	9308      	str	r3, [sp, #32]
 801e4ca:	f994 3000 	ldrsb.w	r3, [r4]
 801e4ce:	ed8d 8b04 	vstr	d8, [sp, #16]
 801e4d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 801e4d6:	b9b3      	cbnz	r3, 801e506 <exp+0x7e>
 801e4d8:	4b23      	ldr	r3, [pc, #140]	; (801e568 <exp+0xe0>)
 801e4da:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801e4de:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801e4e2:	4668      	mov	r0, sp
 801e4e4:	f000 fe74 	bl	801f1d0 <matherr>
 801e4e8:	b198      	cbz	r0, 801e512 <exp+0x8a>
 801e4ea:	9b08      	ldr	r3, [sp, #32]
 801e4ec:	b11b      	cbz	r3, 801e4f6 <exp+0x6e>
 801e4ee:	f7ff fde7 	bl	801e0c0 <__errno>
 801e4f2:	9b08      	ldr	r3, [sp, #32]
 801e4f4:	6003      	str	r3, [r0, #0]
 801e4f6:	ed9d 9b06 	vldr	d9, [sp, #24]
 801e4fa:	eeb0 0b49 	vmov.f64	d0, d9
 801e4fe:	b00a      	add	sp, #40	; 0x28
 801e500:	ecbd 8b04 	vpop	{d8-d9}
 801e504:	bd10      	pop	{r4, pc}
 801e506:	4919      	ldr	r1, [pc, #100]	; (801e56c <exp+0xe4>)
 801e508:	2000      	movs	r0, #0
 801e50a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e50e:	2b02      	cmp	r3, #2
 801e510:	d1e7      	bne.n	801e4e2 <exp+0x5a>
 801e512:	f7ff fdd5 	bl	801e0c0 <__errno>
 801e516:	2322      	movs	r3, #34	; 0x22
 801e518:	6003      	str	r3, [r0, #0]
 801e51a:	e7e6      	b.n	801e4ea <exp+0x62>
 801e51c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 801e558 <exp+0xd0>
 801e520:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801e524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e528:	d5e7      	bpl.n	801e4fa <exp+0x72>
 801e52a:	2304      	movs	r3, #4
 801e52c:	9300      	str	r3, [sp, #0]
 801e52e:	4b0d      	ldr	r3, [pc, #52]	; (801e564 <exp+0xdc>)
 801e530:	9301      	str	r3, [sp, #4]
 801e532:	2300      	movs	r3, #0
 801e534:	9308      	str	r3, [sp, #32]
 801e536:	2200      	movs	r2, #0
 801e538:	2300      	movs	r3, #0
 801e53a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801e53e:	ed8d 8b04 	vstr	d8, [sp, #16]
 801e542:	ed8d 8b02 	vstr	d8, [sp, #8]
 801e546:	f994 3000 	ldrsb.w	r3, [r4]
 801e54a:	e7e0      	b.n	801e50e <exp+0x86>
 801e54c:	f3af 8000 	nop.w
 801e550:	fefa39ef 	.word	0xfefa39ef
 801e554:	40862e42 	.word	0x40862e42
 801e558:	d52d3051 	.word	0xd52d3051
 801e55c:	c0874910 	.word	0xc0874910
 801e560:	240001ec 	.word	0x240001ec
 801e564:	0801f4c5 	.word	0x0801f4c5
 801e568:	47efffff 	.word	0x47efffff
 801e56c:	7ff00000 	.word	0x7ff00000

0801e570 <__ieee754_exp>:
 801e570:	ee10 1a90 	vmov	r1, s1
 801e574:	4b7a      	ldr	r3, [pc, #488]	; (801e760 <__ieee754_exp+0x1f0>)
 801e576:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801e57a:	429a      	cmp	r2, r3
 801e57c:	b082      	sub	sp, #8
 801e57e:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 801e582:	d928      	bls.n	801e5d6 <__ieee754_exp+0x66>
 801e584:	4b77      	ldr	r3, [pc, #476]	; (801e764 <__ieee754_exp+0x1f4>)
 801e586:	429a      	cmp	r2, r3
 801e588:	d90f      	bls.n	801e5aa <__ieee754_exp+0x3a>
 801e58a:	ee10 3a10 	vmov	r3, s0
 801e58e:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801e592:	430b      	orrs	r3, r1
 801e594:	d003      	beq.n	801e59e <__ieee754_exp+0x2e>
 801e596:	ee30 0b00 	vadd.f64	d0, d0, d0
 801e59a:	b002      	add	sp, #8
 801e59c:	4770      	bx	lr
 801e59e:	ed9f 7b56 	vldr	d7, [pc, #344]	; 801e6f8 <__ieee754_exp+0x188>
 801e5a2:	2800      	cmp	r0, #0
 801e5a4:	fe00 0b07 	vseleq.f64	d0, d0, d7
 801e5a8:	e7f7      	b.n	801e59a <__ieee754_exp+0x2a>
 801e5aa:	ed9f 7b55 	vldr	d7, [pc, #340]	; 801e700 <__ieee754_exp+0x190>
 801e5ae:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801e5b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e5b6:	dd04      	ble.n	801e5c2 <__ieee754_exp+0x52>
 801e5b8:	ed9f 0b53 	vldr	d0, [pc, #332]	; 801e708 <__ieee754_exp+0x198>
 801e5bc:	ee20 0b00 	vmul.f64	d0, d0, d0
 801e5c0:	e7eb      	b.n	801e59a <__ieee754_exp+0x2a>
 801e5c2:	ed9f 7b53 	vldr	d7, [pc, #332]	; 801e710 <__ieee754_exp+0x1a0>
 801e5c6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801e5ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e5ce:	d505      	bpl.n	801e5dc <__ieee754_exp+0x6c>
 801e5d0:	ed9f 0b49 	vldr	d0, [pc, #292]	; 801e6f8 <__ieee754_exp+0x188>
 801e5d4:	e7e1      	b.n	801e59a <__ieee754_exp+0x2a>
 801e5d6:	4b64      	ldr	r3, [pc, #400]	; (801e768 <__ieee754_exp+0x1f8>)
 801e5d8:	429a      	cmp	r2, r3
 801e5da:	d956      	bls.n	801e68a <__ieee754_exp+0x11a>
 801e5dc:	4b63      	ldr	r3, [pc, #396]	; (801e76c <__ieee754_exp+0x1fc>)
 801e5de:	429a      	cmp	r2, r3
 801e5e0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 801e5e4:	d838      	bhi.n	801e658 <__ieee754_exp+0xe8>
 801e5e6:	4b62      	ldr	r3, [pc, #392]	; (801e770 <__ieee754_exp+0x200>)
 801e5e8:	4413      	add	r3, r2
 801e5ea:	ed93 6b00 	vldr	d6, [r3]
 801e5ee:	4b61      	ldr	r3, [pc, #388]	; (801e774 <__ieee754_exp+0x204>)
 801e5f0:	ee30 6b46 	vsub.f64	d6, d0, d6
 801e5f4:	4413      	add	r3, r2
 801e5f6:	ed93 7b00 	vldr	d7, [r3]
 801e5fa:	f1c0 0301 	rsb	r3, r0, #1
 801e5fe:	1a1b      	subs	r3, r3, r0
 801e600:	ee36 0b47 	vsub.f64	d0, d6, d7
 801e604:	ed9f 4b44 	vldr	d4, [pc, #272]	; 801e718 <__ieee754_exp+0x1a8>
 801e608:	ee20 5b00 	vmul.f64	d5, d0, d0
 801e60c:	ed9f 3b44 	vldr	d3, [pc, #272]	; 801e720 <__ieee754_exp+0x1b0>
 801e610:	eea5 3b04 	vfma.f64	d3, d5, d4
 801e614:	ed9f 4b44 	vldr	d4, [pc, #272]	; 801e728 <__ieee754_exp+0x1b8>
 801e618:	eea3 4b05 	vfma.f64	d4, d3, d5
 801e61c:	ed9f 3b44 	vldr	d3, [pc, #272]	; 801e730 <__ieee754_exp+0x1c0>
 801e620:	eea4 3b05 	vfma.f64	d3, d4, d5
 801e624:	ed9f 4b44 	vldr	d4, [pc, #272]	; 801e738 <__ieee754_exp+0x1c8>
 801e628:	eea3 4b05 	vfma.f64	d4, d3, d5
 801e62c:	eeb0 3b40 	vmov.f64	d3, d0
 801e630:	eea4 3b45 	vfms.f64	d3, d4, d5
 801e634:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 801e638:	eeb0 5b43 	vmov.f64	d5, d3
 801e63c:	ee20 2b03 	vmul.f64	d2, d0, d3
 801e640:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 801e644:	bba3      	cbnz	r3, 801e6b0 <__ieee754_exp+0x140>
 801e646:	ee35 5b44 	vsub.f64	d5, d5, d4
 801e64a:	ee82 7b05 	vdiv.f64	d7, d2, d5
 801e64e:	ee37 0b40 	vsub.f64	d0, d7, d0
 801e652:	ee33 0b40 	vsub.f64	d0, d3, d0
 801e656:	e7a0      	b.n	801e59a <__ieee754_exp+0x2a>
 801e658:	4b47      	ldr	r3, [pc, #284]	; (801e778 <__ieee754_exp+0x208>)
 801e65a:	4413      	add	r3, r2
 801e65c:	ed93 7b00 	vldr	d7, [r3]
 801e660:	ed9f 6b37 	vldr	d6, [pc, #220]	; 801e740 <__ieee754_exp+0x1d0>
 801e664:	ed9f 5b38 	vldr	d5, [pc, #224]	; 801e748 <__ieee754_exp+0x1d8>
 801e668:	eea0 7b06 	vfma.f64	d7, d0, d6
 801e66c:	ed9f 6b38 	vldr	d6, [pc, #224]	; 801e750 <__ieee754_exp+0x1e0>
 801e670:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801e674:	ee17 3a90 	vmov	r3, s15
 801e678:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801e67c:	eea7 0b46 	vfms.f64	d0, d7, d6
 801e680:	ee27 7b05 	vmul.f64	d7, d7, d5
 801e684:	eeb0 6b40 	vmov.f64	d6, d0
 801e688:	e7ba      	b.n	801e600 <__ieee754_exp+0x90>
 801e68a:	4b3c      	ldr	r3, [pc, #240]	; (801e77c <__ieee754_exp+0x20c>)
 801e68c:	429a      	cmp	r2, r3
 801e68e:	d80d      	bhi.n	801e6ac <__ieee754_exp+0x13c>
 801e690:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801e694:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 801e708 <__ieee754_exp+0x198>
 801e698:	ee30 5b05 	vadd.f64	d5, d0, d5
 801e69c:	eeb4 5bc4 	vcmpe.f64	d5, d4
 801e6a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e6a4:	dd02      	ble.n	801e6ac <__ieee754_exp+0x13c>
 801e6a6:	ee30 0b04 	vadd.f64	d0, d0, d4
 801e6aa:	e776      	b.n	801e59a <__ieee754_exp+0x2a>
 801e6ac:	2300      	movs	r3, #0
 801e6ae:	e7a9      	b.n	801e604 <__ieee754_exp+0x94>
 801e6b0:	f46f 717f 	mvn.w	r1, #1020	; 0x3fc
 801e6b4:	ee34 5b45 	vsub.f64	d5, d4, d5
 801e6b8:	428b      	cmp	r3, r1
 801e6ba:	ee82 4b05 	vdiv.f64	d4, d2, d5
 801e6be:	ee37 7b44 	vsub.f64	d7, d7, d4
 801e6c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e6c6:	ee33 7b47 	vsub.f64	d7, d3, d7
 801e6ca:	ed8d 7b00 	vstr	d7, [sp]
 801e6ce:	9a01      	ldr	r2, [sp, #4]
 801e6d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e6d4:	db04      	blt.n	801e6e0 <__ieee754_exp+0x170>
 801e6d6:	eb02 5103 	add.w	r1, r2, r3, lsl #20
 801e6da:	ec41 0b10 	vmov	d0, r0, r1
 801e6de:	e75c      	b.n	801e59a <__ieee754_exp+0x2a>
 801e6e0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801e6e4:	eb02 5103 	add.w	r1, r2, r3, lsl #20
 801e6e8:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 801e758 <__ieee754_exp+0x1e8>
 801e6ec:	ec41 0b10 	vmov	d0, r0, r1
 801e6f0:	ee20 0b07 	vmul.f64	d0, d0, d7
 801e6f4:	e751      	b.n	801e59a <__ieee754_exp+0x2a>
 801e6f6:	bf00      	nop
	...
 801e700:	fefa39ef 	.word	0xfefa39ef
 801e704:	40862e42 	.word	0x40862e42
 801e708:	8800759c 	.word	0x8800759c
 801e70c:	7e37e43c 	.word	0x7e37e43c
 801e710:	d52d3051 	.word	0xd52d3051
 801e714:	c0874910 	.word	0xc0874910
 801e718:	72bea4d0 	.word	0x72bea4d0
 801e71c:	3e663769 	.word	0x3e663769
 801e720:	c5d26bf1 	.word	0xc5d26bf1
 801e724:	bebbbd41 	.word	0xbebbbd41
 801e728:	af25de2c 	.word	0xaf25de2c
 801e72c:	3f11566a 	.word	0x3f11566a
 801e730:	16bebd93 	.word	0x16bebd93
 801e734:	bf66c16c 	.word	0xbf66c16c
 801e738:	5555553e 	.word	0x5555553e
 801e73c:	3fc55555 	.word	0x3fc55555
 801e740:	652b82fe 	.word	0x652b82fe
 801e744:	3ff71547 	.word	0x3ff71547
 801e748:	35793c76 	.word	0x35793c76
 801e74c:	3dea39ef 	.word	0x3dea39ef
 801e750:	fee00000 	.word	0xfee00000
 801e754:	3fe62e42 	.word	0x3fe62e42
 801e758:	00000000 	.word	0x00000000
 801e75c:	01700000 	.word	0x01700000
 801e760:	40862e41 	.word	0x40862e41
 801e764:	7fefffff 	.word	0x7fefffff
 801e768:	3fd62e42 	.word	0x3fd62e42
 801e76c:	3ff0a2b1 	.word	0x3ff0a2b1
 801e770:	0801f4e0 	.word	0x0801f4e0
 801e774:	0801f4f0 	.word	0x0801f4f0
 801e778:	0801f4d0 	.word	0x0801f4d0
 801e77c:	3e2fffff 	.word	0x3e2fffff

0801e780 <__ieee754_rem_pio2>:
 801e780:	b570      	push	{r4, r5, r6, lr}
 801e782:	eeb0 7b40 	vmov.f64	d7, d0
 801e786:	ee17 5a90 	vmov	r5, s15
 801e78a:	4b95      	ldr	r3, [pc, #596]	; (801e9e0 <__ieee754_rem_pio2+0x260>)
 801e78c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801e790:	429e      	cmp	r6, r3
 801e792:	b088      	sub	sp, #32
 801e794:	4604      	mov	r4, r0
 801e796:	dc07      	bgt.n	801e7a8 <__ieee754_rem_pio2+0x28>
 801e798:	2200      	movs	r2, #0
 801e79a:	2300      	movs	r3, #0
 801e79c:	ed84 0b00 	vstr	d0, [r4]
 801e7a0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801e7a4:	2000      	movs	r0, #0
 801e7a6:	e01b      	b.n	801e7e0 <__ieee754_rem_pio2+0x60>
 801e7a8:	4b8e      	ldr	r3, [pc, #568]	; (801e9e4 <__ieee754_rem_pio2+0x264>)
 801e7aa:	429e      	cmp	r6, r3
 801e7ac:	dc3b      	bgt.n	801e826 <__ieee754_rem_pio2+0xa6>
 801e7ae:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 801e7b2:	2d00      	cmp	r5, #0
 801e7b4:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 801e9a0 <__ieee754_rem_pio2+0x220>
 801e7b8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801e7bc:	dd19      	ble.n	801e7f2 <__ieee754_rem_pio2+0x72>
 801e7be:	ee30 7b46 	vsub.f64	d7, d0, d6
 801e7c2:	429e      	cmp	r6, r3
 801e7c4:	d00e      	beq.n	801e7e4 <__ieee754_rem_pio2+0x64>
 801e7c6:	ed9f 6b78 	vldr	d6, [pc, #480]	; 801e9a8 <__ieee754_rem_pio2+0x228>
 801e7ca:	ee37 5b46 	vsub.f64	d5, d7, d6
 801e7ce:	ee37 7b45 	vsub.f64	d7, d7, d5
 801e7d2:	ed84 5b00 	vstr	d5, [r4]
 801e7d6:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e7da:	ed84 7b02 	vstr	d7, [r4, #8]
 801e7de:	2001      	movs	r0, #1
 801e7e0:	b008      	add	sp, #32
 801e7e2:	bd70      	pop	{r4, r5, r6, pc}
 801e7e4:	ed9f 6b72 	vldr	d6, [pc, #456]	; 801e9b0 <__ieee754_rem_pio2+0x230>
 801e7e8:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e7ec:	ed9f 6b72 	vldr	d6, [pc, #456]	; 801e9b8 <__ieee754_rem_pio2+0x238>
 801e7f0:	e7eb      	b.n	801e7ca <__ieee754_rem_pio2+0x4a>
 801e7f2:	429e      	cmp	r6, r3
 801e7f4:	ee30 7b06 	vadd.f64	d7, d0, d6
 801e7f8:	d00e      	beq.n	801e818 <__ieee754_rem_pio2+0x98>
 801e7fa:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 801e9a8 <__ieee754_rem_pio2+0x228>
 801e7fe:	ee37 5b06 	vadd.f64	d5, d7, d6
 801e802:	ee37 7b45 	vsub.f64	d7, d7, d5
 801e806:	ed84 5b00 	vstr	d5, [r4]
 801e80a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801e80e:	f04f 30ff 	mov.w	r0, #4294967295
 801e812:	ed84 7b02 	vstr	d7, [r4, #8]
 801e816:	e7e3      	b.n	801e7e0 <__ieee754_rem_pio2+0x60>
 801e818:	ed9f 6b65 	vldr	d6, [pc, #404]	; 801e9b0 <__ieee754_rem_pio2+0x230>
 801e81c:	ee37 7b06 	vadd.f64	d7, d7, d6
 801e820:	ed9f 6b65 	vldr	d6, [pc, #404]	; 801e9b8 <__ieee754_rem_pio2+0x238>
 801e824:	e7eb      	b.n	801e7fe <__ieee754_rem_pio2+0x7e>
 801e826:	4b70      	ldr	r3, [pc, #448]	; (801e9e8 <__ieee754_rem_pio2+0x268>)
 801e828:	429e      	cmp	r6, r3
 801e82a:	dc6c      	bgt.n	801e906 <__ieee754_rem_pio2+0x186>
 801e82c:	f000 fc44 	bl	801f0b8 <fabs>
 801e830:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801e834:	ed9f 6b62 	vldr	d6, [pc, #392]	; 801e9c0 <__ieee754_rem_pio2+0x240>
 801e838:	eea0 7b06 	vfma.f64	d7, d0, d6
 801e83c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801e840:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801e844:	ee17 0a90 	vmov	r0, s15
 801e848:	eeb1 5b44 	vneg.f64	d5, d4
 801e84c:	ed9f 7b54 	vldr	d7, [pc, #336]	; 801e9a0 <__ieee754_rem_pio2+0x220>
 801e850:	eea5 0b07 	vfma.f64	d0, d5, d7
 801e854:	ed9f 7b54 	vldr	d7, [pc, #336]	; 801e9a8 <__ieee754_rem_pio2+0x228>
 801e858:	281f      	cmp	r0, #31
 801e85a:	ee24 7b07 	vmul.f64	d7, d4, d7
 801e85e:	ee30 6b47 	vsub.f64	d6, d0, d7
 801e862:	dc08      	bgt.n	801e876 <__ieee754_rem_pio2+0xf6>
 801e864:	1e42      	subs	r2, r0, #1
 801e866:	4b61      	ldr	r3, [pc, #388]	; (801e9ec <__ieee754_rem_pio2+0x26c>)
 801e868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e86c:	42b3      	cmp	r3, r6
 801e86e:	d002      	beq.n	801e876 <__ieee754_rem_pio2+0xf6>
 801e870:	ed84 6b00 	vstr	d6, [r4]
 801e874:	e022      	b.n	801e8bc <__ieee754_rem_pio2+0x13c>
 801e876:	ee16 3a90 	vmov	r3, s13
 801e87a:	1536      	asrs	r6, r6, #20
 801e87c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801e880:	1af3      	subs	r3, r6, r3
 801e882:	2b10      	cmp	r3, #16
 801e884:	ddf4      	ble.n	801e870 <__ieee754_rem_pio2+0xf0>
 801e886:	eeb0 6b40 	vmov.f64	d6, d0
 801e88a:	ed9f 3b49 	vldr	d3, [pc, #292]	; 801e9b0 <__ieee754_rem_pio2+0x230>
 801e88e:	eea5 6b03 	vfma.f64	d6, d5, d3
 801e892:	ee30 7b46 	vsub.f64	d7, d0, d6
 801e896:	eea5 7b03 	vfma.f64	d7, d5, d3
 801e89a:	ed9f 3b47 	vldr	d3, [pc, #284]	; 801e9b8 <__ieee754_rem_pio2+0x238>
 801e89e:	ee94 7b03 	vfnms.f64	d7, d4, d3
 801e8a2:	ee36 3b47 	vsub.f64	d3, d6, d7
 801e8a6:	ee13 3a90 	vmov	r3, s7
 801e8aa:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801e8ae:	1af6      	subs	r6, r6, r3
 801e8b0:	2e31      	cmp	r6, #49	; 0x31
 801e8b2:	dc17      	bgt.n	801e8e4 <__ieee754_rem_pio2+0x164>
 801e8b4:	eeb0 0b46 	vmov.f64	d0, d6
 801e8b8:	ed84 3b00 	vstr	d3, [r4]
 801e8bc:	ed94 6b00 	vldr	d6, [r4]
 801e8c0:	2d00      	cmp	r5, #0
 801e8c2:	ee30 0b46 	vsub.f64	d0, d0, d6
 801e8c6:	ee30 7b47 	vsub.f64	d7, d0, d7
 801e8ca:	ed84 7b02 	vstr	d7, [r4, #8]
 801e8ce:	da87      	bge.n	801e7e0 <__ieee754_rem_pio2+0x60>
 801e8d0:	eeb1 6b46 	vneg.f64	d6, d6
 801e8d4:	ed84 6b00 	vstr	d6, [r4]
 801e8d8:	eeb1 7b47 	vneg.f64	d7, d7
 801e8dc:	4240      	negs	r0, r0
 801e8de:	ed84 7b02 	vstr	d7, [r4, #8]
 801e8e2:	e77d      	b.n	801e7e0 <__ieee754_rem_pio2+0x60>
 801e8e4:	ed9f 3b38 	vldr	d3, [pc, #224]	; 801e9c8 <__ieee754_rem_pio2+0x248>
 801e8e8:	eeb0 0b46 	vmov.f64	d0, d6
 801e8ec:	eea5 0b03 	vfma.f64	d0, d5, d3
 801e8f0:	ee36 7b40 	vsub.f64	d7, d6, d0
 801e8f4:	ed9f 6b36 	vldr	d6, [pc, #216]	; 801e9d0 <__ieee754_rem_pio2+0x250>
 801e8f8:	eea5 7b03 	vfma.f64	d7, d5, d3
 801e8fc:	ee94 7b06 	vfnms.f64	d7, d4, d6
 801e900:	ee30 6b47 	vsub.f64	d6, d0, d7
 801e904:	e7b4      	b.n	801e870 <__ieee754_rem_pio2+0xf0>
 801e906:	4b3a      	ldr	r3, [pc, #232]	; (801e9f0 <__ieee754_rem_pio2+0x270>)
 801e908:	429e      	cmp	r6, r3
 801e90a:	dd06      	ble.n	801e91a <__ieee754_rem_pio2+0x19a>
 801e90c:	ee30 7b40 	vsub.f64	d7, d0, d0
 801e910:	ed80 7b02 	vstr	d7, [r0, #8]
 801e914:	ed80 7b00 	vstr	d7, [r0]
 801e918:	e744      	b.n	801e7a4 <__ieee754_rem_pio2+0x24>
 801e91a:	1532      	asrs	r2, r6, #20
 801e91c:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 801e920:	ee10 0a10 	vmov	r0, s0
 801e924:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801e928:	ec41 0b17 	vmov	d7, r0, r1
 801e92c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801e930:	ed9f 5b29 	vldr	d5, [pc, #164]	; 801e9d8 <__ieee754_rem_pio2+0x258>
 801e934:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801e938:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e93c:	ed8d 6b02 	vstr	d6, [sp, #8]
 801e940:	ee27 7b05 	vmul.f64	d7, d7, d5
 801e944:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801e948:	a908      	add	r1, sp, #32
 801e94a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801e94e:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e952:	ed8d 6b04 	vstr	d6, [sp, #16]
 801e956:	ee27 7b05 	vmul.f64	d7, d7, d5
 801e95a:	ed8d 7b06 	vstr	d7, [sp, #24]
 801e95e:	2303      	movs	r3, #3
 801e960:	ed31 7b02 	vldmdb	r1!, {d7}
 801e964:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e96c:	f103 30ff 	add.w	r0, r3, #4294967295
 801e970:	d013      	beq.n	801e99a <__ieee754_rem_pio2+0x21a>
 801e972:	4920      	ldr	r1, [pc, #128]	; (801e9f4 <__ieee754_rem_pio2+0x274>)
 801e974:	9101      	str	r1, [sp, #4]
 801e976:	2102      	movs	r1, #2
 801e978:	9100      	str	r1, [sp, #0]
 801e97a:	a802      	add	r0, sp, #8
 801e97c:	4621      	mov	r1, r4
 801e97e:	f000 f8a7 	bl	801ead0 <__kernel_rem_pio2>
 801e982:	2d00      	cmp	r5, #0
 801e984:	f6bf af2c 	bge.w	801e7e0 <__ieee754_rem_pio2+0x60>
 801e988:	ed94 7b00 	vldr	d7, [r4]
 801e98c:	eeb1 7b47 	vneg.f64	d7, d7
 801e990:	ed84 7b00 	vstr	d7, [r4]
 801e994:	ed94 7b02 	vldr	d7, [r4, #8]
 801e998:	e79e      	b.n	801e8d8 <__ieee754_rem_pio2+0x158>
 801e99a:	4603      	mov	r3, r0
 801e99c:	e7e0      	b.n	801e960 <__ieee754_rem_pio2+0x1e0>
 801e99e:	bf00      	nop
 801e9a0:	54400000 	.word	0x54400000
 801e9a4:	3ff921fb 	.word	0x3ff921fb
 801e9a8:	1a626331 	.word	0x1a626331
 801e9ac:	3dd0b461 	.word	0x3dd0b461
 801e9b0:	1a600000 	.word	0x1a600000
 801e9b4:	3dd0b461 	.word	0x3dd0b461
 801e9b8:	2e037073 	.word	0x2e037073
 801e9bc:	3ba3198a 	.word	0x3ba3198a
 801e9c0:	6dc9c883 	.word	0x6dc9c883
 801e9c4:	3fe45f30 	.word	0x3fe45f30
 801e9c8:	2e000000 	.word	0x2e000000
 801e9cc:	3ba3198a 	.word	0x3ba3198a
 801e9d0:	252049c1 	.word	0x252049c1
 801e9d4:	397b839a 	.word	0x397b839a
 801e9d8:	00000000 	.word	0x00000000
 801e9dc:	41700000 	.word	0x41700000
 801e9e0:	3fe921fb 	.word	0x3fe921fb
 801e9e4:	4002d97b 	.word	0x4002d97b
 801e9e8:	413921fb 	.word	0x413921fb
 801e9ec:	0801f500 	.word	0x0801f500
 801e9f0:	7fefffff 	.word	0x7fefffff
 801e9f4:	0801f580 	.word	0x0801f580

0801e9f8 <__kernel_cos>:
 801e9f8:	ee10 1a90 	vmov	r1, s1
 801e9fc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801ea00:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801ea04:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 801ea08:	da05      	bge.n	801ea16 <__kernel_cos+0x1e>
 801ea0a:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 801ea0e:	ee16 3a90 	vmov	r3, s13
 801ea12:	2b00      	cmp	r3, #0
 801ea14:	d03d      	beq.n	801ea92 <__kernel_cos+0x9a>
 801ea16:	ee20 4b00 	vmul.f64	d4, d0, d0
 801ea1a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 801ea1e:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 801ea98 <__kernel_cos+0xa0>
 801ea22:	ee21 1b40 	vnmul.f64	d1, d1, d0
 801ea26:	ee24 6b06 	vmul.f64	d6, d4, d6
 801ea2a:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 801eaa0 <__kernel_cos+0xa8>
 801ea2e:	eea4 5b03 	vfma.f64	d5, d4, d3
 801ea32:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 801eaa8 <__kernel_cos+0xb0>
 801ea36:	eea5 3b04 	vfma.f64	d3, d5, d4
 801ea3a:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 801eab0 <__kernel_cos+0xb8>
 801ea3e:	eea3 5b04 	vfma.f64	d5, d3, d4
 801ea42:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 801eab8 <__kernel_cos+0xc0>
 801ea46:	4b20      	ldr	r3, [pc, #128]	; (801eac8 <__kernel_cos+0xd0>)
 801ea48:	eea5 3b04 	vfma.f64	d3, d5, d4
 801ea4c:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 801eac0 <__kernel_cos+0xc8>
 801ea50:	4299      	cmp	r1, r3
 801ea52:	eea3 5b04 	vfma.f64	d5, d3, d4
 801ea56:	ee25 5b04 	vmul.f64	d5, d5, d4
 801ea5a:	eea4 1b05 	vfma.f64	d1, d4, d5
 801ea5e:	dc04      	bgt.n	801ea6a <__kernel_cos+0x72>
 801ea60:	ee36 6b41 	vsub.f64	d6, d6, d1
 801ea64:	ee37 0b46 	vsub.f64	d0, d7, d6
 801ea68:	4770      	bx	lr
 801ea6a:	4b18      	ldr	r3, [pc, #96]	; (801eacc <__kernel_cos+0xd4>)
 801ea6c:	4299      	cmp	r1, r3
 801ea6e:	dc0d      	bgt.n	801ea8c <__kernel_cos+0x94>
 801ea70:	2200      	movs	r2, #0
 801ea72:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 801ea76:	ec43 2b15 	vmov	d5, r2, r3
 801ea7a:	ee37 0b45 	vsub.f64	d0, d7, d5
 801ea7e:	ee36 6b45 	vsub.f64	d6, d6, d5
 801ea82:	ee36 6b41 	vsub.f64	d6, d6, d1
 801ea86:	ee30 0b46 	vsub.f64	d0, d0, d6
 801ea8a:	4770      	bx	lr
 801ea8c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 801ea90:	e7f3      	b.n	801ea7a <__kernel_cos+0x82>
 801ea92:	eeb0 0b47 	vmov.f64	d0, d7
 801ea96:	4770      	bx	lr
 801ea98:	be8838d4 	.word	0xbe8838d4
 801ea9c:	bda8fae9 	.word	0xbda8fae9
 801eaa0:	bdb4b1c4 	.word	0xbdb4b1c4
 801eaa4:	3e21ee9e 	.word	0x3e21ee9e
 801eaa8:	809c52ad 	.word	0x809c52ad
 801eaac:	be927e4f 	.word	0xbe927e4f
 801eab0:	19cb1590 	.word	0x19cb1590
 801eab4:	3efa01a0 	.word	0x3efa01a0
 801eab8:	16c15177 	.word	0x16c15177
 801eabc:	bf56c16c 	.word	0xbf56c16c
 801eac0:	5555554c 	.word	0x5555554c
 801eac4:	3fa55555 	.word	0x3fa55555
 801eac8:	3fd33332 	.word	0x3fd33332
 801eacc:	3fe90000 	.word	0x3fe90000

0801ead0 <__kernel_rem_pio2>:
 801ead0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ead4:	ed2d 8b06 	vpush	{d8-d10}
 801ead8:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 801eadc:	469b      	mov	fp, r3
 801eade:	460e      	mov	r6, r1
 801eae0:	4bc7      	ldr	r3, [pc, #796]	; (801ee00 <__kernel_rem_pio2+0x330>)
 801eae2:	99a2      	ldr	r1, [sp, #648]	; 0x288
 801eae4:	9002      	str	r0, [sp, #8]
 801eae6:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 801eaea:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 801eaec:	1ed1      	subs	r1, r2, #3
 801eaee:	2318      	movs	r3, #24
 801eaf0:	f06f 0417 	mvn.w	r4, #23
 801eaf4:	fb91 f1f3 	sdiv	r1, r1, r3
 801eaf8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 801eafc:	f10b 3aff 	add.w	sl, fp, #4294967295
 801eb00:	fb01 4404 	mla	r4, r1, r4, r4
 801eb04:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 801ede8 <__kernel_rem_pio2+0x318>
 801eb08:	4414      	add	r4, r2
 801eb0a:	eba1 050a 	sub.w	r5, r1, sl
 801eb0e:	aa1a      	add	r2, sp, #104	; 0x68
 801eb10:	eb09 070a 	add.w	r7, r9, sl
 801eb14:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 801eb18:	4696      	mov	lr, r2
 801eb1a:	2300      	movs	r3, #0
 801eb1c:	42bb      	cmp	r3, r7
 801eb1e:	dd0f      	ble.n	801eb40 <__kernel_rem_pio2+0x70>
 801eb20:	af6a      	add	r7, sp, #424	; 0x1a8
 801eb22:	2200      	movs	r2, #0
 801eb24:	454a      	cmp	r2, r9
 801eb26:	dc28      	bgt.n	801eb7a <__kernel_rem_pio2+0xaa>
 801eb28:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 801eb2c:	eb0b 0302 	add.w	r3, fp, r2
 801eb30:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 801eb34:	9d02      	ldr	r5, [sp, #8]
 801eb36:	ed9f 7bac 	vldr	d7, [pc, #688]	; 801ede8 <__kernel_rem_pio2+0x318>
 801eb3a:	f04f 0c00 	mov.w	ip, #0
 801eb3e:	e016      	b.n	801eb6e <__kernel_rem_pio2+0x9e>
 801eb40:	42dd      	cmn	r5, r3
 801eb42:	d409      	bmi.n	801eb58 <__kernel_rem_pio2+0x88>
 801eb44:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801eb48:	ee07 2a90 	vmov	s15, r2
 801eb4c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801eb50:	ecae 7b02 	vstmia	lr!, {d7}
 801eb54:	3301      	adds	r3, #1
 801eb56:	e7e1      	b.n	801eb1c <__kernel_rem_pio2+0x4c>
 801eb58:	eeb0 7b46 	vmov.f64	d7, d6
 801eb5c:	e7f8      	b.n	801eb50 <__kernel_rem_pio2+0x80>
 801eb5e:	ecb5 5b02 	vldmia	r5!, {d5}
 801eb62:	ed33 6b02 	vldmdb	r3!, {d6}
 801eb66:	f10c 0c01 	add.w	ip, ip, #1
 801eb6a:	eea5 7b06 	vfma.f64	d7, d5, d6
 801eb6e:	45d4      	cmp	ip, sl
 801eb70:	ddf5      	ble.n	801eb5e <__kernel_rem_pio2+0x8e>
 801eb72:	eca7 7b02 	vstmia	r7!, {d7}
 801eb76:	3201      	adds	r2, #1
 801eb78:	e7d4      	b.n	801eb24 <__kernel_rem_pio2+0x54>
 801eb7a:	ab06      	add	r3, sp, #24
 801eb7c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 801eb80:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 801edf0 <__kernel_rem_pio2+0x320>
 801eb84:	ed9f ab9c 	vldr	d10, [pc, #624]	; 801edf8 <__kernel_rem_pio2+0x328>
 801eb88:	9304      	str	r3, [sp, #16]
 801eb8a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 801eb8e:	9303      	str	r3, [sp, #12]
 801eb90:	464d      	mov	r5, r9
 801eb92:	ab92      	add	r3, sp, #584	; 0x248
 801eb94:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 801eb98:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801eb9c:	3f01      	subs	r7, #1
 801eb9e:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 801eba2:	00ff      	lsls	r7, r7, #3
 801eba4:	ab92      	add	r3, sp, #584	; 0x248
 801eba6:	19da      	adds	r2, r3, r7
 801eba8:	3a98      	subs	r2, #152	; 0x98
 801ebaa:	2300      	movs	r3, #0
 801ebac:	1ae9      	subs	r1, r5, r3
 801ebae:	2900      	cmp	r1, #0
 801ebb0:	dc4e      	bgt.n	801ec50 <__kernel_rem_pio2+0x180>
 801ebb2:	4620      	mov	r0, r4
 801ebb4:	f000 fb10 	bl	801f1d8 <scalbn>
 801ebb8:	eeb0 8b40 	vmov.f64	d8, d0
 801ebbc:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 801ebc0:	ee28 0b00 	vmul.f64	d0, d8, d0
 801ebc4:	f000 fa8c 	bl	801f0e0 <floor>
 801ebc8:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 801ebcc:	eea0 8b47 	vfms.f64	d8, d0, d7
 801ebd0:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801ebd4:	2c00      	cmp	r4, #0
 801ebd6:	edcd 7a01 	vstr	s15, [sp, #4]
 801ebda:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801ebde:	ee38 8b47 	vsub.f64	d8, d8, d7
 801ebe2:	dd4a      	ble.n	801ec7a <__kernel_rem_pio2+0x1aa>
 801ebe4:	1e69      	subs	r1, r5, #1
 801ebe6:	ab06      	add	r3, sp, #24
 801ebe8:	f1c4 0018 	rsb	r0, r4, #24
 801ebec:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 801ebf0:	9a01      	ldr	r2, [sp, #4]
 801ebf2:	fa4c f300 	asr.w	r3, ip, r0
 801ebf6:	441a      	add	r2, r3
 801ebf8:	4083      	lsls	r3, r0
 801ebfa:	9201      	str	r2, [sp, #4]
 801ebfc:	ebac 0203 	sub.w	r2, ip, r3
 801ec00:	ab06      	add	r3, sp, #24
 801ec02:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 801ec06:	f1c4 0317 	rsb	r3, r4, #23
 801ec0a:	fa42 f803 	asr.w	r8, r2, r3
 801ec0e:	f1b8 0f00 	cmp.w	r8, #0
 801ec12:	dd43      	ble.n	801ec9c <__kernel_rem_pio2+0x1cc>
 801ec14:	9b01      	ldr	r3, [sp, #4]
 801ec16:	2000      	movs	r0, #0
 801ec18:	3301      	adds	r3, #1
 801ec1a:	9301      	str	r3, [sp, #4]
 801ec1c:	4601      	mov	r1, r0
 801ec1e:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 801ec22:	4285      	cmp	r5, r0
 801ec24:	dc6e      	bgt.n	801ed04 <__kernel_rem_pio2+0x234>
 801ec26:	2c00      	cmp	r4, #0
 801ec28:	dd04      	ble.n	801ec34 <__kernel_rem_pio2+0x164>
 801ec2a:	2c01      	cmp	r4, #1
 801ec2c:	d07f      	beq.n	801ed2e <__kernel_rem_pio2+0x25e>
 801ec2e:	2c02      	cmp	r4, #2
 801ec30:	f000 8087 	beq.w	801ed42 <__kernel_rem_pio2+0x272>
 801ec34:	f1b8 0f02 	cmp.w	r8, #2
 801ec38:	d130      	bne.n	801ec9c <__kernel_rem_pio2+0x1cc>
 801ec3a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801ec3e:	ee30 8b48 	vsub.f64	d8, d0, d8
 801ec42:	b359      	cbz	r1, 801ec9c <__kernel_rem_pio2+0x1cc>
 801ec44:	4620      	mov	r0, r4
 801ec46:	f000 fac7 	bl	801f1d8 <scalbn>
 801ec4a:	ee38 8b40 	vsub.f64	d8, d8, d0
 801ec4e:	e025      	b.n	801ec9c <__kernel_rem_pio2+0x1cc>
 801ec50:	ee20 7b09 	vmul.f64	d7, d0, d9
 801ec54:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801ec58:	a806      	add	r0, sp, #24
 801ec5a:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801ec5e:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801ec62:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801ec66:	ee10 1a10 	vmov	r1, s0
 801ec6a:	ed32 0b02 	vldmdb	r2!, {d0}
 801ec6e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 801ec72:	ee37 0b00 	vadd.f64	d0, d7, d0
 801ec76:	3301      	adds	r3, #1
 801ec78:	e798      	b.n	801ebac <__kernel_rem_pio2+0xdc>
 801ec7a:	d106      	bne.n	801ec8a <__kernel_rem_pio2+0x1ba>
 801ec7c:	1e6b      	subs	r3, r5, #1
 801ec7e:	aa06      	add	r2, sp, #24
 801ec80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801ec84:	ea4f 58e2 	mov.w	r8, r2, asr #23
 801ec88:	e7c1      	b.n	801ec0e <__kernel_rem_pio2+0x13e>
 801ec8a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801ec8e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801ec92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ec96:	da32      	bge.n	801ecfe <__kernel_rem_pio2+0x22e>
 801ec98:	f04f 0800 	mov.w	r8, #0
 801ec9c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801eca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eca4:	f040 80b0 	bne.w	801ee08 <__kernel_rem_pio2+0x338>
 801eca8:	1e6b      	subs	r3, r5, #1
 801ecaa:	4618      	mov	r0, r3
 801ecac:	2200      	movs	r2, #0
 801ecae:	4548      	cmp	r0, r9
 801ecb0:	da4e      	bge.n	801ed50 <__kernel_rem_pio2+0x280>
 801ecb2:	2a00      	cmp	r2, #0
 801ecb4:	f000 8088 	beq.w	801edc8 <__kernel_rem_pio2+0x2f8>
 801ecb8:	aa06      	add	r2, sp, #24
 801ecba:	3c18      	subs	r4, #24
 801ecbc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801ecc0:	2900      	cmp	r1, #0
 801ecc2:	f000 808e 	beq.w	801ede2 <__kernel_rem_pio2+0x312>
 801ecc6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801ecca:	4620      	mov	r0, r4
 801eccc:	9302      	str	r3, [sp, #8]
 801ecce:	f000 fa83 	bl	801f1d8 <scalbn>
 801ecd2:	9b02      	ldr	r3, [sp, #8]
 801ecd4:	aa6a      	add	r2, sp, #424	; 0x1a8
 801ecd6:	00d9      	lsls	r1, r3, #3
 801ecd8:	ed9f 6b45 	vldr	d6, [pc, #276]	; 801edf0 <__kernel_rem_pio2+0x320>
 801ecdc:	1850      	adds	r0, r2, r1
 801ecde:	f100 0508 	add.w	r5, r0, #8
 801ece2:	461c      	mov	r4, r3
 801ece4:	2c00      	cmp	r4, #0
 801ece6:	f280 80bd 	bge.w	801ee64 <__kernel_rem_pio2+0x394>
 801ecea:	2500      	movs	r5, #0
 801ecec:	1b5c      	subs	r4, r3, r5
 801ecee:	2c00      	cmp	r4, #0
 801ecf0:	f2c0 80dd 	blt.w	801eeae <__kernel_rem_pio2+0x3de>
 801ecf4:	4f43      	ldr	r7, [pc, #268]	; (801ee04 <__kernel_rem_pio2+0x334>)
 801ecf6:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 801ede8 <__kernel_rem_pio2+0x318>
 801ecfa:	2400      	movs	r4, #0
 801ecfc:	e0cb      	b.n	801ee96 <__kernel_rem_pio2+0x3c6>
 801ecfe:	f04f 0802 	mov.w	r8, #2
 801ed02:	e787      	b.n	801ec14 <__kernel_rem_pio2+0x144>
 801ed04:	ab06      	add	r3, sp, #24
 801ed06:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801ed0a:	b949      	cbnz	r1, 801ed20 <__kernel_rem_pio2+0x250>
 801ed0c:	b12b      	cbz	r3, 801ed1a <__kernel_rem_pio2+0x24a>
 801ed0e:	aa06      	add	r2, sp, #24
 801ed10:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801ed14:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 801ed18:	2301      	movs	r3, #1
 801ed1a:	3001      	adds	r0, #1
 801ed1c:	4619      	mov	r1, r3
 801ed1e:	e780      	b.n	801ec22 <__kernel_rem_pio2+0x152>
 801ed20:	aa06      	add	r2, sp, #24
 801ed22:	ebac 0303 	sub.w	r3, ip, r3
 801ed26:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 801ed2a:	460b      	mov	r3, r1
 801ed2c:	e7f5      	b.n	801ed1a <__kernel_rem_pio2+0x24a>
 801ed2e:	1e68      	subs	r0, r5, #1
 801ed30:	ab06      	add	r3, sp, #24
 801ed32:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801ed36:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801ed3a:	aa06      	add	r2, sp, #24
 801ed3c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 801ed40:	e778      	b.n	801ec34 <__kernel_rem_pio2+0x164>
 801ed42:	1e68      	subs	r0, r5, #1
 801ed44:	ab06      	add	r3, sp, #24
 801ed46:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801ed4a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801ed4e:	e7f4      	b.n	801ed3a <__kernel_rem_pio2+0x26a>
 801ed50:	a906      	add	r1, sp, #24
 801ed52:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801ed56:	3801      	subs	r0, #1
 801ed58:	430a      	orrs	r2, r1
 801ed5a:	e7a8      	b.n	801ecae <__kernel_rem_pio2+0x1de>
 801ed5c:	f10c 0c01 	add.w	ip, ip, #1
 801ed60:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801ed64:	2a00      	cmp	r2, #0
 801ed66:	d0f9      	beq.n	801ed5c <__kernel_rem_pio2+0x28c>
 801ed68:	eb0b 0305 	add.w	r3, fp, r5
 801ed6c:	aa1a      	add	r2, sp, #104	; 0x68
 801ed6e:	00db      	lsls	r3, r3, #3
 801ed70:	1898      	adds	r0, r3, r2
 801ed72:	3008      	adds	r0, #8
 801ed74:	1c69      	adds	r1, r5, #1
 801ed76:	3708      	adds	r7, #8
 801ed78:	2200      	movs	r2, #0
 801ed7a:	4465      	add	r5, ip
 801ed7c:	9005      	str	r0, [sp, #20]
 801ed7e:	428d      	cmp	r5, r1
 801ed80:	f6ff af07 	blt.w	801eb92 <__kernel_rem_pio2+0xc2>
 801ed84:	a81a      	add	r0, sp, #104	; 0x68
 801ed86:	eb02 0c03 	add.w	ip, r2, r3
 801ed8a:	4484      	add	ip, r0
 801ed8c:	9803      	ldr	r0, [sp, #12]
 801ed8e:	f8dd e008 	ldr.w	lr, [sp, #8]
 801ed92:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 801ed96:	9001      	str	r0, [sp, #4]
 801ed98:	ee07 0a90 	vmov	s15, r0
 801ed9c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801eda0:	9805      	ldr	r0, [sp, #20]
 801eda2:	ed8c 7b00 	vstr	d7, [ip]
 801eda6:	ed9f 7b10 	vldr	d7, [pc, #64]	; 801ede8 <__kernel_rem_pio2+0x318>
 801edaa:	eb00 0802 	add.w	r8, r0, r2
 801edae:	f04f 0c00 	mov.w	ip, #0
 801edb2:	45d4      	cmp	ip, sl
 801edb4:	dd0c      	ble.n	801edd0 <__kernel_rem_pio2+0x300>
 801edb6:	eb02 0c07 	add.w	ip, r2, r7
 801edba:	a86a      	add	r0, sp, #424	; 0x1a8
 801edbc:	4484      	add	ip, r0
 801edbe:	ed8c 7b02 	vstr	d7, [ip, #8]
 801edc2:	3101      	adds	r1, #1
 801edc4:	3208      	adds	r2, #8
 801edc6:	e7da      	b.n	801ed7e <__kernel_rem_pio2+0x2ae>
 801edc8:	9b04      	ldr	r3, [sp, #16]
 801edca:	f04f 0c01 	mov.w	ip, #1
 801edce:	e7c7      	b.n	801ed60 <__kernel_rem_pio2+0x290>
 801edd0:	ecbe 5b02 	vldmia	lr!, {d5}
 801edd4:	ed38 6b02 	vldmdb	r8!, {d6}
 801edd8:	f10c 0c01 	add.w	ip, ip, #1
 801eddc:	eea5 7b06 	vfma.f64	d7, d5, d6
 801ede0:	e7e7      	b.n	801edb2 <__kernel_rem_pio2+0x2e2>
 801ede2:	3b01      	subs	r3, #1
 801ede4:	e768      	b.n	801ecb8 <__kernel_rem_pio2+0x1e8>
 801ede6:	bf00      	nop
	...
 801edf4:	3e700000 	.word	0x3e700000
 801edf8:	00000000 	.word	0x00000000
 801edfc:	41700000 	.word	0x41700000
 801ee00:	0801f6c8 	.word	0x0801f6c8
 801ee04:	0801f688 	.word	0x0801f688
 801ee08:	4260      	negs	r0, r4
 801ee0a:	eeb0 0b48 	vmov.f64	d0, d8
 801ee0e:	f000 f9e3 	bl	801f1d8 <scalbn>
 801ee12:	ed9f 6b77 	vldr	d6, [pc, #476]	; 801eff0 <__kernel_rem_pio2+0x520>
 801ee16:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801ee1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee1e:	db18      	blt.n	801ee52 <__kernel_rem_pio2+0x382>
 801ee20:	ed9f 7b75 	vldr	d7, [pc, #468]	; 801eff8 <__kernel_rem_pio2+0x528>
 801ee24:	ee20 7b07 	vmul.f64	d7, d0, d7
 801ee28:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801ee2c:	aa06      	add	r2, sp, #24
 801ee2e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801ee32:	eea5 0b46 	vfms.f64	d0, d5, d6
 801ee36:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801ee3a:	a906      	add	r1, sp, #24
 801ee3c:	ee10 3a10 	vmov	r3, s0
 801ee40:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801ee44:	1c6b      	adds	r3, r5, #1
 801ee46:	ee17 2a10 	vmov	r2, s14
 801ee4a:	3418      	adds	r4, #24
 801ee4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801ee50:	e739      	b.n	801ecc6 <__kernel_rem_pio2+0x1f6>
 801ee52:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801ee56:	aa06      	add	r2, sp, #24
 801ee58:	ee10 3a10 	vmov	r3, s0
 801ee5c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801ee60:	462b      	mov	r3, r5
 801ee62:	e730      	b.n	801ecc6 <__kernel_rem_pio2+0x1f6>
 801ee64:	aa06      	add	r2, sp, #24
 801ee66:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 801ee6a:	9202      	str	r2, [sp, #8]
 801ee6c:	ee07 2a90 	vmov	s15, r2
 801ee70:	3c01      	subs	r4, #1
 801ee72:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801ee76:	ee27 7b00 	vmul.f64	d7, d7, d0
 801ee7a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801ee7e:	ed25 7b02 	vstmdb	r5!, {d7}
 801ee82:	e72f      	b.n	801ece4 <__kernel_rem_pio2+0x214>
 801ee84:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 801ee88:	ecb7 5b02 	vldmia	r7!, {d5}
 801ee8c:	ed9c 6b00 	vldr	d6, [ip]
 801ee90:	3401      	adds	r4, #1
 801ee92:	eea5 7b06 	vfma.f64	d7, d5, d6
 801ee96:	454c      	cmp	r4, r9
 801ee98:	dc01      	bgt.n	801ee9e <__kernel_rem_pio2+0x3ce>
 801ee9a:	42a5      	cmp	r5, r4
 801ee9c:	daf2      	bge.n	801ee84 <__kernel_rem_pio2+0x3b4>
 801ee9e:	aa42      	add	r2, sp, #264	; 0x108
 801eea0:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 801eea4:	ed84 7b00 	vstr	d7, [r4]
 801eea8:	3501      	adds	r5, #1
 801eeaa:	3808      	subs	r0, #8
 801eeac:	e71e      	b.n	801ecec <__kernel_rem_pio2+0x21c>
 801eeae:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801eeb0:	2a03      	cmp	r2, #3
 801eeb2:	d84e      	bhi.n	801ef52 <__kernel_rem_pio2+0x482>
 801eeb4:	e8df f002 	tbb	[pc, r2]
 801eeb8:	021f1f3e 	.word	0x021f1f3e
 801eebc:	3108      	adds	r1, #8
 801eebe:	aa42      	add	r2, sp, #264	; 0x108
 801eec0:	4411      	add	r1, r2
 801eec2:	4608      	mov	r0, r1
 801eec4:	461c      	mov	r4, r3
 801eec6:	2c00      	cmp	r4, #0
 801eec8:	dc61      	bgt.n	801ef8e <__kernel_rem_pio2+0x4be>
 801eeca:	4608      	mov	r0, r1
 801eecc:	461c      	mov	r4, r3
 801eece:	2c01      	cmp	r4, #1
 801eed0:	dc6d      	bgt.n	801efae <__kernel_rem_pio2+0x4de>
 801eed2:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 801f000 <__kernel_rem_pio2+0x530>
 801eed6:	2b01      	cmp	r3, #1
 801eed8:	dc79      	bgt.n	801efce <__kernel_rem_pio2+0x4fe>
 801eeda:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 801eede:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 801eee2:	f1b8 0f00 	cmp.w	r8, #0
 801eee6:	d178      	bne.n	801efda <__kernel_rem_pio2+0x50a>
 801eee8:	ed86 5b00 	vstr	d5, [r6]
 801eeec:	ed86 6b02 	vstr	d6, [r6, #8]
 801eef0:	ed86 7b04 	vstr	d7, [r6, #16]
 801eef4:	e02d      	b.n	801ef52 <__kernel_rem_pio2+0x482>
 801eef6:	ed9f 6b42 	vldr	d6, [pc, #264]	; 801f000 <__kernel_rem_pio2+0x530>
 801eefa:	3108      	adds	r1, #8
 801eefc:	aa42      	add	r2, sp, #264	; 0x108
 801eefe:	4411      	add	r1, r2
 801ef00:	4618      	mov	r0, r3
 801ef02:	2800      	cmp	r0, #0
 801ef04:	da34      	bge.n	801ef70 <__kernel_rem_pio2+0x4a0>
 801ef06:	f1b8 0f00 	cmp.w	r8, #0
 801ef0a:	d037      	beq.n	801ef7c <__kernel_rem_pio2+0x4ac>
 801ef0c:	eeb1 7b46 	vneg.f64	d7, d6
 801ef10:	ed86 7b00 	vstr	d7, [r6]
 801ef14:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 801ef18:	a844      	add	r0, sp, #272	; 0x110
 801ef1a:	2101      	movs	r1, #1
 801ef1c:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ef20:	428b      	cmp	r3, r1
 801ef22:	da2e      	bge.n	801ef82 <__kernel_rem_pio2+0x4b2>
 801ef24:	f1b8 0f00 	cmp.w	r8, #0
 801ef28:	d001      	beq.n	801ef2e <__kernel_rem_pio2+0x45e>
 801ef2a:	eeb1 7b47 	vneg.f64	d7, d7
 801ef2e:	ed86 7b02 	vstr	d7, [r6, #8]
 801ef32:	e00e      	b.n	801ef52 <__kernel_rem_pio2+0x482>
 801ef34:	aa92      	add	r2, sp, #584	; 0x248
 801ef36:	ed9f 7b32 	vldr	d7, [pc, #200]	; 801f000 <__kernel_rem_pio2+0x530>
 801ef3a:	4411      	add	r1, r2
 801ef3c:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 801ef40:	2b00      	cmp	r3, #0
 801ef42:	da0f      	bge.n	801ef64 <__kernel_rem_pio2+0x494>
 801ef44:	f1b8 0f00 	cmp.w	r8, #0
 801ef48:	d001      	beq.n	801ef4e <__kernel_rem_pio2+0x47e>
 801ef4a:	eeb1 7b47 	vneg.f64	d7, d7
 801ef4e:	ed86 7b00 	vstr	d7, [r6]
 801ef52:	9b01      	ldr	r3, [sp, #4]
 801ef54:	f003 0007 	and.w	r0, r3, #7
 801ef58:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 801ef5c:	ecbd 8b06 	vpop	{d8-d10}
 801ef60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef64:	ed31 6b02 	vldmdb	r1!, {d6}
 801ef68:	3b01      	subs	r3, #1
 801ef6a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801ef6e:	e7e7      	b.n	801ef40 <__kernel_rem_pio2+0x470>
 801ef70:	ed31 7b02 	vldmdb	r1!, {d7}
 801ef74:	3801      	subs	r0, #1
 801ef76:	ee36 6b07 	vadd.f64	d6, d6, d7
 801ef7a:	e7c2      	b.n	801ef02 <__kernel_rem_pio2+0x432>
 801ef7c:	eeb0 7b46 	vmov.f64	d7, d6
 801ef80:	e7c6      	b.n	801ef10 <__kernel_rem_pio2+0x440>
 801ef82:	ecb0 6b02 	vldmia	r0!, {d6}
 801ef86:	3101      	adds	r1, #1
 801ef88:	ee37 7b06 	vadd.f64	d7, d7, d6
 801ef8c:	e7c8      	b.n	801ef20 <__kernel_rem_pio2+0x450>
 801ef8e:	ed10 7b04 	vldr	d7, [r0, #-16]
 801ef92:	ed30 5b02 	vldmdb	r0!, {d5}
 801ef96:	3c01      	subs	r4, #1
 801ef98:	ee37 6b05 	vadd.f64	d6, d7, d5
 801ef9c:	ee37 7b46 	vsub.f64	d7, d7, d6
 801efa0:	ed00 6b02 	vstr	d6, [r0, #-8]
 801efa4:	ee37 7b05 	vadd.f64	d7, d7, d5
 801efa8:	ed80 7b00 	vstr	d7, [r0]
 801efac:	e78b      	b.n	801eec6 <__kernel_rem_pio2+0x3f6>
 801efae:	ed10 7b04 	vldr	d7, [r0, #-16]
 801efb2:	ed30 5b02 	vldmdb	r0!, {d5}
 801efb6:	3c01      	subs	r4, #1
 801efb8:	ee37 6b05 	vadd.f64	d6, d7, d5
 801efbc:	ee37 7b46 	vsub.f64	d7, d7, d6
 801efc0:	ed00 6b02 	vstr	d6, [r0, #-8]
 801efc4:	ee37 7b05 	vadd.f64	d7, d7, d5
 801efc8:	ed80 7b00 	vstr	d7, [r0]
 801efcc:	e77f      	b.n	801eece <__kernel_rem_pio2+0x3fe>
 801efce:	ed31 6b02 	vldmdb	r1!, {d6}
 801efd2:	3b01      	subs	r3, #1
 801efd4:	ee37 7b06 	vadd.f64	d7, d7, d6
 801efd8:	e77d      	b.n	801eed6 <__kernel_rem_pio2+0x406>
 801efda:	eeb1 5b45 	vneg.f64	d5, d5
 801efde:	eeb1 6b46 	vneg.f64	d6, d6
 801efe2:	ed86 5b00 	vstr	d5, [r6]
 801efe6:	eeb1 7b47 	vneg.f64	d7, d7
 801efea:	ed86 6b02 	vstr	d6, [r6, #8]
 801efee:	e77f      	b.n	801eef0 <__kernel_rem_pio2+0x420>
 801eff0:	00000000 	.word	0x00000000
 801eff4:	41700000 	.word	0x41700000
 801eff8:	00000000 	.word	0x00000000
 801effc:	3e700000 	.word	0x3e700000
	...

0801f008 <__kernel_sin>:
 801f008:	ee10 3a90 	vmov	r3, s1
 801f00c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f010:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801f014:	da04      	bge.n	801f020 <__kernel_sin+0x18>
 801f016:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801f01a:	ee17 3a90 	vmov	r3, s15
 801f01e:	b35b      	cbz	r3, 801f078 <__kernel_sin+0x70>
 801f020:	ee20 6b00 	vmul.f64	d6, d0, d0
 801f024:	ee20 5b06 	vmul.f64	d5, d0, d6
 801f028:	ed9f 7b15 	vldr	d7, [pc, #84]	; 801f080 <__kernel_sin+0x78>
 801f02c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 801f088 <__kernel_sin+0x80>
 801f030:	eea6 4b07 	vfma.f64	d4, d6, d7
 801f034:	ed9f 7b16 	vldr	d7, [pc, #88]	; 801f090 <__kernel_sin+0x88>
 801f038:	eea4 7b06 	vfma.f64	d7, d4, d6
 801f03c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 801f098 <__kernel_sin+0x90>
 801f040:	eea7 4b06 	vfma.f64	d4, d7, d6
 801f044:	ed9f 7b16 	vldr	d7, [pc, #88]	; 801f0a0 <__kernel_sin+0x98>
 801f048:	eea4 7b06 	vfma.f64	d7, d4, d6
 801f04c:	b930      	cbnz	r0, 801f05c <__kernel_sin+0x54>
 801f04e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 801f0a8 <__kernel_sin+0xa0>
 801f052:	eea6 4b07 	vfma.f64	d4, d6, d7
 801f056:	eea4 0b05 	vfma.f64	d0, d4, d5
 801f05a:	4770      	bx	lr
 801f05c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 801f060:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 801f064:	eea1 7b04 	vfma.f64	d7, d1, d4
 801f068:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801f06c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 801f0b0 <__kernel_sin+0xa8>
 801f070:	eea5 1b07 	vfma.f64	d1, d5, d7
 801f074:	ee30 0b41 	vsub.f64	d0, d0, d1
 801f078:	4770      	bx	lr
 801f07a:	bf00      	nop
 801f07c:	f3af 8000 	nop.w
 801f080:	5acfd57c 	.word	0x5acfd57c
 801f084:	3de5d93a 	.word	0x3de5d93a
 801f088:	8a2b9ceb 	.word	0x8a2b9ceb
 801f08c:	be5ae5e6 	.word	0xbe5ae5e6
 801f090:	57b1fe7d 	.word	0x57b1fe7d
 801f094:	3ec71de3 	.word	0x3ec71de3
 801f098:	19c161d5 	.word	0x19c161d5
 801f09c:	bf2a01a0 	.word	0xbf2a01a0
 801f0a0:	1110f8a6 	.word	0x1110f8a6
 801f0a4:	3f811111 	.word	0x3f811111
 801f0a8:	55555549 	.word	0x55555549
 801f0ac:	bfc55555 	.word	0xbfc55555
 801f0b0:	55555549 	.word	0x55555549
 801f0b4:	3fc55555 	.word	0x3fc55555

0801f0b8 <fabs>:
 801f0b8:	ec51 0b10 	vmov	r0, r1, d0
 801f0bc:	ee10 2a10 	vmov	r2, s0
 801f0c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801f0c4:	ec43 2b10 	vmov	d0, r2, r3
 801f0c8:	4770      	bx	lr

0801f0ca <finite>:
 801f0ca:	ee10 3a90 	vmov	r3, s1
 801f0ce:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801f0d2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801f0d6:	0fc0      	lsrs	r0, r0, #31
 801f0d8:	4770      	bx	lr
 801f0da:	0000      	movs	r0, r0
 801f0dc:	0000      	movs	r0, r0
	...

0801f0e0 <floor>:
 801f0e0:	ee10 1a90 	vmov	r1, s1
 801f0e4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801f0e8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801f0ec:	2b13      	cmp	r3, #19
 801f0ee:	b530      	push	{r4, r5, lr}
 801f0f0:	ee10 0a10 	vmov	r0, s0
 801f0f4:	ee10 5a10 	vmov	r5, s0
 801f0f8:	dc33      	bgt.n	801f162 <floor+0x82>
 801f0fa:	2b00      	cmp	r3, #0
 801f0fc:	da17      	bge.n	801f12e <floor+0x4e>
 801f0fe:	ed9f 7b30 	vldr	d7, [pc, #192]	; 801f1c0 <floor+0xe0>
 801f102:	ee30 0b07 	vadd.f64	d0, d0, d7
 801f106:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801f10a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f10e:	dd09      	ble.n	801f124 <floor+0x44>
 801f110:	2900      	cmp	r1, #0
 801f112:	da50      	bge.n	801f1b6 <floor+0xd6>
 801f114:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801f118:	4a2b      	ldr	r2, [pc, #172]	; (801f1c8 <floor+0xe8>)
 801f11a:	4303      	orrs	r3, r0
 801f11c:	2000      	movs	r0, #0
 801f11e:	4283      	cmp	r3, r0
 801f120:	bf18      	it	ne
 801f122:	4611      	movne	r1, r2
 801f124:	460b      	mov	r3, r1
 801f126:	4602      	mov	r2, r0
 801f128:	ec43 2b10 	vmov	d0, r2, r3
 801f12c:	e020      	b.n	801f170 <floor+0x90>
 801f12e:	4a27      	ldr	r2, [pc, #156]	; (801f1cc <floor+0xec>)
 801f130:	411a      	asrs	r2, r3
 801f132:	ea01 0402 	and.w	r4, r1, r2
 801f136:	4304      	orrs	r4, r0
 801f138:	d01a      	beq.n	801f170 <floor+0x90>
 801f13a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 801f1c0 <floor+0xe0>
 801f13e:	ee30 0b07 	vadd.f64	d0, d0, d7
 801f142:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801f146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f14a:	ddeb      	ble.n	801f124 <floor+0x44>
 801f14c:	2900      	cmp	r1, #0
 801f14e:	bfbe      	ittt	lt
 801f150:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 801f154:	fa40 f303 	asrlt.w	r3, r0, r3
 801f158:	18c9      	addlt	r1, r1, r3
 801f15a:	ea21 0102 	bic.w	r1, r1, r2
 801f15e:	2000      	movs	r0, #0
 801f160:	e7e0      	b.n	801f124 <floor+0x44>
 801f162:	2b33      	cmp	r3, #51	; 0x33
 801f164:	dd05      	ble.n	801f172 <floor+0x92>
 801f166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f16a:	d101      	bne.n	801f170 <floor+0x90>
 801f16c:	ee30 0b00 	vadd.f64	d0, d0, d0
 801f170:	bd30      	pop	{r4, r5, pc}
 801f172:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801f176:	f04f 32ff 	mov.w	r2, #4294967295
 801f17a:	40e2      	lsrs	r2, r4
 801f17c:	4202      	tst	r2, r0
 801f17e:	d0f7      	beq.n	801f170 <floor+0x90>
 801f180:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 801f1c0 <floor+0xe0>
 801f184:	ee30 0b07 	vadd.f64	d0, d0, d7
 801f188:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801f18c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f190:	ddc8      	ble.n	801f124 <floor+0x44>
 801f192:	2900      	cmp	r1, #0
 801f194:	da02      	bge.n	801f19c <floor+0xbc>
 801f196:	2b14      	cmp	r3, #20
 801f198:	d103      	bne.n	801f1a2 <floor+0xc2>
 801f19a:	3101      	adds	r1, #1
 801f19c:	ea20 0002 	bic.w	r0, r0, r2
 801f1a0:	e7c0      	b.n	801f124 <floor+0x44>
 801f1a2:	2401      	movs	r4, #1
 801f1a4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801f1a8:	fa04 f303 	lsl.w	r3, r4, r3
 801f1ac:	4418      	add	r0, r3
 801f1ae:	42a8      	cmp	r0, r5
 801f1b0:	bf38      	it	cc
 801f1b2:	1909      	addcc	r1, r1, r4
 801f1b4:	e7f2      	b.n	801f19c <floor+0xbc>
 801f1b6:	2000      	movs	r0, #0
 801f1b8:	4601      	mov	r1, r0
 801f1ba:	e7b3      	b.n	801f124 <floor+0x44>
 801f1bc:	f3af 8000 	nop.w
 801f1c0:	8800759c 	.word	0x8800759c
 801f1c4:	7e37e43c 	.word	0x7e37e43c
 801f1c8:	bff00000 	.word	0xbff00000
 801f1cc:	000fffff 	.word	0x000fffff

0801f1d0 <matherr>:
 801f1d0:	2000      	movs	r0, #0
 801f1d2:	4770      	bx	lr
 801f1d4:	0000      	movs	r0, r0
	...

0801f1d8 <scalbn>:
 801f1d8:	b500      	push	{lr}
 801f1da:	ed2d 8b02 	vpush	{d8}
 801f1de:	b083      	sub	sp, #12
 801f1e0:	ed8d 0b00 	vstr	d0, [sp]
 801f1e4:	9b01      	ldr	r3, [sp, #4]
 801f1e6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801f1ea:	b9a2      	cbnz	r2, 801f216 <scalbn+0x3e>
 801f1ec:	9a00      	ldr	r2, [sp, #0]
 801f1ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f1f2:	4313      	orrs	r3, r2
 801f1f4:	d03a      	beq.n	801f26c <scalbn+0x94>
 801f1f6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801f2b0 <scalbn+0xd8>
 801f1fa:	4b35      	ldr	r3, [pc, #212]	; (801f2d0 <scalbn+0xf8>)
 801f1fc:	ee20 7b07 	vmul.f64	d7, d0, d7
 801f200:	4298      	cmp	r0, r3
 801f202:	ed8d 7b00 	vstr	d7, [sp]
 801f206:	da11      	bge.n	801f22c <scalbn+0x54>
 801f208:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 801f2b8 <scalbn+0xe0>
 801f20c:	ed9d 6b00 	vldr	d6, [sp]
 801f210:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f214:	e007      	b.n	801f226 <scalbn+0x4e>
 801f216:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801f21a:	428a      	cmp	r2, r1
 801f21c:	d10a      	bne.n	801f234 <scalbn+0x5c>
 801f21e:	ed9d 7b00 	vldr	d7, [sp]
 801f222:	ee37 7b07 	vadd.f64	d7, d7, d7
 801f226:	ed8d 7b00 	vstr	d7, [sp]
 801f22a:	e01f      	b.n	801f26c <scalbn+0x94>
 801f22c:	9b01      	ldr	r3, [sp, #4]
 801f22e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801f232:	3a36      	subs	r2, #54	; 0x36
 801f234:	4402      	add	r2, r0
 801f236:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801f23a:	428a      	cmp	r2, r1
 801f23c:	dd0a      	ble.n	801f254 <scalbn+0x7c>
 801f23e:	ed9f 8b20 	vldr	d8, [pc, #128]	; 801f2c0 <scalbn+0xe8>
 801f242:	eeb0 0b48 	vmov.f64	d0, d8
 801f246:	ed9d 1b00 	vldr	d1, [sp]
 801f24a:	f000 f843 	bl	801f2d4 <copysign>
 801f24e:	ee20 7b08 	vmul.f64	d7, d0, d8
 801f252:	e7e8      	b.n	801f226 <scalbn+0x4e>
 801f254:	2a00      	cmp	r2, #0
 801f256:	dd10      	ble.n	801f27a <scalbn+0xa2>
 801f258:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f25c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f260:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801f264:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801f268:	e9cd 0100 	strd	r0, r1, [sp]
 801f26c:	ed9d 0b00 	vldr	d0, [sp]
 801f270:	b003      	add	sp, #12
 801f272:	ecbd 8b02 	vpop	{d8}
 801f276:	f85d fb04 	ldr.w	pc, [sp], #4
 801f27a:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801f27e:	da06      	bge.n	801f28e <scalbn+0xb6>
 801f280:	f24c 3350 	movw	r3, #50000	; 0xc350
 801f284:	4298      	cmp	r0, r3
 801f286:	dcda      	bgt.n	801f23e <scalbn+0x66>
 801f288:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 801f2b8 <scalbn+0xe0>
 801f28c:	e7d9      	b.n	801f242 <scalbn+0x6a>
 801f28e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f292:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f296:	3236      	adds	r2, #54	; 0x36
 801f298:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801f29c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801f2a0:	ec41 0b17 	vmov	d7, r0, r1
 801f2a4:	ed9f 6b08 	vldr	d6, [pc, #32]	; 801f2c8 <scalbn+0xf0>
 801f2a8:	e7b2      	b.n	801f210 <scalbn+0x38>
 801f2aa:	bf00      	nop
 801f2ac:	f3af 8000 	nop.w
 801f2b0:	00000000 	.word	0x00000000
 801f2b4:	43500000 	.word	0x43500000
 801f2b8:	c2f8f359 	.word	0xc2f8f359
 801f2bc:	01a56e1f 	.word	0x01a56e1f
 801f2c0:	8800759c 	.word	0x8800759c
 801f2c4:	7e37e43c 	.word	0x7e37e43c
 801f2c8:	00000000 	.word	0x00000000
 801f2cc:	3c900000 	.word	0x3c900000
 801f2d0:	ffff3cb0 	.word	0xffff3cb0

0801f2d4 <copysign>:
 801f2d4:	ec51 0b10 	vmov	r0, r1, d0
 801f2d8:	ee11 0a90 	vmov	r0, s3
 801f2dc:	ee10 2a10 	vmov	r2, s0
 801f2e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801f2e4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801f2e8:	ea41 0300 	orr.w	r3, r1, r0
 801f2ec:	ec43 2b10 	vmov	d0, r2, r3
 801f2f0:	4770      	bx	lr
	...

0801f2f4 <_init>:
 801f2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f2f6:	bf00      	nop
 801f2f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f2fa:	bc08      	pop	{r3}
 801f2fc:	469e      	mov	lr, r3
 801f2fe:	4770      	bx	lr

0801f300 <_fini>:
 801f300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f302:	bf00      	nop
 801f304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f306:	bc08      	pop	{r3}
 801f308:	469e      	mov	lr, r3
 801f30a:	4770      	bx	lr
