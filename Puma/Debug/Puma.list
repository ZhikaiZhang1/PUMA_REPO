
Puma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d868  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800db00  0800db00  0001db00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dbc4  0800dbc4  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800dbc4  0800dbc4  0001dbc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dbcc  0800dbcc  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbcc  0800dbcc  0001dbcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dbd0  0800dbd0  0001dbd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  24000000  0800dbd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c64  240001f0  0800ddc0  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24001e54  0800ddc0  00021e54  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a723  00000000  00000000  0002021a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004750  00000000  00000000  0004a93d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017b8  00000000  00000000  0004f090  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001600  00000000  00000000  00050848  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003a36e  00000000  00000000  00051e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017a4e  00000000  00000000  0008c1b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00163b8d  00000000  00000000  000a3c04  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00207791  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065cc  00000000  00000000  0020780c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240001f0 	.word	0x240001f0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800dae8 	.word	0x0800dae8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240001f4 	.word	0x240001f4
 80002d4:	0800dae8 	.word	0x0800dae8

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b972 	b.w	80005e4 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9e08      	ldr	r6, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	4688      	mov	r8, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d14b      	bne.n	80003be <__udivmoddi4+0xa6>
 8000326:	428a      	cmp	r2, r1
 8000328:	4615      	mov	r5, r2
 800032a:	d967      	bls.n	80003fc <__udivmoddi4+0xe4>
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	b14a      	cbz	r2, 8000346 <__udivmoddi4+0x2e>
 8000332:	f1c2 0720 	rsb	r7, r2, #32
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	fa20 f707 	lsr.w	r7, r0, r7
 800033e:	4095      	lsls	r5, r2
 8000340:	ea47 0803 	orr.w	r8, r7, r3
 8000344:	4094      	lsls	r4, r2
 8000346:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000350:	fa1f fc85 	uxth.w	ip, r5
 8000354:	fb0e 8817 	mls	r8, lr, r7, r8
 8000358:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800035c:	fb07 f10c 	mul.w	r1, r7, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x60>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f107 30ff 	add.w	r0, r7, #4294967295
 800036a:	f080 811b 	bcs.w	80005a4 <__udivmoddi4+0x28c>
 800036e:	4299      	cmp	r1, r3
 8000370:	f240 8118 	bls.w	80005a4 <__udivmoddi4+0x28c>
 8000374:	3f02      	subs	r7, #2
 8000376:	442b      	add	r3, r5
 8000378:	1a5b      	subs	r3, r3, r1
 800037a:	b2a4      	uxth	r4, r4
 800037c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000380:	fb0e 3310 	mls	r3, lr, r0, r3
 8000384:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000388:	fb00 fc0c 	mul.w	ip, r0, ip
 800038c:	45a4      	cmp	ip, r4
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x8c>
 8000390:	192c      	adds	r4, r5, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	f080 8107 	bcs.w	80005a8 <__udivmoddi4+0x290>
 800039a:	45a4      	cmp	ip, r4
 800039c:	f240 8104 	bls.w	80005a8 <__udivmoddi4+0x290>
 80003a0:	3802      	subs	r0, #2
 80003a2:	442c      	add	r4, r5
 80003a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a8:	eba4 040c 	sub.w	r4, r4, ip
 80003ac:	2700      	movs	r7, #0
 80003ae:	b11e      	cbz	r6, 80003b8 <__udivmoddi4+0xa0>
 80003b0:	40d4      	lsrs	r4, r2
 80003b2:	2300      	movs	r3, #0
 80003b4:	e9c6 4300 	strd	r4, r3, [r6]
 80003b8:	4639      	mov	r1, r7
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d909      	bls.n	80003d6 <__udivmoddi4+0xbe>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	f000 80eb 	beq.w	800059e <__udivmoddi4+0x286>
 80003c8:	2700      	movs	r7, #0
 80003ca:	e9c6 0100 	strd	r0, r1, [r6]
 80003ce:	4638      	mov	r0, r7
 80003d0:	4639      	mov	r1, r7
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	fab3 f783 	clz	r7, r3
 80003da:	2f00      	cmp	r7, #0
 80003dc:	d147      	bne.n	800046e <__udivmoddi4+0x156>
 80003de:	428b      	cmp	r3, r1
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xd0>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 80fa 	bhi.w	80005dc <__udivmoddi4+0x2c4>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb61 0303 	sbc.w	r3, r1, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4698      	mov	r8, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d0e0      	beq.n	80003b8 <__udivmoddi4+0xa0>
 80003f6:	e9c6 4800 	strd	r4, r8, [r6]
 80003fa:	e7dd      	b.n	80003b8 <__udivmoddi4+0xa0>
 80003fc:	b902      	cbnz	r2, 8000400 <__udivmoddi4+0xe8>
 80003fe:	deff      	udf	#255	; 0xff
 8000400:	fab2 f282 	clz	r2, r2
 8000404:	2a00      	cmp	r2, #0
 8000406:	f040 808f 	bne.w	8000528 <__udivmoddi4+0x210>
 800040a:	1b49      	subs	r1, r1, r5
 800040c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000410:	fa1f f885 	uxth.w	r8, r5
 8000414:	2701      	movs	r7, #1
 8000416:	fbb1 fcfe 	udiv	ip, r1, lr
 800041a:	0c23      	lsrs	r3, r4, #16
 800041c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb08 f10c 	mul.w	r1, r8, ip
 8000428:	4299      	cmp	r1, r3
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x124>
 800042c:	18eb      	adds	r3, r5, r3
 800042e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x122>
 8000434:	4299      	cmp	r1, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2bc>
 800043a:	4684      	mov	ip, r0
 800043c:	1a59      	subs	r1, r3, r1
 800043e:	b2a3      	uxth	r3, r4
 8000440:	fbb1 f0fe 	udiv	r0, r1, lr
 8000444:	fb0e 1410 	mls	r4, lr, r0, r1
 8000448:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800044c:	fb08 f800 	mul.w	r8, r8, r0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x14c>
 8000454:	192c      	adds	r4, r5, r4
 8000456:	f100 33ff 	add.w	r3, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x14a>
 800045c:	45a0      	cmp	r8, r4
 800045e:	f200 80b6 	bhi.w	80005ce <__udivmoddi4+0x2b6>
 8000462:	4618      	mov	r0, r3
 8000464:	eba4 0408 	sub.w	r4, r4, r8
 8000468:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800046c:	e79f      	b.n	80003ae <__udivmoddi4+0x96>
 800046e:	f1c7 0c20 	rsb	ip, r7, #32
 8000472:	40bb      	lsls	r3, r7
 8000474:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000478:	ea4e 0e03 	orr.w	lr, lr, r3
 800047c:	fa01 f407 	lsl.w	r4, r1, r7
 8000480:	fa20 f50c 	lsr.w	r5, r0, ip
 8000484:	fa21 f30c 	lsr.w	r3, r1, ip
 8000488:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800048c:	4325      	orrs	r5, r4
 800048e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000492:	0c2c      	lsrs	r4, r5, #16
 8000494:	fb08 3319 	mls	r3, r8, r9, r3
 8000498:	fa1f fa8e 	uxth.w	sl, lr
 800049c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a0:	fb09 f40a 	mul.w	r4, r9, sl
 80004a4:	429c      	cmp	r4, r3
 80004a6:	fa02 f207 	lsl.w	r2, r2, r7
 80004aa:	fa00 f107 	lsl.w	r1, r0, r7
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b0>
 80004b0:	eb1e 0303 	adds.w	r3, lr, r3
 80004b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b8:	f080 8087 	bcs.w	80005ca <__udivmoddi4+0x2b2>
 80004bc:	429c      	cmp	r4, r3
 80004be:	f240 8084 	bls.w	80005ca <__udivmoddi4+0x2b2>
 80004c2:	f1a9 0902 	sub.w	r9, r9, #2
 80004c6:	4473      	add	r3, lr
 80004c8:	1b1b      	subs	r3, r3, r4
 80004ca:	b2ad      	uxth	r5, r5
 80004cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d0:	fb08 3310 	mls	r3, r8, r0, r3
 80004d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004dc:	45a2      	cmp	sl, r4
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1da>
 80004e0:	eb1e 0404 	adds.w	r4, lr, r4
 80004e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e8:	d26b      	bcs.n	80005c2 <__udivmoddi4+0x2aa>
 80004ea:	45a2      	cmp	sl, r4
 80004ec:	d969      	bls.n	80005c2 <__udivmoddi4+0x2aa>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4474      	add	r4, lr
 80004f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004f6:	fba0 8902 	umull	r8, r9, r0, r2
 80004fa:	eba4 040a 	sub.w	r4, r4, sl
 80004fe:	454c      	cmp	r4, r9
 8000500:	46c2      	mov	sl, r8
 8000502:	464b      	mov	r3, r9
 8000504:	d354      	bcc.n	80005b0 <__udivmoddi4+0x298>
 8000506:	d051      	beq.n	80005ac <__udivmoddi4+0x294>
 8000508:	2e00      	cmp	r6, #0
 800050a:	d069      	beq.n	80005e0 <__udivmoddi4+0x2c8>
 800050c:	ebb1 050a 	subs.w	r5, r1, sl
 8000510:	eb64 0403 	sbc.w	r4, r4, r3
 8000514:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000518:	40fd      	lsrs	r5, r7
 800051a:	40fc      	lsrs	r4, r7
 800051c:	ea4c 0505 	orr.w	r5, ip, r5
 8000520:	e9c6 5400 	strd	r5, r4, [r6]
 8000524:	2700      	movs	r7, #0
 8000526:	e747      	b.n	80003b8 <__udivmoddi4+0xa0>
 8000528:	f1c2 0320 	rsb	r3, r2, #32
 800052c:	fa20 f703 	lsr.w	r7, r0, r3
 8000530:	4095      	lsls	r5, r2
 8000532:	fa01 f002 	lsl.w	r0, r1, r2
 8000536:	fa21 f303 	lsr.w	r3, r1, r3
 800053a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800053e:	4338      	orrs	r0, r7
 8000540:	0c01      	lsrs	r1, r0, #16
 8000542:	fbb3 f7fe 	udiv	r7, r3, lr
 8000546:	fa1f f885 	uxth.w	r8, r5
 800054a:	fb0e 3317 	mls	r3, lr, r7, r3
 800054e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000552:	fb07 f308 	mul.w	r3, r7, r8
 8000556:	428b      	cmp	r3, r1
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x256>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f107 3cff 	add.w	ip, r7, #4294967295
 8000564:	d22f      	bcs.n	80005c6 <__udivmoddi4+0x2ae>
 8000566:	428b      	cmp	r3, r1
 8000568:	d92d      	bls.n	80005c6 <__udivmoddi4+0x2ae>
 800056a:	3f02      	subs	r7, #2
 800056c:	4429      	add	r1, r5
 800056e:	1acb      	subs	r3, r1, r3
 8000570:	b281      	uxth	r1, r0
 8000572:	fbb3 f0fe 	udiv	r0, r3, lr
 8000576:	fb0e 3310 	mls	r3, lr, r0, r3
 800057a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057e:	fb00 f308 	mul.w	r3, r0, r8
 8000582:	428b      	cmp	r3, r1
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x27e>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f100 3cff 	add.w	ip, r0, #4294967295
 800058c:	d217      	bcs.n	80005be <__udivmoddi4+0x2a6>
 800058e:	428b      	cmp	r3, r1
 8000590:	d915      	bls.n	80005be <__udivmoddi4+0x2a6>
 8000592:	3802      	subs	r0, #2
 8000594:	4429      	add	r1, r5
 8000596:	1ac9      	subs	r1, r1, r3
 8000598:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800059c:	e73b      	b.n	8000416 <__udivmoddi4+0xfe>
 800059e:	4637      	mov	r7, r6
 80005a0:	4630      	mov	r0, r6
 80005a2:	e709      	b.n	80003b8 <__udivmoddi4+0xa0>
 80005a4:	4607      	mov	r7, r0
 80005a6:	e6e7      	b.n	8000378 <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fb      	b.n	80003a4 <__udivmoddi4+0x8c>
 80005ac:	4541      	cmp	r1, r8
 80005ae:	d2ab      	bcs.n	8000508 <__udivmoddi4+0x1f0>
 80005b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005b4:	eb69 020e 	sbc.w	r2, r9, lr
 80005b8:	3801      	subs	r0, #1
 80005ba:	4613      	mov	r3, r2
 80005bc:	e7a4      	b.n	8000508 <__udivmoddi4+0x1f0>
 80005be:	4660      	mov	r0, ip
 80005c0:	e7e9      	b.n	8000596 <__udivmoddi4+0x27e>
 80005c2:	4618      	mov	r0, r3
 80005c4:	e795      	b.n	80004f2 <__udivmoddi4+0x1da>
 80005c6:	4667      	mov	r7, ip
 80005c8:	e7d1      	b.n	800056e <__udivmoddi4+0x256>
 80005ca:	4681      	mov	r9, r0
 80005cc:	e77c      	b.n	80004c8 <__udivmoddi4+0x1b0>
 80005ce:	3802      	subs	r0, #2
 80005d0:	442c      	add	r4, r5
 80005d2:	e747      	b.n	8000464 <__udivmoddi4+0x14c>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	442b      	add	r3, r5
 80005da:	e72f      	b.n	800043c <__udivmoddi4+0x124>
 80005dc:	4638      	mov	r0, r7
 80005de:	e708      	b.n	80003f2 <__udivmoddi4+0xda>
 80005e0:	4637      	mov	r7, r6
 80005e2:	e6e9      	b.n	80003b8 <__udivmoddi4+0xa0>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);
//handle GPIO interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	80fb      	strh	r3, [r7, #6]
		GPIO_TypeDef* port;
		uint16_t  pin_num;
    }PINS;*/
	//pins: 0,1,2,3,4,7 - PA0(PC10)y, PA1(PD5)y, PB2(PC7)y, PE3(PE4)y, PD4(PD3)y, PD7(PE2)y
	// HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
	switch (GPIO_Pin){
 80005f2:	88fb      	ldrh	r3, [r7, #6]
 80005f4:	2b04      	cmp	r3, #4
 80005f6:	f000 80b9 	beq.w	800076c <HAL_GPIO_EXTI_Callback+0x184>
 80005fa:	2b04      	cmp	r3, #4
 80005fc:	dc04      	bgt.n	8000608 <HAL_GPIO_EXTI_Callback+0x20>
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d00c      	beq.n	800061c <HAL_GPIO_EXTI_Callback+0x34>
 8000602:	2b02      	cmp	r3, #2
 8000604:	d05e      	beq.n	80006c4 <HAL_GPIO_EXTI_Callback+0xdc>
		  else{
			  motor_steps[5]--;
		  }
		break;
	default:
		break;
 8000606:	e212      	b.n	8000a2e <HAL_GPIO_EXTI_Callback+0x446>
	switch (GPIO_Pin){
 8000608:	2b10      	cmp	r3, #16
 800060a:	f000 8164 	beq.w	80008d6 <HAL_GPIO_EXTI_Callback+0x2ee>
 800060e:	2b80      	cmp	r3, #128	; 0x80
 8000610:	f000 81b7 	beq.w	8000982 <HAL_GPIO_EXTI_Callback+0x39a>
 8000614:	2b08      	cmp	r3, #8
 8000616:	f000 80fd 	beq.w	8000814 <HAL_GPIO_EXTI_Callback+0x22c>
		break;
 800061a:	e208      	b.n	8000a2e <HAL_GPIO_EXTI_Callback+0x446>
		 Lstate[0] = HAL_GPIO_ReadPin(encoders[0].port, encoders[0].pin_num);
 800061c:	4b94      	ldr	r3, [pc, #592]	; (8000870 <HAL_GPIO_EXTI_Callback+0x288>)
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	4b93      	ldr	r3, [pc, #588]	; (8000870 <HAL_GPIO_EXTI_Callback+0x288>)
 8000622:	889b      	ldrh	r3, [r3, #4]
 8000624:	4619      	mov	r1, r3
 8000626:	4610      	mov	r0, r2
 8000628:	f002 fa56 	bl	8002ad8 <HAL_GPIO_ReadPin>
 800062c:	4603      	mov	r3, r0
 800062e:	461a      	mov	r2, r3
 8000630:	4b90      	ldr	r3, [pc, #576]	; (8000874 <HAL_GPIO_EXTI_Callback+0x28c>)
 8000632:	601a      	str	r2, [r3, #0]
		  if((val_encoderA[0] == LOW) && Lstate[0]==HIGH)
 8000634:	4b90      	ldr	r3, [pc, #576]	; (8000878 <HAL_GPIO_EXTI_Callback+0x290>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d12b      	bne.n	8000694 <HAL_GPIO_EXTI_Callback+0xac>
 800063c:	4b8d      	ldr	r3, [pc, #564]	; (8000874 <HAL_GPIO_EXTI_Callback+0x28c>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d127      	bne.n	8000694 <HAL_GPIO_EXTI_Callback+0xac>
			val_encoderB[0] = HAL_GPIO_ReadPin(encoders[1].port, encoders[1].pin_num);
 8000644:	4b8a      	ldr	r3, [pc, #552]	; (8000870 <HAL_GPIO_EXTI_Callback+0x288>)
 8000646:	689a      	ldr	r2, [r3, #8]
 8000648:	4b89      	ldr	r3, [pc, #548]	; (8000870 <HAL_GPIO_EXTI_Callback+0x288>)
 800064a:	899b      	ldrh	r3, [r3, #12]
 800064c:	4619      	mov	r1, r3
 800064e:	4610      	mov	r0, r2
 8000650:	f002 fa42 	bl	8002ad8 <HAL_GPIO_ReadPin>
 8000654:	4603      	mov	r3, r0
 8000656:	461a      	mov	r2, r3
 8000658:	4b88      	ldr	r3, [pc, #544]	; (800087c <HAL_GPIO_EXTI_Callback+0x294>)
 800065a:	601a      	str	r2, [r3, #0]
		    if(val_encoderB[0] == LOW && direction[0])
 800065c:	4b87      	ldr	r3, [pc, #540]	; (800087c <HAL_GPIO_EXTI_Callback+0x294>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d108      	bne.n	8000676 <HAL_GPIO_EXTI_Callback+0x8e>
 8000664:	4b86      	ldr	r3, [pc, #536]	; (8000880 <HAL_GPIO_EXTI_Callback+0x298>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	2b00      	cmp	r3, #0
 800066c:	d003      	beq.n	8000676 <HAL_GPIO_EXTI_Callback+0x8e>
		      direction[0] = false; //Reverse
 800066e:	4b84      	ldr	r3, [pc, #528]	; (8000880 <HAL_GPIO_EXTI_Callback+0x298>)
 8000670:	2200      	movs	r2, #0
 8000672:	701a      	strb	r2, [r3, #0]
 8000674:	e00e      	b.n	8000694 <HAL_GPIO_EXTI_Callback+0xac>
		    else if(val_encoderB[0] == HIGH && !direction[0])
 8000676:	4b81      	ldr	r3, [pc, #516]	; (800087c <HAL_GPIO_EXTI_Callback+0x294>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d10a      	bne.n	8000694 <HAL_GPIO_EXTI_Callback+0xac>
 800067e:	4b80      	ldr	r3, [pc, #512]	; (8000880 <HAL_GPIO_EXTI_Callback+0x298>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	b2db      	uxtb	r3, r3
 8000684:	f083 0301 	eor.w	r3, r3, #1
 8000688:	b2db      	uxtb	r3, r3
 800068a:	2b00      	cmp	r3, #0
 800068c:	d002      	beq.n	8000694 <HAL_GPIO_EXTI_Callback+0xac>
		    	direction[0] = true;  //Forward
 800068e:	4b7c      	ldr	r3, [pc, #496]	; (8000880 <HAL_GPIO_EXTI_Callback+0x298>)
 8000690:	2201      	movs	r2, #1
 8000692:	701a      	strb	r2, [r3, #0]
		  val_encoderA[0] = Lstate[0];
 8000694:	4b77      	ldr	r3, [pc, #476]	; (8000874 <HAL_GPIO_EXTI_Callback+0x28c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a77      	ldr	r2, [pc, #476]	; (8000878 <HAL_GPIO_EXTI_Callback+0x290>)
 800069a:	6013      	str	r3, [r2, #0]
		  if(!direction[0]){
 800069c:	4b78      	ldr	r3, [pc, #480]	; (8000880 <HAL_GPIO_EXTI_Callback+0x298>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	f083 0301 	eor.w	r3, r3, #1
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d005      	beq.n	80006b8 <HAL_GPIO_EXTI_Callback+0xd0>
			  motor_steps[0]++;
 80006ac:	4b75      	ldr	r3, [pc, #468]	; (8000884 <HAL_GPIO_EXTI_Callback+0x29c>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	3301      	adds	r3, #1
 80006b2:	4a74      	ldr	r2, [pc, #464]	; (8000884 <HAL_GPIO_EXTI_Callback+0x29c>)
 80006b4:	6013      	str	r3, [r2, #0]
		break;
 80006b6:	e1ba      	b.n	8000a2e <HAL_GPIO_EXTI_Callback+0x446>
			  motor_steps[0]--;
 80006b8:	4b72      	ldr	r3, [pc, #456]	; (8000884 <HAL_GPIO_EXTI_Callback+0x29c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	3b01      	subs	r3, #1
 80006be:	4a71      	ldr	r2, [pc, #452]	; (8000884 <HAL_GPIO_EXTI_Callback+0x29c>)
 80006c0:	6013      	str	r3, [r2, #0]
		break;
 80006c2:	e1b4      	b.n	8000a2e <HAL_GPIO_EXTI_Callback+0x446>
		 Lstate[1] = HAL_GPIO_ReadPin(encoders[2].port, encoders[2].pin_num);
 80006c4:	4b6a      	ldr	r3, [pc, #424]	; (8000870 <HAL_GPIO_EXTI_Callback+0x288>)
 80006c6:	691a      	ldr	r2, [r3, #16]
 80006c8:	4b69      	ldr	r3, [pc, #420]	; (8000870 <HAL_GPIO_EXTI_Callback+0x288>)
 80006ca:	8a9b      	ldrh	r3, [r3, #20]
 80006cc:	4619      	mov	r1, r3
 80006ce:	4610      	mov	r0, r2
 80006d0:	f002 fa02 	bl	8002ad8 <HAL_GPIO_ReadPin>
 80006d4:	4603      	mov	r3, r0
 80006d6:	461a      	mov	r2, r3
 80006d8:	4b66      	ldr	r3, [pc, #408]	; (8000874 <HAL_GPIO_EXTI_Callback+0x28c>)
 80006da:	605a      	str	r2, [r3, #4]
		  if((val_encoderA[1] == LOW) && Lstate[1]==HIGH)
 80006dc:	4b66      	ldr	r3, [pc, #408]	; (8000878 <HAL_GPIO_EXTI_Callback+0x290>)
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d12b      	bne.n	800073c <HAL_GPIO_EXTI_Callback+0x154>
 80006e4:	4b63      	ldr	r3, [pc, #396]	; (8000874 <HAL_GPIO_EXTI_Callback+0x28c>)
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d127      	bne.n	800073c <HAL_GPIO_EXTI_Callback+0x154>
			val_encoderB[1] = HAL_GPIO_ReadPin(encoders[3].port, encoders[3].pin_num);
 80006ec:	4b60      	ldr	r3, [pc, #384]	; (8000870 <HAL_GPIO_EXTI_Callback+0x288>)
 80006ee:	699a      	ldr	r2, [r3, #24]
 80006f0:	4b5f      	ldr	r3, [pc, #380]	; (8000870 <HAL_GPIO_EXTI_Callback+0x288>)
 80006f2:	8b9b      	ldrh	r3, [r3, #28]
 80006f4:	4619      	mov	r1, r3
 80006f6:	4610      	mov	r0, r2
 80006f8:	f002 f9ee 	bl	8002ad8 <HAL_GPIO_ReadPin>
 80006fc:	4603      	mov	r3, r0
 80006fe:	461a      	mov	r2, r3
 8000700:	4b5e      	ldr	r3, [pc, #376]	; (800087c <HAL_GPIO_EXTI_Callback+0x294>)
 8000702:	605a      	str	r2, [r3, #4]
		    if(val_encoderB[1] == LOW && direction[1])
 8000704:	4b5d      	ldr	r3, [pc, #372]	; (800087c <HAL_GPIO_EXTI_Callback+0x294>)
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d108      	bne.n	800071e <HAL_GPIO_EXTI_Callback+0x136>
 800070c:	4b5c      	ldr	r3, [pc, #368]	; (8000880 <HAL_GPIO_EXTI_Callback+0x298>)
 800070e:	785b      	ldrb	r3, [r3, #1]
 8000710:	b2db      	uxtb	r3, r3
 8000712:	2b00      	cmp	r3, #0
 8000714:	d003      	beq.n	800071e <HAL_GPIO_EXTI_Callback+0x136>
		      direction[1] = false; //Reverse
 8000716:	4b5a      	ldr	r3, [pc, #360]	; (8000880 <HAL_GPIO_EXTI_Callback+0x298>)
 8000718:	2200      	movs	r2, #0
 800071a:	705a      	strb	r2, [r3, #1]
 800071c:	e00e      	b.n	800073c <HAL_GPIO_EXTI_Callback+0x154>
		    else if(val_encoderB[1] == HIGH && !direction[1])
 800071e:	4b57      	ldr	r3, [pc, #348]	; (800087c <HAL_GPIO_EXTI_Callback+0x294>)
 8000720:	685b      	ldr	r3, [r3, #4]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d10a      	bne.n	800073c <HAL_GPIO_EXTI_Callback+0x154>
 8000726:	4b56      	ldr	r3, [pc, #344]	; (8000880 <HAL_GPIO_EXTI_Callback+0x298>)
 8000728:	785b      	ldrb	r3, [r3, #1]
 800072a:	b2db      	uxtb	r3, r3
 800072c:	f083 0301 	eor.w	r3, r3, #1
 8000730:	b2db      	uxtb	r3, r3
 8000732:	2b00      	cmp	r3, #0
 8000734:	d002      	beq.n	800073c <HAL_GPIO_EXTI_Callback+0x154>
		    	direction[1] = true;  //Forward
 8000736:	4b52      	ldr	r3, [pc, #328]	; (8000880 <HAL_GPIO_EXTI_Callback+0x298>)
 8000738:	2201      	movs	r2, #1
 800073a:	705a      	strb	r2, [r3, #1]
		  val_encoderA[1] = Lstate[1];
 800073c:	4b4d      	ldr	r3, [pc, #308]	; (8000874 <HAL_GPIO_EXTI_Callback+0x28c>)
 800073e:	685b      	ldr	r3, [r3, #4]
 8000740:	4a4d      	ldr	r2, [pc, #308]	; (8000878 <HAL_GPIO_EXTI_Callback+0x290>)
 8000742:	6053      	str	r3, [r2, #4]
		  if(!direction[1]){
 8000744:	4b4e      	ldr	r3, [pc, #312]	; (8000880 <HAL_GPIO_EXTI_Callback+0x298>)
 8000746:	785b      	ldrb	r3, [r3, #1]
 8000748:	b2db      	uxtb	r3, r3
 800074a:	f083 0301 	eor.w	r3, r3, #1
 800074e:	b2db      	uxtb	r3, r3
 8000750:	2b00      	cmp	r3, #0
 8000752:	d005      	beq.n	8000760 <HAL_GPIO_EXTI_Callback+0x178>
			  motor_steps[1]++;
 8000754:	4b4b      	ldr	r3, [pc, #300]	; (8000884 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	3301      	adds	r3, #1
 800075a:	4a4a      	ldr	r2, [pc, #296]	; (8000884 <HAL_GPIO_EXTI_Callback+0x29c>)
 800075c:	6053      	str	r3, [r2, #4]
		break;
 800075e:	e166      	b.n	8000a2e <HAL_GPIO_EXTI_Callback+0x446>
			  motor_steps[1]--;
 8000760:	4b48      	ldr	r3, [pc, #288]	; (8000884 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	3b01      	subs	r3, #1
 8000766:	4a47      	ldr	r2, [pc, #284]	; (8000884 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000768:	6053      	str	r3, [r2, #4]
		break;
 800076a:	e160      	b.n	8000a2e <HAL_GPIO_EXTI_Callback+0x446>
		 Lstate[2] = HAL_GPIO_ReadPin(encoders[4].port, encoders[4].pin_num);
 800076c:	4b40      	ldr	r3, [pc, #256]	; (8000870 <HAL_GPIO_EXTI_Callback+0x288>)
 800076e:	6a1a      	ldr	r2, [r3, #32]
 8000770:	4b3f      	ldr	r3, [pc, #252]	; (8000870 <HAL_GPIO_EXTI_Callback+0x288>)
 8000772:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000774:	4619      	mov	r1, r3
 8000776:	4610      	mov	r0, r2
 8000778:	f002 f9ae 	bl	8002ad8 <HAL_GPIO_ReadPin>
 800077c:	4603      	mov	r3, r0
 800077e:	461a      	mov	r2, r3
 8000780:	4b3c      	ldr	r3, [pc, #240]	; (8000874 <HAL_GPIO_EXTI_Callback+0x28c>)
 8000782:	609a      	str	r2, [r3, #8]
		  if((val_encoderA[2] == LOW) && Lstate[2]==HIGH)
 8000784:	4b3c      	ldr	r3, [pc, #240]	; (8000878 <HAL_GPIO_EXTI_Callback+0x290>)
 8000786:	689b      	ldr	r3, [r3, #8]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d12b      	bne.n	80007e4 <HAL_GPIO_EXTI_Callback+0x1fc>
 800078c:	4b39      	ldr	r3, [pc, #228]	; (8000874 <HAL_GPIO_EXTI_Callback+0x28c>)
 800078e:	689b      	ldr	r3, [r3, #8]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d127      	bne.n	80007e4 <HAL_GPIO_EXTI_Callback+0x1fc>
			val_encoderB[2] = HAL_GPIO_ReadPin(encoders[5].port, encoders[5].pin_num);
 8000794:	4b36      	ldr	r3, [pc, #216]	; (8000870 <HAL_GPIO_EXTI_Callback+0x288>)
 8000796:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000798:	4b35      	ldr	r3, [pc, #212]	; (8000870 <HAL_GPIO_EXTI_Callback+0x288>)
 800079a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800079c:	4619      	mov	r1, r3
 800079e:	4610      	mov	r0, r2
 80007a0:	f002 f99a 	bl	8002ad8 <HAL_GPIO_ReadPin>
 80007a4:	4603      	mov	r3, r0
 80007a6:	461a      	mov	r2, r3
 80007a8:	4b34      	ldr	r3, [pc, #208]	; (800087c <HAL_GPIO_EXTI_Callback+0x294>)
 80007aa:	609a      	str	r2, [r3, #8]
		    if(val_encoderB[2] == LOW && direction[2])
 80007ac:	4b33      	ldr	r3, [pc, #204]	; (800087c <HAL_GPIO_EXTI_Callback+0x294>)
 80007ae:	689b      	ldr	r3, [r3, #8]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d108      	bne.n	80007c6 <HAL_GPIO_EXTI_Callback+0x1de>
 80007b4:	4b32      	ldr	r3, [pc, #200]	; (8000880 <HAL_GPIO_EXTI_Callback+0x298>)
 80007b6:	789b      	ldrb	r3, [r3, #2]
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d003      	beq.n	80007c6 <HAL_GPIO_EXTI_Callback+0x1de>
		      direction[2] = false; //Reverse
 80007be:	4b30      	ldr	r3, [pc, #192]	; (8000880 <HAL_GPIO_EXTI_Callback+0x298>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	709a      	strb	r2, [r3, #2]
 80007c4:	e00e      	b.n	80007e4 <HAL_GPIO_EXTI_Callback+0x1fc>
		    else if(val_encoderB[2] == HIGH && !direction[2])
 80007c6:	4b2d      	ldr	r3, [pc, #180]	; (800087c <HAL_GPIO_EXTI_Callback+0x294>)
 80007c8:	689b      	ldr	r3, [r3, #8]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d10a      	bne.n	80007e4 <HAL_GPIO_EXTI_Callback+0x1fc>
 80007ce:	4b2c      	ldr	r3, [pc, #176]	; (8000880 <HAL_GPIO_EXTI_Callback+0x298>)
 80007d0:	789b      	ldrb	r3, [r3, #2]
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	f083 0301 	eor.w	r3, r3, #1
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d002      	beq.n	80007e4 <HAL_GPIO_EXTI_Callback+0x1fc>
		    	direction[2] = true;  //Forward
 80007de:	4b28      	ldr	r3, [pc, #160]	; (8000880 <HAL_GPIO_EXTI_Callback+0x298>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	709a      	strb	r2, [r3, #2]
		  val_encoderA[2] = Lstate[2];
 80007e4:	4b23      	ldr	r3, [pc, #140]	; (8000874 <HAL_GPIO_EXTI_Callback+0x28c>)
 80007e6:	689b      	ldr	r3, [r3, #8]
 80007e8:	4a23      	ldr	r2, [pc, #140]	; (8000878 <HAL_GPIO_EXTI_Callback+0x290>)
 80007ea:	6093      	str	r3, [r2, #8]
		  if(!direction[2]){
 80007ec:	4b24      	ldr	r3, [pc, #144]	; (8000880 <HAL_GPIO_EXTI_Callback+0x298>)
 80007ee:	789b      	ldrb	r3, [r3, #2]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	f083 0301 	eor.w	r3, r3, #1
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d005      	beq.n	8000808 <HAL_GPIO_EXTI_Callback+0x220>
			  motor_steps[2]++;
 80007fc:	4b21      	ldr	r3, [pc, #132]	; (8000884 <HAL_GPIO_EXTI_Callback+0x29c>)
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	3301      	adds	r3, #1
 8000802:	4a20      	ldr	r2, [pc, #128]	; (8000884 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000804:	6093      	str	r3, [r2, #8]
		break;
 8000806:	e112      	b.n	8000a2e <HAL_GPIO_EXTI_Callback+0x446>
			  motor_steps[2]--;
 8000808:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <HAL_GPIO_EXTI_Callback+0x29c>)
 800080a:	689b      	ldr	r3, [r3, #8]
 800080c:	3b01      	subs	r3, #1
 800080e:	4a1d      	ldr	r2, [pc, #116]	; (8000884 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000810:	6093      	str	r3, [r2, #8]
		break;
 8000812:	e10c      	b.n	8000a2e <HAL_GPIO_EXTI_Callback+0x446>
		 Lstate[3] = HAL_GPIO_ReadPin(encoders[6].port, encoders[6].pin_num);
 8000814:	4b16      	ldr	r3, [pc, #88]	; (8000870 <HAL_GPIO_EXTI_Callback+0x288>)
 8000816:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000818:	4b15      	ldr	r3, [pc, #84]	; (8000870 <HAL_GPIO_EXTI_Callback+0x288>)
 800081a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800081c:	4619      	mov	r1, r3
 800081e:	4610      	mov	r0, r2
 8000820:	f002 f95a 	bl	8002ad8 <HAL_GPIO_ReadPin>
 8000824:	4603      	mov	r3, r0
 8000826:	461a      	mov	r2, r3
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <HAL_GPIO_EXTI_Callback+0x28c>)
 800082a:	60da      	str	r2, [r3, #12]
		  if((val_encoderA[3] == LOW) && Lstate[3]==HIGH)
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <HAL_GPIO_EXTI_Callback+0x290>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d138      	bne.n	80008a6 <HAL_GPIO_EXTI_Callback+0x2be>
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <HAL_GPIO_EXTI_Callback+0x28c>)
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d134      	bne.n	80008a6 <HAL_GPIO_EXTI_Callback+0x2be>
			val_encoderB[3] = HAL_GPIO_ReadPin(encoders[7].port, encoders[7].pin_num);
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <HAL_GPIO_EXTI_Callback+0x288>)
 800083e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000840:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <HAL_GPIO_EXTI_Callback+0x288>)
 8000842:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8000844:	4619      	mov	r1, r3
 8000846:	4610      	mov	r0, r2
 8000848:	f002 f946 	bl	8002ad8 <HAL_GPIO_ReadPin>
 800084c:	4603      	mov	r3, r0
 800084e:	461a      	mov	r2, r3
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <HAL_GPIO_EXTI_Callback+0x294>)
 8000852:	60da      	str	r2, [r3, #12]
		    if(val_encoderB[3] == LOW && direction[3])
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <HAL_GPIO_EXTI_Callback+0x294>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d115      	bne.n	8000888 <HAL_GPIO_EXTI_Callback+0x2a0>
 800085c:	4b08      	ldr	r3, [pc, #32]	; (8000880 <HAL_GPIO_EXTI_Callback+0x298>)
 800085e:	78db      	ldrb	r3, [r3, #3]
 8000860:	b2db      	uxtb	r3, r3
 8000862:	2b00      	cmp	r3, #0
 8000864:	d010      	beq.n	8000888 <HAL_GPIO_EXTI_Callback+0x2a0>
		      direction[3] = false; //Reverse
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_GPIO_EXTI_Callback+0x298>)
 8000868:	2200      	movs	r2, #0
 800086a:	70da      	strb	r2, [r3, #3]
 800086c:	e01b      	b.n	80008a6 <HAL_GPIO_EXTI_Callback+0x2be>
 800086e:	bf00      	nop
 8000870:	2400033c 	.word	0x2400033c
 8000874:	24000324 	.word	0x24000324
 8000878:	2400030c 	.word	0x2400030c
 800087c:	2400041c 	.word	0x2400041c
 8000880:	24000000 	.word	0x24000000
 8000884:	2400020c 	.word	0x2400020c
		    else if(val_encoderB[3] == HIGH && !direction[3])
 8000888:	4b6b      	ldr	r3, [pc, #428]	; (8000a38 <HAL_GPIO_EXTI_Callback+0x450>)
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d10a      	bne.n	80008a6 <HAL_GPIO_EXTI_Callback+0x2be>
 8000890:	4b6a      	ldr	r3, [pc, #424]	; (8000a3c <HAL_GPIO_EXTI_Callback+0x454>)
 8000892:	78db      	ldrb	r3, [r3, #3]
 8000894:	b2db      	uxtb	r3, r3
 8000896:	f083 0301 	eor.w	r3, r3, #1
 800089a:	b2db      	uxtb	r3, r3
 800089c:	2b00      	cmp	r3, #0
 800089e:	d002      	beq.n	80008a6 <HAL_GPIO_EXTI_Callback+0x2be>
		    	direction[3] = true;  //Forward
 80008a0:	4b66      	ldr	r3, [pc, #408]	; (8000a3c <HAL_GPIO_EXTI_Callback+0x454>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	70da      	strb	r2, [r3, #3]
		  val_encoderA[3] = Lstate[3];
 80008a6:	4b66      	ldr	r3, [pc, #408]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x458>)
 80008a8:	68db      	ldr	r3, [r3, #12]
 80008aa:	4a66      	ldr	r2, [pc, #408]	; (8000a44 <HAL_GPIO_EXTI_Callback+0x45c>)
 80008ac:	60d3      	str	r3, [r2, #12]
		  if(!direction[3]){
 80008ae:	4b63      	ldr	r3, [pc, #396]	; (8000a3c <HAL_GPIO_EXTI_Callback+0x454>)
 80008b0:	78db      	ldrb	r3, [r3, #3]
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	f083 0301 	eor.w	r3, r3, #1
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d005      	beq.n	80008ca <HAL_GPIO_EXTI_Callback+0x2e2>
			  motor_steps[3]++;
 80008be:	4b62      	ldr	r3, [pc, #392]	; (8000a48 <HAL_GPIO_EXTI_Callback+0x460>)
 80008c0:	68db      	ldr	r3, [r3, #12]
 80008c2:	3301      	adds	r3, #1
 80008c4:	4a60      	ldr	r2, [pc, #384]	; (8000a48 <HAL_GPIO_EXTI_Callback+0x460>)
 80008c6:	60d3      	str	r3, [r2, #12]
		break;
 80008c8:	e0b1      	b.n	8000a2e <HAL_GPIO_EXTI_Callback+0x446>
			  motor_steps[3]--;
 80008ca:	4b5f      	ldr	r3, [pc, #380]	; (8000a48 <HAL_GPIO_EXTI_Callback+0x460>)
 80008cc:	68db      	ldr	r3, [r3, #12]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	4a5d      	ldr	r2, [pc, #372]	; (8000a48 <HAL_GPIO_EXTI_Callback+0x460>)
 80008d2:	60d3      	str	r3, [r2, #12]
		break;
 80008d4:	e0ab      	b.n	8000a2e <HAL_GPIO_EXTI_Callback+0x446>
		 Lstate[4] = HAL_GPIO_ReadPin(encoders[8].port, encoders[9].pin_num);
 80008d6:	4b5d      	ldr	r3, [pc, #372]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x464>)
 80008d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008da:	4b5c      	ldr	r3, [pc, #368]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x464>)
 80008dc:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80008e0:	4619      	mov	r1, r3
 80008e2:	4610      	mov	r0, r2
 80008e4:	f002 f8f8 	bl	8002ad8 <HAL_GPIO_ReadPin>
 80008e8:	4603      	mov	r3, r0
 80008ea:	461a      	mov	r2, r3
 80008ec:	4b54      	ldr	r3, [pc, #336]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x458>)
 80008ee:	611a      	str	r2, [r3, #16]
		  if((val_encoderA[4] == LOW) && Lstate[4]==HIGH)
 80008f0:	4b54      	ldr	r3, [pc, #336]	; (8000a44 <HAL_GPIO_EXTI_Callback+0x45c>)
 80008f2:	691b      	ldr	r3, [r3, #16]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d12c      	bne.n	8000952 <HAL_GPIO_EXTI_Callback+0x36a>
 80008f8:	4b51      	ldr	r3, [pc, #324]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x458>)
 80008fa:	691b      	ldr	r3, [r3, #16]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d128      	bne.n	8000952 <HAL_GPIO_EXTI_Callback+0x36a>
			val_encoderB[4] = HAL_GPIO_ReadPin(encoders[9].port, encoders[9].pin_num);
 8000900:	4b52      	ldr	r3, [pc, #328]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x464>)
 8000902:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000904:	4b51      	ldr	r3, [pc, #324]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x464>)
 8000906:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800090a:	4619      	mov	r1, r3
 800090c:	4610      	mov	r0, r2
 800090e:	f002 f8e3 	bl	8002ad8 <HAL_GPIO_ReadPin>
 8000912:	4603      	mov	r3, r0
 8000914:	461a      	mov	r2, r3
 8000916:	4b48      	ldr	r3, [pc, #288]	; (8000a38 <HAL_GPIO_EXTI_Callback+0x450>)
 8000918:	611a      	str	r2, [r3, #16]
		    if(val_encoderB[4] == LOW && direction[4])
 800091a:	4b47      	ldr	r3, [pc, #284]	; (8000a38 <HAL_GPIO_EXTI_Callback+0x450>)
 800091c:	691b      	ldr	r3, [r3, #16]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d108      	bne.n	8000934 <HAL_GPIO_EXTI_Callback+0x34c>
 8000922:	4b46      	ldr	r3, [pc, #280]	; (8000a3c <HAL_GPIO_EXTI_Callback+0x454>)
 8000924:	791b      	ldrb	r3, [r3, #4]
 8000926:	b2db      	uxtb	r3, r3
 8000928:	2b00      	cmp	r3, #0
 800092a:	d003      	beq.n	8000934 <HAL_GPIO_EXTI_Callback+0x34c>
		      direction[4] = false; //Reverse
 800092c:	4b43      	ldr	r3, [pc, #268]	; (8000a3c <HAL_GPIO_EXTI_Callback+0x454>)
 800092e:	2200      	movs	r2, #0
 8000930:	711a      	strb	r2, [r3, #4]
 8000932:	e00e      	b.n	8000952 <HAL_GPIO_EXTI_Callback+0x36a>
		    else if(val_encoderB[4] == HIGH && !direction[4])
 8000934:	4b40      	ldr	r3, [pc, #256]	; (8000a38 <HAL_GPIO_EXTI_Callback+0x450>)
 8000936:	691b      	ldr	r3, [r3, #16]
 8000938:	2b01      	cmp	r3, #1
 800093a:	d10a      	bne.n	8000952 <HAL_GPIO_EXTI_Callback+0x36a>
 800093c:	4b3f      	ldr	r3, [pc, #252]	; (8000a3c <HAL_GPIO_EXTI_Callback+0x454>)
 800093e:	791b      	ldrb	r3, [r3, #4]
 8000940:	b2db      	uxtb	r3, r3
 8000942:	f083 0301 	eor.w	r3, r3, #1
 8000946:	b2db      	uxtb	r3, r3
 8000948:	2b00      	cmp	r3, #0
 800094a:	d002      	beq.n	8000952 <HAL_GPIO_EXTI_Callback+0x36a>
		    	direction[4] = true;  //Forward
 800094c:	4b3b      	ldr	r3, [pc, #236]	; (8000a3c <HAL_GPIO_EXTI_Callback+0x454>)
 800094e:	2201      	movs	r2, #1
 8000950:	711a      	strb	r2, [r3, #4]
		  val_encoderA[4] = Lstate[4];
 8000952:	4b3b      	ldr	r3, [pc, #236]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x458>)
 8000954:	691b      	ldr	r3, [r3, #16]
 8000956:	4a3b      	ldr	r2, [pc, #236]	; (8000a44 <HAL_GPIO_EXTI_Callback+0x45c>)
 8000958:	6113      	str	r3, [r2, #16]
		  if(!direction[4]){
 800095a:	4b38      	ldr	r3, [pc, #224]	; (8000a3c <HAL_GPIO_EXTI_Callback+0x454>)
 800095c:	791b      	ldrb	r3, [r3, #4]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	f083 0301 	eor.w	r3, r3, #1
 8000964:	b2db      	uxtb	r3, r3
 8000966:	2b00      	cmp	r3, #0
 8000968:	d005      	beq.n	8000976 <HAL_GPIO_EXTI_Callback+0x38e>
			  motor_steps[4]++;
 800096a:	4b37      	ldr	r3, [pc, #220]	; (8000a48 <HAL_GPIO_EXTI_Callback+0x460>)
 800096c:	691b      	ldr	r3, [r3, #16]
 800096e:	3301      	adds	r3, #1
 8000970:	4a35      	ldr	r2, [pc, #212]	; (8000a48 <HAL_GPIO_EXTI_Callback+0x460>)
 8000972:	6113      	str	r3, [r2, #16]
		break;
 8000974:	e05b      	b.n	8000a2e <HAL_GPIO_EXTI_Callback+0x446>
			  motor_steps[4]--;
 8000976:	4b34      	ldr	r3, [pc, #208]	; (8000a48 <HAL_GPIO_EXTI_Callback+0x460>)
 8000978:	691b      	ldr	r3, [r3, #16]
 800097a:	3b01      	subs	r3, #1
 800097c:	4a32      	ldr	r2, [pc, #200]	; (8000a48 <HAL_GPIO_EXTI_Callback+0x460>)
 800097e:	6113      	str	r3, [r2, #16]
		break;
 8000980:	e055      	b.n	8000a2e <HAL_GPIO_EXTI_Callback+0x446>
		 Lstate[5] = HAL_GPIO_ReadPin(encoders[10].port, encoders[10].pin_num);
 8000982:	4b32      	ldr	r3, [pc, #200]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x464>)
 8000984:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000986:	4b31      	ldr	r3, [pc, #196]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x464>)
 8000988:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800098c:	4619      	mov	r1, r3
 800098e:	4610      	mov	r0, r2
 8000990:	f002 f8a2 	bl	8002ad8 <HAL_GPIO_ReadPin>
 8000994:	4603      	mov	r3, r0
 8000996:	461a      	mov	r2, r3
 8000998:	4b29      	ldr	r3, [pc, #164]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x458>)
 800099a:	615a      	str	r2, [r3, #20]
		  if((val_encoderA[5] == LOW) && Lstate[5]==HIGH)
 800099c:	4b29      	ldr	r3, [pc, #164]	; (8000a44 <HAL_GPIO_EXTI_Callback+0x45c>)
 800099e:	695b      	ldr	r3, [r3, #20]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d12c      	bne.n	80009fe <HAL_GPIO_EXTI_Callback+0x416>
 80009a4:	4b26      	ldr	r3, [pc, #152]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x458>)
 80009a6:	695b      	ldr	r3, [r3, #20]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d128      	bne.n	80009fe <HAL_GPIO_EXTI_Callback+0x416>
			val_encoderB[5] = HAL_GPIO_ReadPin(encoders[11].port, encoders[11].pin_num);
 80009ac:	4b27      	ldr	r3, [pc, #156]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x464>)
 80009ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80009b0:	4b26      	ldr	r3, [pc, #152]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x464>)
 80009b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80009b6:	4619      	mov	r1, r3
 80009b8:	4610      	mov	r0, r2
 80009ba:	f002 f88d 	bl	8002ad8 <HAL_GPIO_ReadPin>
 80009be:	4603      	mov	r3, r0
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <HAL_GPIO_EXTI_Callback+0x450>)
 80009c4:	615a      	str	r2, [r3, #20]
		    if(val_encoderB[5] == LOW && direction[5])
 80009c6:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <HAL_GPIO_EXTI_Callback+0x450>)
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d108      	bne.n	80009e0 <HAL_GPIO_EXTI_Callback+0x3f8>
 80009ce:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <HAL_GPIO_EXTI_Callback+0x454>)
 80009d0:	795b      	ldrb	r3, [r3, #5]
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d003      	beq.n	80009e0 <HAL_GPIO_EXTI_Callback+0x3f8>
		      direction[5] = false; //Reverse
 80009d8:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <HAL_GPIO_EXTI_Callback+0x454>)
 80009da:	2200      	movs	r2, #0
 80009dc:	715a      	strb	r2, [r3, #5]
 80009de:	e00e      	b.n	80009fe <HAL_GPIO_EXTI_Callback+0x416>
		    else if(val_encoderB[5] == HIGH && !direction[5])
 80009e0:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <HAL_GPIO_EXTI_Callback+0x450>)
 80009e2:	695b      	ldr	r3, [r3, #20]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d10a      	bne.n	80009fe <HAL_GPIO_EXTI_Callback+0x416>
 80009e8:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <HAL_GPIO_EXTI_Callback+0x454>)
 80009ea:	795b      	ldrb	r3, [r3, #5]
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	f083 0301 	eor.w	r3, r3, #1
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d002      	beq.n	80009fe <HAL_GPIO_EXTI_Callback+0x416>
		    	direction[5] = true;  //Forward
 80009f8:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <HAL_GPIO_EXTI_Callback+0x454>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	715a      	strb	r2, [r3, #5]
		  val_encoderA[5] = Lstate[5];
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x458>)
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	4a10      	ldr	r2, [pc, #64]	; (8000a44 <HAL_GPIO_EXTI_Callback+0x45c>)
 8000a04:	6153      	str	r3, [r2, #20]
		  if(!direction[5]){
 8000a06:	4b0d      	ldr	r3, [pc, #52]	; (8000a3c <HAL_GPIO_EXTI_Callback+0x454>)
 8000a08:	795b      	ldrb	r3, [r3, #5]
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	f083 0301 	eor.w	r3, r3, #1
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d005      	beq.n	8000a22 <HAL_GPIO_EXTI_Callback+0x43a>
			  motor_steps[5]++;
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <HAL_GPIO_EXTI_Callback+0x460>)
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	4a0a      	ldr	r2, [pc, #40]	; (8000a48 <HAL_GPIO_EXTI_Callback+0x460>)
 8000a1e:	6153      	str	r3, [r2, #20]
		break;
 8000a20:	e004      	b.n	8000a2c <HAL_GPIO_EXTI_Callback+0x444>
			  motor_steps[5]--;
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <HAL_GPIO_EXTI_Callback+0x460>)
 8000a24:	695b      	ldr	r3, [r3, #20]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	4a07      	ldr	r2, [pc, #28]	; (8000a48 <HAL_GPIO_EXTI_Callback+0x460>)
 8000a2a:	6153      	str	r3, [r2, #20]
		break;
 8000a2c:	bf00      	nop
	}
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	2400041c 	.word	0x2400041c
 8000a3c:	24000000 	.word	0x24000000
 8000a40:	24000324 	.word	0x24000324
 8000a44:	2400030c 	.word	0x2400030c
 8000a48:	2400020c 	.word	0x2400020c
 8000a4c:	2400033c 	.word	0x2400033c

08000a50 <PWM3_change_duty_cycle>:

void PWM3_change_duty_cycle (int valuePA6, int valuePB1, int valuePA7){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08c      	sub	sp, #48	; 0x30
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
 8000a6c:	615a      	str	r2, [r3, #20]
 8000a6e:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a70:	2360      	movs	r3, #96	; 0x60
 8000a72:	617b      	str	r3, [r7, #20]
	  sConfigOC.Pulse = valuePA6;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	61bb      	str	r3, [r7, #24]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	2200      	movs	r2, #0
 8000a86:	4619      	mov	r1, r3
 8000a88:	4819      	ldr	r0, [pc, #100]	; (8000af0 <PWM3_change_duty_cycle+0xa0>)
 8000a8a:	f005 fedb 	bl	8006844 <HAL_TIM_PWM_ConfigChannel>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <PWM3_change_duty_cycle+0x48>
	  {
	    Error_Handler();
 8000a94:	f000 ff0c 	bl	80018b0 <Error_Handler>
	  /*sConfigOC.Pulse = valuePB0;
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
	  {
	    Error_Handler();
	  }*/
	  sConfigOC.Pulse = valuePB1;
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	220c      	movs	r2, #12
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4812      	ldr	r0, [pc, #72]	; (8000af0 <PWM3_change_duty_cycle+0xa0>)
 8000aa6:	f005 fecd 	bl	8006844 <HAL_TIM_PWM_ConfigChannel>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <PWM3_change_duty_cycle+0x64>
	  {
	    Error_Handler();
 8000ab0:	f000 fefe 	bl	80018b0 <Error_Handler>
	  }
	  sConfigOC.Pulse = valuePA7;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	2204      	movs	r2, #4
 8000abe:	4619      	mov	r1, r3
 8000ac0:	480b      	ldr	r0, [pc, #44]	; (8000af0 <PWM3_change_duty_cycle+0xa0>)
 8000ac2:	f005 febf 	bl	8006844 <HAL_TIM_PWM_ConfigChannel>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <PWM3_change_duty_cycle+0x80>
	  	  {
	  	    Error_Handler();
 8000acc:	f000 fef0 	bl	80018b0 <Error_Handler>
	  	  }
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4807      	ldr	r0, [pc, #28]	; (8000af0 <PWM3_change_duty_cycle+0xa0>)
 8000ad4:	f005 fd3e 	bl	8006554 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000ad8:	2104      	movs	r1, #4
 8000ada:	4805      	ldr	r0, [pc, #20]	; (8000af0 <PWM3_change_duty_cycle+0xa0>)
 8000adc:	f005 fd3a 	bl	8006554 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000ae0:	210c      	movs	r1, #12
 8000ae2:	4803      	ldr	r0, [pc, #12]	; (8000af0 <PWM3_change_duty_cycle+0xa0>)
 8000ae4:	f005 fd36 	bl	8006554 <HAL_TIM_PWM_Start>
}
 8000ae8:	bf00      	nop
 8000aea:	3730      	adds	r7, #48	; 0x30
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	240003dc 	.word	0x240003dc
 8000af4:	00000000 	.word	0x00000000

08000af8 <HAL_TIM_PeriodElapsedCallback>:
  //HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);
  CDC_Transmit_FS((uint8_t *)&ch, 1);
  return ch;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	int j;
	if (htim == &htim7){
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a49      	ldr	r2, [pc, #292]	; (8000c28 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d172      	bne.n	8000bee <HAL_TIM_PeriodElapsedCallback+0xf6>
		for (j = 0; j < NUM_JOINTS; j++){
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	e069      	b.n	8000be2 <HAL_TIM_PeriodElapsedCallback+0xea>
			if (j <3){
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	dc1e      	bgt.n	8000b52 <HAL_TIM_PeriodElapsedCallback+0x5a>
				joint_speed[j] = (double)delta_pos[j] *2.0*3.1415926/REV_COUNT_1/0.01*2.0;
 8000b14:	4a45      	ldr	r2, [pc, #276]	; (8000c2c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b1c:	ee07 3a90 	vmov	s15, r3
 8000b20:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b24:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000b28:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8000c00 <HAL_TIM_PeriodElapsedCallback+0x108>
 8000b2c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b30:	ed9f 5b35 	vldr	d5, [pc, #212]	; 8000c08 <HAL_TIM_PeriodElapsedCallback+0x110>
 8000b34:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000b38:	ed9f 5b35 	vldr	d5, [pc, #212]	; 8000c10 <HAL_TIM_PeriodElapsedCallback+0x118>
 8000b3c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b40:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000b44:	4a3a      	ldr	r2, [pc, #232]	; (8000c30 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	00db      	lsls	r3, r3, #3
 8000b4a:	4413      	add	r3, r2
 8000b4c:	ed83 7b00 	vstr	d7, [r3]
 8000b50:	e03f      	b.n	8000bd2 <HAL_TIM_PeriodElapsedCallback+0xda>
			}
			else if (j < 5){
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	2b04      	cmp	r3, #4
 8000b56:	dc1e      	bgt.n	8000b96 <HAL_TIM_PeriodElapsedCallback+0x9e>
				joint_speed[j] = (double)delta_pos[j] *2.0*3.1415926/REV_COUNT_2/0.01*2.0;
 8000b58:	4a34      	ldr	r2, [pc, #208]	; (8000c2c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b60:	ee07 3a90 	vmov	s15, r3
 8000b64:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b68:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000b6c:	ed9f 6b24 	vldr	d6, [pc, #144]	; 8000c00 <HAL_TIM_PeriodElapsedCallback+0x108>
 8000b70:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b74:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8000c18 <HAL_TIM_PeriodElapsedCallback+0x120>
 8000b78:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000b7c:	ed9f 5b24 	vldr	d5, [pc, #144]	; 8000c10 <HAL_TIM_PeriodElapsedCallback+0x118>
 8000b80:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b84:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000b88:	4a29      	ldr	r2, [pc, #164]	; (8000c30 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	00db      	lsls	r3, r3, #3
 8000b8e:	4413      	add	r3, r2
 8000b90:	ed83 7b00 	vstr	d7, [r3]
 8000b94:	e01d      	b.n	8000bd2 <HAL_TIM_PeriodElapsedCallback+0xda>
			}
			else{
				joint_speed[j] = (double)delta_pos[j] *2.0*3.1415926/REV_COUNT_3/0.01*2.0;
 8000b96:	4a25      	ldr	r2, [pc, #148]	; (8000c2c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b9e:	ee07 3a90 	vmov	s15, r3
 8000ba2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ba6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000baa:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8000c00 <HAL_TIM_PeriodElapsedCallback+0x108>
 8000bae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000bb2:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 8000c20 <HAL_TIM_PeriodElapsedCallback+0x128>
 8000bb6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000bba:	ed9f 5b15 	vldr	d5, [pc, #84]	; 8000c10 <HAL_TIM_PeriodElapsedCallback+0x118>
 8000bbe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000bc2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000bc6:	4a1a      	ldr	r2, [pc, #104]	; (8000c30 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	00db      	lsls	r3, r3, #3
 8000bcc:	4413      	add	r3, r2
 8000bce:	ed83 7b00 	vstr	d7, [r3]
			}
			delta_pos[j] = 0;
 8000bd2:	4a16      	ldr	r2, [pc, #88]	; (8000c2c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (j = 0; j < NUM_JOINTS; j++){
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	3301      	adds	r3, #1
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	2b05      	cmp	r3, #5
 8000be6:	dd92      	ble.n	8000b0e <HAL_TIM_PeriodElapsedCallback+0x16>
		}

		need_control = true;
 8000be8:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	701a      	strb	r2, [r3, #0]
	}
}
 8000bee:	bf00      	nop
 8000bf0:	3714      	adds	r7, #20
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	f3af 8000 	nop.w
 8000c00:	4d12d84a 	.word	0x4d12d84a
 8000c04:	400921fb 	.word	0x400921fb
 8000c08:	00000000 	.word	0x00000000
 8000c0c:	40d0e000 	.word	0x40d0e000
 8000c10:	47ae147b 	.word	0x47ae147b
 8000c14:	3f847ae1 	.word	0x3f847ae1
 8000c18:	00000000 	.word	0x00000000
 8000c1c:	40b67c00 	.word	0x40b67c00
 8000c20:	00000000 	.word	0x00000000
 8000c24:	405cc000 	.word	0x405cc000
 8000c28:	24000540 	.word	0x24000540
 8000c2c:	24000258 	.word	0x24000258
 8000c30:	24000228 	.word	0x24000228
 8000c34:	24000006 	.word	0x24000006

08000c38 <Joint_controller>:

void Joint_controller(bool homing){
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]

}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
	...

08000c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b098      	sub	sp, #96	; 0x60
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char* msg = "Hello Nucleo Fun!\n\r";
 8000c56:	4b75      	ldr	r3, [pc, #468]	; (8000e2c <main+0x1dc>)
 8000c58:	65bb      	str	r3, [r7, #88]	; 0x58
	char* EOL = "]\n\r";
 8000c5a:	4b75      	ldr	r3, [pc, #468]	; (8000e30 <main+0x1e0>)
 8000c5c:	657b      	str	r3, [r7, #84]	; 0x54
	char* EOJ = ", ";
 8000c5e:	4b75      	ldr	r3, [pc, #468]	; (8000e34 <main+0x1e4>)
 8000c60:	653b      	str	r3, [r7, #80]	; 0x50
	char* timer_tester = "timed";
 8000c62:	4b75      	ldr	r3, [pc, #468]	; (8000e38 <main+0x1e8>)
 8000c64:	64fb      	str	r3, [r7, #76]	; 0x4c
	char one_motor[10];
	char print_string[60];
	int i;
	//pins: 0,1,2,3,4,7 - PA0(PC10)y, PA1(PD5)y, PB2(PC7)y, PE3(PE4)y, PD4(PD3)y, PD7(PE2)y
	// HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
	encoders[0].port = GPIOA; encoders[0].pin_num = GPIO_PIN_0;
 8000c66:	4b75      	ldr	r3, [pc, #468]	; (8000e3c <main+0x1ec>)
 8000c68:	4a75      	ldr	r2, [pc, #468]	; (8000e40 <main+0x1f0>)
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	4b73      	ldr	r3, [pc, #460]	; (8000e3c <main+0x1ec>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	809a      	strh	r2, [r3, #4]
	encoders[1].port = GPIOC; encoders[1].pin_num = GPIO_PIN_10;
 8000c72:	4b72      	ldr	r3, [pc, #456]	; (8000e3c <main+0x1ec>)
 8000c74:	4a73      	ldr	r2, [pc, #460]	; (8000e44 <main+0x1f4>)
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	4b70      	ldr	r3, [pc, #448]	; (8000e3c <main+0x1ec>)
 8000c7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c7e:	819a      	strh	r2, [r3, #12]
	encoders[2].port = GPIOA; encoders[2].pin_num = GPIO_PIN_1;
 8000c80:	4b6e      	ldr	r3, [pc, #440]	; (8000e3c <main+0x1ec>)
 8000c82:	4a6f      	ldr	r2, [pc, #444]	; (8000e40 <main+0x1f0>)
 8000c84:	611a      	str	r2, [r3, #16]
 8000c86:	4b6d      	ldr	r3, [pc, #436]	; (8000e3c <main+0x1ec>)
 8000c88:	2202      	movs	r2, #2
 8000c8a:	829a      	strh	r2, [r3, #20]
	encoders[3].port = GPIOD; encoders[3].pin_num = GPIO_PIN_5;
 8000c8c:	4b6b      	ldr	r3, [pc, #428]	; (8000e3c <main+0x1ec>)
 8000c8e:	4a6e      	ldr	r2, [pc, #440]	; (8000e48 <main+0x1f8>)
 8000c90:	619a      	str	r2, [r3, #24]
 8000c92:	4b6a      	ldr	r3, [pc, #424]	; (8000e3c <main+0x1ec>)
 8000c94:	2220      	movs	r2, #32
 8000c96:	839a      	strh	r2, [r3, #28]
	encoders[4].port = GPIOB; encoders[4].pin_num = GPIO_PIN_2;
 8000c98:	4b68      	ldr	r3, [pc, #416]	; (8000e3c <main+0x1ec>)
 8000c9a:	4a6c      	ldr	r2, [pc, #432]	; (8000e4c <main+0x1fc>)
 8000c9c:	621a      	str	r2, [r3, #32]
 8000c9e:	4b67      	ldr	r3, [pc, #412]	; (8000e3c <main+0x1ec>)
 8000ca0:	2204      	movs	r2, #4
 8000ca2:	849a      	strh	r2, [r3, #36]	; 0x24
	encoders[5].port = GPIOC; encoders[5].pin_num = GPIO_PIN_7;
 8000ca4:	4b65      	ldr	r3, [pc, #404]	; (8000e3c <main+0x1ec>)
 8000ca6:	4a67      	ldr	r2, [pc, #412]	; (8000e44 <main+0x1f4>)
 8000ca8:	629a      	str	r2, [r3, #40]	; 0x28
 8000caa:	4b64      	ldr	r3, [pc, #400]	; (8000e3c <main+0x1ec>)
 8000cac:	2280      	movs	r2, #128	; 0x80
 8000cae:	859a      	strh	r2, [r3, #44]	; 0x2c
	encoders[6].port = GPIOE; encoders[6].pin_num = GPIO_PIN_3;
 8000cb0:	4b62      	ldr	r3, [pc, #392]	; (8000e3c <main+0x1ec>)
 8000cb2:	4a67      	ldr	r2, [pc, #412]	; (8000e50 <main+0x200>)
 8000cb4:	631a      	str	r2, [r3, #48]	; 0x30
 8000cb6:	4b61      	ldr	r3, [pc, #388]	; (8000e3c <main+0x1ec>)
 8000cb8:	2208      	movs	r2, #8
 8000cba:	869a      	strh	r2, [r3, #52]	; 0x34
	encoders[7].port = GPIOE; encoders[7].pin_num = GPIO_PIN_4;
 8000cbc:	4b5f      	ldr	r3, [pc, #380]	; (8000e3c <main+0x1ec>)
 8000cbe:	4a64      	ldr	r2, [pc, #400]	; (8000e50 <main+0x200>)
 8000cc0:	639a      	str	r2, [r3, #56]	; 0x38
 8000cc2:	4b5e      	ldr	r3, [pc, #376]	; (8000e3c <main+0x1ec>)
 8000cc4:	2210      	movs	r2, #16
 8000cc6:	879a      	strh	r2, [r3, #60]	; 0x3c
	encoders[8].port = GPIOD; encoders[8].pin_num = GPIO_PIN_4;
 8000cc8:	4b5c      	ldr	r3, [pc, #368]	; (8000e3c <main+0x1ec>)
 8000cca:	4a5f      	ldr	r2, [pc, #380]	; (8000e48 <main+0x1f8>)
 8000ccc:	641a      	str	r2, [r3, #64]	; 0x40
 8000cce:	4b5b      	ldr	r3, [pc, #364]	; (8000e3c <main+0x1ec>)
 8000cd0:	2210      	movs	r2, #16
 8000cd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	encoders[9].port = GPIOD; encoders[9].pin_num = GPIO_PIN_3;
 8000cd6:	4b59      	ldr	r3, [pc, #356]	; (8000e3c <main+0x1ec>)
 8000cd8:	4a5b      	ldr	r2, [pc, #364]	; (8000e48 <main+0x1f8>)
 8000cda:	649a      	str	r2, [r3, #72]	; 0x48
 8000cdc:	4b57      	ldr	r3, [pc, #348]	; (8000e3c <main+0x1ec>)
 8000cde:	2208      	movs	r2, #8
 8000ce0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	encoders[10].port = GPIOD; encoders[10].pin_num = GPIO_PIN_7;
 8000ce4:	4b55      	ldr	r3, [pc, #340]	; (8000e3c <main+0x1ec>)
 8000ce6:	4a58      	ldr	r2, [pc, #352]	; (8000e48 <main+0x1f8>)
 8000ce8:	651a      	str	r2, [r3, #80]	; 0x50
 8000cea:	4b54      	ldr	r3, [pc, #336]	; (8000e3c <main+0x1ec>)
 8000cec:	2280      	movs	r2, #128	; 0x80
 8000cee:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    encoders[11].port = GPIOE; encoders[11].pin_num = GPIO_PIN_2;
 8000cf2:	4b52      	ldr	r3, [pc, #328]	; (8000e3c <main+0x1ec>)
 8000cf4:	4a56      	ldr	r2, [pc, #344]	; (8000e50 <main+0x200>)
 8000cf6:	659a      	str	r2, [r3, #88]	; 0x58
 8000cf8:	4b50      	ldr	r3, [pc, #320]	; (8000e3c <main+0x1ec>)
 8000cfa:	2204      	movs	r2, #4
 8000cfc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    for(i = 0; i < NUM_JOINTS; i++){
 8000d00:	2300      	movs	r3, #0
 8000d02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000d04:	e011      	b.n	8000d2a <main+0xda>
    	val_encoderA [i] = HIGH;
 8000d06:	4a53      	ldr	r2, [pc, #332]	; (8000e54 <main+0x204>)
 8000d08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	val_encoderB [i] = HIGH;
 8000d10:	4a51      	ldr	r2, [pc, #324]	; (8000e58 <main+0x208>)
 8000d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d14:	2101      	movs	r1, #1
 8000d16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	direction [i] = true;
 8000d1a:	4a50      	ldr	r2, [pc, #320]	; (8000e5c <main+0x20c>)
 8000d1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d1e:	4413      	add	r3, r2
 8000d20:	2201      	movs	r2, #1
 8000d22:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < NUM_JOINTS; i++){
 8000d24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d26:	3301      	adds	r3, #1
 8000d28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000d2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d2c:	2b05      	cmp	r3, #5
 8000d2e:	ddea      	ble.n	8000d06 <main+0xb6>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d30:	f001 f90e 	bl	8001f50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d34:	f000 f89a 	bl	8000e6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d38:	f000 fbf2 	bl	8001520 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000d3c:	f000 fba4 	bl	8001488 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000d40:	f000 f952 	bl	8000fe8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d44:	f000 f9ec 	bl	8001120 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d48:	f000 fa44 	bl	80011d4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000d4c:	f000 fab4 	bl	80012b8 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8000d50:	f000 fb4e 	bl	80013f0 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000d54:	f00c f82e 	bl	800cdb4 <MX_USB_DEVICE_Init>
  MX_TIM7_Init();
 8000d58:	f000 fb0a 	bl	8001370 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  PWM3_change_duty_cycle(1024, 500, 100);
 8000d5c:	2264      	movs	r2, #100	; 0x64
 8000d5e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d62:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000d66:	f7ff fe73 	bl	8000a50 <PWM3_change_duty_cycle>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //printf(msg);
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 8000d6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d6e:	4835      	ldr	r0, [pc, #212]	; (8000e44 <main+0x1f4>)
 8000d70:	f001 feb2 	bl	8002ad8 <HAL_GPIO_ReadPin>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d04c      	beq.n	8000e14 <main+0x1c4>
		  itoa(motor_steps[0], one_motor, 10);
 8000d7a:	4b39      	ldr	r3, [pc, #228]	; (8000e60 <main+0x210>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000d82:	220a      	movs	r2, #10
 8000d84:	4618      	mov	r0, r3
 8000d86:	f00c fd85 	bl	800d894 <itoa>
		  strcpy(print_string, one_motor);
 8000d8a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	4611      	mov	r1, r2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f00c fe5f 	bl	800da56 <strcpy>
		  for (i = 1; i < NUM_JOINTS; i++){
 8000d98:	2301      	movs	r3, #1
 8000d9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000d9c:	e018      	b.n	8000dd0 <main+0x180>
			  itoa(motor_steps[i], one_motor, 10);
 8000d9e:	4a30      	ldr	r2, [pc, #192]	; (8000e60 <main+0x210>)
 8000da0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000daa:	220a      	movs	r2, #10
 8000dac:	4618      	mov	r0, r3
 8000dae:	f00c fd71 	bl	800d894 <itoa>
			  strcat(print_string, EOJ);
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000db6:	4618      	mov	r0, r3
 8000db8:	f00c fe3e 	bl	800da38 <strcat>
			  strcat(print_string, one_motor);
 8000dbc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f00c fe37 	bl	800da38 <strcat>
		  for (i = 1; i < NUM_JOINTS; i++){
 8000dca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dcc:	3301      	adds	r3, #1
 8000dce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000dd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dd2:	2b05      	cmp	r3, #5
 8000dd4:	dde3      	ble.n	8000d9e <main+0x14e>
		  }
		  strcat(print_string, EOL);
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f00c fe2c 	bl	800da38 <strcat>
		  CDC_Transmit_FS((uint8_t*)"motor is at [", strlen(msg));
 8000de0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8000de2:	f7ff fa79 	bl	80002d8 <strlen>
 8000de6:	4603      	mov	r3, r0
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	4619      	mov	r1, r3
 8000dec:	481d      	ldr	r0, [pc, #116]	; (8000e64 <main+0x214>)
 8000dee:	f00c f8d9 	bl	800cfa4 <CDC_Transmit_FS>
		  HAL_Delay(2);
 8000df2:	2002      	movs	r0, #2
 8000df4:	f001 f93e 	bl	8002074 <HAL_Delay>
		  CDC_Transmit_FS((uint8_t*)print_string, strlen(print_string));
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fa6c 	bl	80002d8 <strlen>
 8000e00:	4603      	mov	r3, r0
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	4611      	mov	r1, r2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f00c f8cb 	bl	800cfa4 <CDC_Transmit_FS>
		  HAL_Delay(2);
 8000e0e:	2002      	movs	r0, #2
 8000e10:	f001 f930 	bl	8002074 <HAL_Delay>
	  }
	  if (need_control){
 8000e14:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <main+0x218>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d0a5      	beq.n	8000d6a <main+0x11a>
		  Joint_controller(false);
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f7ff ff0a 	bl	8000c38 <Joint_controller>
		  need_control = false;
 8000e24:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <main+0x218>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 8000e2a:	e79e      	b.n	8000d6a <main+0x11a>
 8000e2c:	0800db00 	.word	0x0800db00
 8000e30:	0800db14 	.word	0x0800db14
 8000e34:	0800db18 	.word	0x0800db18
 8000e38:	0800db1c 	.word	0x0800db1c
 8000e3c:	2400033c 	.word	0x2400033c
 8000e40:	58020000 	.word	0x58020000
 8000e44:	58020800 	.word	0x58020800
 8000e48:	58020c00 	.word	0x58020c00
 8000e4c:	58020400 	.word	0x58020400
 8000e50:	58021000 	.word	0x58021000
 8000e54:	2400030c 	.word	0x2400030c
 8000e58:	2400041c 	.word	0x2400041c
 8000e5c:	24000000 	.word	0x24000000
 8000e60:	2400020c 	.word	0x2400020c
 8000e64:	0800db24 	.word	0x0800db24
 8000e68:	24000006 	.word	0x24000006

08000e6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b0cc      	sub	sp, #304	; 0x130
 8000e70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e72:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e76:	224c      	movs	r2, #76	; 0x4c
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f00c fd1c 	bl	800d8b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e80:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e84:	2220      	movs	r2, #32
 8000e86:	2100      	movs	r1, #0
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f00c fd15 	bl	800d8b8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e8e:	f107 0308 	add.w	r3, r7, #8
 8000e92:	4618      	mov	r0, r3
 8000e94:	23bc      	movs	r3, #188	; 0xbc
 8000e96:	461a      	mov	r2, r3
 8000e98:	2100      	movs	r1, #0
 8000e9a:	f00c fd0d 	bl	800d8b8 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e9e:	2002      	movs	r0, #2
 8000ea0:	f003 f840 	bl	8003f24 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ea4:	1d3b      	adds	r3, r7, #4
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	4b4c      	ldr	r3, [pc, #304]	; (8000fdc <SystemClock_Config+0x170>)
 8000eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eae:	4a4b      	ldr	r2, [pc, #300]	; (8000fdc <SystemClock_Config+0x170>)
 8000eb0:	f023 0301 	bic.w	r3, r3, #1
 8000eb4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000eb6:	4b49      	ldr	r3, [pc, #292]	; (8000fdc <SystemClock_Config+0x170>)
 8000eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eba:	f003 0201 	and.w	r2, r3, #1
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	4b47      	ldr	r3, [pc, #284]	; (8000fe0 <SystemClock_Config+0x174>)
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	4a46      	ldr	r2, [pc, #280]	; (8000fe0 <SystemClock_Config+0x174>)
 8000ec8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ecc:	6193      	str	r3, [r2, #24]
 8000ece:	4b44      	ldr	r3, [pc, #272]	; (8000fe0 <SystemClock_Config+0x174>)
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ede:	bf00      	nop
 8000ee0:	4b3f      	ldr	r3, [pc, #252]	; (8000fe0 <SystemClock_Config+0x174>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ee8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000eec:	d1f8      	bne.n	8000ee0 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ef4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ef8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000efc:	2302      	movs	r3, #2
 8000efe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f02:	2302      	movs	r3, #2
 8000f04:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 54;
 8000f0e:	2336      	movs	r3, #54	; 0x36
 8000f10:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f14:	2302      	movs	r3, #2
 8000f16:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000f1a:	2309      	movs	r3, #9
 8000f1c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f20:	2302      	movs	r3, #2
 8000f22:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f26:	230c      	movs	r3, #12
 8000f28:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f38:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f003 f83b 	bl	8003fb8 <HAL_RCC_OscConfig>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000f48:	f000 fcb2 	bl	80018b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f4c:	233f      	movs	r3, #63	; 0x3f
 8000f4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f52:	2303      	movs	r3, #3
 8000f54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f64:	2340      	movs	r3, #64	; 0x40
 8000f66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f6a:	2340      	movs	r3, #64	; 0x40
 8000f6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f78:	2340      	movs	r3, #64	; 0x40
 8000f7a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f7e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f82:	2103      	movs	r1, #3
 8000f84:	4618      	mov	r0, r3
 8000f86:	f003 fbef 	bl	8004768 <HAL_RCC_ClockConfig>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <SystemClock_Config+0x128>
  {
    Error_Handler();
 8000f90:	f000 fc8e 	bl	80018b0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART1
 8000f94:	f107 0308 	add.w	r3, r7, #8
 8000f98:	4a12      	ldr	r2, [pc, #72]	; (8000fe4 <SystemClock_Config+0x178>)
 8000f9a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f9c:	f107 0308 	add.w	r3, r7, #8
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000fa4:	f107 0308 	add.w	r3, r7, #8
 8000fa8:	2200      	movs	r2, #0
 8000faa:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000fac:	f107 0308 	add.w	r3, r7, #8
 8000fb0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000fb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fb8:	f107 0308 	add.w	r3, r7, #8
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f003 ff57 	bl	8004e70 <HAL_RCCEx_PeriphCLKConfig>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <SystemClock_Config+0x160>
  {
    Error_Handler();
 8000fc8:	f000 fc72 	bl	80018b0 <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000fcc:	f002 ffe4 	bl	8003f98 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000fd0:	bf00      	nop
 8000fd2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	58000400 	.word	0x58000400
 8000fe0:	58024800 	.word	0x58024800
 8000fe4:	00040003 	.word	0x00040003

08000fe8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b096      	sub	sp, #88	; 0x58
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ffa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	611a      	str	r2, [r3, #16]
 800100a:	615a      	str	r2, [r3, #20]
 800100c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	222c      	movs	r2, #44	; 0x2c
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f00c fc4f 	bl	800d8b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800101a:	4b3f      	ldr	r3, [pc, #252]	; (8001118 <MX_TIM1_Init+0x130>)
 800101c:	4a3f      	ldr	r2, [pc, #252]	; (800111c <MX_TIM1_Init+0x134>)
 800101e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1080-1;
 8001020:	4b3d      	ldr	r3, [pc, #244]	; (8001118 <MX_TIM1_Init+0x130>)
 8001022:	f240 4237 	movw	r2, #1079	; 0x437
 8001026:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001028:	4b3b      	ldr	r3, [pc, #236]	; (8001118 <MX_TIM1_Init+0x130>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024-1;
 800102e:	4b3a      	ldr	r3, [pc, #232]	; (8001118 <MX_TIM1_Init+0x130>)
 8001030:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001034:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001036:	4b38      	ldr	r3, [pc, #224]	; (8001118 <MX_TIM1_Init+0x130>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800103c:	4b36      	ldr	r3, [pc, #216]	; (8001118 <MX_TIM1_Init+0x130>)
 800103e:	2200      	movs	r2, #0
 8001040:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001042:	4b35      	ldr	r3, [pc, #212]	; (8001118 <MX_TIM1_Init+0x130>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001048:	4833      	ldr	r0, [pc, #204]	; (8001118 <MX_TIM1_Init+0x130>)
 800104a:	f005 fa57 	bl	80064fc <HAL_TIM_PWM_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8001054:	f000 fc2c 	bl	80018b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001058:	2300      	movs	r3, #0
 800105a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800105c:	2300      	movs	r3, #0
 800105e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001060:	2300      	movs	r3, #0
 8001062:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001064:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001068:	4619      	mov	r1, r3
 800106a:	482b      	ldr	r0, [pc, #172]	; (8001118 <MX_TIM1_Init+0x130>)
 800106c:	f006 f8b8 	bl	80071e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001076:	f000 fc1b 	bl	80018b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800107a:	2360      	movs	r3, #96	; 0x60
 800107c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001082:	2300      	movs	r3, #0
 8001084:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001086:	2300      	movs	r3, #0
 8001088:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800108a:	2300      	movs	r3, #0
 800108c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800108e:	2300      	movs	r3, #0
 8001090:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001092:	2300      	movs	r3, #0
 8001094:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001096:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800109a:	2204      	movs	r2, #4
 800109c:	4619      	mov	r1, r3
 800109e:	481e      	ldr	r0, [pc, #120]	; (8001118 <MX_TIM1_Init+0x130>)
 80010a0:	f005 fbd0 	bl	8006844 <HAL_TIM_PWM_ConfigChannel>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80010aa:	f000 fc01 	bl	80018b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010b2:	2208      	movs	r2, #8
 80010b4:	4619      	mov	r1, r3
 80010b6:	4818      	ldr	r0, [pc, #96]	; (8001118 <MX_TIM1_Init+0x130>)
 80010b8:	f005 fbc4 	bl	8006844 <HAL_TIM_PWM_ConfigChannel>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 80010c2:	f000 fbf5 	bl	80018b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	4619      	mov	r1, r3
 80010fa:	4807      	ldr	r0, [pc, #28]	; (8001118 <MX_TIM1_Init+0x130>)
 80010fc:	f006 f8f8 	bl	80072f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 8001106:	f000 fbd3 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800110a:	4803      	ldr	r0, [pc, #12]	; (8001118 <MX_TIM1_Init+0x130>)
 800110c:	f000 fc80 	bl	8001a10 <HAL_TIM_MspPostInit>

}
 8001110:	bf00      	nop
 8001112:	3758      	adds	r7, #88	; 0x58
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	240004c0 	.word	0x240004c0
 800111c:	40010000 	.word	0x40010000

08001120 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001132:	463b      	mov	r3, r7
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
 8001140:	615a      	str	r2, [r3, #20]
 8001142:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001144:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <MX_TIM2_Init+0xb0>)
 8001146:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800114a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1080-1;
 800114c:	4b20      	ldr	r3, [pc, #128]	; (80011d0 <MX_TIM2_Init+0xb0>)
 800114e:	f240 4237 	movw	r2, #1079	; 0x437
 8001152:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001154:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <MX_TIM2_Init+0xb0>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024-1;
 800115a:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <MX_TIM2_Init+0xb0>)
 800115c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001160:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001162:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <MX_TIM2_Init+0xb0>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001168:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <MX_TIM2_Init+0xb0>)
 800116a:	2200      	movs	r2, #0
 800116c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800116e:	4818      	ldr	r0, [pc, #96]	; (80011d0 <MX_TIM2_Init+0xb0>)
 8001170:	f005 f9c4 	bl	80064fc <HAL_TIM_PWM_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 800117a:	f000 fb99 	bl	80018b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001182:	2300      	movs	r3, #0
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001186:	f107 031c 	add.w	r3, r7, #28
 800118a:	4619      	mov	r1, r3
 800118c:	4810      	ldr	r0, [pc, #64]	; (80011d0 <MX_TIM2_Init+0xb0>)
 800118e:	f006 f827 	bl	80071e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001198:	f000 fb8a 	bl	80018b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800119c:	2360      	movs	r3, #96	; 0x60
 800119e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ac:	463b      	mov	r3, r7
 80011ae:	2200      	movs	r2, #0
 80011b0:	4619      	mov	r1, r3
 80011b2:	4807      	ldr	r0, [pc, #28]	; (80011d0 <MX_TIM2_Init+0xb0>)
 80011b4:	f005 fb46 	bl	8006844 <HAL_TIM_PWM_ConfigChannel>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80011be:	f000 fb77 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011c2:	4803      	ldr	r0, [pc, #12]	; (80011d0 <MX_TIM2_Init+0xb0>)
 80011c4:	f000 fc24 	bl	8001a10 <HAL_TIM_MspPostInit>

}
 80011c8:	bf00      	nop
 80011ca:	3728      	adds	r7, #40	; 0x28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	24000500 	.word	0x24000500

080011d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e6:	463b      	mov	r3, r7
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
 80011f4:	615a      	str	r2, [r3, #20]
 80011f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011f8:	4b2d      	ldr	r3, [pc, #180]	; (80012b0 <MX_TIM3_Init+0xdc>)
 80011fa:	4a2e      	ldr	r2, [pc, #184]	; (80012b4 <MX_TIM3_Init+0xe0>)
 80011fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1080-1;
 80011fe:	4b2c      	ldr	r3, [pc, #176]	; (80012b0 <MX_TIM3_Init+0xdc>)
 8001200:	f240 4237 	movw	r2, #1079	; 0x437
 8001204:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001206:	4b2a      	ldr	r3, [pc, #168]	; (80012b0 <MX_TIM3_Init+0xdc>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1024-1;
 800120c:	4b28      	ldr	r3, [pc, #160]	; (80012b0 <MX_TIM3_Init+0xdc>)
 800120e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001212:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001214:	4b26      	ldr	r3, [pc, #152]	; (80012b0 <MX_TIM3_Init+0xdc>)
 8001216:	2200      	movs	r2, #0
 8001218:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121a:	4b25      	ldr	r3, [pc, #148]	; (80012b0 <MX_TIM3_Init+0xdc>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001220:	4823      	ldr	r0, [pc, #140]	; (80012b0 <MX_TIM3_Init+0xdc>)
 8001222:	f005 f96b 	bl	80064fc <HAL_TIM_PWM_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 800122c:	f000 fb40 	bl	80018b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001238:	f107 031c 	add.w	r3, r7, #28
 800123c:	4619      	mov	r1, r3
 800123e:	481c      	ldr	r0, [pc, #112]	; (80012b0 <MX_TIM3_Init+0xdc>)
 8001240:	f005 ffce 	bl	80071e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800124a:	f000 fb31 	bl	80018b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800124e:	2360      	movs	r3, #96	; 0x60
 8001250:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800125e:	463b      	mov	r3, r7
 8001260:	2200      	movs	r2, #0
 8001262:	4619      	mov	r1, r3
 8001264:	4812      	ldr	r0, [pc, #72]	; (80012b0 <MX_TIM3_Init+0xdc>)
 8001266:	f005 faed 	bl	8006844 <HAL_TIM_PWM_ConfigChannel>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001270:	f000 fb1e 	bl	80018b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001274:	463b      	mov	r3, r7
 8001276:	2204      	movs	r2, #4
 8001278:	4619      	mov	r1, r3
 800127a:	480d      	ldr	r0, [pc, #52]	; (80012b0 <MX_TIM3_Init+0xdc>)
 800127c:	f005 fae2 	bl	8006844 <HAL_TIM_PWM_ConfigChannel>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8001286:	f000 fb13 	bl	80018b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800128a:	463b      	mov	r3, r7
 800128c:	220c      	movs	r2, #12
 800128e:	4619      	mov	r1, r3
 8001290:	4807      	ldr	r0, [pc, #28]	; (80012b0 <MX_TIM3_Init+0xdc>)
 8001292:	f005 fad7 	bl	8006844 <HAL_TIM_PWM_ConfigChannel>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800129c:	f000 fb08 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012a0:	4803      	ldr	r0, [pc, #12]	; (80012b0 <MX_TIM3_Init+0xdc>)
 80012a2:	f000 fbb5 	bl	8001a10 <HAL_TIM_MspPostInit>

}
 80012a6:	bf00      	nop
 80012a8:	3728      	adds	r7, #40	; 0x28
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	240003dc 	.word	0x240003dc
 80012b4:	40000400 	.word	0x40000400

080012b8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	; 0x28
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012be:	f107 031c 	add.w	r3, r7, #28
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ca:	463b      	mov	r3, r7
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
 80012d8:	615a      	str	r2, [r3, #20]
 80012da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80012dc:	4b22      	ldr	r3, [pc, #136]	; (8001368 <MX_TIM5_Init+0xb0>)
 80012de:	4a23      	ldr	r2, [pc, #140]	; (800136c <MX_TIM5_Init+0xb4>)
 80012e0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1080-1;
 80012e2:	4b21      	ldr	r3, [pc, #132]	; (8001368 <MX_TIM5_Init+0xb0>)
 80012e4:	f240 4237 	movw	r2, #1079	; 0x437
 80012e8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ea:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <MX_TIM5_Init+0xb0>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024-1;
 80012f0:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <MX_TIM5_Init+0xb0>)
 80012f2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80012f6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f8:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <MX_TIM5_Init+0xb0>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fe:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <MX_TIM5_Init+0xb0>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001304:	4818      	ldr	r0, [pc, #96]	; (8001368 <MX_TIM5_Init+0xb0>)
 8001306:	f005 f8f9 	bl	80064fc <HAL_TIM_PWM_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM5_Init+0x5c>
  {
    Error_Handler();
 8001310:	f000 face 	bl	80018b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	4619      	mov	r1, r3
 8001322:	4811      	ldr	r0, [pc, #68]	; (8001368 <MX_TIM5_Init+0xb0>)
 8001324:	f005 ff5c 	bl	80071e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 800132e:	f000 fabf 	bl	80018b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001332:	2360      	movs	r3, #96	; 0x60
 8001334:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800133a:	2300      	movs	r3, #0
 800133c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001342:	463b      	mov	r3, r7
 8001344:	220c      	movs	r2, #12
 8001346:	4619      	mov	r1, r3
 8001348:	4807      	ldr	r0, [pc, #28]	; (8001368 <MX_TIM5_Init+0xb0>)
 800134a:	f005 fa7b 	bl	8006844 <HAL_TIM_PWM_ConfigChannel>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8001354:	f000 faac 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001358:	4803      	ldr	r0, [pc, #12]	; (8001368 <MX_TIM5_Init+0xb0>)
 800135a:	f000 fb59 	bl	8001a10 <HAL_TIM_MspPostInit>

}
 800135e:	bf00      	nop
 8001360:	3728      	adds	r7, #40	; 0x28
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	2400039c 	.word	0x2400039c
 800136c:	40000c00 	.word	0x40000c00

08001370 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001380:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <MX_TIM7_Init+0x78>)
 8001382:	4a1a      	ldr	r2, [pc, #104]	; (80013ec <MX_TIM7_Init+0x7c>)
 8001384:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1080-1;
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <MX_TIM7_Init+0x78>)
 8001388:	f240 4237 	movw	r2, #1079	; 0x437
 800138c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138e:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <MX_TIM7_Init+0x78>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8001394:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <MX_TIM7_Init+0x78>)
 8001396:	f240 32e7 	movw	r2, #999	; 0x3e7
 800139a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <MX_TIM7_Init+0x78>)
 800139e:	2280      	movs	r2, #128	; 0x80
 80013a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80013a2:	4811      	ldr	r0, [pc, #68]	; (80013e8 <MX_TIM7_Init+0x78>)
 80013a4:	f005 f854 	bl	8006450 <HAL_TIM_Base_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80013ae:	f000 fa7f 	bl	80018b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	4619      	mov	r1, r3
 80013be:	480a      	ldr	r0, [pc, #40]	; (80013e8 <MX_TIM7_Init+0x78>)
 80013c0:	f005 ff0e 	bl	80071e0 <HAL_TIMEx_MasterConfigSynchronization>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80013ca:	f000 fa71 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  /*##-2- Start the TIM Base generation in interrupt mode ####################*/
  if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK)
 80013ce:	4806      	ldr	r0, [pc, #24]	; (80013e8 <MX_TIM7_Init+0x78>)
 80013d0:	f005 f86a 	bl	80064a8 <HAL_TIM_Base_Start_IT>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM7_Init+0x6e>
  {
    /* Starting Error */
    Error_Handler();
 80013da:	f000 fa69 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE END TIM7_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	24000540 	.word	0x24000540
 80013ec:	40001400 	.word	0x40001400

080013f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013f4:	4b22      	ldr	r3, [pc, #136]	; (8001480 <MX_USART1_UART_Init+0x90>)
 80013f6:	4a23      	ldr	r2, [pc, #140]	; (8001484 <MX_USART1_UART_Init+0x94>)
 80013f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80013fa:	4b21      	ldr	r3, [pc, #132]	; (8001480 <MX_USART1_UART_Init+0x90>)
 80013fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001400:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001402:	4b1f      	ldr	r3, [pc, #124]	; (8001480 <MX_USART1_UART_Init+0x90>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001408:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <MX_USART1_UART_Init+0x90>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800140e:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <MX_USART1_UART_Init+0x90>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001414:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <MX_USART1_UART_Init+0x90>)
 8001416:	220c      	movs	r2, #12
 8001418:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141a:	4b19      	ldr	r3, [pc, #100]	; (8001480 <MX_USART1_UART_Init+0x90>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001420:	4b17      	ldr	r3, [pc, #92]	; (8001480 <MX_USART1_UART_Init+0x90>)
 8001422:	2200      	movs	r2, #0
 8001424:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001426:	4b16      	ldr	r3, [pc, #88]	; (8001480 <MX_USART1_UART_Init+0x90>)
 8001428:	2200      	movs	r2, #0
 800142a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800142c:	4b14      	ldr	r3, [pc, #80]	; (8001480 <MX_USART1_UART_Init+0x90>)
 800142e:	2200      	movs	r2, #0
 8001430:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001432:	4b13      	ldr	r3, [pc, #76]	; (8001480 <MX_USART1_UART_Init+0x90>)
 8001434:	2200      	movs	r2, #0
 8001436:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001438:	4811      	ldr	r0, [pc, #68]	; (8001480 <MX_USART1_UART_Init+0x90>)
 800143a:	f005 fff5 	bl	8007428 <HAL_UART_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001444:	f000 fa34 	bl	80018b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001448:	2100      	movs	r1, #0
 800144a:	480d      	ldr	r0, [pc, #52]	; (8001480 <MX_USART1_UART_Init+0x90>)
 800144c:	f008 fd63 	bl	8009f16 <HAL_UARTEx_SetTxFifoThreshold>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001456:	f000 fa2b 	bl	80018b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800145a:	2100      	movs	r1, #0
 800145c:	4808      	ldr	r0, [pc, #32]	; (8001480 <MX_USART1_UART_Init+0x90>)
 800145e:	f008 fd98 	bl	8009f92 <HAL_UARTEx_SetRxFifoThreshold>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001468:	f000 fa22 	bl	80018b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800146c:	4804      	ldr	r0, [pc, #16]	; (8001480 <MX_USART1_UART_Init+0x90>)
 800146e:	f008 fd19 	bl	8009ea4 <HAL_UARTEx_DisableFifoMode>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001478:	f000 fa1a 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}
 8001480:	24000434 	.word	0x24000434
 8001484:	40011000 	.word	0x40011000

08001488 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800148c:	4b22      	ldr	r3, [pc, #136]	; (8001518 <MX_USART3_UART_Init+0x90>)
 800148e:	4a23      	ldr	r2, [pc, #140]	; (800151c <MX_USART3_UART_Init+0x94>)
 8001490:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001492:	4b21      	ldr	r3, [pc, #132]	; (8001518 <MX_USART3_UART_Init+0x90>)
 8001494:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001498:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800149a:	4b1f      	ldr	r3, [pc, #124]	; (8001518 <MX_USART3_UART_Init+0x90>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014a0:	4b1d      	ldr	r3, [pc, #116]	; (8001518 <MX_USART3_UART_Init+0x90>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014a6:	4b1c      	ldr	r3, [pc, #112]	; (8001518 <MX_USART3_UART_Init+0x90>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014ac:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <MX_USART3_UART_Init+0x90>)
 80014ae:	220c      	movs	r2, #12
 80014b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b2:	4b19      	ldr	r3, [pc, #100]	; (8001518 <MX_USART3_UART_Init+0x90>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b8:	4b17      	ldr	r3, [pc, #92]	; (8001518 <MX_USART3_UART_Init+0x90>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014be:	4b16      	ldr	r3, [pc, #88]	; (8001518 <MX_USART3_UART_Init+0x90>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014c4:	4b14      	ldr	r3, [pc, #80]	; (8001518 <MX_USART3_UART_Init+0x90>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ca:	4b13      	ldr	r3, [pc, #76]	; (8001518 <MX_USART3_UART_Init+0x90>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014d0:	4811      	ldr	r0, [pc, #68]	; (8001518 <MX_USART3_UART_Init+0x90>)
 80014d2:	f005 ffa9 	bl	8007428 <HAL_UART_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80014dc:	f000 f9e8 	bl	80018b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014e0:	2100      	movs	r1, #0
 80014e2:	480d      	ldr	r0, [pc, #52]	; (8001518 <MX_USART3_UART_Init+0x90>)
 80014e4:	f008 fd17 	bl	8009f16 <HAL_UARTEx_SetTxFifoThreshold>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80014ee:	f000 f9df 	bl	80018b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014f2:	2100      	movs	r1, #0
 80014f4:	4808      	ldr	r0, [pc, #32]	; (8001518 <MX_USART3_UART_Init+0x90>)
 80014f6:	f008 fd4c 	bl	8009f92 <HAL_UARTEx_SetRxFifoThreshold>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001500:	f000 f9d6 	bl	80018b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001504:	4804      	ldr	r0, [pc, #16]	; (8001518 <MX_USART3_UART_Init+0x90>)
 8001506:	f008 fccd 	bl	8009ea4 <HAL_UARTEx_DisableFifoMode>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001510:	f000 f9ce 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}
 8001518:	24000280 	.word	0x24000280
 800151c:	40004800 	.word	0x40004800

08001520 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08e      	sub	sp, #56	; 0x38
 8001524:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]
 8001534:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001536:	4bbe      	ldr	r3, [pc, #760]	; (8001830 <MX_GPIO_Init+0x310>)
 8001538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153c:	4abc      	ldr	r2, [pc, #752]	; (8001830 <MX_GPIO_Init+0x310>)
 800153e:	f043 0310 	orr.w	r3, r3, #16
 8001542:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001546:	4bba      	ldr	r3, [pc, #744]	; (8001830 <MX_GPIO_Init+0x310>)
 8001548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800154c:	f003 0310 	and.w	r3, r3, #16
 8001550:	623b      	str	r3, [r7, #32]
 8001552:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001554:	4bb6      	ldr	r3, [pc, #728]	; (8001830 <MX_GPIO_Init+0x310>)
 8001556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800155a:	4ab5      	ldr	r2, [pc, #724]	; (8001830 <MX_GPIO_Init+0x310>)
 800155c:	f043 0304 	orr.w	r3, r3, #4
 8001560:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001564:	4bb2      	ldr	r3, [pc, #712]	; (8001830 <MX_GPIO_Init+0x310>)
 8001566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156a:	f003 0304 	and.w	r3, r3, #4
 800156e:	61fb      	str	r3, [r7, #28]
 8001570:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001572:	4baf      	ldr	r3, [pc, #700]	; (8001830 <MX_GPIO_Init+0x310>)
 8001574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001578:	4aad      	ldr	r2, [pc, #692]	; (8001830 <MX_GPIO_Init+0x310>)
 800157a:	f043 0320 	orr.w	r3, r3, #32
 800157e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001582:	4bab      	ldr	r3, [pc, #684]	; (8001830 <MX_GPIO_Init+0x310>)
 8001584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001588:	f003 0320 	and.w	r3, r3, #32
 800158c:	61bb      	str	r3, [r7, #24]
 800158e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001590:	4ba7      	ldr	r3, [pc, #668]	; (8001830 <MX_GPIO_Init+0x310>)
 8001592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001596:	4aa6      	ldr	r2, [pc, #664]	; (8001830 <MX_GPIO_Init+0x310>)
 8001598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800159c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015a0:	4ba3      	ldr	r3, [pc, #652]	; (8001830 <MX_GPIO_Init+0x310>)
 80015a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ae:	4ba0      	ldr	r3, [pc, #640]	; (8001830 <MX_GPIO_Init+0x310>)
 80015b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b4:	4a9e      	ldr	r2, [pc, #632]	; (8001830 <MX_GPIO_Init+0x310>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015be:	4b9c      	ldr	r3, [pc, #624]	; (8001830 <MX_GPIO_Init+0x310>)
 80015c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015cc:	4b98      	ldr	r3, [pc, #608]	; (8001830 <MX_GPIO_Init+0x310>)
 80015ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d2:	4a97      	ldr	r2, [pc, #604]	; (8001830 <MX_GPIO_Init+0x310>)
 80015d4:	f043 0302 	orr.w	r3, r3, #2
 80015d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015dc:	4b94      	ldr	r3, [pc, #592]	; (8001830 <MX_GPIO_Init+0x310>)
 80015de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ea:	4b91      	ldr	r3, [pc, #580]	; (8001830 <MX_GPIO_Init+0x310>)
 80015ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f0:	4a8f      	ldr	r2, [pc, #572]	; (8001830 <MX_GPIO_Init+0x310>)
 80015f2:	f043 0308 	orr.w	r3, r3, #8
 80015f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015fa:	4b8d      	ldr	r3, [pc, #564]	; (8001830 <MX_GPIO_Init+0x310>)
 80015fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001600:	f003 0308 	and.w	r3, r3, #8
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001608:	4b89      	ldr	r3, [pc, #548]	; (8001830 <MX_GPIO_Init+0x310>)
 800160a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800160e:	4a88      	ldr	r2, [pc, #544]	; (8001830 <MX_GPIO_Init+0x310>)
 8001610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001614:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001618:	4b85      	ldr	r3, [pc, #532]	; (8001830 <MX_GPIO_Init+0x310>)
 800161a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800161e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001626:	2200      	movs	r2, #0
 8001628:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800162c:	4881      	ldr	r0, [pc, #516]	; (8001834 <MX_GPIO_Init+0x314>)
 800162e:	f001 fa6b 	bl	8002b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001632:	2200      	movs	r2, #0
 8001634:	2140      	movs	r1, #64	; 0x40
 8001636:	4880      	ldr	r0, [pc, #512]	; (8001838 <MX_GPIO_Init+0x318>)
 8001638:	f001 fa66 	bl	8002b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 800163c:	2314      	movs	r3, #20
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001640:	2300      	movs	r3, #0
 8001642:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800164c:	4619      	mov	r1, r3
 800164e:	487b      	ldr	r0, [pc, #492]	; (800183c <MX_GPIO_Init+0x31c>)
 8001650:	f001 f892 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001654:	2308      	movs	r3, #8
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001658:	4b79      	ldr	r3, [pc, #484]	; (8001840 <MX_GPIO_Init+0x320>)
 800165a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800165c:	2301      	movs	r3, #1
 800165e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001664:	4619      	mov	r1, r3
 8001666:	4875      	ldr	r0, [pc, #468]	; (800183c <MX_GPIO_Init+0x31c>)
 8001668:	f001 f886 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800166c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001672:	2300      	movs	r3, #0
 8001674:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001676:	2302      	movs	r3, #2
 8001678:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800167a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167e:	4619      	mov	r1, r3
 8001680:	4870      	ldr	r0, [pc, #448]	; (8001844 <MX_GPIO_Init+0x324>)
 8001682:	f001 f879 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001686:	2380      	movs	r3, #128	; 0x80
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800168a:	2300      	movs	r3, #0
 800168c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001696:	4619      	mov	r1, r3
 8001698:	486b      	ldr	r0, [pc, #428]	; (8001848 <MX_GPIO_Init+0x328>)
 800169a:	f001 f86d 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC7 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_10;
 800169e:	f240 4382 	movw	r3, #1154	; 0x482
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016a8:	2301      	movs	r3, #1
 80016aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b0:	4619      	mov	r1, r3
 80016b2:	4864      	ldr	r0, [pc, #400]	; (8001844 <MX_GPIO_Init+0x324>)
 80016b4:	f001 f860 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016b8:	2303      	movs	r3, #3
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80016bc:	4b60      	ldr	r3, [pc, #384]	; (8001840 <MX_GPIO_Init+0x320>)
 80016be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016c0:	2301      	movs	r3, #1
 80016c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c8:	4619      	mov	r1, r3
 80016ca:	4860      	ldr	r0, [pc, #384]	; (800184c <MX_GPIO_Init+0x32c>)
 80016cc:	f001 f854 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin;
 80016d0:	2304      	movs	r3, #4
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	2302      	movs	r3, #2
 80016d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016dc:	2300      	movs	r3, #0
 80016de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016e0:	230b      	movs	r3, #11
 80016e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_MDIO_GPIO_Port, &GPIO_InitStruct);
 80016e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e8:	4619      	mov	r1, r3
 80016ea:	4858      	ldr	r0, [pc, #352]	; (800184c <MX_GPIO_Init+0x32c>)
 80016ec:	f001 f844 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_RXD0_Pin|RMII_RXD1_Pin;
 80016f0:	2330      	movs	r3, #48	; 0x30
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f4:	2302      	movs	r3, #2
 80016f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fc:	2300      	movs	r3, #0
 80016fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001700:	230b      	movs	r3, #11
 8001702:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001708:	4619      	mov	r1, r3
 800170a:	484e      	ldr	r0, [pc, #312]	; (8001844 <MX_GPIO_Init+0x324>)
 800170c:	f001 f834 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001710:	2304      	movs	r3, #4
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001714:	4b4a      	ldr	r3, [pc, #296]	; (8001840 <MX_GPIO_Init+0x320>)
 8001716:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001718:	2301      	movs	r3, #1
 800171a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001720:	4619      	mov	r1, r3
 8001722:	4844      	ldr	r0, [pc, #272]	; (8001834 <MX_GPIO_Init+0x314>)
 8001724:	f001 f828 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001728:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2300      	movs	r3, #0
 8001738:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800173a:	230b      	movs	r3, #11
 800173c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800173e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001742:	4619      	mov	r1, r3
 8001744:	483b      	ldr	r0, [pc, #236]	; (8001834 <MX_GPIO_Init+0x314>)
 8001746:	f001 f817 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800174a:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001750:	2301      	movs	r3, #1
 8001752:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2300      	movs	r3, #0
 800175a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001760:	4619      	mov	r1, r3
 8001762:	4834      	ldr	r0, [pc, #208]	; (8001834 <MX_GPIO_Init+0x314>)
 8001764:	f001 f808 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001768:	2340      	movs	r3, #64	; 0x40
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176c:	2301      	movs	r3, #1
 800176e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	2300      	movs	r3, #0
 8001776:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177c:	4619      	mov	r1, r3
 800177e:	482e      	ldr	r0, [pc, #184]	; (8001838 <MX_GPIO_Init+0x318>)
 8001780:	f000 fffa 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001784:	2380      	movs	r3, #128	; 0x80
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001788:	2300      	movs	r3, #0
 800178a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800178c:	2301      	movs	r3, #1
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001794:	4619      	mov	r1, r3
 8001796:	4828      	ldr	r0, [pc, #160]	; (8001838 <MX_GPIO_Init+0x318>)
 8001798:	f000 ffee 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800179c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a2:	2300      	movs	r3, #0
 80017a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ae:	4619      	mov	r1, r3
 80017b0:	4824      	ldr	r0, [pc, #144]	; (8001844 <MX_GPIO_Init+0x324>)
 80017b2:	f000 ffe1 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017b6:	2308      	movs	r3, #8
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ba:	2300      	movs	r3, #0
 80017bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c6:	4619      	mov	r1, r3
 80017c8:	4821      	ldr	r0, [pc, #132]	; (8001850 <MX_GPIO_Init+0x330>)
 80017ca:	f000 ffd5 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 80017ce:	23d0      	movs	r3, #208	; 0xd0
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80017d2:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <MX_GPIO_Init+0x320>)
 80017d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017d6:	2301      	movs	r3, #1
 80017d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017de:	4619      	mov	r1, r3
 80017e0:	481b      	ldr	r0, [pc, #108]	; (8001850 <MX_GPIO_Init+0x330>)
 80017e2:	f000 ffc9 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80017e6:	2320      	movs	r3, #32
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ea:	2300      	movs	r3, #0
 80017ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017ee:	2301      	movs	r3, #1
 80017f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f6:	4619      	mov	r1, r3
 80017f8:	4815      	ldr	r0, [pc, #84]	; (8001850 <MX_GPIO_Init+0x330>)
 80017fa:	f000 ffbd 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80017fe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	2300      	movs	r3, #0
 800180e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001810:	230b      	movs	r3, #11
 8001812:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001818:	4619      	mov	r1, r3
 800181a:	4807      	ldr	r0, [pc, #28]	; (8001838 <MX_GPIO_Init+0x318>)
 800181c:	f000 ffac 	bl	8002778 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001820:	2200      	movs	r2, #0
 8001822:	2100      	movs	r1, #0
 8001824:	2006      	movs	r0, #6
 8001826:	f000 fd2e 	bl	8002286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800182a:	2006      	movs	r0, #6
 800182c:	e012      	b.n	8001854 <MX_GPIO_Init+0x334>
 800182e:	bf00      	nop
 8001830:	58024400 	.word	0x58024400
 8001834:	58020400 	.word	0x58020400
 8001838:	58021800 	.word	0x58021800
 800183c:	58021000 	.word	0x58021000
 8001840:	11310000 	.word	0x11310000
 8001844:	58020800 	.word	0x58020800
 8001848:	58021400 	.word	0x58021400
 800184c:	58020000 	.word	0x58020000
 8001850:	58020c00 	.word	0x58020c00
 8001854:	f000 fd31 	bl	80022ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001858:	2200      	movs	r2, #0
 800185a:	2100      	movs	r1, #0
 800185c:	2007      	movs	r0, #7
 800185e:	f000 fd12 	bl	8002286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001862:	2007      	movs	r0, #7
 8001864:	f000 fd29 	bl	80022ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001868:	2200      	movs	r2, #0
 800186a:	2100      	movs	r1, #0
 800186c:	2008      	movs	r0, #8
 800186e:	f000 fd0a 	bl	8002286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001872:	2008      	movs	r0, #8
 8001874:	f000 fd21 	bl	80022ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001878:	2200      	movs	r2, #0
 800187a:	2100      	movs	r1, #0
 800187c:	2009      	movs	r0, #9
 800187e:	f000 fd02 	bl	8002286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001882:	2009      	movs	r0, #9
 8001884:	f000 fd19 	bl	80022ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001888:	2200      	movs	r2, #0
 800188a:	2100      	movs	r1, #0
 800188c:	200a      	movs	r0, #10
 800188e:	f000 fcfa 	bl	8002286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001892:	200a      	movs	r0, #10
 8001894:	f000 fd11 	bl	80022ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001898:	2200      	movs	r2, #0
 800189a:	2100      	movs	r1, #0
 800189c:	2017      	movs	r0, #23
 800189e:	f000 fcf2 	bl	8002286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80018a2:	2017      	movs	r0, #23
 80018a4:	f000 fd09 	bl	80022ba <HAL_NVIC_EnableIRQ>

}
 80018a8:	bf00      	nop
 80018aa:	3738      	adds	r7, #56	; 0x38
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c6:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <HAL_MspInit+0x30>)
 80018c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018cc:	4a08      	ldr	r2, [pc, #32]	; (80018f0 <HAL_MspInit+0x30>)
 80018ce:	f043 0302 	orr.w	r3, r3, #2
 80018d2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <HAL_MspInit+0x30>)
 80018d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	58024400 	.word	0x58024400

080018f4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b087      	sub	sp, #28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a2b      	ldr	r2, [pc, #172]	; (80019b0 <HAL_TIM_PWM_MspInit+0xbc>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d10f      	bne.n	8001926 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001906:	4b2b      	ldr	r3, [pc, #172]	; (80019b4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001908:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800190c:	4a29      	ldr	r2, [pc, #164]	; (80019b4 <HAL_TIM_PWM_MspInit+0xc0>)
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001916:	4b27      	ldr	r3, [pc, #156]	; (80019b4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001918:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001924:	e03d      	b.n	80019a2 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM2)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800192e:	d10f      	bne.n	8001950 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001930:	4b20      	ldr	r3, [pc, #128]	; (80019b4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001932:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001936:	4a1f      	ldr	r2, [pc, #124]	; (80019b4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001940:	4b1c      	ldr	r3, [pc, #112]	; (80019b4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001942:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]
}
 800194e:	e028      	b.n	80019a2 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM3)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a18      	ldr	r2, [pc, #96]	; (80019b8 <HAL_TIM_PWM_MspInit+0xc4>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d10f      	bne.n	800197a <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800195a:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <HAL_TIM_PWM_MspInit+0xc0>)
 800195c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001960:	4a14      	ldr	r2, [pc, #80]	; (80019b4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001962:	f043 0302 	orr.w	r3, r3, #2
 8001966:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800196a:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <HAL_TIM_PWM_MspInit+0xc0>)
 800196c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	68fb      	ldr	r3, [r7, #12]
}
 8001978:	e013      	b.n	80019a2 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM5)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a0f      	ldr	r2, [pc, #60]	; (80019bc <HAL_TIM_PWM_MspInit+0xc8>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d10e      	bne.n	80019a2 <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001986:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800198a:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <HAL_TIM_PWM_MspInit+0xc0>)
 800198c:	f043 0308 	orr.w	r3, r3, #8
 8001990:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001994:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001996:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	68bb      	ldr	r3, [r7, #8]
}
 80019a2:	bf00      	nop
 80019a4:	371c      	adds	r7, #28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	40010000 	.word	0x40010000
 80019b4:	58024400 	.word	0x58024400
 80019b8:	40000400 	.word	0x40000400
 80019bc:	40000c00 	.word	0x40000c00

080019c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0e      	ldr	r2, [pc, #56]	; (8001a08 <HAL_TIM_Base_MspInit+0x48>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d116      	bne.n	8001a00 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80019d2:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <HAL_TIM_Base_MspInit+0x4c>)
 80019d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019d8:	4a0c      	ldr	r2, [pc, #48]	; (8001a0c <HAL_TIM_Base_MspInit+0x4c>)
 80019da:	f043 0320 	orr.w	r3, r3, #32
 80019de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019e2:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <HAL_TIM_Base_MspInit+0x4c>)
 80019e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019e8:	f003 0320 	and.w	r3, r3, #32
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80019f0:	2200      	movs	r2, #0
 80019f2:	2100      	movs	r1, #0
 80019f4:	2037      	movs	r0, #55	; 0x37
 80019f6:	f000 fc46 	bl	8002286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80019fa:	2037      	movs	r0, #55	; 0x37
 80019fc:	f000 fc5d 	bl	80022ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001a00:	bf00      	nop
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40001400 	.word	0x40001400
 8001a0c:	58024400 	.word	0x58024400

08001a10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08c      	sub	sp, #48	; 0x30
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	f107 031c 	add.w	r3, r7, #28
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a5a      	ldr	r2, [pc, #360]	; (8001b98 <HAL_TIM_MspPostInit+0x188>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d120      	bne.n	8001a74 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a32:	4b5a      	ldr	r3, [pc, #360]	; (8001b9c <HAL_TIM_MspPostInit+0x18c>)
 8001a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a38:	4a58      	ldr	r2, [pc, #352]	; (8001b9c <HAL_TIM_MspPostInit+0x18c>)
 8001a3a:	f043 0310 	orr.w	r3, r3, #16
 8001a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a42:	4b56      	ldr	r3, [pc, #344]	; (8001b9c <HAL_TIM_MspPostInit+0x18c>)
 8001a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a48:	f003 0310 	and.w	r3, r3, #16
 8001a4c:	61bb      	str	r3, [r7, #24]
 8001a4e:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001a50:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a62:	2301      	movs	r3, #1
 8001a64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a66:	f107 031c 	add.w	r3, r7, #28
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	484c      	ldr	r0, [pc, #304]	; (8001ba0 <HAL_TIM_MspPostInit+0x190>)
 8001a6e:	f000 fe83 	bl	8002778 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001a72:	e08c      	b.n	8001b8e <HAL_TIM_MspPostInit+0x17e>
  else if(htim->Instance==TIM2)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a7c:	d11f      	bne.n	8001abe <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7e:	4b47      	ldr	r3, [pc, #284]	; (8001b9c <HAL_TIM_MspPostInit+0x18c>)
 8001a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a84:	4a45      	ldr	r2, [pc, #276]	; (8001b9c <HAL_TIM_MspPostInit+0x18c>)
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a8e:	4b43      	ldr	r3, [pc, #268]	; (8001b9c <HAL_TIM_MspPostInit+0x18c>)
 8001a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a9c:	2320      	movs	r3, #32
 8001a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001aac:	2301      	movs	r3, #1
 8001aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab0:	f107 031c 	add.w	r3, r7, #28
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	483b      	ldr	r0, [pc, #236]	; (8001ba4 <HAL_TIM_MspPostInit+0x194>)
 8001ab8:	f000 fe5e 	bl	8002778 <HAL_GPIO_Init>
}
 8001abc:	e067      	b.n	8001b8e <HAL_TIM_MspPostInit+0x17e>
  else if(htim->Instance==TIM3)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a39      	ldr	r2, [pc, #228]	; (8001ba8 <HAL_TIM_MspPostInit+0x198>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d13e      	bne.n	8001b46 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac8:	4b34      	ldr	r3, [pc, #208]	; (8001b9c <HAL_TIM_MspPostInit+0x18c>)
 8001aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ace:	4a33      	ldr	r2, [pc, #204]	; (8001b9c <HAL_TIM_MspPostInit+0x18c>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ad8:	4b30      	ldr	r3, [pc, #192]	; (8001b9c <HAL_TIM_MspPostInit+0x18c>)
 8001ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae6:	4b2d      	ldr	r3, [pc, #180]	; (8001b9c <HAL_TIM_MspPostInit+0x18c>)
 8001ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aec:	4a2b      	ldr	r2, [pc, #172]	; (8001b9c <HAL_TIM_MspPostInit+0x18c>)
 8001aee:	f043 0302 	orr.w	r3, r3, #2
 8001af2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001af6:	4b29      	ldr	r3, [pc, #164]	; (8001b9c <HAL_TIM_MspPostInit+0x18c>)
 8001af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b04:	23c0      	movs	r3, #192	; 0xc0
 8001b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b10:	2300      	movs	r3, #0
 8001b12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b14:	2302      	movs	r3, #2
 8001b16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b18:	f107 031c 	add.w	r3, r7, #28
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4821      	ldr	r0, [pc, #132]	; (8001ba4 <HAL_TIM_MspPostInit+0x194>)
 8001b20:	f000 fe2a 	bl	8002778 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b24:	2302      	movs	r3, #2
 8001b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b30:	2300      	movs	r3, #0
 8001b32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b34:	2302      	movs	r3, #2
 8001b36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b38:	f107 031c 	add.w	r3, r7, #28
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	481b      	ldr	r0, [pc, #108]	; (8001bac <HAL_TIM_MspPostInit+0x19c>)
 8001b40:	f000 fe1a 	bl	8002778 <HAL_GPIO_Init>
}
 8001b44:	e023      	b.n	8001b8e <HAL_TIM_MspPostInit+0x17e>
  else if(htim->Instance==TIM5)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a19      	ldr	r2, [pc, #100]	; (8001bb0 <HAL_TIM_MspPostInit+0x1a0>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d11e      	bne.n	8001b8e <HAL_TIM_MspPostInit+0x17e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b50:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <HAL_TIM_MspPostInit+0x18c>)
 8001b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b56:	4a11      	ldr	r2, [pc, #68]	; (8001b9c <HAL_TIM_MspPostInit+0x18c>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b60:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <HAL_TIM_MspPostInit+0x18c>)
 8001b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b6e:	2308      	movs	r3, #8
 8001b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b82:	f107 031c 	add.w	r3, r7, #28
 8001b86:	4619      	mov	r1, r3
 8001b88:	4806      	ldr	r0, [pc, #24]	; (8001ba4 <HAL_TIM_MspPostInit+0x194>)
 8001b8a:	f000 fdf5 	bl	8002778 <HAL_GPIO_Init>
}
 8001b8e:	bf00      	nop
 8001b90:	3730      	adds	r7, #48	; 0x30
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40010000 	.word	0x40010000
 8001b9c:	58024400 	.word	0x58024400
 8001ba0:	58021000 	.word	0x58021000
 8001ba4:	58020000 	.word	0x58020000
 8001ba8:	40000400 	.word	0x40000400
 8001bac:	58020400 	.word	0x58020400
 8001bb0:	40000c00 	.word	0x40000c00

08001bb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08c      	sub	sp, #48	; 0x30
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbc:	f107 031c 	add.w	r3, r7, #28
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a41      	ldr	r2, [pc, #260]	; (8001cd8 <HAL_UART_MspInit+0x124>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d13f      	bne.n	8001c56 <HAL_UART_MspInit+0xa2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bd6:	4b41      	ldr	r3, [pc, #260]	; (8001cdc <HAL_UART_MspInit+0x128>)
 8001bd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bdc:	4a3f      	ldr	r2, [pc, #252]	; (8001cdc <HAL_UART_MspInit+0x128>)
 8001bde:	f043 0310 	orr.w	r3, r3, #16
 8001be2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001be6:	4b3d      	ldr	r3, [pc, #244]	; (8001cdc <HAL_UART_MspInit+0x128>)
 8001be8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bec:	f003 0310 	and.w	r3, r3, #16
 8001bf0:	61bb      	str	r3, [r7, #24]
 8001bf2:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf4:	4b39      	ldr	r3, [pc, #228]	; (8001cdc <HAL_UART_MspInit+0x128>)
 8001bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bfa:	4a38      	ldr	r2, [pc, #224]	; (8001cdc <HAL_UART_MspInit+0x128>)
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c04:	4b35      	ldr	r3, [pc, #212]	; (8001cdc <HAL_UART_MspInit+0x128>)
 8001c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c20:	2300      	movs	r3, #0
 8001c22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001c24:	2304      	movs	r3, #4
 8001c26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c28:	f107 031c 	add.w	r3, r7, #28
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	482c      	ldr	r0, [pc, #176]	; (8001ce0 <HAL_UART_MspInit+0x12c>)
 8001c30:	f000 fda2 	bl	8002778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c34:	2340      	movs	r3, #64	; 0x40
 8001c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c40:	2300      	movs	r3, #0
 8001c42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c44:	2307      	movs	r3, #7
 8001c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c48:	f107 031c 	add.w	r3, r7, #28
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4824      	ldr	r0, [pc, #144]	; (8001ce0 <HAL_UART_MspInit+0x12c>)
 8001c50:	f000 fd92 	bl	8002778 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c54:	e03b      	b.n	8001cce <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART3)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a22      	ldr	r2, [pc, #136]	; (8001ce4 <HAL_UART_MspInit+0x130>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d136      	bne.n	8001cce <HAL_UART_MspInit+0x11a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c60:	4b1e      	ldr	r3, [pc, #120]	; (8001cdc <HAL_UART_MspInit+0x128>)
 8001c62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c66:	4a1d      	ldr	r2, [pc, #116]	; (8001cdc <HAL_UART_MspInit+0x128>)
 8001c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c6c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c70:	4b1a      	ldr	r3, [pc, #104]	; (8001cdc <HAL_UART_MspInit+0x128>)
 8001c72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c7e:	4b17      	ldr	r3, [pc, #92]	; (8001cdc <HAL_UART_MspInit+0x128>)
 8001c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c84:	4a15      	ldr	r2, [pc, #84]	; (8001cdc <HAL_UART_MspInit+0x128>)
 8001c86:	f043 0308 	orr.w	r3, r3, #8
 8001c8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c8e:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <HAL_UART_MspInit+0x128>)
 8001c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001c9c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001caa:	2300      	movs	r3, #0
 8001cac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cae:	2307      	movs	r3, #7
 8001cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cb2:	f107 031c 	add.w	r3, r7, #28
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	480b      	ldr	r0, [pc, #44]	; (8001ce8 <HAL_UART_MspInit+0x134>)
 8001cba:	f000 fd5d 	bl	8002778 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	2027      	movs	r0, #39	; 0x27
 8001cc4:	f000 fadf 	bl	8002286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001cc8:	2027      	movs	r0, #39	; 0x27
 8001cca:	f000 faf6 	bl	80022ba <HAL_NVIC_EnableIRQ>
}
 8001cce:	bf00      	nop
 8001cd0:	3730      	adds	r7, #48	; 0x30
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40011000 	.word	0x40011000
 8001cdc:	58024400 	.word	0x58024400
 8001ce0:	58020400 	.word	0x58020400
 8001ce4:	40004800 	.word	0x40004800
 8001ce8:	58020c00 	.word	0x58020c00

08001cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cfe:	e7fe      	b.n	8001cfe <HardFault_Handler+0x4>

08001d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d04:	e7fe      	b.n	8001d04 <MemManage_Handler+0x4>

08001d06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d0a:	e7fe      	b.n	8001d0a <BusFault_Handler+0x4>

08001d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d10:	e7fe      	b.n	8001d10 <UsageFault_Handler+0x4>

08001d12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d40:	f000 f978 	bl	8002034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d44:	bf00      	nop
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	f000 fef4 	bl	8002b3a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001d5a:	2002      	movs	r0, #2
 8001d5c:	f000 feed 	bl	8002b3a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001d60:	bf00      	nop
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001d68:	2004      	movs	r0, #4
 8001d6a:	f000 fee6 	bl	8002b3a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001d76:	2008      	movs	r0, #8
 8001d78:	f000 fedf 	bl	8002b3a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001d7c:	bf00      	nop
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001d84:	2010      	movs	r0, #16
 8001d86:	f000 fed8 	bl	8002b3a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001d92:	2040      	movs	r0, #64	; 0x40
 8001d94:	f000 fed1 	bl	8002b3a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001d98:	2080      	movs	r0, #128	; 0x80
 8001d9a:	f000 fece 	bl	8002b3a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001da8:	4802      	ldr	r0, [pc, #8]	; (8001db4 <USART3_IRQHandler+0x10>)
 8001daa:	f005 fb8d 	bl	80074c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	24000280 	.word	0x24000280

08001db8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001dbc:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <TIM7_IRQHandler+0x10>)
 8001dbe:	f004 fc21 	bl	8006604 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	24000540 	.word	0x24000540

08001dcc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001dd0:	4802      	ldr	r0, [pc, #8]	; (8001ddc <OTG_FS_IRQHandler+0x10>)
 8001dd2:	f001 f823 	bl	8002e1c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	24001a48 	.word	0x24001a48

08001de0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001de8:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <_sbrk+0x50>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d102      	bne.n	8001df6 <_sbrk+0x16>
		heap_end = &end;
 8001df0:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <_sbrk+0x50>)
 8001df2:	4a10      	ldr	r2, [pc, #64]	; (8001e34 <_sbrk+0x54>)
 8001df4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001df6:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <_sbrk+0x50>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <_sbrk+0x50>)
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4413      	add	r3, r2
 8001e04:	466a      	mov	r2, sp
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d907      	bls.n	8001e1a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001e0a:	f00b fd01 	bl	800d810 <__errno>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	230c      	movs	r3, #12
 8001e12:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001e14:	f04f 33ff 	mov.w	r3, #4294967295
 8001e18:	e006      	b.n	8001e28 <_sbrk+0x48>
	}

	heap_end += incr;
 8001e1a:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <_sbrk+0x50>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4413      	add	r3, r2
 8001e22:	4a03      	ldr	r2, [pc, #12]	; (8001e30 <_sbrk+0x50>)
 8001e24:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001e26:	68fb      	ldr	r3, [r7, #12]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	24000270 	.word	0x24000270
 8001e34:	24001e58 	.word	0x24001e58

08001e38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e3c:	4b29      	ldr	r3, [pc, #164]	; (8001ee4 <SystemInit+0xac>)
 8001e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e42:	4a28      	ldr	r2, [pc, #160]	; (8001ee4 <SystemInit+0xac>)
 8001e44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001e4c:	4b26      	ldr	r3, [pc, #152]	; (8001ee8 <SystemInit+0xb0>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a25      	ldr	r2, [pc, #148]	; (8001ee8 <SystemInit+0xb0>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001e58:	4b23      	ldr	r3, [pc, #140]	; (8001ee8 <SystemInit+0xb0>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001e5e:	4b22      	ldr	r3, [pc, #136]	; (8001ee8 <SystemInit+0xb0>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	4921      	ldr	r1, [pc, #132]	; (8001ee8 <SystemInit+0xb0>)
 8001e64:	4b21      	ldr	r3, [pc, #132]	; (8001eec <SystemInit+0xb4>)
 8001e66:	4013      	ands	r3, r2
 8001e68:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001e6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ee8 <SystemInit+0xb0>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001e70:	4b1d      	ldr	r3, [pc, #116]	; (8001ee8 <SystemInit+0xb0>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001e76:	4b1c      	ldr	r3, [pc, #112]	; (8001ee8 <SystemInit+0xb0>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001e7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <SystemInit+0xb0>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8001e82:	4b19      	ldr	r3, [pc, #100]	; (8001ee8 <SystemInit+0xb0>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001e88:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <SystemInit+0xb0>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001e8e:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <SystemInit+0xb0>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001e94:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <SystemInit+0xb0>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001e9a:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <SystemInit+0xb0>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001ea0:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <SystemInit+0xb0>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001ea6:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <SystemInit+0xb0>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001eac:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <SystemInit+0xb0>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a0d      	ldr	r2, [pc, #52]	; (8001ee8 <SystemInit+0xb0>)
 8001eb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eb6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <SystemInit+0xb0>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001ebe:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <SystemInit+0xb8>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <SystemInit+0xbc>)
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001eca:	d202      	bcs.n	8001ed2 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001ecc:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <SystemInit+0xc0>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ed2:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <SystemInit+0xac>)
 8001ed4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ed8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001eda:	bf00      	nop
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	e000ed00 	.word	0xe000ed00
 8001ee8:	58024400 	.word	0x58024400
 8001eec:	eaf6ed7f 	.word	0xeaf6ed7f
 8001ef0:	5c001000 	.word	0x5c001000
 8001ef4:	ffff0000 	.word	0xffff0000
 8001ef8:	51008108 	.word	0x51008108

08001efc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001efc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f34 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f00:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f02:	e003      	b.n	8001f0c <LoopCopyDataInit>

08001f04 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f04:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f06:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f08:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f0a:	3104      	adds	r1, #4

08001f0c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f0c:	480b      	ldr	r0, [pc, #44]	; (8001f3c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f0e:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f10:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f12:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f14:	d3f6      	bcc.n	8001f04 <CopyDataInit>
  ldr  r2, =_sbss
 8001f16:	4a0b      	ldr	r2, [pc, #44]	; (8001f44 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f18:	e002      	b.n	8001f20 <LoopFillZerobss>

08001f1a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f1a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f1c:	f842 3b04 	str.w	r3, [r2], #4

08001f20 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f20:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f22:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f24:	d3f9      	bcc.n	8001f1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f26:	f7ff ff87 	bl	8001e38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f2a:	f00b fc77 	bl	800d81c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f2e:	f7fe fe8f 	bl	8000c50 <main>
  bx  lr    
 8001f32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f34:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001f38:	0800dbd4 	.word	0x0800dbd4
  ldr  r0, =_sdata
 8001f3c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001f40:	240001ec 	.word	0x240001ec
  ldr  r2, =_sbss
 8001f44:	240001f0 	.word	0x240001f0
  ldr  r3, = _ebss
 8001f48:	24001e54 	.word	0x24001e54

08001f4c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f4c:	e7fe      	b.n	8001f4c <ADC3_IRQHandler>
	...

08001f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f56:	2003      	movs	r0, #3
 8001f58:	f000 f98a 	bl	8002270 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f5c:	f002 fdba 	bl	8004ad4 <HAL_RCC_GetSysClockFreq>
 8001f60:	4601      	mov	r1, r0
 8001f62:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <HAL_Init+0x68>)
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	0a1b      	lsrs	r3, r3, #8
 8001f68:	f003 030f 	and.w	r3, r3, #15
 8001f6c:	4a13      	ldr	r2, [pc, #76]	; (8001fbc <HAL_Init+0x6c>)
 8001f6e:	5cd3      	ldrb	r3, [r2, r3]
 8001f70:	f003 031f 	and.w	r3, r3, #31
 8001f74:	fa21 f303 	lsr.w	r3, r1, r3
 8001f78:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f7a:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <HAL_Init+0x68>)
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	4a0e      	ldr	r2, [pc, #56]	; (8001fbc <HAL_Init+0x6c>)
 8001f84:	5cd3      	ldrb	r3, [r2, r3]
 8001f86:	f003 031f 	and.w	r3, r3, #31
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f90:	4a0b      	ldr	r2, [pc, #44]	; (8001fc0 <HAL_Init+0x70>)
 8001f92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f94:	4a0b      	ldr	r2, [pc, #44]	; (8001fc4 <HAL_Init+0x74>)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	f000 f814 	bl	8001fc8 <HAL_InitTick>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e002      	b.n	8001fb0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001faa:	f7ff fc89 	bl	80018c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	58024400 	.word	0x58024400
 8001fbc:	0800db8c 	.word	0x0800db8c
 8001fc0:	2400000c 	.word	0x2400000c
 8001fc4:	24000008 	.word	0x24000008

08001fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001fd0:	4b15      	ldr	r3, [pc, #84]	; (8002028 <HAL_InitTick+0x60>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e021      	b.n	8002020 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001fdc:	4b13      	ldr	r3, [pc, #76]	; (800202c <HAL_InitTick+0x64>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4b11      	ldr	r3, [pc, #68]	; (8002028 <HAL_InitTick+0x60>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 f96f 	bl	80022d6 <HAL_SYSTICK_Config>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e00e      	b.n	8002020 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b0f      	cmp	r3, #15
 8002006:	d80a      	bhi.n	800201e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002008:	2200      	movs	r2, #0
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	f04f 30ff 	mov.w	r0, #4294967295
 8002010:	f000 f939 	bl	8002286 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002014:	4a06      	ldr	r2, [pc, #24]	; (8002030 <HAL_InitTick+0x68>)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800201a:	2300      	movs	r3, #0
 800201c:	e000      	b.n	8002020 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
}
 8002020:	4618      	mov	r0, r3
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	24000014 	.word	0x24000014
 800202c:	24000008 	.word	0x24000008
 8002030:	24000010 	.word	0x24000010

08002034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <HAL_IncTick+0x20>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	461a      	mov	r2, r3
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_IncTick+0x24>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4413      	add	r3, r2
 8002044:	4a04      	ldr	r2, [pc, #16]	; (8002058 <HAL_IncTick+0x24>)
 8002046:	6013      	str	r3, [r2, #0]
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	24000014 	.word	0x24000014
 8002058:	24000580 	.word	0x24000580

0800205c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  return uwTick;
 8002060:	4b03      	ldr	r3, [pc, #12]	; (8002070 <HAL_GetTick+0x14>)
 8002062:	681b      	ldr	r3, [r3, #0]
}
 8002064:	4618      	mov	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	24000580 	.word	0x24000580

08002074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800207c:	f7ff ffee 	bl	800205c <HAL_GetTick>
 8002080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800208c:	d005      	beq.n	800209a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800208e:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <HAL_Delay+0x40>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	461a      	mov	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4413      	add	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800209a:	bf00      	nop
 800209c:	f7ff ffde 	bl	800205c <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d8f7      	bhi.n	800209c <HAL_Delay+0x28>
  {
  }
}
 80020ac:	bf00      	nop
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	24000014 	.word	0x24000014

080020b8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80020bc:	4b03      	ldr	r3, [pc, #12]	; (80020cc <HAL_GetREVID+0x14>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	0c1b      	lsrs	r3, r3, #16
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	5c001000 	.word	0x5c001000

080020d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e0:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <__NVIC_SetPriorityGrouping+0x40>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020ec:	4013      	ands	r3, r2
 80020ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020f8:	4b06      	ldr	r3, [pc, #24]	; (8002114 <__NVIC_SetPriorityGrouping+0x44>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020fe:	4a04      	ldr	r2, [pc, #16]	; (8002110 <__NVIC_SetPriorityGrouping+0x40>)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	60d3      	str	r3, [r2, #12]
}
 8002104:	bf00      	nop
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	e000ed00 	.word	0xe000ed00
 8002114:	05fa0000 	.word	0x05fa0000

08002118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800211c:	4b04      	ldr	r3, [pc, #16]	; (8002130 <__NVIC_GetPriorityGrouping+0x18>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	0a1b      	lsrs	r3, r3, #8
 8002122:	f003 0307 	and.w	r3, r3, #7
}
 8002126:	4618      	mov	r0, r3
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800213e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002142:	2b00      	cmp	r3, #0
 8002144:	db0b      	blt.n	800215e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002146:	88fb      	ldrh	r3, [r7, #6]
 8002148:	f003 021f 	and.w	r2, r3, #31
 800214c:	4907      	ldr	r1, [pc, #28]	; (800216c <__NVIC_EnableIRQ+0x38>)
 800214e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002152:	095b      	lsrs	r3, r3, #5
 8002154:	2001      	movs	r0, #1
 8002156:	fa00 f202 	lsl.w	r2, r0, r2
 800215a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	e000e100 	.word	0xe000e100

08002170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	6039      	str	r1, [r7, #0]
 800217a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800217c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002180:	2b00      	cmp	r3, #0
 8002182:	db0a      	blt.n	800219a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	b2da      	uxtb	r2, r3
 8002188:	490c      	ldr	r1, [pc, #48]	; (80021bc <__NVIC_SetPriority+0x4c>)
 800218a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800218e:	0112      	lsls	r2, r2, #4
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	440b      	add	r3, r1
 8002194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002198:	e00a      	b.n	80021b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	b2da      	uxtb	r2, r3
 800219e:	4908      	ldr	r1, [pc, #32]	; (80021c0 <__NVIC_SetPriority+0x50>)
 80021a0:	88fb      	ldrh	r3, [r7, #6]
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	3b04      	subs	r3, #4
 80021a8:	0112      	lsls	r2, r2, #4
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	440b      	add	r3, r1
 80021ae:	761a      	strb	r2, [r3, #24]
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	e000e100 	.word	0xe000e100
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b089      	sub	sp, #36	; 0x24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f1c3 0307 	rsb	r3, r3, #7
 80021de:	2b04      	cmp	r3, #4
 80021e0:	bf28      	it	cs
 80021e2:	2304      	movcs	r3, #4
 80021e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	3304      	adds	r3, #4
 80021ea:	2b06      	cmp	r3, #6
 80021ec:	d902      	bls.n	80021f4 <NVIC_EncodePriority+0x30>
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	3b03      	subs	r3, #3
 80021f2:	e000      	b.n	80021f6 <NVIC_EncodePriority+0x32>
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f8:	f04f 32ff 	mov.w	r2, #4294967295
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43da      	mvns	r2, r3
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	401a      	ands	r2, r3
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800220c:	f04f 31ff 	mov.w	r1, #4294967295
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	fa01 f303 	lsl.w	r3, r1, r3
 8002216:	43d9      	mvns	r1, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800221c:	4313      	orrs	r3, r2
         );
}
 800221e:	4618      	mov	r0, r3
 8002220:	3724      	adds	r7, #36	; 0x24
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
	...

0800222c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3b01      	subs	r3, #1
 8002238:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800223c:	d301      	bcc.n	8002242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800223e:	2301      	movs	r3, #1
 8002240:	e00f      	b.n	8002262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002242:	4a0a      	ldr	r2, [pc, #40]	; (800226c <SysTick_Config+0x40>)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3b01      	subs	r3, #1
 8002248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800224a:	210f      	movs	r1, #15
 800224c:	f04f 30ff 	mov.w	r0, #4294967295
 8002250:	f7ff ff8e 	bl	8002170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002254:	4b05      	ldr	r3, [pc, #20]	; (800226c <SysTick_Config+0x40>)
 8002256:	2200      	movs	r2, #0
 8002258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800225a:	4b04      	ldr	r3, [pc, #16]	; (800226c <SysTick_Config+0x40>)
 800225c:	2207      	movs	r2, #7
 800225e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	e000e010 	.word	0xe000e010

08002270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7ff ff29 	bl	80020d0 <__NVIC_SetPriorityGrouping>
}
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b086      	sub	sp, #24
 800228a:	af00      	add	r7, sp, #0
 800228c:	4603      	mov	r3, r0
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	607a      	str	r2, [r7, #4]
 8002292:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002294:	f7ff ff40 	bl	8002118 <__NVIC_GetPriorityGrouping>
 8002298:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	68b9      	ldr	r1, [r7, #8]
 800229e:	6978      	ldr	r0, [r7, #20]
 80022a0:	f7ff ff90 	bl	80021c4 <NVIC_EncodePriority>
 80022a4:	4602      	mov	r2, r0
 80022a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022aa:	4611      	mov	r1, r2
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff ff5f 	bl	8002170 <__NVIC_SetPriority>
}
 80022b2:	bf00      	nop
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b082      	sub	sp, #8
 80022be:	af00      	add	r7, sp, #0
 80022c0:	4603      	mov	r3, r0
 80022c2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff ff33 	bl	8002134 <__NVIC_EnableIRQ>
}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b082      	sub	sp, #8
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7ff ffa4 	bl	800222c <SysTick_Config>
 80022e4:	4603      	mov	r3, r0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e205      	b.n	800270e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d004      	beq.n	8002318 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2280      	movs	r2, #128	; 0x80
 8002312:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e1fa      	b.n	800270e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a8c      	ldr	r2, [pc, #560]	; (8002550 <HAL_DMA_Abort_IT+0x260>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d04a      	beq.n	80023b8 <HAL_DMA_Abort_IT+0xc8>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a8b      	ldr	r2, [pc, #556]	; (8002554 <HAL_DMA_Abort_IT+0x264>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d045      	beq.n	80023b8 <HAL_DMA_Abort_IT+0xc8>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a89      	ldr	r2, [pc, #548]	; (8002558 <HAL_DMA_Abort_IT+0x268>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d040      	beq.n	80023b8 <HAL_DMA_Abort_IT+0xc8>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a88      	ldr	r2, [pc, #544]	; (800255c <HAL_DMA_Abort_IT+0x26c>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d03b      	beq.n	80023b8 <HAL_DMA_Abort_IT+0xc8>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a86      	ldr	r2, [pc, #536]	; (8002560 <HAL_DMA_Abort_IT+0x270>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d036      	beq.n	80023b8 <HAL_DMA_Abort_IT+0xc8>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a85      	ldr	r2, [pc, #532]	; (8002564 <HAL_DMA_Abort_IT+0x274>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d031      	beq.n	80023b8 <HAL_DMA_Abort_IT+0xc8>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a83      	ldr	r2, [pc, #524]	; (8002568 <HAL_DMA_Abort_IT+0x278>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d02c      	beq.n	80023b8 <HAL_DMA_Abort_IT+0xc8>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a82      	ldr	r2, [pc, #520]	; (800256c <HAL_DMA_Abort_IT+0x27c>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d027      	beq.n	80023b8 <HAL_DMA_Abort_IT+0xc8>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a80      	ldr	r2, [pc, #512]	; (8002570 <HAL_DMA_Abort_IT+0x280>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d022      	beq.n	80023b8 <HAL_DMA_Abort_IT+0xc8>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a7f      	ldr	r2, [pc, #508]	; (8002574 <HAL_DMA_Abort_IT+0x284>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d01d      	beq.n	80023b8 <HAL_DMA_Abort_IT+0xc8>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a7d      	ldr	r2, [pc, #500]	; (8002578 <HAL_DMA_Abort_IT+0x288>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d018      	beq.n	80023b8 <HAL_DMA_Abort_IT+0xc8>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a7c      	ldr	r2, [pc, #496]	; (800257c <HAL_DMA_Abort_IT+0x28c>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d013      	beq.n	80023b8 <HAL_DMA_Abort_IT+0xc8>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a7a      	ldr	r2, [pc, #488]	; (8002580 <HAL_DMA_Abort_IT+0x290>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d00e      	beq.n	80023b8 <HAL_DMA_Abort_IT+0xc8>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a79      	ldr	r2, [pc, #484]	; (8002584 <HAL_DMA_Abort_IT+0x294>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d009      	beq.n	80023b8 <HAL_DMA_Abort_IT+0xc8>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a77      	ldr	r2, [pc, #476]	; (8002588 <HAL_DMA_Abort_IT+0x298>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d004      	beq.n	80023b8 <HAL_DMA_Abort_IT+0xc8>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a76      	ldr	r2, [pc, #472]	; (800258c <HAL_DMA_Abort_IT+0x29c>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d101      	bne.n	80023bc <HAL_DMA_Abort_IT+0xcc>
 80023b8:	2301      	movs	r3, #1
 80023ba:	e000      	b.n	80023be <HAL_DMA_Abort_IT+0xce>
 80023bc:	2300      	movs	r3, #0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d065      	beq.n	800248e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2204      	movs	r2, #4
 80023c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a60      	ldr	r2, [pc, #384]	; (8002550 <HAL_DMA_Abort_IT+0x260>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d04a      	beq.n	800246a <HAL_DMA_Abort_IT+0x17a>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a5e      	ldr	r2, [pc, #376]	; (8002554 <HAL_DMA_Abort_IT+0x264>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d045      	beq.n	800246a <HAL_DMA_Abort_IT+0x17a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a5d      	ldr	r2, [pc, #372]	; (8002558 <HAL_DMA_Abort_IT+0x268>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d040      	beq.n	800246a <HAL_DMA_Abort_IT+0x17a>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a5b      	ldr	r2, [pc, #364]	; (800255c <HAL_DMA_Abort_IT+0x26c>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d03b      	beq.n	800246a <HAL_DMA_Abort_IT+0x17a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a5a      	ldr	r2, [pc, #360]	; (8002560 <HAL_DMA_Abort_IT+0x270>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d036      	beq.n	800246a <HAL_DMA_Abort_IT+0x17a>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a58      	ldr	r2, [pc, #352]	; (8002564 <HAL_DMA_Abort_IT+0x274>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d031      	beq.n	800246a <HAL_DMA_Abort_IT+0x17a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a57      	ldr	r2, [pc, #348]	; (8002568 <HAL_DMA_Abort_IT+0x278>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d02c      	beq.n	800246a <HAL_DMA_Abort_IT+0x17a>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a55      	ldr	r2, [pc, #340]	; (800256c <HAL_DMA_Abort_IT+0x27c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d027      	beq.n	800246a <HAL_DMA_Abort_IT+0x17a>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a54      	ldr	r2, [pc, #336]	; (8002570 <HAL_DMA_Abort_IT+0x280>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d022      	beq.n	800246a <HAL_DMA_Abort_IT+0x17a>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a52      	ldr	r2, [pc, #328]	; (8002574 <HAL_DMA_Abort_IT+0x284>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d01d      	beq.n	800246a <HAL_DMA_Abort_IT+0x17a>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a51      	ldr	r2, [pc, #324]	; (8002578 <HAL_DMA_Abort_IT+0x288>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d018      	beq.n	800246a <HAL_DMA_Abort_IT+0x17a>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a4f      	ldr	r2, [pc, #316]	; (800257c <HAL_DMA_Abort_IT+0x28c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d013      	beq.n	800246a <HAL_DMA_Abort_IT+0x17a>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a4e      	ldr	r2, [pc, #312]	; (8002580 <HAL_DMA_Abort_IT+0x290>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d00e      	beq.n	800246a <HAL_DMA_Abort_IT+0x17a>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a4c      	ldr	r2, [pc, #304]	; (8002584 <HAL_DMA_Abort_IT+0x294>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d009      	beq.n	800246a <HAL_DMA_Abort_IT+0x17a>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a4b      	ldr	r2, [pc, #300]	; (8002588 <HAL_DMA_Abort_IT+0x298>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d004      	beq.n	800246a <HAL_DMA_Abort_IT+0x17a>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a49      	ldr	r2, [pc, #292]	; (800258c <HAL_DMA_Abort_IT+0x29c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d108      	bne.n	800247c <HAL_DMA_Abort_IT+0x18c>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0201 	bic.w	r2, r2, #1
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	e147      	b.n	800270c <HAL_DMA_Abort_IT+0x41c>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0201 	bic.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	e13e      	b.n	800270c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 020e 	bic.w	r2, r2, #14
 800249c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a2b      	ldr	r2, [pc, #172]	; (8002550 <HAL_DMA_Abort_IT+0x260>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d04a      	beq.n	800253e <HAL_DMA_Abort_IT+0x24e>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a29      	ldr	r2, [pc, #164]	; (8002554 <HAL_DMA_Abort_IT+0x264>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d045      	beq.n	800253e <HAL_DMA_Abort_IT+0x24e>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a28      	ldr	r2, [pc, #160]	; (8002558 <HAL_DMA_Abort_IT+0x268>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d040      	beq.n	800253e <HAL_DMA_Abort_IT+0x24e>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a26      	ldr	r2, [pc, #152]	; (800255c <HAL_DMA_Abort_IT+0x26c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d03b      	beq.n	800253e <HAL_DMA_Abort_IT+0x24e>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a25      	ldr	r2, [pc, #148]	; (8002560 <HAL_DMA_Abort_IT+0x270>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d036      	beq.n	800253e <HAL_DMA_Abort_IT+0x24e>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a23      	ldr	r2, [pc, #140]	; (8002564 <HAL_DMA_Abort_IT+0x274>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d031      	beq.n	800253e <HAL_DMA_Abort_IT+0x24e>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a22      	ldr	r2, [pc, #136]	; (8002568 <HAL_DMA_Abort_IT+0x278>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d02c      	beq.n	800253e <HAL_DMA_Abort_IT+0x24e>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a20      	ldr	r2, [pc, #128]	; (800256c <HAL_DMA_Abort_IT+0x27c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d027      	beq.n	800253e <HAL_DMA_Abort_IT+0x24e>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a1f      	ldr	r2, [pc, #124]	; (8002570 <HAL_DMA_Abort_IT+0x280>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d022      	beq.n	800253e <HAL_DMA_Abort_IT+0x24e>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a1d      	ldr	r2, [pc, #116]	; (8002574 <HAL_DMA_Abort_IT+0x284>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d01d      	beq.n	800253e <HAL_DMA_Abort_IT+0x24e>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a1c      	ldr	r2, [pc, #112]	; (8002578 <HAL_DMA_Abort_IT+0x288>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d018      	beq.n	800253e <HAL_DMA_Abort_IT+0x24e>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a1a      	ldr	r2, [pc, #104]	; (800257c <HAL_DMA_Abort_IT+0x28c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d013      	beq.n	800253e <HAL_DMA_Abort_IT+0x24e>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a19      	ldr	r2, [pc, #100]	; (8002580 <HAL_DMA_Abort_IT+0x290>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d00e      	beq.n	800253e <HAL_DMA_Abort_IT+0x24e>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a17      	ldr	r2, [pc, #92]	; (8002584 <HAL_DMA_Abort_IT+0x294>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d009      	beq.n	800253e <HAL_DMA_Abort_IT+0x24e>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a16      	ldr	r2, [pc, #88]	; (8002588 <HAL_DMA_Abort_IT+0x298>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d004      	beq.n	800253e <HAL_DMA_Abort_IT+0x24e>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a14      	ldr	r2, [pc, #80]	; (800258c <HAL_DMA_Abort_IT+0x29c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d128      	bne.n	8002590 <HAL_DMA_Abort_IT+0x2a0>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0201 	bic.w	r2, r2, #1
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	e027      	b.n	80025a0 <HAL_DMA_Abort_IT+0x2b0>
 8002550:	40020010 	.word	0x40020010
 8002554:	40020028 	.word	0x40020028
 8002558:	40020040 	.word	0x40020040
 800255c:	40020058 	.word	0x40020058
 8002560:	40020070 	.word	0x40020070
 8002564:	40020088 	.word	0x40020088
 8002568:	400200a0 	.word	0x400200a0
 800256c:	400200b8 	.word	0x400200b8
 8002570:	40020410 	.word	0x40020410
 8002574:	40020428 	.word	0x40020428
 8002578:	40020440 	.word	0x40020440
 800257c:	40020458 	.word	0x40020458
 8002580:	40020470 	.word	0x40020470
 8002584:	40020488 	.word	0x40020488
 8002588:	400204a0 	.word	0x400204a0
 800258c:	400204b8 	.word	0x400204b8
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 0201 	bic.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a5c      	ldr	r2, [pc, #368]	; (8002718 <HAL_DMA_Abort_IT+0x428>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d072      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a5b      	ldr	r2, [pc, #364]	; (800271c <HAL_DMA_Abort_IT+0x42c>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d06d      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a59      	ldr	r2, [pc, #356]	; (8002720 <HAL_DMA_Abort_IT+0x430>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d068      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a58      	ldr	r2, [pc, #352]	; (8002724 <HAL_DMA_Abort_IT+0x434>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d063      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a56      	ldr	r2, [pc, #344]	; (8002728 <HAL_DMA_Abort_IT+0x438>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d05e      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a55      	ldr	r2, [pc, #340]	; (800272c <HAL_DMA_Abort_IT+0x43c>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d059      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a53      	ldr	r2, [pc, #332]	; (8002730 <HAL_DMA_Abort_IT+0x440>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d054      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a52      	ldr	r2, [pc, #328]	; (8002734 <HAL_DMA_Abort_IT+0x444>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d04f      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a50      	ldr	r2, [pc, #320]	; (8002738 <HAL_DMA_Abort_IT+0x448>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d04a      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a4f      	ldr	r2, [pc, #316]	; (800273c <HAL_DMA_Abort_IT+0x44c>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d045      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a4d      	ldr	r2, [pc, #308]	; (8002740 <HAL_DMA_Abort_IT+0x450>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d040      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a4c      	ldr	r2, [pc, #304]	; (8002744 <HAL_DMA_Abort_IT+0x454>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d03b      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a4a      	ldr	r2, [pc, #296]	; (8002748 <HAL_DMA_Abort_IT+0x458>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d036      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a49      	ldr	r2, [pc, #292]	; (800274c <HAL_DMA_Abort_IT+0x45c>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d031      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a47      	ldr	r2, [pc, #284]	; (8002750 <HAL_DMA_Abort_IT+0x460>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d02c      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a46      	ldr	r2, [pc, #280]	; (8002754 <HAL_DMA_Abort_IT+0x464>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d027      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a44      	ldr	r2, [pc, #272]	; (8002758 <HAL_DMA_Abort_IT+0x468>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d022      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a43      	ldr	r2, [pc, #268]	; (800275c <HAL_DMA_Abort_IT+0x46c>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d01d      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a41      	ldr	r2, [pc, #260]	; (8002760 <HAL_DMA_Abort_IT+0x470>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d018      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a40      	ldr	r2, [pc, #256]	; (8002764 <HAL_DMA_Abort_IT+0x474>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d013      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a3e      	ldr	r2, [pc, #248]	; (8002768 <HAL_DMA_Abort_IT+0x478>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d00e      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a3d      	ldr	r2, [pc, #244]	; (800276c <HAL_DMA_Abort_IT+0x47c>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d009      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a3b      	ldr	r2, [pc, #236]	; (8002770 <HAL_DMA_Abort_IT+0x480>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d004      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a3a      	ldr	r2, [pc, #232]	; (8002774 <HAL_DMA_Abort_IT+0x484>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d101      	bne.n	8002694 <HAL_DMA_Abort_IT+0x3a4>
 8002690:	2301      	movs	r3, #1
 8002692:	e000      	b.n	8002696 <HAL_DMA_Abort_IT+0x3a6>
 8002694:	2300      	movs	r3, #0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d028      	beq.n	80026ec <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026a8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ae:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b4:	f003 031f 	and.w	r3, r3, #31
 80026b8:	2201      	movs	r2, #1
 80026ba:	409a      	lsls	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80026c8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00c      	beq.n	80026ec <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026e0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80026ea:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40020010 	.word	0x40020010
 800271c:	40020028 	.word	0x40020028
 8002720:	40020040 	.word	0x40020040
 8002724:	40020058 	.word	0x40020058
 8002728:	40020070 	.word	0x40020070
 800272c:	40020088 	.word	0x40020088
 8002730:	400200a0 	.word	0x400200a0
 8002734:	400200b8 	.word	0x400200b8
 8002738:	40020410 	.word	0x40020410
 800273c:	40020428 	.word	0x40020428
 8002740:	40020440 	.word	0x40020440
 8002744:	40020458 	.word	0x40020458
 8002748:	40020470 	.word	0x40020470
 800274c:	40020488 	.word	0x40020488
 8002750:	400204a0 	.word	0x400204a0
 8002754:	400204b8 	.word	0x400204b8
 8002758:	58025408 	.word	0x58025408
 800275c:	5802541c 	.word	0x5802541c
 8002760:	58025430 	.word	0x58025430
 8002764:	58025444 	.word	0x58025444
 8002768:	58025458 	.word	0x58025458
 800276c:	5802546c 	.word	0x5802546c
 8002770:	58025480 	.word	0x58025480
 8002774:	58025494 	.word	0x58025494

08002778 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002778:	b480      	push	{r7}
 800277a:	b089      	sub	sp, #36	; 0x24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002782:	2300      	movs	r3, #0
 8002784:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002786:	4b89      	ldr	r3, [pc, #548]	; (80029ac <HAL_GPIO_Init+0x234>)
 8002788:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800278a:	e194      	b.n	8002ab6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	2101      	movs	r1, #1
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	fa01 f303 	lsl.w	r3, r1, r3
 8002798:	4013      	ands	r3, r2
 800279a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 8186 	beq.w	8002ab0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d00b      	beq.n	80027c4 <HAL_GPIO_Init+0x4c>
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d007      	beq.n	80027c4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027b8:	2b11      	cmp	r3, #17
 80027ba:	d003      	beq.n	80027c4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b12      	cmp	r3, #18
 80027c2:	d130      	bne.n	8002826 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	2203      	movs	r2, #3
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4013      	ands	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	68da      	ldr	r2, [r3, #12]
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027fa:	2201      	movs	r2, #1
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43db      	mvns	r3, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4013      	ands	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	091b      	lsrs	r3, r3, #4
 8002810:	f003 0201 	and.w	r2, r3, #1
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4313      	orrs	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	2203      	movs	r2, #3
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43db      	mvns	r3, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4013      	ands	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	689a      	ldr	r2, [r3, #8]
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4313      	orrs	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b02      	cmp	r3, #2
 800285c:	d003      	beq.n	8002866 <HAL_GPIO_Init+0xee>
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b12      	cmp	r3, #18
 8002864:	d123      	bne.n	80028ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	08da      	lsrs	r2, r3, #3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3208      	adds	r2, #8
 800286e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002872:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	220f      	movs	r2, #15
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43db      	mvns	r3, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4013      	ands	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	691a      	ldr	r2, [r3, #16]
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4313      	orrs	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	08da      	lsrs	r2, r3, #3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3208      	adds	r2, #8
 80028a8:	69b9      	ldr	r1, [r7, #24]
 80028aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	2203      	movs	r2, #3
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43db      	mvns	r3, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4013      	ands	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f003 0203 	and.w	r2, r3, #3
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4313      	orrs	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 80e0 	beq.w	8002ab0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f0:	4b2f      	ldr	r3, [pc, #188]	; (80029b0 <HAL_GPIO_Init+0x238>)
 80028f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028f6:	4a2e      	ldr	r2, [pc, #184]	; (80029b0 <HAL_GPIO_Init+0x238>)
 80028f8:	f043 0302 	orr.w	r3, r3, #2
 80028fc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002900:	4b2b      	ldr	r3, [pc, #172]	; (80029b0 <HAL_GPIO_Init+0x238>)
 8002902:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800290e:	4a29      	ldr	r2, [pc, #164]	; (80029b4 <HAL_GPIO_Init+0x23c>)
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	089b      	lsrs	r3, r3, #2
 8002914:	3302      	adds	r3, #2
 8002916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800291a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	220f      	movs	r2, #15
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43db      	mvns	r3, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4013      	ands	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a20      	ldr	r2, [pc, #128]	; (80029b8 <HAL_GPIO_Init+0x240>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d052      	beq.n	80029e0 <HAL_GPIO_Init+0x268>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a1f      	ldr	r2, [pc, #124]	; (80029bc <HAL_GPIO_Init+0x244>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d031      	beq.n	80029a6 <HAL_GPIO_Init+0x22e>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a1e      	ldr	r2, [pc, #120]	; (80029c0 <HAL_GPIO_Init+0x248>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d02b      	beq.n	80029a2 <HAL_GPIO_Init+0x22a>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a1d      	ldr	r2, [pc, #116]	; (80029c4 <HAL_GPIO_Init+0x24c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d025      	beq.n	800299e <HAL_GPIO_Init+0x226>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a1c      	ldr	r2, [pc, #112]	; (80029c8 <HAL_GPIO_Init+0x250>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d01f      	beq.n	800299a <HAL_GPIO_Init+0x222>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a1b      	ldr	r2, [pc, #108]	; (80029cc <HAL_GPIO_Init+0x254>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d019      	beq.n	8002996 <HAL_GPIO_Init+0x21e>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a1a      	ldr	r2, [pc, #104]	; (80029d0 <HAL_GPIO_Init+0x258>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d013      	beq.n	8002992 <HAL_GPIO_Init+0x21a>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a19      	ldr	r2, [pc, #100]	; (80029d4 <HAL_GPIO_Init+0x25c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d00d      	beq.n	800298e <HAL_GPIO_Init+0x216>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a18      	ldr	r2, [pc, #96]	; (80029d8 <HAL_GPIO_Init+0x260>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d007      	beq.n	800298a <HAL_GPIO_Init+0x212>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a17      	ldr	r2, [pc, #92]	; (80029dc <HAL_GPIO_Init+0x264>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d101      	bne.n	8002986 <HAL_GPIO_Init+0x20e>
 8002982:	2309      	movs	r3, #9
 8002984:	e02d      	b.n	80029e2 <HAL_GPIO_Init+0x26a>
 8002986:	230a      	movs	r3, #10
 8002988:	e02b      	b.n	80029e2 <HAL_GPIO_Init+0x26a>
 800298a:	2308      	movs	r3, #8
 800298c:	e029      	b.n	80029e2 <HAL_GPIO_Init+0x26a>
 800298e:	2307      	movs	r3, #7
 8002990:	e027      	b.n	80029e2 <HAL_GPIO_Init+0x26a>
 8002992:	2306      	movs	r3, #6
 8002994:	e025      	b.n	80029e2 <HAL_GPIO_Init+0x26a>
 8002996:	2305      	movs	r3, #5
 8002998:	e023      	b.n	80029e2 <HAL_GPIO_Init+0x26a>
 800299a:	2304      	movs	r3, #4
 800299c:	e021      	b.n	80029e2 <HAL_GPIO_Init+0x26a>
 800299e:	2303      	movs	r3, #3
 80029a0:	e01f      	b.n	80029e2 <HAL_GPIO_Init+0x26a>
 80029a2:	2302      	movs	r3, #2
 80029a4:	e01d      	b.n	80029e2 <HAL_GPIO_Init+0x26a>
 80029a6:	2301      	movs	r3, #1
 80029a8:	e01b      	b.n	80029e2 <HAL_GPIO_Init+0x26a>
 80029aa:	bf00      	nop
 80029ac:	58000080 	.word	0x58000080
 80029b0:	58024400 	.word	0x58024400
 80029b4:	58000400 	.word	0x58000400
 80029b8:	58020000 	.word	0x58020000
 80029bc:	58020400 	.word	0x58020400
 80029c0:	58020800 	.word	0x58020800
 80029c4:	58020c00 	.word	0x58020c00
 80029c8:	58021000 	.word	0x58021000
 80029cc:	58021400 	.word	0x58021400
 80029d0:	58021800 	.word	0x58021800
 80029d4:	58021c00 	.word	0x58021c00
 80029d8:	58022000 	.word	0x58022000
 80029dc:	58022400 	.word	0x58022400
 80029e0:	2300      	movs	r3, #0
 80029e2:	69fa      	ldr	r2, [r7, #28]
 80029e4:	f002 0203 	and.w	r2, r2, #3
 80029e8:	0092      	lsls	r2, r2, #2
 80029ea:	4093      	lsls	r3, r2
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029f2:	4938      	ldr	r1, [pc, #224]	; (8002ad4 <HAL_GPIO_Init+0x35c>)
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	089b      	lsrs	r3, r3, #2
 80029f8:	3302      	adds	r3, #2
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	43db      	mvns	r3, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4013      	ands	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4013      	ands	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002a7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4013      	ands	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002aa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f47f ae63 	bne.w	800278c <HAL_GPIO_Init+0x14>
  }
}
 8002ac6:	bf00      	nop
 8002ac8:	3724      	adds	r7, #36	; 0x24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	58000400 	.word	0x58000400

08002ad8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	691a      	ldr	r2, [r3, #16]
 8002ae8:	887b      	ldrh	r3, [r7, #2]
 8002aea:	4013      	ands	r3, r2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d002      	beq.n	8002af6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002af0:	2301      	movs	r3, #1
 8002af2:	73fb      	strb	r3, [r7, #15]
 8002af4:	e001      	b.n	8002afa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002af6:	2300      	movs	r3, #0
 8002af8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	807b      	strh	r3, [r7, #2]
 8002b14:	4613      	mov	r3, r2
 8002b16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b18:	787b      	ldrb	r3, [r7, #1]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b1e:	887a      	ldrh	r2, [r7, #2]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002b24:	e003      	b.n	8002b2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002b26:	887b      	ldrh	r3, [r7, #2]
 8002b28:	041a      	lsls	r2, r3, #16
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	619a      	str	r2, [r3, #24]
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b082      	sub	sp, #8
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	4603      	mov	r3, r0
 8002b42:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b48:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002b4c:	88fb      	ldrh	r3, [r7, #6]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d008      	beq.n	8002b66 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b58:	88fb      	ldrh	r3, [r7, #6]
 8002b5a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b5e:	88fb      	ldrh	r3, [r7, #6]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7fd fd41 	bl	80005e8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002b66:	bf00      	nop
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b70:	b08f      	sub	sp, #60	; 0x3c
 8002b72:	af0a      	add	r7, sp, #40	; 0x28
 8002b74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e116      	b.n	8002dae <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d106      	bne.n	8002ba0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f00a fb36 	bl	800d20c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2203      	movs	r2, #3
 8002ba4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d102      	bne.n	8002bba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f007 fba3 	bl	800a30a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	603b      	str	r3, [r7, #0]
 8002bca:	687e      	ldr	r6, [r7, #4]
 8002bcc:	466d      	mov	r5, sp
 8002bce:	f106 0410 	add.w	r4, r6, #16
 8002bd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bde:	e885 0003 	stmia.w	r5, {r0, r1}
 8002be2:	1d33      	adds	r3, r6, #4
 8002be4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002be6:	6838      	ldr	r0, [r7, #0]
 8002be8:	f007 fa7a 	bl	800a0e0 <USB_CoreInit>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d005      	beq.n	8002bfe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e0d7      	b.n	8002dae <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2100      	movs	r1, #0
 8002c04:	4618      	mov	r0, r3
 8002c06:	f007 fb91 	bl	800a32c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	73fb      	strb	r3, [r7, #15]
 8002c0e:	e04a      	b.n	8002ca6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c10:	7bfa      	ldrb	r2, [r7, #15]
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	1a9b      	subs	r3, r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	333d      	adds	r3, #61	; 0x3d
 8002c20:	2201      	movs	r2, #1
 8002c22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c24:	7bfa      	ldrb	r2, [r7, #15]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	1a9b      	subs	r3, r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	333c      	adds	r3, #60	; 0x3c
 8002c34:	7bfa      	ldrb	r2, [r7, #15]
 8002c36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c38:	7bfa      	ldrb	r2, [r7, #15]
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
 8002c3c:	b298      	uxth	r0, r3
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	4613      	mov	r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	1a9b      	subs	r3, r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	3342      	adds	r3, #66	; 0x42
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c50:	7bfa      	ldrb	r2, [r7, #15]
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	4613      	mov	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	1a9b      	subs	r3, r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	333f      	adds	r3, #63	; 0x3f
 8002c60:	2200      	movs	r2, #0
 8002c62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c64:	7bfa      	ldrb	r2, [r7, #15]
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	1a9b      	subs	r3, r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	3344      	adds	r3, #68	; 0x44
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c78:	7bfa      	ldrb	r2, [r7, #15]
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	1a9b      	subs	r3, r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	3348      	adds	r3, #72	; 0x48
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c8c:	7bfa      	ldrb	r2, [r7, #15]
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	4613      	mov	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	1a9b      	subs	r3, r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	3350      	adds	r3, #80	; 0x50
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ca0:	7bfb      	ldrb	r3, [r7, #15]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	73fb      	strb	r3, [r7, #15]
 8002ca6:	7bfa      	ldrb	r2, [r7, #15]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d3af      	bcc.n	8002c10 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	73fb      	strb	r3, [r7, #15]
 8002cb4:	e044      	b.n	8002d40 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cb6:	7bfa      	ldrb	r2, [r7, #15]
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	1a9b      	subs	r3, r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	440b      	add	r3, r1
 8002cc4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002cc8:	2200      	movs	r2, #0
 8002cca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ccc:	7bfa      	ldrb	r2, [r7, #15]
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	1a9b      	subs	r3, r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	440b      	add	r3, r1
 8002cda:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002cde:	7bfa      	ldrb	r2, [r7, #15]
 8002ce0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ce2:	7bfa      	ldrb	r2, [r7, #15]
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	1a9b      	subs	r3, r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	440b      	add	r3, r1
 8002cf0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cf8:	7bfa      	ldrb	r2, [r7, #15]
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	1a9b      	subs	r3, r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d0e:	7bfa      	ldrb	r2, [r7, #15]
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	1a9b      	subs	r3, r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d24:	7bfa      	ldrb	r2, [r7, #15]
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	1a9b      	subs	r3, r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	73fb      	strb	r3, [r7, #15]
 8002d40:	7bfa      	ldrb	r2, [r7, #15]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d3b5      	bcc.n	8002cb6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	603b      	str	r3, [r7, #0]
 8002d50:	687e      	ldr	r6, [r7, #4]
 8002d52:	466d      	mov	r5, sp
 8002d54:	f106 0410 	add.w	r4, r6, #16
 8002d58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d60:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d64:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d68:	1d33      	adds	r3, r6, #4
 8002d6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d6c:	6838      	ldr	r0, [r7, #0]
 8002d6e:	f007 fb07 	bl	800a380 <USB_DevInit>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d005      	beq.n	8002d84 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e014      	b.n	8002dae <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d102      	bne.n	8002da2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f001 f891 	bl	8003ec4 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f008 faee 	bl	800b388 <USB_DevDisconnect>

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002db6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b084      	sub	sp, #16
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <HAL_PCD_Start+0x1c>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e020      	b.n	8002e14 <HAL_PCD_Start+0x5e>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d109      	bne.n	8002df6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d005      	beq.n	8002df6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f008 faac 	bl	800b358 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f007 fa6f 	bl	800a2e8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e1c:	b590      	push	{r4, r7, lr}
 8002e1e:	b08d      	sub	sp, #52	; 0x34
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
 8002e2c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f008 fb53 	bl	800b4de <USB_GetMode>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f040 83ca 	bne.w	80035d4 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f008 fab7 	bl	800b3b8 <USB_ReadInterrupts>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 83c0 	beq.w	80035d2 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f008 faae 	bl	800b3b8 <USB_ReadInterrupts>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d107      	bne.n	8002e76 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695a      	ldr	r2, [r3, #20]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f002 0202 	and.w	r2, r2, #2
 8002e74:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f008 fa9c 	bl	800b3b8 <USB_ReadInterrupts>
 8002e80:	4603      	mov	r3, r0
 8002e82:	f003 0310 	and.w	r3, r3, #16
 8002e86:	2b10      	cmp	r3, #16
 8002e88:	d161      	bne.n	8002f4e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	699a      	ldr	r2, [r3, #24]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0210 	bic.w	r2, r2, #16
 8002e98:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	f003 020f 	and.w	r2, r3, #15
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	1a9b      	subs	r3, r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	0c5b      	lsrs	r3, r3, #17
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d124      	bne.n	8002f10 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002ecc:	4013      	ands	r3, r2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d035      	beq.n	8002f3e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	091b      	lsrs	r3, r3, #4
 8002eda:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002edc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	6a38      	ldr	r0, [r7, #32]
 8002ee6:	f008 f914 	bl	800b112 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	68da      	ldr	r2, [r3, #12]
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	091b      	lsrs	r3, r3, #4
 8002ef2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ef6:	441a      	add	r2, r3
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	699a      	ldr	r2, [r3, #24]
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	091b      	lsrs	r3, r3, #4
 8002f04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f08:	441a      	add	r2, r3
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	619a      	str	r2, [r3, #24]
 8002f0e:	e016      	b.n	8002f3e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	0c5b      	lsrs	r3, r3, #17
 8002f14:	f003 030f 	and.w	r3, r3, #15
 8002f18:	2b06      	cmp	r3, #6
 8002f1a:	d110      	bne.n	8002f3e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f22:	2208      	movs	r2, #8
 8002f24:	4619      	mov	r1, r3
 8002f26:	6a38      	ldr	r0, [r7, #32]
 8002f28:	f008 f8f3 	bl	800b112 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	699a      	ldr	r2, [r3, #24]
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	091b      	lsrs	r3, r3, #4
 8002f34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f38:	441a      	add	r2, r3
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	699a      	ldr	r2, [r3, #24]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f042 0210 	orr.w	r2, r2, #16
 8002f4c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f008 fa30 	bl	800b3b8 <USB_ReadInterrupts>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f5e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f62:	d16e      	bne.n	8003042 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f008 fa36 	bl	800b3de <USB_ReadDevAllOutEpInterrupt>
 8002f72:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002f74:	e062      	b.n	800303c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d057      	beq.n	8003030 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	4611      	mov	r1, r2
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f008 fa5b 	bl	800b446 <USB_ReadDevOutEPInterrupt>
 8002f90:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00c      	beq.n	8002fb6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	015a      	lsls	r2, r3, #5
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fa8:	461a      	mov	r2, r3
 8002faa:	2301      	movs	r3, #1
 8002fac:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002fae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 fddd 	bl	8003b70 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	f003 0308 	and.w	r3, r3, #8
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00c      	beq.n	8002fda <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	015a      	lsls	r2, r3, #5
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fcc:	461a      	mov	r2, r3
 8002fce:	2308      	movs	r3, #8
 8002fd0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002fd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 fed7 	bl	8003d88 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	f003 0310 	and.w	r3, r3, #16
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d008      	beq.n	8002ff6 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	015a      	lsls	r2, r3, #5
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	4413      	add	r3, r2
 8002fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	2310      	movs	r3, #16
 8002ff4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	f003 0320 	and.w	r3, r3, #32
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d008      	beq.n	8003012 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	015a      	lsls	r2, r3, #5
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	4413      	add	r3, r2
 8003008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800300c:	461a      	mov	r2, r3
 800300e:	2320      	movs	r3, #32
 8003010:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d009      	beq.n	8003030 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	015a      	lsls	r2, r3, #5
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	4413      	add	r3, r2
 8003024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003028:	461a      	mov	r2, r3
 800302a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800302e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	3301      	adds	r3, #1
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003038:	085b      	lsrs	r3, r3, #1
 800303a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800303c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303e:	2b00      	cmp	r3, #0
 8003040:	d199      	bne.n	8002f76 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f008 f9b6 	bl	800b3b8 <USB_ReadInterrupts>
 800304c:	4603      	mov	r3, r0
 800304e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003052:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003056:	f040 80c0 	bne.w	80031da <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f008 f9d7 	bl	800b412 <USB_ReadDevAllInEpInterrupt>
 8003064:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003066:	2300      	movs	r3, #0
 8003068:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800306a:	e0b2      	b.n	80031d2 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800306c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 80a7 	beq.w	80031c6 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	4611      	mov	r1, r2
 8003082:	4618      	mov	r0, r3
 8003084:	f008 f9fd 	bl	800b482 <USB_ReadDevInEPInterrupt>
 8003088:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b00      	cmp	r3, #0
 8003092:	d057      	beq.n	8003144 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	2201      	movs	r2, #1
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	43db      	mvns	r3, r3
 80030ae:	69f9      	ldr	r1, [r7, #28]
 80030b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030b4:	4013      	ands	r3, r2
 80030b6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	015a      	lsls	r2, r3, #5
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	4413      	add	r3, r2
 80030c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030c4:	461a      	mov	r2, r3
 80030c6:	2301      	movs	r3, #1
 80030c8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d132      	bne.n	8003138 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d6:	4613      	mov	r3, r2
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	1a9b      	subs	r3, r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	440b      	add	r3, r1
 80030e0:	3348      	adds	r3, #72	; 0x48
 80030e2:	6819      	ldr	r1, [r3, #0]
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e8:	4613      	mov	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	1a9b      	subs	r3, r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4403      	add	r3, r0
 80030f2:	3344      	adds	r3, #68	; 0x44
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4419      	add	r1, r3
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030fc:	4613      	mov	r3, r2
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	1a9b      	subs	r3, r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4403      	add	r3, r0
 8003106:	3348      	adds	r3, #72	; 0x48
 8003108:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	2b00      	cmp	r3, #0
 800310e:	d113      	bne.n	8003138 <HAL_PCD_IRQHandler+0x31c>
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003114:	4613      	mov	r3, r2
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	1a9b      	subs	r3, r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	3350      	adds	r3, #80	; 0x50
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d108      	bne.n	8003138 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6818      	ldr	r0, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003130:	461a      	mov	r2, r3
 8003132:	2101      	movs	r1, #1
 8003134:	f008 fa06 	bl	800b544 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313a:	b2db      	uxtb	r3, r3
 800313c:	4619      	mov	r1, r3
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f00a f8e3 	bl	800d30a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	f003 0308 	and.w	r3, r3, #8
 800314a:	2b00      	cmp	r3, #0
 800314c:	d008      	beq.n	8003160 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	015a      	lsls	r2, r3, #5
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	4413      	add	r3, r2
 8003156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800315a:	461a      	mov	r2, r3
 800315c:	2308      	movs	r3, #8
 800315e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f003 0310 	and.w	r3, r3, #16
 8003166:	2b00      	cmp	r3, #0
 8003168:	d008      	beq.n	800317c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	015a      	lsls	r2, r3, #5
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	4413      	add	r3, r2
 8003172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003176:	461a      	mov	r2, r3
 8003178:	2310      	movs	r3, #16
 800317a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003182:	2b00      	cmp	r3, #0
 8003184:	d008      	beq.n	8003198 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	015a      	lsls	r2, r3, #5
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	4413      	add	r3, r2
 800318e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003192:	461a      	mov	r2, r3
 8003194:	2340      	movs	r3, #64	; 0x40
 8003196:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d008      	beq.n	80031b4 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a4:	015a      	lsls	r2, r3, #5
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	4413      	add	r3, r2
 80031aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ae:	461a      	mov	r2, r3
 80031b0:	2302      	movs	r3, #2
 80031b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80031be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 fc48 	bl	8003a56 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	3301      	adds	r3, #1
 80031ca:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80031cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ce:	085b      	lsrs	r3, r3, #1
 80031d0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80031d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f47f af49 	bne.w	800306c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f008 f8ea 	bl	800b3b8 <USB_ReadInterrupts>
 80031e4:	4603      	mov	r3, r0
 80031e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031ee:	d122      	bne.n	8003236 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	69fa      	ldr	r2, [r7, #28]
 80031fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031fe:	f023 0301 	bic.w	r3, r3, #1
 8003202:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800320a:	2b01      	cmp	r3, #1
 800320c:	d108      	bne.n	8003220 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003216:	2100      	movs	r1, #0
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 fe77 	bl	8003f0c <HAL_PCDEx_LPM_Callback>
 800321e:	e002      	b.n	8003226 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f00a f8e9 	bl	800d3f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695a      	ldr	r2, [r3, #20]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003234:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f008 f8bc 	bl	800b3b8 <USB_ReadInterrupts>
 8003240:	4603      	mov	r3, r0
 8003242:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003246:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800324a:	d112      	bne.n	8003272 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b01      	cmp	r3, #1
 800325a:	d102      	bne.n	8003262 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f00a f8a5 	bl	800d3ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695a      	ldr	r2, [r3, #20]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003270:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f008 f89e 	bl	800b3b8 <USB_ReadInterrupts>
 800327c:	4603      	mov	r3, r0
 800327e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003282:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003286:	d121      	bne.n	80032cc <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695a      	ldr	r2, [r3, #20]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003296:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d111      	bne.n	80032c6 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b0:	089b      	lsrs	r3, r3, #2
 80032b2:	f003 020f 	and.w	r2, r3, #15
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80032bc:	2101      	movs	r1, #1
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 fe24 	bl	8003f0c <HAL_PCDEx_LPM_Callback>
 80032c4:	e002      	b.n	80032cc <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f00a f870 	bl	800d3ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f008 f871 	bl	800b3b8 <USB_ReadInterrupts>
 80032d6:	4603      	mov	r3, r0
 80032d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e0:	f040 80c7 	bne.w	8003472 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	69fa      	ldr	r2, [r7, #28]
 80032ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032f2:	f023 0301 	bic.w	r3, r3, #1
 80032f6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2110      	movs	r1, #16
 80032fe:	4618      	mov	r0, r3
 8003300:	f007 f99c 	bl	800a63c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003304:	2300      	movs	r3, #0
 8003306:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003308:	e056      	b.n	80033b8 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800330a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330c:	015a      	lsls	r2, r3, #5
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	4413      	add	r3, r2
 8003312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003316:	461a      	mov	r2, r3
 8003318:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800331c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800331e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	4413      	add	r3, r2
 8003326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800332e:	0151      	lsls	r1, r2, #5
 8003330:	69fa      	ldr	r2, [r7, #28]
 8003332:	440a      	add	r2, r1
 8003334:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003338:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800333c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800333e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003340:	015a      	lsls	r2, r3, #5
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	4413      	add	r3, r2
 8003346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800334e:	0151      	lsls	r1, r2, #5
 8003350:	69fa      	ldr	r2, [r7, #28]
 8003352:	440a      	add	r2, r1
 8003354:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003358:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800335c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800335e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003360:	015a      	lsls	r2, r3, #5
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	4413      	add	r3, r2
 8003366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800336a:	461a      	mov	r2, r3
 800336c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003370:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003374:	015a      	lsls	r2, r3, #5
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	4413      	add	r3, r2
 800337a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003382:	0151      	lsls	r1, r2, #5
 8003384:	69fa      	ldr	r2, [r7, #28]
 8003386:	440a      	add	r2, r1
 8003388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800338c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003390:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003394:	015a      	lsls	r2, r3, #5
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	4413      	add	r3, r2
 800339a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033a2:	0151      	lsls	r1, r2, #5
 80033a4:	69fa      	ldr	r2, [r7, #28]
 80033a6:	440a      	add	r2, r1
 80033a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033b0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b4:	3301      	adds	r3, #1
 80033b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033be:	429a      	cmp	r2, r3
 80033c0:	d3a3      	bcc.n	800330a <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	69fa      	ldr	r2, [r7, #28]
 80033cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033d0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80033d4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d016      	beq.n	800340c <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033e8:	69fa      	ldr	r2, [r7, #28]
 80033ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033ee:	f043 030b 	orr.w	r3, r3, #11
 80033f2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fe:	69fa      	ldr	r2, [r7, #28]
 8003400:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003404:	f043 030b 	orr.w	r3, r3, #11
 8003408:	6453      	str	r3, [r2, #68]	; 0x44
 800340a:	e015      	b.n	8003438 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003412:	695a      	ldr	r2, [r3, #20]
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800341a:	4619      	mov	r1, r3
 800341c:	f242 032b 	movw	r3, #8235	; 0x202b
 8003420:	4313      	orrs	r3, r2
 8003422:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	69fa      	ldr	r2, [r7, #28]
 800342e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003432:	f043 030b 	orr.w	r3, r3, #11
 8003436:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	69fa      	ldr	r2, [r7, #28]
 8003442:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003446:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800344a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6818      	ldr	r0, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800345c:	461a      	mov	r2, r3
 800345e:	f008 f871 	bl	800b544 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	695a      	ldr	r2, [r3, #20]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003470:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f007 ff9e 	bl	800b3b8 <USB_ReadInterrupts>
 800347c:	4603      	mov	r3, r0
 800347e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003486:	d124      	bne.n	80034d2 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f008 f835 	bl	800b4fc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f007 f931 	bl	800a6fe <USB_GetDevSpeed>
 800349c:	4603      	mov	r3, r0
 800349e:	461a      	mov	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681c      	ldr	r4, [r3, #0]
 80034a8:	f001 fc86 	bl	8004db8 <HAL_RCC_GetHCLKFreq>
 80034ac:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	461a      	mov	r2, r3
 80034b6:	4620      	mov	r0, r4
 80034b8:	f006 fe74 	bl	800a1a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f009 ff4c 	bl	800d35a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	695a      	ldr	r2, [r3, #20]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80034d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f007 ff6e 	bl	800b3b8 <USB_ReadInterrupts>
 80034dc:	4603      	mov	r3, r0
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b08      	cmp	r3, #8
 80034e4:	d10a      	bne.n	80034fc <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f009 ff29 	bl	800d33e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695a      	ldr	r2, [r3, #20]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f002 0208 	and.w	r2, r2, #8
 80034fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4618      	mov	r0, r3
 8003502:	f007 ff59 	bl	800b3b8 <USB_ReadInterrupts>
 8003506:	4603      	mov	r3, r0
 8003508:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800350c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003510:	d10f      	bne.n	8003532 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003512:	2300      	movs	r3, #0
 8003514:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003518:	b2db      	uxtb	r3, r3
 800351a:	4619      	mov	r1, r3
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f009 ff8b 	bl	800d438 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	695a      	ldr	r2, [r3, #20]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003530:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f007 ff3e 	bl	800b3b8 <USB_ReadInterrupts>
 800353c:	4603      	mov	r3, r0
 800353e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003542:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003546:	d10f      	bne.n	8003568 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	b2db      	uxtb	r3, r3
 8003550:	4619      	mov	r1, r3
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f009 ff5e 	bl	800d414 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	695a      	ldr	r2, [r3, #20]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003566:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4618      	mov	r0, r3
 800356e:	f007 ff23 	bl	800b3b8 <USB_ReadInterrupts>
 8003572:	4603      	mov	r3, r0
 8003574:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800357c:	d10a      	bne.n	8003594 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f009 ff6c 	bl	800d45c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695a      	ldr	r2, [r3, #20]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003592:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4618      	mov	r0, r3
 800359a:	f007 ff0d 	bl	800b3b8 <USB_ReadInterrupts>
 800359e:	4603      	mov	r3, r0
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b04      	cmp	r3, #4
 80035a6:	d115      	bne.n	80035d4 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	f003 0304 	and.w	r3, r3, #4
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f009 ff5c 	bl	800d478 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6859      	ldr	r1, [r3, #4]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	605a      	str	r2, [r3, #4]
 80035d0:	e000      	b.n	80035d4 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80035d2:	bf00      	nop
    }
  }
}
 80035d4:	3734      	adds	r7, #52	; 0x34
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd90      	pop	{r4, r7, pc}

080035da <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b082      	sub	sp, #8
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
 80035e2:	460b      	mov	r3, r1
 80035e4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d101      	bne.n	80035f4 <HAL_PCD_SetAddress+0x1a>
 80035f0:	2302      	movs	r3, #2
 80035f2:	e013      	b.n	800361c <HAL_PCD_SetAddress+0x42>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	78fa      	ldrb	r2, [r7, #3]
 8003600:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	78fa      	ldrb	r2, [r7, #3]
 800360a:	4611      	mov	r1, r2
 800360c:	4618      	mov	r0, r3
 800360e:	f007 fe7d 	bl	800b30c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	4608      	mov	r0, r1
 800362e:	4611      	mov	r1, r2
 8003630:	461a      	mov	r2, r3
 8003632:	4603      	mov	r3, r0
 8003634:	70fb      	strb	r3, [r7, #3]
 8003636:	460b      	mov	r3, r1
 8003638:	803b      	strh	r3, [r7, #0]
 800363a:	4613      	mov	r3, r2
 800363c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003642:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003646:	2b00      	cmp	r3, #0
 8003648:	da0f      	bge.n	800366a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800364a:	78fb      	ldrb	r3, [r7, #3]
 800364c:	f003 020f 	and.w	r2, r3, #15
 8003650:	4613      	mov	r3, r2
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	1a9b      	subs	r3, r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	3338      	adds	r3, #56	; 0x38
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	4413      	add	r3, r2
 800365e:	3304      	adds	r3, #4
 8003660:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2201      	movs	r2, #1
 8003666:	705a      	strb	r2, [r3, #1]
 8003668:	e00f      	b.n	800368a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800366a:	78fb      	ldrb	r3, [r7, #3]
 800366c:	f003 020f 	and.w	r2, r3, #15
 8003670:	4613      	mov	r3, r2
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	1a9b      	subs	r3, r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	4413      	add	r3, r2
 8003680:	3304      	adds	r3, #4
 8003682:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800368a:	78fb      	ldrb	r3, [r7, #3]
 800368c:	f003 030f 	and.w	r3, r3, #15
 8003690:	b2da      	uxtb	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003696:	883a      	ldrh	r2, [r7, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	78ba      	ldrb	r2, [r7, #2]
 80036a0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	785b      	ldrb	r3, [r3, #1]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d004      	beq.n	80036b4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80036b4:	78bb      	ldrb	r3, [r7, #2]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d102      	bne.n	80036c0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d101      	bne.n	80036ce <HAL_PCD_EP_Open+0xaa>
 80036ca:	2302      	movs	r3, #2
 80036cc:	e00e      	b.n	80036ec <HAL_PCD_EP_Open+0xc8>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68f9      	ldr	r1, [r7, #12]
 80036dc:	4618      	mov	r0, r3
 80036de:	f007 f833 	bl	800a748 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80036ea:	7afb      	ldrb	r3, [r7, #11]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	460b      	mov	r3, r1
 80036fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003700:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003704:	2b00      	cmp	r3, #0
 8003706:	da0f      	bge.n	8003728 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003708:	78fb      	ldrb	r3, [r7, #3]
 800370a:	f003 020f 	and.w	r2, r3, #15
 800370e:	4613      	mov	r3, r2
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	1a9b      	subs	r3, r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	3338      	adds	r3, #56	; 0x38
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	4413      	add	r3, r2
 800371c:	3304      	adds	r3, #4
 800371e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2201      	movs	r2, #1
 8003724:	705a      	strb	r2, [r3, #1]
 8003726:	e00f      	b.n	8003748 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003728:	78fb      	ldrb	r3, [r7, #3]
 800372a:	f003 020f 	and.w	r2, r3, #15
 800372e:	4613      	mov	r3, r2
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	1a9b      	subs	r3, r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	4413      	add	r3, r2
 800373e:	3304      	adds	r3, #4
 8003740:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003748:	78fb      	ldrb	r3, [r7, #3]
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	b2da      	uxtb	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800375a:	2b01      	cmp	r3, #1
 800375c:	d101      	bne.n	8003762 <HAL_PCD_EP_Close+0x6e>
 800375e:	2302      	movs	r3, #2
 8003760:	e00e      	b.n	8003780 <HAL_PCD_EP_Close+0x8c>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68f9      	ldr	r1, [r7, #12]
 8003770:	4618      	mov	r0, r3
 8003772:	f007 f871 	bl	800a858 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	607a      	str	r2, [r7, #4]
 8003792:	603b      	str	r3, [r7, #0]
 8003794:	460b      	mov	r3, r1
 8003796:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003798:	7afb      	ldrb	r3, [r7, #11]
 800379a:	f003 020f 	and.w	r2, r3, #15
 800379e:	4613      	mov	r3, r2
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	1a9b      	subs	r3, r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	4413      	add	r3, r2
 80037ae:	3304      	adds	r3, #4
 80037b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	2200      	movs	r2, #0
 80037c2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	2200      	movs	r2, #0
 80037c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037ca:	7afb      	ldrb	r3, [r7, #11]
 80037cc:	f003 030f 	and.w	r3, r3, #15
 80037d0:	b2da      	uxtb	r2, r3
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d102      	bne.n	80037e4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037e4:	7afb      	ldrb	r3, [r7, #11]
 80037e6:	f003 030f 	and.w	r3, r3, #15
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d109      	bne.n	8003802 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6818      	ldr	r0, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	461a      	mov	r2, r3
 80037fa:	6979      	ldr	r1, [r7, #20]
 80037fc:	f007 fafc 	bl	800adf8 <USB_EP0StartXfer>
 8003800:	e008      	b.n	8003814 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6818      	ldr	r0, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	b2db      	uxtb	r3, r3
 800380c:	461a      	mov	r2, r3
 800380e:	6979      	ldr	r1, [r7, #20]
 8003810:	f007 f8a6 	bl	800a960 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3718      	adds	r7, #24
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
 8003826:	460b      	mov	r3, r1
 8003828:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800382a:	78fb      	ldrb	r3, [r7, #3]
 800382c:	f003 020f 	and.w	r2, r3, #15
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	4613      	mov	r3, r2
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	1a9b      	subs	r3, r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	440b      	add	r3, r1
 800383c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003840:	681b      	ldr	r3, [r3, #0]
}
 8003842:	4618      	mov	r0, r3
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b086      	sub	sp, #24
 8003852:	af00      	add	r7, sp, #0
 8003854:	60f8      	str	r0, [r7, #12]
 8003856:	607a      	str	r2, [r7, #4]
 8003858:	603b      	str	r3, [r7, #0]
 800385a:	460b      	mov	r3, r1
 800385c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800385e:	7afb      	ldrb	r3, [r7, #11]
 8003860:	f003 020f 	and.w	r2, r3, #15
 8003864:	4613      	mov	r3, r2
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	1a9b      	subs	r3, r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	3338      	adds	r3, #56	; 0x38
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	4413      	add	r3, r2
 8003872:	3304      	adds	r3, #4
 8003874:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	2200      	movs	r2, #0
 8003886:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	2201      	movs	r2, #1
 800388c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800388e:	7afb      	ldrb	r3, [r7, #11]
 8003890:	f003 030f 	and.w	r3, r3, #15
 8003894:	b2da      	uxtb	r2, r3
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d102      	bne.n	80038a8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038a8:	7afb      	ldrb	r3, [r7, #11]
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d109      	bne.n	80038c6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6818      	ldr	r0, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	461a      	mov	r2, r3
 80038be:	6979      	ldr	r1, [r7, #20]
 80038c0:	f007 fa9a 	bl	800adf8 <USB_EP0StartXfer>
 80038c4:	e008      	b.n	80038d8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6818      	ldr	r0, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	461a      	mov	r2, r3
 80038d2:	6979      	ldr	r1, [r7, #20]
 80038d4:	f007 f844 	bl	800a960 <USB_EPStartXfer>
  }

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3718      	adds	r7, #24
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b084      	sub	sp, #16
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
 80038ea:	460b      	mov	r3, r1
 80038ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80038ee:	78fb      	ldrb	r3, [r7, #3]
 80038f0:	f003 020f 	and.w	r2, r3, #15
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d901      	bls.n	8003900 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e050      	b.n	80039a2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003900:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003904:	2b00      	cmp	r3, #0
 8003906:	da0f      	bge.n	8003928 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003908:	78fb      	ldrb	r3, [r7, #3]
 800390a:	f003 020f 	and.w	r2, r3, #15
 800390e:	4613      	mov	r3, r2
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	1a9b      	subs	r3, r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	3338      	adds	r3, #56	; 0x38
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	4413      	add	r3, r2
 800391c:	3304      	adds	r3, #4
 800391e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2201      	movs	r2, #1
 8003924:	705a      	strb	r2, [r3, #1]
 8003926:	e00d      	b.n	8003944 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003928:	78fa      	ldrb	r2, [r7, #3]
 800392a:	4613      	mov	r3, r2
 800392c:	00db      	lsls	r3, r3, #3
 800392e:	1a9b      	subs	r3, r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	4413      	add	r3, r2
 800393a:	3304      	adds	r3, #4
 800393c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2201      	movs	r2, #1
 8003948:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800394a:	78fb      	ldrb	r3, [r7, #3]
 800394c:	f003 030f 	and.w	r3, r3, #15
 8003950:	b2da      	uxtb	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800395c:	2b01      	cmp	r3, #1
 800395e:	d101      	bne.n	8003964 <HAL_PCD_EP_SetStall+0x82>
 8003960:	2302      	movs	r3, #2
 8003962:	e01e      	b.n	80039a2 <HAL_PCD_EP_SetStall+0xc0>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68f9      	ldr	r1, [r7, #12]
 8003972:	4618      	mov	r0, r3
 8003974:	f007 fbf6 	bl	800b164 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003978:	78fb      	ldrb	r3, [r7, #3]
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10a      	bne.n	8003998 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6818      	ldr	r0, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	b2d9      	uxtb	r1, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003992:	461a      	mov	r2, r3
 8003994:	f007 fdd6 	bl	800b544 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b084      	sub	sp, #16
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
 80039b2:	460b      	mov	r3, r1
 80039b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80039b6:	78fb      	ldrb	r3, [r7, #3]
 80039b8:	f003 020f 	and.w	r2, r3, #15
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d901      	bls.n	80039c8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e042      	b.n	8003a4e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	da0f      	bge.n	80039f0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039d0:	78fb      	ldrb	r3, [r7, #3]
 80039d2:	f003 020f 	and.w	r2, r3, #15
 80039d6:	4613      	mov	r3, r2
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	1a9b      	subs	r3, r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	3338      	adds	r3, #56	; 0x38
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	4413      	add	r3, r2
 80039e4:	3304      	adds	r3, #4
 80039e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2201      	movs	r2, #1
 80039ec:	705a      	strb	r2, [r3, #1]
 80039ee:	e00f      	b.n	8003a10 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039f0:	78fb      	ldrb	r3, [r7, #3]
 80039f2:	f003 020f 	and.w	r2, r3, #15
 80039f6:	4613      	mov	r3, r2
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	1a9b      	subs	r3, r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	4413      	add	r3, r2
 8003a06:	3304      	adds	r3, #4
 8003a08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a16:	78fb      	ldrb	r3, [r7, #3]
 8003a18:	f003 030f 	and.w	r3, r3, #15
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d101      	bne.n	8003a30 <HAL_PCD_EP_ClrStall+0x86>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	e00e      	b.n	8003a4e <HAL_PCD_EP_ClrStall+0xa4>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68f9      	ldr	r1, [r7, #12]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f007 fbfe 	bl	800b240 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b08a      	sub	sp, #40	; 0x28
 8003a5a:	af02      	add	r7, sp, #8
 8003a5c:	6078      	str	r0, [r7, #4]
 8003a5e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	1a9b      	subs	r3, r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	3338      	adds	r3, #56	; 0x38
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	4413      	add	r3, r2
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	699a      	ldr	r2, [r3, #24]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d901      	bls.n	8003a8e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e06c      	b.n	8003b68 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	695a      	ldr	r2, [r3, #20]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	69fa      	ldr	r2, [r7, #28]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d902      	bls.n	8003aaa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	3303      	adds	r3, #3
 8003aae:	089b      	lsrs	r3, r3, #2
 8003ab0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ab2:	e02b      	b.n	8003b0c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	695a      	ldr	r2, [r3, #20]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	69fa      	ldr	r2, [r7, #28]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d902      	bls.n	8003ad0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	3303      	adds	r3, #3
 8003ad4:	089b      	lsrs	r3, r3, #2
 8003ad6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	68d9      	ldr	r1, [r3, #12]
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	4603      	mov	r3, r0
 8003aee:	6978      	ldr	r0, [r7, #20]
 8003af0:	f007 fada 	bl	800b0a8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	68da      	ldr	r2, [r3, #12]
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	441a      	add	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	699a      	ldr	r2, [r3, #24]
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	441a      	add	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	015a      	lsls	r2, r3, #5
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	4413      	add	r3, r2
 8003b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d809      	bhi.n	8003b36 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	699a      	ldr	r2, [r3, #24]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d203      	bcs.n	8003b36 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1be      	bne.n	8003ab4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	695a      	ldr	r2, [r3, #20]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d811      	bhi.n	8003b66 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	f003 030f 	and.w	r3, r3, #15
 8003b48:	2201      	movs	r2, #1
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	6939      	ldr	r1, [r7, #16]
 8003b5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b62:	4013      	ands	r3, r2
 8003b64:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3720      	adds	r7, #32
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	333c      	adds	r3, #60	; 0x3c
 8003b88:	3304      	adds	r3, #4
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	015a      	lsls	r2, r3, #5
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	4413      	add	r3, r2
 8003b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	f040 80a0 	bne.w	8003ce8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	f003 0308 	and.w	r3, r3, #8
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d015      	beq.n	8003bde <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	4a72      	ldr	r2, [pc, #456]	; (8003d80 <PCD_EP_OutXfrComplete_int+0x210>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	f240 80dd 	bls.w	8003d76 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 80d7 	beq.w	8003d76 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	015a      	lsls	r2, r3, #5
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	4413      	add	r3, r2
 8003bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bda:	6093      	str	r3, [r2, #8]
 8003bdc:	e0cb      	b.n	8003d76 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	f003 0320 	and.w	r3, r3, #32
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d009      	beq.n	8003bfc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	015a      	lsls	r2, r3, #5
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	2320      	movs	r3, #32
 8003bf8:	6093      	str	r3, [r2, #8]
 8003bfa:	e0bc      	b.n	8003d76 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f040 80b7 	bne.w	8003d76 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4a5d      	ldr	r2, [pc, #372]	; (8003d80 <PCD_EP_OutXfrComplete_int+0x210>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d90f      	bls.n	8003c30 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00a      	beq.n	8003c30 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	015a      	lsls	r2, r3, #5
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	4413      	add	r3, r2
 8003c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c26:	461a      	mov	r2, r3
 8003c28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c2c:	6093      	str	r3, [r2, #8]
 8003c2e:	e0a2      	b.n	8003d76 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	4613      	mov	r3, r2
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	1a9b      	subs	r3, r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003c42:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	0159      	lsls	r1, r3, #5
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	440b      	add	r3, r1
 8003c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003c56:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	1a9b      	subs	r3, r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4403      	add	r3, r0
 8003c66:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003c6a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003c6c:	6879      	ldr	r1, [r7, #4]
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	4613      	mov	r3, r2
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	1a9b      	subs	r3, r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	440b      	add	r3, r1
 8003c7a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c7e:	6819      	ldr	r1, [r3, #0]
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	4613      	mov	r3, r2
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	1a9b      	subs	r3, r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4403      	add	r3, r0
 8003c8e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4419      	add	r1, r3
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	1a9b      	subs	r3, r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4403      	add	r3, r0
 8003ca4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ca8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d114      	bne.n	8003cda <PCD_EP_OutXfrComplete_int+0x16a>
 8003cb0:	6879      	ldr	r1, [r7, #4]
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	1a9b      	subs	r3, r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d108      	bne.n	8003cda <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6818      	ldr	r0, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	f007 fc35 	bl	800b544 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	4619      	mov	r1, r3
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f009 faf7 	bl	800d2d4 <HAL_PCD_DataOutStageCallback>
 8003ce6:	e046      	b.n	8003d76 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4a26      	ldr	r2, [pc, #152]	; (8003d84 <PCD_EP_OutXfrComplete_int+0x214>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d124      	bne.n	8003d3a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	015a      	lsls	r2, r3, #5
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d06:	461a      	mov	r2, r3
 8003d08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d0c:	6093      	str	r3, [r2, #8]
 8003d0e:	e032      	b.n	8003d76 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	f003 0320 	and.w	r3, r3, #32
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d008      	beq.n	8003d2c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	015a      	lsls	r2, r3, #5
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	4413      	add	r3, r2
 8003d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d26:	461a      	mov	r2, r3
 8003d28:	2320      	movs	r3, #32
 8003d2a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	4619      	mov	r1, r3
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f009 face 	bl	800d2d4 <HAL_PCD_DataOutStageCallback>
 8003d38:	e01d      	b.n	8003d76 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d114      	bne.n	8003d6a <PCD_EP_OutXfrComplete_int+0x1fa>
 8003d40:	6879      	ldr	r1, [r7, #4]
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	4613      	mov	r3, r2
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	1a9b      	subs	r3, r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d108      	bne.n	8003d6a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6818      	ldr	r0, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d62:	461a      	mov	r2, r3
 8003d64:	2100      	movs	r1, #0
 8003d66:	f007 fbed 	bl	800b544 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	4619      	mov	r1, r3
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f009 faaf 	bl	800d2d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	4f54300a 	.word	0x4f54300a
 8003d84:	4f54310a 	.word	0x4f54310a

08003d88 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	333c      	adds	r3, #60	; 0x3c
 8003da0:	3304      	adds	r3, #4
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	015a      	lsls	r2, r3, #5
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	4413      	add	r3, r2
 8003dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	4a15      	ldr	r2, [pc, #84]	; (8003e10 <PCD_EP_OutSetupPacket_int+0x88>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d90e      	bls.n	8003ddc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d009      	beq.n	8003ddc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	015a      	lsls	r2, r3, #5
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	4413      	add	r3, r2
 8003dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dda:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f009 fa67 	bl	800d2b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	4a0a      	ldr	r2, [pc, #40]	; (8003e10 <PCD_EP_OutSetupPacket_int+0x88>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d90c      	bls.n	8003e04 <PCD_EP_OutSetupPacket_int+0x7c>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d108      	bne.n	8003e04 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6818      	ldr	r0, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	2101      	movs	r1, #1
 8003e00:	f007 fba0 	bl	800b544 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3718      	adds	r7, #24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	4f54300a 	.word	0x4f54300a

08003e14 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	70fb      	strb	r3, [r7, #3]
 8003e20:	4613      	mov	r3, r2
 8003e22:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003e2c:	78fb      	ldrb	r3, [r7, #3]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d107      	bne.n	8003e42 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003e32:	883b      	ldrh	r3, [r7, #0]
 8003e34:	0419      	lsls	r1, r3, #16
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	629a      	str	r2, [r3, #40]	; 0x28
 8003e40:	e028      	b.n	8003e94 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e48:	0c1b      	lsrs	r3, r3, #16
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e50:	2300      	movs	r3, #0
 8003e52:	73fb      	strb	r3, [r7, #15]
 8003e54:	e00d      	b.n	8003e72 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	7bfb      	ldrb	r3, [r7, #15]
 8003e5c:	3340      	adds	r3, #64	; 0x40
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	0c1b      	lsrs	r3, r3, #16
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	4413      	add	r3, r2
 8003e6a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e6c:	7bfb      	ldrb	r3, [r7, #15]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	73fb      	strb	r3, [r7, #15]
 8003e72:	7bfa      	ldrb	r2, [r7, #15]
 8003e74:	78fb      	ldrb	r3, [r7, #3]
 8003e76:	3b01      	subs	r3, #1
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d3ec      	bcc.n	8003e56 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003e7c:	883b      	ldrh	r3, [r7, #0]
 8003e7e:	0418      	lsls	r0, r3, #16
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6819      	ldr	r1, [r3, #0]
 8003e84:	78fb      	ldrb	r3, [r7, #3]
 8003e86:	3b01      	subs	r3, #1
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	4302      	orrs	r2, r0
 8003e8c:	3340      	adds	r3, #64	; 0x40
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	440b      	add	r3, r1
 8003e92:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3714      	adds	r7, #20
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b083      	sub	sp, #12
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
 8003eaa:	460b      	mov	r3, r1
 8003eac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	887a      	ldrh	r2, [r7, #2]
 8003eb4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ef2:	4b05      	ldr	r3, [pc, #20]	; (8003f08 <HAL_PCDEx_ActivateLPM+0x44>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	10000003 	.word	0x10000003

08003f0c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	460b      	mov	r3, r1
 8003f16:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003f2c:	4b19      	ldr	r3, [pc, #100]	; (8003f94 <HAL_PWREx_ConfigSupply+0x70>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b04      	cmp	r3, #4
 8003f36:	d00a      	beq.n	8003f4e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003f38:	4b16      	ldr	r3, [pc, #88]	; (8003f94 <HAL_PWREx_ConfigSupply+0x70>)
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d001      	beq.n	8003f4a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e01f      	b.n	8003f8a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	e01d      	b.n	8003f8a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003f4e:	4b11      	ldr	r3, [pc, #68]	; (8003f94 <HAL_PWREx_ConfigSupply+0x70>)
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f023 0207 	bic.w	r2, r3, #7
 8003f56:	490f      	ldr	r1, [pc, #60]	; (8003f94 <HAL_PWREx_ConfigSupply+0x70>)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003f5e:	f7fe f87d 	bl	800205c <HAL_GetTick>
 8003f62:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003f64:	e009      	b.n	8003f7a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003f66:	f7fe f879 	bl	800205c <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f74:	d901      	bls.n	8003f7a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e007      	b.n	8003f8a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003f7a:	4b06      	ldr	r3, [pc, #24]	; (8003f94 <HAL_PWREx_ConfigSupply+0x70>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f86:	d1ee      	bne.n	8003f66 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	58024800 	.word	0x58024800

08003f98 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003f9c:	4b05      	ldr	r3, [pc, #20]	; (8003fb4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	4a04      	ldr	r2, [pc, #16]	; (8003fb4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fa6:	60d3      	str	r3, [r2, #12]
}
 8003fa8:	bf00      	nop
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	58024800 	.word	0x58024800

08003fb8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b08c      	sub	sp, #48	; 0x30
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e3c4      	b.n	8004754 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 8087 	beq.w	80040e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fd8:	4ba2      	ldr	r3, [pc, #648]	; (8004264 <HAL_RCC_OscConfig+0x2ac>)
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003fe2:	4ba0      	ldr	r3, [pc, #640]	; (8004264 <HAL_RCC_OscConfig+0x2ac>)
 8003fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fea:	2b10      	cmp	r3, #16
 8003fec:	d007      	beq.n	8003ffe <HAL_RCC_OscConfig+0x46>
 8003fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff0:	2b18      	cmp	r3, #24
 8003ff2:	d110      	bne.n	8004016 <HAL_RCC_OscConfig+0x5e>
 8003ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d10b      	bne.n	8004016 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ffe:	4b99      	ldr	r3, [pc, #612]	; (8004264 <HAL_RCC_OscConfig+0x2ac>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d06c      	beq.n	80040e4 <HAL_RCC_OscConfig+0x12c>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d168      	bne.n	80040e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e39e      	b.n	8004754 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800401e:	d106      	bne.n	800402e <HAL_RCC_OscConfig+0x76>
 8004020:	4b90      	ldr	r3, [pc, #576]	; (8004264 <HAL_RCC_OscConfig+0x2ac>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a8f      	ldr	r2, [pc, #572]	; (8004264 <HAL_RCC_OscConfig+0x2ac>)
 8004026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800402a:	6013      	str	r3, [r2, #0]
 800402c:	e02e      	b.n	800408c <HAL_RCC_OscConfig+0xd4>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10c      	bne.n	8004050 <HAL_RCC_OscConfig+0x98>
 8004036:	4b8b      	ldr	r3, [pc, #556]	; (8004264 <HAL_RCC_OscConfig+0x2ac>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a8a      	ldr	r2, [pc, #552]	; (8004264 <HAL_RCC_OscConfig+0x2ac>)
 800403c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004040:	6013      	str	r3, [r2, #0]
 8004042:	4b88      	ldr	r3, [pc, #544]	; (8004264 <HAL_RCC_OscConfig+0x2ac>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a87      	ldr	r2, [pc, #540]	; (8004264 <HAL_RCC_OscConfig+0x2ac>)
 8004048:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800404c:	6013      	str	r3, [r2, #0]
 800404e:	e01d      	b.n	800408c <HAL_RCC_OscConfig+0xd4>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004058:	d10c      	bne.n	8004074 <HAL_RCC_OscConfig+0xbc>
 800405a:	4b82      	ldr	r3, [pc, #520]	; (8004264 <HAL_RCC_OscConfig+0x2ac>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a81      	ldr	r2, [pc, #516]	; (8004264 <HAL_RCC_OscConfig+0x2ac>)
 8004060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004064:	6013      	str	r3, [r2, #0]
 8004066:	4b7f      	ldr	r3, [pc, #508]	; (8004264 <HAL_RCC_OscConfig+0x2ac>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a7e      	ldr	r2, [pc, #504]	; (8004264 <HAL_RCC_OscConfig+0x2ac>)
 800406c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004070:	6013      	str	r3, [r2, #0]
 8004072:	e00b      	b.n	800408c <HAL_RCC_OscConfig+0xd4>
 8004074:	4b7b      	ldr	r3, [pc, #492]	; (8004264 <HAL_RCC_OscConfig+0x2ac>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a7a      	ldr	r2, [pc, #488]	; (8004264 <HAL_RCC_OscConfig+0x2ac>)
 800407a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800407e:	6013      	str	r3, [r2, #0]
 8004080:	4b78      	ldr	r3, [pc, #480]	; (8004264 <HAL_RCC_OscConfig+0x2ac>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a77      	ldr	r2, [pc, #476]	; (8004264 <HAL_RCC_OscConfig+0x2ac>)
 8004086:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800408a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d013      	beq.n	80040bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004094:	f7fd ffe2 	bl	800205c <HAL_GetTick>
 8004098:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800409c:	f7fd ffde 	bl	800205c <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b64      	cmp	r3, #100	; 0x64
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e352      	b.n	8004754 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040ae:	4b6d      	ldr	r3, [pc, #436]	; (8004264 <HAL_RCC_OscConfig+0x2ac>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d0f0      	beq.n	800409c <HAL_RCC_OscConfig+0xe4>
 80040ba:	e014      	b.n	80040e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040bc:	f7fd ffce 	bl	800205c <HAL_GetTick>
 80040c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040c4:	f7fd ffca 	bl	800205c <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b64      	cmp	r3, #100	; 0x64
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e33e      	b.n	8004754 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80040d6:	4b63      	ldr	r3, [pc, #396]	; (8004264 <HAL_RCC_OscConfig+0x2ac>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1f0      	bne.n	80040c4 <HAL_RCC_OscConfig+0x10c>
 80040e2:	e000      	b.n	80040e6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 8092 	beq.w	8004218 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040f4:	4b5b      	ldr	r3, [pc, #364]	; (8004264 <HAL_RCC_OscConfig+0x2ac>)
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040fc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80040fe:	4b59      	ldr	r3, [pc, #356]	; (8004264 <HAL_RCC_OscConfig+0x2ac>)
 8004100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004102:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004104:	6a3b      	ldr	r3, [r7, #32]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d007      	beq.n	800411a <HAL_RCC_OscConfig+0x162>
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	2b18      	cmp	r3, #24
 800410e:	d12d      	bne.n	800416c <HAL_RCC_OscConfig+0x1b4>
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	f003 0303 	and.w	r3, r3, #3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d128      	bne.n	800416c <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800411a:	4b52      	ldr	r3, [pc, #328]	; (8004264 <HAL_RCC_OscConfig+0x2ac>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0304 	and.w	r3, r3, #4
 8004122:	2b00      	cmp	r3, #0
 8004124:	d005      	beq.n	8004132 <HAL_RCC_OscConfig+0x17a>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e310      	b.n	8004754 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004132:	f7fd ffc1 	bl	80020b8 <HAL_GetREVID>
 8004136:	4602      	mov	r2, r0
 8004138:	f241 0303 	movw	r3, #4099	; 0x1003
 800413c:	429a      	cmp	r2, r3
 800413e:	d80a      	bhi.n	8004156 <HAL_RCC_OscConfig+0x19e>
 8004140:	4b48      	ldr	r3, [pc, #288]	; (8004264 <HAL_RCC_OscConfig+0x2ac>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	031b      	lsls	r3, r3, #12
 800414e:	4945      	ldr	r1, [pc, #276]	; (8004264 <HAL_RCC_OscConfig+0x2ac>)
 8004150:	4313      	orrs	r3, r2
 8004152:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004154:	e060      	b.n	8004218 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004156:	4b43      	ldr	r3, [pc, #268]	; (8004264 <HAL_RCC_OscConfig+0x2ac>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	061b      	lsls	r3, r3, #24
 8004164:	493f      	ldr	r1, [pc, #252]	; (8004264 <HAL_RCC_OscConfig+0x2ac>)
 8004166:	4313      	orrs	r3, r2
 8004168:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800416a:	e055      	b.n	8004218 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d038      	beq.n	80041e6 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004174:	4b3b      	ldr	r3, [pc, #236]	; (8004264 <HAL_RCC_OscConfig+0x2ac>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f023 0219 	bic.w	r2, r3, #25
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	4938      	ldr	r1, [pc, #224]	; (8004264 <HAL_RCC_OscConfig+0x2ac>)
 8004182:	4313      	orrs	r3, r2
 8004184:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004186:	f7fd ff69 	bl	800205c <HAL_GetTick>
 800418a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800418e:	f7fd ff65 	bl	800205c <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e2d9      	b.n	8004754 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041a0:	4b30      	ldr	r3, [pc, #192]	; (8004264 <HAL_RCC_OscConfig+0x2ac>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0f0      	beq.n	800418e <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ac:	f7fd ff84 	bl	80020b8 <HAL_GetREVID>
 80041b0:	4602      	mov	r2, r0
 80041b2:	f241 0303 	movw	r3, #4099	; 0x1003
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d80a      	bhi.n	80041d0 <HAL_RCC_OscConfig+0x218>
 80041ba:	4b2a      	ldr	r3, [pc, #168]	; (8004264 <HAL_RCC_OscConfig+0x2ac>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	031b      	lsls	r3, r3, #12
 80041c8:	4926      	ldr	r1, [pc, #152]	; (8004264 <HAL_RCC_OscConfig+0x2ac>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	604b      	str	r3, [r1, #4]
 80041ce:	e023      	b.n	8004218 <HAL_RCC_OscConfig+0x260>
 80041d0:	4b24      	ldr	r3, [pc, #144]	; (8004264 <HAL_RCC_OscConfig+0x2ac>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	061b      	lsls	r3, r3, #24
 80041de:	4921      	ldr	r1, [pc, #132]	; (8004264 <HAL_RCC_OscConfig+0x2ac>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	604b      	str	r3, [r1, #4]
 80041e4:	e018      	b.n	8004218 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041e6:	4b1f      	ldr	r3, [pc, #124]	; (8004264 <HAL_RCC_OscConfig+0x2ac>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a1e      	ldr	r2, [pc, #120]	; (8004264 <HAL_RCC_OscConfig+0x2ac>)
 80041ec:	f023 0301 	bic.w	r3, r3, #1
 80041f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f2:	f7fd ff33 	bl	800205c <HAL_GetTick>
 80041f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80041f8:	e008      	b.n	800420c <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041fa:	f7fd ff2f 	bl	800205c <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e2a3      	b.n	8004754 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800420c:	4b15      	ldr	r3, [pc, #84]	; (8004264 <HAL_RCC_OscConfig+0x2ac>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1f0      	bne.n	80041fa <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0310 	and.w	r3, r3, #16
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 8091 	beq.w	8004348 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004226:	4b0f      	ldr	r3, [pc, #60]	; (8004264 <HAL_RCC_OscConfig+0x2ac>)
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800422e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004230:	4b0c      	ldr	r3, [pc, #48]	; (8004264 <HAL_RCC_OscConfig+0x2ac>)
 8004232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004234:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	2b08      	cmp	r3, #8
 800423a:	d007      	beq.n	800424c <HAL_RCC_OscConfig+0x294>
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	2b18      	cmp	r3, #24
 8004240:	d12f      	bne.n	80042a2 <HAL_RCC_OscConfig+0x2ea>
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	f003 0303 	and.w	r3, r3, #3
 8004248:	2b01      	cmp	r3, #1
 800424a:	d12a      	bne.n	80042a2 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800424c:	4b05      	ldr	r3, [pc, #20]	; (8004264 <HAL_RCC_OscConfig+0x2ac>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004254:	2b00      	cmp	r3, #0
 8004256:	d007      	beq.n	8004268 <HAL_RCC_OscConfig+0x2b0>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	69db      	ldr	r3, [r3, #28]
 800425c:	2b80      	cmp	r3, #128	; 0x80
 800425e:	d003      	beq.n	8004268 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e277      	b.n	8004754 <HAL_RCC_OscConfig+0x79c>
 8004264:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004268:	f7fd ff26 	bl	80020b8 <HAL_GetREVID>
 800426c:	4602      	mov	r2, r0
 800426e:	f241 0303 	movw	r3, #4099	; 0x1003
 8004272:	429a      	cmp	r2, r3
 8004274:	d80a      	bhi.n	800428c <HAL_RCC_OscConfig+0x2d4>
 8004276:	4ba2      	ldr	r3, [pc, #648]	; (8004500 <HAL_RCC_OscConfig+0x548>)
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	069b      	lsls	r3, r3, #26
 8004284:	499e      	ldr	r1, [pc, #632]	; (8004500 <HAL_RCC_OscConfig+0x548>)
 8004286:	4313      	orrs	r3, r2
 8004288:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800428a:	e05d      	b.n	8004348 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800428c:	4b9c      	ldr	r3, [pc, #624]	; (8004500 <HAL_RCC_OscConfig+0x548>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	061b      	lsls	r3, r3, #24
 800429a:	4999      	ldr	r1, [pc, #612]	; (8004500 <HAL_RCC_OscConfig+0x548>)
 800429c:	4313      	orrs	r3, r2
 800429e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80042a0:	e052      	b.n	8004348 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d035      	beq.n	8004316 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80042aa:	4b95      	ldr	r3, [pc, #596]	; (8004500 <HAL_RCC_OscConfig+0x548>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a94      	ldr	r2, [pc, #592]	; (8004500 <HAL_RCC_OscConfig+0x548>)
 80042b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b6:	f7fd fed1 	bl	800205c <HAL_GetTick>
 80042ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80042bc:	e008      	b.n	80042d0 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80042be:	f7fd fecd 	bl	800205c <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e241      	b.n	8004754 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80042d0:	4b8b      	ldr	r3, [pc, #556]	; (8004500 <HAL_RCC_OscConfig+0x548>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d0f0      	beq.n	80042be <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80042dc:	f7fd feec 	bl	80020b8 <HAL_GetREVID>
 80042e0:	4602      	mov	r2, r0
 80042e2:	f241 0303 	movw	r3, #4099	; 0x1003
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d80a      	bhi.n	8004300 <HAL_RCC_OscConfig+0x348>
 80042ea:	4b85      	ldr	r3, [pc, #532]	; (8004500 <HAL_RCC_OscConfig+0x548>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	069b      	lsls	r3, r3, #26
 80042f8:	4981      	ldr	r1, [pc, #516]	; (8004500 <HAL_RCC_OscConfig+0x548>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	604b      	str	r3, [r1, #4]
 80042fe:	e023      	b.n	8004348 <HAL_RCC_OscConfig+0x390>
 8004300:	4b7f      	ldr	r3, [pc, #508]	; (8004500 <HAL_RCC_OscConfig+0x548>)
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	061b      	lsls	r3, r3, #24
 800430e:	497c      	ldr	r1, [pc, #496]	; (8004500 <HAL_RCC_OscConfig+0x548>)
 8004310:	4313      	orrs	r3, r2
 8004312:	60cb      	str	r3, [r1, #12]
 8004314:	e018      	b.n	8004348 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004316:	4b7a      	ldr	r3, [pc, #488]	; (8004500 <HAL_RCC_OscConfig+0x548>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a79      	ldr	r2, [pc, #484]	; (8004500 <HAL_RCC_OscConfig+0x548>)
 800431c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004322:	f7fd fe9b 	bl	800205c <HAL_GetTick>
 8004326:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004328:	e008      	b.n	800433c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800432a:	f7fd fe97 	bl	800205c <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	2b02      	cmp	r3, #2
 8004336:	d901      	bls.n	800433c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e20b      	b.n	8004754 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800433c:	4b70      	ldr	r3, [pc, #448]	; (8004500 <HAL_RCC_OscConfig+0x548>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1f0      	bne.n	800432a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0308 	and.w	r3, r3, #8
 8004350:	2b00      	cmp	r3, #0
 8004352:	d036      	beq.n	80043c2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d019      	beq.n	8004390 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800435c:	4b68      	ldr	r3, [pc, #416]	; (8004500 <HAL_RCC_OscConfig+0x548>)
 800435e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004360:	4a67      	ldr	r2, [pc, #412]	; (8004500 <HAL_RCC_OscConfig+0x548>)
 8004362:	f043 0301 	orr.w	r3, r3, #1
 8004366:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004368:	f7fd fe78 	bl	800205c <HAL_GetTick>
 800436c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004370:	f7fd fe74 	bl	800205c <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e1e8      	b.n	8004754 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004382:	4b5f      	ldr	r3, [pc, #380]	; (8004500 <HAL_RCC_OscConfig+0x548>)
 8004384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0f0      	beq.n	8004370 <HAL_RCC_OscConfig+0x3b8>
 800438e:	e018      	b.n	80043c2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004390:	4b5b      	ldr	r3, [pc, #364]	; (8004500 <HAL_RCC_OscConfig+0x548>)
 8004392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004394:	4a5a      	ldr	r2, [pc, #360]	; (8004500 <HAL_RCC_OscConfig+0x548>)
 8004396:	f023 0301 	bic.w	r3, r3, #1
 800439a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800439c:	f7fd fe5e 	bl	800205c <HAL_GetTick>
 80043a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043a4:	f7fd fe5a 	bl	800205c <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e1ce      	b.n	8004754 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80043b6:	4b52      	ldr	r3, [pc, #328]	; (8004500 <HAL_RCC_OscConfig+0x548>)
 80043b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1f0      	bne.n	80043a4 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0320 	and.w	r3, r3, #32
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d036      	beq.n	800443c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d019      	beq.n	800440a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80043d6:	4b4a      	ldr	r3, [pc, #296]	; (8004500 <HAL_RCC_OscConfig+0x548>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a49      	ldr	r2, [pc, #292]	; (8004500 <HAL_RCC_OscConfig+0x548>)
 80043dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80043e0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80043e2:	f7fd fe3b 	bl	800205c <HAL_GetTick>
 80043e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80043e8:	e008      	b.n	80043fc <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80043ea:	f7fd fe37 	bl	800205c <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e1ab      	b.n	8004754 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80043fc:	4b40      	ldr	r3, [pc, #256]	; (8004500 <HAL_RCC_OscConfig+0x548>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0f0      	beq.n	80043ea <HAL_RCC_OscConfig+0x432>
 8004408:	e018      	b.n	800443c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800440a:	4b3d      	ldr	r3, [pc, #244]	; (8004500 <HAL_RCC_OscConfig+0x548>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a3c      	ldr	r2, [pc, #240]	; (8004500 <HAL_RCC_OscConfig+0x548>)
 8004410:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004414:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004416:	f7fd fe21 	bl	800205c <HAL_GetTick>
 800441a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800441c:	e008      	b.n	8004430 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800441e:	f7fd fe1d 	bl	800205c <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d901      	bls.n	8004430 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e191      	b.n	8004754 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004430:	4b33      	ldr	r3, [pc, #204]	; (8004500 <HAL_RCC_OscConfig+0x548>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1f0      	bne.n	800441e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 8086 	beq.w	8004556 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800444a:	4b2e      	ldr	r3, [pc, #184]	; (8004504 <HAL_RCC_OscConfig+0x54c>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a2d      	ldr	r2, [pc, #180]	; (8004504 <HAL_RCC_OscConfig+0x54c>)
 8004450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004454:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004456:	f7fd fe01 	bl	800205c <HAL_GetTick>
 800445a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800445c:	e008      	b.n	8004470 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800445e:	f7fd fdfd 	bl	800205c <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b64      	cmp	r3, #100	; 0x64
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e171      	b.n	8004754 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004470:	4b24      	ldr	r3, [pc, #144]	; (8004504 <HAL_RCC_OscConfig+0x54c>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0f0      	beq.n	800445e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d106      	bne.n	8004492 <HAL_RCC_OscConfig+0x4da>
 8004484:	4b1e      	ldr	r3, [pc, #120]	; (8004500 <HAL_RCC_OscConfig+0x548>)
 8004486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004488:	4a1d      	ldr	r2, [pc, #116]	; (8004500 <HAL_RCC_OscConfig+0x548>)
 800448a:	f043 0301 	orr.w	r3, r3, #1
 800448e:	6713      	str	r3, [r2, #112]	; 0x70
 8004490:	e02d      	b.n	80044ee <HAL_RCC_OscConfig+0x536>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10c      	bne.n	80044b4 <HAL_RCC_OscConfig+0x4fc>
 800449a:	4b19      	ldr	r3, [pc, #100]	; (8004500 <HAL_RCC_OscConfig+0x548>)
 800449c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449e:	4a18      	ldr	r2, [pc, #96]	; (8004500 <HAL_RCC_OscConfig+0x548>)
 80044a0:	f023 0301 	bic.w	r3, r3, #1
 80044a4:	6713      	str	r3, [r2, #112]	; 0x70
 80044a6:	4b16      	ldr	r3, [pc, #88]	; (8004500 <HAL_RCC_OscConfig+0x548>)
 80044a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044aa:	4a15      	ldr	r2, [pc, #84]	; (8004500 <HAL_RCC_OscConfig+0x548>)
 80044ac:	f023 0304 	bic.w	r3, r3, #4
 80044b0:	6713      	str	r3, [r2, #112]	; 0x70
 80044b2:	e01c      	b.n	80044ee <HAL_RCC_OscConfig+0x536>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	2b05      	cmp	r3, #5
 80044ba:	d10c      	bne.n	80044d6 <HAL_RCC_OscConfig+0x51e>
 80044bc:	4b10      	ldr	r3, [pc, #64]	; (8004500 <HAL_RCC_OscConfig+0x548>)
 80044be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c0:	4a0f      	ldr	r2, [pc, #60]	; (8004500 <HAL_RCC_OscConfig+0x548>)
 80044c2:	f043 0304 	orr.w	r3, r3, #4
 80044c6:	6713      	str	r3, [r2, #112]	; 0x70
 80044c8:	4b0d      	ldr	r3, [pc, #52]	; (8004500 <HAL_RCC_OscConfig+0x548>)
 80044ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044cc:	4a0c      	ldr	r2, [pc, #48]	; (8004500 <HAL_RCC_OscConfig+0x548>)
 80044ce:	f043 0301 	orr.w	r3, r3, #1
 80044d2:	6713      	str	r3, [r2, #112]	; 0x70
 80044d4:	e00b      	b.n	80044ee <HAL_RCC_OscConfig+0x536>
 80044d6:	4b0a      	ldr	r3, [pc, #40]	; (8004500 <HAL_RCC_OscConfig+0x548>)
 80044d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044da:	4a09      	ldr	r2, [pc, #36]	; (8004500 <HAL_RCC_OscConfig+0x548>)
 80044dc:	f023 0301 	bic.w	r3, r3, #1
 80044e0:	6713      	str	r3, [r2, #112]	; 0x70
 80044e2:	4b07      	ldr	r3, [pc, #28]	; (8004500 <HAL_RCC_OscConfig+0x548>)
 80044e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e6:	4a06      	ldr	r2, [pc, #24]	; (8004500 <HAL_RCC_OscConfig+0x548>)
 80044e8:	f023 0304 	bic.w	r3, r3, #4
 80044ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d01a      	beq.n	800452c <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f6:	f7fd fdb1 	bl	800205c <HAL_GetTick>
 80044fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044fc:	e00f      	b.n	800451e <HAL_RCC_OscConfig+0x566>
 80044fe:	bf00      	nop
 8004500:	58024400 	.word	0x58024400
 8004504:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004508:	f7fd fda8 	bl	800205c <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	f241 3288 	movw	r2, #5000	; 0x1388
 8004516:	4293      	cmp	r3, r2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e11a      	b.n	8004754 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800451e:	4b8f      	ldr	r3, [pc, #572]	; (800475c <HAL_RCC_OscConfig+0x7a4>)
 8004520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0ee      	beq.n	8004508 <HAL_RCC_OscConfig+0x550>
 800452a:	e014      	b.n	8004556 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800452c:	f7fd fd96 	bl	800205c <HAL_GetTick>
 8004530:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004532:	e00a      	b.n	800454a <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004534:	f7fd fd92 	bl	800205c <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004542:	4293      	cmp	r3, r2
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e104      	b.n	8004754 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800454a:	4b84      	ldr	r3, [pc, #528]	; (800475c <HAL_RCC_OscConfig+0x7a4>)
 800454c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1ee      	bne.n	8004534 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455a:	2b00      	cmp	r3, #0
 800455c:	f000 80f9 	beq.w	8004752 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004560:	4b7e      	ldr	r3, [pc, #504]	; (800475c <HAL_RCC_OscConfig+0x7a4>)
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004568:	2b18      	cmp	r3, #24
 800456a:	f000 80b4 	beq.w	80046d6 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004572:	2b02      	cmp	r3, #2
 8004574:	f040 8095 	bne.w	80046a2 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004578:	4b78      	ldr	r3, [pc, #480]	; (800475c <HAL_RCC_OscConfig+0x7a4>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a77      	ldr	r2, [pc, #476]	; (800475c <HAL_RCC_OscConfig+0x7a4>)
 800457e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004582:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004584:	f7fd fd6a 	bl	800205c <HAL_GetTick>
 8004588:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800458c:	f7fd fd66 	bl	800205c <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e0da      	b.n	8004754 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800459e:	4b6f      	ldr	r3, [pc, #444]	; (800475c <HAL_RCC_OscConfig+0x7a4>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1f0      	bne.n	800458c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045aa:	4b6c      	ldr	r3, [pc, #432]	; (800475c <HAL_RCC_OscConfig+0x7a4>)
 80045ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045ae:	4b6c      	ldr	r3, [pc, #432]	; (8004760 <HAL_RCC_OscConfig+0x7a8>)
 80045b0:	4013      	ands	r3, r2
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80045ba:	0112      	lsls	r2, r2, #4
 80045bc:	430a      	orrs	r2, r1
 80045be:	4967      	ldr	r1, [pc, #412]	; (800475c <HAL_RCC_OscConfig+0x7a4>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	628b      	str	r3, [r1, #40]	; 0x28
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c8:	3b01      	subs	r3, #1
 80045ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d2:	3b01      	subs	r3, #1
 80045d4:	025b      	lsls	r3, r3, #9
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	431a      	orrs	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045de:	3b01      	subs	r3, #1
 80045e0:	041b      	lsls	r3, r3, #16
 80045e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80045e6:	431a      	orrs	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ec:	3b01      	subs	r3, #1
 80045ee:	061b      	lsls	r3, r3, #24
 80045f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80045f4:	4959      	ldr	r1, [pc, #356]	; (800475c <HAL_RCC_OscConfig+0x7a4>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80045fa:	4b58      	ldr	r3, [pc, #352]	; (800475c <HAL_RCC_OscConfig+0x7a4>)
 80045fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fe:	4a57      	ldr	r2, [pc, #348]	; (800475c <HAL_RCC_OscConfig+0x7a4>)
 8004600:	f023 0301 	bic.w	r3, r3, #1
 8004604:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004606:	4b55      	ldr	r3, [pc, #340]	; (800475c <HAL_RCC_OscConfig+0x7a4>)
 8004608:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800460a:	4b56      	ldr	r3, [pc, #344]	; (8004764 <HAL_RCC_OscConfig+0x7ac>)
 800460c:	4013      	ands	r3, r2
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004612:	00d2      	lsls	r2, r2, #3
 8004614:	4951      	ldr	r1, [pc, #324]	; (800475c <HAL_RCC_OscConfig+0x7a4>)
 8004616:	4313      	orrs	r3, r2
 8004618:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800461a:	4b50      	ldr	r3, [pc, #320]	; (800475c <HAL_RCC_OscConfig+0x7a4>)
 800461c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461e:	f023 020c 	bic.w	r2, r3, #12
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	494d      	ldr	r1, [pc, #308]	; (800475c <HAL_RCC_OscConfig+0x7a4>)
 8004628:	4313      	orrs	r3, r2
 800462a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800462c:	4b4b      	ldr	r3, [pc, #300]	; (800475c <HAL_RCC_OscConfig+0x7a4>)
 800462e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004630:	f023 0202 	bic.w	r2, r3, #2
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004638:	4948      	ldr	r1, [pc, #288]	; (800475c <HAL_RCC_OscConfig+0x7a4>)
 800463a:	4313      	orrs	r3, r2
 800463c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800463e:	4b47      	ldr	r3, [pc, #284]	; (800475c <HAL_RCC_OscConfig+0x7a4>)
 8004640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004642:	4a46      	ldr	r2, [pc, #280]	; (800475c <HAL_RCC_OscConfig+0x7a4>)
 8004644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004648:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800464a:	4b44      	ldr	r3, [pc, #272]	; (800475c <HAL_RCC_OscConfig+0x7a4>)
 800464c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464e:	4a43      	ldr	r2, [pc, #268]	; (800475c <HAL_RCC_OscConfig+0x7a4>)
 8004650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004654:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004656:	4b41      	ldr	r3, [pc, #260]	; (800475c <HAL_RCC_OscConfig+0x7a4>)
 8004658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465a:	4a40      	ldr	r2, [pc, #256]	; (800475c <HAL_RCC_OscConfig+0x7a4>)
 800465c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004660:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004662:	4b3e      	ldr	r3, [pc, #248]	; (800475c <HAL_RCC_OscConfig+0x7a4>)
 8004664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004666:	4a3d      	ldr	r2, [pc, #244]	; (800475c <HAL_RCC_OscConfig+0x7a4>)
 8004668:	f043 0301 	orr.w	r3, r3, #1
 800466c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800466e:	4b3b      	ldr	r3, [pc, #236]	; (800475c <HAL_RCC_OscConfig+0x7a4>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a3a      	ldr	r2, [pc, #232]	; (800475c <HAL_RCC_OscConfig+0x7a4>)
 8004674:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004678:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800467a:	f7fd fcef 	bl	800205c <HAL_GetTick>
 800467e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004680:	e008      	b.n	8004694 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004682:	f7fd fceb 	bl	800205c <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d901      	bls.n	8004694 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e05f      	b.n	8004754 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004694:	4b31      	ldr	r3, [pc, #196]	; (800475c <HAL_RCC_OscConfig+0x7a4>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0f0      	beq.n	8004682 <HAL_RCC_OscConfig+0x6ca>
 80046a0:	e057      	b.n	8004752 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046a2:	4b2e      	ldr	r3, [pc, #184]	; (800475c <HAL_RCC_OscConfig+0x7a4>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a2d      	ldr	r2, [pc, #180]	; (800475c <HAL_RCC_OscConfig+0x7a4>)
 80046a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ae:	f7fd fcd5 	bl	800205c <HAL_GetTick>
 80046b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046b4:	e008      	b.n	80046c8 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046b6:	f7fd fcd1 	bl	800205c <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d901      	bls.n	80046c8 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e045      	b.n	8004754 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046c8:	4b24      	ldr	r3, [pc, #144]	; (800475c <HAL_RCC_OscConfig+0x7a4>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1f0      	bne.n	80046b6 <HAL_RCC_OscConfig+0x6fe>
 80046d4:	e03d      	b.n	8004752 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80046d6:	4b21      	ldr	r3, [pc, #132]	; (800475c <HAL_RCC_OscConfig+0x7a4>)
 80046d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046da:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80046dc:	4b1f      	ldr	r3, [pc, #124]	; (800475c <HAL_RCC_OscConfig+0x7a4>)
 80046de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e0:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d031      	beq.n	800474e <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f003 0203 	and.w	r2, r3, #3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d12a      	bne.n	800474e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	091b      	lsrs	r3, r3, #4
 80046fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004704:	429a      	cmp	r2, r3
 8004706:	d122      	bne.n	800474e <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004712:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004714:	429a      	cmp	r2, r3
 8004716:	d11a      	bne.n	800474e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	0a5b      	lsrs	r3, r3, #9
 800471c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004724:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004726:	429a      	cmp	r2, r3
 8004728:	d111      	bne.n	800474e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	0c1b      	lsrs	r3, r3, #16
 800472e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004736:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004738:	429a      	cmp	r2, r3
 800473a:	d108      	bne.n	800474e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	0e1b      	lsrs	r3, r3, #24
 8004740:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004748:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800474a:	429a      	cmp	r2, r3
 800474c:	d001      	beq.n	8004752 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e000      	b.n	8004754 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3730      	adds	r7, #48	; 0x30
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	58024400 	.word	0x58024400
 8004760:	fffffc0c 	.word	0xfffffc0c
 8004764:	ffff0007 	.word	0xffff0007

08004768 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e19c      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800477c:	4b8a      	ldr	r3, [pc, #552]	; (80049a8 <HAL_RCC_ClockConfig+0x240>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 030f 	and.w	r3, r3, #15
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	429a      	cmp	r2, r3
 8004788:	d910      	bls.n	80047ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800478a:	4b87      	ldr	r3, [pc, #540]	; (80049a8 <HAL_RCC_ClockConfig+0x240>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f023 020f 	bic.w	r2, r3, #15
 8004792:	4985      	ldr	r1, [pc, #532]	; (80049a8 <HAL_RCC_ClockConfig+0x240>)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	4313      	orrs	r3, r2
 8004798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800479a:	4b83      	ldr	r3, [pc, #524]	; (80049a8 <HAL_RCC_ClockConfig+0x240>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 030f 	and.w	r3, r3, #15
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d001      	beq.n	80047ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e184      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0304 	and.w	r3, r3, #4
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d010      	beq.n	80047da <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	691a      	ldr	r2, [r3, #16]
 80047bc:	4b7b      	ldr	r3, [pc, #492]	; (80049ac <HAL_RCC_ClockConfig+0x244>)
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d908      	bls.n	80047da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80047c8:	4b78      	ldr	r3, [pc, #480]	; (80049ac <HAL_RCC_ClockConfig+0x244>)
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	4975      	ldr	r1, [pc, #468]	; (80049ac <HAL_RCC_ClockConfig+0x244>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0308 	and.w	r3, r3, #8
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d010      	beq.n	8004808 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	695a      	ldr	r2, [r3, #20]
 80047ea:	4b70      	ldr	r3, [pc, #448]	; (80049ac <HAL_RCC_ClockConfig+0x244>)
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d908      	bls.n	8004808 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80047f6:	4b6d      	ldr	r3, [pc, #436]	; (80049ac <HAL_RCC_ClockConfig+0x244>)
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	496a      	ldr	r1, [pc, #424]	; (80049ac <HAL_RCC_ClockConfig+0x244>)
 8004804:	4313      	orrs	r3, r2
 8004806:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0310 	and.w	r3, r3, #16
 8004810:	2b00      	cmp	r3, #0
 8004812:	d010      	beq.n	8004836 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	699a      	ldr	r2, [r3, #24]
 8004818:	4b64      	ldr	r3, [pc, #400]	; (80049ac <HAL_RCC_ClockConfig+0x244>)
 800481a:	69db      	ldr	r3, [r3, #28]
 800481c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004820:	429a      	cmp	r2, r3
 8004822:	d908      	bls.n	8004836 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004824:	4b61      	ldr	r3, [pc, #388]	; (80049ac <HAL_RCC_ClockConfig+0x244>)
 8004826:	69db      	ldr	r3, [r3, #28]
 8004828:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	495e      	ldr	r1, [pc, #376]	; (80049ac <HAL_RCC_ClockConfig+0x244>)
 8004832:	4313      	orrs	r3, r2
 8004834:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0320 	and.w	r3, r3, #32
 800483e:	2b00      	cmp	r3, #0
 8004840:	d010      	beq.n	8004864 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	69da      	ldr	r2, [r3, #28]
 8004846:	4b59      	ldr	r3, [pc, #356]	; (80049ac <HAL_RCC_ClockConfig+0x244>)
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800484e:	429a      	cmp	r2, r3
 8004850:	d908      	bls.n	8004864 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004852:	4b56      	ldr	r3, [pc, #344]	; (80049ac <HAL_RCC_ClockConfig+0x244>)
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	69db      	ldr	r3, [r3, #28]
 800485e:	4953      	ldr	r1, [pc, #332]	; (80049ac <HAL_RCC_ClockConfig+0x244>)
 8004860:	4313      	orrs	r3, r2
 8004862:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d010      	beq.n	8004892 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68da      	ldr	r2, [r3, #12]
 8004874:	4b4d      	ldr	r3, [pc, #308]	; (80049ac <HAL_RCC_ClockConfig+0x244>)
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	f003 030f 	and.w	r3, r3, #15
 800487c:	429a      	cmp	r2, r3
 800487e:	d908      	bls.n	8004892 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004880:	4b4a      	ldr	r3, [pc, #296]	; (80049ac <HAL_RCC_ClockConfig+0x244>)
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	f023 020f 	bic.w	r2, r3, #15
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	4947      	ldr	r1, [pc, #284]	; (80049ac <HAL_RCC_ClockConfig+0x244>)
 800488e:	4313      	orrs	r3, r2
 8004890:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b00      	cmp	r3, #0
 800489c:	d055      	beq.n	800494a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800489e:	4b43      	ldr	r3, [pc, #268]	; (80049ac <HAL_RCC_ClockConfig+0x244>)
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	4940      	ldr	r1, [pc, #256]	; (80049ac <HAL_RCC_ClockConfig+0x244>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d107      	bne.n	80048c8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80048b8:	4b3c      	ldr	r3, [pc, #240]	; (80049ac <HAL_RCC_ClockConfig+0x244>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d121      	bne.n	8004908 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e0f6      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	2b03      	cmp	r3, #3
 80048ce:	d107      	bne.n	80048e0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048d0:	4b36      	ldr	r3, [pc, #216]	; (80049ac <HAL_RCC_ClockConfig+0x244>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d115      	bne.n	8004908 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e0ea      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d107      	bne.n	80048f8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048e8:	4b30      	ldr	r3, [pc, #192]	; (80049ac <HAL_RCC_ClockConfig+0x244>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d109      	bne.n	8004908 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e0de      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048f8:	4b2c      	ldr	r3, [pc, #176]	; (80049ac <HAL_RCC_ClockConfig+0x244>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e0d6      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004908:	4b28      	ldr	r3, [pc, #160]	; (80049ac <HAL_RCC_ClockConfig+0x244>)
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	f023 0207 	bic.w	r2, r3, #7
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	4925      	ldr	r1, [pc, #148]	; (80049ac <HAL_RCC_ClockConfig+0x244>)
 8004916:	4313      	orrs	r3, r2
 8004918:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800491a:	f7fd fb9f 	bl	800205c <HAL_GetTick>
 800491e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004920:	e00a      	b.n	8004938 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004922:	f7fd fb9b 	bl	800205c <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004930:	4293      	cmp	r3, r2
 8004932:	d901      	bls.n	8004938 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e0be      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004938:	4b1c      	ldr	r3, [pc, #112]	; (80049ac <HAL_RCC_ClockConfig+0x244>)
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	00db      	lsls	r3, r3, #3
 8004946:	429a      	cmp	r2, r3
 8004948:	d1eb      	bne.n	8004922 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d010      	beq.n	8004978 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68da      	ldr	r2, [r3, #12]
 800495a:	4b14      	ldr	r3, [pc, #80]	; (80049ac <HAL_RCC_ClockConfig+0x244>)
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	f003 030f 	and.w	r3, r3, #15
 8004962:	429a      	cmp	r2, r3
 8004964:	d208      	bcs.n	8004978 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004966:	4b11      	ldr	r3, [pc, #68]	; (80049ac <HAL_RCC_ClockConfig+0x244>)
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	f023 020f 	bic.w	r2, r3, #15
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	490e      	ldr	r1, [pc, #56]	; (80049ac <HAL_RCC_ClockConfig+0x244>)
 8004974:	4313      	orrs	r3, r2
 8004976:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004978:	4b0b      	ldr	r3, [pc, #44]	; (80049a8 <HAL_RCC_ClockConfig+0x240>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 030f 	and.w	r3, r3, #15
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	429a      	cmp	r2, r3
 8004984:	d214      	bcs.n	80049b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004986:	4b08      	ldr	r3, [pc, #32]	; (80049a8 <HAL_RCC_ClockConfig+0x240>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f023 020f 	bic.w	r2, r3, #15
 800498e:	4906      	ldr	r1, [pc, #24]	; (80049a8 <HAL_RCC_ClockConfig+0x240>)
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	4313      	orrs	r3, r2
 8004994:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004996:	4b04      	ldr	r3, [pc, #16]	; (80049a8 <HAL_RCC_ClockConfig+0x240>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 030f 	and.w	r3, r3, #15
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d005      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e086      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x34e>
 80049a8:	52002000 	.word	0x52002000
 80049ac:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d010      	beq.n	80049de <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	691a      	ldr	r2, [r3, #16]
 80049c0:	4b3f      	ldr	r3, [pc, #252]	; (8004ac0 <HAL_RCC_ClockConfig+0x358>)
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d208      	bcs.n	80049de <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80049cc:	4b3c      	ldr	r3, [pc, #240]	; (8004ac0 <HAL_RCC_ClockConfig+0x358>)
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	4939      	ldr	r1, [pc, #228]	; (8004ac0 <HAL_RCC_ClockConfig+0x358>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0308 	and.w	r3, r3, #8
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d010      	beq.n	8004a0c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	695a      	ldr	r2, [r3, #20]
 80049ee:	4b34      	ldr	r3, [pc, #208]	; (8004ac0 <HAL_RCC_ClockConfig+0x358>)
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d208      	bcs.n	8004a0c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80049fa:	4b31      	ldr	r3, [pc, #196]	; (8004ac0 <HAL_RCC_ClockConfig+0x358>)
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	492e      	ldr	r1, [pc, #184]	; (8004ac0 <HAL_RCC_ClockConfig+0x358>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0310 	and.w	r3, r3, #16
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d010      	beq.n	8004a3a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	699a      	ldr	r2, [r3, #24]
 8004a1c:	4b28      	ldr	r3, [pc, #160]	; (8004ac0 <HAL_RCC_ClockConfig+0x358>)
 8004a1e:	69db      	ldr	r3, [r3, #28]
 8004a20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d208      	bcs.n	8004a3a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a28:	4b25      	ldr	r3, [pc, #148]	; (8004ac0 <HAL_RCC_ClockConfig+0x358>)
 8004a2a:	69db      	ldr	r3, [r3, #28]
 8004a2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	4922      	ldr	r1, [pc, #136]	; (8004ac0 <HAL_RCC_ClockConfig+0x358>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0320 	and.w	r3, r3, #32
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d010      	beq.n	8004a68 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	69da      	ldr	r2, [r3, #28]
 8004a4a:	4b1d      	ldr	r3, [pc, #116]	; (8004ac0 <HAL_RCC_ClockConfig+0x358>)
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d208      	bcs.n	8004a68 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004a56:	4b1a      	ldr	r3, [pc, #104]	; (8004ac0 <HAL_RCC_ClockConfig+0x358>)
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	4917      	ldr	r1, [pc, #92]	; (8004ac0 <HAL_RCC_ClockConfig+0x358>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a68:	f000 f834 	bl	8004ad4 <HAL_RCC_GetSysClockFreq>
 8004a6c:	4601      	mov	r1, r0
 8004a6e:	4b14      	ldr	r3, [pc, #80]	; (8004ac0 <HAL_RCC_ClockConfig+0x358>)
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	0a1b      	lsrs	r3, r3, #8
 8004a74:	f003 030f 	and.w	r3, r3, #15
 8004a78:	4a12      	ldr	r2, [pc, #72]	; (8004ac4 <HAL_RCC_ClockConfig+0x35c>)
 8004a7a:	5cd3      	ldrb	r3, [r2, r3]
 8004a7c:	f003 031f 	and.w	r3, r3, #31
 8004a80:	fa21 f303 	lsr.w	r3, r1, r3
 8004a84:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a86:	4b0e      	ldr	r3, [pc, #56]	; (8004ac0 <HAL_RCC_ClockConfig+0x358>)
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	f003 030f 	and.w	r3, r3, #15
 8004a8e:	4a0d      	ldr	r2, [pc, #52]	; (8004ac4 <HAL_RCC_ClockConfig+0x35c>)
 8004a90:	5cd3      	ldrb	r3, [r2, r3]
 8004a92:	f003 031f 	and.w	r3, r3, #31
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	fa22 f303 	lsr.w	r3, r2, r3
 8004a9c:	4a0a      	ldr	r2, [pc, #40]	; (8004ac8 <HAL_RCC_ClockConfig+0x360>)
 8004a9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004aa0:	4a0a      	ldr	r2, [pc, #40]	; (8004acc <HAL_RCC_ClockConfig+0x364>)
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004aa6:	4b0a      	ldr	r3, [pc, #40]	; (8004ad0 <HAL_RCC_ClockConfig+0x368>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7fd fa8c 	bl	8001fc8 <HAL_InitTick>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3718      	adds	r7, #24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	58024400 	.word	0x58024400
 8004ac4:	0800db8c 	.word	0x0800db8c
 8004ac8:	2400000c 	.word	0x2400000c
 8004acc:	24000008 	.word	0x24000008
 8004ad0:	24000010 	.word	0x24000010

08004ad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b089      	sub	sp, #36	; 0x24
 8004ad8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ada:	4baf      	ldr	r3, [pc, #700]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ae2:	2b18      	cmp	r3, #24
 8004ae4:	f200 814e 	bhi.w	8004d84 <HAL_RCC_GetSysClockFreq+0x2b0>
 8004ae8:	a201      	add	r2, pc, #4	; (adr r2, 8004af0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aee:	bf00      	nop
 8004af0:	08004b55 	.word	0x08004b55
 8004af4:	08004d85 	.word	0x08004d85
 8004af8:	08004d85 	.word	0x08004d85
 8004afc:	08004d85 	.word	0x08004d85
 8004b00:	08004d85 	.word	0x08004d85
 8004b04:	08004d85 	.word	0x08004d85
 8004b08:	08004d85 	.word	0x08004d85
 8004b0c:	08004d85 	.word	0x08004d85
 8004b10:	08004b7b 	.word	0x08004b7b
 8004b14:	08004d85 	.word	0x08004d85
 8004b18:	08004d85 	.word	0x08004d85
 8004b1c:	08004d85 	.word	0x08004d85
 8004b20:	08004d85 	.word	0x08004d85
 8004b24:	08004d85 	.word	0x08004d85
 8004b28:	08004d85 	.word	0x08004d85
 8004b2c:	08004d85 	.word	0x08004d85
 8004b30:	08004b81 	.word	0x08004b81
 8004b34:	08004d85 	.word	0x08004d85
 8004b38:	08004d85 	.word	0x08004d85
 8004b3c:	08004d85 	.word	0x08004d85
 8004b40:	08004d85 	.word	0x08004d85
 8004b44:	08004d85 	.word	0x08004d85
 8004b48:	08004d85 	.word	0x08004d85
 8004b4c:	08004d85 	.word	0x08004d85
 8004b50:	08004b87 	.word	0x08004b87
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b54:	4b90      	ldr	r3, [pc, #576]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0320 	and.w	r3, r3, #32
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d009      	beq.n	8004b74 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b60:	4b8d      	ldr	r3, [pc, #564]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	08db      	lsrs	r3, r3, #3
 8004b66:	f003 0303 	and.w	r3, r3, #3
 8004b6a:	4a8c      	ldr	r2, [pc, #560]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b70:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004b72:	e10a      	b.n	8004d8a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004b74:	4b89      	ldr	r3, [pc, #548]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004b76:	61bb      	str	r3, [r7, #24]
    break;
 8004b78:	e107      	b.n	8004d8a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004b7a:	4b89      	ldr	r3, [pc, #548]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004b7c:	61bb      	str	r3, [r7, #24]
    break;
 8004b7e:	e104      	b.n	8004d8a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004b80:	4b88      	ldr	r3, [pc, #544]	; (8004da4 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8004b82:	61bb      	str	r3, [r7, #24]
    break;
 8004b84:	e101      	b.n	8004d8a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b86:	4b84      	ldr	r3, [pc, #528]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8a:	f003 0303 	and.w	r3, r3, #3
 8004b8e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004b90:	4b81      	ldr	r3, [pc, #516]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b94:	091b      	lsrs	r3, r3, #4
 8004b96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b9a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004b9c:	4b7e      	ldr	r3, [pc, #504]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004ba6:	4b7c      	ldr	r3, [pc, #496]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004baa:	08db      	lsrs	r3, r3, #3
 8004bac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	fb02 f303 	mul.w	r3, r2, r3
 8004bb6:	ee07 3a90 	vmov	s15, r3
 8004bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bbe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 80da 	beq.w	8004d7e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d05a      	beq.n	8004c86 <HAL_RCC_GetSysClockFreq+0x1b2>
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d302      	bcc.n	8004bda <HAL_RCC_GetSysClockFreq+0x106>
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d078      	beq.n	8004cca <HAL_RCC_GetSysClockFreq+0x1f6>
 8004bd8:	e099      	b.n	8004d0e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bda:	4b6f      	ldr	r3, [pc, #444]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0320 	and.w	r3, r3, #32
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d02d      	beq.n	8004c42 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004be6:	4b6c      	ldr	r3, [pc, #432]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	08db      	lsrs	r3, r3, #3
 8004bec:	f003 0303 	and.w	r3, r3, #3
 8004bf0:	4a6a      	ldr	r2, [pc, #424]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf6:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	ee07 3a90 	vmov	s15, r3
 8004bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	ee07 3a90 	vmov	s15, r3
 8004c08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c10:	4b61      	ldr	r3, [pc, #388]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c18:	ee07 3a90 	vmov	s15, r3
 8004c1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c20:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c24:	eddf 5a60 	vldr	s11, [pc, #384]	; 8004da8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004c28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c3c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004c40:	e087      	b.n	8004d52 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	ee07 3a90 	vmov	s15, r3
 8004c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c4c:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004dac <HAL_RCC_GetSysClockFreq+0x2d8>
 8004c50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c54:	4b50      	ldr	r3, [pc, #320]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c5c:	ee07 3a90 	vmov	s15, r3
 8004c60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c64:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c68:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004da8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004c6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c80:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c84:	e065      	b.n	8004d52 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	ee07 3a90 	vmov	s15, r3
 8004c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c90:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004db0 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004c94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c98:	4b3f      	ldr	r3, [pc, #252]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ca0:	ee07 3a90 	vmov	s15, r3
 8004ca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ca8:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cac:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004da8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004cb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cc4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cc8:	e043      	b.n	8004d52 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	ee07 3a90 	vmov	s15, r3
 8004cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd4:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004db4 <HAL_RCC_GetSysClockFreq+0x2e0>
 8004cd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cdc:	4b2e      	ldr	r3, [pc, #184]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ce4:	ee07 3a90 	vmov	s15, r3
 8004ce8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cec:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cf0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004da8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004cf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d08:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d0c:	e021      	b.n	8004d52 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	ee07 3a90 	vmov	s15, r3
 8004d14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d18:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004db0 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004d1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d20:	4b1d      	ldr	r3, [pc, #116]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d28:	ee07 3a90 	vmov	s15, r3
 8004d2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d30:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d34:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004da8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004d38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d4c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d50:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004d52:	4b11      	ldr	r3, [pc, #68]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d56:	0a5b      	lsrs	r3, r3, #9
 8004d58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	ee07 3a90 	vmov	s15, r3
 8004d66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d76:	ee17 3a90 	vmov	r3, s15
 8004d7a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004d7c:	e005      	b.n	8004d8a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	61bb      	str	r3, [r7, #24]
    break;
 8004d82:	e002      	b.n	8004d8a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8004d84:	4b06      	ldr	r3, [pc, #24]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004d86:	61bb      	str	r3, [r7, #24]
    break;
 8004d88:	bf00      	nop
  }

  return sysclockfreq;
 8004d8a:	69bb      	ldr	r3, [r7, #24]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3724      	adds	r7, #36	; 0x24
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	58024400 	.word	0x58024400
 8004d9c:	03d09000 	.word	0x03d09000
 8004da0:	003d0900 	.word	0x003d0900
 8004da4:	007a1200 	.word	0x007a1200
 8004da8:	46000000 	.word	0x46000000
 8004dac:	4c742400 	.word	0x4c742400
 8004db0:	4a742400 	.word	0x4a742400
 8004db4:	4af42400 	.word	0x4af42400

08004db8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004dbe:	f7ff fe89 	bl	8004ad4 <HAL_RCC_GetSysClockFreq>
 8004dc2:	4601      	mov	r1, r0
 8004dc4:	4b10      	ldr	r3, [pc, #64]	; (8004e08 <HAL_RCC_GetHCLKFreq+0x50>)
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	0a1b      	lsrs	r3, r3, #8
 8004dca:	f003 030f 	and.w	r3, r3, #15
 8004dce:	4a0f      	ldr	r2, [pc, #60]	; (8004e0c <HAL_RCC_GetHCLKFreq+0x54>)
 8004dd0:	5cd3      	ldrb	r3, [r2, r3]
 8004dd2:	f003 031f 	and.w	r3, r3, #31
 8004dd6:	fa21 f303 	lsr.w	r3, r1, r3
 8004dda:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ddc:	4b0a      	ldr	r3, [pc, #40]	; (8004e08 <HAL_RCC_GetHCLKFreq+0x50>)
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	f003 030f 	and.w	r3, r3, #15
 8004de4:	4a09      	ldr	r2, [pc, #36]	; (8004e0c <HAL_RCC_GetHCLKFreq+0x54>)
 8004de6:	5cd3      	ldrb	r3, [r2, r3]
 8004de8:	f003 031f 	and.w	r3, r3, #31
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	fa22 f303 	lsr.w	r3, r2, r3
 8004df2:	4a07      	ldr	r2, [pc, #28]	; (8004e10 <HAL_RCC_GetHCLKFreq+0x58>)
 8004df4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004df6:	4a07      	ldr	r2, [pc, #28]	; (8004e14 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004dfc:	4b04      	ldr	r3, [pc, #16]	; (8004e10 <HAL_RCC_GetHCLKFreq+0x58>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	58024400 	.word	0x58024400
 8004e0c:	0800db8c 	.word	0x0800db8c
 8004e10:	2400000c 	.word	0x2400000c
 8004e14:	24000008 	.word	0x24000008

08004e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004e1c:	f7ff ffcc 	bl	8004db8 <HAL_RCC_GetHCLKFreq>
 8004e20:	4601      	mov	r1, r0
 8004e22:	4b06      	ldr	r3, [pc, #24]	; (8004e3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	091b      	lsrs	r3, r3, #4
 8004e28:	f003 0307 	and.w	r3, r3, #7
 8004e2c:	4a04      	ldr	r2, [pc, #16]	; (8004e40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e2e:	5cd3      	ldrb	r3, [r2, r3]
 8004e30:	f003 031f 	and.w	r3, r3, #31
 8004e34:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	58024400 	.word	0x58024400
 8004e40:	0800db8c 	.word	0x0800db8c

08004e44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004e48:	f7ff ffb6 	bl	8004db8 <HAL_RCC_GetHCLKFreq>
 8004e4c:	4601      	mov	r1, r0
 8004e4e:	4b06      	ldr	r3, [pc, #24]	; (8004e68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	0a1b      	lsrs	r3, r3, #8
 8004e54:	f003 0307 	and.w	r3, r3, #7
 8004e58:	4a04      	ldr	r2, [pc, #16]	; (8004e6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e5a:	5cd3      	ldrb	r3, [r2, r3]
 8004e5c:	f003 031f 	and.w	r3, r3, #31
 8004e60:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	58024400 	.word	0x58024400
 8004e6c:	0800db8c 	.word	0x0800db8c

08004e70 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e78:	2300      	movs	r3, #0
 8004e7a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d03d      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e94:	d013      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004e96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e9a:	d802      	bhi.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d007      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004ea0:	e01f      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004ea2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ea6:	d013      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004ea8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004eac:	d01c      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004eae:	e018      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004eb0:	4baf      	ldr	r3, [pc, #700]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb4:	4aae      	ldr	r2, [pc, #696]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004eb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004eba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004ebc:	e015      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	3304      	adds	r3, #4
 8004ec2:	2102      	movs	r1, #2
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f001 f95f 	bl	8006188 <RCCEx_PLL2_Config>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004ece:	e00c      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	3324      	adds	r3, #36	; 0x24
 8004ed4:	2102      	movs	r1, #2
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f001 fa08 	bl	80062ec <RCCEx_PLL3_Config>
 8004edc:	4603      	mov	r3, r0
 8004ede:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004ee0:	e003      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	75fb      	strb	r3, [r7, #23]
      break;
 8004ee6:	e000      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004ee8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004eea:	7dfb      	ldrb	r3, [r7, #23]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d109      	bne.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004ef0:	4b9f      	ldr	r3, [pc, #636]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ef4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004efc:	499c      	ldr	r1, [pc, #624]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	650b      	str	r3, [r1, #80]	; 0x50
 8004f02:	e001      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f04:	7dfb      	ldrb	r3, [r7, #23]
 8004f06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d03d      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f18:	2b04      	cmp	r3, #4
 8004f1a:	d826      	bhi.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8004f1c:	a201      	add	r2, pc, #4	; (adr r2, 8004f24 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8004f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f22:	bf00      	nop
 8004f24:	08004f39 	.word	0x08004f39
 8004f28:	08004f47 	.word	0x08004f47
 8004f2c:	08004f59 	.word	0x08004f59
 8004f30:	08004f71 	.word	0x08004f71
 8004f34:	08004f71 	.word	0x08004f71
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f38:	4b8d      	ldr	r3, [pc, #564]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3c:	4a8c      	ldr	r2, [pc, #560]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f44:	e015      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	3304      	adds	r3, #4
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f001 f91b 	bl	8006188 <RCCEx_PLL2_Config>
 8004f52:	4603      	mov	r3, r0
 8004f54:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f56:	e00c      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	3324      	adds	r3, #36	; 0x24
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f001 f9c4 	bl	80062ec <RCCEx_PLL3_Config>
 8004f64:	4603      	mov	r3, r0
 8004f66:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f68:	e003      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	75fb      	strb	r3, [r7, #23]
      break;
 8004f6e:	e000      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8004f70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f72:	7dfb      	ldrb	r3, [r7, #23]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d109      	bne.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f78:	4b7d      	ldr	r3, [pc, #500]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f7c:	f023 0207 	bic.w	r2, r3, #7
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f84:	497a      	ldr	r1, [pc, #488]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	650b      	str	r3, [r1, #80]	; 0x50
 8004f8a:	e001      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f8c:	7dfb      	ldrb	r3, [r7, #23]
 8004f8e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d03e      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa0:	2b80      	cmp	r3, #128	; 0x80
 8004fa2:	d01c      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004fa4:	2b80      	cmp	r3, #128	; 0x80
 8004fa6:	d804      	bhi.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d008      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004fac:	2b40      	cmp	r3, #64	; 0x40
 8004fae:	d00d      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004fb0:	e01e      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004fb2:	2bc0      	cmp	r3, #192	; 0xc0
 8004fb4:	d01f      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fba:	d01e      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004fbc:	e018      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fbe:	4b6c      	ldr	r3, [pc, #432]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc2:	4a6b      	ldr	r2, [pc, #428]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fc8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004fca:	e017      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	3304      	adds	r3, #4
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f001 f8d8 	bl	8006188 <RCCEx_PLL2_Config>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004fdc:	e00e      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	3324      	adds	r3, #36	; 0x24
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f001 f981 	bl	80062ec <RCCEx_PLL3_Config>
 8004fea:	4603      	mov	r3, r0
 8004fec:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004fee:	e005      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ff4:	e002      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004ff6:	bf00      	nop
 8004ff8:	e000      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004ffa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ffc:	7dfb      	ldrb	r3, [r7, #23]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d109      	bne.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005002:	4b5b      	ldr	r3, [pc, #364]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005006:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800500e:	4958      	ldr	r1, [pc, #352]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005010:	4313      	orrs	r3, r2
 8005012:	650b      	str	r3, [r1, #80]	; 0x50
 8005014:	e001      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005016:	7dfb      	ldrb	r3, [r7, #23]
 8005018:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005022:	2b00      	cmp	r3, #0
 8005024:	d044      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800502c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005030:	d01f      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005032:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005036:	d805      	bhi.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00a      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800503c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005040:	d00e      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8005042:	e01f      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8005044:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005048:	d01f      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800504a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800504e:	d01e      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005050:	e018      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005052:	4b47      	ldr	r3, [pc, #284]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005056:	4a46      	ldr	r2, [pc, #280]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800505c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800505e:	e017      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3304      	adds	r3, #4
 8005064:	2100      	movs	r1, #0
 8005066:	4618      	mov	r0, r3
 8005068:	f001 f88e 	bl	8006188 <RCCEx_PLL2_Config>
 800506c:	4603      	mov	r3, r0
 800506e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005070:	e00e      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	3324      	adds	r3, #36	; 0x24
 8005076:	2100      	movs	r1, #0
 8005078:	4618      	mov	r0, r3
 800507a:	f001 f937 	bl	80062ec <RCCEx_PLL3_Config>
 800507e:	4603      	mov	r3, r0
 8005080:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005082:	e005      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	75fb      	strb	r3, [r7, #23]
      break;
 8005088:	e002      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800508a:	bf00      	nop
 800508c:	e000      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800508e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005090:	7dfb      	ldrb	r3, [r7, #23]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10a      	bne.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005096:	4b36      	ldr	r3, [pc, #216]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800509a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80050a4:	4932      	ldr	r1, [pc, #200]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	658b      	str	r3, [r1, #88]	; 0x58
 80050aa:	e001      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ac:	7dfb      	ldrb	r3, [r7, #23]
 80050ae:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d044      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80050c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050c6:	d01f      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80050c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050cc:	d805      	bhi.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00a      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80050d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050d6:	d00e      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80050d8:	e01f      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80050da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80050de:	d01f      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80050e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050e4:	d01e      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80050e6:	e018      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050e8:	4b21      	ldr	r3, [pc, #132]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80050ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ec:	4a20      	ldr	r2, [pc, #128]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80050ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80050f4:	e017      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	3304      	adds	r3, #4
 80050fa:	2100      	movs	r1, #0
 80050fc:	4618      	mov	r0, r3
 80050fe:	f001 f843 	bl	8006188 <RCCEx_PLL2_Config>
 8005102:	4603      	mov	r3, r0
 8005104:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005106:	e00e      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	3324      	adds	r3, #36	; 0x24
 800510c:	2100      	movs	r1, #0
 800510e:	4618      	mov	r0, r3
 8005110:	f001 f8ec 	bl	80062ec <RCCEx_PLL3_Config>
 8005114:	4603      	mov	r3, r0
 8005116:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005118:	e005      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	75fb      	strb	r3, [r7, #23]
      break;
 800511e:	e002      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005120:	bf00      	nop
 8005122:	e000      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005124:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005126:	7dfb      	ldrb	r3, [r7, #23]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10a      	bne.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800512c:	4b10      	ldr	r3, [pc, #64]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800512e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005130:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800513a:	490d      	ldr	r1, [pc, #52]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800513c:	4313      	orrs	r3, r2
 800513e:	658b      	str	r3, [r1, #88]	; 0x58
 8005140:	e001      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005142:	7dfb      	ldrb	r3, [r7, #23]
 8005144:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d035      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005156:	2b10      	cmp	r3, #16
 8005158:	d00c      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800515a:	2b10      	cmp	r3, #16
 800515c:	d802      	bhi.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800515e:	2b00      	cmp	r3, #0
 8005160:	d01b      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8005162:	e017      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005164:	2b20      	cmp	r3, #32
 8005166:	d00c      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8005168:	2b30      	cmp	r3, #48	; 0x30
 800516a:	d018      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800516c:	e012      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800516e:	bf00      	nop
 8005170:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005174:	4baf      	ldr	r3, [pc, #700]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005178:	4aae      	ldr	r2, [pc, #696]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800517a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800517e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005180:	e00e      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	3304      	adds	r3, #4
 8005186:	2102      	movs	r1, #2
 8005188:	4618      	mov	r0, r3
 800518a:	f000 fffd 	bl	8006188 <RCCEx_PLL2_Config>
 800518e:	4603      	mov	r3, r0
 8005190:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005192:	e005      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	75fb      	strb	r3, [r7, #23]
      break;
 8005198:	e002      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800519a:	bf00      	nop
 800519c:	e000      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800519e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051a0:	7dfb      	ldrb	r3, [r7, #23]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d109      	bne.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80051a6:	4ba3      	ldr	r3, [pc, #652]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80051a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051b2:	49a0      	ldr	r1, [pc, #640]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80051b8:	e001      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ba:	7dfb      	ldrb	r3, [r7, #23]
 80051bc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d042      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051d2:	d01f      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80051d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051d8:	d805      	bhi.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00a      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80051de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e2:	d00e      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80051e4:	e01f      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80051e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80051ea:	d01f      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80051ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051f0:	d01e      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80051f2:	e018      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051f4:	4b8f      	ldr	r3, [pc, #572]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80051f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f8:	4a8e      	ldr	r2, [pc, #568]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80051fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005200:	e017      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	3304      	adds	r3, #4
 8005206:	2100      	movs	r1, #0
 8005208:	4618      	mov	r0, r3
 800520a:	f000 ffbd 	bl	8006188 <RCCEx_PLL2_Config>
 800520e:	4603      	mov	r3, r0
 8005210:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005212:	e00e      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3324      	adds	r3, #36	; 0x24
 8005218:	2100      	movs	r1, #0
 800521a:	4618      	mov	r0, r3
 800521c:	f001 f866 	bl	80062ec <RCCEx_PLL3_Config>
 8005220:	4603      	mov	r3, r0
 8005222:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005224:	e005      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	75fb      	strb	r3, [r7, #23]
      break;
 800522a:	e002      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800522c:	bf00      	nop
 800522e:	e000      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005230:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005232:	7dfb      	ldrb	r3, [r7, #23]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d109      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005238:	4b7e      	ldr	r3, [pc, #504]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800523a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800523c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005244:	497b      	ldr	r1, [pc, #492]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005246:	4313      	orrs	r3, r2
 8005248:	650b      	str	r3, [r1, #80]	; 0x50
 800524a:	e001      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800524c:	7dfb      	ldrb	r3, [r7, #23]
 800524e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d042      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005260:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005264:	d01b      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005266:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800526a:	d805      	bhi.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800526c:	2b00      	cmp	r3, #0
 800526e:	d022      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8005270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005274:	d00a      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005276:	e01b      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8005278:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800527c:	d01d      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800527e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005282:	d01c      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8005284:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005288:	d01b      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800528a:	e011      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	3304      	adds	r3, #4
 8005290:	2101      	movs	r1, #1
 8005292:	4618      	mov	r0, r3
 8005294:	f000 ff78 	bl	8006188 <RCCEx_PLL2_Config>
 8005298:	4603      	mov	r3, r0
 800529a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800529c:	e012      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	3324      	adds	r3, #36	; 0x24
 80052a2:	2101      	movs	r1, #1
 80052a4:	4618      	mov	r0, r3
 80052a6:	f001 f821 	bl	80062ec <RCCEx_PLL3_Config>
 80052aa:	4603      	mov	r3, r0
 80052ac:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80052ae:	e009      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	75fb      	strb	r3, [r7, #23]
      break;
 80052b4:	e006      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80052b6:	bf00      	nop
 80052b8:	e004      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80052ba:	bf00      	nop
 80052bc:	e002      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80052be:	bf00      	nop
 80052c0:	e000      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80052c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052c4:	7dfb      	ldrb	r3, [r7, #23]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d109      	bne.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80052ca:	4b5a      	ldr	r3, [pc, #360]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80052cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ce:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052d6:	4957      	ldr	r1, [pc, #348]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	650b      	str	r3, [r1, #80]	; 0x50
 80052dc:	e001      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052de:	7dfb      	ldrb	r3, [r7, #23]
 80052e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d044      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80052f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052f8:	d01b      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80052fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052fe:	d805      	bhi.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8005300:	2b00      	cmp	r3, #0
 8005302:	d022      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005304:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005308:	d00a      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800530a:	e01b      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800530c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005310:	d01d      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005312:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005316:	d01c      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8005318:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800531c:	d01b      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800531e:	e011      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	3304      	adds	r3, #4
 8005324:	2101      	movs	r1, #1
 8005326:	4618      	mov	r0, r3
 8005328:	f000 ff2e 	bl	8006188 <RCCEx_PLL2_Config>
 800532c:	4603      	mov	r3, r0
 800532e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005330:	e012      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	3324      	adds	r3, #36	; 0x24
 8005336:	2101      	movs	r1, #1
 8005338:	4618      	mov	r0, r3
 800533a:	f000 ffd7 	bl	80062ec <RCCEx_PLL3_Config>
 800533e:	4603      	mov	r3, r0
 8005340:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005342:	e009      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	75fb      	strb	r3, [r7, #23]
      break;
 8005348:	e006      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800534a:	bf00      	nop
 800534c:	e004      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800534e:	bf00      	nop
 8005350:	e002      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005352:	bf00      	nop
 8005354:	e000      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005356:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005358:	7dfb      	ldrb	r3, [r7, #23]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10a      	bne.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800535e:	4b35      	ldr	r3, [pc, #212]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005362:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800536c:	4931      	ldr	r1, [pc, #196]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800536e:	4313      	orrs	r3, r2
 8005370:	658b      	str	r3, [r1, #88]	; 0x58
 8005372:	e001      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005374:	7dfb      	ldrb	r3, [r7, #23]
 8005376:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d02d      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005388:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800538c:	d005      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800538e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005392:	d009      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8005394:	2b00      	cmp	r3, #0
 8005396:	d013      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005398:	e00f      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800539a:	4b26      	ldr	r3, [pc, #152]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800539c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539e:	4a25      	ldr	r2, [pc, #148]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80053a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80053a6:	e00c      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	3304      	adds	r3, #4
 80053ac:	2101      	movs	r1, #1
 80053ae:	4618      	mov	r0, r3
 80053b0:	f000 feea 	bl	8006188 <RCCEx_PLL2_Config>
 80053b4:	4603      	mov	r3, r0
 80053b6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80053b8:	e003      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	75fb      	strb	r3, [r7, #23]
      break;
 80053be:	e000      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80053c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053c2:	7dfb      	ldrb	r3, [r7, #23]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d109      	bne.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80053c8:	4b1a      	ldr	r3, [pc, #104]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80053ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053cc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053d4:	4917      	ldr	r1, [pc, #92]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	650b      	str	r3, [r1, #80]	; 0x50
 80053da:	e001      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053dc:	7dfb      	ldrb	r3, [r7, #23]
 80053de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d035      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f0:	2b03      	cmp	r3, #3
 80053f2:	d81b      	bhi.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80053f4:	a201      	add	r2, pc, #4	; (adr r2, 80053fc <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80053f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fa:	bf00      	nop
 80053fc:	08005439 	.word	0x08005439
 8005400:	0800540d 	.word	0x0800540d
 8005404:	0800541b 	.word	0x0800541b
 8005408:	08005439 	.word	0x08005439
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800540c:	4b09      	ldr	r3, [pc, #36]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800540e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005410:	4a08      	ldr	r2, [pc, #32]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005412:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005416:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005418:	e00f      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	3304      	adds	r3, #4
 800541e:	2102      	movs	r1, #2
 8005420:	4618      	mov	r0, r3
 8005422:	f000 feb1 	bl	8006188 <RCCEx_PLL2_Config>
 8005426:	4603      	mov	r3, r0
 8005428:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800542a:	e006      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	75fb      	strb	r3, [r7, #23]
      break;
 8005430:	e003      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8005432:	bf00      	nop
 8005434:	58024400 	.word	0x58024400
      break;
 8005438:	bf00      	nop
    }

    if(ret == HAL_OK)
 800543a:	7dfb      	ldrb	r3, [r7, #23]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d109      	bne.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005440:	4bba      	ldr	r3, [pc, #744]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005444:	f023 0203 	bic.w	r2, r3, #3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544c:	49b7      	ldr	r1, [pc, #732]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800544e:	4313      	orrs	r3, r2
 8005450:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005452:	e001      	b.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005454:	7dfb      	ldrb	r3, [r7, #23]
 8005456:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 8086 	beq.w	8005572 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005466:	4bb2      	ldr	r3, [pc, #712]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4ab1      	ldr	r2, [pc, #708]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800546c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005470:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005472:	f7fc fdf3 	bl	800205c <HAL_GetTick>
 8005476:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005478:	e009      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800547a:	f7fc fdef 	bl	800205c <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	2b64      	cmp	r3, #100	; 0x64
 8005486:	d902      	bls.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	75fb      	strb	r3, [r7, #23]
        break;
 800548c:	e005      	b.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800548e:	4ba8      	ldr	r3, [pc, #672]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005496:	2b00      	cmp	r3, #0
 8005498:	d0ef      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800549a:	7dfb      	ldrb	r3, [r7, #23]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d166      	bne.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80054a0:	4ba2      	ldr	r3, [pc, #648]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80054a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80054aa:	4053      	eors	r3, r2
 80054ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d013      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054b4:	4b9d      	ldr	r3, [pc, #628]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80054b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054bc:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054be:	4b9b      	ldr	r3, [pc, #620]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80054c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c2:	4a9a      	ldr	r2, [pc, #616]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80054c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054c8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054ca:	4b98      	ldr	r3, [pc, #608]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80054cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ce:	4a97      	ldr	r2, [pc, #604]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80054d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054d4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80054d6:	4a95      	ldr	r2, [pc, #596]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80054e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054e6:	d115      	bne.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e8:	f7fc fdb8 	bl	800205c <HAL_GetTick>
 80054ec:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054ee:	e00b      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054f0:	f7fc fdb4 	bl	800205c <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80054fe:	4293      	cmp	r3, r2
 8005500:	d902      	bls.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	75fb      	strb	r3, [r7, #23]
            break;
 8005506:	e005      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005508:	4b88      	ldr	r3, [pc, #544]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800550a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800550c:	f003 0302 	and.w	r3, r3, #2
 8005510:	2b00      	cmp	r3, #0
 8005512:	d0ed      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8005514:	7dfb      	ldrb	r3, [r7, #23]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d126      	bne.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005520:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005524:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005528:	d10d      	bne.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800552a:	4b80      	ldr	r3, [pc, #512]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005538:	0919      	lsrs	r1, r3, #4
 800553a:	4b7e      	ldr	r3, [pc, #504]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800553c:	400b      	ands	r3, r1
 800553e:	497b      	ldr	r1, [pc, #492]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005540:	4313      	orrs	r3, r2
 8005542:	610b      	str	r3, [r1, #16]
 8005544:	e005      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8005546:	4b79      	ldr	r3, [pc, #484]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	4a78      	ldr	r2, [pc, #480]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800554c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005550:	6113      	str	r3, [r2, #16]
 8005552:	4b76      	ldr	r3, [pc, #472]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005554:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800555c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005560:	4972      	ldr	r1, [pc, #456]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005562:	4313      	orrs	r3, r2
 8005564:	670b      	str	r3, [r1, #112]	; 0x70
 8005566:	e004      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005568:	7dfb      	ldrb	r3, [r7, #23]
 800556a:	75bb      	strb	r3, [r7, #22]
 800556c:	e001      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800556e:	7dfb      	ldrb	r3, [r7, #23]
 8005570:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d07d      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005582:	2b28      	cmp	r3, #40	; 0x28
 8005584:	d866      	bhi.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8005586:	a201      	add	r2, pc, #4	; (adr r2, 800558c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558c:	0800565b 	.word	0x0800565b
 8005590:	08005655 	.word	0x08005655
 8005594:	08005655 	.word	0x08005655
 8005598:	08005655 	.word	0x08005655
 800559c:	08005655 	.word	0x08005655
 80055a0:	08005655 	.word	0x08005655
 80055a4:	08005655 	.word	0x08005655
 80055a8:	08005655 	.word	0x08005655
 80055ac:	08005631 	.word	0x08005631
 80055b0:	08005655 	.word	0x08005655
 80055b4:	08005655 	.word	0x08005655
 80055b8:	08005655 	.word	0x08005655
 80055bc:	08005655 	.word	0x08005655
 80055c0:	08005655 	.word	0x08005655
 80055c4:	08005655 	.word	0x08005655
 80055c8:	08005655 	.word	0x08005655
 80055cc:	08005643 	.word	0x08005643
 80055d0:	08005655 	.word	0x08005655
 80055d4:	08005655 	.word	0x08005655
 80055d8:	08005655 	.word	0x08005655
 80055dc:	08005655 	.word	0x08005655
 80055e0:	08005655 	.word	0x08005655
 80055e4:	08005655 	.word	0x08005655
 80055e8:	08005655 	.word	0x08005655
 80055ec:	0800565b 	.word	0x0800565b
 80055f0:	08005655 	.word	0x08005655
 80055f4:	08005655 	.word	0x08005655
 80055f8:	08005655 	.word	0x08005655
 80055fc:	08005655 	.word	0x08005655
 8005600:	08005655 	.word	0x08005655
 8005604:	08005655 	.word	0x08005655
 8005608:	08005655 	.word	0x08005655
 800560c:	0800565b 	.word	0x0800565b
 8005610:	08005655 	.word	0x08005655
 8005614:	08005655 	.word	0x08005655
 8005618:	08005655 	.word	0x08005655
 800561c:	08005655 	.word	0x08005655
 8005620:	08005655 	.word	0x08005655
 8005624:	08005655 	.word	0x08005655
 8005628:	08005655 	.word	0x08005655
 800562c:	0800565b 	.word	0x0800565b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	3304      	adds	r3, #4
 8005634:	2101      	movs	r1, #1
 8005636:	4618      	mov	r0, r3
 8005638:	f000 fda6 	bl	8006188 <RCCEx_PLL2_Config>
 800563c:	4603      	mov	r3, r0
 800563e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005640:	e00c      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	3324      	adds	r3, #36	; 0x24
 8005646:	2101      	movs	r1, #1
 8005648:	4618      	mov	r0, r3
 800564a:	f000 fe4f 	bl	80062ec <RCCEx_PLL3_Config>
 800564e:	4603      	mov	r3, r0
 8005650:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005652:	e003      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	75fb      	strb	r3, [r7, #23]
      break;
 8005658:	e000      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800565a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800565c:	7dfb      	ldrb	r3, [r7, #23]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d109      	bne.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005662:	4b32      	ldr	r3, [pc, #200]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005666:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800566e:	492f      	ldr	r1, [pc, #188]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005670:	4313      	orrs	r3, r2
 8005672:	654b      	str	r3, [r1, #84]	; 0x54
 8005674:	e001      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005676:	7dfb      	ldrb	r3, [r7, #23]
 8005678:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0302 	and.w	r3, r3, #2
 8005682:	2b00      	cmp	r3, #0
 8005684:	d037      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800568a:	2b05      	cmp	r3, #5
 800568c:	d820      	bhi.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800568e:	a201      	add	r2, pc, #4	; (adr r2, 8005694 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005694:	080056d7 	.word	0x080056d7
 8005698:	080056ad 	.word	0x080056ad
 800569c:	080056bf 	.word	0x080056bf
 80056a0:	080056d7 	.word	0x080056d7
 80056a4:	080056d7 	.word	0x080056d7
 80056a8:	080056d7 	.word	0x080056d7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	3304      	adds	r3, #4
 80056b0:	2101      	movs	r1, #1
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 fd68 	bl	8006188 <RCCEx_PLL2_Config>
 80056b8:	4603      	mov	r3, r0
 80056ba:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80056bc:	e00c      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	3324      	adds	r3, #36	; 0x24
 80056c2:	2101      	movs	r1, #1
 80056c4:	4618      	mov	r0, r3
 80056c6:	f000 fe11 	bl	80062ec <RCCEx_PLL3_Config>
 80056ca:	4603      	mov	r3, r0
 80056cc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80056ce:	e003      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	75fb      	strb	r3, [r7, #23]
      break;
 80056d4:	e000      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80056d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056d8:	7dfb      	ldrb	r3, [r7, #23]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d109      	bne.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80056de:	4b13      	ldr	r3, [pc, #76]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80056e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e2:	f023 0207 	bic.w	r2, r3, #7
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056ea:	4910      	ldr	r1, [pc, #64]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	654b      	str	r3, [r1, #84]	; 0x54
 80056f0:	e001      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056f2:	7dfb      	ldrb	r3, [r7, #23]
 80056f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0304 	and.w	r3, r3, #4
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d040      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005708:	2b05      	cmp	r3, #5
 800570a:	d827      	bhi.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800570c:	a201      	add	r2, pc, #4	; (adr r2, 8005714 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800570e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005712:	bf00      	nop
 8005714:	08005763 	.word	0x08005763
 8005718:	08005739 	.word	0x08005739
 800571c:	0800574b 	.word	0x0800574b
 8005720:	08005763 	.word	0x08005763
 8005724:	08005763 	.word	0x08005763
 8005728:	08005763 	.word	0x08005763
 800572c:	58024400 	.word	0x58024400
 8005730:	58024800 	.word	0x58024800
 8005734:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	3304      	adds	r3, #4
 800573c:	2101      	movs	r1, #1
 800573e:	4618      	mov	r0, r3
 8005740:	f000 fd22 	bl	8006188 <RCCEx_PLL2_Config>
 8005744:	4603      	mov	r3, r0
 8005746:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005748:	e00c      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	3324      	adds	r3, #36	; 0x24
 800574e:	2101      	movs	r1, #1
 8005750:	4618      	mov	r0, r3
 8005752:	f000 fdcb 	bl	80062ec <RCCEx_PLL3_Config>
 8005756:	4603      	mov	r3, r0
 8005758:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800575a:	e003      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	75fb      	strb	r3, [r7, #23]
      break;
 8005760:	e000      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8005762:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005764:	7dfb      	ldrb	r3, [r7, #23]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10a      	bne.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800576a:	4bb2      	ldr	r3, [pc, #712]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800576c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800576e:	f023 0207 	bic.w	r2, r3, #7
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005778:	49ae      	ldr	r1, [pc, #696]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800577a:	4313      	orrs	r3, r2
 800577c:	658b      	str	r3, [r1, #88]	; 0x58
 800577e:	e001      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005780:	7dfb      	ldrb	r3, [r7, #23]
 8005782:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0320 	and.w	r3, r3, #32
 800578c:	2b00      	cmp	r3, #0
 800578e:	d044      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005796:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800579a:	d01b      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800579c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057a0:	d805      	bhi.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d022      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80057a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057aa:	d00a      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x952>
 80057ac:	e01b      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80057ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b2:	d01d      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80057b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057b8:	d01c      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80057ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80057be:	d01b      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80057c0:	e011      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	3304      	adds	r3, #4
 80057c6:	2100      	movs	r1, #0
 80057c8:	4618      	mov	r0, r3
 80057ca:	f000 fcdd 	bl	8006188 <RCCEx_PLL2_Config>
 80057ce:	4603      	mov	r3, r0
 80057d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80057d2:	e012      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	3324      	adds	r3, #36	; 0x24
 80057d8:	2102      	movs	r1, #2
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 fd86 	bl	80062ec <RCCEx_PLL3_Config>
 80057e0:	4603      	mov	r3, r0
 80057e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80057e4:	e009      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	75fb      	strb	r3, [r7, #23]
      break;
 80057ea:	e006      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80057ec:	bf00      	nop
 80057ee:	e004      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80057f0:	bf00      	nop
 80057f2:	e002      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80057f4:	bf00      	nop
 80057f6:	e000      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80057f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057fa:	7dfb      	ldrb	r3, [r7, #23]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10a      	bne.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005800:	4b8c      	ldr	r3, [pc, #560]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005804:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800580e:	4989      	ldr	r1, [pc, #548]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005810:	4313      	orrs	r3, r2
 8005812:	654b      	str	r3, [r1, #84]	; 0x54
 8005814:	e001      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005816:	7dfb      	ldrb	r3, [r7, #23]
 8005818:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005822:	2b00      	cmp	r3, #0
 8005824:	d044      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800582c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005830:	d01b      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8005832:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005836:	d805      	bhi.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8005838:	2b00      	cmp	r3, #0
 800583a:	d022      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800583c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005840:	d00a      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8005842:	e01b      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8005844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005848:	d01d      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800584a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800584e:	d01c      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8005850:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005854:	d01b      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8005856:	e011      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	3304      	adds	r3, #4
 800585c:	2100      	movs	r1, #0
 800585e:	4618      	mov	r0, r3
 8005860:	f000 fc92 	bl	8006188 <RCCEx_PLL2_Config>
 8005864:	4603      	mov	r3, r0
 8005866:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005868:	e012      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	3324      	adds	r3, #36	; 0x24
 800586e:	2102      	movs	r1, #2
 8005870:	4618      	mov	r0, r3
 8005872:	f000 fd3b 	bl	80062ec <RCCEx_PLL3_Config>
 8005876:	4603      	mov	r3, r0
 8005878:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800587a:	e009      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	75fb      	strb	r3, [r7, #23]
      break;
 8005880:	e006      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005882:	bf00      	nop
 8005884:	e004      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005886:	bf00      	nop
 8005888:	e002      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800588a:	bf00      	nop
 800588c:	e000      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800588e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005890:	7dfb      	ldrb	r3, [r7, #23]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10a      	bne.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005896:	4b67      	ldr	r3, [pc, #412]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800589a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058a4:	4963      	ldr	r1, [pc, #396]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	658b      	str	r3, [r1, #88]	; 0x58
 80058aa:	e001      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ac:	7dfb      	ldrb	r3, [r7, #23]
 80058ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d044      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058c6:	d01b      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80058c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058cc:	d805      	bhi.n	80058da <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d022      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80058d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058d6:	d00a      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80058d8:	e01b      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80058da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058de:	d01d      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80058e0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80058e4:	d01c      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80058e6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80058ea:	d01b      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80058ec:	e011      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	3304      	adds	r3, #4
 80058f2:	2100      	movs	r1, #0
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 fc47 	bl	8006188 <RCCEx_PLL2_Config>
 80058fa:	4603      	mov	r3, r0
 80058fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80058fe:	e012      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	3324      	adds	r3, #36	; 0x24
 8005904:	2102      	movs	r1, #2
 8005906:	4618      	mov	r0, r3
 8005908:	f000 fcf0 	bl	80062ec <RCCEx_PLL3_Config>
 800590c:	4603      	mov	r3, r0
 800590e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005910:	e009      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	75fb      	strb	r3, [r7, #23]
      break;
 8005916:	e006      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005918:	bf00      	nop
 800591a:	e004      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800591c:	bf00      	nop
 800591e:	e002      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005920:	bf00      	nop
 8005922:	e000      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005924:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005926:	7dfb      	ldrb	r3, [r7, #23]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d10a      	bne.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800592c:	4b41      	ldr	r3, [pc, #260]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800592e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005930:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800593a:	493e      	ldr	r1, [pc, #248]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800593c:	4313      	orrs	r3, r2
 800593e:	658b      	str	r3, [r1, #88]	; 0x58
 8005940:	e001      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005942:	7dfb      	ldrb	r3, [r7, #23]
 8005944:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0308 	and.w	r3, r3, #8
 800594e:	2b00      	cmp	r3, #0
 8005950:	d01a      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800595c:	d10a      	bne.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	3324      	adds	r3, #36	; 0x24
 8005962:	2102      	movs	r1, #2
 8005964:	4618      	mov	r0, r3
 8005966:	f000 fcc1 	bl	80062ec <RCCEx_PLL3_Config>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005974:	4b2f      	ldr	r3, [pc, #188]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005978:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005982:	492c      	ldr	r1, [pc, #176]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005984:	4313      	orrs	r3, r2
 8005986:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0310 	and.w	r3, r3, #16
 8005990:	2b00      	cmp	r3, #0
 8005992:	d01a      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800599a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800599e:	d10a      	bne.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	3324      	adds	r3, #36	; 0x24
 80059a4:	2102      	movs	r1, #2
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 fca0 	bl	80062ec <RCCEx_PLL3_Config>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80059b6:	4b1f      	ldr	r3, [pc, #124]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80059b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059c4:	491b      	ldr	r1, [pc, #108]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d032      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80059dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059e0:	d00d      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80059e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059e6:	d016      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d111      	bne.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	3304      	adds	r3, #4
 80059f0:	2100      	movs	r1, #0
 80059f2:	4618      	mov	r0, r3
 80059f4:	f000 fbc8 	bl	8006188 <RCCEx_PLL2_Config>
 80059f8:	4603      	mov	r3, r0
 80059fa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80059fc:	e00c      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	3324      	adds	r3, #36	; 0x24
 8005a02:	2102      	movs	r1, #2
 8005a04:	4618      	mov	r0, r3
 8005a06:	f000 fc71 	bl	80062ec <RCCEx_PLL3_Config>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005a0e:	e003      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	75fb      	strb	r3, [r7, #23]
      break;
 8005a14:	e000      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8005a16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a18:	7dfb      	ldrb	r3, [r7, #23]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10c      	bne.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a1e:	4b05      	ldr	r3, [pc, #20]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a22:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005a2c:	4901      	ldr	r1, [pc, #4]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	658b      	str	r3, [r1, #88]	; 0x58
 8005a32:	e003      	b.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8005a34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a38:	7dfb      	ldrb	r3, [r7, #23]
 8005a3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d02f      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a52:	d00c      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005a54:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a58:	d015      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8005a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a5e:	d10f      	bne.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a60:	4b71      	ldr	r3, [pc, #452]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a64:	4a70      	ldr	r2, [pc, #448]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005a66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005a6c:	e00c      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	3324      	adds	r3, #36	; 0x24
 8005a72:	2101      	movs	r1, #1
 8005a74:	4618      	mov	r0, r3
 8005a76:	f000 fc39 	bl	80062ec <RCCEx_PLL3_Config>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005a7e:	e003      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	75fb      	strb	r3, [r7, #23]
      break;
 8005a84:	e000      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8005a86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a88:	7dfb      	ldrb	r3, [r7, #23]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10a      	bne.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a8e:	4b66      	ldr	r3, [pc, #408]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a9c:	4962      	ldr	r1, [pc, #392]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	654b      	str	r3, [r1, #84]	; 0x54
 8005aa2:	e001      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa4:	7dfb      	ldrb	r3, [r7, #23]
 8005aa6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d029      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d003      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ac0:	d007      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8005ac2:	e00f      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ac4:	4b58      	ldr	r3, [pc, #352]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac8:	4a57      	ldr	r2, [pc, #348]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005aca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ace:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005ad0:	e00b      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	3304      	adds	r3, #4
 8005ad6:	2102      	movs	r1, #2
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f000 fb55 	bl	8006188 <RCCEx_PLL2_Config>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005ae2:	e002      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ae8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005aea:	7dfb      	ldrb	r3, [r7, #23]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d109      	bne.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005af0:	4b4d      	ldr	r3, [pc, #308]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005af4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005afc:	494a      	ldr	r1, [pc, #296]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005b02:	e001      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b04:	7dfb      	ldrb	r3, [r7, #23]
 8005b06:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00a      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	3324      	adds	r3, #36	; 0x24
 8005b18:	2102      	movs	r1, #2
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 fbe6 	bl	80062ec <RCCEx_PLL3_Config>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d02f      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b3e:	d00c      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005b40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b44:	d802      	bhi.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d011      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8005b4a:	e00d      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8005b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b50:	d00f      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8005b52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b56:	d00e      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8005b58:	e006      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b5a:	4b33      	ldr	r3, [pc, #204]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5e:	4a32      	ldr	r2, [pc, #200]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005b66:	e007      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	75fb      	strb	r3, [r7, #23]
      break;
 8005b6c:	e004      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005b6e:	bf00      	nop
 8005b70:	e002      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005b72:	bf00      	nop
 8005b74:	e000      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005b76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b78:	7dfb      	ldrb	r3, [r7, #23]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d109      	bne.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b7e:	4b2a      	ldr	r3, [pc, #168]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b8a:	4927      	ldr	r1, [pc, #156]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	654b      	str	r3, [r1, #84]	; 0x54
 8005b90:	e001      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b92:	7dfb      	ldrb	r3, [r7, #23]
 8005b94:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d008      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005ba2:	4b21      	ldr	r3, [pc, #132]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ba6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bae:	491e      	ldr	r1, [pc, #120]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d008      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005bc0:	4b19      	ldr	r3, [pc, #100]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bc4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bcc:	4916      	ldr	r1, [pc, #88]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00d      	beq.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005bde:	4b12      	ldr	r3, [pc, #72]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	4a11      	ldr	r2, [pc, #68]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005be4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005be8:	6113      	str	r3, [r2, #16]
 8005bea:	4b0f      	ldr	r3, [pc, #60]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005bec:	691a      	ldr	r2, [r3, #16]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005bf4:	490c      	ldr	r1, [pc, #48]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	da08      	bge.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005c02:	4b09      	ldr	r3, [pc, #36]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c06:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c0e:	4906      	ldr	r1, [pc, #24]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005c10:	4313      	orrs	r3, r2
 8005c12:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005c14:	7dbb      	ldrb	r3, [r7, #22]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	e000      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3718      	adds	r7, #24
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	58024400 	.word	0x58024400

08005c2c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005c30:	f7ff f8c2 	bl	8004db8 <HAL_RCC_GetHCLKFreq>
 8005c34:	4601      	mov	r1, r0
 8005c36:	4b06      	ldr	r3, [pc, #24]	; (8005c50 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	091b      	lsrs	r3, r3, #4
 8005c3c:	f003 0307 	and.w	r3, r3, #7
 8005c40:	4a04      	ldr	r2, [pc, #16]	; (8005c54 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005c42:	5cd3      	ldrb	r3, [r2, r3]
 8005c44:	f003 031f 	and.w	r3, r3, #31
 8005c48:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	58024400 	.word	0x58024400
 8005c54:	0800db8c 	.word	0x0800db8c

08005c58 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b089      	sub	sp, #36	; 0x24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c60:	4b9d      	ldr	r3, [pc, #628]	; (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c64:	f003 0303 	and.w	r3, r3, #3
 8005c68:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005c6a:	4b9b      	ldr	r3, [pc, #620]	; (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c6e:	0b1b      	lsrs	r3, r3, #12
 8005c70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c74:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005c76:	4b98      	ldr	r3, [pc, #608]	; (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7a:	091b      	lsrs	r3, r3, #4
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005c82:	4b95      	ldr	r3, [pc, #596]	; (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c86:	08db      	lsrs	r3, r3, #3
 8005c88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	fb02 f303 	mul.w	r3, r2, r3
 8005c92:	ee07 3a90 	vmov	s15, r3
 8005c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 810a 	beq.w	8005eba <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d05a      	beq.n	8005d62 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d302      	bcc.n	8005cb6 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d078      	beq.n	8005da6 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8005cb4:	e099      	b.n	8005dea <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cb6:	4b88      	ldr	r3, [pc, #544]	; (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0320 	and.w	r3, r3, #32
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d02d      	beq.n	8005d1e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005cc2:	4b85      	ldr	r3, [pc, #532]	; (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	08db      	lsrs	r3, r3, #3
 8005cc8:	f003 0303 	and.w	r3, r3, #3
 8005ccc:	4a83      	ldr	r2, [pc, #524]	; (8005edc <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8005cce:	fa22 f303 	lsr.w	r3, r2, r3
 8005cd2:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	ee07 3a90 	vmov	s15, r3
 8005cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	ee07 3a90 	vmov	s15, r3
 8005ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ce8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cec:	4b7a      	ldr	r3, [pc, #488]	; (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cf4:	ee07 3a90 	vmov	s15, r3
 8005cf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cfc:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d00:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005d04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d18:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005d1c:	e087      	b.n	8005e2e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	ee07 3a90 	vmov	s15, r3
 8005d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d28:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8005d2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d30:	4b69      	ldr	r3, [pc, #420]	; (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d38:	ee07 3a90 	vmov	s15, r3
 8005d3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d40:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d44:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005d48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d5c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d60:	e065      	b.n	8005e2e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	ee07 3a90 	vmov	s15, r3
 8005d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d6c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005d70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d74:	4b58      	ldr	r3, [pc, #352]	; (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d7c:	ee07 3a90 	vmov	s15, r3
 8005d80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d84:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d88:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005d8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005da0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005da4:	e043      	b.n	8005e2e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	ee07 3a90 	vmov	s15, r3
 8005dac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005db0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005eec <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8005db4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005db8:	4b47      	ldr	r3, [pc, #284]	; (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dc0:	ee07 3a90 	vmov	s15, r3
 8005dc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dc8:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dcc:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005dd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ddc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005de4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005de8:	e021      	b.n	8005e2e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	ee07 3a90 	vmov	s15, r3
 8005df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005df4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005df8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dfc:	4b36      	ldr	r3, [pc, #216]	; (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e04:	ee07 3a90 	vmov	s15, r3
 8005e08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e0c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e10:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005e14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e28:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e2c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005e2e:	4b2a      	ldr	r3, [pc, #168]	; (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e32:	0a5b      	lsrs	r3, r3, #9
 8005e34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e38:	ee07 3a90 	vmov	s15, r3
 8005e3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e48:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e54:	ee17 2a90 	vmov	r2, s15
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005e5c:	4b1e      	ldr	r3, [pc, #120]	; (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e60:	0c1b      	lsrs	r3, r3, #16
 8005e62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e66:	ee07 3a90 	vmov	s15, r3
 8005e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e76:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e82:	ee17 2a90 	vmov	r2, s15
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005e8a:	4b13      	ldr	r3, [pc, #76]	; (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8e:	0e1b      	lsrs	r3, r3, #24
 8005e90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e94:	ee07 3a90 	vmov	s15, r3
 8005e98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ea0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ea4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ea8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eb0:	ee17 2a90 	vmov	r2, s15
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005eb8:	e008      	b.n	8005ecc <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	609a      	str	r2, [r3, #8]
}
 8005ecc:	bf00      	nop
 8005ece:	3724      	adds	r7, #36	; 0x24
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	58024400 	.word	0x58024400
 8005edc:	03d09000 	.word	0x03d09000
 8005ee0:	46000000 	.word	0x46000000
 8005ee4:	4c742400 	.word	0x4c742400
 8005ee8:	4a742400 	.word	0x4a742400
 8005eec:	4af42400 	.word	0x4af42400

08005ef0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b089      	sub	sp, #36	; 0x24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ef8:	4b9d      	ldr	r3, [pc, #628]	; (8006170 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efc:	f003 0303 	and.w	r3, r3, #3
 8005f00:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005f02:	4b9b      	ldr	r3, [pc, #620]	; (8006170 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f06:	0d1b      	lsrs	r3, r3, #20
 8005f08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f0c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005f0e:	4b98      	ldr	r3, [pc, #608]	; (8006170 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f12:	0a1b      	lsrs	r3, r3, #8
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005f1a:	4b95      	ldr	r3, [pc, #596]	; (8006170 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f1e:	08db      	lsrs	r3, r3, #3
 8005f20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	fb02 f303 	mul.w	r3, r2, r3
 8005f2a:	ee07 3a90 	vmov	s15, r3
 8005f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f000 810a 	beq.w	8006152 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d05a      	beq.n	8005ffa <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d302      	bcc.n	8005f4e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d078      	beq.n	800603e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8005f4c:	e099      	b.n	8006082 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f4e:	4b88      	ldr	r3, [pc, #544]	; (8006170 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0320 	and.w	r3, r3, #32
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d02d      	beq.n	8005fb6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f5a:	4b85      	ldr	r3, [pc, #532]	; (8006170 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	08db      	lsrs	r3, r3, #3
 8005f60:	f003 0303 	and.w	r3, r3, #3
 8005f64:	4a83      	ldr	r2, [pc, #524]	; (8006174 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8005f66:	fa22 f303 	lsr.w	r3, r2, r3
 8005f6a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	ee07 3a90 	vmov	s15, r3
 8005f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	ee07 3a90 	vmov	s15, r3
 8005f7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f84:	4b7a      	ldr	r3, [pc, #488]	; (8006170 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f8c:	ee07 3a90 	vmov	s15, r3
 8005f90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f94:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f98:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006178 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005f9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fa0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fa4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fa8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fb0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005fb4:	e087      	b.n	80060c6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	ee07 3a90 	vmov	s15, r3
 8005fbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fc0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800617c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8005fc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fc8:	4b69      	ldr	r3, [pc, #420]	; (8006170 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fd0:	ee07 3a90 	vmov	s15, r3
 8005fd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fd8:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fdc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006178 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005fe0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fe4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fe8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ff4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ff8:	e065      	b.n	80060c6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	ee07 3a90 	vmov	s15, r3
 8006000:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006004:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006008:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800600c:	4b58      	ldr	r3, [pc, #352]	; (8006170 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800600e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006014:	ee07 3a90 	vmov	s15, r3
 8006018:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800601c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006020:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006178 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006024:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006028:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800602c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006030:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006034:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006038:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800603c:	e043      	b.n	80060c6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	ee07 3a90 	vmov	s15, r3
 8006044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006048:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006184 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800604c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006050:	4b47      	ldr	r3, [pc, #284]	; (8006170 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006058:	ee07 3a90 	vmov	s15, r3
 800605c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006060:	ed97 6a03 	vldr	s12, [r7, #12]
 8006064:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006178 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006068:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800606c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006070:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006074:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800607c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006080:	e021      	b.n	80060c6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	ee07 3a90 	vmov	s15, r3
 8006088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800608c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006090:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006094:	4b36      	ldr	r3, [pc, #216]	; (8006170 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800609c:	ee07 3a90 	vmov	s15, r3
 80060a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80060a8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006178 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80060ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060c4:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80060c6:	4b2a      	ldr	r3, [pc, #168]	; (8006170 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80060c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ca:	0a5b      	lsrs	r3, r3, #9
 80060cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060d0:	ee07 3a90 	vmov	s15, r3
 80060d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80060e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060ec:	ee17 2a90 	vmov	r2, s15
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80060f4:	4b1e      	ldr	r3, [pc, #120]	; (8006170 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80060f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f8:	0c1b      	lsrs	r3, r3, #16
 80060fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060fe:	ee07 3a90 	vmov	s15, r3
 8006102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006106:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800610a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800610e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006112:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006116:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800611a:	ee17 2a90 	vmov	r2, s15
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006122:	4b13      	ldr	r3, [pc, #76]	; (8006170 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006126:	0e1b      	lsrs	r3, r3, #24
 8006128:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800612c:	ee07 3a90 	vmov	s15, r3
 8006130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006134:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006138:	ee37 7a87 	vadd.f32	s14, s15, s14
 800613c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006140:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006144:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006148:	ee17 2a90 	vmov	r2, s15
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006150:	e008      	b.n	8006164 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	609a      	str	r2, [r3, #8]
}
 8006164:	bf00      	nop
 8006166:	3724      	adds	r7, #36	; 0x24
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	58024400 	.word	0x58024400
 8006174:	03d09000 	.word	0x03d09000
 8006178:	46000000 	.word	0x46000000
 800617c:	4c742400 	.word	0x4c742400
 8006180:	4a742400 	.word	0x4a742400
 8006184:	4af42400 	.word	0x4af42400

08006188 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006192:	2300      	movs	r3, #0
 8006194:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006196:	4b53      	ldr	r3, [pc, #332]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 8006198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619a:	f003 0303 	and.w	r3, r3, #3
 800619e:	2b03      	cmp	r3, #3
 80061a0:	d101      	bne.n	80061a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e099      	b.n	80062da <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80061a6:	4b4f      	ldr	r3, [pc, #316]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a4e      	ldr	r2, [pc, #312]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 80061ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80061b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061b2:	f7fb ff53 	bl	800205c <HAL_GetTick>
 80061b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80061b8:	e008      	b.n	80061cc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80061ba:	f7fb ff4f 	bl	800205c <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d901      	bls.n	80061cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e086      	b.n	80062da <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80061cc:	4b45      	ldr	r3, [pc, #276]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1f0      	bne.n	80061ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80061d8:	4b42      	ldr	r3, [pc, #264]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 80061da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061dc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	031b      	lsls	r3, r3, #12
 80061e6:	493f      	ldr	r1, [pc, #252]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 80061e8:	4313      	orrs	r3, r2
 80061ea:	628b      	str	r3, [r1, #40]	; 0x28
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	3b01      	subs	r3, #1
 80061f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	3b01      	subs	r3, #1
 80061fc:	025b      	lsls	r3, r3, #9
 80061fe:	b29b      	uxth	r3, r3
 8006200:	431a      	orrs	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	3b01      	subs	r3, #1
 8006208:	041b      	lsls	r3, r3, #16
 800620a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800620e:	431a      	orrs	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	3b01      	subs	r3, #1
 8006216:	061b      	lsls	r3, r3, #24
 8006218:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800621c:	4931      	ldr	r1, [pc, #196]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 800621e:	4313      	orrs	r3, r2
 8006220:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006222:	4b30      	ldr	r3, [pc, #192]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 8006224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006226:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	492d      	ldr	r1, [pc, #180]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 8006230:	4313      	orrs	r3, r2
 8006232:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006234:	4b2b      	ldr	r3, [pc, #172]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 8006236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006238:	f023 0220 	bic.w	r2, r3, #32
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	699b      	ldr	r3, [r3, #24]
 8006240:	4928      	ldr	r1, [pc, #160]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 8006242:	4313      	orrs	r3, r2
 8006244:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006246:	4b27      	ldr	r3, [pc, #156]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 8006248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624a:	4a26      	ldr	r2, [pc, #152]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 800624c:	f023 0310 	bic.w	r3, r3, #16
 8006250:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006252:	4b24      	ldr	r3, [pc, #144]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 8006254:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006256:	4b24      	ldr	r3, [pc, #144]	; (80062e8 <RCCEx_PLL2_Config+0x160>)
 8006258:	4013      	ands	r3, r2
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	69d2      	ldr	r2, [r2, #28]
 800625e:	00d2      	lsls	r2, r2, #3
 8006260:	4920      	ldr	r1, [pc, #128]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 8006262:	4313      	orrs	r3, r2
 8006264:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006266:	4b1f      	ldr	r3, [pc, #124]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 8006268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626a:	4a1e      	ldr	r2, [pc, #120]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 800626c:	f043 0310 	orr.w	r3, r3, #16
 8006270:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d106      	bne.n	8006286 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006278:	4b1a      	ldr	r3, [pc, #104]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 800627a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627c:	4a19      	ldr	r2, [pc, #100]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 800627e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006282:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006284:	e00f      	b.n	80062a6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d106      	bne.n	800629a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800628c:	4b15      	ldr	r3, [pc, #84]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 800628e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006290:	4a14      	ldr	r2, [pc, #80]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 8006292:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006296:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006298:	e005      	b.n	80062a6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800629a:	4b12      	ldr	r3, [pc, #72]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 800629c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629e:	4a11      	ldr	r2, [pc, #68]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 80062a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80062a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80062a6:	4b0f      	ldr	r3, [pc, #60]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a0e      	ldr	r2, [pc, #56]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 80062ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80062b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062b2:	f7fb fed3 	bl	800205c <HAL_GetTick>
 80062b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80062b8:	e008      	b.n	80062cc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80062ba:	f7fb fecf 	bl	800205c <HAL_GetTick>
 80062be:	4602      	mov	r2, r0
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	1ad3      	subs	r3, r2, r3
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d901      	bls.n	80062cc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80062c8:	2303      	movs	r3, #3
 80062ca:	e006      	b.n	80062da <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80062cc:	4b05      	ldr	r3, [pc, #20]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d0f0      	beq.n	80062ba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	58024400 	.word	0x58024400
 80062e8:	ffff0007 	.word	0xffff0007

080062ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062f6:	2300      	movs	r3, #0
 80062f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80062fa:	4b53      	ldr	r3, [pc, #332]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 80062fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062fe:	f003 0303 	and.w	r3, r3, #3
 8006302:	2b03      	cmp	r3, #3
 8006304:	d101      	bne.n	800630a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e099      	b.n	800643e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800630a:	4b4f      	ldr	r3, [pc, #316]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a4e      	ldr	r2, [pc, #312]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 8006310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006314:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006316:	f7fb fea1 	bl	800205c <HAL_GetTick>
 800631a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800631c:	e008      	b.n	8006330 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800631e:	f7fb fe9d 	bl	800205c <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	2b02      	cmp	r3, #2
 800632a:	d901      	bls.n	8006330 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e086      	b.n	800643e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006330:	4b45      	ldr	r3, [pc, #276]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1f0      	bne.n	800631e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800633c:	4b42      	ldr	r3, [pc, #264]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 800633e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006340:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	051b      	lsls	r3, r3, #20
 800634a:	493f      	ldr	r1, [pc, #252]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 800634c:	4313      	orrs	r3, r2
 800634e:	628b      	str	r3, [r1, #40]	; 0x28
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	3b01      	subs	r3, #1
 8006356:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	3b01      	subs	r3, #1
 8006360:	025b      	lsls	r3, r3, #9
 8006362:	b29b      	uxth	r3, r3
 8006364:	431a      	orrs	r2, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	3b01      	subs	r3, #1
 800636c:	041b      	lsls	r3, r3, #16
 800636e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006372:	431a      	orrs	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	3b01      	subs	r3, #1
 800637a:	061b      	lsls	r3, r3, #24
 800637c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006380:	4931      	ldr	r1, [pc, #196]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 8006382:	4313      	orrs	r3, r2
 8006384:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006386:	4b30      	ldr	r3, [pc, #192]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 8006388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	492d      	ldr	r1, [pc, #180]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 8006394:	4313      	orrs	r3, r2
 8006396:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006398:	4b2b      	ldr	r3, [pc, #172]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 800639a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	4928      	ldr	r1, [pc, #160]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80063aa:	4b27      	ldr	r3, [pc, #156]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 80063ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ae:	4a26      	ldr	r2, [pc, #152]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 80063b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80063b6:	4b24      	ldr	r3, [pc, #144]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 80063b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063ba:	4b24      	ldr	r3, [pc, #144]	; (800644c <RCCEx_PLL3_Config+0x160>)
 80063bc:	4013      	ands	r3, r2
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	69d2      	ldr	r2, [r2, #28]
 80063c2:	00d2      	lsls	r2, r2, #3
 80063c4:	4920      	ldr	r1, [pc, #128]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80063ca:	4b1f      	ldr	r3, [pc, #124]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 80063cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ce:	4a1e      	ldr	r2, [pc, #120]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 80063d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d106      	bne.n	80063ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80063dc:	4b1a      	ldr	r3, [pc, #104]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 80063de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e0:	4a19      	ldr	r2, [pc, #100]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 80063e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80063e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80063e8:	e00f      	b.n	800640a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d106      	bne.n	80063fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80063f0:	4b15      	ldr	r3, [pc, #84]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 80063f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f4:	4a14      	ldr	r2, [pc, #80]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 80063f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80063fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80063fc:	e005      	b.n	800640a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80063fe:	4b12      	ldr	r3, [pc, #72]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 8006400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006402:	4a11      	ldr	r2, [pc, #68]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 8006404:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006408:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800640a:	4b0f      	ldr	r3, [pc, #60]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a0e      	ldr	r2, [pc, #56]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 8006410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006414:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006416:	f7fb fe21 	bl	800205c <HAL_GetTick>
 800641a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800641c:	e008      	b.n	8006430 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800641e:	f7fb fe1d 	bl	800205c <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	2b02      	cmp	r3, #2
 800642a:	d901      	bls.n	8006430 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e006      	b.n	800643e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006430:	4b05      	ldr	r3, [pc, #20]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d0f0      	beq.n	800641e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800643c:	7bfb      	ldrb	r3, [r7, #15]
}
 800643e:	4618      	mov	r0, r3
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	58024400 	.word	0x58024400
 800644c:	ffff0007 	.word	0xffff0007

08006450 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d101      	bne.n	8006462 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e01d      	b.n	800649e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d106      	bne.n	800647c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7fb faa2 	bl	80019c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2202      	movs	r2, #2
 8006480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	3304      	adds	r3, #4
 800648c:	4619      	mov	r1, r3
 800648e:	4610      	mov	r0, r2
 8006490:	f000 fb18 	bl	8006ac4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3708      	adds	r7, #8
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
	...

080064a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68da      	ldr	r2, [r3, #12]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f042 0201 	orr.w	r2, r2, #1
 80064be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689a      	ldr	r2, [r3, #8]
 80064c6:	4b0c      	ldr	r3, [pc, #48]	; (80064f8 <HAL_TIM_Base_Start_IT+0x50>)
 80064c8:	4013      	ands	r3, r2
 80064ca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2b06      	cmp	r3, #6
 80064d0:	d00b      	beq.n	80064ea <HAL_TIM_Base_Start_IT+0x42>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064d8:	d007      	beq.n	80064ea <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f042 0201 	orr.w	r2, r2, #1
 80064e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3714      	adds	r7, #20
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr
 80064f8:	00010007 	.word	0x00010007

080064fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d101      	bne.n	800650e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e01d      	b.n	800654a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006514:	b2db      	uxtb	r3, r3
 8006516:	2b00      	cmp	r3, #0
 8006518:	d106      	bne.n	8006528 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f7fb f9e6 	bl	80018f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2202      	movs	r2, #2
 800652c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	3304      	adds	r3, #4
 8006538:	4619      	mov	r1, r3
 800653a:	4610      	mov	r0, r2
 800653c:	f000 fac2 	bl	8006ac4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3708      	adds	r7, #8
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
	...

08006554 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2201      	movs	r2, #1
 8006564:	6839      	ldr	r1, [r7, #0]
 8006566:	4618      	mov	r0, r3
 8006568:	f000 fe14 	bl	8007194 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a1e      	ldr	r2, [pc, #120]	; (80065ec <HAL_TIM_PWM_Start+0x98>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d013      	beq.n	800659e <HAL_TIM_PWM_Start+0x4a>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a1d      	ldr	r2, [pc, #116]	; (80065f0 <HAL_TIM_PWM_Start+0x9c>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d00e      	beq.n	800659e <HAL_TIM_PWM_Start+0x4a>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a1b      	ldr	r2, [pc, #108]	; (80065f4 <HAL_TIM_PWM_Start+0xa0>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d009      	beq.n	800659e <HAL_TIM_PWM_Start+0x4a>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a1a      	ldr	r2, [pc, #104]	; (80065f8 <HAL_TIM_PWM_Start+0xa4>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d004      	beq.n	800659e <HAL_TIM_PWM_Start+0x4a>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a18      	ldr	r2, [pc, #96]	; (80065fc <HAL_TIM_PWM_Start+0xa8>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d101      	bne.n	80065a2 <HAL_TIM_PWM_Start+0x4e>
 800659e:	2301      	movs	r3, #1
 80065a0:	e000      	b.n	80065a4 <HAL_TIM_PWM_Start+0x50>
 80065a2:	2300      	movs	r3, #0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d007      	beq.n	80065b8 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065b6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	689a      	ldr	r2, [r3, #8]
 80065be:	4b10      	ldr	r3, [pc, #64]	; (8006600 <HAL_TIM_PWM_Start+0xac>)
 80065c0:	4013      	ands	r3, r2
 80065c2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2b06      	cmp	r3, #6
 80065c8:	d00b      	beq.n	80065e2 <HAL_TIM_PWM_Start+0x8e>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065d0:	d007      	beq.n	80065e2 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f042 0201 	orr.w	r2, r2, #1
 80065e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	40010000 	.word	0x40010000
 80065f0:	40010400 	.word	0x40010400
 80065f4:	40014000 	.word	0x40014000
 80065f8:	40014400 	.word	0x40014400
 80065fc:	40014800 	.word	0x40014800
 8006600:	00010007 	.word	0x00010007

08006604 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	f003 0302 	and.w	r3, r3, #2
 8006616:	2b02      	cmp	r3, #2
 8006618:	d122      	bne.n	8006660 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	f003 0302 	and.w	r3, r3, #2
 8006624:	2b02      	cmp	r3, #2
 8006626:	d11b      	bne.n	8006660 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f06f 0202 	mvn.w	r2, #2
 8006630:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2201      	movs	r2, #1
 8006636:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	f003 0303 	and.w	r3, r3, #3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d003      	beq.n	800664e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 fa1e 	bl	8006a88 <HAL_TIM_IC_CaptureCallback>
 800664c:	e005      	b.n	800665a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 fa10 	bl	8006a74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 fa21 	bl	8006a9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	f003 0304 	and.w	r3, r3, #4
 800666a:	2b04      	cmp	r3, #4
 800666c:	d122      	bne.n	80066b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	f003 0304 	and.w	r3, r3, #4
 8006678:	2b04      	cmp	r3, #4
 800667a:	d11b      	bne.n	80066b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f06f 0204 	mvn.w	r2, #4
 8006684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2202      	movs	r2, #2
 800668a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 f9f4 	bl	8006a88 <HAL_TIM_IC_CaptureCallback>
 80066a0:	e005      	b.n	80066ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f9e6 	bl	8006a74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 f9f7 	bl	8006a9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	f003 0308 	and.w	r3, r3, #8
 80066be:	2b08      	cmp	r3, #8
 80066c0:	d122      	bne.n	8006708 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	f003 0308 	and.w	r3, r3, #8
 80066cc:	2b08      	cmp	r3, #8
 80066ce:	d11b      	bne.n	8006708 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f06f 0208 	mvn.w	r2, #8
 80066d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2204      	movs	r2, #4
 80066de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	69db      	ldr	r3, [r3, #28]
 80066e6:	f003 0303 	and.w	r3, r3, #3
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d003      	beq.n	80066f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f9ca 	bl	8006a88 <HAL_TIM_IC_CaptureCallback>
 80066f4:	e005      	b.n	8006702 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f9bc 	bl	8006a74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 f9cd 	bl	8006a9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	f003 0310 	and.w	r3, r3, #16
 8006712:	2b10      	cmp	r3, #16
 8006714:	d122      	bne.n	800675c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	f003 0310 	and.w	r3, r3, #16
 8006720:	2b10      	cmp	r3, #16
 8006722:	d11b      	bne.n	800675c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f06f 0210 	mvn.w	r2, #16
 800672c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2208      	movs	r2, #8
 8006732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	69db      	ldr	r3, [r3, #28]
 800673a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800673e:	2b00      	cmp	r3, #0
 8006740:	d003      	beq.n	800674a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 f9a0 	bl	8006a88 <HAL_TIM_IC_CaptureCallback>
 8006748:	e005      	b.n	8006756 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f992 	bl	8006a74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 f9a3 	bl	8006a9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	2b01      	cmp	r3, #1
 8006768:	d10e      	bne.n	8006788 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	f003 0301 	and.w	r3, r3, #1
 8006774:	2b01      	cmp	r3, #1
 8006776:	d107      	bne.n	8006788 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f06f 0201 	mvn.w	r2, #1
 8006780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f7fa f9b8 	bl	8000af8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006792:	2b80      	cmp	r3, #128	; 0x80
 8006794:	d10e      	bne.n	80067b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067a0:	2b80      	cmp	r3, #128	; 0x80
 80067a2:	d107      	bne.n	80067b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 fe26 	bl	8007400 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067c2:	d10e      	bne.n	80067e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ce:	2b80      	cmp	r3, #128	; 0x80
 80067d0:	d107      	bne.n	80067e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80067da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 fe19 	bl	8007414 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ec:	2b40      	cmp	r3, #64	; 0x40
 80067ee:	d10e      	bne.n	800680e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067fa:	2b40      	cmp	r3, #64	; 0x40
 80067fc:	d107      	bne.n	800680e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 f951 	bl	8006ab0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	f003 0320 	and.w	r3, r3, #32
 8006818:	2b20      	cmp	r3, #32
 800681a:	d10e      	bne.n	800683a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	f003 0320 	and.w	r3, r3, #32
 8006826:	2b20      	cmp	r3, #32
 8006828:	d107      	bne.n	800683a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f06f 0220 	mvn.w	r2, #32
 8006832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 fdd9 	bl	80073ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800683a:	bf00      	nop
 800683c:	3708      	adds	r7, #8
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
	...

08006844 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006856:	2b01      	cmp	r3, #1
 8006858:	d101      	bne.n	800685e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800685a:	2302      	movs	r3, #2
 800685c:	e105      	b.n	8006a6a <HAL_TIM_PWM_ConfigChannel+0x226>
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2202      	movs	r2, #2
 800686a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2b14      	cmp	r3, #20
 8006872:	f200 80f0 	bhi.w	8006a56 <HAL_TIM_PWM_ConfigChannel+0x212>
 8006876:	a201      	add	r2, pc, #4	; (adr r2, 800687c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687c:	080068d1 	.word	0x080068d1
 8006880:	08006a57 	.word	0x08006a57
 8006884:	08006a57 	.word	0x08006a57
 8006888:	08006a57 	.word	0x08006a57
 800688c:	08006911 	.word	0x08006911
 8006890:	08006a57 	.word	0x08006a57
 8006894:	08006a57 	.word	0x08006a57
 8006898:	08006a57 	.word	0x08006a57
 800689c:	08006953 	.word	0x08006953
 80068a0:	08006a57 	.word	0x08006a57
 80068a4:	08006a57 	.word	0x08006a57
 80068a8:	08006a57 	.word	0x08006a57
 80068ac:	08006993 	.word	0x08006993
 80068b0:	08006a57 	.word	0x08006a57
 80068b4:	08006a57 	.word	0x08006a57
 80068b8:	08006a57 	.word	0x08006a57
 80068bc:	080069d5 	.word	0x080069d5
 80068c0:	08006a57 	.word	0x08006a57
 80068c4:	08006a57 	.word	0x08006a57
 80068c8:	08006a57 	.word	0x08006a57
 80068cc:	08006a15 	.word	0x08006a15
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68b9      	ldr	r1, [r7, #8]
 80068d6:	4618      	mov	r0, r3
 80068d8:	f000 f98e 	bl	8006bf8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	699a      	ldr	r2, [r3, #24]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f042 0208 	orr.w	r2, r2, #8
 80068ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	699a      	ldr	r2, [r3, #24]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f022 0204 	bic.w	r2, r2, #4
 80068fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	6999      	ldr	r1, [r3, #24]
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	691a      	ldr	r2, [r3, #16]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	430a      	orrs	r2, r1
 800690c:	619a      	str	r2, [r3, #24]
      break;
 800690e:	e0a3      	b.n	8006a58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68b9      	ldr	r1, [r7, #8]
 8006916:	4618      	mov	r0, r3
 8006918:	f000 f9fe 	bl	8006d18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	699a      	ldr	r2, [r3, #24]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800692a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	699a      	ldr	r2, [r3, #24]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800693a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6999      	ldr	r1, [r3, #24]
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	021a      	lsls	r2, r3, #8
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	430a      	orrs	r2, r1
 800694e:	619a      	str	r2, [r3, #24]
      break;
 8006950:	e082      	b.n	8006a58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68b9      	ldr	r1, [r7, #8]
 8006958:	4618      	mov	r0, r3
 800695a:	f000 fa67 	bl	8006e2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	69da      	ldr	r2, [r3, #28]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f042 0208 	orr.w	r2, r2, #8
 800696c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	69da      	ldr	r2, [r3, #28]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f022 0204 	bic.w	r2, r2, #4
 800697c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	69d9      	ldr	r1, [r3, #28]
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	691a      	ldr	r2, [r3, #16]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	430a      	orrs	r2, r1
 800698e:	61da      	str	r2, [r3, #28]
      break;
 8006990:	e062      	b.n	8006a58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68b9      	ldr	r1, [r7, #8]
 8006998:	4618      	mov	r0, r3
 800699a:	f000 facd 	bl	8006f38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	69da      	ldr	r2, [r3, #28]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	69da      	ldr	r2, [r3, #28]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	69d9      	ldr	r1, [r3, #28]
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	021a      	lsls	r2, r3, #8
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	430a      	orrs	r2, r1
 80069d0:	61da      	str	r2, [r3, #28]
      break;
 80069d2:	e041      	b.n	8006a58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68b9      	ldr	r1, [r7, #8]
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 fb14 	bl	8007008 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f042 0208 	orr.w	r2, r2, #8
 80069ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f022 0204 	bic.w	r2, r2, #4
 80069fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	691a      	ldr	r2, [r3, #16]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006a12:	e021      	b.n	8006a58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68b9      	ldr	r1, [r7, #8]
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f000 fb56 	bl	80070cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a2e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a3e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	021a      	lsls	r2, r3, #8
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	430a      	orrs	r2, r1
 8006a52:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006a54:	e000      	b.n	8006a58 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8006a56:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop

08006a74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a7c:	bf00      	nop
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a90:	bf00      	nop
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006aa4:	bf00      	nop
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a40      	ldr	r2, [pc, #256]	; (8006bd8 <TIM_Base_SetConfig+0x114>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d013      	beq.n	8006b04 <TIM_Base_SetConfig+0x40>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ae2:	d00f      	beq.n	8006b04 <TIM_Base_SetConfig+0x40>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a3d      	ldr	r2, [pc, #244]	; (8006bdc <TIM_Base_SetConfig+0x118>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d00b      	beq.n	8006b04 <TIM_Base_SetConfig+0x40>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a3c      	ldr	r2, [pc, #240]	; (8006be0 <TIM_Base_SetConfig+0x11c>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d007      	beq.n	8006b04 <TIM_Base_SetConfig+0x40>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a3b      	ldr	r2, [pc, #236]	; (8006be4 <TIM_Base_SetConfig+0x120>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d003      	beq.n	8006b04 <TIM_Base_SetConfig+0x40>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a3a      	ldr	r2, [pc, #232]	; (8006be8 <TIM_Base_SetConfig+0x124>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d108      	bne.n	8006b16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a2f      	ldr	r2, [pc, #188]	; (8006bd8 <TIM_Base_SetConfig+0x114>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d01f      	beq.n	8006b5e <TIM_Base_SetConfig+0x9a>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b24:	d01b      	beq.n	8006b5e <TIM_Base_SetConfig+0x9a>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a2c      	ldr	r2, [pc, #176]	; (8006bdc <TIM_Base_SetConfig+0x118>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d017      	beq.n	8006b5e <TIM_Base_SetConfig+0x9a>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a2b      	ldr	r2, [pc, #172]	; (8006be0 <TIM_Base_SetConfig+0x11c>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d013      	beq.n	8006b5e <TIM_Base_SetConfig+0x9a>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a2a      	ldr	r2, [pc, #168]	; (8006be4 <TIM_Base_SetConfig+0x120>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d00f      	beq.n	8006b5e <TIM_Base_SetConfig+0x9a>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a29      	ldr	r2, [pc, #164]	; (8006be8 <TIM_Base_SetConfig+0x124>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d00b      	beq.n	8006b5e <TIM_Base_SetConfig+0x9a>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a28      	ldr	r2, [pc, #160]	; (8006bec <TIM_Base_SetConfig+0x128>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d007      	beq.n	8006b5e <TIM_Base_SetConfig+0x9a>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a27      	ldr	r2, [pc, #156]	; (8006bf0 <TIM_Base_SetConfig+0x12c>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d003      	beq.n	8006b5e <TIM_Base_SetConfig+0x9a>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a26      	ldr	r2, [pc, #152]	; (8006bf4 <TIM_Base_SetConfig+0x130>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d108      	bne.n	8006b70 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	689a      	ldr	r2, [r3, #8]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a10      	ldr	r2, [pc, #64]	; (8006bd8 <TIM_Base_SetConfig+0x114>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d00f      	beq.n	8006bbc <TIM_Base_SetConfig+0xf8>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a12      	ldr	r2, [pc, #72]	; (8006be8 <TIM_Base_SetConfig+0x124>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d00b      	beq.n	8006bbc <TIM_Base_SetConfig+0xf8>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a11      	ldr	r2, [pc, #68]	; (8006bec <TIM_Base_SetConfig+0x128>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d007      	beq.n	8006bbc <TIM_Base_SetConfig+0xf8>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a10      	ldr	r2, [pc, #64]	; (8006bf0 <TIM_Base_SetConfig+0x12c>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d003      	beq.n	8006bbc <TIM_Base_SetConfig+0xf8>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a0f      	ldr	r2, [pc, #60]	; (8006bf4 <TIM_Base_SetConfig+0x130>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d103      	bne.n	8006bc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	691a      	ldr	r2, [r3, #16]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	615a      	str	r2, [r3, #20]
}
 8006bca:	bf00      	nop
 8006bcc:	3714      	adds	r7, #20
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	40010000 	.word	0x40010000
 8006bdc:	40000400 	.word	0x40000400
 8006be0:	40000800 	.word	0x40000800
 8006be4:	40000c00 	.word	0x40000c00
 8006be8:	40010400 	.word	0x40010400
 8006bec:	40014000 	.word	0x40014000
 8006bf0:	40014400 	.word	0x40014400
 8006bf4:	40014800 	.word	0x40014800

08006bf8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b087      	sub	sp, #28
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a1b      	ldr	r3, [r3, #32]
 8006c06:	f023 0201 	bic.w	r2, r3, #1
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a1b      	ldr	r3, [r3, #32]
 8006c12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	4b37      	ldr	r3, [pc, #220]	; (8006d00 <TIM_OC1_SetConfig+0x108>)
 8006c24:	4013      	ands	r3, r2
 8006c26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f023 0303 	bic.w	r3, r3, #3
 8006c2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	f023 0302 	bic.w	r3, r3, #2
 8006c40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a2d      	ldr	r2, [pc, #180]	; (8006d04 <TIM_OC1_SetConfig+0x10c>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d00f      	beq.n	8006c74 <TIM_OC1_SetConfig+0x7c>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a2c      	ldr	r2, [pc, #176]	; (8006d08 <TIM_OC1_SetConfig+0x110>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d00b      	beq.n	8006c74 <TIM_OC1_SetConfig+0x7c>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a2b      	ldr	r2, [pc, #172]	; (8006d0c <TIM_OC1_SetConfig+0x114>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d007      	beq.n	8006c74 <TIM_OC1_SetConfig+0x7c>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a2a      	ldr	r2, [pc, #168]	; (8006d10 <TIM_OC1_SetConfig+0x118>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d003      	beq.n	8006c74 <TIM_OC1_SetConfig+0x7c>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a29      	ldr	r2, [pc, #164]	; (8006d14 <TIM_OC1_SetConfig+0x11c>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d10c      	bne.n	8006c8e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	f023 0308 	bic.w	r3, r3, #8
 8006c7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	697a      	ldr	r2, [r7, #20]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	f023 0304 	bic.w	r3, r3, #4
 8006c8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4a1c      	ldr	r2, [pc, #112]	; (8006d04 <TIM_OC1_SetConfig+0x10c>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d00f      	beq.n	8006cb6 <TIM_OC1_SetConfig+0xbe>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a1b      	ldr	r2, [pc, #108]	; (8006d08 <TIM_OC1_SetConfig+0x110>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d00b      	beq.n	8006cb6 <TIM_OC1_SetConfig+0xbe>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a1a      	ldr	r2, [pc, #104]	; (8006d0c <TIM_OC1_SetConfig+0x114>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d007      	beq.n	8006cb6 <TIM_OC1_SetConfig+0xbe>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a19      	ldr	r2, [pc, #100]	; (8006d10 <TIM_OC1_SetConfig+0x118>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d003      	beq.n	8006cb6 <TIM_OC1_SetConfig+0xbe>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a18      	ldr	r2, [pc, #96]	; (8006d14 <TIM_OC1_SetConfig+0x11c>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d111      	bne.n	8006cda <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	693a      	ldr	r2, [r7, #16]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	693a      	ldr	r2, [r7, #16]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	693a      	ldr	r2, [r7, #16]
 8006cde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	685a      	ldr	r2, [r3, #4]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	697a      	ldr	r2, [r7, #20]
 8006cf2:	621a      	str	r2, [r3, #32]
}
 8006cf4:	bf00      	nop
 8006cf6:	371c      	adds	r7, #28
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr
 8006d00:	fffeff8f 	.word	0xfffeff8f
 8006d04:	40010000 	.word	0x40010000
 8006d08:	40010400 	.word	0x40010400
 8006d0c:	40014000 	.word	0x40014000
 8006d10:	40014400 	.word	0x40014400
 8006d14:	40014800 	.word	0x40014800

08006d18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b087      	sub	sp, #28
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a1b      	ldr	r3, [r3, #32]
 8006d26:	f023 0210 	bic.w	r2, r3, #16
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	699b      	ldr	r3, [r3, #24]
 8006d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	4b34      	ldr	r3, [pc, #208]	; (8006e14 <TIM_OC2_SetConfig+0xfc>)
 8006d44:	4013      	ands	r3, r2
 8006d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	021b      	lsls	r3, r3, #8
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	f023 0320 	bic.w	r3, r3, #32
 8006d62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	011b      	lsls	r3, r3, #4
 8006d6a:	697a      	ldr	r2, [r7, #20]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a29      	ldr	r2, [pc, #164]	; (8006e18 <TIM_OC2_SetConfig+0x100>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d003      	beq.n	8006d80 <TIM_OC2_SetConfig+0x68>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a28      	ldr	r2, [pc, #160]	; (8006e1c <TIM_OC2_SetConfig+0x104>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d10d      	bne.n	8006d9c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	011b      	lsls	r3, r3, #4
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a1e      	ldr	r2, [pc, #120]	; (8006e18 <TIM_OC2_SetConfig+0x100>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d00f      	beq.n	8006dc4 <TIM_OC2_SetConfig+0xac>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a1d      	ldr	r2, [pc, #116]	; (8006e1c <TIM_OC2_SetConfig+0x104>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d00b      	beq.n	8006dc4 <TIM_OC2_SetConfig+0xac>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a1c      	ldr	r2, [pc, #112]	; (8006e20 <TIM_OC2_SetConfig+0x108>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d007      	beq.n	8006dc4 <TIM_OC2_SetConfig+0xac>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a1b      	ldr	r2, [pc, #108]	; (8006e24 <TIM_OC2_SetConfig+0x10c>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d003      	beq.n	8006dc4 <TIM_OC2_SetConfig+0xac>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a1a      	ldr	r2, [pc, #104]	; (8006e28 <TIM_OC2_SetConfig+0x110>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d113      	bne.n	8006dec <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006dca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006dd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	695b      	ldr	r3, [r3, #20]
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	699b      	ldr	r3, [r3, #24]
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	693a      	ldr	r2, [r7, #16]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	685a      	ldr	r2, [r3, #4]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	697a      	ldr	r2, [r7, #20]
 8006e04:	621a      	str	r2, [r3, #32]
}
 8006e06:	bf00      	nop
 8006e08:	371c      	adds	r7, #28
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	feff8fff 	.word	0xfeff8fff
 8006e18:	40010000 	.word	0x40010000
 8006e1c:	40010400 	.word	0x40010400
 8006e20:	40014000 	.word	0x40014000
 8006e24:	40014400 	.word	0x40014400
 8006e28:	40014800 	.word	0x40014800

08006e2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b087      	sub	sp, #28
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	69db      	ldr	r3, [r3, #28]
 8006e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f023 0303 	bic.w	r3, r3, #3
 8006e62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	021b      	lsls	r3, r3, #8
 8006e7c:	697a      	ldr	r2, [r7, #20]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a27      	ldr	r2, [pc, #156]	; (8006f24 <TIM_OC3_SetConfig+0xf8>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d003      	beq.n	8006e92 <TIM_OC3_SetConfig+0x66>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a26      	ldr	r2, [pc, #152]	; (8006f28 <TIM_OC3_SetConfig+0xfc>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d10d      	bne.n	8006eae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	021b      	lsls	r3, r3, #8
 8006ea0:	697a      	ldr	r2, [r7, #20]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006eac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a1c      	ldr	r2, [pc, #112]	; (8006f24 <TIM_OC3_SetConfig+0xf8>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d00f      	beq.n	8006ed6 <TIM_OC3_SetConfig+0xaa>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a1b      	ldr	r2, [pc, #108]	; (8006f28 <TIM_OC3_SetConfig+0xfc>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d00b      	beq.n	8006ed6 <TIM_OC3_SetConfig+0xaa>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a1a      	ldr	r2, [pc, #104]	; (8006f2c <TIM_OC3_SetConfig+0x100>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d007      	beq.n	8006ed6 <TIM_OC3_SetConfig+0xaa>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a19      	ldr	r2, [pc, #100]	; (8006f30 <TIM_OC3_SetConfig+0x104>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d003      	beq.n	8006ed6 <TIM_OC3_SetConfig+0xaa>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a18      	ldr	r2, [pc, #96]	; (8006f34 <TIM_OC3_SetConfig+0x108>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d113      	bne.n	8006efe <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006edc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	011b      	lsls	r3, r3, #4
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	011b      	lsls	r3, r3, #4
 8006ef8:	693a      	ldr	r2, [r7, #16]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	685a      	ldr	r2, [r3, #4]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	697a      	ldr	r2, [r7, #20]
 8006f16:	621a      	str	r2, [r3, #32]
}
 8006f18:	bf00      	nop
 8006f1a:	371c      	adds	r7, #28
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr
 8006f24:	40010000 	.word	0x40010000
 8006f28:	40010400 	.word	0x40010400
 8006f2c:	40014000 	.word	0x40014000
 8006f30:	40014400 	.word	0x40014400
 8006f34:	40014800 	.word	0x40014800

08006f38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b087      	sub	sp, #28
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a1b      	ldr	r3, [r3, #32]
 8006f46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	69db      	ldr	r3, [r3, #28]
 8006f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	021b      	lsls	r3, r3, #8
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	031b      	lsls	r3, r3, #12
 8006f8a:	693a      	ldr	r2, [r7, #16]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a18      	ldr	r2, [pc, #96]	; (8006ff4 <TIM_OC4_SetConfig+0xbc>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d00f      	beq.n	8006fb8 <TIM_OC4_SetConfig+0x80>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a17      	ldr	r2, [pc, #92]	; (8006ff8 <TIM_OC4_SetConfig+0xc0>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d00b      	beq.n	8006fb8 <TIM_OC4_SetConfig+0x80>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a16      	ldr	r2, [pc, #88]	; (8006ffc <TIM_OC4_SetConfig+0xc4>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d007      	beq.n	8006fb8 <TIM_OC4_SetConfig+0x80>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a15      	ldr	r2, [pc, #84]	; (8007000 <TIM_OC4_SetConfig+0xc8>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d003      	beq.n	8006fb8 <TIM_OC4_SetConfig+0x80>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a14      	ldr	r2, [pc, #80]	; (8007004 <TIM_OC4_SetConfig+0xcc>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d109      	bne.n	8006fcc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	695b      	ldr	r3, [r3, #20]
 8006fc4:	019b      	lsls	r3, r3, #6
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	697a      	ldr	r2, [r7, #20]
 8006fd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	685a      	ldr	r2, [r3, #4]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	693a      	ldr	r2, [r7, #16]
 8006fe4:	621a      	str	r2, [r3, #32]
}
 8006fe6:	bf00      	nop
 8006fe8:	371c      	adds	r7, #28
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	40010000 	.word	0x40010000
 8006ff8:	40010400 	.word	0x40010400
 8006ffc:	40014000 	.word	0x40014000
 8007000:	40014400 	.word	0x40014400
 8007004:	40014800 	.word	0x40014800

08007008 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007008:	b480      	push	{r7}
 800700a:	b087      	sub	sp, #28
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800702e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	4313      	orrs	r3, r2
 8007040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007048:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	041b      	lsls	r3, r3, #16
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	4313      	orrs	r3, r2
 8007054:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a17      	ldr	r2, [pc, #92]	; (80070b8 <TIM_OC5_SetConfig+0xb0>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d00f      	beq.n	800707e <TIM_OC5_SetConfig+0x76>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a16      	ldr	r2, [pc, #88]	; (80070bc <TIM_OC5_SetConfig+0xb4>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d00b      	beq.n	800707e <TIM_OC5_SetConfig+0x76>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a15      	ldr	r2, [pc, #84]	; (80070c0 <TIM_OC5_SetConfig+0xb8>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d007      	beq.n	800707e <TIM_OC5_SetConfig+0x76>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a14      	ldr	r2, [pc, #80]	; (80070c4 <TIM_OC5_SetConfig+0xbc>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d003      	beq.n	800707e <TIM_OC5_SetConfig+0x76>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a13      	ldr	r2, [pc, #76]	; (80070c8 <TIM_OC5_SetConfig+0xc0>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d109      	bne.n	8007092 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007084:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	695b      	ldr	r3, [r3, #20]
 800708a:	021b      	lsls	r3, r3, #8
 800708c:	697a      	ldr	r2, [r7, #20]
 800708e:	4313      	orrs	r3, r2
 8007090:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	685a      	ldr	r2, [r3, #4]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	693a      	ldr	r2, [r7, #16]
 80070aa:	621a      	str	r2, [r3, #32]
}
 80070ac:	bf00      	nop
 80070ae:	371c      	adds	r7, #28
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr
 80070b8:	40010000 	.word	0x40010000
 80070bc:	40010400 	.word	0x40010400
 80070c0:	40014000 	.word	0x40014000
 80070c4:	40014400 	.word	0x40014400
 80070c8:	40014800 	.word	0x40014800

080070cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b087      	sub	sp, #28
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	021b      	lsls	r3, r3, #8
 8007102:	68fa      	ldr	r2, [r7, #12]
 8007104:	4313      	orrs	r3, r2
 8007106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800710e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	051b      	lsls	r3, r3, #20
 8007116:	693a      	ldr	r2, [r7, #16]
 8007118:	4313      	orrs	r3, r2
 800711a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a18      	ldr	r2, [pc, #96]	; (8007180 <TIM_OC6_SetConfig+0xb4>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d00f      	beq.n	8007144 <TIM_OC6_SetConfig+0x78>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a17      	ldr	r2, [pc, #92]	; (8007184 <TIM_OC6_SetConfig+0xb8>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d00b      	beq.n	8007144 <TIM_OC6_SetConfig+0x78>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a16      	ldr	r2, [pc, #88]	; (8007188 <TIM_OC6_SetConfig+0xbc>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d007      	beq.n	8007144 <TIM_OC6_SetConfig+0x78>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a15      	ldr	r2, [pc, #84]	; (800718c <TIM_OC6_SetConfig+0xc0>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d003      	beq.n	8007144 <TIM_OC6_SetConfig+0x78>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a14      	ldr	r2, [pc, #80]	; (8007190 <TIM_OC6_SetConfig+0xc4>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d109      	bne.n	8007158 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800714a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	695b      	ldr	r3, [r3, #20]
 8007150:	029b      	lsls	r3, r3, #10
 8007152:	697a      	ldr	r2, [r7, #20]
 8007154:	4313      	orrs	r3, r2
 8007156:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	697a      	ldr	r2, [r7, #20]
 800715c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	685a      	ldr	r2, [r3, #4]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	693a      	ldr	r2, [r7, #16]
 8007170:	621a      	str	r2, [r3, #32]
}
 8007172:	bf00      	nop
 8007174:	371c      	adds	r7, #28
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	40010000 	.word	0x40010000
 8007184:	40010400 	.word	0x40010400
 8007188:	40014000 	.word	0x40014000
 800718c:	40014400 	.word	0x40014400
 8007190:	40014800 	.word	0x40014800

08007194 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007194:	b480      	push	{r7}
 8007196:	b087      	sub	sp, #28
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	f003 031f 	and.w	r3, r3, #31
 80071a6:	2201      	movs	r2, #1
 80071a8:	fa02 f303 	lsl.w	r3, r2, r3
 80071ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6a1a      	ldr	r2, [r3, #32]
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	43db      	mvns	r3, r3
 80071b6:	401a      	ands	r2, r3
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6a1a      	ldr	r2, [r3, #32]
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	f003 031f 	and.w	r3, r3, #31
 80071c6:	6879      	ldr	r1, [r7, #4]
 80071c8:	fa01 f303 	lsl.w	r3, r1, r3
 80071cc:	431a      	orrs	r2, r3
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	621a      	str	r2, [r3, #32]
}
 80071d2:	bf00      	nop
 80071d4:	371c      	adds	r7, #28
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
	...

080071e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d101      	bne.n	80071f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071f4:	2302      	movs	r3, #2
 80071f6:	e068      	b.n	80072ca <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2202      	movs	r2, #2
 8007204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a2e      	ldr	r2, [pc, #184]	; (80072d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d004      	beq.n	800722c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a2d      	ldr	r2, [pc, #180]	; (80072dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d108      	bne.n	800723e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007232:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	4313      	orrs	r3, r2
 800723c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007244:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	4313      	orrs	r3, r2
 800724e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a1e      	ldr	r2, [pc, #120]	; (80072d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d01d      	beq.n	800729e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800726a:	d018      	beq.n	800729e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a1b      	ldr	r2, [pc, #108]	; (80072e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d013      	beq.n	800729e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a1a      	ldr	r2, [pc, #104]	; (80072e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d00e      	beq.n	800729e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a18      	ldr	r2, [pc, #96]	; (80072e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d009      	beq.n	800729e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a13      	ldr	r2, [pc, #76]	; (80072dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d004      	beq.n	800729e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a14      	ldr	r2, [pc, #80]	; (80072ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d10c      	bne.n	80072b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68ba      	ldr	r2, [r7, #8]
 80072b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3714      	adds	r7, #20
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr
 80072d6:	bf00      	nop
 80072d8:	40010000 	.word	0x40010000
 80072dc:	40010400 	.word	0x40010400
 80072e0:	40000400 	.word	0x40000400
 80072e4:	40000800 	.word	0x40000800
 80072e8:	40000c00 	.word	0x40000c00
 80072ec:	40001800 	.word	0x40001800

080072f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80072fa:	2300      	movs	r3, #0
 80072fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007304:	2b01      	cmp	r3, #1
 8007306:	d101      	bne.n	800730c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007308:	2302      	movs	r3, #2
 800730a:	e065      	b.n	80073d8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	4313      	orrs	r3, r2
 8007320:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	4313      	orrs	r3, r2
 800732e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	4313      	orrs	r3, r2
 800733c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4313      	orrs	r3, r2
 800734a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	4313      	orrs	r3, r2
 8007358:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	695b      	ldr	r3, [r3, #20]
 8007364:	4313      	orrs	r3, r2
 8007366:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007372:	4313      	orrs	r3, r2
 8007374:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	041b      	lsls	r3, r3, #16
 8007382:	4313      	orrs	r3, r2
 8007384:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a16      	ldr	r2, [pc, #88]	; (80073e4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d004      	beq.n	800739a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a14      	ldr	r2, [pc, #80]	; (80073e8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d115      	bne.n	80073c6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a4:	051b      	lsls	r3, r3, #20
 80073a6:	4313      	orrs	r3, r2
 80073a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	69db      	ldr	r3, [r3, #28]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	6a1b      	ldr	r3, [r3, #32]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3714      	adds	r7, #20
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr
 80073e4:	40010000 	.word	0x40010000
 80073e8:	40010400 	.word	0x40010400

080073ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80073f4:	bf00      	nop
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007408:	bf00      	nop
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800741c:	bf00      	nop
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d101      	bne.n	800743a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e042      	b.n	80074c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007440:	2b00      	cmp	r3, #0
 8007442:	d106      	bne.n	8007452 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f7fa fbb1 	bl	8001bb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2224      	movs	r2, #36	; 0x24
 8007456:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f022 0201 	bic.w	r2, r2, #1
 8007468:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 f9c0 	bl	80077f0 <UART_SetConfig>
 8007470:	4603      	mov	r3, r0
 8007472:	2b01      	cmp	r3, #1
 8007474:	d101      	bne.n	800747a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e022      	b.n	80074c0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747e:	2b00      	cmp	r3, #0
 8007480:	d002      	beq.n	8007488 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f002 fb32 	bl	8009aec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	685a      	ldr	r2, [r3, #4]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007496:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	689a      	ldr	r2, [r3, #8]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f042 0201 	orr.w	r2, r2, #1
 80074b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f002 fbb9 	bl	8009c30 <UART_CheckIdleState>
 80074be:	4603      	mov	r3, r0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3708      	adds	r7, #8
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b088      	sub	sp, #32
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	69db      	ldr	r3, [r3, #28]
 80074d6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80074e8:	69fa      	ldr	r2, [r7, #28]
 80074ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80074ee:	4013      	ands	r3, r2
 80074f0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d118      	bne.n	800752a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	f003 0320 	and.w	r3, r3, #32
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d013      	beq.n	800752a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	f003 0320 	and.w	r3, r3, #32
 8007508:	2b00      	cmp	r3, #0
 800750a:	d104      	bne.n	8007516 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007512:	2b00      	cmp	r3, #0
 8007514:	d009      	beq.n	800752a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800751a:	2b00      	cmp	r3, #0
 800751c:	f000 8145 	beq.w	80077aa <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	4798      	blx	r3
      }
      return;
 8007528:	e13f      	b.n	80077aa <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	2b00      	cmp	r3, #0
 800752e:	f000 80e8 	beq.w	8007702 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007532:	697a      	ldr	r2, [r7, #20]
 8007534:	4ba1      	ldr	r3, [pc, #644]	; (80077bc <HAL_UART_IRQHandler+0x2f4>)
 8007536:	4013      	ands	r3, r2
 8007538:	2b00      	cmp	r3, #0
 800753a:	d105      	bne.n	8007548 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800753c:	69ba      	ldr	r2, [r7, #24]
 800753e:	4ba0      	ldr	r3, [pc, #640]	; (80077c0 <HAL_UART_IRQHandler+0x2f8>)
 8007540:	4013      	ands	r3, r2
 8007542:	2b00      	cmp	r3, #0
 8007544:	f000 80dd 	beq.w	8007702 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	f003 0301 	and.w	r3, r3, #1
 800754e:	2b00      	cmp	r3, #0
 8007550:	d010      	beq.n	8007574 <HAL_UART_IRQHandler+0xac>
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00b      	beq.n	8007574 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2201      	movs	r2, #1
 8007562:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800756a:	f043 0201 	orr.w	r2, r3, #1
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	f003 0302 	and.w	r3, r3, #2
 800757a:	2b00      	cmp	r3, #0
 800757c:	d010      	beq.n	80075a0 <HAL_UART_IRQHandler+0xd8>
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	f003 0301 	and.w	r3, r3, #1
 8007584:	2b00      	cmp	r3, #0
 8007586:	d00b      	beq.n	80075a0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2202      	movs	r2, #2
 800758e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007596:	f043 0204 	orr.w	r2, r3, #4
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	f003 0304 	and.w	r3, r3, #4
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d010      	beq.n	80075cc <HAL_UART_IRQHandler+0x104>
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	f003 0301 	and.w	r3, r3, #1
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00b      	beq.n	80075cc <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2204      	movs	r2, #4
 80075ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075c2:	f043 0202 	orr.w	r2, r3, #2
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	f003 0308 	and.w	r3, r3, #8
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d015      	beq.n	8007602 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	f003 0320 	and.w	r3, r3, #32
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d104      	bne.n	80075ea <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80075e0:	697a      	ldr	r2, [r7, #20]
 80075e2:	4b76      	ldr	r3, [pc, #472]	; (80077bc <HAL_UART_IRQHandler+0x2f4>)
 80075e4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00b      	beq.n	8007602 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2208      	movs	r2, #8
 80075f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075f8:	f043 0208 	orr.w	r2, r3, #8
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007608:	2b00      	cmp	r3, #0
 800760a:	d011      	beq.n	8007630 <HAL_UART_IRQHandler+0x168>
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007612:	2b00      	cmp	r3, #0
 8007614:	d00c      	beq.n	8007630 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800761e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007626:	f043 0220 	orr.w	r2, r3, #32
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007636:	2b00      	cmp	r3, #0
 8007638:	f000 80b9 	beq.w	80077ae <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	f003 0320 	and.w	r3, r3, #32
 8007642:	2b00      	cmp	r3, #0
 8007644:	d011      	beq.n	800766a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	f003 0320 	and.w	r3, r3, #32
 800764c:	2b00      	cmp	r3, #0
 800764e:	d104      	bne.n	800765a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d007      	beq.n	800766a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800765e:	2b00      	cmp	r3, #0
 8007660:	d003      	beq.n	800766a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007670:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800767c:	2b40      	cmp	r3, #64	; 0x40
 800767e:	d004      	beq.n	800768a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007686:	2b00      	cmp	r3, #0
 8007688:	d031      	beq.n	80076ee <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f002 fb98 	bl	8009dc0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800769a:	2b40      	cmp	r3, #64	; 0x40
 800769c:	d123      	bne.n	80076e6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	689a      	ldr	r2, [r3, #8]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076ac:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d013      	beq.n	80076de <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076ba:	4a42      	ldr	r2, [pc, #264]	; (80077c4 <HAL_UART_IRQHandler+0x2fc>)
 80076bc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7fa fe14 	bl	80022f0 <HAL_DMA_Abort_IT>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d017      	beq.n	80076fe <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80076d8:	4610      	mov	r0, r2
 80076da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076dc:	e00f      	b.n	80076fe <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f87c 	bl	80077dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076e4:	e00b      	b.n	80076fe <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f878 	bl	80077dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076ec:	e007      	b.n	80076fe <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f874 	bl	80077dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80076fc:	e057      	b.n	80077ae <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076fe:	bf00      	nop
    return;
 8007700:	e055      	b.n	80077ae <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00d      	beq.n	8007728 <HAL_UART_IRQHandler+0x260>
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007712:	2b00      	cmp	r3, #0
 8007714:	d008      	beq.n	8007728 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800771e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f002 fba1 	bl	8009e68 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007726:	e045      	b.n	80077b4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800772e:	2b00      	cmp	r3, #0
 8007730:	d012      	beq.n	8007758 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007738:	2b00      	cmp	r3, #0
 800773a:	d104      	bne.n	8007746 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007742:	2b00      	cmp	r3, #0
 8007744:	d008      	beq.n	8007758 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800774a:	2b00      	cmp	r3, #0
 800774c:	d031      	beq.n	80077b2 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	4798      	blx	r3
    }
    return;
 8007756:	e02c      	b.n	80077b2 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800775e:	2b00      	cmp	r3, #0
 8007760:	d008      	beq.n	8007774 <HAL_UART_IRQHandler+0x2ac>
 8007762:	69bb      	ldr	r3, [r7, #24]
 8007764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007768:	2b00      	cmp	r3, #0
 800776a:	d003      	beq.n	8007774 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f002 fb61 	bl	8009e34 <UART_EndTransmit_IT>
    return;
 8007772:	e01f      	b.n	80077b4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800777a:	2b00      	cmp	r3, #0
 800777c:	d008      	beq.n	8007790 <HAL_UART_IRQHandler+0x2c8>
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007784:	2b00      	cmp	r3, #0
 8007786:	d003      	beq.n	8007790 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f002 fb81 	bl	8009e90 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800778e:	e011      	b.n	80077b4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007790:	69fb      	ldr	r3, [r7, #28]
 8007792:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00c      	beq.n	80077b4 <HAL_UART_IRQHandler+0x2ec>
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	2b00      	cmp	r3, #0
 800779e:	da09      	bge.n	80077b4 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f002 fb6b 	bl	8009e7c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80077a6:	bf00      	nop
 80077a8:	e004      	b.n	80077b4 <HAL_UART_IRQHandler+0x2ec>
      return;
 80077aa:	bf00      	nop
 80077ac:	e002      	b.n	80077b4 <HAL_UART_IRQHandler+0x2ec>
    return;
 80077ae:	bf00      	nop
 80077b0:	e000      	b.n	80077b4 <HAL_UART_IRQHandler+0x2ec>
    return;
 80077b2:	bf00      	nop
  }
}
 80077b4:	3720      	adds	r7, #32
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	10000001 	.word	0x10000001
 80077c0:	04000120 	.word	0x04000120
 80077c4:	08009e09 	.word	0x08009e09

080077c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80077d0:	bf00      	nop
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80077e4:	bf00      	nop
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077f0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80077f4:	b090      	sub	sp, #64	; 0x40
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80077fa:	2300      	movs	r3, #0
 80077fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 80077fe:	2300      	movs	r3, #0
 8007800:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8007804:	2300      	movs	r3, #0
 8007806:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	689a      	ldr	r2, [r3, #8]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	431a      	orrs	r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	695b      	ldr	r3, [r3, #20]
 8007816:	431a      	orrs	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	69db      	ldr	r3, [r3, #28]
 800781c:	4313      	orrs	r3, r2
 800781e:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007824:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007826:	4313      	orrs	r3, r2
 8007828:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	4bc1      	ldr	r3, [pc, #772]	; (8007b38 <UART_SetConfig+0x348>)
 8007832:	4013      	ands	r3, r2
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	6812      	ldr	r2, [r2, #0]
 8007838:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800783a:	430b      	orrs	r3, r1
 800783c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	68da      	ldr	r2, [r3, #12]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	430a      	orrs	r2, r1
 8007852:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	699b      	ldr	r3, [r3, #24]
 8007858:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4ab7      	ldr	r2, [pc, #732]	; (8007b3c <UART_SetConfig+0x34c>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d004      	beq.n	800786e <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a1b      	ldr	r3, [r3, #32]
 8007868:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800786a:	4313      	orrs	r3, r2
 800786c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	689a      	ldr	r2, [r3, #8]
 8007874:	4bb2      	ldr	r3, [pc, #712]	; (8007b40 <UART_SetConfig+0x350>)
 8007876:	4013      	ands	r3, r2
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	6812      	ldr	r2, [r2, #0]
 800787c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800787e:	430b      	orrs	r3, r1
 8007880:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007888:	f023 010f 	bic.w	r1, r3, #15
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	430a      	orrs	r2, r1
 8007896:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4aa9      	ldr	r2, [pc, #676]	; (8007b44 <UART_SetConfig+0x354>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d177      	bne.n	8007992 <UART_SetConfig+0x1a2>
 80078a2:	4ba9      	ldr	r3, [pc, #676]	; (8007b48 <UART_SetConfig+0x358>)
 80078a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078aa:	2b28      	cmp	r3, #40	; 0x28
 80078ac:	d86c      	bhi.n	8007988 <UART_SetConfig+0x198>
 80078ae:	a201      	add	r2, pc, #4	; (adr r2, 80078b4 <UART_SetConfig+0xc4>)
 80078b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b4:	08007959 	.word	0x08007959
 80078b8:	08007989 	.word	0x08007989
 80078bc:	08007989 	.word	0x08007989
 80078c0:	08007989 	.word	0x08007989
 80078c4:	08007989 	.word	0x08007989
 80078c8:	08007989 	.word	0x08007989
 80078cc:	08007989 	.word	0x08007989
 80078d0:	08007989 	.word	0x08007989
 80078d4:	08007961 	.word	0x08007961
 80078d8:	08007989 	.word	0x08007989
 80078dc:	08007989 	.word	0x08007989
 80078e0:	08007989 	.word	0x08007989
 80078e4:	08007989 	.word	0x08007989
 80078e8:	08007989 	.word	0x08007989
 80078ec:	08007989 	.word	0x08007989
 80078f0:	08007989 	.word	0x08007989
 80078f4:	08007969 	.word	0x08007969
 80078f8:	08007989 	.word	0x08007989
 80078fc:	08007989 	.word	0x08007989
 8007900:	08007989 	.word	0x08007989
 8007904:	08007989 	.word	0x08007989
 8007908:	08007989 	.word	0x08007989
 800790c:	08007989 	.word	0x08007989
 8007910:	08007989 	.word	0x08007989
 8007914:	08007971 	.word	0x08007971
 8007918:	08007989 	.word	0x08007989
 800791c:	08007989 	.word	0x08007989
 8007920:	08007989 	.word	0x08007989
 8007924:	08007989 	.word	0x08007989
 8007928:	08007989 	.word	0x08007989
 800792c:	08007989 	.word	0x08007989
 8007930:	08007989 	.word	0x08007989
 8007934:	08007979 	.word	0x08007979
 8007938:	08007989 	.word	0x08007989
 800793c:	08007989 	.word	0x08007989
 8007940:	08007989 	.word	0x08007989
 8007944:	08007989 	.word	0x08007989
 8007948:	08007989 	.word	0x08007989
 800794c:	08007989 	.word	0x08007989
 8007950:	08007989 	.word	0x08007989
 8007954:	08007981 	.word	0x08007981
 8007958:	2301      	movs	r3, #1
 800795a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800795e:	e233      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007960:	2304      	movs	r3, #4
 8007962:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007966:	e22f      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007968:	2308      	movs	r3, #8
 800796a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800796e:	e22b      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007970:	2310      	movs	r3, #16
 8007972:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007976:	e227      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007978:	2320      	movs	r3, #32
 800797a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800797e:	e223      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007980:	2340      	movs	r3, #64	; 0x40
 8007982:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007986:	e21f      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007988:	2380      	movs	r3, #128	; 0x80
 800798a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800798e:	bf00      	nop
 8007990:	e21a      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a6d      	ldr	r2, [pc, #436]	; (8007b4c <UART_SetConfig+0x35c>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d132      	bne.n	8007a02 <UART_SetConfig+0x212>
 800799c:	4b6a      	ldr	r3, [pc, #424]	; (8007b48 <UART_SetConfig+0x358>)
 800799e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079a0:	f003 0307 	and.w	r3, r3, #7
 80079a4:	2b05      	cmp	r3, #5
 80079a6:	d827      	bhi.n	80079f8 <UART_SetConfig+0x208>
 80079a8:	a201      	add	r2, pc, #4	; (adr r2, 80079b0 <UART_SetConfig+0x1c0>)
 80079aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ae:	bf00      	nop
 80079b0:	080079c9 	.word	0x080079c9
 80079b4:	080079d1 	.word	0x080079d1
 80079b8:	080079d9 	.word	0x080079d9
 80079bc:	080079e1 	.word	0x080079e1
 80079c0:	080079e9 	.word	0x080079e9
 80079c4:	080079f1 	.word	0x080079f1
 80079c8:	2300      	movs	r3, #0
 80079ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80079ce:	e1fb      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 80079d0:	2304      	movs	r3, #4
 80079d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80079d6:	e1f7      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 80079d8:	2308      	movs	r3, #8
 80079da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80079de:	e1f3      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 80079e0:	2310      	movs	r3, #16
 80079e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80079e6:	e1ef      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 80079e8:	2320      	movs	r3, #32
 80079ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80079ee:	e1eb      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 80079f0:	2340      	movs	r3, #64	; 0x40
 80079f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80079f6:	e1e7      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 80079f8:	2380      	movs	r3, #128	; 0x80
 80079fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80079fe:	bf00      	nop
 8007a00:	e1e2      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a52      	ldr	r2, [pc, #328]	; (8007b50 <UART_SetConfig+0x360>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d132      	bne.n	8007a72 <UART_SetConfig+0x282>
 8007a0c:	4b4e      	ldr	r3, [pc, #312]	; (8007b48 <UART_SetConfig+0x358>)
 8007a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a10:	f003 0307 	and.w	r3, r3, #7
 8007a14:	2b05      	cmp	r3, #5
 8007a16:	d827      	bhi.n	8007a68 <UART_SetConfig+0x278>
 8007a18:	a201      	add	r2, pc, #4	; (adr r2, 8007a20 <UART_SetConfig+0x230>)
 8007a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a1e:	bf00      	nop
 8007a20:	08007a39 	.word	0x08007a39
 8007a24:	08007a41 	.word	0x08007a41
 8007a28:	08007a49 	.word	0x08007a49
 8007a2c:	08007a51 	.word	0x08007a51
 8007a30:	08007a59 	.word	0x08007a59
 8007a34:	08007a61 	.word	0x08007a61
 8007a38:	2300      	movs	r3, #0
 8007a3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a3e:	e1c3      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007a40:	2304      	movs	r3, #4
 8007a42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a46:	e1bf      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007a48:	2308      	movs	r3, #8
 8007a4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a4e:	e1bb      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007a50:	2310      	movs	r3, #16
 8007a52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a56:	e1b7      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007a58:	2320      	movs	r3, #32
 8007a5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a5e:	e1b3      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007a60:	2340      	movs	r3, #64	; 0x40
 8007a62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a66:	e1af      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007a68:	2380      	movs	r3, #128	; 0x80
 8007a6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a6e:	bf00      	nop
 8007a70:	e1aa      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a37      	ldr	r2, [pc, #220]	; (8007b54 <UART_SetConfig+0x364>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d132      	bne.n	8007ae2 <UART_SetConfig+0x2f2>
 8007a7c:	4b32      	ldr	r3, [pc, #200]	; (8007b48 <UART_SetConfig+0x358>)
 8007a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a80:	f003 0307 	and.w	r3, r3, #7
 8007a84:	2b05      	cmp	r3, #5
 8007a86:	d827      	bhi.n	8007ad8 <UART_SetConfig+0x2e8>
 8007a88:	a201      	add	r2, pc, #4	; (adr r2, 8007a90 <UART_SetConfig+0x2a0>)
 8007a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8e:	bf00      	nop
 8007a90:	08007aa9 	.word	0x08007aa9
 8007a94:	08007ab1 	.word	0x08007ab1
 8007a98:	08007ab9 	.word	0x08007ab9
 8007a9c:	08007ac1 	.word	0x08007ac1
 8007aa0:	08007ac9 	.word	0x08007ac9
 8007aa4:	08007ad1 	.word	0x08007ad1
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007aae:	e18b      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007ab0:	2304      	movs	r3, #4
 8007ab2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007ab6:	e187      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007ab8:	2308      	movs	r3, #8
 8007aba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007abe:	e183      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007ac0:	2310      	movs	r3, #16
 8007ac2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007ac6:	e17f      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007ac8:	2320      	movs	r3, #32
 8007aca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007ace:	e17b      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007ad0:	2340      	movs	r3, #64	; 0x40
 8007ad2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007ad6:	e177      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007ad8:	2380      	movs	r3, #128	; 0x80
 8007ada:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007ade:	bf00      	nop
 8007ae0:	e172      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a1c      	ldr	r2, [pc, #112]	; (8007b58 <UART_SetConfig+0x368>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d144      	bne.n	8007b76 <UART_SetConfig+0x386>
 8007aec:	4b16      	ldr	r3, [pc, #88]	; (8007b48 <UART_SetConfig+0x358>)
 8007aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007af0:	f003 0307 	and.w	r3, r3, #7
 8007af4:	2b05      	cmp	r3, #5
 8007af6:	d839      	bhi.n	8007b6c <UART_SetConfig+0x37c>
 8007af8:	a201      	add	r2, pc, #4	; (adr r2, 8007b00 <UART_SetConfig+0x310>)
 8007afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007afe:	bf00      	nop
 8007b00:	08007b19 	.word	0x08007b19
 8007b04:	08007b21 	.word	0x08007b21
 8007b08:	08007b29 	.word	0x08007b29
 8007b0c:	08007b31 	.word	0x08007b31
 8007b10:	08007b5d 	.word	0x08007b5d
 8007b14:	08007b65 	.word	0x08007b65
 8007b18:	2300      	movs	r3, #0
 8007b1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b1e:	e153      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007b20:	2304      	movs	r3, #4
 8007b22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b26:	e14f      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007b28:	2308      	movs	r3, #8
 8007b2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b2e:	e14b      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007b30:	2310      	movs	r3, #16
 8007b32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b36:	e147      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007b38:	cfff69f3 	.word	0xcfff69f3
 8007b3c:	58000c00 	.word	0x58000c00
 8007b40:	11fff4ff 	.word	0x11fff4ff
 8007b44:	40011000 	.word	0x40011000
 8007b48:	58024400 	.word	0x58024400
 8007b4c:	40004400 	.word	0x40004400
 8007b50:	40004800 	.word	0x40004800
 8007b54:	40004c00 	.word	0x40004c00
 8007b58:	40005000 	.word	0x40005000
 8007b5c:	2320      	movs	r3, #32
 8007b5e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b62:	e131      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007b64:	2340      	movs	r3, #64	; 0x40
 8007b66:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b6a:	e12d      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007b6c:	2380      	movs	r3, #128	; 0x80
 8007b6e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b72:	bf00      	nop
 8007b74:	e128      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4ac3      	ldr	r2, [pc, #780]	; (8007e88 <UART_SetConfig+0x698>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d178      	bne.n	8007c72 <UART_SetConfig+0x482>
 8007b80:	4bc2      	ldr	r3, [pc, #776]	; (8007e8c <UART_SetConfig+0x69c>)
 8007b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b88:	2b28      	cmp	r3, #40	; 0x28
 8007b8a:	d86d      	bhi.n	8007c68 <UART_SetConfig+0x478>
 8007b8c:	a201      	add	r2, pc, #4	; (adr r2, 8007b94 <UART_SetConfig+0x3a4>)
 8007b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b92:	bf00      	nop
 8007b94:	08007c39 	.word	0x08007c39
 8007b98:	08007c69 	.word	0x08007c69
 8007b9c:	08007c69 	.word	0x08007c69
 8007ba0:	08007c69 	.word	0x08007c69
 8007ba4:	08007c69 	.word	0x08007c69
 8007ba8:	08007c69 	.word	0x08007c69
 8007bac:	08007c69 	.word	0x08007c69
 8007bb0:	08007c69 	.word	0x08007c69
 8007bb4:	08007c41 	.word	0x08007c41
 8007bb8:	08007c69 	.word	0x08007c69
 8007bbc:	08007c69 	.word	0x08007c69
 8007bc0:	08007c69 	.word	0x08007c69
 8007bc4:	08007c69 	.word	0x08007c69
 8007bc8:	08007c69 	.word	0x08007c69
 8007bcc:	08007c69 	.word	0x08007c69
 8007bd0:	08007c69 	.word	0x08007c69
 8007bd4:	08007c49 	.word	0x08007c49
 8007bd8:	08007c69 	.word	0x08007c69
 8007bdc:	08007c69 	.word	0x08007c69
 8007be0:	08007c69 	.word	0x08007c69
 8007be4:	08007c69 	.word	0x08007c69
 8007be8:	08007c69 	.word	0x08007c69
 8007bec:	08007c69 	.word	0x08007c69
 8007bf0:	08007c69 	.word	0x08007c69
 8007bf4:	08007c51 	.word	0x08007c51
 8007bf8:	08007c69 	.word	0x08007c69
 8007bfc:	08007c69 	.word	0x08007c69
 8007c00:	08007c69 	.word	0x08007c69
 8007c04:	08007c69 	.word	0x08007c69
 8007c08:	08007c69 	.word	0x08007c69
 8007c0c:	08007c69 	.word	0x08007c69
 8007c10:	08007c69 	.word	0x08007c69
 8007c14:	08007c59 	.word	0x08007c59
 8007c18:	08007c69 	.word	0x08007c69
 8007c1c:	08007c69 	.word	0x08007c69
 8007c20:	08007c69 	.word	0x08007c69
 8007c24:	08007c69 	.word	0x08007c69
 8007c28:	08007c69 	.word	0x08007c69
 8007c2c:	08007c69 	.word	0x08007c69
 8007c30:	08007c69 	.word	0x08007c69
 8007c34:	08007c61 	.word	0x08007c61
 8007c38:	2301      	movs	r3, #1
 8007c3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c3e:	e0c3      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007c40:	2304      	movs	r3, #4
 8007c42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c46:	e0bf      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007c48:	2308      	movs	r3, #8
 8007c4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c4e:	e0bb      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007c50:	2310      	movs	r3, #16
 8007c52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c56:	e0b7      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007c58:	2320      	movs	r3, #32
 8007c5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c5e:	e0b3      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007c60:	2340      	movs	r3, #64	; 0x40
 8007c62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c66:	e0af      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007c68:	2380      	movs	r3, #128	; 0x80
 8007c6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c6e:	bf00      	nop
 8007c70:	e0aa      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a86      	ldr	r2, [pc, #536]	; (8007e90 <UART_SetConfig+0x6a0>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d132      	bne.n	8007ce2 <UART_SetConfig+0x4f2>
 8007c7c:	4b83      	ldr	r3, [pc, #524]	; (8007e8c <UART_SetConfig+0x69c>)
 8007c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c80:	f003 0307 	and.w	r3, r3, #7
 8007c84:	2b05      	cmp	r3, #5
 8007c86:	d827      	bhi.n	8007cd8 <UART_SetConfig+0x4e8>
 8007c88:	a201      	add	r2, pc, #4	; (adr r2, 8007c90 <UART_SetConfig+0x4a0>)
 8007c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c8e:	bf00      	nop
 8007c90:	08007ca9 	.word	0x08007ca9
 8007c94:	08007cb1 	.word	0x08007cb1
 8007c98:	08007cb9 	.word	0x08007cb9
 8007c9c:	08007cc1 	.word	0x08007cc1
 8007ca0:	08007cc9 	.word	0x08007cc9
 8007ca4:	08007cd1 	.word	0x08007cd1
 8007ca8:	2300      	movs	r3, #0
 8007caa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007cae:	e08b      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007cb0:	2304      	movs	r3, #4
 8007cb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007cb6:	e087      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007cb8:	2308      	movs	r3, #8
 8007cba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007cbe:	e083      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007cc0:	2310      	movs	r3, #16
 8007cc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007cc6:	e07f      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007cc8:	2320      	movs	r3, #32
 8007cca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007cce:	e07b      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007cd0:	2340      	movs	r3, #64	; 0x40
 8007cd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007cd6:	e077      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007cd8:	2380      	movs	r3, #128	; 0x80
 8007cda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007cde:	bf00      	nop
 8007ce0:	e072      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a6b      	ldr	r2, [pc, #428]	; (8007e94 <UART_SetConfig+0x6a4>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d132      	bne.n	8007d52 <UART_SetConfig+0x562>
 8007cec:	4b67      	ldr	r3, [pc, #412]	; (8007e8c <UART_SetConfig+0x69c>)
 8007cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cf0:	f003 0307 	and.w	r3, r3, #7
 8007cf4:	2b05      	cmp	r3, #5
 8007cf6:	d827      	bhi.n	8007d48 <UART_SetConfig+0x558>
 8007cf8:	a201      	add	r2, pc, #4	; (adr r2, 8007d00 <UART_SetConfig+0x510>)
 8007cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cfe:	bf00      	nop
 8007d00:	08007d19 	.word	0x08007d19
 8007d04:	08007d21 	.word	0x08007d21
 8007d08:	08007d29 	.word	0x08007d29
 8007d0c:	08007d31 	.word	0x08007d31
 8007d10:	08007d39 	.word	0x08007d39
 8007d14:	08007d41 	.word	0x08007d41
 8007d18:	2300      	movs	r3, #0
 8007d1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d1e:	e053      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007d20:	2304      	movs	r3, #4
 8007d22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d26:	e04f      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007d28:	2308      	movs	r3, #8
 8007d2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d2e:	e04b      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007d30:	2310      	movs	r3, #16
 8007d32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d36:	e047      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007d38:	2320      	movs	r3, #32
 8007d3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d3e:	e043      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007d40:	2340      	movs	r3, #64	; 0x40
 8007d42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d46:	e03f      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007d48:	2380      	movs	r3, #128	; 0x80
 8007d4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d4e:	bf00      	nop
 8007d50:	e03a      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a50      	ldr	r2, [pc, #320]	; (8007e98 <UART_SetConfig+0x6a8>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d132      	bne.n	8007dc2 <UART_SetConfig+0x5d2>
 8007d5c:	4b4b      	ldr	r3, [pc, #300]	; (8007e8c <UART_SetConfig+0x69c>)
 8007d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d60:	f003 0307 	and.w	r3, r3, #7
 8007d64:	2b05      	cmp	r3, #5
 8007d66:	d827      	bhi.n	8007db8 <UART_SetConfig+0x5c8>
 8007d68:	a201      	add	r2, pc, #4	; (adr r2, 8007d70 <UART_SetConfig+0x580>)
 8007d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6e:	bf00      	nop
 8007d70:	08007d89 	.word	0x08007d89
 8007d74:	08007d91 	.word	0x08007d91
 8007d78:	08007d99 	.word	0x08007d99
 8007d7c:	08007da1 	.word	0x08007da1
 8007d80:	08007da9 	.word	0x08007da9
 8007d84:	08007db1 	.word	0x08007db1
 8007d88:	2302      	movs	r3, #2
 8007d8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d8e:	e01b      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007d90:	2304      	movs	r3, #4
 8007d92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d96:	e017      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007d98:	2308      	movs	r3, #8
 8007d9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d9e:	e013      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007da0:	2310      	movs	r3, #16
 8007da2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007da6:	e00f      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007da8:	2320      	movs	r3, #32
 8007daa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007dae:	e00b      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007db0:	2340      	movs	r3, #64	; 0x40
 8007db2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007db6:	e007      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007db8:	2380      	movs	r3, #128	; 0x80
 8007dba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007dbe:	bf00      	nop
 8007dc0:	e002      	b.n	8007dc8 <UART_SetConfig+0x5d8>
 8007dc2:	2380      	movs	r3, #128	; 0x80
 8007dc4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a32      	ldr	r2, [pc, #200]	; (8007e98 <UART_SetConfig+0x6a8>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	f040 86f7 	bne.w	8008bc2 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007dd4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007dd8:	2b08      	cmp	r3, #8
 8007dda:	f000 80c0 	beq.w	8007f5e <UART_SetConfig+0x76e>
 8007dde:	2b08      	cmp	r3, #8
 8007de0:	dc04      	bgt.n	8007dec <UART_SetConfig+0x5fc>
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	d00c      	beq.n	8007e00 <UART_SetConfig+0x610>
 8007de6:	2b04      	cmp	r3, #4
 8007de8:	d065      	beq.n	8007eb6 <UART_SetConfig+0x6c6>
 8007dea:	e27a      	b.n	80082e2 <UART_SetConfig+0xaf2>
 8007dec:	2b20      	cmp	r3, #32
 8007dee:	f000 81b0 	beq.w	8008152 <UART_SetConfig+0x962>
 8007df2:	2b40      	cmp	r3, #64	; 0x40
 8007df4:	f000 821e 	beq.w	8008234 <UART_SetConfig+0xa44>
 8007df8:	2b10      	cmp	r3, #16
 8007dfa:	f000 8104 	beq.w	8008006 <UART_SetConfig+0x816>
 8007dfe:	e270      	b.n	80082e2 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007e00:	f7fd ff14 	bl	8005c2c <HAL_RCCEx_GetD3PCLK1Freq>
 8007e04:	4602      	mov	r2, r0
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d04e      	beq.n	8007eac <UART_SetConfig+0x6bc>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d048      	beq.n	8007ea8 <UART_SetConfig+0x6b8>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1a:	2b02      	cmp	r3, #2
 8007e1c:	d042      	beq.n	8007ea4 <UART_SetConfig+0x6b4>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e22:	2b03      	cmp	r3, #3
 8007e24:	d03c      	beq.n	8007ea0 <UART_SetConfig+0x6b0>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2a:	2b04      	cmp	r3, #4
 8007e2c:	d036      	beq.n	8007e9c <UART_SetConfig+0x6ac>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e32:	2b05      	cmp	r3, #5
 8007e34:	d026      	beq.n	8007e84 <UART_SetConfig+0x694>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3a:	2b06      	cmp	r3, #6
 8007e3c:	d020      	beq.n	8007e80 <UART_SetConfig+0x690>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e42:	2b07      	cmp	r3, #7
 8007e44:	d01a      	beq.n	8007e7c <UART_SetConfig+0x68c>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4a:	2b08      	cmp	r3, #8
 8007e4c:	d014      	beq.n	8007e78 <UART_SetConfig+0x688>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e52:	2b09      	cmp	r3, #9
 8007e54:	d00e      	beq.n	8007e74 <UART_SetConfig+0x684>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5a:	2b0a      	cmp	r3, #10
 8007e5c:	d008      	beq.n	8007e70 <UART_SetConfig+0x680>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e62:	2b0b      	cmp	r3, #11
 8007e64:	d102      	bne.n	8007e6c <UART_SetConfig+0x67c>
 8007e66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e6a:	e020      	b.n	8007eae <UART_SetConfig+0x6be>
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e01e      	b.n	8007eae <UART_SetConfig+0x6be>
 8007e70:	2380      	movs	r3, #128	; 0x80
 8007e72:	e01c      	b.n	8007eae <UART_SetConfig+0x6be>
 8007e74:	2340      	movs	r3, #64	; 0x40
 8007e76:	e01a      	b.n	8007eae <UART_SetConfig+0x6be>
 8007e78:	2320      	movs	r3, #32
 8007e7a:	e018      	b.n	8007eae <UART_SetConfig+0x6be>
 8007e7c:	2310      	movs	r3, #16
 8007e7e:	e016      	b.n	8007eae <UART_SetConfig+0x6be>
 8007e80:	230c      	movs	r3, #12
 8007e82:	e014      	b.n	8007eae <UART_SetConfig+0x6be>
 8007e84:	230a      	movs	r3, #10
 8007e86:	e012      	b.n	8007eae <UART_SetConfig+0x6be>
 8007e88:	40011400 	.word	0x40011400
 8007e8c:	58024400 	.word	0x58024400
 8007e90:	40007800 	.word	0x40007800
 8007e94:	40007c00 	.word	0x40007c00
 8007e98:	58000c00 	.word	0x58000c00
 8007e9c:	2308      	movs	r3, #8
 8007e9e:	e006      	b.n	8007eae <UART_SetConfig+0x6be>
 8007ea0:	2306      	movs	r3, #6
 8007ea2:	e004      	b.n	8007eae <UART_SetConfig+0x6be>
 8007ea4:	2304      	movs	r3, #4
 8007ea6:	e002      	b.n	8007eae <UART_SetConfig+0x6be>
 8007ea8:	2302      	movs	r3, #2
 8007eaa:	e000      	b.n	8007eae <UART_SetConfig+0x6be>
 8007eac:	2301      	movs	r3, #1
 8007eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007eb4:	e219      	b.n	80082ea <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007eb6:	f107 0318 	add.w	r3, r7, #24
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7fd fecc 	bl	8005c58 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007ec0:	69fa      	ldr	r2, [r7, #28]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d044      	beq.n	8007f54 <UART_SetConfig+0x764>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d03e      	beq.n	8007f50 <UART_SetConfig+0x760>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d038      	beq.n	8007f4c <UART_SetConfig+0x75c>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ede:	2b03      	cmp	r3, #3
 8007ee0:	d032      	beq.n	8007f48 <UART_SetConfig+0x758>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee6:	2b04      	cmp	r3, #4
 8007ee8:	d02c      	beq.n	8007f44 <UART_SetConfig+0x754>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eee:	2b05      	cmp	r3, #5
 8007ef0:	d026      	beq.n	8007f40 <UART_SetConfig+0x750>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef6:	2b06      	cmp	r3, #6
 8007ef8:	d020      	beq.n	8007f3c <UART_SetConfig+0x74c>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efe:	2b07      	cmp	r3, #7
 8007f00:	d01a      	beq.n	8007f38 <UART_SetConfig+0x748>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f06:	2b08      	cmp	r3, #8
 8007f08:	d014      	beq.n	8007f34 <UART_SetConfig+0x744>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0e:	2b09      	cmp	r3, #9
 8007f10:	d00e      	beq.n	8007f30 <UART_SetConfig+0x740>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f16:	2b0a      	cmp	r3, #10
 8007f18:	d008      	beq.n	8007f2c <UART_SetConfig+0x73c>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1e:	2b0b      	cmp	r3, #11
 8007f20:	d102      	bne.n	8007f28 <UART_SetConfig+0x738>
 8007f22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f26:	e016      	b.n	8007f56 <UART_SetConfig+0x766>
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e014      	b.n	8007f56 <UART_SetConfig+0x766>
 8007f2c:	2380      	movs	r3, #128	; 0x80
 8007f2e:	e012      	b.n	8007f56 <UART_SetConfig+0x766>
 8007f30:	2340      	movs	r3, #64	; 0x40
 8007f32:	e010      	b.n	8007f56 <UART_SetConfig+0x766>
 8007f34:	2320      	movs	r3, #32
 8007f36:	e00e      	b.n	8007f56 <UART_SetConfig+0x766>
 8007f38:	2310      	movs	r3, #16
 8007f3a:	e00c      	b.n	8007f56 <UART_SetConfig+0x766>
 8007f3c:	230c      	movs	r3, #12
 8007f3e:	e00a      	b.n	8007f56 <UART_SetConfig+0x766>
 8007f40:	230a      	movs	r3, #10
 8007f42:	e008      	b.n	8007f56 <UART_SetConfig+0x766>
 8007f44:	2308      	movs	r3, #8
 8007f46:	e006      	b.n	8007f56 <UART_SetConfig+0x766>
 8007f48:	2306      	movs	r3, #6
 8007f4a:	e004      	b.n	8007f56 <UART_SetConfig+0x766>
 8007f4c:	2304      	movs	r3, #4
 8007f4e:	e002      	b.n	8007f56 <UART_SetConfig+0x766>
 8007f50:	2302      	movs	r3, #2
 8007f52:	e000      	b.n	8007f56 <UART_SetConfig+0x766>
 8007f54:	2301      	movs	r3, #1
 8007f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007f5c:	e1c5      	b.n	80082ea <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f5e:	f107 030c 	add.w	r3, r7, #12
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7fd ffc4 	bl	8005ef0 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007f68:	693a      	ldr	r2, [r7, #16]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d044      	beq.n	8007ffc <UART_SetConfig+0x80c>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d03e      	beq.n	8007ff8 <UART_SetConfig+0x808>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d038      	beq.n	8007ff4 <UART_SetConfig+0x804>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f86:	2b03      	cmp	r3, #3
 8007f88:	d032      	beq.n	8007ff0 <UART_SetConfig+0x800>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8e:	2b04      	cmp	r3, #4
 8007f90:	d02c      	beq.n	8007fec <UART_SetConfig+0x7fc>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f96:	2b05      	cmp	r3, #5
 8007f98:	d026      	beq.n	8007fe8 <UART_SetConfig+0x7f8>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9e:	2b06      	cmp	r3, #6
 8007fa0:	d020      	beq.n	8007fe4 <UART_SetConfig+0x7f4>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa6:	2b07      	cmp	r3, #7
 8007fa8:	d01a      	beq.n	8007fe0 <UART_SetConfig+0x7f0>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fae:	2b08      	cmp	r3, #8
 8007fb0:	d014      	beq.n	8007fdc <UART_SetConfig+0x7ec>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb6:	2b09      	cmp	r3, #9
 8007fb8:	d00e      	beq.n	8007fd8 <UART_SetConfig+0x7e8>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbe:	2b0a      	cmp	r3, #10
 8007fc0:	d008      	beq.n	8007fd4 <UART_SetConfig+0x7e4>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc6:	2b0b      	cmp	r3, #11
 8007fc8:	d102      	bne.n	8007fd0 <UART_SetConfig+0x7e0>
 8007fca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007fce:	e016      	b.n	8007ffe <UART_SetConfig+0x80e>
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e014      	b.n	8007ffe <UART_SetConfig+0x80e>
 8007fd4:	2380      	movs	r3, #128	; 0x80
 8007fd6:	e012      	b.n	8007ffe <UART_SetConfig+0x80e>
 8007fd8:	2340      	movs	r3, #64	; 0x40
 8007fda:	e010      	b.n	8007ffe <UART_SetConfig+0x80e>
 8007fdc:	2320      	movs	r3, #32
 8007fde:	e00e      	b.n	8007ffe <UART_SetConfig+0x80e>
 8007fe0:	2310      	movs	r3, #16
 8007fe2:	e00c      	b.n	8007ffe <UART_SetConfig+0x80e>
 8007fe4:	230c      	movs	r3, #12
 8007fe6:	e00a      	b.n	8007ffe <UART_SetConfig+0x80e>
 8007fe8:	230a      	movs	r3, #10
 8007fea:	e008      	b.n	8007ffe <UART_SetConfig+0x80e>
 8007fec:	2308      	movs	r3, #8
 8007fee:	e006      	b.n	8007ffe <UART_SetConfig+0x80e>
 8007ff0:	2306      	movs	r3, #6
 8007ff2:	e004      	b.n	8007ffe <UART_SetConfig+0x80e>
 8007ff4:	2304      	movs	r3, #4
 8007ff6:	e002      	b.n	8007ffe <UART_SetConfig+0x80e>
 8007ff8:	2302      	movs	r3, #2
 8007ffa:	e000      	b.n	8007ffe <UART_SetConfig+0x80e>
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008002:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008004:	e171      	b.n	80082ea <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008006:	4b7a      	ldr	r3, [pc, #488]	; (80081f0 <UART_SetConfig+0xa00>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 0320 	and.w	r3, r3, #32
 800800e:	2b00      	cmp	r3, #0
 8008010:	d054      	beq.n	80080bc <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008012:	4b77      	ldr	r3, [pc, #476]	; (80081f0 <UART_SetConfig+0xa00>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	08db      	lsrs	r3, r3, #3
 8008018:	f003 0303 	and.w	r3, r3, #3
 800801c:	4a75      	ldr	r2, [pc, #468]	; (80081f4 <UART_SetConfig+0xa04>)
 800801e:	40da      	lsrs	r2, r3
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008024:	2b00      	cmp	r3, #0
 8008026:	d044      	beq.n	80080b2 <UART_SetConfig+0x8c2>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802c:	2b01      	cmp	r3, #1
 800802e:	d03e      	beq.n	80080ae <UART_SetConfig+0x8be>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008034:	2b02      	cmp	r3, #2
 8008036:	d038      	beq.n	80080aa <UART_SetConfig+0x8ba>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800803c:	2b03      	cmp	r3, #3
 800803e:	d032      	beq.n	80080a6 <UART_SetConfig+0x8b6>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008044:	2b04      	cmp	r3, #4
 8008046:	d02c      	beq.n	80080a2 <UART_SetConfig+0x8b2>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804c:	2b05      	cmp	r3, #5
 800804e:	d026      	beq.n	800809e <UART_SetConfig+0x8ae>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008054:	2b06      	cmp	r3, #6
 8008056:	d020      	beq.n	800809a <UART_SetConfig+0x8aa>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805c:	2b07      	cmp	r3, #7
 800805e:	d01a      	beq.n	8008096 <UART_SetConfig+0x8a6>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008064:	2b08      	cmp	r3, #8
 8008066:	d014      	beq.n	8008092 <UART_SetConfig+0x8a2>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806c:	2b09      	cmp	r3, #9
 800806e:	d00e      	beq.n	800808e <UART_SetConfig+0x89e>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008074:	2b0a      	cmp	r3, #10
 8008076:	d008      	beq.n	800808a <UART_SetConfig+0x89a>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807c:	2b0b      	cmp	r3, #11
 800807e:	d102      	bne.n	8008086 <UART_SetConfig+0x896>
 8008080:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008084:	e016      	b.n	80080b4 <UART_SetConfig+0x8c4>
 8008086:	2301      	movs	r3, #1
 8008088:	e014      	b.n	80080b4 <UART_SetConfig+0x8c4>
 800808a:	2380      	movs	r3, #128	; 0x80
 800808c:	e012      	b.n	80080b4 <UART_SetConfig+0x8c4>
 800808e:	2340      	movs	r3, #64	; 0x40
 8008090:	e010      	b.n	80080b4 <UART_SetConfig+0x8c4>
 8008092:	2320      	movs	r3, #32
 8008094:	e00e      	b.n	80080b4 <UART_SetConfig+0x8c4>
 8008096:	2310      	movs	r3, #16
 8008098:	e00c      	b.n	80080b4 <UART_SetConfig+0x8c4>
 800809a:	230c      	movs	r3, #12
 800809c:	e00a      	b.n	80080b4 <UART_SetConfig+0x8c4>
 800809e:	230a      	movs	r3, #10
 80080a0:	e008      	b.n	80080b4 <UART_SetConfig+0x8c4>
 80080a2:	2308      	movs	r3, #8
 80080a4:	e006      	b.n	80080b4 <UART_SetConfig+0x8c4>
 80080a6:	2306      	movs	r3, #6
 80080a8:	e004      	b.n	80080b4 <UART_SetConfig+0x8c4>
 80080aa:	2304      	movs	r3, #4
 80080ac:	e002      	b.n	80080b4 <UART_SetConfig+0x8c4>
 80080ae:	2302      	movs	r3, #2
 80080b0:	e000      	b.n	80080b4 <UART_SetConfig+0x8c4>
 80080b2:	2301      	movs	r3, #1
 80080b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80080b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 80080ba:	e116      	b.n	80082ea <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d043      	beq.n	800814c <UART_SetConfig+0x95c>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d03d      	beq.n	8008148 <UART_SetConfig+0x958>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d0:	2b02      	cmp	r3, #2
 80080d2:	d037      	beq.n	8008144 <UART_SetConfig+0x954>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d8:	2b03      	cmp	r3, #3
 80080da:	d031      	beq.n	8008140 <UART_SetConfig+0x950>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e0:	2b04      	cmp	r3, #4
 80080e2:	d02b      	beq.n	800813c <UART_SetConfig+0x94c>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e8:	2b05      	cmp	r3, #5
 80080ea:	d025      	beq.n	8008138 <UART_SetConfig+0x948>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f0:	2b06      	cmp	r3, #6
 80080f2:	d01f      	beq.n	8008134 <UART_SetConfig+0x944>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f8:	2b07      	cmp	r3, #7
 80080fa:	d019      	beq.n	8008130 <UART_SetConfig+0x940>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008100:	2b08      	cmp	r3, #8
 8008102:	d013      	beq.n	800812c <UART_SetConfig+0x93c>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008108:	2b09      	cmp	r3, #9
 800810a:	d00d      	beq.n	8008128 <UART_SetConfig+0x938>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008110:	2b0a      	cmp	r3, #10
 8008112:	d007      	beq.n	8008124 <UART_SetConfig+0x934>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008118:	2b0b      	cmp	r3, #11
 800811a:	d101      	bne.n	8008120 <UART_SetConfig+0x930>
 800811c:	4b36      	ldr	r3, [pc, #216]	; (80081f8 <UART_SetConfig+0xa08>)
 800811e:	e016      	b.n	800814e <UART_SetConfig+0x95e>
 8008120:	4b34      	ldr	r3, [pc, #208]	; (80081f4 <UART_SetConfig+0xa04>)
 8008122:	e014      	b.n	800814e <UART_SetConfig+0x95e>
 8008124:	4b35      	ldr	r3, [pc, #212]	; (80081fc <UART_SetConfig+0xa0c>)
 8008126:	e012      	b.n	800814e <UART_SetConfig+0x95e>
 8008128:	4b35      	ldr	r3, [pc, #212]	; (8008200 <UART_SetConfig+0xa10>)
 800812a:	e010      	b.n	800814e <UART_SetConfig+0x95e>
 800812c:	4b35      	ldr	r3, [pc, #212]	; (8008204 <UART_SetConfig+0xa14>)
 800812e:	e00e      	b.n	800814e <UART_SetConfig+0x95e>
 8008130:	4b35      	ldr	r3, [pc, #212]	; (8008208 <UART_SetConfig+0xa18>)
 8008132:	e00c      	b.n	800814e <UART_SetConfig+0x95e>
 8008134:	4b35      	ldr	r3, [pc, #212]	; (800820c <UART_SetConfig+0xa1c>)
 8008136:	e00a      	b.n	800814e <UART_SetConfig+0x95e>
 8008138:	4b35      	ldr	r3, [pc, #212]	; (8008210 <UART_SetConfig+0xa20>)
 800813a:	e008      	b.n	800814e <UART_SetConfig+0x95e>
 800813c:	4b35      	ldr	r3, [pc, #212]	; (8008214 <UART_SetConfig+0xa24>)
 800813e:	e006      	b.n	800814e <UART_SetConfig+0x95e>
 8008140:	4b35      	ldr	r3, [pc, #212]	; (8008218 <UART_SetConfig+0xa28>)
 8008142:	e004      	b.n	800814e <UART_SetConfig+0x95e>
 8008144:	4b35      	ldr	r3, [pc, #212]	; (800821c <UART_SetConfig+0xa2c>)
 8008146:	e002      	b.n	800814e <UART_SetConfig+0x95e>
 8008148:	4b35      	ldr	r3, [pc, #212]	; (8008220 <UART_SetConfig+0xa30>)
 800814a:	e000      	b.n	800814e <UART_SetConfig+0x95e>
 800814c:	4b29      	ldr	r3, [pc, #164]	; (80081f4 <UART_SetConfig+0xa04>)
 800814e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008150:	e0cb      	b.n	80082ea <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008156:	2b00      	cmp	r3, #0
 8008158:	d046      	beq.n	80081e8 <UART_SetConfig+0x9f8>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815e:	2b01      	cmp	r3, #1
 8008160:	d040      	beq.n	80081e4 <UART_SetConfig+0x9f4>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008166:	2b02      	cmp	r3, #2
 8008168:	d03a      	beq.n	80081e0 <UART_SetConfig+0x9f0>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816e:	2b03      	cmp	r3, #3
 8008170:	d034      	beq.n	80081dc <UART_SetConfig+0x9ec>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008176:	2b04      	cmp	r3, #4
 8008178:	d02e      	beq.n	80081d8 <UART_SetConfig+0x9e8>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817e:	2b05      	cmp	r3, #5
 8008180:	d028      	beq.n	80081d4 <UART_SetConfig+0x9e4>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008186:	2b06      	cmp	r3, #6
 8008188:	d022      	beq.n	80081d0 <UART_SetConfig+0x9e0>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818e:	2b07      	cmp	r3, #7
 8008190:	d01c      	beq.n	80081cc <UART_SetConfig+0x9dc>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008196:	2b08      	cmp	r3, #8
 8008198:	d016      	beq.n	80081c8 <UART_SetConfig+0x9d8>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819e:	2b09      	cmp	r3, #9
 80081a0:	d00f      	beq.n	80081c2 <UART_SetConfig+0x9d2>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a6:	2b0a      	cmp	r3, #10
 80081a8:	d008      	beq.n	80081bc <UART_SetConfig+0x9cc>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ae:	2b0b      	cmp	r3, #11
 80081b0:	d102      	bne.n	80081b8 <UART_SetConfig+0x9c8>
 80081b2:	f643 5309 	movw	r3, #15625	; 0x3d09
 80081b6:	e018      	b.n	80081ea <UART_SetConfig+0x9fa>
 80081b8:	4b13      	ldr	r3, [pc, #76]	; (8008208 <UART_SetConfig+0xa18>)
 80081ba:	e016      	b.n	80081ea <UART_SetConfig+0x9fa>
 80081bc:	f647 2312 	movw	r3, #31250	; 0x7a12
 80081c0:	e013      	b.n	80081ea <UART_SetConfig+0x9fa>
 80081c2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80081c6:	e010      	b.n	80081ea <UART_SetConfig+0x9fa>
 80081c8:	4b16      	ldr	r3, [pc, #88]	; (8008224 <UART_SetConfig+0xa34>)
 80081ca:	e00e      	b.n	80081ea <UART_SetConfig+0x9fa>
 80081cc:	4b0a      	ldr	r3, [pc, #40]	; (80081f8 <UART_SetConfig+0xa08>)
 80081ce:	e00c      	b.n	80081ea <UART_SetConfig+0x9fa>
 80081d0:	4b15      	ldr	r3, [pc, #84]	; (8008228 <UART_SetConfig+0xa38>)
 80081d2:	e00a      	b.n	80081ea <UART_SetConfig+0x9fa>
 80081d4:	4b15      	ldr	r3, [pc, #84]	; (800822c <UART_SetConfig+0xa3c>)
 80081d6:	e008      	b.n	80081ea <UART_SetConfig+0x9fa>
 80081d8:	4b08      	ldr	r3, [pc, #32]	; (80081fc <UART_SetConfig+0xa0c>)
 80081da:	e006      	b.n	80081ea <UART_SetConfig+0x9fa>
 80081dc:	4b14      	ldr	r3, [pc, #80]	; (8008230 <UART_SetConfig+0xa40>)
 80081de:	e004      	b.n	80081ea <UART_SetConfig+0x9fa>
 80081e0:	4b07      	ldr	r3, [pc, #28]	; (8008200 <UART_SetConfig+0xa10>)
 80081e2:	e002      	b.n	80081ea <UART_SetConfig+0x9fa>
 80081e4:	4b07      	ldr	r3, [pc, #28]	; (8008204 <UART_SetConfig+0xa14>)
 80081e6:	e000      	b.n	80081ea <UART_SetConfig+0x9fa>
 80081e8:	4b07      	ldr	r3, [pc, #28]	; (8008208 <UART_SetConfig+0xa18>)
 80081ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80081ec:	e07d      	b.n	80082ea <UART_SetConfig+0xafa>
 80081ee:	bf00      	nop
 80081f0:	58024400 	.word	0x58024400
 80081f4:	03d09000 	.word	0x03d09000
 80081f8:	0003d090 	.word	0x0003d090
 80081fc:	0007a120 	.word	0x0007a120
 8008200:	000f4240 	.word	0x000f4240
 8008204:	001e8480 	.word	0x001e8480
 8008208:	003d0900 	.word	0x003d0900
 800820c:	00516155 	.word	0x00516155
 8008210:	0061a800 	.word	0x0061a800
 8008214:	007a1200 	.word	0x007a1200
 8008218:	00a2c2aa 	.word	0x00a2c2aa
 800821c:	00f42400 	.word	0x00f42400
 8008220:	01e84800 	.word	0x01e84800
 8008224:	0001e848 	.word	0x0001e848
 8008228:	00051615 	.word	0x00051615
 800822c:	00061a80 	.word	0x00061a80
 8008230:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008238:	2b00      	cmp	r3, #0
 800823a:	d04e      	beq.n	80082da <UART_SetConfig+0xaea>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008240:	2b01      	cmp	r3, #1
 8008242:	d047      	beq.n	80082d4 <UART_SetConfig+0xae4>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008248:	2b02      	cmp	r3, #2
 800824a:	d040      	beq.n	80082ce <UART_SetConfig+0xade>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008250:	2b03      	cmp	r3, #3
 8008252:	d039      	beq.n	80082c8 <UART_SetConfig+0xad8>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008258:	2b04      	cmp	r3, #4
 800825a:	d032      	beq.n	80082c2 <UART_SetConfig+0xad2>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008260:	2b05      	cmp	r3, #5
 8008262:	d02b      	beq.n	80082bc <UART_SetConfig+0xacc>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008268:	2b06      	cmp	r3, #6
 800826a:	d024      	beq.n	80082b6 <UART_SetConfig+0xac6>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008270:	2b07      	cmp	r3, #7
 8008272:	d01d      	beq.n	80082b0 <UART_SetConfig+0xac0>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008278:	2b08      	cmp	r3, #8
 800827a:	d016      	beq.n	80082aa <UART_SetConfig+0xaba>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008280:	2b09      	cmp	r3, #9
 8008282:	d00f      	beq.n	80082a4 <UART_SetConfig+0xab4>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008288:	2b0a      	cmp	r3, #10
 800828a:	d008      	beq.n	800829e <UART_SetConfig+0xaae>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008290:	2b0b      	cmp	r3, #11
 8008292:	d101      	bne.n	8008298 <UART_SetConfig+0xaa8>
 8008294:	2380      	movs	r3, #128	; 0x80
 8008296:	e022      	b.n	80082de <UART_SetConfig+0xaee>
 8008298:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800829c:	e01f      	b.n	80082de <UART_SetConfig+0xaee>
 800829e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082a2:	e01c      	b.n	80082de <UART_SetConfig+0xaee>
 80082a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082a8:	e019      	b.n	80082de <UART_SetConfig+0xaee>
 80082aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082ae:	e016      	b.n	80082de <UART_SetConfig+0xaee>
 80082b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80082b4:	e013      	b.n	80082de <UART_SetConfig+0xaee>
 80082b6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80082ba:	e010      	b.n	80082de <UART_SetConfig+0xaee>
 80082bc:	f640 43cc 	movw	r3, #3276	; 0xccc
 80082c0:	e00d      	b.n	80082de <UART_SetConfig+0xaee>
 80082c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082c6:	e00a      	b.n	80082de <UART_SetConfig+0xaee>
 80082c8:	f241 5355 	movw	r3, #5461	; 0x1555
 80082cc:	e007      	b.n	80082de <UART_SetConfig+0xaee>
 80082ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80082d2:	e004      	b.n	80082de <UART_SetConfig+0xaee>
 80082d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80082d8:	e001      	b.n	80082de <UART_SetConfig+0xaee>
 80082da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80082e0:	e003      	b.n	80082ea <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 80082e8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80082ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f001 83e8 	beq.w	8009ac2 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	685a      	ldr	r2, [r3, #4]
 80082f6:	4613      	mov	r3, r2
 80082f8:	005b      	lsls	r3, r3, #1
 80082fa:	4413      	add	r3, r2
 80082fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082fe:	429a      	cmp	r2, r3
 8008300:	d305      	bcc.n	800830e <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800830a:	429a      	cmp	r2, r3
 800830c:	d904      	bls.n	8008318 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008314:	f001 bbd5 	b.w	8009ac2 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8008318:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800831c:	2b08      	cmp	r3, #8
 800831e:	f000 8154 	beq.w	80085ca <UART_SetConfig+0xdda>
 8008322:	2b08      	cmp	r3, #8
 8008324:	dc06      	bgt.n	8008334 <UART_SetConfig+0xb44>
 8008326:	2b02      	cmp	r3, #2
 8008328:	d00f      	beq.n	800834a <UART_SetConfig+0xb5a>
 800832a:	2b04      	cmp	r3, #4
 800832c:	f000 80ac 	beq.w	8008488 <UART_SetConfig+0xc98>
 8008330:	f000 bc30 	b.w	8008b94 <UART_SetConfig+0x13a4>
 8008334:	2b20      	cmp	r3, #32
 8008336:	f000 832d 	beq.w	8008994 <UART_SetConfig+0x11a4>
 800833a:	2b40      	cmp	r3, #64	; 0x40
 800833c:	f000 83a5 	beq.w	8008a8a <UART_SetConfig+0x129a>
 8008340:	2b10      	cmp	r3, #16
 8008342:	f000 81e3 	beq.w	800870c <UART_SetConfig+0xf1c>
 8008346:	f000 bc25 	b.w	8008b94 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800834a:	f7fd fc6f 	bl	8005c2c <HAL_RCCEx_GetD3PCLK1Freq>
 800834e:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008352:	4618      	mov	r0, r3
 8008354:	f04f 0100 	mov.w	r1, #0
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835c:	2b00      	cmp	r3, #0
 800835e:	d067      	beq.n	8008430 <UART_SetConfig+0xc40>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008364:	2b01      	cmp	r3, #1
 8008366:	d05e      	beq.n	8008426 <UART_SetConfig+0xc36>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836c:	2b02      	cmp	r3, #2
 800836e:	d055      	beq.n	800841c <UART_SetConfig+0xc2c>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008374:	2b03      	cmp	r3, #3
 8008376:	d04c      	beq.n	8008412 <UART_SetConfig+0xc22>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837c:	2b04      	cmp	r3, #4
 800837e:	d043      	beq.n	8008408 <UART_SetConfig+0xc18>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008384:	2b05      	cmp	r3, #5
 8008386:	d03a      	beq.n	80083fe <UART_SetConfig+0xc0e>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838c:	2b06      	cmp	r3, #6
 800838e:	d031      	beq.n	80083f4 <UART_SetConfig+0xc04>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008394:	2b07      	cmp	r3, #7
 8008396:	d028      	beq.n	80083ea <UART_SetConfig+0xbfa>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839c:	2b08      	cmp	r3, #8
 800839e:	d01f      	beq.n	80083e0 <UART_SetConfig+0xbf0>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a4:	2b09      	cmp	r3, #9
 80083a6:	d016      	beq.n	80083d6 <UART_SetConfig+0xbe6>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ac:	2b0a      	cmp	r3, #10
 80083ae:	d00d      	beq.n	80083cc <UART_SetConfig+0xbdc>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b4:	2b0b      	cmp	r3, #11
 80083b6:	d104      	bne.n	80083c2 <UART_SetConfig+0xbd2>
 80083b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083bc:	f04f 0400 	mov.w	r4, #0
 80083c0:	e03a      	b.n	8008438 <UART_SetConfig+0xc48>
 80083c2:	f04f 0301 	mov.w	r3, #1
 80083c6:	f04f 0400 	mov.w	r4, #0
 80083ca:	e035      	b.n	8008438 <UART_SetConfig+0xc48>
 80083cc:	f04f 0380 	mov.w	r3, #128	; 0x80
 80083d0:	f04f 0400 	mov.w	r4, #0
 80083d4:	e030      	b.n	8008438 <UART_SetConfig+0xc48>
 80083d6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80083da:	f04f 0400 	mov.w	r4, #0
 80083de:	e02b      	b.n	8008438 <UART_SetConfig+0xc48>
 80083e0:	f04f 0320 	mov.w	r3, #32
 80083e4:	f04f 0400 	mov.w	r4, #0
 80083e8:	e026      	b.n	8008438 <UART_SetConfig+0xc48>
 80083ea:	f04f 0310 	mov.w	r3, #16
 80083ee:	f04f 0400 	mov.w	r4, #0
 80083f2:	e021      	b.n	8008438 <UART_SetConfig+0xc48>
 80083f4:	f04f 030c 	mov.w	r3, #12
 80083f8:	f04f 0400 	mov.w	r4, #0
 80083fc:	e01c      	b.n	8008438 <UART_SetConfig+0xc48>
 80083fe:	f04f 030a 	mov.w	r3, #10
 8008402:	f04f 0400 	mov.w	r4, #0
 8008406:	e017      	b.n	8008438 <UART_SetConfig+0xc48>
 8008408:	f04f 0308 	mov.w	r3, #8
 800840c:	f04f 0400 	mov.w	r4, #0
 8008410:	e012      	b.n	8008438 <UART_SetConfig+0xc48>
 8008412:	f04f 0306 	mov.w	r3, #6
 8008416:	f04f 0400 	mov.w	r4, #0
 800841a:	e00d      	b.n	8008438 <UART_SetConfig+0xc48>
 800841c:	f04f 0304 	mov.w	r3, #4
 8008420:	f04f 0400 	mov.w	r4, #0
 8008424:	e008      	b.n	8008438 <UART_SetConfig+0xc48>
 8008426:	f04f 0302 	mov.w	r3, #2
 800842a:	f04f 0400 	mov.w	r4, #0
 800842e:	e003      	b.n	8008438 <UART_SetConfig+0xc48>
 8008430:	f04f 0301 	mov.w	r3, #1
 8008434:	f04f 0400 	mov.w	r4, #0
 8008438:	461a      	mov	r2, r3
 800843a:	4623      	mov	r3, r4
 800843c:	f7f7 ff54 	bl	80002e8 <__aeabi_uldivmod>
 8008440:	4603      	mov	r3, r0
 8008442:	460c      	mov	r4, r1
 8008444:	4619      	mov	r1, r3
 8008446:	4622      	mov	r2, r4
 8008448:	f04f 0300 	mov.w	r3, #0
 800844c:	f04f 0400 	mov.w	r4, #0
 8008450:	0214      	lsls	r4, r2, #8
 8008452:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008456:	020b      	lsls	r3, r1, #8
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	6852      	ldr	r2, [r2, #4]
 800845c:	0852      	lsrs	r2, r2, #1
 800845e:	4611      	mov	r1, r2
 8008460:	f04f 0200 	mov.w	r2, #0
 8008464:	eb13 0b01 	adds.w	fp, r3, r1
 8008468:	eb44 0c02 	adc.w	ip, r4, r2
 800846c:	4658      	mov	r0, fp
 800846e:	4661      	mov	r1, ip
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	f04f 0400 	mov.w	r4, #0
 8008478:	461a      	mov	r2, r3
 800847a:	4623      	mov	r3, r4
 800847c:	f7f7 ff34 	bl	80002e8 <__aeabi_uldivmod>
 8008480:	4603      	mov	r3, r0
 8008482:	460c      	mov	r4, r1
 8008484:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008486:	e389      	b.n	8008b9c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008488:	f107 0318 	add.w	r3, r7, #24
 800848c:	4618      	mov	r0, r3
 800848e:	f7fd fbe3 	bl	8005c58 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008492:	69fb      	ldr	r3, [r7, #28]
 8008494:	4618      	mov	r0, r3
 8008496:	f04f 0100 	mov.w	r1, #0
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d067      	beq.n	8008572 <UART_SetConfig+0xd82>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d05e      	beq.n	8008568 <UART_SetConfig+0xd78>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ae:	2b02      	cmp	r3, #2
 80084b0:	d055      	beq.n	800855e <UART_SetConfig+0xd6e>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b6:	2b03      	cmp	r3, #3
 80084b8:	d04c      	beq.n	8008554 <UART_SetConfig+0xd64>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084be:	2b04      	cmp	r3, #4
 80084c0:	d043      	beq.n	800854a <UART_SetConfig+0xd5a>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c6:	2b05      	cmp	r3, #5
 80084c8:	d03a      	beq.n	8008540 <UART_SetConfig+0xd50>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ce:	2b06      	cmp	r3, #6
 80084d0:	d031      	beq.n	8008536 <UART_SetConfig+0xd46>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d6:	2b07      	cmp	r3, #7
 80084d8:	d028      	beq.n	800852c <UART_SetConfig+0xd3c>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084de:	2b08      	cmp	r3, #8
 80084e0:	d01f      	beq.n	8008522 <UART_SetConfig+0xd32>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e6:	2b09      	cmp	r3, #9
 80084e8:	d016      	beq.n	8008518 <UART_SetConfig+0xd28>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ee:	2b0a      	cmp	r3, #10
 80084f0:	d00d      	beq.n	800850e <UART_SetConfig+0xd1e>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f6:	2b0b      	cmp	r3, #11
 80084f8:	d104      	bne.n	8008504 <UART_SetConfig+0xd14>
 80084fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80084fe:	f04f 0400 	mov.w	r4, #0
 8008502:	e03a      	b.n	800857a <UART_SetConfig+0xd8a>
 8008504:	f04f 0301 	mov.w	r3, #1
 8008508:	f04f 0400 	mov.w	r4, #0
 800850c:	e035      	b.n	800857a <UART_SetConfig+0xd8a>
 800850e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008512:	f04f 0400 	mov.w	r4, #0
 8008516:	e030      	b.n	800857a <UART_SetConfig+0xd8a>
 8008518:	f04f 0340 	mov.w	r3, #64	; 0x40
 800851c:	f04f 0400 	mov.w	r4, #0
 8008520:	e02b      	b.n	800857a <UART_SetConfig+0xd8a>
 8008522:	f04f 0320 	mov.w	r3, #32
 8008526:	f04f 0400 	mov.w	r4, #0
 800852a:	e026      	b.n	800857a <UART_SetConfig+0xd8a>
 800852c:	f04f 0310 	mov.w	r3, #16
 8008530:	f04f 0400 	mov.w	r4, #0
 8008534:	e021      	b.n	800857a <UART_SetConfig+0xd8a>
 8008536:	f04f 030c 	mov.w	r3, #12
 800853a:	f04f 0400 	mov.w	r4, #0
 800853e:	e01c      	b.n	800857a <UART_SetConfig+0xd8a>
 8008540:	f04f 030a 	mov.w	r3, #10
 8008544:	f04f 0400 	mov.w	r4, #0
 8008548:	e017      	b.n	800857a <UART_SetConfig+0xd8a>
 800854a:	f04f 0308 	mov.w	r3, #8
 800854e:	f04f 0400 	mov.w	r4, #0
 8008552:	e012      	b.n	800857a <UART_SetConfig+0xd8a>
 8008554:	f04f 0306 	mov.w	r3, #6
 8008558:	f04f 0400 	mov.w	r4, #0
 800855c:	e00d      	b.n	800857a <UART_SetConfig+0xd8a>
 800855e:	f04f 0304 	mov.w	r3, #4
 8008562:	f04f 0400 	mov.w	r4, #0
 8008566:	e008      	b.n	800857a <UART_SetConfig+0xd8a>
 8008568:	f04f 0302 	mov.w	r3, #2
 800856c:	f04f 0400 	mov.w	r4, #0
 8008570:	e003      	b.n	800857a <UART_SetConfig+0xd8a>
 8008572:	f04f 0301 	mov.w	r3, #1
 8008576:	f04f 0400 	mov.w	r4, #0
 800857a:	461a      	mov	r2, r3
 800857c:	4623      	mov	r3, r4
 800857e:	f7f7 feb3 	bl	80002e8 <__aeabi_uldivmod>
 8008582:	4603      	mov	r3, r0
 8008584:	460c      	mov	r4, r1
 8008586:	4619      	mov	r1, r3
 8008588:	4622      	mov	r2, r4
 800858a:	f04f 0300 	mov.w	r3, #0
 800858e:	f04f 0400 	mov.w	r4, #0
 8008592:	0214      	lsls	r4, r2, #8
 8008594:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008598:	020b      	lsls	r3, r1, #8
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	6852      	ldr	r2, [r2, #4]
 800859e:	0852      	lsrs	r2, r2, #1
 80085a0:	4611      	mov	r1, r2
 80085a2:	f04f 0200 	mov.w	r2, #0
 80085a6:	eb13 0b01 	adds.w	fp, r3, r1
 80085aa:	eb44 0c02 	adc.w	ip, r4, r2
 80085ae:	4658      	mov	r0, fp
 80085b0:	4661      	mov	r1, ip
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	f04f 0400 	mov.w	r4, #0
 80085ba:	461a      	mov	r2, r3
 80085bc:	4623      	mov	r3, r4
 80085be:	f7f7 fe93 	bl	80002e8 <__aeabi_uldivmod>
 80085c2:	4603      	mov	r3, r0
 80085c4:	460c      	mov	r4, r1
 80085c6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80085c8:	e2e8      	b.n	8008b9c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085ca:	f107 030c 	add.w	r3, r7, #12
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7fd fc8e 	bl	8005ef0 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	4618      	mov	r0, r3
 80085d8:	f04f 0100 	mov.w	r1, #0
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d067      	beq.n	80086b4 <UART_SetConfig+0xec4>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d05e      	beq.n	80086aa <UART_SetConfig+0xeba>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f0:	2b02      	cmp	r3, #2
 80085f2:	d055      	beq.n	80086a0 <UART_SetConfig+0xeb0>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f8:	2b03      	cmp	r3, #3
 80085fa:	d04c      	beq.n	8008696 <UART_SetConfig+0xea6>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008600:	2b04      	cmp	r3, #4
 8008602:	d043      	beq.n	800868c <UART_SetConfig+0xe9c>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008608:	2b05      	cmp	r3, #5
 800860a:	d03a      	beq.n	8008682 <UART_SetConfig+0xe92>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008610:	2b06      	cmp	r3, #6
 8008612:	d031      	beq.n	8008678 <UART_SetConfig+0xe88>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008618:	2b07      	cmp	r3, #7
 800861a:	d028      	beq.n	800866e <UART_SetConfig+0xe7e>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008620:	2b08      	cmp	r3, #8
 8008622:	d01f      	beq.n	8008664 <UART_SetConfig+0xe74>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008628:	2b09      	cmp	r3, #9
 800862a:	d016      	beq.n	800865a <UART_SetConfig+0xe6a>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008630:	2b0a      	cmp	r3, #10
 8008632:	d00d      	beq.n	8008650 <UART_SetConfig+0xe60>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008638:	2b0b      	cmp	r3, #11
 800863a:	d104      	bne.n	8008646 <UART_SetConfig+0xe56>
 800863c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008640:	f04f 0400 	mov.w	r4, #0
 8008644:	e03a      	b.n	80086bc <UART_SetConfig+0xecc>
 8008646:	f04f 0301 	mov.w	r3, #1
 800864a:	f04f 0400 	mov.w	r4, #0
 800864e:	e035      	b.n	80086bc <UART_SetConfig+0xecc>
 8008650:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008654:	f04f 0400 	mov.w	r4, #0
 8008658:	e030      	b.n	80086bc <UART_SetConfig+0xecc>
 800865a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800865e:	f04f 0400 	mov.w	r4, #0
 8008662:	e02b      	b.n	80086bc <UART_SetConfig+0xecc>
 8008664:	f04f 0320 	mov.w	r3, #32
 8008668:	f04f 0400 	mov.w	r4, #0
 800866c:	e026      	b.n	80086bc <UART_SetConfig+0xecc>
 800866e:	f04f 0310 	mov.w	r3, #16
 8008672:	f04f 0400 	mov.w	r4, #0
 8008676:	e021      	b.n	80086bc <UART_SetConfig+0xecc>
 8008678:	f04f 030c 	mov.w	r3, #12
 800867c:	f04f 0400 	mov.w	r4, #0
 8008680:	e01c      	b.n	80086bc <UART_SetConfig+0xecc>
 8008682:	f04f 030a 	mov.w	r3, #10
 8008686:	f04f 0400 	mov.w	r4, #0
 800868a:	e017      	b.n	80086bc <UART_SetConfig+0xecc>
 800868c:	f04f 0308 	mov.w	r3, #8
 8008690:	f04f 0400 	mov.w	r4, #0
 8008694:	e012      	b.n	80086bc <UART_SetConfig+0xecc>
 8008696:	f04f 0306 	mov.w	r3, #6
 800869a:	f04f 0400 	mov.w	r4, #0
 800869e:	e00d      	b.n	80086bc <UART_SetConfig+0xecc>
 80086a0:	f04f 0304 	mov.w	r3, #4
 80086a4:	f04f 0400 	mov.w	r4, #0
 80086a8:	e008      	b.n	80086bc <UART_SetConfig+0xecc>
 80086aa:	f04f 0302 	mov.w	r3, #2
 80086ae:	f04f 0400 	mov.w	r4, #0
 80086b2:	e003      	b.n	80086bc <UART_SetConfig+0xecc>
 80086b4:	f04f 0301 	mov.w	r3, #1
 80086b8:	f04f 0400 	mov.w	r4, #0
 80086bc:	461a      	mov	r2, r3
 80086be:	4623      	mov	r3, r4
 80086c0:	f7f7 fe12 	bl	80002e8 <__aeabi_uldivmod>
 80086c4:	4603      	mov	r3, r0
 80086c6:	460c      	mov	r4, r1
 80086c8:	4619      	mov	r1, r3
 80086ca:	4622      	mov	r2, r4
 80086cc:	f04f 0300 	mov.w	r3, #0
 80086d0:	f04f 0400 	mov.w	r4, #0
 80086d4:	0214      	lsls	r4, r2, #8
 80086d6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80086da:	020b      	lsls	r3, r1, #8
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	6852      	ldr	r2, [r2, #4]
 80086e0:	0852      	lsrs	r2, r2, #1
 80086e2:	4611      	mov	r1, r2
 80086e4:	f04f 0200 	mov.w	r2, #0
 80086e8:	eb13 0b01 	adds.w	fp, r3, r1
 80086ec:	eb44 0c02 	adc.w	ip, r4, r2
 80086f0:	4658      	mov	r0, fp
 80086f2:	4661      	mov	r1, ip
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	f04f 0400 	mov.w	r4, #0
 80086fc:	461a      	mov	r2, r3
 80086fe:	4623      	mov	r3, r4
 8008700:	f7f7 fdf2 	bl	80002e8 <__aeabi_uldivmod>
 8008704:	4603      	mov	r3, r0
 8008706:	460c      	mov	r4, r1
 8008708:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800870a:	e247      	b.n	8008b9c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800870c:	4b96      	ldr	r3, [pc, #600]	; (8008968 <UART_SetConfig+0x1178>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f003 0320 	and.w	r3, r3, #32
 8008714:	2b00      	cmp	r3, #0
 8008716:	f000 80a3 	beq.w	8008860 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800871a:	4b93      	ldr	r3, [pc, #588]	; (8008968 <UART_SetConfig+0x1178>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	08db      	lsrs	r3, r3, #3
 8008720:	f003 0303 	and.w	r3, r3, #3
 8008724:	4a91      	ldr	r2, [pc, #580]	; (800896c <UART_SetConfig+0x117c>)
 8008726:	fa22 f303 	lsr.w	r3, r2, r3
 800872a:	4618      	mov	r0, r3
 800872c:	f04f 0100 	mov.w	r1, #0
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008734:	2b00      	cmp	r3, #0
 8008736:	d067      	beq.n	8008808 <UART_SetConfig+0x1018>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873c:	2b01      	cmp	r3, #1
 800873e:	d05e      	beq.n	80087fe <UART_SetConfig+0x100e>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008744:	2b02      	cmp	r3, #2
 8008746:	d055      	beq.n	80087f4 <UART_SetConfig+0x1004>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800874c:	2b03      	cmp	r3, #3
 800874e:	d04c      	beq.n	80087ea <UART_SetConfig+0xffa>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008754:	2b04      	cmp	r3, #4
 8008756:	d043      	beq.n	80087e0 <UART_SetConfig+0xff0>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875c:	2b05      	cmp	r3, #5
 800875e:	d03a      	beq.n	80087d6 <UART_SetConfig+0xfe6>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008764:	2b06      	cmp	r3, #6
 8008766:	d031      	beq.n	80087cc <UART_SetConfig+0xfdc>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876c:	2b07      	cmp	r3, #7
 800876e:	d028      	beq.n	80087c2 <UART_SetConfig+0xfd2>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008774:	2b08      	cmp	r3, #8
 8008776:	d01f      	beq.n	80087b8 <UART_SetConfig+0xfc8>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877c:	2b09      	cmp	r3, #9
 800877e:	d016      	beq.n	80087ae <UART_SetConfig+0xfbe>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008784:	2b0a      	cmp	r3, #10
 8008786:	d00d      	beq.n	80087a4 <UART_SetConfig+0xfb4>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878c:	2b0b      	cmp	r3, #11
 800878e:	d104      	bne.n	800879a <UART_SetConfig+0xfaa>
 8008790:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008794:	f04f 0400 	mov.w	r4, #0
 8008798:	e03a      	b.n	8008810 <UART_SetConfig+0x1020>
 800879a:	f04f 0301 	mov.w	r3, #1
 800879e:	f04f 0400 	mov.w	r4, #0
 80087a2:	e035      	b.n	8008810 <UART_SetConfig+0x1020>
 80087a4:	f04f 0380 	mov.w	r3, #128	; 0x80
 80087a8:	f04f 0400 	mov.w	r4, #0
 80087ac:	e030      	b.n	8008810 <UART_SetConfig+0x1020>
 80087ae:	f04f 0340 	mov.w	r3, #64	; 0x40
 80087b2:	f04f 0400 	mov.w	r4, #0
 80087b6:	e02b      	b.n	8008810 <UART_SetConfig+0x1020>
 80087b8:	f04f 0320 	mov.w	r3, #32
 80087bc:	f04f 0400 	mov.w	r4, #0
 80087c0:	e026      	b.n	8008810 <UART_SetConfig+0x1020>
 80087c2:	f04f 0310 	mov.w	r3, #16
 80087c6:	f04f 0400 	mov.w	r4, #0
 80087ca:	e021      	b.n	8008810 <UART_SetConfig+0x1020>
 80087cc:	f04f 030c 	mov.w	r3, #12
 80087d0:	f04f 0400 	mov.w	r4, #0
 80087d4:	e01c      	b.n	8008810 <UART_SetConfig+0x1020>
 80087d6:	f04f 030a 	mov.w	r3, #10
 80087da:	f04f 0400 	mov.w	r4, #0
 80087de:	e017      	b.n	8008810 <UART_SetConfig+0x1020>
 80087e0:	f04f 0308 	mov.w	r3, #8
 80087e4:	f04f 0400 	mov.w	r4, #0
 80087e8:	e012      	b.n	8008810 <UART_SetConfig+0x1020>
 80087ea:	f04f 0306 	mov.w	r3, #6
 80087ee:	f04f 0400 	mov.w	r4, #0
 80087f2:	e00d      	b.n	8008810 <UART_SetConfig+0x1020>
 80087f4:	f04f 0304 	mov.w	r3, #4
 80087f8:	f04f 0400 	mov.w	r4, #0
 80087fc:	e008      	b.n	8008810 <UART_SetConfig+0x1020>
 80087fe:	f04f 0302 	mov.w	r3, #2
 8008802:	f04f 0400 	mov.w	r4, #0
 8008806:	e003      	b.n	8008810 <UART_SetConfig+0x1020>
 8008808:	f04f 0301 	mov.w	r3, #1
 800880c:	f04f 0400 	mov.w	r4, #0
 8008810:	461a      	mov	r2, r3
 8008812:	4623      	mov	r3, r4
 8008814:	f7f7 fd68 	bl	80002e8 <__aeabi_uldivmod>
 8008818:	4603      	mov	r3, r0
 800881a:	460c      	mov	r4, r1
 800881c:	4619      	mov	r1, r3
 800881e:	4622      	mov	r2, r4
 8008820:	f04f 0300 	mov.w	r3, #0
 8008824:	f04f 0400 	mov.w	r4, #0
 8008828:	0214      	lsls	r4, r2, #8
 800882a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800882e:	020b      	lsls	r3, r1, #8
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	6852      	ldr	r2, [r2, #4]
 8008834:	0852      	lsrs	r2, r2, #1
 8008836:	4611      	mov	r1, r2
 8008838:	f04f 0200 	mov.w	r2, #0
 800883c:	eb13 0b01 	adds.w	fp, r3, r1
 8008840:	eb44 0c02 	adc.w	ip, r4, r2
 8008844:	4658      	mov	r0, fp
 8008846:	4661      	mov	r1, ip
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	f04f 0400 	mov.w	r4, #0
 8008850:	461a      	mov	r2, r3
 8008852:	4623      	mov	r3, r4
 8008854:	f7f7 fd48 	bl	80002e8 <__aeabi_uldivmod>
 8008858:	4603      	mov	r3, r0
 800885a:	460c      	mov	r4, r1
 800885c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800885e:	e19d      	b.n	8008b9c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008864:	2b00      	cmp	r3, #0
 8008866:	d05b      	beq.n	8008920 <UART_SetConfig+0x1130>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886c:	2b01      	cmp	r3, #1
 800886e:	d053      	beq.n	8008918 <UART_SetConfig+0x1128>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008874:	2b02      	cmp	r3, #2
 8008876:	d04b      	beq.n	8008910 <UART_SetConfig+0x1120>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887c:	2b03      	cmp	r3, #3
 800887e:	d043      	beq.n	8008908 <UART_SetConfig+0x1118>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008884:	2b04      	cmp	r3, #4
 8008886:	d03b      	beq.n	8008900 <UART_SetConfig+0x1110>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888c:	2b05      	cmp	r3, #5
 800888e:	d033      	beq.n	80088f8 <UART_SetConfig+0x1108>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008894:	2b06      	cmp	r3, #6
 8008896:	d02b      	beq.n	80088f0 <UART_SetConfig+0x1100>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889c:	2b07      	cmp	r3, #7
 800889e:	d023      	beq.n	80088e8 <UART_SetConfig+0x10f8>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a4:	2b08      	cmp	r3, #8
 80088a6:	d01b      	beq.n	80088e0 <UART_SetConfig+0x10f0>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ac:	2b09      	cmp	r3, #9
 80088ae:	d013      	beq.n	80088d8 <UART_SetConfig+0x10e8>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b4:	2b0a      	cmp	r3, #10
 80088b6:	d00b      	beq.n	80088d0 <UART_SetConfig+0x10e0>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088bc:	2b0b      	cmp	r3, #11
 80088be:	d103      	bne.n	80088c8 <UART_SetConfig+0x10d8>
 80088c0:	4b2a      	ldr	r3, [pc, #168]	; (800896c <UART_SetConfig+0x117c>)
 80088c2:	f04f 0400 	mov.w	r4, #0
 80088c6:	e02e      	b.n	8008926 <UART_SetConfig+0x1136>
 80088c8:	4b29      	ldr	r3, [pc, #164]	; (8008970 <UART_SetConfig+0x1180>)
 80088ca:	f04f 0403 	mov.w	r4, #3
 80088ce:	e02a      	b.n	8008926 <UART_SetConfig+0x1136>
 80088d0:	4b28      	ldr	r3, [pc, #160]	; (8008974 <UART_SetConfig+0x1184>)
 80088d2:	f04f 0400 	mov.w	r4, #0
 80088d6:	e026      	b.n	8008926 <UART_SetConfig+0x1136>
 80088d8:	4b27      	ldr	r3, [pc, #156]	; (8008978 <UART_SetConfig+0x1188>)
 80088da:	f04f 0400 	mov.w	r4, #0
 80088de:	e022      	b.n	8008926 <UART_SetConfig+0x1136>
 80088e0:	4b26      	ldr	r3, [pc, #152]	; (800897c <UART_SetConfig+0x118c>)
 80088e2:	f04f 0400 	mov.w	r4, #0
 80088e6:	e01e      	b.n	8008926 <UART_SetConfig+0x1136>
 80088e8:	4b25      	ldr	r3, [pc, #148]	; (8008980 <UART_SetConfig+0x1190>)
 80088ea:	f04f 0400 	mov.w	r4, #0
 80088ee:	e01a      	b.n	8008926 <UART_SetConfig+0x1136>
 80088f0:	a419      	add	r4, pc, #100	; (adr r4, 8008958 <UART_SetConfig+0x1168>)
 80088f2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80088f6:	e016      	b.n	8008926 <UART_SetConfig+0x1136>
 80088f8:	4b22      	ldr	r3, [pc, #136]	; (8008984 <UART_SetConfig+0x1194>)
 80088fa:	f04f 0400 	mov.w	r4, #0
 80088fe:	e012      	b.n	8008926 <UART_SetConfig+0x1136>
 8008900:	4b21      	ldr	r3, [pc, #132]	; (8008988 <UART_SetConfig+0x1198>)
 8008902:	f04f 0400 	mov.w	r4, #0
 8008906:	e00e      	b.n	8008926 <UART_SetConfig+0x1136>
 8008908:	a415      	add	r4, pc, #84	; (adr r4, 8008960 <UART_SetConfig+0x1170>)
 800890a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800890e:	e00a      	b.n	8008926 <UART_SetConfig+0x1136>
 8008910:	4b1e      	ldr	r3, [pc, #120]	; (800898c <UART_SetConfig+0x119c>)
 8008912:	f04f 0400 	mov.w	r4, #0
 8008916:	e006      	b.n	8008926 <UART_SetConfig+0x1136>
 8008918:	4b1d      	ldr	r3, [pc, #116]	; (8008990 <UART_SetConfig+0x11a0>)
 800891a:	f04f 0401 	mov.w	r4, #1
 800891e:	e002      	b.n	8008926 <UART_SetConfig+0x1136>
 8008920:	4b13      	ldr	r3, [pc, #76]	; (8008970 <UART_SetConfig+0x1180>)
 8008922:	f04f 0403 	mov.w	r4, #3
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	6852      	ldr	r2, [r2, #4]
 800892a:	0852      	lsrs	r2, r2, #1
 800892c:	4611      	mov	r1, r2
 800892e:	f04f 0200 	mov.w	r2, #0
 8008932:	eb13 0b01 	adds.w	fp, r3, r1
 8008936:	eb44 0c02 	adc.w	ip, r4, r2
 800893a:	4658      	mov	r0, fp
 800893c:	4661      	mov	r1, ip
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	f04f 0400 	mov.w	r4, #0
 8008946:	461a      	mov	r2, r3
 8008948:	4623      	mov	r3, r4
 800894a:	f7f7 fccd 	bl	80002e8 <__aeabi_uldivmod>
 800894e:	4603      	mov	r3, r0
 8008950:	460c      	mov	r4, r1
 8008952:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008954:	e122      	b.n	8008b9c <UART_SetConfig+0x13ac>
 8008956:	bf00      	nop
 8008958:	51615500 	.word	0x51615500
 800895c:	00000000 	.word	0x00000000
 8008960:	a2c2aa00 	.word	0xa2c2aa00
 8008964:	00000000 	.word	0x00000000
 8008968:	58024400 	.word	0x58024400
 800896c:	03d09000 	.word	0x03d09000
 8008970:	d0900000 	.word	0xd0900000
 8008974:	07a12000 	.word	0x07a12000
 8008978:	0f424000 	.word	0x0f424000
 800897c:	1e848000 	.word	0x1e848000
 8008980:	3d090000 	.word	0x3d090000
 8008984:	61a80000 	.word	0x61a80000
 8008988:	7a120000 	.word	0x7a120000
 800898c:	f4240000 	.word	0xf4240000
 8008990:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008998:	2b00      	cmp	r3, #0
 800899a:	d05b      	beq.n	8008a54 <UART_SetConfig+0x1264>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d053      	beq.n	8008a4c <UART_SetConfig+0x125c>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a8:	2b02      	cmp	r3, #2
 80089aa:	d04b      	beq.n	8008a44 <UART_SetConfig+0x1254>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b0:	2b03      	cmp	r3, #3
 80089b2:	d043      	beq.n	8008a3c <UART_SetConfig+0x124c>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b8:	2b04      	cmp	r3, #4
 80089ba:	d03b      	beq.n	8008a34 <UART_SetConfig+0x1244>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c0:	2b05      	cmp	r3, #5
 80089c2:	d033      	beq.n	8008a2c <UART_SetConfig+0x123c>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c8:	2b06      	cmp	r3, #6
 80089ca:	d02b      	beq.n	8008a24 <UART_SetConfig+0x1234>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d0:	2b07      	cmp	r3, #7
 80089d2:	d023      	beq.n	8008a1c <UART_SetConfig+0x122c>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d8:	2b08      	cmp	r3, #8
 80089da:	d01b      	beq.n	8008a14 <UART_SetConfig+0x1224>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e0:	2b09      	cmp	r3, #9
 80089e2:	d013      	beq.n	8008a0c <UART_SetConfig+0x121c>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e8:	2b0a      	cmp	r3, #10
 80089ea:	d00b      	beq.n	8008a04 <UART_SetConfig+0x1214>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f0:	2b0b      	cmp	r3, #11
 80089f2:	d103      	bne.n	80089fc <UART_SetConfig+0x120c>
 80089f4:	4bc0      	ldr	r3, [pc, #768]	; (8008cf8 <UART_SetConfig+0x1508>)
 80089f6:	f04f 0400 	mov.w	r4, #0
 80089fa:	e02e      	b.n	8008a5a <UART_SetConfig+0x126a>
 80089fc:	4bbf      	ldr	r3, [pc, #764]	; (8008cfc <UART_SetConfig+0x150c>)
 80089fe:	f04f 0400 	mov.w	r4, #0
 8008a02:	e02a      	b.n	8008a5a <UART_SetConfig+0x126a>
 8008a04:	4bbe      	ldr	r3, [pc, #760]	; (8008d00 <UART_SetConfig+0x1510>)
 8008a06:	f04f 0400 	mov.w	r4, #0
 8008a0a:	e026      	b.n	8008a5a <UART_SetConfig+0x126a>
 8008a0c:	4bbd      	ldr	r3, [pc, #756]	; (8008d04 <UART_SetConfig+0x1514>)
 8008a0e:	f04f 0400 	mov.w	r4, #0
 8008a12:	e022      	b.n	8008a5a <UART_SetConfig+0x126a>
 8008a14:	4bbc      	ldr	r3, [pc, #752]	; (8008d08 <UART_SetConfig+0x1518>)
 8008a16:	f04f 0400 	mov.w	r4, #0
 8008a1a:	e01e      	b.n	8008a5a <UART_SetConfig+0x126a>
 8008a1c:	4bbb      	ldr	r3, [pc, #748]	; (8008d0c <UART_SetConfig+0x151c>)
 8008a1e:	f04f 0400 	mov.w	r4, #0
 8008a22:	e01a      	b.n	8008a5a <UART_SetConfig+0x126a>
 8008a24:	a4b0      	add	r4, pc, #704	; (adr r4, 8008ce8 <UART_SetConfig+0x14f8>)
 8008a26:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008a2a:	e016      	b.n	8008a5a <UART_SetConfig+0x126a>
 8008a2c:	4bb8      	ldr	r3, [pc, #736]	; (8008d10 <UART_SetConfig+0x1520>)
 8008a2e:	f04f 0400 	mov.w	r4, #0
 8008a32:	e012      	b.n	8008a5a <UART_SetConfig+0x126a>
 8008a34:	4bb7      	ldr	r3, [pc, #732]	; (8008d14 <UART_SetConfig+0x1524>)
 8008a36:	f04f 0400 	mov.w	r4, #0
 8008a3a:	e00e      	b.n	8008a5a <UART_SetConfig+0x126a>
 8008a3c:	a4ac      	add	r4, pc, #688	; (adr r4, 8008cf0 <UART_SetConfig+0x1500>)
 8008a3e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008a42:	e00a      	b.n	8008a5a <UART_SetConfig+0x126a>
 8008a44:	4bb4      	ldr	r3, [pc, #720]	; (8008d18 <UART_SetConfig+0x1528>)
 8008a46:	f04f 0400 	mov.w	r4, #0
 8008a4a:	e006      	b.n	8008a5a <UART_SetConfig+0x126a>
 8008a4c:	4bb3      	ldr	r3, [pc, #716]	; (8008d1c <UART_SetConfig+0x152c>)
 8008a4e:	f04f 0400 	mov.w	r4, #0
 8008a52:	e002      	b.n	8008a5a <UART_SetConfig+0x126a>
 8008a54:	4ba9      	ldr	r3, [pc, #676]	; (8008cfc <UART_SetConfig+0x150c>)
 8008a56:	f04f 0400 	mov.w	r4, #0
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	6852      	ldr	r2, [r2, #4]
 8008a5e:	0852      	lsrs	r2, r2, #1
 8008a60:	4611      	mov	r1, r2
 8008a62:	f04f 0200 	mov.w	r2, #0
 8008a66:	eb13 0b01 	adds.w	fp, r3, r1
 8008a6a:	eb44 0c02 	adc.w	ip, r4, r2
 8008a6e:	4658      	mov	r0, fp
 8008a70:	4661      	mov	r1, ip
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	f04f 0400 	mov.w	r4, #0
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	4623      	mov	r3, r4
 8008a7e:	f7f7 fc33 	bl	80002e8 <__aeabi_uldivmod>
 8008a82:	4603      	mov	r3, r0
 8008a84:	460c      	mov	r4, r1
 8008a86:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008a88:	e088      	b.n	8008b9c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d064      	beq.n	8008b5c <UART_SetConfig+0x136c>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d05b      	beq.n	8008b52 <UART_SetConfig+0x1362>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	d052      	beq.n	8008b48 <UART_SetConfig+0x1358>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa6:	2b03      	cmp	r3, #3
 8008aa8:	d04a      	beq.n	8008b40 <UART_SetConfig+0x1350>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aae:	2b04      	cmp	r3, #4
 8008ab0:	d041      	beq.n	8008b36 <UART_SetConfig+0x1346>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab6:	2b05      	cmp	r3, #5
 8008ab8:	d039      	beq.n	8008b2e <UART_SetConfig+0x133e>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008abe:	2b06      	cmp	r3, #6
 8008ac0:	d031      	beq.n	8008b26 <UART_SetConfig+0x1336>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac6:	2b07      	cmp	r3, #7
 8008ac8:	d028      	beq.n	8008b1c <UART_SetConfig+0x132c>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ace:	2b08      	cmp	r3, #8
 8008ad0:	d01f      	beq.n	8008b12 <UART_SetConfig+0x1322>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad6:	2b09      	cmp	r3, #9
 8008ad8:	d016      	beq.n	8008b08 <UART_SetConfig+0x1318>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ade:	2b0a      	cmp	r3, #10
 8008ae0:	d00d      	beq.n	8008afe <UART_SetConfig+0x130e>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae6:	2b0b      	cmp	r3, #11
 8008ae8:	d104      	bne.n	8008af4 <UART_SetConfig+0x1304>
 8008aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008aee:	f04f 0400 	mov.w	r4, #0
 8008af2:	e037      	b.n	8008b64 <UART_SetConfig+0x1374>
 8008af4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008af8:	f04f 0400 	mov.w	r4, #0
 8008afc:	e032      	b.n	8008b64 <UART_SetConfig+0x1374>
 8008afe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008b02:	f04f 0400 	mov.w	r4, #0
 8008b06:	e02d      	b.n	8008b64 <UART_SetConfig+0x1374>
 8008b08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008b0c:	f04f 0400 	mov.w	r4, #0
 8008b10:	e028      	b.n	8008b64 <UART_SetConfig+0x1374>
 8008b12:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008b16:	f04f 0400 	mov.w	r4, #0
 8008b1a:	e023      	b.n	8008b64 <UART_SetConfig+0x1374>
 8008b1c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008b20:	f04f 0400 	mov.w	r4, #0
 8008b24:	e01e      	b.n	8008b64 <UART_SetConfig+0x1374>
 8008b26:	4b7e      	ldr	r3, [pc, #504]	; (8008d20 <UART_SetConfig+0x1530>)
 8008b28:	f04f 0400 	mov.w	r4, #0
 8008b2c:	e01a      	b.n	8008b64 <UART_SetConfig+0x1374>
 8008b2e:	4b7d      	ldr	r3, [pc, #500]	; (8008d24 <UART_SetConfig+0x1534>)
 8008b30:	f04f 0400 	mov.w	r4, #0
 8008b34:	e016      	b.n	8008b64 <UART_SetConfig+0x1374>
 8008b36:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008b3a:	f04f 0400 	mov.w	r4, #0
 8008b3e:	e011      	b.n	8008b64 <UART_SetConfig+0x1374>
 8008b40:	4b79      	ldr	r3, [pc, #484]	; (8008d28 <UART_SetConfig+0x1538>)
 8008b42:	f04f 0400 	mov.w	r4, #0
 8008b46:	e00d      	b.n	8008b64 <UART_SetConfig+0x1374>
 8008b48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008b4c:	f04f 0400 	mov.w	r4, #0
 8008b50:	e008      	b.n	8008b64 <UART_SetConfig+0x1374>
 8008b52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008b56:	f04f 0400 	mov.w	r4, #0
 8008b5a:	e003      	b.n	8008b64 <UART_SetConfig+0x1374>
 8008b5c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008b60:	f04f 0400 	mov.w	r4, #0
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	6852      	ldr	r2, [r2, #4]
 8008b68:	0852      	lsrs	r2, r2, #1
 8008b6a:	4611      	mov	r1, r2
 8008b6c:	f04f 0200 	mov.w	r2, #0
 8008b70:	eb13 0b01 	adds.w	fp, r3, r1
 8008b74:	eb44 0c02 	adc.w	ip, r4, r2
 8008b78:	4658      	mov	r0, fp
 8008b7a:	4661      	mov	r1, ip
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	f04f 0400 	mov.w	r4, #0
 8008b84:	461a      	mov	r2, r3
 8008b86:	4623      	mov	r3, r4
 8008b88:	f7f7 fbae 	bl	80002e8 <__aeabi_uldivmod>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	460c      	mov	r4, r1
 8008b90:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008b92:	e003      	b.n	8008b9c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 8008b9a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ba2:	d309      	bcc.n	8008bb8 <UART_SetConfig+0x13c8>
 8008ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ba6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008baa:	d205      	bcs.n	8008bb8 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bb2:	60da      	str	r2, [r3, #12]
 8008bb4:	f000 bf85 	b.w	8009ac2 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bbe:	f000 bf80 	b.w	8009ac2 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	69db      	ldr	r3, [r3, #28]
 8008bc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bca:	f040 83da 	bne.w	8009382 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 8008bce:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008bd2:	2b40      	cmp	r3, #64	; 0x40
 8008bd4:	f200 83b3 	bhi.w	800933e <UART_SetConfig+0x1b4e>
 8008bd8:	a201      	add	r2, pc, #4	; (adr r2, 8008be0 <UART_SetConfig+0x13f0>)
 8008bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bde:	bf00      	nop
 8008be0:	08008d2d 	.word	0x08008d2d
 8008be4:	08008de5 	.word	0x08008de5
 8008be8:	0800933f 	.word	0x0800933f
 8008bec:	0800933f 	.word	0x0800933f
 8008bf0:	08008e9d 	.word	0x08008e9d
 8008bf4:	0800933f 	.word	0x0800933f
 8008bf8:	0800933f 	.word	0x0800933f
 8008bfc:	0800933f 	.word	0x0800933f
 8008c00:	08008f59 	.word	0x08008f59
 8008c04:	0800933f 	.word	0x0800933f
 8008c08:	0800933f 	.word	0x0800933f
 8008c0c:	0800933f 	.word	0x0800933f
 8008c10:	0800933f 	.word	0x0800933f
 8008c14:	0800933f 	.word	0x0800933f
 8008c18:	0800933f 	.word	0x0800933f
 8008c1c:	0800933f 	.word	0x0800933f
 8008c20:	08009015 	.word	0x08009015
 8008c24:	0800933f 	.word	0x0800933f
 8008c28:	0800933f 	.word	0x0800933f
 8008c2c:	0800933f 	.word	0x0800933f
 8008c30:	0800933f 	.word	0x0800933f
 8008c34:	0800933f 	.word	0x0800933f
 8008c38:	0800933f 	.word	0x0800933f
 8008c3c:	0800933f 	.word	0x0800933f
 8008c40:	0800933f 	.word	0x0800933f
 8008c44:	0800933f 	.word	0x0800933f
 8008c48:	0800933f 	.word	0x0800933f
 8008c4c:	0800933f 	.word	0x0800933f
 8008c50:	0800933f 	.word	0x0800933f
 8008c54:	0800933f 	.word	0x0800933f
 8008c58:	0800933f 	.word	0x0800933f
 8008c5c:	0800933f 	.word	0x0800933f
 8008c60:	08009187 	.word	0x08009187
 8008c64:	0800933f 	.word	0x0800933f
 8008c68:	0800933f 	.word	0x0800933f
 8008c6c:	0800933f 	.word	0x0800933f
 8008c70:	0800933f 	.word	0x0800933f
 8008c74:	0800933f 	.word	0x0800933f
 8008c78:	0800933f 	.word	0x0800933f
 8008c7c:	0800933f 	.word	0x0800933f
 8008c80:	0800933f 	.word	0x0800933f
 8008c84:	0800933f 	.word	0x0800933f
 8008c88:	0800933f 	.word	0x0800933f
 8008c8c:	0800933f 	.word	0x0800933f
 8008c90:	0800933f 	.word	0x0800933f
 8008c94:	0800933f 	.word	0x0800933f
 8008c98:	0800933f 	.word	0x0800933f
 8008c9c:	0800933f 	.word	0x0800933f
 8008ca0:	0800933f 	.word	0x0800933f
 8008ca4:	0800933f 	.word	0x0800933f
 8008ca8:	0800933f 	.word	0x0800933f
 8008cac:	0800933f 	.word	0x0800933f
 8008cb0:	0800933f 	.word	0x0800933f
 8008cb4:	0800933f 	.word	0x0800933f
 8008cb8:	0800933f 	.word	0x0800933f
 8008cbc:	0800933f 	.word	0x0800933f
 8008cc0:	0800933f 	.word	0x0800933f
 8008cc4:	0800933f 	.word	0x0800933f
 8008cc8:	0800933f 	.word	0x0800933f
 8008ccc:	0800933f 	.word	0x0800933f
 8008cd0:	0800933f 	.word	0x0800933f
 8008cd4:	0800933f 	.word	0x0800933f
 8008cd8:	0800933f 	.word	0x0800933f
 8008cdc:	0800933f 	.word	0x0800933f
 8008ce0:	0800927d 	.word	0x0800927d
 8008ce4:	f3af 8000 	nop.w
 8008ce8:	05161500 	.word	0x05161500
 8008cec:	00000000 	.word	0x00000000
 8008cf0:	0a2c2a00 	.word	0x0a2c2a00
 8008cf4:	00000000 	.word	0x00000000
 8008cf8:	003d0900 	.word	0x003d0900
 8008cfc:	3d090000 	.word	0x3d090000
 8008d00:	007a1200 	.word	0x007a1200
 8008d04:	00f42400 	.word	0x00f42400
 8008d08:	01e84800 	.word	0x01e84800
 8008d0c:	03d09000 	.word	0x03d09000
 8008d10:	061a8000 	.word	0x061a8000
 8008d14:	07a12000 	.word	0x07a12000
 8008d18:	0f424000 	.word	0x0f424000
 8008d1c:	1e848000 	.word	0x1e848000
 8008d20:	000aaa00 	.word	0x000aaa00
 8008d24:	000ccc00 	.word	0x000ccc00
 8008d28:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d2c:	f7fc f874 	bl	8004e18 <HAL_RCC_GetPCLK1Freq>
 8008d30:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d044      	beq.n	8008dc4 <UART_SetConfig+0x15d4>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d03e      	beq.n	8008dc0 <UART_SetConfig+0x15d0>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d46:	2b02      	cmp	r3, #2
 8008d48:	d038      	beq.n	8008dbc <UART_SetConfig+0x15cc>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4e:	2b03      	cmp	r3, #3
 8008d50:	d032      	beq.n	8008db8 <UART_SetConfig+0x15c8>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d56:	2b04      	cmp	r3, #4
 8008d58:	d02c      	beq.n	8008db4 <UART_SetConfig+0x15c4>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5e:	2b05      	cmp	r3, #5
 8008d60:	d026      	beq.n	8008db0 <UART_SetConfig+0x15c0>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d66:	2b06      	cmp	r3, #6
 8008d68:	d020      	beq.n	8008dac <UART_SetConfig+0x15bc>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6e:	2b07      	cmp	r3, #7
 8008d70:	d01a      	beq.n	8008da8 <UART_SetConfig+0x15b8>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d76:	2b08      	cmp	r3, #8
 8008d78:	d014      	beq.n	8008da4 <UART_SetConfig+0x15b4>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7e:	2b09      	cmp	r3, #9
 8008d80:	d00e      	beq.n	8008da0 <UART_SetConfig+0x15b0>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d86:	2b0a      	cmp	r3, #10
 8008d88:	d008      	beq.n	8008d9c <UART_SetConfig+0x15ac>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8e:	2b0b      	cmp	r3, #11
 8008d90:	d102      	bne.n	8008d98 <UART_SetConfig+0x15a8>
 8008d92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d96:	e016      	b.n	8008dc6 <UART_SetConfig+0x15d6>
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e014      	b.n	8008dc6 <UART_SetConfig+0x15d6>
 8008d9c:	2380      	movs	r3, #128	; 0x80
 8008d9e:	e012      	b.n	8008dc6 <UART_SetConfig+0x15d6>
 8008da0:	2340      	movs	r3, #64	; 0x40
 8008da2:	e010      	b.n	8008dc6 <UART_SetConfig+0x15d6>
 8008da4:	2320      	movs	r3, #32
 8008da6:	e00e      	b.n	8008dc6 <UART_SetConfig+0x15d6>
 8008da8:	2310      	movs	r3, #16
 8008daa:	e00c      	b.n	8008dc6 <UART_SetConfig+0x15d6>
 8008dac:	230c      	movs	r3, #12
 8008dae:	e00a      	b.n	8008dc6 <UART_SetConfig+0x15d6>
 8008db0:	230a      	movs	r3, #10
 8008db2:	e008      	b.n	8008dc6 <UART_SetConfig+0x15d6>
 8008db4:	2308      	movs	r3, #8
 8008db6:	e006      	b.n	8008dc6 <UART_SetConfig+0x15d6>
 8008db8:	2306      	movs	r3, #6
 8008dba:	e004      	b.n	8008dc6 <UART_SetConfig+0x15d6>
 8008dbc:	2304      	movs	r3, #4
 8008dbe:	e002      	b.n	8008dc6 <UART_SetConfig+0x15d6>
 8008dc0:	2302      	movs	r3, #2
 8008dc2:	e000      	b.n	8008dc6 <UART_SetConfig+0x15d6>
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dcc:	005a      	lsls	r2, r3, #1
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	085b      	lsrs	r3, r3, #1
 8008dd4:	441a      	add	r2, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008de2:	e2b0      	b.n	8009346 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008de4:	f7fc f82e 	bl	8004e44 <HAL_RCC_GetPCLK2Freq>
 8008de8:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d044      	beq.n	8008e7c <UART_SetConfig+0x168c>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	d03e      	beq.n	8008e78 <UART_SetConfig+0x1688>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d038      	beq.n	8008e74 <UART_SetConfig+0x1684>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e06:	2b03      	cmp	r3, #3
 8008e08:	d032      	beq.n	8008e70 <UART_SetConfig+0x1680>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0e:	2b04      	cmp	r3, #4
 8008e10:	d02c      	beq.n	8008e6c <UART_SetConfig+0x167c>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e16:	2b05      	cmp	r3, #5
 8008e18:	d026      	beq.n	8008e68 <UART_SetConfig+0x1678>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1e:	2b06      	cmp	r3, #6
 8008e20:	d020      	beq.n	8008e64 <UART_SetConfig+0x1674>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e26:	2b07      	cmp	r3, #7
 8008e28:	d01a      	beq.n	8008e60 <UART_SetConfig+0x1670>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2e:	2b08      	cmp	r3, #8
 8008e30:	d014      	beq.n	8008e5c <UART_SetConfig+0x166c>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e36:	2b09      	cmp	r3, #9
 8008e38:	d00e      	beq.n	8008e58 <UART_SetConfig+0x1668>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3e:	2b0a      	cmp	r3, #10
 8008e40:	d008      	beq.n	8008e54 <UART_SetConfig+0x1664>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e46:	2b0b      	cmp	r3, #11
 8008e48:	d102      	bne.n	8008e50 <UART_SetConfig+0x1660>
 8008e4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e4e:	e016      	b.n	8008e7e <UART_SetConfig+0x168e>
 8008e50:	2301      	movs	r3, #1
 8008e52:	e014      	b.n	8008e7e <UART_SetConfig+0x168e>
 8008e54:	2380      	movs	r3, #128	; 0x80
 8008e56:	e012      	b.n	8008e7e <UART_SetConfig+0x168e>
 8008e58:	2340      	movs	r3, #64	; 0x40
 8008e5a:	e010      	b.n	8008e7e <UART_SetConfig+0x168e>
 8008e5c:	2320      	movs	r3, #32
 8008e5e:	e00e      	b.n	8008e7e <UART_SetConfig+0x168e>
 8008e60:	2310      	movs	r3, #16
 8008e62:	e00c      	b.n	8008e7e <UART_SetConfig+0x168e>
 8008e64:	230c      	movs	r3, #12
 8008e66:	e00a      	b.n	8008e7e <UART_SetConfig+0x168e>
 8008e68:	230a      	movs	r3, #10
 8008e6a:	e008      	b.n	8008e7e <UART_SetConfig+0x168e>
 8008e6c:	2308      	movs	r3, #8
 8008e6e:	e006      	b.n	8008e7e <UART_SetConfig+0x168e>
 8008e70:	2306      	movs	r3, #6
 8008e72:	e004      	b.n	8008e7e <UART_SetConfig+0x168e>
 8008e74:	2304      	movs	r3, #4
 8008e76:	e002      	b.n	8008e7e <UART_SetConfig+0x168e>
 8008e78:	2302      	movs	r3, #2
 8008e7a:	e000      	b.n	8008e7e <UART_SetConfig+0x168e>
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e84:	005a      	lsls	r2, r3, #1
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	085b      	lsrs	r3, r3, #1
 8008e8c:	441a      	add	r2, r3
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e9a:	e254      	b.n	8009346 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e9c:	f107 0318 	add.w	r3, r7, #24
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f7fc fed9 	bl	8005c58 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ea6:	69fa      	ldr	r2, [r7, #28]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d044      	beq.n	8008f3a <UART_SetConfig+0x174a>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d03e      	beq.n	8008f36 <UART_SetConfig+0x1746>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	d038      	beq.n	8008f32 <UART_SetConfig+0x1742>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec4:	2b03      	cmp	r3, #3
 8008ec6:	d032      	beq.n	8008f2e <UART_SetConfig+0x173e>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ecc:	2b04      	cmp	r3, #4
 8008ece:	d02c      	beq.n	8008f2a <UART_SetConfig+0x173a>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed4:	2b05      	cmp	r3, #5
 8008ed6:	d026      	beq.n	8008f26 <UART_SetConfig+0x1736>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008edc:	2b06      	cmp	r3, #6
 8008ede:	d020      	beq.n	8008f22 <UART_SetConfig+0x1732>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee4:	2b07      	cmp	r3, #7
 8008ee6:	d01a      	beq.n	8008f1e <UART_SetConfig+0x172e>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eec:	2b08      	cmp	r3, #8
 8008eee:	d014      	beq.n	8008f1a <UART_SetConfig+0x172a>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef4:	2b09      	cmp	r3, #9
 8008ef6:	d00e      	beq.n	8008f16 <UART_SetConfig+0x1726>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efc:	2b0a      	cmp	r3, #10
 8008efe:	d008      	beq.n	8008f12 <UART_SetConfig+0x1722>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f04:	2b0b      	cmp	r3, #11
 8008f06:	d102      	bne.n	8008f0e <UART_SetConfig+0x171e>
 8008f08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f0c:	e016      	b.n	8008f3c <UART_SetConfig+0x174c>
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e014      	b.n	8008f3c <UART_SetConfig+0x174c>
 8008f12:	2380      	movs	r3, #128	; 0x80
 8008f14:	e012      	b.n	8008f3c <UART_SetConfig+0x174c>
 8008f16:	2340      	movs	r3, #64	; 0x40
 8008f18:	e010      	b.n	8008f3c <UART_SetConfig+0x174c>
 8008f1a:	2320      	movs	r3, #32
 8008f1c:	e00e      	b.n	8008f3c <UART_SetConfig+0x174c>
 8008f1e:	2310      	movs	r3, #16
 8008f20:	e00c      	b.n	8008f3c <UART_SetConfig+0x174c>
 8008f22:	230c      	movs	r3, #12
 8008f24:	e00a      	b.n	8008f3c <UART_SetConfig+0x174c>
 8008f26:	230a      	movs	r3, #10
 8008f28:	e008      	b.n	8008f3c <UART_SetConfig+0x174c>
 8008f2a:	2308      	movs	r3, #8
 8008f2c:	e006      	b.n	8008f3c <UART_SetConfig+0x174c>
 8008f2e:	2306      	movs	r3, #6
 8008f30:	e004      	b.n	8008f3c <UART_SetConfig+0x174c>
 8008f32:	2304      	movs	r3, #4
 8008f34:	e002      	b.n	8008f3c <UART_SetConfig+0x174c>
 8008f36:	2302      	movs	r3, #2
 8008f38:	e000      	b.n	8008f3c <UART_SetConfig+0x174c>
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f40:	005a      	lsls	r2, r3, #1
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	085b      	lsrs	r3, r3, #1
 8008f48:	441a      	add	r2, r3
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008f56:	e1f6      	b.n	8009346 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f58:	f107 030c 	add.w	r3, r7, #12
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7fc ffc7 	bl	8005ef0 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f62:	693a      	ldr	r2, [r7, #16]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d044      	beq.n	8008ff6 <UART_SetConfig+0x1806>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d03e      	beq.n	8008ff2 <UART_SetConfig+0x1802>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f78:	2b02      	cmp	r3, #2
 8008f7a:	d038      	beq.n	8008fee <UART_SetConfig+0x17fe>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f80:	2b03      	cmp	r3, #3
 8008f82:	d032      	beq.n	8008fea <UART_SetConfig+0x17fa>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f88:	2b04      	cmp	r3, #4
 8008f8a:	d02c      	beq.n	8008fe6 <UART_SetConfig+0x17f6>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f90:	2b05      	cmp	r3, #5
 8008f92:	d026      	beq.n	8008fe2 <UART_SetConfig+0x17f2>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f98:	2b06      	cmp	r3, #6
 8008f9a:	d020      	beq.n	8008fde <UART_SetConfig+0x17ee>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa0:	2b07      	cmp	r3, #7
 8008fa2:	d01a      	beq.n	8008fda <UART_SetConfig+0x17ea>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa8:	2b08      	cmp	r3, #8
 8008faa:	d014      	beq.n	8008fd6 <UART_SetConfig+0x17e6>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb0:	2b09      	cmp	r3, #9
 8008fb2:	d00e      	beq.n	8008fd2 <UART_SetConfig+0x17e2>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb8:	2b0a      	cmp	r3, #10
 8008fba:	d008      	beq.n	8008fce <UART_SetConfig+0x17de>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc0:	2b0b      	cmp	r3, #11
 8008fc2:	d102      	bne.n	8008fca <UART_SetConfig+0x17da>
 8008fc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fc8:	e016      	b.n	8008ff8 <UART_SetConfig+0x1808>
 8008fca:	2301      	movs	r3, #1
 8008fcc:	e014      	b.n	8008ff8 <UART_SetConfig+0x1808>
 8008fce:	2380      	movs	r3, #128	; 0x80
 8008fd0:	e012      	b.n	8008ff8 <UART_SetConfig+0x1808>
 8008fd2:	2340      	movs	r3, #64	; 0x40
 8008fd4:	e010      	b.n	8008ff8 <UART_SetConfig+0x1808>
 8008fd6:	2320      	movs	r3, #32
 8008fd8:	e00e      	b.n	8008ff8 <UART_SetConfig+0x1808>
 8008fda:	2310      	movs	r3, #16
 8008fdc:	e00c      	b.n	8008ff8 <UART_SetConfig+0x1808>
 8008fde:	230c      	movs	r3, #12
 8008fe0:	e00a      	b.n	8008ff8 <UART_SetConfig+0x1808>
 8008fe2:	230a      	movs	r3, #10
 8008fe4:	e008      	b.n	8008ff8 <UART_SetConfig+0x1808>
 8008fe6:	2308      	movs	r3, #8
 8008fe8:	e006      	b.n	8008ff8 <UART_SetConfig+0x1808>
 8008fea:	2306      	movs	r3, #6
 8008fec:	e004      	b.n	8008ff8 <UART_SetConfig+0x1808>
 8008fee:	2304      	movs	r3, #4
 8008ff0:	e002      	b.n	8008ff8 <UART_SetConfig+0x1808>
 8008ff2:	2302      	movs	r3, #2
 8008ff4:	e000      	b.n	8008ff8 <UART_SetConfig+0x1808>
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ffc:	005a      	lsls	r2, r3, #1
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	085b      	lsrs	r3, r3, #1
 8009004:	441a      	add	r2, r3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	fbb2 f3f3 	udiv	r3, r2, r3
 800900e:	b29b      	uxth	r3, r3
 8009010:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009012:	e198      	b.n	8009346 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009014:	4b87      	ldr	r3, [pc, #540]	; (8009234 <UART_SetConfig+0x1a44>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f003 0320 	and.w	r3, r3, #32
 800901c:	2b00      	cmp	r3, #0
 800901e:	d05e      	beq.n	80090de <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009020:	4b84      	ldr	r3, [pc, #528]	; (8009234 <UART_SetConfig+0x1a44>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	08db      	lsrs	r3, r3, #3
 8009026:	f003 0303 	and.w	r3, r3, #3
 800902a:	4a83      	ldr	r2, [pc, #524]	; (8009238 <UART_SetConfig+0x1a48>)
 800902c:	40da      	lsrs	r2, r3
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009032:	2b00      	cmp	r3, #0
 8009034:	d044      	beq.n	80090c0 <UART_SetConfig+0x18d0>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903a:	2b01      	cmp	r3, #1
 800903c:	d03e      	beq.n	80090bc <UART_SetConfig+0x18cc>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009042:	2b02      	cmp	r3, #2
 8009044:	d038      	beq.n	80090b8 <UART_SetConfig+0x18c8>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904a:	2b03      	cmp	r3, #3
 800904c:	d032      	beq.n	80090b4 <UART_SetConfig+0x18c4>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009052:	2b04      	cmp	r3, #4
 8009054:	d02c      	beq.n	80090b0 <UART_SetConfig+0x18c0>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800905a:	2b05      	cmp	r3, #5
 800905c:	d026      	beq.n	80090ac <UART_SetConfig+0x18bc>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009062:	2b06      	cmp	r3, #6
 8009064:	d020      	beq.n	80090a8 <UART_SetConfig+0x18b8>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906a:	2b07      	cmp	r3, #7
 800906c:	d01a      	beq.n	80090a4 <UART_SetConfig+0x18b4>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009072:	2b08      	cmp	r3, #8
 8009074:	d014      	beq.n	80090a0 <UART_SetConfig+0x18b0>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907a:	2b09      	cmp	r3, #9
 800907c:	d00e      	beq.n	800909c <UART_SetConfig+0x18ac>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009082:	2b0a      	cmp	r3, #10
 8009084:	d008      	beq.n	8009098 <UART_SetConfig+0x18a8>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908a:	2b0b      	cmp	r3, #11
 800908c:	d102      	bne.n	8009094 <UART_SetConfig+0x18a4>
 800908e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009092:	e016      	b.n	80090c2 <UART_SetConfig+0x18d2>
 8009094:	2301      	movs	r3, #1
 8009096:	e014      	b.n	80090c2 <UART_SetConfig+0x18d2>
 8009098:	2380      	movs	r3, #128	; 0x80
 800909a:	e012      	b.n	80090c2 <UART_SetConfig+0x18d2>
 800909c:	2340      	movs	r3, #64	; 0x40
 800909e:	e010      	b.n	80090c2 <UART_SetConfig+0x18d2>
 80090a0:	2320      	movs	r3, #32
 80090a2:	e00e      	b.n	80090c2 <UART_SetConfig+0x18d2>
 80090a4:	2310      	movs	r3, #16
 80090a6:	e00c      	b.n	80090c2 <UART_SetConfig+0x18d2>
 80090a8:	230c      	movs	r3, #12
 80090aa:	e00a      	b.n	80090c2 <UART_SetConfig+0x18d2>
 80090ac:	230a      	movs	r3, #10
 80090ae:	e008      	b.n	80090c2 <UART_SetConfig+0x18d2>
 80090b0:	2308      	movs	r3, #8
 80090b2:	e006      	b.n	80090c2 <UART_SetConfig+0x18d2>
 80090b4:	2306      	movs	r3, #6
 80090b6:	e004      	b.n	80090c2 <UART_SetConfig+0x18d2>
 80090b8:	2304      	movs	r3, #4
 80090ba:	e002      	b.n	80090c2 <UART_SetConfig+0x18d2>
 80090bc:	2302      	movs	r3, #2
 80090be:	e000      	b.n	80090c2 <UART_SetConfig+0x18d2>
 80090c0:	2301      	movs	r3, #1
 80090c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80090c6:	005a      	lsls	r2, r3, #1
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	085b      	lsrs	r3, r3, #1
 80090ce:	441a      	add	r2, r3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80090d8:	b29b      	uxth	r3, r3
 80090da:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80090dc:	e133      	b.n	8009346 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d043      	beq.n	800916e <UART_SetConfig+0x197e>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d03d      	beq.n	800916a <UART_SetConfig+0x197a>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f2:	2b02      	cmp	r3, #2
 80090f4:	d037      	beq.n	8009166 <UART_SetConfig+0x1976>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fa:	2b03      	cmp	r3, #3
 80090fc:	d031      	beq.n	8009162 <UART_SetConfig+0x1972>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009102:	2b04      	cmp	r3, #4
 8009104:	d02b      	beq.n	800915e <UART_SetConfig+0x196e>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910a:	2b05      	cmp	r3, #5
 800910c:	d025      	beq.n	800915a <UART_SetConfig+0x196a>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009112:	2b06      	cmp	r3, #6
 8009114:	d01f      	beq.n	8009156 <UART_SetConfig+0x1966>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800911a:	2b07      	cmp	r3, #7
 800911c:	d019      	beq.n	8009152 <UART_SetConfig+0x1962>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009122:	2b08      	cmp	r3, #8
 8009124:	d013      	beq.n	800914e <UART_SetConfig+0x195e>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912a:	2b09      	cmp	r3, #9
 800912c:	d00d      	beq.n	800914a <UART_SetConfig+0x195a>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009132:	2b0a      	cmp	r3, #10
 8009134:	d007      	beq.n	8009146 <UART_SetConfig+0x1956>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913a:	2b0b      	cmp	r3, #11
 800913c:	d101      	bne.n	8009142 <UART_SetConfig+0x1952>
 800913e:	4b3f      	ldr	r3, [pc, #252]	; (800923c <UART_SetConfig+0x1a4c>)
 8009140:	e016      	b.n	8009170 <UART_SetConfig+0x1980>
 8009142:	4b3f      	ldr	r3, [pc, #252]	; (8009240 <UART_SetConfig+0x1a50>)
 8009144:	e014      	b.n	8009170 <UART_SetConfig+0x1980>
 8009146:	4b3f      	ldr	r3, [pc, #252]	; (8009244 <UART_SetConfig+0x1a54>)
 8009148:	e012      	b.n	8009170 <UART_SetConfig+0x1980>
 800914a:	4b3f      	ldr	r3, [pc, #252]	; (8009248 <UART_SetConfig+0x1a58>)
 800914c:	e010      	b.n	8009170 <UART_SetConfig+0x1980>
 800914e:	4b3f      	ldr	r3, [pc, #252]	; (800924c <UART_SetConfig+0x1a5c>)
 8009150:	e00e      	b.n	8009170 <UART_SetConfig+0x1980>
 8009152:	4b3f      	ldr	r3, [pc, #252]	; (8009250 <UART_SetConfig+0x1a60>)
 8009154:	e00c      	b.n	8009170 <UART_SetConfig+0x1980>
 8009156:	4b3f      	ldr	r3, [pc, #252]	; (8009254 <UART_SetConfig+0x1a64>)
 8009158:	e00a      	b.n	8009170 <UART_SetConfig+0x1980>
 800915a:	4b3f      	ldr	r3, [pc, #252]	; (8009258 <UART_SetConfig+0x1a68>)
 800915c:	e008      	b.n	8009170 <UART_SetConfig+0x1980>
 800915e:	4b3f      	ldr	r3, [pc, #252]	; (800925c <UART_SetConfig+0x1a6c>)
 8009160:	e006      	b.n	8009170 <UART_SetConfig+0x1980>
 8009162:	4b3f      	ldr	r3, [pc, #252]	; (8009260 <UART_SetConfig+0x1a70>)
 8009164:	e004      	b.n	8009170 <UART_SetConfig+0x1980>
 8009166:	4b3f      	ldr	r3, [pc, #252]	; (8009264 <UART_SetConfig+0x1a74>)
 8009168:	e002      	b.n	8009170 <UART_SetConfig+0x1980>
 800916a:	4b33      	ldr	r3, [pc, #204]	; (8009238 <UART_SetConfig+0x1a48>)
 800916c:	e000      	b.n	8009170 <UART_SetConfig+0x1980>
 800916e:	4b34      	ldr	r3, [pc, #208]	; (8009240 <UART_SetConfig+0x1a50>)
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	6852      	ldr	r2, [r2, #4]
 8009174:	0852      	lsrs	r2, r2, #1
 8009176:	441a      	add	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009180:	b29b      	uxth	r3, r3
 8009182:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009184:	e0df      	b.n	8009346 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918a:	2b00      	cmp	r3, #0
 800918c:	d045      	beq.n	800921a <UART_SetConfig+0x1a2a>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009192:	2b01      	cmp	r3, #1
 8009194:	d03f      	beq.n	8009216 <UART_SetConfig+0x1a26>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800919a:	2b02      	cmp	r3, #2
 800919c:	d039      	beq.n	8009212 <UART_SetConfig+0x1a22>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a2:	2b03      	cmp	r3, #3
 80091a4:	d033      	beq.n	800920e <UART_SetConfig+0x1a1e>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091aa:	2b04      	cmp	r3, #4
 80091ac:	d02d      	beq.n	800920a <UART_SetConfig+0x1a1a>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b2:	2b05      	cmp	r3, #5
 80091b4:	d027      	beq.n	8009206 <UART_SetConfig+0x1a16>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ba:	2b06      	cmp	r3, #6
 80091bc:	d021      	beq.n	8009202 <UART_SetConfig+0x1a12>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c2:	2b07      	cmp	r3, #7
 80091c4:	d01b      	beq.n	80091fe <UART_SetConfig+0x1a0e>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ca:	2b08      	cmp	r3, #8
 80091cc:	d015      	beq.n	80091fa <UART_SetConfig+0x1a0a>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d2:	2b09      	cmp	r3, #9
 80091d4:	d00f      	beq.n	80091f6 <UART_SetConfig+0x1a06>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091da:	2b0a      	cmp	r3, #10
 80091dc:	d008      	beq.n	80091f0 <UART_SetConfig+0x1a00>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e2:	2b0b      	cmp	r3, #11
 80091e4:	d102      	bne.n	80091ec <UART_SetConfig+0x19fc>
 80091e6:	f647 2312 	movw	r3, #31250	; 0x7a12
 80091ea:	e017      	b.n	800921c <UART_SetConfig+0x1a2c>
 80091ec:	4b18      	ldr	r3, [pc, #96]	; (8009250 <UART_SetConfig+0x1a60>)
 80091ee:	e015      	b.n	800921c <UART_SetConfig+0x1a2c>
 80091f0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80091f4:	e012      	b.n	800921c <UART_SetConfig+0x1a2c>
 80091f6:	4b1c      	ldr	r3, [pc, #112]	; (8009268 <UART_SetConfig+0x1a78>)
 80091f8:	e010      	b.n	800921c <UART_SetConfig+0x1a2c>
 80091fa:	4b1c      	ldr	r3, [pc, #112]	; (800926c <UART_SetConfig+0x1a7c>)
 80091fc:	e00e      	b.n	800921c <UART_SetConfig+0x1a2c>
 80091fe:	4b0f      	ldr	r3, [pc, #60]	; (800923c <UART_SetConfig+0x1a4c>)
 8009200:	e00c      	b.n	800921c <UART_SetConfig+0x1a2c>
 8009202:	4b1b      	ldr	r3, [pc, #108]	; (8009270 <UART_SetConfig+0x1a80>)
 8009204:	e00a      	b.n	800921c <UART_SetConfig+0x1a2c>
 8009206:	4b1b      	ldr	r3, [pc, #108]	; (8009274 <UART_SetConfig+0x1a84>)
 8009208:	e008      	b.n	800921c <UART_SetConfig+0x1a2c>
 800920a:	4b0e      	ldr	r3, [pc, #56]	; (8009244 <UART_SetConfig+0x1a54>)
 800920c:	e006      	b.n	800921c <UART_SetConfig+0x1a2c>
 800920e:	4b1a      	ldr	r3, [pc, #104]	; (8009278 <UART_SetConfig+0x1a88>)
 8009210:	e004      	b.n	800921c <UART_SetConfig+0x1a2c>
 8009212:	4b0d      	ldr	r3, [pc, #52]	; (8009248 <UART_SetConfig+0x1a58>)
 8009214:	e002      	b.n	800921c <UART_SetConfig+0x1a2c>
 8009216:	4b0d      	ldr	r3, [pc, #52]	; (800924c <UART_SetConfig+0x1a5c>)
 8009218:	e000      	b.n	800921c <UART_SetConfig+0x1a2c>
 800921a:	4b0d      	ldr	r3, [pc, #52]	; (8009250 <UART_SetConfig+0x1a60>)
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	6852      	ldr	r2, [r2, #4]
 8009220:	0852      	lsrs	r2, r2, #1
 8009222:	441a      	add	r2, r3
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	fbb2 f3f3 	udiv	r3, r2, r3
 800922c:	b29b      	uxth	r3, r3
 800922e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009230:	e089      	b.n	8009346 <UART_SetConfig+0x1b56>
 8009232:	bf00      	nop
 8009234:	58024400 	.word	0x58024400
 8009238:	03d09000 	.word	0x03d09000
 800923c:	0007a120 	.word	0x0007a120
 8009240:	07a12000 	.word	0x07a12000
 8009244:	000f4240 	.word	0x000f4240
 8009248:	001e8480 	.word	0x001e8480
 800924c:	003d0900 	.word	0x003d0900
 8009250:	007a1200 	.word	0x007a1200
 8009254:	00a2c2aa 	.word	0x00a2c2aa
 8009258:	00c35000 	.word	0x00c35000
 800925c:	00f42400 	.word	0x00f42400
 8009260:	01458554 	.word	0x01458554
 8009264:	01e84800 	.word	0x01e84800
 8009268:	0001e848 	.word	0x0001e848
 800926c:	0003d090 	.word	0x0003d090
 8009270:	000a2c2a 	.word	0x000a2c2a
 8009274:	000c3500 	.word	0x000c3500
 8009278:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009280:	2b00      	cmp	r3, #0
 8009282:	d04f      	beq.n	8009324 <UART_SetConfig+0x1b34>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009288:	2b01      	cmp	r3, #1
 800928a:	d048      	beq.n	800931e <UART_SetConfig+0x1b2e>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009290:	2b02      	cmp	r3, #2
 8009292:	d041      	beq.n	8009318 <UART_SetConfig+0x1b28>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009298:	2b03      	cmp	r3, #3
 800929a:	d03a      	beq.n	8009312 <UART_SetConfig+0x1b22>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a0:	2b04      	cmp	r3, #4
 80092a2:	d033      	beq.n	800930c <UART_SetConfig+0x1b1c>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a8:	2b05      	cmp	r3, #5
 80092aa:	d02c      	beq.n	8009306 <UART_SetConfig+0x1b16>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b0:	2b06      	cmp	r3, #6
 80092b2:	d025      	beq.n	8009300 <UART_SetConfig+0x1b10>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b8:	2b07      	cmp	r3, #7
 80092ba:	d01e      	beq.n	80092fa <UART_SetConfig+0x1b0a>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c0:	2b08      	cmp	r3, #8
 80092c2:	d017      	beq.n	80092f4 <UART_SetConfig+0x1b04>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c8:	2b09      	cmp	r3, #9
 80092ca:	d010      	beq.n	80092ee <UART_SetConfig+0x1afe>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d0:	2b0a      	cmp	r3, #10
 80092d2:	d009      	beq.n	80092e8 <UART_SetConfig+0x1af8>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d8:	2b0b      	cmp	r3, #11
 80092da:	d102      	bne.n	80092e2 <UART_SetConfig+0x1af2>
 80092dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092e0:	e022      	b.n	8009328 <UART_SetConfig+0x1b38>
 80092e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80092e6:	e01f      	b.n	8009328 <UART_SetConfig+0x1b38>
 80092e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092ec:	e01c      	b.n	8009328 <UART_SetConfig+0x1b38>
 80092ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092f2:	e019      	b.n	8009328 <UART_SetConfig+0x1b38>
 80092f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80092f8:	e016      	b.n	8009328 <UART_SetConfig+0x1b38>
 80092fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092fe:	e013      	b.n	8009328 <UART_SetConfig+0x1b38>
 8009300:	f241 5354 	movw	r3, #5460	; 0x1554
 8009304:	e010      	b.n	8009328 <UART_SetConfig+0x1b38>
 8009306:	f641 1398 	movw	r3, #6552	; 0x1998
 800930a:	e00d      	b.n	8009328 <UART_SetConfig+0x1b38>
 800930c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009310:	e00a      	b.n	8009328 <UART_SetConfig+0x1b38>
 8009312:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8009316:	e007      	b.n	8009328 <UART_SetConfig+0x1b38>
 8009318:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800931c:	e004      	b.n	8009328 <UART_SetConfig+0x1b38>
 800931e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009322:	e001      	b.n	8009328 <UART_SetConfig+0x1b38>
 8009324:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	6852      	ldr	r2, [r2, #4]
 800932c:	0852      	lsrs	r2, r2, #1
 800932e:	441a      	add	r2, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	fbb2 f3f3 	udiv	r3, r2, r3
 8009338:	b29b      	uxth	r3, r3
 800933a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800933c:	e003      	b.n	8009346 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8009344:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009348:	2b0f      	cmp	r3, #15
 800934a:	d916      	bls.n	800937a <UART_SetConfig+0x1b8a>
 800934c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800934e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009352:	d212      	bcs.n	800937a <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009356:	b29b      	uxth	r3, r3
 8009358:	f023 030f 	bic.w	r3, r3, #15
 800935c:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800935e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009360:	085b      	lsrs	r3, r3, #1
 8009362:	b29b      	uxth	r3, r3
 8009364:	f003 0307 	and.w	r3, r3, #7
 8009368:	b29a      	uxth	r2, r3
 800936a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800936c:	4313      	orrs	r3, r2
 800936e:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009376:	60da      	str	r2, [r3, #12]
 8009378:	e3a3      	b.n	8009ac2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800937a:	2301      	movs	r3, #1
 800937c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009380:	e39f      	b.n	8009ac2 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 8009382:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009386:	2b40      	cmp	r3, #64	; 0x40
 8009388:	f200 8388 	bhi.w	8009a9c <UART_SetConfig+0x22ac>
 800938c:	a201      	add	r2, pc, #4	; (adr r2, 8009394 <UART_SetConfig+0x1ba4>)
 800938e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009392:	bf00      	nop
 8009394:	08009499 	.word	0x08009499
 8009398:	0800954f 	.word	0x0800954f
 800939c:	08009a9d 	.word	0x08009a9d
 80093a0:	08009a9d 	.word	0x08009a9d
 80093a4:	08009605 	.word	0x08009605
 80093a8:	08009a9d 	.word	0x08009a9d
 80093ac:	08009a9d 	.word	0x08009a9d
 80093b0:	08009a9d 	.word	0x08009a9d
 80093b4:	080096bf 	.word	0x080096bf
 80093b8:	08009a9d 	.word	0x08009a9d
 80093bc:	08009a9d 	.word	0x08009a9d
 80093c0:	08009a9d 	.word	0x08009a9d
 80093c4:	08009a9d 	.word	0x08009a9d
 80093c8:	08009a9d 	.word	0x08009a9d
 80093cc:	08009a9d 	.word	0x08009a9d
 80093d0:	08009a9d 	.word	0x08009a9d
 80093d4:	08009779 	.word	0x08009779
 80093d8:	08009a9d 	.word	0x08009a9d
 80093dc:	08009a9d 	.word	0x08009a9d
 80093e0:	08009a9d 	.word	0x08009a9d
 80093e4:	08009a9d 	.word	0x08009a9d
 80093e8:	08009a9d 	.word	0x08009a9d
 80093ec:	08009a9d 	.word	0x08009a9d
 80093f0:	08009a9d 	.word	0x08009a9d
 80093f4:	08009a9d 	.word	0x08009a9d
 80093f8:	08009a9d 	.word	0x08009a9d
 80093fc:	08009a9d 	.word	0x08009a9d
 8009400:	08009a9d 	.word	0x08009a9d
 8009404:	08009a9d 	.word	0x08009a9d
 8009408:	08009a9d 	.word	0x08009a9d
 800940c:	08009a9d 	.word	0x08009a9d
 8009410:	08009a9d 	.word	0x08009a9d
 8009414:	080098e9 	.word	0x080098e9
 8009418:	08009a9d 	.word	0x08009a9d
 800941c:	08009a9d 	.word	0x08009a9d
 8009420:	08009a9d 	.word	0x08009a9d
 8009424:	08009a9d 	.word	0x08009a9d
 8009428:	08009a9d 	.word	0x08009a9d
 800942c:	08009a9d 	.word	0x08009a9d
 8009430:	08009a9d 	.word	0x08009a9d
 8009434:	08009a9d 	.word	0x08009a9d
 8009438:	08009a9d 	.word	0x08009a9d
 800943c:	08009a9d 	.word	0x08009a9d
 8009440:	08009a9d 	.word	0x08009a9d
 8009444:	08009a9d 	.word	0x08009a9d
 8009448:	08009a9d 	.word	0x08009a9d
 800944c:	08009a9d 	.word	0x08009a9d
 8009450:	08009a9d 	.word	0x08009a9d
 8009454:	08009a9d 	.word	0x08009a9d
 8009458:	08009a9d 	.word	0x08009a9d
 800945c:	08009a9d 	.word	0x08009a9d
 8009460:	08009a9d 	.word	0x08009a9d
 8009464:	08009a9d 	.word	0x08009a9d
 8009468:	08009a9d 	.word	0x08009a9d
 800946c:	08009a9d 	.word	0x08009a9d
 8009470:	08009a9d 	.word	0x08009a9d
 8009474:	08009a9d 	.word	0x08009a9d
 8009478:	08009a9d 	.word	0x08009a9d
 800947c:	08009a9d 	.word	0x08009a9d
 8009480:	08009a9d 	.word	0x08009a9d
 8009484:	08009a9d 	.word	0x08009a9d
 8009488:	08009a9d 	.word	0x08009a9d
 800948c:	08009a9d 	.word	0x08009a9d
 8009490:	08009a9d 	.word	0x08009a9d
 8009494:	080099dd 	.word	0x080099dd
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009498:	f7fb fcbe 	bl	8004e18 <HAL_RCC_GetPCLK1Freq>
 800949c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d044      	beq.n	8009530 <UART_SetConfig+0x1d40>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	d03e      	beq.n	800952c <UART_SetConfig+0x1d3c>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b2:	2b02      	cmp	r3, #2
 80094b4:	d038      	beq.n	8009528 <UART_SetConfig+0x1d38>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ba:	2b03      	cmp	r3, #3
 80094bc:	d032      	beq.n	8009524 <UART_SetConfig+0x1d34>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c2:	2b04      	cmp	r3, #4
 80094c4:	d02c      	beq.n	8009520 <UART_SetConfig+0x1d30>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ca:	2b05      	cmp	r3, #5
 80094cc:	d026      	beq.n	800951c <UART_SetConfig+0x1d2c>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d2:	2b06      	cmp	r3, #6
 80094d4:	d020      	beq.n	8009518 <UART_SetConfig+0x1d28>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094da:	2b07      	cmp	r3, #7
 80094dc:	d01a      	beq.n	8009514 <UART_SetConfig+0x1d24>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e2:	2b08      	cmp	r3, #8
 80094e4:	d014      	beq.n	8009510 <UART_SetConfig+0x1d20>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ea:	2b09      	cmp	r3, #9
 80094ec:	d00e      	beq.n	800950c <UART_SetConfig+0x1d1c>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f2:	2b0a      	cmp	r3, #10
 80094f4:	d008      	beq.n	8009508 <UART_SetConfig+0x1d18>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fa:	2b0b      	cmp	r3, #11
 80094fc:	d102      	bne.n	8009504 <UART_SetConfig+0x1d14>
 80094fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009502:	e016      	b.n	8009532 <UART_SetConfig+0x1d42>
 8009504:	2301      	movs	r3, #1
 8009506:	e014      	b.n	8009532 <UART_SetConfig+0x1d42>
 8009508:	2380      	movs	r3, #128	; 0x80
 800950a:	e012      	b.n	8009532 <UART_SetConfig+0x1d42>
 800950c:	2340      	movs	r3, #64	; 0x40
 800950e:	e010      	b.n	8009532 <UART_SetConfig+0x1d42>
 8009510:	2320      	movs	r3, #32
 8009512:	e00e      	b.n	8009532 <UART_SetConfig+0x1d42>
 8009514:	2310      	movs	r3, #16
 8009516:	e00c      	b.n	8009532 <UART_SetConfig+0x1d42>
 8009518:	230c      	movs	r3, #12
 800951a:	e00a      	b.n	8009532 <UART_SetConfig+0x1d42>
 800951c:	230a      	movs	r3, #10
 800951e:	e008      	b.n	8009532 <UART_SetConfig+0x1d42>
 8009520:	2308      	movs	r3, #8
 8009522:	e006      	b.n	8009532 <UART_SetConfig+0x1d42>
 8009524:	2306      	movs	r3, #6
 8009526:	e004      	b.n	8009532 <UART_SetConfig+0x1d42>
 8009528:	2304      	movs	r3, #4
 800952a:	e002      	b.n	8009532 <UART_SetConfig+0x1d42>
 800952c:	2302      	movs	r3, #2
 800952e:	e000      	b.n	8009532 <UART_SetConfig+0x1d42>
 8009530:	2301      	movs	r3, #1
 8009532:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009534:	fbb2 f2f3 	udiv	r2, r2, r3
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	085b      	lsrs	r3, r3, #1
 800953e:	441a      	add	r2, r3
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	fbb2 f3f3 	udiv	r3, r2, r3
 8009548:	b29b      	uxth	r3, r3
 800954a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800954c:	e2aa      	b.n	8009aa4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800954e:	f7fb fc79 	bl	8004e44 <HAL_RCC_GetPCLK2Freq>
 8009552:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009558:	2b00      	cmp	r3, #0
 800955a:	d044      	beq.n	80095e6 <UART_SetConfig+0x1df6>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009560:	2b01      	cmp	r3, #1
 8009562:	d03e      	beq.n	80095e2 <UART_SetConfig+0x1df2>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009568:	2b02      	cmp	r3, #2
 800956a:	d038      	beq.n	80095de <UART_SetConfig+0x1dee>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009570:	2b03      	cmp	r3, #3
 8009572:	d032      	beq.n	80095da <UART_SetConfig+0x1dea>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009578:	2b04      	cmp	r3, #4
 800957a:	d02c      	beq.n	80095d6 <UART_SetConfig+0x1de6>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009580:	2b05      	cmp	r3, #5
 8009582:	d026      	beq.n	80095d2 <UART_SetConfig+0x1de2>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009588:	2b06      	cmp	r3, #6
 800958a:	d020      	beq.n	80095ce <UART_SetConfig+0x1dde>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009590:	2b07      	cmp	r3, #7
 8009592:	d01a      	beq.n	80095ca <UART_SetConfig+0x1dda>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009598:	2b08      	cmp	r3, #8
 800959a:	d014      	beq.n	80095c6 <UART_SetConfig+0x1dd6>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a0:	2b09      	cmp	r3, #9
 80095a2:	d00e      	beq.n	80095c2 <UART_SetConfig+0x1dd2>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a8:	2b0a      	cmp	r3, #10
 80095aa:	d008      	beq.n	80095be <UART_SetConfig+0x1dce>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b0:	2b0b      	cmp	r3, #11
 80095b2:	d102      	bne.n	80095ba <UART_SetConfig+0x1dca>
 80095b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095b8:	e016      	b.n	80095e8 <UART_SetConfig+0x1df8>
 80095ba:	2301      	movs	r3, #1
 80095bc:	e014      	b.n	80095e8 <UART_SetConfig+0x1df8>
 80095be:	2380      	movs	r3, #128	; 0x80
 80095c0:	e012      	b.n	80095e8 <UART_SetConfig+0x1df8>
 80095c2:	2340      	movs	r3, #64	; 0x40
 80095c4:	e010      	b.n	80095e8 <UART_SetConfig+0x1df8>
 80095c6:	2320      	movs	r3, #32
 80095c8:	e00e      	b.n	80095e8 <UART_SetConfig+0x1df8>
 80095ca:	2310      	movs	r3, #16
 80095cc:	e00c      	b.n	80095e8 <UART_SetConfig+0x1df8>
 80095ce:	230c      	movs	r3, #12
 80095d0:	e00a      	b.n	80095e8 <UART_SetConfig+0x1df8>
 80095d2:	230a      	movs	r3, #10
 80095d4:	e008      	b.n	80095e8 <UART_SetConfig+0x1df8>
 80095d6:	2308      	movs	r3, #8
 80095d8:	e006      	b.n	80095e8 <UART_SetConfig+0x1df8>
 80095da:	2306      	movs	r3, #6
 80095dc:	e004      	b.n	80095e8 <UART_SetConfig+0x1df8>
 80095de:	2304      	movs	r3, #4
 80095e0:	e002      	b.n	80095e8 <UART_SetConfig+0x1df8>
 80095e2:	2302      	movs	r3, #2
 80095e4:	e000      	b.n	80095e8 <UART_SetConfig+0x1df8>
 80095e6:	2301      	movs	r3, #1
 80095e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	085b      	lsrs	r3, r3, #1
 80095f4:	441a      	add	r2, r3
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80095fe:	b29b      	uxth	r3, r3
 8009600:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009602:	e24f      	b.n	8009aa4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009604:	f107 0318 	add.w	r3, r7, #24
 8009608:	4618      	mov	r0, r3
 800960a:	f7fc fb25 	bl	8005c58 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800960e:	69fa      	ldr	r2, [r7, #28]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009614:	2b00      	cmp	r3, #0
 8009616:	d044      	beq.n	80096a2 <UART_SetConfig+0x1eb2>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800961c:	2b01      	cmp	r3, #1
 800961e:	d03e      	beq.n	800969e <UART_SetConfig+0x1eae>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009624:	2b02      	cmp	r3, #2
 8009626:	d038      	beq.n	800969a <UART_SetConfig+0x1eaa>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800962c:	2b03      	cmp	r3, #3
 800962e:	d032      	beq.n	8009696 <UART_SetConfig+0x1ea6>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009634:	2b04      	cmp	r3, #4
 8009636:	d02c      	beq.n	8009692 <UART_SetConfig+0x1ea2>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800963c:	2b05      	cmp	r3, #5
 800963e:	d026      	beq.n	800968e <UART_SetConfig+0x1e9e>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009644:	2b06      	cmp	r3, #6
 8009646:	d020      	beq.n	800968a <UART_SetConfig+0x1e9a>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800964c:	2b07      	cmp	r3, #7
 800964e:	d01a      	beq.n	8009686 <UART_SetConfig+0x1e96>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009654:	2b08      	cmp	r3, #8
 8009656:	d014      	beq.n	8009682 <UART_SetConfig+0x1e92>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800965c:	2b09      	cmp	r3, #9
 800965e:	d00e      	beq.n	800967e <UART_SetConfig+0x1e8e>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009664:	2b0a      	cmp	r3, #10
 8009666:	d008      	beq.n	800967a <UART_SetConfig+0x1e8a>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800966c:	2b0b      	cmp	r3, #11
 800966e:	d102      	bne.n	8009676 <UART_SetConfig+0x1e86>
 8009670:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009674:	e016      	b.n	80096a4 <UART_SetConfig+0x1eb4>
 8009676:	2301      	movs	r3, #1
 8009678:	e014      	b.n	80096a4 <UART_SetConfig+0x1eb4>
 800967a:	2380      	movs	r3, #128	; 0x80
 800967c:	e012      	b.n	80096a4 <UART_SetConfig+0x1eb4>
 800967e:	2340      	movs	r3, #64	; 0x40
 8009680:	e010      	b.n	80096a4 <UART_SetConfig+0x1eb4>
 8009682:	2320      	movs	r3, #32
 8009684:	e00e      	b.n	80096a4 <UART_SetConfig+0x1eb4>
 8009686:	2310      	movs	r3, #16
 8009688:	e00c      	b.n	80096a4 <UART_SetConfig+0x1eb4>
 800968a:	230c      	movs	r3, #12
 800968c:	e00a      	b.n	80096a4 <UART_SetConfig+0x1eb4>
 800968e:	230a      	movs	r3, #10
 8009690:	e008      	b.n	80096a4 <UART_SetConfig+0x1eb4>
 8009692:	2308      	movs	r3, #8
 8009694:	e006      	b.n	80096a4 <UART_SetConfig+0x1eb4>
 8009696:	2306      	movs	r3, #6
 8009698:	e004      	b.n	80096a4 <UART_SetConfig+0x1eb4>
 800969a:	2304      	movs	r3, #4
 800969c:	e002      	b.n	80096a4 <UART_SetConfig+0x1eb4>
 800969e:	2302      	movs	r3, #2
 80096a0:	e000      	b.n	80096a4 <UART_SetConfig+0x1eb4>
 80096a2:	2301      	movs	r3, #1
 80096a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	085b      	lsrs	r3, r3, #1
 80096ae:	441a      	add	r2, r3
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80096bc:	e1f2      	b.n	8009aa4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096be:	f107 030c 	add.w	r3, r7, #12
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7fc fc14 	bl	8005ef0 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096c8:	693a      	ldr	r2, [r7, #16]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d044      	beq.n	800975c <UART_SetConfig+0x1f6c>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d03e      	beq.n	8009758 <UART_SetConfig+0x1f68>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096de:	2b02      	cmp	r3, #2
 80096e0:	d038      	beq.n	8009754 <UART_SetConfig+0x1f64>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e6:	2b03      	cmp	r3, #3
 80096e8:	d032      	beq.n	8009750 <UART_SetConfig+0x1f60>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ee:	2b04      	cmp	r3, #4
 80096f0:	d02c      	beq.n	800974c <UART_SetConfig+0x1f5c>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f6:	2b05      	cmp	r3, #5
 80096f8:	d026      	beq.n	8009748 <UART_SetConfig+0x1f58>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096fe:	2b06      	cmp	r3, #6
 8009700:	d020      	beq.n	8009744 <UART_SetConfig+0x1f54>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009706:	2b07      	cmp	r3, #7
 8009708:	d01a      	beq.n	8009740 <UART_SetConfig+0x1f50>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800970e:	2b08      	cmp	r3, #8
 8009710:	d014      	beq.n	800973c <UART_SetConfig+0x1f4c>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009716:	2b09      	cmp	r3, #9
 8009718:	d00e      	beq.n	8009738 <UART_SetConfig+0x1f48>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800971e:	2b0a      	cmp	r3, #10
 8009720:	d008      	beq.n	8009734 <UART_SetConfig+0x1f44>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009726:	2b0b      	cmp	r3, #11
 8009728:	d102      	bne.n	8009730 <UART_SetConfig+0x1f40>
 800972a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800972e:	e016      	b.n	800975e <UART_SetConfig+0x1f6e>
 8009730:	2301      	movs	r3, #1
 8009732:	e014      	b.n	800975e <UART_SetConfig+0x1f6e>
 8009734:	2380      	movs	r3, #128	; 0x80
 8009736:	e012      	b.n	800975e <UART_SetConfig+0x1f6e>
 8009738:	2340      	movs	r3, #64	; 0x40
 800973a:	e010      	b.n	800975e <UART_SetConfig+0x1f6e>
 800973c:	2320      	movs	r3, #32
 800973e:	e00e      	b.n	800975e <UART_SetConfig+0x1f6e>
 8009740:	2310      	movs	r3, #16
 8009742:	e00c      	b.n	800975e <UART_SetConfig+0x1f6e>
 8009744:	230c      	movs	r3, #12
 8009746:	e00a      	b.n	800975e <UART_SetConfig+0x1f6e>
 8009748:	230a      	movs	r3, #10
 800974a:	e008      	b.n	800975e <UART_SetConfig+0x1f6e>
 800974c:	2308      	movs	r3, #8
 800974e:	e006      	b.n	800975e <UART_SetConfig+0x1f6e>
 8009750:	2306      	movs	r3, #6
 8009752:	e004      	b.n	800975e <UART_SetConfig+0x1f6e>
 8009754:	2304      	movs	r3, #4
 8009756:	e002      	b.n	800975e <UART_SetConfig+0x1f6e>
 8009758:	2302      	movs	r3, #2
 800975a:	e000      	b.n	800975e <UART_SetConfig+0x1f6e>
 800975c:	2301      	movs	r3, #1
 800975e:	fbb2 f2f3 	udiv	r2, r2, r3
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	085b      	lsrs	r3, r3, #1
 8009768:	441a      	add	r2, r3
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009772:	b29b      	uxth	r3, r3
 8009774:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009776:	e195      	b.n	8009aa4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009778:	4b87      	ldr	r3, [pc, #540]	; (8009998 <UART_SetConfig+0x21a8>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f003 0320 	and.w	r3, r3, #32
 8009780:	2b00      	cmp	r3, #0
 8009782:	d05d      	beq.n	8009840 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009784:	4b84      	ldr	r3, [pc, #528]	; (8009998 <UART_SetConfig+0x21a8>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	08db      	lsrs	r3, r3, #3
 800978a:	f003 0303 	and.w	r3, r3, #3
 800978e:	4a83      	ldr	r2, [pc, #524]	; (800999c <UART_SetConfig+0x21ac>)
 8009790:	40da      	lsrs	r2, r3
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009796:	2b00      	cmp	r3, #0
 8009798:	d044      	beq.n	8009824 <UART_SetConfig+0x2034>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800979e:	2b01      	cmp	r3, #1
 80097a0:	d03e      	beq.n	8009820 <UART_SetConfig+0x2030>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a6:	2b02      	cmp	r3, #2
 80097a8:	d038      	beq.n	800981c <UART_SetConfig+0x202c>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ae:	2b03      	cmp	r3, #3
 80097b0:	d032      	beq.n	8009818 <UART_SetConfig+0x2028>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b6:	2b04      	cmp	r3, #4
 80097b8:	d02c      	beq.n	8009814 <UART_SetConfig+0x2024>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097be:	2b05      	cmp	r3, #5
 80097c0:	d026      	beq.n	8009810 <UART_SetConfig+0x2020>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c6:	2b06      	cmp	r3, #6
 80097c8:	d020      	beq.n	800980c <UART_SetConfig+0x201c>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ce:	2b07      	cmp	r3, #7
 80097d0:	d01a      	beq.n	8009808 <UART_SetConfig+0x2018>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d6:	2b08      	cmp	r3, #8
 80097d8:	d014      	beq.n	8009804 <UART_SetConfig+0x2014>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097de:	2b09      	cmp	r3, #9
 80097e0:	d00e      	beq.n	8009800 <UART_SetConfig+0x2010>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e6:	2b0a      	cmp	r3, #10
 80097e8:	d008      	beq.n	80097fc <UART_SetConfig+0x200c>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ee:	2b0b      	cmp	r3, #11
 80097f0:	d102      	bne.n	80097f8 <UART_SetConfig+0x2008>
 80097f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097f6:	e016      	b.n	8009826 <UART_SetConfig+0x2036>
 80097f8:	2301      	movs	r3, #1
 80097fa:	e014      	b.n	8009826 <UART_SetConfig+0x2036>
 80097fc:	2380      	movs	r3, #128	; 0x80
 80097fe:	e012      	b.n	8009826 <UART_SetConfig+0x2036>
 8009800:	2340      	movs	r3, #64	; 0x40
 8009802:	e010      	b.n	8009826 <UART_SetConfig+0x2036>
 8009804:	2320      	movs	r3, #32
 8009806:	e00e      	b.n	8009826 <UART_SetConfig+0x2036>
 8009808:	2310      	movs	r3, #16
 800980a:	e00c      	b.n	8009826 <UART_SetConfig+0x2036>
 800980c:	230c      	movs	r3, #12
 800980e:	e00a      	b.n	8009826 <UART_SetConfig+0x2036>
 8009810:	230a      	movs	r3, #10
 8009812:	e008      	b.n	8009826 <UART_SetConfig+0x2036>
 8009814:	2308      	movs	r3, #8
 8009816:	e006      	b.n	8009826 <UART_SetConfig+0x2036>
 8009818:	2306      	movs	r3, #6
 800981a:	e004      	b.n	8009826 <UART_SetConfig+0x2036>
 800981c:	2304      	movs	r3, #4
 800981e:	e002      	b.n	8009826 <UART_SetConfig+0x2036>
 8009820:	2302      	movs	r3, #2
 8009822:	e000      	b.n	8009826 <UART_SetConfig+0x2036>
 8009824:	2301      	movs	r3, #1
 8009826:	fbb2 f2f3 	udiv	r2, r2, r3
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	085b      	lsrs	r3, r3, #1
 8009830:	441a      	add	r2, r3
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	fbb2 f3f3 	udiv	r3, r2, r3
 800983a:	b29b      	uxth	r3, r3
 800983c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800983e:	e131      	b.n	8009aa4 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009844:	2b00      	cmp	r3, #0
 8009846:	d043      	beq.n	80098d0 <UART_SetConfig+0x20e0>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800984c:	2b01      	cmp	r3, #1
 800984e:	d03d      	beq.n	80098cc <UART_SetConfig+0x20dc>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009854:	2b02      	cmp	r3, #2
 8009856:	d037      	beq.n	80098c8 <UART_SetConfig+0x20d8>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800985c:	2b03      	cmp	r3, #3
 800985e:	d031      	beq.n	80098c4 <UART_SetConfig+0x20d4>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009864:	2b04      	cmp	r3, #4
 8009866:	d02b      	beq.n	80098c0 <UART_SetConfig+0x20d0>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986c:	2b05      	cmp	r3, #5
 800986e:	d025      	beq.n	80098bc <UART_SetConfig+0x20cc>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009874:	2b06      	cmp	r3, #6
 8009876:	d01f      	beq.n	80098b8 <UART_SetConfig+0x20c8>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800987c:	2b07      	cmp	r3, #7
 800987e:	d019      	beq.n	80098b4 <UART_SetConfig+0x20c4>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009884:	2b08      	cmp	r3, #8
 8009886:	d013      	beq.n	80098b0 <UART_SetConfig+0x20c0>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988c:	2b09      	cmp	r3, #9
 800988e:	d00d      	beq.n	80098ac <UART_SetConfig+0x20bc>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009894:	2b0a      	cmp	r3, #10
 8009896:	d007      	beq.n	80098a8 <UART_SetConfig+0x20b8>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800989c:	2b0b      	cmp	r3, #11
 800989e:	d101      	bne.n	80098a4 <UART_SetConfig+0x20b4>
 80098a0:	4b3f      	ldr	r3, [pc, #252]	; (80099a0 <UART_SetConfig+0x21b0>)
 80098a2:	e016      	b.n	80098d2 <UART_SetConfig+0x20e2>
 80098a4:	4b3d      	ldr	r3, [pc, #244]	; (800999c <UART_SetConfig+0x21ac>)
 80098a6:	e014      	b.n	80098d2 <UART_SetConfig+0x20e2>
 80098a8:	4b3e      	ldr	r3, [pc, #248]	; (80099a4 <UART_SetConfig+0x21b4>)
 80098aa:	e012      	b.n	80098d2 <UART_SetConfig+0x20e2>
 80098ac:	4b3e      	ldr	r3, [pc, #248]	; (80099a8 <UART_SetConfig+0x21b8>)
 80098ae:	e010      	b.n	80098d2 <UART_SetConfig+0x20e2>
 80098b0:	4b3e      	ldr	r3, [pc, #248]	; (80099ac <UART_SetConfig+0x21bc>)
 80098b2:	e00e      	b.n	80098d2 <UART_SetConfig+0x20e2>
 80098b4:	4b3e      	ldr	r3, [pc, #248]	; (80099b0 <UART_SetConfig+0x21c0>)
 80098b6:	e00c      	b.n	80098d2 <UART_SetConfig+0x20e2>
 80098b8:	4b3e      	ldr	r3, [pc, #248]	; (80099b4 <UART_SetConfig+0x21c4>)
 80098ba:	e00a      	b.n	80098d2 <UART_SetConfig+0x20e2>
 80098bc:	4b3e      	ldr	r3, [pc, #248]	; (80099b8 <UART_SetConfig+0x21c8>)
 80098be:	e008      	b.n	80098d2 <UART_SetConfig+0x20e2>
 80098c0:	4b3e      	ldr	r3, [pc, #248]	; (80099bc <UART_SetConfig+0x21cc>)
 80098c2:	e006      	b.n	80098d2 <UART_SetConfig+0x20e2>
 80098c4:	4b3e      	ldr	r3, [pc, #248]	; (80099c0 <UART_SetConfig+0x21d0>)
 80098c6:	e004      	b.n	80098d2 <UART_SetConfig+0x20e2>
 80098c8:	4b3e      	ldr	r3, [pc, #248]	; (80099c4 <UART_SetConfig+0x21d4>)
 80098ca:	e002      	b.n	80098d2 <UART_SetConfig+0x20e2>
 80098cc:	4b3e      	ldr	r3, [pc, #248]	; (80099c8 <UART_SetConfig+0x21d8>)
 80098ce:	e000      	b.n	80098d2 <UART_SetConfig+0x20e2>
 80098d0:	4b32      	ldr	r3, [pc, #200]	; (800999c <UART_SetConfig+0x21ac>)
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	6852      	ldr	r2, [r2, #4]
 80098d6:	0852      	lsrs	r2, r2, #1
 80098d8:	441a      	add	r2, r3
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	fbb2 f3f3 	udiv	r3, r2, r3
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80098e6:	e0dd      	b.n	8009aa4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d046      	beq.n	800997e <UART_SetConfig+0x218e>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d040      	beq.n	800997a <UART_SetConfig+0x218a>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098fc:	2b02      	cmp	r3, #2
 80098fe:	d03a      	beq.n	8009976 <UART_SetConfig+0x2186>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009904:	2b03      	cmp	r3, #3
 8009906:	d034      	beq.n	8009972 <UART_SetConfig+0x2182>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800990c:	2b04      	cmp	r3, #4
 800990e:	d02e      	beq.n	800996e <UART_SetConfig+0x217e>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009914:	2b05      	cmp	r3, #5
 8009916:	d028      	beq.n	800996a <UART_SetConfig+0x217a>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800991c:	2b06      	cmp	r3, #6
 800991e:	d022      	beq.n	8009966 <UART_SetConfig+0x2176>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009924:	2b07      	cmp	r3, #7
 8009926:	d01c      	beq.n	8009962 <UART_SetConfig+0x2172>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800992c:	2b08      	cmp	r3, #8
 800992e:	d016      	beq.n	800995e <UART_SetConfig+0x216e>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009934:	2b09      	cmp	r3, #9
 8009936:	d00f      	beq.n	8009958 <UART_SetConfig+0x2168>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800993c:	2b0a      	cmp	r3, #10
 800993e:	d008      	beq.n	8009952 <UART_SetConfig+0x2162>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009944:	2b0b      	cmp	r3, #11
 8009946:	d102      	bne.n	800994e <UART_SetConfig+0x215e>
 8009948:	f643 5309 	movw	r3, #15625	; 0x3d09
 800994c:	e018      	b.n	8009980 <UART_SetConfig+0x2190>
 800994e:	4b18      	ldr	r3, [pc, #96]	; (80099b0 <UART_SetConfig+0x21c0>)
 8009950:	e016      	b.n	8009980 <UART_SetConfig+0x2190>
 8009952:	f647 2312 	movw	r3, #31250	; 0x7a12
 8009956:	e013      	b.n	8009980 <UART_SetConfig+0x2190>
 8009958:	f24f 4324 	movw	r3, #62500	; 0xf424
 800995c:	e010      	b.n	8009980 <UART_SetConfig+0x2190>
 800995e:	4b1b      	ldr	r3, [pc, #108]	; (80099cc <UART_SetConfig+0x21dc>)
 8009960:	e00e      	b.n	8009980 <UART_SetConfig+0x2190>
 8009962:	4b0f      	ldr	r3, [pc, #60]	; (80099a0 <UART_SetConfig+0x21b0>)
 8009964:	e00c      	b.n	8009980 <UART_SetConfig+0x2190>
 8009966:	4b1a      	ldr	r3, [pc, #104]	; (80099d0 <UART_SetConfig+0x21e0>)
 8009968:	e00a      	b.n	8009980 <UART_SetConfig+0x2190>
 800996a:	4b1a      	ldr	r3, [pc, #104]	; (80099d4 <UART_SetConfig+0x21e4>)
 800996c:	e008      	b.n	8009980 <UART_SetConfig+0x2190>
 800996e:	4b0d      	ldr	r3, [pc, #52]	; (80099a4 <UART_SetConfig+0x21b4>)
 8009970:	e006      	b.n	8009980 <UART_SetConfig+0x2190>
 8009972:	4b19      	ldr	r3, [pc, #100]	; (80099d8 <UART_SetConfig+0x21e8>)
 8009974:	e004      	b.n	8009980 <UART_SetConfig+0x2190>
 8009976:	4b0c      	ldr	r3, [pc, #48]	; (80099a8 <UART_SetConfig+0x21b8>)
 8009978:	e002      	b.n	8009980 <UART_SetConfig+0x2190>
 800997a:	4b0c      	ldr	r3, [pc, #48]	; (80099ac <UART_SetConfig+0x21bc>)
 800997c:	e000      	b.n	8009980 <UART_SetConfig+0x2190>
 800997e:	4b0c      	ldr	r3, [pc, #48]	; (80099b0 <UART_SetConfig+0x21c0>)
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	6852      	ldr	r2, [r2, #4]
 8009984:	0852      	lsrs	r2, r2, #1
 8009986:	441a      	add	r2, r3
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009990:	b29b      	uxth	r3, r3
 8009992:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009994:	e086      	b.n	8009aa4 <UART_SetConfig+0x22b4>
 8009996:	bf00      	nop
 8009998:	58024400 	.word	0x58024400
 800999c:	03d09000 	.word	0x03d09000
 80099a0:	0003d090 	.word	0x0003d090
 80099a4:	0007a120 	.word	0x0007a120
 80099a8:	000f4240 	.word	0x000f4240
 80099ac:	001e8480 	.word	0x001e8480
 80099b0:	003d0900 	.word	0x003d0900
 80099b4:	00516155 	.word	0x00516155
 80099b8:	0061a800 	.word	0x0061a800
 80099bc:	007a1200 	.word	0x007a1200
 80099c0:	00a2c2aa 	.word	0x00a2c2aa
 80099c4:	00f42400 	.word	0x00f42400
 80099c8:	01e84800 	.word	0x01e84800
 80099cc:	0001e848 	.word	0x0001e848
 80099d0:	00051615 	.word	0x00051615
 80099d4:	00061a80 	.word	0x00061a80
 80099d8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d04e      	beq.n	8009a82 <UART_SetConfig+0x2292>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d047      	beq.n	8009a7c <UART_SetConfig+0x228c>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f0:	2b02      	cmp	r3, #2
 80099f2:	d040      	beq.n	8009a76 <UART_SetConfig+0x2286>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f8:	2b03      	cmp	r3, #3
 80099fa:	d039      	beq.n	8009a70 <UART_SetConfig+0x2280>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a00:	2b04      	cmp	r3, #4
 8009a02:	d032      	beq.n	8009a6a <UART_SetConfig+0x227a>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a08:	2b05      	cmp	r3, #5
 8009a0a:	d02b      	beq.n	8009a64 <UART_SetConfig+0x2274>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a10:	2b06      	cmp	r3, #6
 8009a12:	d024      	beq.n	8009a5e <UART_SetConfig+0x226e>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a18:	2b07      	cmp	r3, #7
 8009a1a:	d01d      	beq.n	8009a58 <UART_SetConfig+0x2268>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a20:	2b08      	cmp	r3, #8
 8009a22:	d016      	beq.n	8009a52 <UART_SetConfig+0x2262>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a28:	2b09      	cmp	r3, #9
 8009a2a:	d00f      	beq.n	8009a4c <UART_SetConfig+0x225c>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a30:	2b0a      	cmp	r3, #10
 8009a32:	d008      	beq.n	8009a46 <UART_SetConfig+0x2256>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a38:	2b0b      	cmp	r3, #11
 8009a3a:	d101      	bne.n	8009a40 <UART_SetConfig+0x2250>
 8009a3c:	2380      	movs	r3, #128	; 0x80
 8009a3e:	e022      	b.n	8009a86 <UART_SetConfig+0x2296>
 8009a40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a44:	e01f      	b.n	8009a86 <UART_SetConfig+0x2296>
 8009a46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a4a:	e01c      	b.n	8009a86 <UART_SetConfig+0x2296>
 8009a4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a50:	e019      	b.n	8009a86 <UART_SetConfig+0x2296>
 8009a52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a56:	e016      	b.n	8009a86 <UART_SetConfig+0x2296>
 8009a58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009a5c:	e013      	b.n	8009a86 <UART_SetConfig+0x2296>
 8009a5e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8009a62:	e010      	b.n	8009a86 <UART_SetConfig+0x2296>
 8009a64:	f640 43cc 	movw	r3, #3276	; 0xccc
 8009a68:	e00d      	b.n	8009a86 <UART_SetConfig+0x2296>
 8009a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a6e:	e00a      	b.n	8009a86 <UART_SetConfig+0x2296>
 8009a70:	f241 5355 	movw	r3, #5461	; 0x1555
 8009a74:	e007      	b.n	8009a86 <UART_SetConfig+0x2296>
 8009a76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009a7a:	e004      	b.n	8009a86 <UART_SetConfig+0x2296>
 8009a7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009a80:	e001      	b.n	8009a86 <UART_SetConfig+0x2296>
 8009a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	6852      	ldr	r2, [r2, #4]
 8009a8a:	0852      	lsrs	r2, r2, #1
 8009a8c:	441a      	add	r2, r3
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009a9a:	e003      	b.n	8009aa4 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8009aa2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aa6:	2b0f      	cmp	r3, #15
 8009aa8:	d908      	bls.n	8009abc <UART_SetConfig+0x22cc>
 8009aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ab0:	d204      	bcs.n	8009abc <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ab8:	60da      	str	r2, [r3, #12]
 8009aba:	e002      	b.n	8009ac2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2201      	movs	r2, #1
 8009ace:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8009ade:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3740      	adds	r7, #64	; 0x40
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08009aec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009af8:	f003 0301 	and.w	r3, r3, #1
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d00a      	beq.n	8009b16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	430a      	orrs	r2, r1
 8009b14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b1a:	f003 0302 	and.w	r3, r3, #2
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d00a      	beq.n	8009b38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	430a      	orrs	r2, r1
 8009b36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b3c:	f003 0304 	and.w	r3, r3, #4
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d00a      	beq.n	8009b5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	430a      	orrs	r2, r1
 8009b58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b5e:	f003 0308 	and.w	r3, r3, #8
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d00a      	beq.n	8009b7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	430a      	orrs	r2, r1
 8009b7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b80:	f003 0310 	and.w	r3, r3, #16
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d00a      	beq.n	8009b9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	689b      	ldr	r3, [r3, #8]
 8009b8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	430a      	orrs	r2, r1
 8009b9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ba2:	f003 0320 	and.w	r3, r3, #32
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d00a      	beq.n	8009bc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	689b      	ldr	r3, [r3, #8]
 8009bb0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	430a      	orrs	r2, r1
 8009bbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d01a      	beq.n	8009c02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	430a      	orrs	r2, r1
 8009be0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009be6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bea:	d10a      	bne.n	8009c02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	430a      	orrs	r2, r1
 8009c00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d00a      	beq.n	8009c24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	430a      	orrs	r2, r1
 8009c22:	605a      	str	r2, [r3, #4]
  }
}
 8009c24:	bf00      	nop
 8009c26:	370c      	adds	r7, #12
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr

08009c30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b086      	sub	sp, #24
 8009c34:	af02      	add	r7, sp, #8
 8009c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009c40:	f7f8 fa0c 	bl	800205c <HAL_GetTick>
 8009c44:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f003 0308 	and.w	r3, r3, #8
 8009c50:	2b08      	cmp	r3, #8
 8009c52:	d10e      	bne.n	8009c72 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009c58:	9300      	str	r3, [sp, #0]
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 f82c 	bl	8009cc0 <UART_WaitOnFlagUntilTimeout>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d001      	beq.n	8009c72 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c6e:	2303      	movs	r3, #3
 8009c70:	e022      	b.n	8009cb8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f003 0304 	and.w	r3, r3, #4
 8009c7c:	2b04      	cmp	r3, #4
 8009c7e:	d10e      	bne.n	8009c9e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009c84:	9300      	str	r3, [sp, #0]
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 f816 	bl	8009cc0 <UART_WaitOnFlagUntilTimeout>
 8009c94:	4603      	mov	r3, r0
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d001      	beq.n	8009c9e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c9a:	2303      	movs	r3, #3
 8009c9c:	e00c      	b.n	8009cb8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2220      	movs	r2, #32
 8009ca2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2220      	movs	r2, #32
 8009caa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009cb6:	2300      	movs	r3, #0
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3710      	adds	r7, #16
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	60b9      	str	r1, [r7, #8]
 8009cca:	603b      	str	r3, [r7, #0]
 8009ccc:	4613      	mov	r3, r2
 8009cce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cd0:	e062      	b.n	8009d98 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cd2:	69bb      	ldr	r3, [r7, #24]
 8009cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cd8:	d05e      	beq.n	8009d98 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cda:	f7f8 f9bf 	bl	800205c <HAL_GetTick>
 8009cde:	4602      	mov	r2, r0
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	1ad3      	subs	r3, r2, r3
 8009ce4:	69ba      	ldr	r2, [r7, #24]
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d302      	bcc.n	8009cf0 <UART_WaitOnFlagUntilTimeout+0x30>
 8009cea:	69bb      	ldr	r3, [r7, #24]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d11d      	bne.n	8009d2c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	681a      	ldr	r2, [r3, #0]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009cfe:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	689a      	ldr	r2, [r3, #8]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f022 0201 	bic.w	r2, r2, #1
 8009d0e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2220      	movs	r2, #32
 8009d14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2220      	movs	r2, #32
 8009d1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2200      	movs	r2, #0
 8009d24:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009d28:	2303      	movs	r3, #3
 8009d2a:	e045      	b.n	8009db8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f003 0304 	and.w	r3, r3, #4
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d02e      	beq.n	8009d98 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	69db      	ldr	r3, [r3, #28]
 8009d40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d48:	d126      	bne.n	8009d98 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d52:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009d62:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	689a      	ldr	r2, [r3, #8]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f022 0201 	bic.w	r2, r2, #1
 8009d72:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2220      	movs	r2, #32
 8009d78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2220      	movs	r2, #32
 8009d80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2220      	movs	r2, #32
 8009d88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8009d94:	2303      	movs	r3, #3
 8009d96:	e00f      	b.n	8009db8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	69da      	ldr	r2, [r3, #28]
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	4013      	ands	r3, r2
 8009da2:	68ba      	ldr	r2, [r7, #8]
 8009da4:	429a      	cmp	r2, r3
 8009da6:	bf0c      	ite	eq
 8009da8:	2301      	moveq	r3, #1
 8009daa:	2300      	movne	r3, #0
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	461a      	mov	r2, r3
 8009db0:	79fb      	ldrb	r3, [r7, #7]
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d08d      	beq.n	8009cd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009db6:	2300      	movs	r3, #0
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3710      	adds	r7, #16
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009dd6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	6899      	ldr	r1, [r3, #8]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	4b08      	ldr	r3, [pc, #32]	; (8009e04 <UART_EndRxTransfer+0x44>)
 8009de4:	400b      	ands	r3, r1
 8009de6:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2220      	movs	r2, #32
 8009dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2200      	movs	r2, #0
 8009df4:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8009df6:	bf00      	nop
 8009df8:	370c      	adds	r7, #12
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr
 8009e02:	bf00      	nop
 8009e04:	effffffe 	.word	0xeffffffe

08009e08 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b084      	sub	sp, #16
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009e26:	68f8      	ldr	r0, [r7, #12]
 8009e28:	f7fd fcd8 	bl	80077dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e2c:	bf00      	nop
 8009e2e:	3710      	adds	r7, #16
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e4a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2220      	movs	r2, #32
 8009e50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f7fd fcb4 	bl	80077c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e60:	bf00      	nop
 8009e62:	3708      	adds	r7, #8
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b083      	sub	sp, #12
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009e70:	bf00      	nop
 8009e72:	370c      	adds	r7, #12
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr

08009e7c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b083      	sub	sp, #12
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009e84:	bf00      	nop
 8009e86:	370c      	adds	r7, #12
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr

08009e90 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b083      	sub	sp, #12
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009e98:	bf00      	nop
 8009e9a:	370c      	adds	r7, #12
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr

08009ea4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b085      	sub	sp, #20
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d101      	bne.n	8009eba <HAL_UARTEx_DisableFifoMode+0x16>
 8009eb6:	2302      	movs	r3, #2
 8009eb8:	e027      	b.n	8009f0a <HAL_UARTEx_DisableFifoMode+0x66>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2224      	movs	r2, #36	; 0x24
 8009ec6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	681a      	ldr	r2, [r3, #0]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f022 0201 	bic.w	r2, r2, #1
 8009ee0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009ee8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2200      	movs	r2, #0
 8009eee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	68fa      	ldr	r2, [r7, #12]
 8009ef6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2220      	movs	r2, #32
 8009efc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2200      	movs	r2, #0
 8009f04:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009f08:	2300      	movs	r3, #0
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3714      	adds	r7, #20
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f14:	4770      	bx	lr

08009f16 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f16:	b580      	push	{r7, lr}
 8009f18:	b084      	sub	sp, #16
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	6078      	str	r0, [r7, #4]
 8009f1e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d101      	bne.n	8009f2e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009f2a:	2302      	movs	r3, #2
 8009f2c:	e02d      	b.n	8009f8a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2201      	movs	r2, #1
 8009f32:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2224      	movs	r2, #36	; 0x24
 8009f3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f022 0201 	bic.w	r2, r2, #1
 8009f54:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	683a      	ldr	r2, [r7, #0]
 8009f66:	430a      	orrs	r2, r1
 8009f68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 f850 	bl	800a010 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	68fa      	ldr	r2, [r7, #12]
 8009f76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2220      	movs	r2, #32
 8009f7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2200      	movs	r2, #0
 8009f84:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009f88:	2300      	movs	r3, #0
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3710      	adds	r7, #16
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}

08009f92 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f92:	b580      	push	{r7, lr}
 8009f94:	b084      	sub	sp, #16
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
 8009f9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d101      	bne.n	8009faa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009fa6:	2302      	movs	r3, #2
 8009fa8:	e02d      	b.n	800a006 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2201      	movs	r2, #1
 8009fae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2224      	movs	r2, #36	; 0x24
 8009fb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	681a      	ldr	r2, [r3, #0]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f022 0201 	bic.w	r2, r2, #1
 8009fd0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	689b      	ldr	r3, [r3, #8]
 8009fd8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	683a      	ldr	r2, [r7, #0]
 8009fe2:	430a      	orrs	r2, r1
 8009fe4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 f812 	bl	800a010 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	68fa      	ldr	r2, [r7, #12]
 8009ff2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2220      	movs	r2, #32
 8009ff8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2200      	movs	r2, #0
 800a000:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a004:	2300      	movs	r3, #0
}
 800a006:	4618      	mov	r0, r3
 800a008:	3710      	adds	r7, #16
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
	...

0800a010 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a010:	b480      	push	{r7}
 800a012:	b089      	sub	sp, #36	; 0x24
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a018:	4a2f      	ldr	r2, [pc, #188]	; (800a0d8 <UARTEx_SetNbDataToProcess+0xc8>)
 800a01a:	f107 0314 	add.w	r3, r7, #20
 800a01e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a022:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a026:	4a2d      	ldr	r2, [pc, #180]	; (800a0dc <UARTEx_SetNbDataToProcess+0xcc>)
 800a028:	f107 030c 	add.w	r3, r7, #12
 800a02c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a030:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d108      	bne.n	800a04e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2201      	movs	r2, #1
 800a040:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2201      	movs	r2, #1
 800a048:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a04c:	e03d      	b.n	800a0ca <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a04e:	2308      	movs	r3, #8
 800a050:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a052:	2308      	movs	r3, #8
 800a054:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	689b      	ldr	r3, [r3, #8]
 800a05c:	0e5b      	lsrs	r3, r3, #25
 800a05e:	b2db      	uxtb	r3, r3
 800a060:	f003 0307 	and.w	r3, r3, #7
 800a064:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	689b      	ldr	r3, [r3, #8]
 800a06c:	0f5b      	lsrs	r3, r3, #29
 800a06e:	b2db      	uxtb	r3, r3
 800a070:	f003 0307 	and.w	r3, r3, #7
 800a074:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a076:	7fbb      	ldrb	r3, [r7, #30]
 800a078:	7f3a      	ldrb	r2, [r7, #28]
 800a07a:	f107 0120 	add.w	r1, r7, #32
 800a07e:	440a      	add	r2, r1
 800a080:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a084:	fb02 f303 	mul.w	r3, r2, r3
 800a088:	7f3a      	ldrb	r2, [r7, #28]
 800a08a:	f107 0120 	add.w	r1, r7, #32
 800a08e:	440a      	add	r2, r1
 800a090:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a094:	fb93 f3f2 	sdiv	r3, r3, r2
 800a098:	b29a      	uxth	r2, r3
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a0a0:	7ffb      	ldrb	r3, [r7, #31]
 800a0a2:	7f7a      	ldrb	r2, [r7, #29]
 800a0a4:	f107 0120 	add.w	r1, r7, #32
 800a0a8:	440a      	add	r2, r1
 800a0aa:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a0ae:	fb02 f303 	mul.w	r3, r2, r3
 800a0b2:	7f7a      	ldrb	r2, [r7, #29]
 800a0b4:	f107 0120 	add.w	r1, r7, #32
 800a0b8:	440a      	add	r2, r1
 800a0ba:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a0be:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0c2:	b29a      	uxth	r2, r3
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a0ca:	bf00      	nop
 800a0cc:	3724      	adds	r7, #36	; 0x24
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d4:	4770      	bx	lr
 800a0d6:	bf00      	nop
 800a0d8:	0800db34 	.word	0x0800db34
 800a0dc:	0800db3c 	.word	0x0800db3c

0800a0e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a0e0:	b084      	sub	sp, #16
 800a0e2:	b580      	push	{r7, lr}
 800a0e4:	b084      	sub	sp, #16
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
 800a0ea:	f107 001c 	add.w	r0, r7, #28
 800a0ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d120      	bne.n	800a13a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	68da      	ldr	r2, [r3, #12]
 800a108:	4b25      	ldr	r3, [pc, #148]	; (800a1a0 <USB_CoreInit+0xc0>)
 800a10a:	4013      	ands	r3, r2
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	68db      	ldr	r3, [r3, #12]
 800a114:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a11c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d105      	bne.n	800a12e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	68db      	ldr	r3, [r3, #12]
 800a126:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f001 fa66 	bl	800b600 <USB_CoreReset>
 800a134:	4603      	mov	r3, r0
 800a136:	73fb      	strb	r3, [r7, #15]
 800a138:	e01a      	b.n	800a170 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	68db      	ldr	r3, [r3, #12]
 800a13e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f001 fa5a 	bl	800b600 <USB_CoreReset>
 800a14c:	4603      	mov	r3, r0
 800a14e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a152:	2b00      	cmp	r3, #0
 800a154:	d106      	bne.n	800a164 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a15a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	639a      	str	r2, [r3, #56]	; 0x38
 800a162:	e005      	b.n	800a170 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a168:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a172:	2b01      	cmp	r3, #1
 800a174:	d10b      	bne.n	800a18e <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	689b      	ldr	r3, [r3, #8]
 800a17a:	f043 0206 	orr.w	r2, r3, #6
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	689b      	ldr	r3, [r3, #8]
 800a186:	f043 0220 	orr.w	r2, r3, #32
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a18e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a190:	4618      	mov	r0, r3
 800a192:	3710      	adds	r7, #16
 800a194:	46bd      	mov	sp, r7
 800a196:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a19a:	b004      	add	sp, #16
 800a19c:	4770      	bx	lr
 800a19e:	bf00      	nop
 800a1a0:	ffbdffbf 	.word	0xffbdffbf

0800a1a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b087      	sub	sp, #28
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	60f8      	str	r0, [r7, #12]
 800a1ac:	60b9      	str	r1, [r7, #8]
 800a1ae:	4613      	mov	r3, r2
 800a1b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a1b2:	79fb      	ldrb	r3, [r7, #7]
 800a1b4:	2b02      	cmp	r3, #2
 800a1b6:	d165      	bne.n	800a284 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	4a41      	ldr	r2, [pc, #260]	; (800a2c0 <USB_SetTurnaroundTime+0x11c>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d906      	bls.n	800a1ce <USB_SetTurnaroundTime+0x2a>
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	4a40      	ldr	r2, [pc, #256]	; (800a2c4 <USB_SetTurnaroundTime+0x120>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d802      	bhi.n	800a1ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a1c8:	230f      	movs	r3, #15
 800a1ca:	617b      	str	r3, [r7, #20]
 800a1cc:	e062      	b.n	800a294 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	4a3c      	ldr	r2, [pc, #240]	; (800a2c4 <USB_SetTurnaroundTime+0x120>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d906      	bls.n	800a1e4 <USB_SetTurnaroundTime+0x40>
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	4a3b      	ldr	r2, [pc, #236]	; (800a2c8 <USB_SetTurnaroundTime+0x124>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d802      	bhi.n	800a1e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a1de:	230e      	movs	r3, #14
 800a1e0:	617b      	str	r3, [r7, #20]
 800a1e2:	e057      	b.n	800a294 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	4a38      	ldr	r2, [pc, #224]	; (800a2c8 <USB_SetTurnaroundTime+0x124>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d906      	bls.n	800a1fa <USB_SetTurnaroundTime+0x56>
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	4a37      	ldr	r2, [pc, #220]	; (800a2cc <USB_SetTurnaroundTime+0x128>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d802      	bhi.n	800a1fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a1f4:	230d      	movs	r3, #13
 800a1f6:	617b      	str	r3, [r7, #20]
 800a1f8:	e04c      	b.n	800a294 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	4a33      	ldr	r2, [pc, #204]	; (800a2cc <USB_SetTurnaroundTime+0x128>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d906      	bls.n	800a210 <USB_SetTurnaroundTime+0x6c>
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	4a32      	ldr	r2, [pc, #200]	; (800a2d0 <USB_SetTurnaroundTime+0x12c>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d802      	bhi.n	800a210 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a20a:	230c      	movs	r3, #12
 800a20c:	617b      	str	r3, [r7, #20]
 800a20e:	e041      	b.n	800a294 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	4a2f      	ldr	r2, [pc, #188]	; (800a2d0 <USB_SetTurnaroundTime+0x12c>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d906      	bls.n	800a226 <USB_SetTurnaroundTime+0x82>
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	4a2e      	ldr	r2, [pc, #184]	; (800a2d4 <USB_SetTurnaroundTime+0x130>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d802      	bhi.n	800a226 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a220:	230b      	movs	r3, #11
 800a222:	617b      	str	r3, [r7, #20]
 800a224:	e036      	b.n	800a294 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	4a2a      	ldr	r2, [pc, #168]	; (800a2d4 <USB_SetTurnaroundTime+0x130>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d906      	bls.n	800a23c <USB_SetTurnaroundTime+0x98>
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	4a29      	ldr	r2, [pc, #164]	; (800a2d8 <USB_SetTurnaroundTime+0x134>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d802      	bhi.n	800a23c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a236:	230a      	movs	r3, #10
 800a238:	617b      	str	r3, [r7, #20]
 800a23a:	e02b      	b.n	800a294 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	4a26      	ldr	r2, [pc, #152]	; (800a2d8 <USB_SetTurnaroundTime+0x134>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d906      	bls.n	800a252 <USB_SetTurnaroundTime+0xae>
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	4a25      	ldr	r2, [pc, #148]	; (800a2dc <USB_SetTurnaroundTime+0x138>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d802      	bhi.n	800a252 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a24c:	2309      	movs	r3, #9
 800a24e:	617b      	str	r3, [r7, #20]
 800a250:	e020      	b.n	800a294 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	4a21      	ldr	r2, [pc, #132]	; (800a2dc <USB_SetTurnaroundTime+0x138>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d906      	bls.n	800a268 <USB_SetTurnaroundTime+0xc4>
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	4a20      	ldr	r2, [pc, #128]	; (800a2e0 <USB_SetTurnaroundTime+0x13c>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d802      	bhi.n	800a268 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a262:	2308      	movs	r3, #8
 800a264:	617b      	str	r3, [r7, #20]
 800a266:	e015      	b.n	800a294 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	4a1d      	ldr	r2, [pc, #116]	; (800a2e0 <USB_SetTurnaroundTime+0x13c>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d906      	bls.n	800a27e <USB_SetTurnaroundTime+0xda>
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	4a1c      	ldr	r2, [pc, #112]	; (800a2e4 <USB_SetTurnaroundTime+0x140>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d802      	bhi.n	800a27e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a278:	2307      	movs	r3, #7
 800a27a:	617b      	str	r3, [r7, #20]
 800a27c:	e00a      	b.n	800a294 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a27e:	2306      	movs	r3, #6
 800a280:	617b      	str	r3, [r7, #20]
 800a282:	e007      	b.n	800a294 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a284:	79fb      	ldrb	r3, [r7, #7]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d102      	bne.n	800a290 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a28a:	2309      	movs	r3, #9
 800a28c:	617b      	str	r3, [r7, #20]
 800a28e:	e001      	b.n	800a294 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a290:	2309      	movs	r3, #9
 800a292:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	68db      	ldr	r3, [r3, #12]
 800a298:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	68da      	ldr	r2, [r3, #12]
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	029b      	lsls	r3, r3, #10
 800a2a8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a2ac:	431a      	orrs	r2, r3
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a2b2:	2300      	movs	r3, #0
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	371c      	adds	r7, #28
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr
 800a2c0:	00d8acbf 	.word	0x00d8acbf
 800a2c4:	00e4e1bf 	.word	0x00e4e1bf
 800a2c8:	00f423ff 	.word	0x00f423ff
 800a2cc:	0106737f 	.word	0x0106737f
 800a2d0:	011a499f 	.word	0x011a499f
 800a2d4:	01312cff 	.word	0x01312cff
 800a2d8:	014ca43f 	.word	0x014ca43f
 800a2dc:	016e35ff 	.word	0x016e35ff
 800a2e0:	01a6ab1f 	.word	0x01a6ab1f
 800a2e4:	01e847ff 	.word	0x01e847ff

0800a2e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	689b      	ldr	r3, [r3, #8]
 800a2f4:	f043 0201 	orr.w	r2, r3, #1
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a2fc:	2300      	movs	r3, #0
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	370c      	adds	r7, #12
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr

0800a30a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a30a:	b480      	push	{r7}
 800a30c:	b083      	sub	sp, #12
 800a30e:	af00      	add	r7, sp, #0
 800a310:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	689b      	ldr	r3, [r3, #8]
 800a316:	f023 0201 	bic.w	r2, r3, #1
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a31e:	2300      	movs	r3, #0
}
 800a320:	4618      	mov	r0, r3
 800a322:	370c      	adds	r7, #12
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	460b      	mov	r3, r1
 800a336:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	68db      	ldr	r3, [r3, #12]
 800a33c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a344:	78fb      	ldrb	r3, [r7, #3]
 800a346:	2b01      	cmp	r3, #1
 800a348:	d106      	bne.n	800a358 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	68db      	ldr	r3, [r3, #12]
 800a34e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	60da      	str	r2, [r3, #12]
 800a356:	e00b      	b.n	800a370 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a358:	78fb      	ldrb	r3, [r7, #3]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d106      	bne.n	800a36c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	68db      	ldr	r3, [r3, #12]
 800a362:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	60da      	str	r2, [r3, #12]
 800a36a:	e001      	b.n	800a370 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a36c:	2301      	movs	r3, #1
 800a36e:	e003      	b.n	800a378 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a370:	2032      	movs	r0, #50	; 0x32
 800a372:	f7f7 fe7f 	bl	8002074 <HAL_Delay>

  return HAL_OK;
 800a376:	2300      	movs	r3, #0
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3708      	adds	r7, #8
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a380:	b084      	sub	sp, #16
 800a382:	b580      	push	{r7, lr}
 800a384:	b086      	sub	sp, #24
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
 800a38a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a38e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a392:	2300      	movs	r3, #0
 800a394:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a39a:	2300      	movs	r3, #0
 800a39c:	613b      	str	r3, [r7, #16]
 800a39e:	e009      	b.n	800a3b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	3340      	adds	r3, #64	; 0x40
 800a3a6:	009b      	lsls	r3, r3, #2
 800a3a8:	4413      	add	r3, r2
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	613b      	str	r3, [r7, #16]
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	2b0e      	cmp	r3, #14
 800a3b8:	d9f2      	bls.n	800a3a0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a3ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d11c      	bne.n	800a3fa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	68fa      	ldr	r2, [r7, #12]
 800a3ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a3ce:	f043 0302 	orr.w	r3, r3, #2
 800a3d2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3d8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	601a      	str	r2, [r3, #0]
 800a3f8:	e005      	b.n	800a406 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a40c:	461a      	mov	r2, r3
 800a40e:	2300      	movs	r3, #0
 800a410:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a418:	4619      	mov	r1, r3
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a420:	461a      	mov	r2, r3
 800a422:	680b      	ldr	r3, [r1, #0]
 800a424:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a428:	2b01      	cmp	r3, #1
 800a42a:	d10c      	bne.n	800a446 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d104      	bne.n	800a43c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a432:	2100      	movs	r1, #0
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f000 f949 	bl	800a6cc <USB_SetDevSpeed>
 800a43a:	e008      	b.n	800a44e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a43c:	2101      	movs	r1, #1
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 f944 	bl	800a6cc <USB_SetDevSpeed>
 800a444:	e003      	b.n	800a44e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a446:	2103      	movs	r1, #3
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f000 f93f 	bl	800a6cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a44e:	2110      	movs	r1, #16
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f000 f8f3 	bl	800a63c <USB_FlushTxFifo>
 800a456:	4603      	mov	r3, r0
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d001      	beq.n	800a460 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a45c:	2301      	movs	r3, #1
 800a45e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f000 f911 	bl	800a688 <USB_FlushRxFifo>
 800a466:	4603      	mov	r3, r0
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d001      	beq.n	800a470 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a46c:	2301      	movs	r3, #1
 800a46e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a476:	461a      	mov	r2, r3
 800a478:	2300      	movs	r3, #0
 800a47a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a482:	461a      	mov	r2, r3
 800a484:	2300      	movs	r3, #0
 800a486:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a48e:	461a      	mov	r2, r3
 800a490:	2300      	movs	r3, #0
 800a492:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a494:	2300      	movs	r3, #0
 800a496:	613b      	str	r3, [r7, #16]
 800a498:	e043      	b.n	800a522 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	015a      	lsls	r2, r3, #5
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a4ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a4b0:	d118      	bne.n	800a4e4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d10a      	bne.n	800a4ce <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	015a      	lsls	r2, r3, #5
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	4413      	add	r3, r2
 800a4c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a4ca:	6013      	str	r3, [r2, #0]
 800a4cc:	e013      	b.n	800a4f6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	015a      	lsls	r2, r3, #5
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	4413      	add	r3, r2
 800a4d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4da:	461a      	mov	r2, r3
 800a4dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a4e0:	6013      	str	r3, [r2, #0]
 800a4e2:	e008      	b.n	800a4f6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	015a      	lsls	r2, r3, #5
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	4413      	add	r3, r2
 800a4ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	015a      	lsls	r2, r3, #5
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	4413      	add	r3, r2
 800a4fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a502:	461a      	mov	r2, r3
 800a504:	2300      	movs	r3, #0
 800a506:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	015a      	lsls	r2, r3, #5
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	4413      	add	r3, r2
 800a510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a514:	461a      	mov	r2, r3
 800a516:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a51a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	3301      	adds	r3, #1
 800a520:	613b      	str	r3, [r7, #16]
 800a522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a524:	693a      	ldr	r2, [r7, #16]
 800a526:	429a      	cmp	r2, r3
 800a528:	d3b7      	bcc.n	800a49a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a52a:	2300      	movs	r3, #0
 800a52c:	613b      	str	r3, [r7, #16]
 800a52e:	e043      	b.n	800a5b8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	015a      	lsls	r2, r3, #5
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	4413      	add	r3, r2
 800a538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a542:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a546:	d118      	bne.n	800a57a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d10a      	bne.n	800a564 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	015a      	lsls	r2, r3, #5
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	4413      	add	r3, r2
 800a556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a55a:	461a      	mov	r2, r3
 800a55c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a560:	6013      	str	r3, [r2, #0]
 800a562:	e013      	b.n	800a58c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	015a      	lsls	r2, r3, #5
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	4413      	add	r3, r2
 800a56c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a570:	461a      	mov	r2, r3
 800a572:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a576:	6013      	str	r3, [r2, #0]
 800a578:	e008      	b.n	800a58c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	015a      	lsls	r2, r3, #5
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	4413      	add	r3, r2
 800a582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a586:	461a      	mov	r2, r3
 800a588:	2300      	movs	r3, #0
 800a58a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	015a      	lsls	r2, r3, #5
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	4413      	add	r3, r2
 800a594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a598:	461a      	mov	r2, r3
 800a59a:	2300      	movs	r3, #0
 800a59c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	015a      	lsls	r2, r3, #5
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	4413      	add	r3, r2
 800a5a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a5b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	613b      	str	r3, [r7, #16]
 800a5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ba:	693a      	ldr	r2, [r7, #16]
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	d3b7      	bcc.n	800a530 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5c6:	691b      	ldr	r3, [r3, #16]
 800a5c8:	68fa      	ldr	r2, [r7, #12]
 800a5ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a5ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a5d2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a5e0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d105      	bne.n	800a5f4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	699b      	ldr	r3, [r3, #24]
 800a5ec:	f043 0210 	orr.w	r2, r3, #16
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	699a      	ldr	r2, [r3, #24]
 800a5f8:	4b0e      	ldr	r3, [pc, #56]	; (800a634 <USB_DevInit+0x2b4>)
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	687a      	ldr	r2, [r7, #4]
 800a5fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a602:	2b00      	cmp	r3, #0
 800a604:	d005      	beq.n	800a612 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	699b      	ldr	r3, [r3, #24]
 800a60a:	f043 0208 	orr.w	r2, r3, #8
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a614:	2b01      	cmp	r3, #1
 800a616:	d105      	bne.n	800a624 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	699a      	ldr	r2, [r3, #24]
 800a61c:	4b06      	ldr	r3, [pc, #24]	; (800a638 <USB_DevInit+0x2b8>)
 800a61e:	4313      	orrs	r3, r2
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a624:	7dfb      	ldrb	r3, [r7, #23]
}
 800a626:	4618      	mov	r0, r3
 800a628:	3718      	adds	r7, #24
 800a62a:	46bd      	mov	sp, r7
 800a62c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a630:	b004      	add	sp, #16
 800a632:	4770      	bx	lr
 800a634:	803c3800 	.word	0x803c3800
 800a638:	40000004 	.word	0x40000004

0800a63c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b085      	sub	sp, #20
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a646:	2300      	movs	r3, #0
 800a648:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	019b      	lsls	r3, r3, #6
 800a64e:	f043 0220 	orr.w	r2, r3, #32
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	3301      	adds	r3, #1
 800a65a:	60fb      	str	r3, [r7, #12]
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	4a09      	ldr	r2, [pc, #36]	; (800a684 <USB_FlushTxFifo+0x48>)
 800a660:	4293      	cmp	r3, r2
 800a662:	d901      	bls.n	800a668 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a664:	2303      	movs	r3, #3
 800a666:	e006      	b.n	800a676 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	691b      	ldr	r3, [r3, #16]
 800a66c:	f003 0320 	and.w	r3, r3, #32
 800a670:	2b20      	cmp	r3, #32
 800a672:	d0f0      	beq.n	800a656 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a674:	2300      	movs	r3, #0
}
 800a676:	4618      	mov	r0, r3
 800a678:	3714      	adds	r7, #20
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr
 800a682:	bf00      	nop
 800a684:	00030d40 	.word	0x00030d40

0800a688 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a688:	b480      	push	{r7}
 800a68a:	b085      	sub	sp, #20
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a690:	2300      	movs	r3, #0
 800a692:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2210      	movs	r2, #16
 800a698:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	3301      	adds	r3, #1
 800a69e:	60fb      	str	r3, [r7, #12]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	4a09      	ldr	r2, [pc, #36]	; (800a6c8 <USB_FlushRxFifo+0x40>)
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d901      	bls.n	800a6ac <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a6a8:	2303      	movs	r3, #3
 800a6aa:	e006      	b.n	800a6ba <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	691b      	ldr	r3, [r3, #16]
 800a6b0:	f003 0310 	and.w	r3, r3, #16
 800a6b4:	2b10      	cmp	r3, #16
 800a6b6:	d0f0      	beq.n	800a69a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a6b8:	2300      	movs	r3, #0
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3714      	adds	r7, #20
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr
 800a6c6:	bf00      	nop
 800a6c8:	00030d40 	.word	0x00030d40

0800a6cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b085      	sub	sp, #20
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	78fb      	ldrb	r3, [r7, #3]
 800a6e6:	68f9      	ldr	r1, [r7, #12]
 800a6e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a6ec:	4313      	orrs	r3, r2
 800a6ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a6f0:	2300      	movs	r3, #0
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3714      	adds	r7, #20
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr

0800a6fe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a6fe:	b480      	push	{r7}
 800a700:	b087      	sub	sp, #28
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a710:	689b      	ldr	r3, [r3, #8]
 800a712:	f003 0306 	and.w	r3, r3, #6
 800a716:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d102      	bne.n	800a724 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a71e:	2300      	movs	r3, #0
 800a720:	75fb      	strb	r3, [r7, #23]
 800a722:	e00a      	b.n	800a73a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2b02      	cmp	r3, #2
 800a728:	d002      	beq.n	800a730 <USB_GetDevSpeed+0x32>
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2b06      	cmp	r3, #6
 800a72e:	d102      	bne.n	800a736 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a730:	2302      	movs	r3, #2
 800a732:	75fb      	strb	r3, [r7, #23]
 800a734:	e001      	b.n	800a73a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a736:	230f      	movs	r3, #15
 800a738:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a73a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	371c      	adds	r7, #28
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr

0800a748 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a748:	b480      	push	{r7}
 800a74a:	b085      	sub	sp, #20
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	781b      	ldrb	r3, [r3, #0]
 800a75a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	785b      	ldrb	r3, [r3, #1]
 800a760:	2b01      	cmp	r3, #1
 800a762:	d139      	bne.n	800a7d8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a76a:	69da      	ldr	r2, [r3, #28]
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	f003 030f 	and.w	r3, r3, #15
 800a774:	2101      	movs	r1, #1
 800a776:	fa01 f303 	lsl.w	r3, r1, r3
 800a77a:	b29b      	uxth	r3, r3
 800a77c:	68f9      	ldr	r1, [r7, #12]
 800a77e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a782:	4313      	orrs	r3, r2
 800a784:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	015a      	lsls	r2, r3, #5
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	4413      	add	r3, r2
 800a78e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d153      	bne.n	800a844 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	015a      	lsls	r2, r3, #5
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	4413      	add	r3, r2
 800a7a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7a8:	681a      	ldr	r2, [r3, #0]
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	689b      	ldr	r3, [r3, #8]
 800a7ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	78db      	ldrb	r3, [r3, #3]
 800a7b6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a7b8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	059b      	lsls	r3, r3, #22
 800a7be:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a7c0:	431a      	orrs	r2, r3
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	0159      	lsls	r1, r3, #5
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	440b      	add	r3, r1
 800a7ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	4b20      	ldr	r3, [pc, #128]	; (800a854 <USB_ActivateEndpoint+0x10c>)
 800a7d2:	4313      	orrs	r3, r2
 800a7d4:	600b      	str	r3, [r1, #0]
 800a7d6:	e035      	b.n	800a844 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7de:	69da      	ldr	r2, [r3, #28]
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	f003 030f 	and.w	r3, r3, #15
 800a7e8:	2101      	movs	r1, #1
 800a7ea:	fa01 f303 	lsl.w	r3, r1, r3
 800a7ee:	041b      	lsls	r3, r3, #16
 800a7f0:	68f9      	ldr	r1, [r7, #12]
 800a7f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	015a      	lsls	r2, r3, #5
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	4413      	add	r3, r2
 800a802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d119      	bne.n	800a844 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	015a      	lsls	r2, r3, #5
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	4413      	add	r3, r2
 800a818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a81c:	681a      	ldr	r2, [r3, #0]
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	689b      	ldr	r3, [r3, #8]
 800a822:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	78db      	ldrb	r3, [r3, #3]
 800a82a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a82c:	430b      	orrs	r3, r1
 800a82e:	431a      	orrs	r2, r3
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	0159      	lsls	r1, r3, #5
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	440b      	add	r3, r1
 800a838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a83c:	4619      	mov	r1, r3
 800a83e:	4b05      	ldr	r3, [pc, #20]	; (800a854 <USB_ActivateEndpoint+0x10c>)
 800a840:	4313      	orrs	r3, r2
 800a842:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a844:	2300      	movs	r3, #0
}
 800a846:	4618      	mov	r0, r3
 800a848:	3714      	adds	r7, #20
 800a84a:	46bd      	mov	sp, r7
 800a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a850:	4770      	bx	lr
 800a852:	bf00      	nop
 800a854:	10008000 	.word	0x10008000

0800a858 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a858:	b480      	push	{r7}
 800a85a:	b085      	sub	sp, #20
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
 800a860:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	785b      	ldrb	r3, [r3, #1]
 800a870:	2b01      	cmp	r3, #1
 800a872:	d135      	bne.n	800a8e0 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a87a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	781b      	ldrb	r3, [r3, #0]
 800a880:	f003 030f 	and.w	r3, r3, #15
 800a884:	2101      	movs	r1, #1
 800a886:	fa01 f303 	lsl.w	r3, r1, r3
 800a88a:	b29b      	uxth	r3, r3
 800a88c:	43db      	mvns	r3, r3
 800a88e:	68f9      	ldr	r1, [r7, #12]
 800a890:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a894:	4013      	ands	r3, r2
 800a896:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a89e:	69da      	ldr	r2, [r3, #28]
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	781b      	ldrb	r3, [r3, #0]
 800a8a4:	f003 030f 	and.w	r3, r3, #15
 800a8a8:	2101      	movs	r1, #1
 800a8aa:	fa01 f303 	lsl.w	r3, r1, r3
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	43db      	mvns	r3, r3
 800a8b2:	68f9      	ldr	r1, [r7, #12]
 800a8b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8b8:	4013      	ands	r3, r2
 800a8ba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	015a      	lsls	r2, r3, #5
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	4413      	add	r3, r2
 800a8c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8c8:	681a      	ldr	r2, [r3, #0]
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	0159      	lsls	r1, r3, #5
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	440b      	add	r3, r1
 800a8d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	4b1f      	ldr	r3, [pc, #124]	; (800a958 <USB_DeactivateEndpoint+0x100>)
 800a8da:	4013      	ands	r3, r2
 800a8dc:	600b      	str	r3, [r1, #0]
 800a8de:	e034      	b.n	800a94a <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	781b      	ldrb	r3, [r3, #0]
 800a8ec:	f003 030f 	and.w	r3, r3, #15
 800a8f0:	2101      	movs	r1, #1
 800a8f2:	fa01 f303 	lsl.w	r3, r1, r3
 800a8f6:	041b      	lsls	r3, r3, #16
 800a8f8:	43db      	mvns	r3, r3
 800a8fa:	68f9      	ldr	r1, [r7, #12]
 800a8fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a900:	4013      	ands	r3, r2
 800a902:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a90a:	69da      	ldr	r2, [r3, #28]
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	781b      	ldrb	r3, [r3, #0]
 800a910:	f003 030f 	and.w	r3, r3, #15
 800a914:	2101      	movs	r1, #1
 800a916:	fa01 f303 	lsl.w	r3, r1, r3
 800a91a:	041b      	lsls	r3, r3, #16
 800a91c:	43db      	mvns	r3, r3
 800a91e:	68f9      	ldr	r1, [r7, #12]
 800a920:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a924:	4013      	ands	r3, r2
 800a926:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	015a      	lsls	r2, r3, #5
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	4413      	add	r3, r2
 800a930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	0159      	lsls	r1, r3, #5
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	440b      	add	r3, r1
 800a93e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a942:	4619      	mov	r1, r3
 800a944:	4b05      	ldr	r3, [pc, #20]	; (800a95c <USB_DeactivateEndpoint+0x104>)
 800a946:	4013      	ands	r3, r2
 800a948:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a94a:	2300      	movs	r3, #0
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3714      	adds	r7, #20
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr
 800a958:	ec337800 	.word	0xec337800
 800a95c:	eff37800 	.word	0xeff37800

0800a960 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b08a      	sub	sp, #40	; 0x28
 800a964:	af02      	add	r7, sp, #8
 800a966:	60f8      	str	r0, [r7, #12]
 800a968:	60b9      	str	r1, [r7, #8]
 800a96a:	4613      	mov	r3, r2
 800a96c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	781b      	ldrb	r3, [r3, #0]
 800a976:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	785b      	ldrb	r3, [r3, #1]
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	f040 8163 	bne.w	800ac48 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	695b      	ldr	r3, [r3, #20]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d132      	bne.n	800a9f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a98a:	69bb      	ldr	r3, [r7, #24]
 800a98c:	015a      	lsls	r2, r3, #5
 800a98e:	69fb      	ldr	r3, [r7, #28]
 800a990:	4413      	add	r3, r2
 800a992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a996:	691a      	ldr	r2, [r3, #16]
 800a998:	69bb      	ldr	r3, [r7, #24]
 800a99a:	0159      	lsls	r1, r3, #5
 800a99c:	69fb      	ldr	r3, [r7, #28]
 800a99e:	440b      	add	r3, r1
 800a9a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	4ba5      	ldr	r3, [pc, #660]	; (800ac3c <USB_EPStartXfer+0x2dc>)
 800a9a8:	4013      	ands	r3, r2
 800a9aa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a9ac:	69bb      	ldr	r3, [r7, #24]
 800a9ae:	015a      	lsls	r2, r3, #5
 800a9b0:	69fb      	ldr	r3, [r7, #28]
 800a9b2:	4413      	add	r3, r2
 800a9b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9b8:	691b      	ldr	r3, [r3, #16]
 800a9ba:	69ba      	ldr	r2, [r7, #24]
 800a9bc:	0151      	lsls	r1, r2, #5
 800a9be:	69fa      	ldr	r2, [r7, #28]
 800a9c0:	440a      	add	r2, r1
 800a9c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a9ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a9cc:	69bb      	ldr	r3, [r7, #24]
 800a9ce:	015a      	lsls	r2, r3, #5
 800a9d0:	69fb      	ldr	r3, [r7, #28]
 800a9d2:	4413      	add	r3, r2
 800a9d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9d8:	691a      	ldr	r2, [r3, #16]
 800a9da:	69bb      	ldr	r3, [r7, #24]
 800a9dc:	0159      	lsls	r1, r3, #5
 800a9de:	69fb      	ldr	r3, [r7, #28]
 800a9e0:	440b      	add	r3, r1
 800a9e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	4b95      	ldr	r3, [pc, #596]	; (800ac40 <USB_EPStartXfer+0x2e0>)
 800a9ea:	4013      	ands	r3, r2
 800a9ec:	610b      	str	r3, [r1, #16]
 800a9ee:	e074      	b.n	800aada <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a9f0:	69bb      	ldr	r3, [r7, #24]
 800a9f2:	015a      	lsls	r2, r3, #5
 800a9f4:	69fb      	ldr	r3, [r7, #28]
 800a9f6:	4413      	add	r3, r2
 800a9f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9fc:	691a      	ldr	r2, [r3, #16]
 800a9fe:	69bb      	ldr	r3, [r7, #24]
 800aa00:	0159      	lsls	r1, r3, #5
 800aa02:	69fb      	ldr	r3, [r7, #28]
 800aa04:	440b      	add	r3, r1
 800aa06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa0a:	4619      	mov	r1, r3
 800aa0c:	4b8c      	ldr	r3, [pc, #560]	; (800ac40 <USB_EPStartXfer+0x2e0>)
 800aa0e:	4013      	ands	r3, r2
 800aa10:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aa12:	69bb      	ldr	r3, [r7, #24]
 800aa14:	015a      	lsls	r2, r3, #5
 800aa16:	69fb      	ldr	r3, [r7, #28]
 800aa18:	4413      	add	r3, r2
 800aa1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa1e:	691a      	ldr	r2, [r3, #16]
 800aa20:	69bb      	ldr	r3, [r7, #24]
 800aa22:	0159      	lsls	r1, r3, #5
 800aa24:	69fb      	ldr	r3, [r7, #28]
 800aa26:	440b      	add	r3, r1
 800aa28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	4b83      	ldr	r3, [pc, #524]	; (800ac3c <USB_EPStartXfer+0x2dc>)
 800aa30:	4013      	ands	r3, r2
 800aa32:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800aa34:	69bb      	ldr	r3, [r7, #24]
 800aa36:	015a      	lsls	r2, r3, #5
 800aa38:	69fb      	ldr	r3, [r7, #28]
 800aa3a:	4413      	add	r3, r2
 800aa3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa40:	691a      	ldr	r2, [r3, #16]
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	6959      	ldr	r1, [r3, #20]
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	689b      	ldr	r3, [r3, #8]
 800aa4a:	440b      	add	r3, r1
 800aa4c:	1e59      	subs	r1, r3, #1
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	689b      	ldr	r3, [r3, #8]
 800aa52:	fbb1 f3f3 	udiv	r3, r1, r3
 800aa56:	04d9      	lsls	r1, r3, #19
 800aa58:	4b7a      	ldr	r3, [pc, #488]	; (800ac44 <USB_EPStartXfer+0x2e4>)
 800aa5a:	400b      	ands	r3, r1
 800aa5c:	69b9      	ldr	r1, [r7, #24]
 800aa5e:	0148      	lsls	r0, r1, #5
 800aa60:	69f9      	ldr	r1, [r7, #28]
 800aa62:	4401      	add	r1, r0
 800aa64:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800aa6c:	69bb      	ldr	r3, [r7, #24]
 800aa6e:	015a      	lsls	r2, r3, #5
 800aa70:	69fb      	ldr	r3, [r7, #28]
 800aa72:	4413      	add	r3, r2
 800aa74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa78:	691a      	ldr	r2, [r3, #16]
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	695b      	ldr	r3, [r3, #20]
 800aa7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa82:	69b9      	ldr	r1, [r7, #24]
 800aa84:	0148      	lsls	r0, r1, #5
 800aa86:	69f9      	ldr	r1, [r7, #28]
 800aa88:	4401      	add	r1, r0
 800aa8a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	78db      	ldrb	r3, [r3, #3]
 800aa96:	2b01      	cmp	r3, #1
 800aa98:	d11f      	bne.n	800aada <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800aa9a:	69bb      	ldr	r3, [r7, #24]
 800aa9c:	015a      	lsls	r2, r3, #5
 800aa9e:	69fb      	ldr	r3, [r7, #28]
 800aaa0:	4413      	add	r3, r2
 800aaa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaa6:	691b      	ldr	r3, [r3, #16]
 800aaa8:	69ba      	ldr	r2, [r7, #24]
 800aaaa:	0151      	lsls	r1, r2, #5
 800aaac:	69fa      	ldr	r2, [r7, #28]
 800aaae:	440a      	add	r2, r1
 800aab0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aab4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800aab8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800aaba:	69bb      	ldr	r3, [r7, #24]
 800aabc:	015a      	lsls	r2, r3, #5
 800aabe:	69fb      	ldr	r3, [r7, #28]
 800aac0:	4413      	add	r3, r2
 800aac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aac6:	691b      	ldr	r3, [r3, #16]
 800aac8:	69ba      	ldr	r2, [r7, #24]
 800aaca:	0151      	lsls	r1, r2, #5
 800aacc:	69fa      	ldr	r2, [r7, #28]
 800aace:	440a      	add	r2, r1
 800aad0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aad4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aad8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800aada:	79fb      	ldrb	r3, [r7, #7]
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d14b      	bne.n	800ab78 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	691b      	ldr	r3, [r3, #16]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d009      	beq.n	800aafc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800aae8:	69bb      	ldr	r3, [r7, #24]
 800aaea:	015a      	lsls	r2, r3, #5
 800aaec:	69fb      	ldr	r3, [r7, #28]
 800aaee:	4413      	add	r3, r2
 800aaf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaf4:	461a      	mov	r2, r3
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	691b      	ldr	r3, [r3, #16]
 800aafa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	78db      	ldrb	r3, [r3, #3]
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d128      	bne.n	800ab56 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ab04:	69fb      	ldr	r3, [r7, #28]
 800ab06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab0a:	689b      	ldr	r3, [r3, #8]
 800ab0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d110      	bne.n	800ab36 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ab14:	69bb      	ldr	r3, [r7, #24]
 800ab16:	015a      	lsls	r2, r3, #5
 800ab18:	69fb      	ldr	r3, [r7, #28]
 800ab1a:	4413      	add	r3, r2
 800ab1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	69ba      	ldr	r2, [r7, #24]
 800ab24:	0151      	lsls	r1, r2, #5
 800ab26:	69fa      	ldr	r2, [r7, #28]
 800ab28:	440a      	add	r2, r1
 800ab2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ab32:	6013      	str	r3, [r2, #0]
 800ab34:	e00f      	b.n	800ab56 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ab36:	69bb      	ldr	r3, [r7, #24]
 800ab38:	015a      	lsls	r2, r3, #5
 800ab3a:	69fb      	ldr	r3, [r7, #28]
 800ab3c:	4413      	add	r3, r2
 800ab3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	69ba      	ldr	r2, [r7, #24]
 800ab46:	0151      	lsls	r1, r2, #5
 800ab48:	69fa      	ldr	r2, [r7, #28]
 800ab4a:	440a      	add	r2, r1
 800ab4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab54:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ab56:	69bb      	ldr	r3, [r7, #24]
 800ab58:	015a      	lsls	r2, r3, #5
 800ab5a:	69fb      	ldr	r3, [r7, #28]
 800ab5c:	4413      	add	r3, r2
 800ab5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	69ba      	ldr	r2, [r7, #24]
 800ab66:	0151      	lsls	r1, r2, #5
 800ab68:	69fa      	ldr	r2, [r7, #28]
 800ab6a:	440a      	add	r2, r1
 800ab6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ab74:	6013      	str	r3, [r2, #0]
 800ab76:	e133      	b.n	800ade0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ab78:	69bb      	ldr	r3, [r7, #24]
 800ab7a:	015a      	lsls	r2, r3, #5
 800ab7c:	69fb      	ldr	r3, [r7, #28]
 800ab7e:	4413      	add	r3, r2
 800ab80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	69ba      	ldr	r2, [r7, #24]
 800ab88:	0151      	lsls	r1, r2, #5
 800ab8a:	69fa      	ldr	r2, [r7, #28]
 800ab8c:	440a      	add	r2, r1
 800ab8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ab96:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	78db      	ldrb	r3, [r3, #3]
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	d015      	beq.n	800abcc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	695b      	ldr	r3, [r3, #20]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	f000 811b 	beq.w	800ade0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800abaa:	69fb      	ldr	r3, [r7, #28]
 800abac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	781b      	ldrb	r3, [r3, #0]
 800abb6:	f003 030f 	and.w	r3, r3, #15
 800abba:	2101      	movs	r1, #1
 800abbc:	fa01 f303 	lsl.w	r3, r1, r3
 800abc0:	69f9      	ldr	r1, [r7, #28]
 800abc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800abc6:	4313      	orrs	r3, r2
 800abc8:	634b      	str	r3, [r1, #52]	; 0x34
 800abca:	e109      	b.n	800ade0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800abcc:	69fb      	ldr	r3, [r7, #28]
 800abce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abd2:	689b      	ldr	r3, [r3, #8]
 800abd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d110      	bne.n	800abfe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800abdc:	69bb      	ldr	r3, [r7, #24]
 800abde:	015a      	lsls	r2, r3, #5
 800abe0:	69fb      	ldr	r3, [r7, #28]
 800abe2:	4413      	add	r3, r2
 800abe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	69ba      	ldr	r2, [r7, #24]
 800abec:	0151      	lsls	r1, r2, #5
 800abee:	69fa      	ldr	r2, [r7, #28]
 800abf0:	440a      	add	r2, r1
 800abf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abf6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800abfa:	6013      	str	r3, [r2, #0]
 800abfc:	e00f      	b.n	800ac1e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800abfe:	69bb      	ldr	r3, [r7, #24]
 800ac00:	015a      	lsls	r2, r3, #5
 800ac02:	69fb      	ldr	r3, [r7, #28]
 800ac04:	4413      	add	r3, r2
 800ac06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	69ba      	ldr	r2, [r7, #24]
 800ac0e:	0151      	lsls	r1, r2, #5
 800ac10:	69fa      	ldr	r2, [r7, #28]
 800ac12:	440a      	add	r2, r1
 800ac14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac1c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	68d9      	ldr	r1, [r3, #12]
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	781a      	ldrb	r2, [r3, #0]
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	695b      	ldr	r3, [r3, #20]
 800ac2a:	b298      	uxth	r0, r3
 800ac2c:	79fb      	ldrb	r3, [r7, #7]
 800ac2e:	9300      	str	r3, [sp, #0]
 800ac30:	4603      	mov	r3, r0
 800ac32:	68f8      	ldr	r0, [r7, #12]
 800ac34:	f000 fa38 	bl	800b0a8 <USB_WritePacket>
 800ac38:	e0d2      	b.n	800ade0 <USB_EPStartXfer+0x480>
 800ac3a:	bf00      	nop
 800ac3c:	e007ffff 	.word	0xe007ffff
 800ac40:	fff80000 	.word	0xfff80000
 800ac44:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ac48:	69bb      	ldr	r3, [r7, #24]
 800ac4a:	015a      	lsls	r2, r3, #5
 800ac4c:	69fb      	ldr	r3, [r7, #28]
 800ac4e:	4413      	add	r3, r2
 800ac50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac54:	691a      	ldr	r2, [r3, #16]
 800ac56:	69bb      	ldr	r3, [r7, #24]
 800ac58:	0159      	lsls	r1, r3, #5
 800ac5a:	69fb      	ldr	r3, [r7, #28]
 800ac5c:	440b      	add	r3, r1
 800ac5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac62:	4619      	mov	r1, r3
 800ac64:	4b61      	ldr	r3, [pc, #388]	; (800adec <USB_EPStartXfer+0x48c>)
 800ac66:	4013      	ands	r3, r2
 800ac68:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ac6a:	69bb      	ldr	r3, [r7, #24]
 800ac6c:	015a      	lsls	r2, r3, #5
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	4413      	add	r3, r2
 800ac72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac76:	691a      	ldr	r2, [r3, #16]
 800ac78:	69bb      	ldr	r3, [r7, #24]
 800ac7a:	0159      	lsls	r1, r3, #5
 800ac7c:	69fb      	ldr	r3, [r7, #28]
 800ac7e:	440b      	add	r3, r1
 800ac80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac84:	4619      	mov	r1, r3
 800ac86:	4b5a      	ldr	r3, [pc, #360]	; (800adf0 <USB_EPStartXfer+0x490>)
 800ac88:	4013      	ands	r3, r2
 800ac8a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	695b      	ldr	r3, [r3, #20]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d123      	bne.n	800acdc <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ac94:	69bb      	ldr	r3, [r7, #24]
 800ac96:	015a      	lsls	r2, r3, #5
 800ac98:	69fb      	ldr	r3, [r7, #28]
 800ac9a:	4413      	add	r3, r2
 800ac9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aca0:	691a      	ldr	r2, [r3, #16]
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	689b      	ldr	r3, [r3, #8]
 800aca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800acaa:	69b9      	ldr	r1, [r7, #24]
 800acac:	0148      	lsls	r0, r1, #5
 800acae:	69f9      	ldr	r1, [r7, #28]
 800acb0:	4401      	add	r1, r0
 800acb2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800acb6:	4313      	orrs	r3, r2
 800acb8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800acba:	69bb      	ldr	r3, [r7, #24]
 800acbc:	015a      	lsls	r2, r3, #5
 800acbe:	69fb      	ldr	r3, [r7, #28]
 800acc0:	4413      	add	r3, r2
 800acc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acc6:	691b      	ldr	r3, [r3, #16]
 800acc8:	69ba      	ldr	r2, [r7, #24]
 800acca:	0151      	lsls	r1, r2, #5
 800accc:	69fa      	ldr	r2, [r7, #28]
 800acce:	440a      	add	r2, r1
 800acd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800acd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800acd8:	6113      	str	r3, [r2, #16]
 800acda:	e033      	b.n	800ad44 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	695a      	ldr	r2, [r3, #20]
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	689b      	ldr	r3, [r3, #8]
 800ace4:	4413      	add	r3, r2
 800ace6:	1e5a      	subs	r2, r3, #1
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	689b      	ldr	r3, [r3, #8]
 800acec:	fbb2 f3f3 	udiv	r3, r2, r3
 800acf0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800acf2:	69bb      	ldr	r3, [r7, #24]
 800acf4:	015a      	lsls	r2, r3, #5
 800acf6:	69fb      	ldr	r3, [r7, #28]
 800acf8:	4413      	add	r3, r2
 800acfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acfe:	691a      	ldr	r2, [r3, #16]
 800ad00:	8afb      	ldrh	r3, [r7, #22]
 800ad02:	04d9      	lsls	r1, r3, #19
 800ad04:	4b3b      	ldr	r3, [pc, #236]	; (800adf4 <USB_EPStartXfer+0x494>)
 800ad06:	400b      	ands	r3, r1
 800ad08:	69b9      	ldr	r1, [r7, #24]
 800ad0a:	0148      	lsls	r0, r1, #5
 800ad0c:	69f9      	ldr	r1, [r7, #28]
 800ad0e:	4401      	add	r1, r0
 800ad10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ad14:	4313      	orrs	r3, r2
 800ad16:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800ad18:	69bb      	ldr	r3, [r7, #24]
 800ad1a:	015a      	lsls	r2, r3, #5
 800ad1c:	69fb      	ldr	r3, [r7, #28]
 800ad1e:	4413      	add	r3, r2
 800ad20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad24:	691a      	ldr	r2, [r3, #16]
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	689b      	ldr	r3, [r3, #8]
 800ad2a:	8af9      	ldrh	r1, [r7, #22]
 800ad2c:	fb01 f303 	mul.w	r3, r1, r3
 800ad30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad34:	69b9      	ldr	r1, [r7, #24]
 800ad36:	0148      	lsls	r0, r1, #5
 800ad38:	69f9      	ldr	r1, [r7, #28]
 800ad3a:	4401      	add	r1, r0
 800ad3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ad40:	4313      	orrs	r3, r2
 800ad42:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ad44:	79fb      	ldrb	r3, [r7, #7]
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	d10d      	bne.n	800ad66 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	68db      	ldr	r3, [r3, #12]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d009      	beq.n	800ad66 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	68d9      	ldr	r1, [r3, #12]
 800ad56:	69bb      	ldr	r3, [r7, #24]
 800ad58:	015a      	lsls	r2, r3, #5
 800ad5a:	69fb      	ldr	r3, [r7, #28]
 800ad5c:	4413      	add	r3, r2
 800ad5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad62:	460a      	mov	r2, r1
 800ad64:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	78db      	ldrb	r3, [r3, #3]
 800ad6a:	2b01      	cmp	r3, #1
 800ad6c:	d128      	bne.n	800adc0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ad6e:	69fb      	ldr	r3, [r7, #28]
 800ad70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad74:	689b      	ldr	r3, [r3, #8]
 800ad76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d110      	bne.n	800ada0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ad7e:	69bb      	ldr	r3, [r7, #24]
 800ad80:	015a      	lsls	r2, r3, #5
 800ad82:	69fb      	ldr	r3, [r7, #28]
 800ad84:	4413      	add	r3, r2
 800ad86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	69ba      	ldr	r2, [r7, #24]
 800ad8e:	0151      	lsls	r1, r2, #5
 800ad90:	69fa      	ldr	r2, [r7, #28]
 800ad92:	440a      	add	r2, r1
 800ad94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ad9c:	6013      	str	r3, [r2, #0]
 800ad9e:	e00f      	b.n	800adc0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ada0:	69bb      	ldr	r3, [r7, #24]
 800ada2:	015a      	lsls	r2, r3, #5
 800ada4:	69fb      	ldr	r3, [r7, #28]
 800ada6:	4413      	add	r3, r2
 800ada8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	69ba      	ldr	r2, [r7, #24]
 800adb0:	0151      	lsls	r1, r2, #5
 800adb2:	69fa      	ldr	r2, [r7, #28]
 800adb4:	440a      	add	r2, r1
 800adb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800adbe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800adc0:	69bb      	ldr	r3, [r7, #24]
 800adc2:	015a      	lsls	r2, r3, #5
 800adc4:	69fb      	ldr	r3, [r7, #28]
 800adc6:	4413      	add	r3, r2
 800adc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	69ba      	ldr	r2, [r7, #24]
 800add0:	0151      	lsls	r1, r2, #5
 800add2:	69fa      	ldr	r2, [r7, #28]
 800add4:	440a      	add	r2, r1
 800add6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800adde:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ade0:	2300      	movs	r3, #0
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3720      	adds	r7, #32
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	fff80000 	.word	0xfff80000
 800adf0:	e007ffff 	.word	0xe007ffff
 800adf4:	1ff80000 	.word	0x1ff80000

0800adf8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b087      	sub	sp, #28
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	60f8      	str	r0, [r7, #12]
 800ae00:	60b9      	str	r1, [r7, #8]
 800ae02:	4613      	mov	r3, r2
 800ae04:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	781b      	ldrb	r3, [r3, #0]
 800ae0e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	785b      	ldrb	r3, [r3, #1]
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	f040 80cd 	bne.w	800afb4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	695b      	ldr	r3, [r3, #20]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d132      	bne.n	800ae88 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	015a      	lsls	r2, r3, #5
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	4413      	add	r3, r2
 800ae2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae2e:	691a      	ldr	r2, [r3, #16]
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	0159      	lsls	r1, r3, #5
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	440b      	add	r3, r1
 800ae38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	4b98      	ldr	r3, [pc, #608]	; (800b0a0 <USB_EP0StartXfer+0x2a8>)
 800ae40:	4013      	ands	r3, r2
 800ae42:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	015a      	lsls	r2, r3, #5
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	4413      	add	r3, r2
 800ae4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae50:	691b      	ldr	r3, [r3, #16]
 800ae52:	693a      	ldr	r2, [r7, #16]
 800ae54:	0151      	lsls	r1, r2, #5
 800ae56:	697a      	ldr	r2, [r7, #20]
 800ae58:	440a      	add	r2, r1
 800ae5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ae62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	015a      	lsls	r2, r3, #5
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	4413      	add	r3, r2
 800ae6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae70:	691a      	ldr	r2, [r3, #16]
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	0159      	lsls	r1, r3, #5
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	440b      	add	r3, r1
 800ae7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae7e:	4619      	mov	r1, r3
 800ae80:	4b88      	ldr	r3, [pc, #544]	; (800b0a4 <USB_EP0StartXfer+0x2ac>)
 800ae82:	4013      	ands	r3, r2
 800ae84:	610b      	str	r3, [r1, #16]
 800ae86:	e04e      	b.n	800af26 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	015a      	lsls	r2, r3, #5
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	4413      	add	r3, r2
 800ae90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae94:	691a      	ldr	r2, [r3, #16]
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	0159      	lsls	r1, r3, #5
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	440b      	add	r3, r1
 800ae9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aea2:	4619      	mov	r1, r3
 800aea4:	4b7f      	ldr	r3, [pc, #508]	; (800b0a4 <USB_EP0StartXfer+0x2ac>)
 800aea6:	4013      	ands	r3, r2
 800aea8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	015a      	lsls	r2, r3, #5
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	4413      	add	r3, r2
 800aeb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeb6:	691a      	ldr	r2, [r3, #16]
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	0159      	lsls	r1, r3, #5
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	440b      	add	r3, r1
 800aec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aec4:	4619      	mov	r1, r3
 800aec6:	4b76      	ldr	r3, [pc, #472]	; (800b0a0 <USB_EP0StartXfer+0x2a8>)
 800aec8:	4013      	ands	r3, r2
 800aeca:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	695a      	ldr	r2, [r3, #20]
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	689b      	ldr	r3, [r3, #8]
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d903      	bls.n	800aee0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	689a      	ldr	r2, [r3, #8]
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	015a      	lsls	r2, r3, #5
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	4413      	add	r3, r2
 800aee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeec:	691b      	ldr	r3, [r3, #16]
 800aeee:	693a      	ldr	r2, [r7, #16]
 800aef0:	0151      	lsls	r1, r2, #5
 800aef2:	697a      	ldr	r2, [r7, #20]
 800aef4:	440a      	add	r2, r1
 800aef6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aefa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aefe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	015a      	lsls	r2, r3, #5
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	4413      	add	r3, r2
 800af08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af0c:	691a      	ldr	r2, [r3, #16]
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	695b      	ldr	r3, [r3, #20]
 800af12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af16:	6939      	ldr	r1, [r7, #16]
 800af18:	0148      	lsls	r0, r1, #5
 800af1a:	6979      	ldr	r1, [r7, #20]
 800af1c:	4401      	add	r1, r0
 800af1e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800af22:	4313      	orrs	r3, r2
 800af24:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800af26:	79fb      	ldrb	r3, [r7, #7]
 800af28:	2b01      	cmp	r3, #1
 800af2a:	d11e      	bne.n	800af6a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	691b      	ldr	r3, [r3, #16]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d009      	beq.n	800af48 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	015a      	lsls	r2, r3, #5
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	4413      	add	r3, r2
 800af3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af40:	461a      	mov	r2, r3
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	691b      	ldr	r3, [r3, #16]
 800af46:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	015a      	lsls	r2, r3, #5
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	4413      	add	r3, r2
 800af50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	693a      	ldr	r2, [r7, #16]
 800af58:	0151      	lsls	r1, r2, #5
 800af5a:	697a      	ldr	r2, [r7, #20]
 800af5c:	440a      	add	r2, r1
 800af5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800af66:	6013      	str	r3, [r2, #0]
 800af68:	e092      	b.n	800b090 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	015a      	lsls	r2, r3, #5
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	4413      	add	r3, r2
 800af72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	693a      	ldr	r2, [r7, #16]
 800af7a:	0151      	lsls	r1, r2, #5
 800af7c:	697a      	ldr	r2, [r7, #20]
 800af7e:	440a      	add	r2, r1
 800af80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800af88:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	695b      	ldr	r3, [r3, #20]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d07e      	beq.n	800b090 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	f003 030f 	and.w	r3, r3, #15
 800afa2:	2101      	movs	r1, #1
 800afa4:	fa01 f303 	lsl.w	r3, r1, r3
 800afa8:	6979      	ldr	r1, [r7, #20]
 800afaa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800afae:	4313      	orrs	r3, r2
 800afb0:	634b      	str	r3, [r1, #52]	; 0x34
 800afb2:	e06d      	b.n	800b090 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	015a      	lsls	r2, r3, #5
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	4413      	add	r3, r2
 800afbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afc0:	691a      	ldr	r2, [r3, #16]
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	0159      	lsls	r1, r3, #5
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	440b      	add	r3, r1
 800afca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afce:	4619      	mov	r1, r3
 800afd0:	4b34      	ldr	r3, [pc, #208]	; (800b0a4 <USB_EP0StartXfer+0x2ac>)
 800afd2:	4013      	ands	r3, r2
 800afd4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	015a      	lsls	r2, r3, #5
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	4413      	add	r3, r2
 800afde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afe2:	691a      	ldr	r2, [r3, #16]
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	0159      	lsls	r1, r3, #5
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	440b      	add	r3, r1
 800afec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aff0:	4619      	mov	r1, r3
 800aff2:	4b2b      	ldr	r3, [pc, #172]	; (800b0a0 <USB_EP0StartXfer+0x2a8>)
 800aff4:	4013      	ands	r3, r2
 800aff6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	695b      	ldr	r3, [r3, #20]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d003      	beq.n	800b008 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	689a      	ldr	r2, [r3, #8]
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	015a      	lsls	r2, r3, #5
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	4413      	add	r3, r2
 800b010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b014:	691b      	ldr	r3, [r3, #16]
 800b016:	693a      	ldr	r2, [r7, #16]
 800b018:	0151      	lsls	r1, r2, #5
 800b01a:	697a      	ldr	r2, [r7, #20]
 800b01c:	440a      	add	r2, r1
 800b01e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b022:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b026:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	015a      	lsls	r2, r3, #5
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	4413      	add	r3, r2
 800b030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b034:	691a      	ldr	r2, [r3, #16]
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	689b      	ldr	r3, [r3, #8]
 800b03a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b03e:	6939      	ldr	r1, [r7, #16]
 800b040:	0148      	lsls	r0, r1, #5
 800b042:	6979      	ldr	r1, [r7, #20]
 800b044:	4401      	add	r1, r0
 800b046:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b04a:	4313      	orrs	r3, r2
 800b04c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b04e:	79fb      	ldrb	r3, [r7, #7]
 800b050:	2b01      	cmp	r3, #1
 800b052:	d10d      	bne.n	800b070 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	68db      	ldr	r3, [r3, #12]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d009      	beq.n	800b070 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	68d9      	ldr	r1, [r3, #12]
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	015a      	lsls	r2, r3, #5
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	4413      	add	r3, r2
 800b068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b06c:	460a      	mov	r2, r1
 800b06e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	015a      	lsls	r2, r3, #5
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	4413      	add	r3, r2
 800b078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	693a      	ldr	r2, [r7, #16]
 800b080:	0151      	lsls	r1, r2, #5
 800b082:	697a      	ldr	r2, [r7, #20]
 800b084:	440a      	add	r2, r1
 800b086:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b08a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b08e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b090:	2300      	movs	r3, #0
}
 800b092:	4618      	mov	r0, r3
 800b094:	371c      	adds	r7, #28
 800b096:	46bd      	mov	sp, r7
 800b098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09c:	4770      	bx	lr
 800b09e:	bf00      	nop
 800b0a0:	e007ffff 	.word	0xe007ffff
 800b0a4:	fff80000 	.word	0xfff80000

0800b0a8 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b089      	sub	sp, #36	; 0x24
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	60f8      	str	r0, [r7, #12]
 800b0b0:	60b9      	str	r1, [r7, #8]
 800b0b2:	4611      	mov	r1, r2
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	460b      	mov	r3, r1
 800b0b8:	71fb      	strb	r3, [r7, #7]
 800b0ba:	4613      	mov	r3, r2
 800b0bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800b0c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d11a      	bne.n	800b104 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b0ce:	88bb      	ldrh	r3, [r7, #4]
 800b0d0:	3303      	adds	r3, #3
 800b0d2:	089b      	lsrs	r3, r3, #2
 800b0d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	61bb      	str	r3, [r7, #24]
 800b0da:	e00f      	b.n	800b0fc <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b0dc:	79fb      	ldrb	r3, [r7, #7]
 800b0de:	031a      	lsls	r2, r3, #12
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	4413      	add	r3, r2
 800b0e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	69fb      	ldr	r3, [r7, #28]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b0f0:	69fb      	ldr	r3, [r7, #28]
 800b0f2:	3304      	adds	r3, #4
 800b0f4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b0f6:	69bb      	ldr	r3, [r7, #24]
 800b0f8:	3301      	adds	r3, #1
 800b0fa:	61bb      	str	r3, [r7, #24]
 800b0fc:	69ba      	ldr	r2, [r7, #24]
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	429a      	cmp	r2, r3
 800b102:	d3eb      	bcc.n	800b0dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b104:	2300      	movs	r3, #0
}
 800b106:	4618      	mov	r0, r3
 800b108:	3724      	adds	r7, #36	; 0x24
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr

0800b112 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b112:	b480      	push	{r7}
 800b114:	b089      	sub	sp, #36	; 0x24
 800b116:	af00      	add	r7, sp, #0
 800b118:	60f8      	str	r0, [r7, #12]
 800b11a:	60b9      	str	r1, [r7, #8]
 800b11c:	4613      	mov	r3, r2
 800b11e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b128:	88fb      	ldrh	r3, [r7, #6]
 800b12a:	3303      	adds	r3, #3
 800b12c:	089b      	lsrs	r3, r3, #2
 800b12e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b130:	2300      	movs	r3, #0
 800b132:	61bb      	str	r3, [r7, #24]
 800b134:	e00b      	b.n	800b14e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b13c:	681a      	ldr	r2, [r3, #0]
 800b13e:	69fb      	ldr	r3, [r7, #28]
 800b140:	601a      	str	r2, [r3, #0]
    pDest++;
 800b142:	69fb      	ldr	r3, [r7, #28]
 800b144:	3304      	adds	r3, #4
 800b146:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b148:	69bb      	ldr	r3, [r7, #24]
 800b14a:	3301      	adds	r3, #1
 800b14c:	61bb      	str	r3, [r7, #24]
 800b14e:	69ba      	ldr	r2, [r7, #24]
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	429a      	cmp	r2, r3
 800b154:	d3ef      	bcc.n	800b136 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b156:	69fb      	ldr	r3, [r7, #28]
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3724      	adds	r7, #36	; 0x24
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr

0800b164 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b164:	b480      	push	{r7}
 800b166:	b085      	sub	sp, #20
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	781b      	ldrb	r3, [r3, #0]
 800b176:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	785b      	ldrb	r3, [r3, #1]
 800b17c:	2b01      	cmp	r3, #1
 800b17e:	d12c      	bne.n	800b1da <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	015a      	lsls	r2, r3, #5
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	4413      	add	r3, r2
 800b188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	db12      	blt.n	800b1b8 <USB_EPSetStall+0x54>
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d00f      	beq.n	800b1b8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	015a      	lsls	r2, r3, #5
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	4413      	add	r3, r2
 800b1a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	68ba      	ldr	r2, [r7, #8]
 800b1a8:	0151      	lsls	r1, r2, #5
 800b1aa:	68fa      	ldr	r2, [r7, #12]
 800b1ac:	440a      	add	r2, r1
 800b1ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b1b6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	015a      	lsls	r2, r3, #5
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	4413      	add	r3, r2
 800b1c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	68ba      	ldr	r2, [r7, #8]
 800b1c8:	0151      	lsls	r1, r2, #5
 800b1ca:	68fa      	ldr	r2, [r7, #12]
 800b1cc:	440a      	add	r2, r1
 800b1ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b1d6:	6013      	str	r3, [r2, #0]
 800b1d8:	e02b      	b.n	800b232 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	015a      	lsls	r2, r3, #5
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	4413      	add	r3, r2
 800b1e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	db12      	blt.n	800b212 <USB_EPSetStall+0xae>
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d00f      	beq.n	800b212 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	015a      	lsls	r2, r3, #5
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	4413      	add	r3, r2
 800b1fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	68ba      	ldr	r2, [r7, #8]
 800b202:	0151      	lsls	r1, r2, #5
 800b204:	68fa      	ldr	r2, [r7, #12]
 800b206:	440a      	add	r2, r1
 800b208:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b20c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b210:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	015a      	lsls	r2, r3, #5
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	4413      	add	r3, r2
 800b21a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	68ba      	ldr	r2, [r7, #8]
 800b222:	0151      	lsls	r1, r2, #5
 800b224:	68fa      	ldr	r2, [r7, #12]
 800b226:	440a      	add	r2, r1
 800b228:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b22c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b230:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b232:	2300      	movs	r3, #0
}
 800b234:	4618      	mov	r0, r3
 800b236:	3714      	adds	r7, #20
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr

0800b240 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b240:	b480      	push	{r7}
 800b242:	b085      	sub	sp, #20
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	781b      	ldrb	r3, [r3, #0]
 800b252:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	785b      	ldrb	r3, [r3, #1]
 800b258:	2b01      	cmp	r3, #1
 800b25a:	d128      	bne.n	800b2ae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	015a      	lsls	r2, r3, #5
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	4413      	add	r3, r2
 800b264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	68ba      	ldr	r2, [r7, #8]
 800b26c:	0151      	lsls	r1, r2, #5
 800b26e:	68fa      	ldr	r2, [r7, #12]
 800b270:	440a      	add	r2, r1
 800b272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b276:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b27a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	78db      	ldrb	r3, [r3, #3]
 800b280:	2b03      	cmp	r3, #3
 800b282:	d003      	beq.n	800b28c <USB_EPClearStall+0x4c>
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	78db      	ldrb	r3, [r3, #3]
 800b288:	2b02      	cmp	r3, #2
 800b28a:	d138      	bne.n	800b2fe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	015a      	lsls	r2, r3, #5
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	4413      	add	r3, r2
 800b294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	68ba      	ldr	r2, [r7, #8]
 800b29c:	0151      	lsls	r1, r2, #5
 800b29e:	68fa      	ldr	r2, [r7, #12]
 800b2a0:	440a      	add	r2, r1
 800b2a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b2aa:	6013      	str	r3, [r2, #0]
 800b2ac:	e027      	b.n	800b2fe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	015a      	lsls	r2, r3, #5
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	4413      	add	r3, r2
 800b2b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	68ba      	ldr	r2, [r7, #8]
 800b2be:	0151      	lsls	r1, r2, #5
 800b2c0:	68fa      	ldr	r2, [r7, #12]
 800b2c2:	440a      	add	r2, r1
 800b2c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b2cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	78db      	ldrb	r3, [r3, #3]
 800b2d2:	2b03      	cmp	r3, #3
 800b2d4:	d003      	beq.n	800b2de <USB_EPClearStall+0x9e>
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	78db      	ldrb	r3, [r3, #3]
 800b2da:	2b02      	cmp	r3, #2
 800b2dc:	d10f      	bne.n	800b2fe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	015a      	lsls	r2, r3, #5
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	4413      	add	r3, r2
 800b2e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	68ba      	ldr	r2, [r7, #8]
 800b2ee:	0151      	lsls	r1, r2, #5
 800b2f0:	68fa      	ldr	r2, [r7, #12]
 800b2f2:	440a      	add	r2, r1
 800b2f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b2fc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b2fe:	2300      	movs	r3, #0
}
 800b300:	4618      	mov	r0, r3
 800b302:	3714      	adds	r7, #20
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr

0800b30c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b085      	sub	sp, #20
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	460b      	mov	r3, r1
 800b316:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	68fa      	ldr	r2, [r7, #12]
 800b326:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b32a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b32e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b336:	681a      	ldr	r2, [r3, #0]
 800b338:	78fb      	ldrb	r3, [r7, #3]
 800b33a:	011b      	lsls	r3, r3, #4
 800b33c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b340:	68f9      	ldr	r1, [r7, #12]
 800b342:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b346:	4313      	orrs	r3, r2
 800b348:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b34a:	2300      	movs	r3, #0
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3714      	adds	r7, #20
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr

0800b358 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b084      	sub	sp, #16
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b36a:	685b      	ldr	r3, [r3, #4]
 800b36c:	68fa      	ldr	r2, [r7, #12]
 800b36e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b372:	f023 0302 	bic.w	r3, r3, #2
 800b376:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800b378:	2003      	movs	r0, #3
 800b37a:	f7f6 fe7b 	bl	8002074 <HAL_Delay>

  return HAL_OK;
 800b37e:	2300      	movs	r3, #0
}
 800b380:	4618      	mov	r0, r3
 800b382:	3710      	adds	r7, #16
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}

0800b388 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b084      	sub	sp, #16
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	68fa      	ldr	r2, [r7, #12]
 800b39e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b3a2:	f043 0302 	orr.w	r3, r3, #2
 800b3a6:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800b3a8:	2003      	movs	r0, #3
 800b3aa:	f7f6 fe63 	bl	8002074 <HAL_Delay>

  return HAL_OK;
 800b3ae:	2300      	movs	r3, #0
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3710      	adds	r7, #16
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}

0800b3b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b085      	sub	sp, #20
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	695b      	ldr	r3, [r3, #20]
 800b3c4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	699b      	ldr	r3, [r3, #24]
 800b3ca:	68fa      	ldr	r2, [r7, #12]
 800b3cc:	4013      	ands	r3, r2
 800b3ce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3714      	adds	r7, #20
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3dc:	4770      	bx	lr

0800b3de <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b3de:	b480      	push	{r7}
 800b3e0:	b085      	sub	sp, #20
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3f0:	699b      	ldr	r3, [r3, #24]
 800b3f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3fa:	69db      	ldr	r3, [r3, #28]
 800b3fc:	68ba      	ldr	r2, [r7, #8]
 800b3fe:	4013      	ands	r3, r2
 800b400:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	0c1b      	lsrs	r3, r3, #16
}
 800b406:	4618      	mov	r0, r3
 800b408:	3714      	adds	r7, #20
 800b40a:	46bd      	mov	sp, r7
 800b40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b410:	4770      	bx	lr

0800b412 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b412:	b480      	push	{r7}
 800b414:	b085      	sub	sp, #20
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b424:	699b      	ldr	r3, [r3, #24]
 800b426:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b42e:	69db      	ldr	r3, [r3, #28]
 800b430:	68ba      	ldr	r2, [r7, #8]
 800b432:	4013      	ands	r3, r2
 800b434:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	b29b      	uxth	r3, r3
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3714      	adds	r7, #20
 800b43e:	46bd      	mov	sp, r7
 800b440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b444:	4770      	bx	lr

0800b446 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b446:	b480      	push	{r7}
 800b448:	b085      	sub	sp, #20
 800b44a:	af00      	add	r7, sp, #0
 800b44c:	6078      	str	r0, [r7, #4]
 800b44e:	460b      	mov	r3, r1
 800b450:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b456:	78fb      	ldrb	r3, [r7, #3]
 800b458:	015a      	lsls	r2, r3, #5
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	4413      	add	r3, r2
 800b45e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b462:	689b      	ldr	r3, [r3, #8]
 800b464:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b46c:	695b      	ldr	r3, [r3, #20]
 800b46e:	68ba      	ldr	r2, [r7, #8]
 800b470:	4013      	ands	r3, r2
 800b472:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b474:	68bb      	ldr	r3, [r7, #8]
}
 800b476:	4618      	mov	r0, r3
 800b478:	3714      	adds	r7, #20
 800b47a:	46bd      	mov	sp, r7
 800b47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b480:	4770      	bx	lr

0800b482 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b482:	b480      	push	{r7}
 800b484:	b087      	sub	sp, #28
 800b486:	af00      	add	r7, sp, #0
 800b488:	6078      	str	r0, [r7, #4]
 800b48a:	460b      	mov	r3, r1
 800b48c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b498:	691b      	ldr	r3, [r3, #16]
 800b49a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4a4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b4a6:	78fb      	ldrb	r3, [r7, #3]
 800b4a8:	f003 030f 	and.w	r3, r3, #15
 800b4ac:	68fa      	ldr	r2, [r7, #12]
 800b4ae:	fa22 f303 	lsr.w	r3, r2, r3
 800b4b2:	01db      	lsls	r3, r3, #7
 800b4b4:	b2db      	uxtb	r3, r3
 800b4b6:	693a      	ldr	r2, [r7, #16]
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b4bc:	78fb      	ldrb	r3, [r7, #3]
 800b4be:	015a      	lsls	r2, r3, #5
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	4413      	add	r3, r2
 800b4c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4c8:	689b      	ldr	r3, [r3, #8]
 800b4ca:	693a      	ldr	r2, [r7, #16]
 800b4cc:	4013      	ands	r3, r2
 800b4ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b4d0:	68bb      	ldr	r3, [r7, #8]
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	371c      	adds	r7, #28
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4dc:	4770      	bx	lr

0800b4de <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b4de:	b480      	push	{r7}
 800b4e0:	b083      	sub	sp, #12
 800b4e2:	af00      	add	r7, sp, #0
 800b4e4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	695b      	ldr	r3, [r3, #20]
 800b4ea:	f003 0301 	and.w	r3, r3, #1
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	370c      	adds	r7, #12
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f8:	4770      	bx	lr
	...

0800b4fc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b085      	sub	sp, #20
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b50e:	681a      	ldr	r2, [r3, #0]
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b516:	4619      	mov	r1, r3
 800b518:	4b09      	ldr	r3, [pc, #36]	; (800b540 <USB_ActivateSetup+0x44>)
 800b51a:	4013      	ands	r3, r2
 800b51c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	68fa      	ldr	r2, [r7, #12]
 800b528:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b52c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b530:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b532:	2300      	movs	r3, #0
}
 800b534:	4618      	mov	r0, r3
 800b536:	3714      	adds	r7, #20
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr
 800b540:	fffff800 	.word	0xfffff800

0800b544 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b544:	b480      	push	{r7}
 800b546:	b087      	sub	sp, #28
 800b548:	af00      	add	r7, sp, #0
 800b54a:	60f8      	str	r0, [r7, #12]
 800b54c:	460b      	mov	r3, r1
 800b54e:	607a      	str	r2, [r7, #4]
 800b550:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	333c      	adds	r3, #60	; 0x3c
 800b55a:	3304      	adds	r3, #4
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	4a26      	ldr	r2, [pc, #152]	; (800b5fc <USB_EP0_OutStart+0xb8>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d90a      	bls.n	800b57e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b574:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b578:	d101      	bne.n	800b57e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b57a:	2300      	movs	r3, #0
 800b57c:	e037      	b.n	800b5ee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b584:	461a      	mov	r2, r3
 800b586:	2300      	movs	r3, #0
 800b588:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b590:	691b      	ldr	r3, [r3, #16]
 800b592:	697a      	ldr	r2, [r7, #20]
 800b594:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b598:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b59c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5a4:	691b      	ldr	r3, [r3, #16]
 800b5a6:	697a      	ldr	r2, [r7, #20]
 800b5a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5ac:	f043 0318 	orr.w	r3, r3, #24
 800b5b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5b8:	691b      	ldr	r3, [r3, #16]
 800b5ba:	697a      	ldr	r2, [r7, #20]
 800b5bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5c0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b5c4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b5c6:	7afb      	ldrb	r3, [r7, #11]
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	d10f      	bne.n	800b5ec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5d2:	461a      	mov	r2, r3
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	697a      	ldr	r2, [r7, #20]
 800b5e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5e6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b5ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b5ec:	2300      	movs	r3, #0
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	371c      	adds	r7, #28
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f8:	4770      	bx	lr
 800b5fa:	bf00      	nop
 800b5fc:	4f54300a 	.word	0x4f54300a

0800b600 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b600:	b480      	push	{r7}
 800b602:	b085      	sub	sp, #20
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b608:	2300      	movs	r3, #0
 800b60a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	3301      	adds	r3, #1
 800b610:	60fb      	str	r3, [r7, #12]
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	4a13      	ldr	r2, [pc, #76]	; (800b664 <USB_CoreReset+0x64>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d901      	bls.n	800b61e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b61a:	2303      	movs	r3, #3
 800b61c:	e01b      	b.n	800b656 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	691b      	ldr	r3, [r3, #16]
 800b622:	2b00      	cmp	r3, #0
 800b624:	daf2      	bge.n	800b60c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b626:	2300      	movs	r3, #0
 800b628:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	691b      	ldr	r3, [r3, #16]
 800b62e:	f043 0201 	orr.w	r2, r3, #1
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	3301      	adds	r3, #1
 800b63a:	60fb      	str	r3, [r7, #12]
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	4a09      	ldr	r2, [pc, #36]	; (800b664 <USB_CoreReset+0x64>)
 800b640:	4293      	cmp	r3, r2
 800b642:	d901      	bls.n	800b648 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b644:	2303      	movs	r3, #3
 800b646:	e006      	b.n	800b656 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	691b      	ldr	r3, [r3, #16]
 800b64c:	f003 0301 	and.w	r3, r3, #1
 800b650:	2b01      	cmp	r3, #1
 800b652:	d0f0      	beq.n	800b636 <USB_CoreReset+0x36>

  return HAL_OK;
 800b654:	2300      	movs	r3, #0
}
 800b656:	4618      	mov	r0, r3
 800b658:	3714      	adds	r7, #20
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr
 800b662:	bf00      	nop
 800b664:	00030d40 	.word	0x00030d40

0800b668 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b084      	sub	sp, #16
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	460b      	mov	r3, r1
 800b672:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b674:	2300      	movs	r3, #0
 800b676:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	7c1b      	ldrb	r3, [r3, #16]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d115      	bne.n	800b6ac <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b680:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b684:	2202      	movs	r2, #2
 800b686:	2181      	movs	r1, #129	; 0x81
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f001 ff6e 	bl	800d56a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2201      	movs	r2, #1
 800b692:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b694:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b698:	2202      	movs	r2, #2
 800b69a:	2101      	movs	r1, #1
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f001 ff64 	bl	800d56a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2201      	movs	r2, #1
 800b6a6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800b6aa:	e012      	b.n	800b6d2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b6ac:	2340      	movs	r3, #64	; 0x40
 800b6ae:	2202      	movs	r2, #2
 800b6b0:	2181      	movs	r1, #129	; 0x81
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f001 ff59 	bl	800d56a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b6be:	2340      	movs	r3, #64	; 0x40
 800b6c0:	2202      	movs	r2, #2
 800b6c2:	2101      	movs	r1, #1
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f001 ff50 	bl	800d56a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b6d2:	2308      	movs	r3, #8
 800b6d4:	2203      	movs	r2, #3
 800b6d6:	2182      	movs	r1, #130	; 0x82
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f001 ff46 	bl	800d56a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b6e4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b6e8:	f002 f8d6 	bl	800d898 <malloc>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	461a      	mov	r2, r3
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d102      	bne.n	800b706 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800b700:	2301      	movs	r3, #1
 800b702:	73fb      	strb	r3, [r7, #15]
 800b704:	e026      	b.n	800b754 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b70c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	2200      	movs	r2, #0
 800b71c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	2200      	movs	r2, #0
 800b724:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	7c1b      	ldrb	r3, [r3, #16]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d109      	bne.n	800b744 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b736:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b73a:	2101      	movs	r1, #1
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f002 f805 	bl	800d74c <USBD_LL_PrepareReceive>
 800b742:	e007      	b.n	800b754 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b74a:	2340      	movs	r3, #64	; 0x40
 800b74c:	2101      	movs	r1, #1
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f001 fffc 	bl	800d74c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b754:	7bfb      	ldrb	r3, [r7, #15]
}
 800b756:	4618      	mov	r0, r3
 800b758:	3710      	adds	r7, #16
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}

0800b75e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b75e:	b580      	push	{r7, lr}
 800b760:	b084      	sub	sp, #16
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
 800b766:	460b      	mov	r3, r1
 800b768:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b76a:	2300      	movs	r3, #0
 800b76c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b76e:	2181      	movs	r1, #129	; 0x81
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f001 ff20 	bl	800d5b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2200      	movs	r2, #0
 800b77a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b77c:	2101      	movs	r1, #1
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f001 ff19 	bl	800d5b6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2200      	movs	r2, #0
 800b788:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b78c:	2182      	movs	r1, #130	; 0x82
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f001 ff11 	bl	800d5b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2200      	movs	r2, #0
 800b798:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d00e      	beq.n	800b7c2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f002 f877 	bl	800d8a8 <free>
    pdev->pClassData = NULL;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800b7c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3710      	adds	r7, #16
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}

0800b7cc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b086      	sub	sp, #24
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7dc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	781b      	ldrb	r3, [r3, #0]
 800b7ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d039      	beq.n	800b86a <USBD_CDC_Setup+0x9e>
 800b7f6:	2b20      	cmp	r3, #32
 800b7f8:	d17c      	bne.n	800b8f4 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	88db      	ldrh	r3, [r3, #6]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d029      	beq.n	800b856 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	b25b      	sxtb	r3, r3
 800b808:	2b00      	cmp	r3, #0
 800b80a:	da11      	bge.n	800b830 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b812:	689b      	ldr	r3, [r3, #8]
 800b814:	683a      	ldr	r2, [r7, #0]
 800b816:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b818:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b81a:	683a      	ldr	r2, [r7, #0]
 800b81c:	88d2      	ldrh	r2, [r2, #6]
 800b81e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b820:	6939      	ldr	r1, [r7, #16]
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	88db      	ldrh	r3, [r3, #6]
 800b826:	461a      	mov	r2, r3
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f001 fa3f 	bl	800ccac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b82e:	e068      	b.n	800b902 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	785a      	ldrb	r2, [r3, #1]
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	88db      	ldrh	r3, [r3, #6]
 800b83e:	b2da      	uxtb	r2, r3
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b846:	6939      	ldr	r1, [r7, #16]
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	88db      	ldrh	r3, [r3, #6]
 800b84c:	461a      	mov	r2, r3
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f001 fa5a 	bl	800cd08 <USBD_CtlPrepareRx>
      break;
 800b854:	e055      	b.n	800b902 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b85c:	689b      	ldr	r3, [r3, #8]
 800b85e:	683a      	ldr	r2, [r7, #0]
 800b860:	7850      	ldrb	r0, [r2, #1]
 800b862:	2200      	movs	r2, #0
 800b864:	6839      	ldr	r1, [r7, #0]
 800b866:	4798      	blx	r3
      break;
 800b868:	e04b      	b.n	800b902 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	785b      	ldrb	r3, [r3, #1]
 800b86e:	2b0a      	cmp	r3, #10
 800b870:	d017      	beq.n	800b8a2 <USBD_CDC_Setup+0xd6>
 800b872:	2b0b      	cmp	r3, #11
 800b874:	d029      	beq.n	800b8ca <USBD_CDC_Setup+0xfe>
 800b876:	2b00      	cmp	r3, #0
 800b878:	d133      	bne.n	800b8e2 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b880:	2b03      	cmp	r3, #3
 800b882:	d107      	bne.n	800b894 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b884:	f107 030c 	add.w	r3, r7, #12
 800b888:	2202      	movs	r2, #2
 800b88a:	4619      	mov	r1, r3
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f001 fa0d 	bl	800ccac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b892:	e02e      	b.n	800b8f2 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800b894:	6839      	ldr	r1, [r7, #0]
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f001 f99d 	bl	800cbd6 <USBD_CtlError>
            ret = USBD_FAIL;
 800b89c:	2302      	movs	r3, #2
 800b89e:	75fb      	strb	r3, [r7, #23]
          break;
 800b8a0:	e027      	b.n	800b8f2 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8a8:	2b03      	cmp	r3, #3
 800b8aa:	d107      	bne.n	800b8bc <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b8ac:	f107 030f 	add.w	r3, r7, #15
 800b8b0:	2201      	movs	r2, #1
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f001 f9f9 	bl	800ccac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b8ba:	e01a      	b.n	800b8f2 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800b8bc:	6839      	ldr	r1, [r7, #0]
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f001 f989 	bl	800cbd6 <USBD_CtlError>
            ret = USBD_FAIL;
 800b8c4:	2302      	movs	r3, #2
 800b8c6:	75fb      	strb	r3, [r7, #23]
          break;
 800b8c8:	e013      	b.n	800b8f2 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8d0:	2b03      	cmp	r3, #3
 800b8d2:	d00d      	beq.n	800b8f0 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 800b8d4:	6839      	ldr	r1, [r7, #0]
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f001 f97d 	bl	800cbd6 <USBD_CtlError>
            ret = USBD_FAIL;
 800b8dc:	2302      	movs	r3, #2
 800b8de:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b8e0:	e006      	b.n	800b8f0 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800b8e2:	6839      	ldr	r1, [r7, #0]
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f001 f976 	bl	800cbd6 <USBD_CtlError>
          ret = USBD_FAIL;
 800b8ea:	2302      	movs	r3, #2
 800b8ec:	75fb      	strb	r3, [r7, #23]
          break;
 800b8ee:	e000      	b.n	800b8f2 <USBD_CDC_Setup+0x126>
          break;
 800b8f0:	bf00      	nop
      }
      break;
 800b8f2:	e006      	b.n	800b902 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800b8f4:	6839      	ldr	r1, [r7, #0]
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f001 f96d 	bl	800cbd6 <USBD_CtlError>
      ret = USBD_FAIL;
 800b8fc:	2302      	movs	r3, #2
 800b8fe:	75fb      	strb	r3, [r7, #23]
      break;
 800b900:	bf00      	nop
  }

  return ret;
 800b902:	7dfb      	ldrb	r3, [r7, #23]
}
 800b904:	4618      	mov	r0, r3
 800b906:	3718      	adds	r7, #24
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}

0800b90c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b084      	sub	sp, #16
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	460b      	mov	r3, r1
 800b916:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b91e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b926:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d03a      	beq.n	800b9a8 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b932:	78fa      	ldrb	r2, [r7, #3]
 800b934:	6879      	ldr	r1, [r7, #4]
 800b936:	4613      	mov	r3, r2
 800b938:	009b      	lsls	r3, r3, #2
 800b93a:	4413      	add	r3, r2
 800b93c:	009b      	lsls	r3, r3, #2
 800b93e:	440b      	add	r3, r1
 800b940:	331c      	adds	r3, #28
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d029      	beq.n	800b99c <USBD_CDC_DataIn+0x90>
 800b948:	78fa      	ldrb	r2, [r7, #3]
 800b94a:	6879      	ldr	r1, [r7, #4]
 800b94c:	4613      	mov	r3, r2
 800b94e:	009b      	lsls	r3, r3, #2
 800b950:	4413      	add	r3, r2
 800b952:	009b      	lsls	r3, r3, #2
 800b954:	440b      	add	r3, r1
 800b956:	331c      	adds	r3, #28
 800b958:	681a      	ldr	r2, [r3, #0]
 800b95a:	78f9      	ldrb	r1, [r7, #3]
 800b95c:	68b8      	ldr	r0, [r7, #8]
 800b95e:	460b      	mov	r3, r1
 800b960:	00db      	lsls	r3, r3, #3
 800b962:	1a5b      	subs	r3, r3, r1
 800b964:	009b      	lsls	r3, r3, #2
 800b966:	4403      	add	r3, r0
 800b968:	3344      	adds	r3, #68	; 0x44
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	fbb2 f1f3 	udiv	r1, r2, r3
 800b970:	fb03 f301 	mul.w	r3, r3, r1
 800b974:	1ad3      	subs	r3, r2, r3
 800b976:	2b00      	cmp	r3, #0
 800b978:	d110      	bne.n	800b99c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b97a:	78fa      	ldrb	r2, [r7, #3]
 800b97c:	6879      	ldr	r1, [r7, #4]
 800b97e:	4613      	mov	r3, r2
 800b980:	009b      	lsls	r3, r3, #2
 800b982:	4413      	add	r3, r2
 800b984:	009b      	lsls	r3, r3, #2
 800b986:	440b      	add	r3, r1
 800b988:	331c      	adds	r3, #28
 800b98a:	2200      	movs	r2, #0
 800b98c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b98e:	78f9      	ldrb	r1, [r7, #3]
 800b990:	2300      	movs	r3, #0
 800b992:	2200      	movs	r2, #0
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f001 feb6 	bl	800d706 <USBD_LL_Transmit>
 800b99a:	e003      	b.n	800b9a4 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	e000      	b.n	800b9aa <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b9a8:	2302      	movs	r3, #2
  }
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3710      	adds	r7, #16
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}

0800b9b2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b9b2:	b580      	push	{r7, lr}
 800b9b4:	b084      	sub	sp, #16
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	6078      	str	r0, [r7, #4]
 800b9ba:	460b      	mov	r3, r1
 800b9bc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9c4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b9c6:	78fb      	ldrb	r3, [r7, #3]
 800b9c8:	4619      	mov	r1, r3
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f001 fee1 	bl	800d792 <USBD_LL_GetRxDataSize>
 800b9d0:	4602      	mov	r2, r0
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d00d      	beq.n	800b9fe <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9e8:	68db      	ldr	r3, [r3, #12]
 800b9ea:	68fa      	ldr	r2, [r7, #12]
 800b9ec:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b9f0:	68fa      	ldr	r2, [r7, #12]
 800b9f2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b9f6:	4611      	mov	r1, r2
 800b9f8:	4798      	blx	r3

    return USBD_OK;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	e000      	b.n	800ba00 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b9fe:	2302      	movs	r3, #2
  }
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3710      	adds	r7, #16
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}

0800ba08 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b084      	sub	sp, #16
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba16:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d015      	beq.n	800ba4e <USBD_CDC_EP0_RxReady+0x46>
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ba28:	2bff      	cmp	r3, #255	; 0xff
 800ba2a:	d010      	beq.n	800ba4e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba32:	689b      	ldr	r3, [r3, #8]
 800ba34:	68fa      	ldr	r2, [r7, #12]
 800ba36:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800ba3a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ba3c:	68fa      	ldr	r2, [r7, #12]
 800ba3e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ba42:	b292      	uxth	r2, r2
 800ba44:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	22ff      	movs	r2, #255	; 0xff
 800ba4a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800ba4e:	2300      	movs	r3, #0
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3710      	adds	r7, #16
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}

0800ba58 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b083      	sub	sp, #12
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2243      	movs	r2, #67	; 0x43
 800ba64:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800ba66:	4b03      	ldr	r3, [pc, #12]	; (800ba74 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	370c      	adds	r7, #12
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba72:	4770      	bx	lr
 800ba74:	240000a0 	.word	0x240000a0

0800ba78 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b083      	sub	sp, #12
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2243      	movs	r2, #67	; 0x43
 800ba84:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800ba86:	4b03      	ldr	r3, [pc, #12]	; (800ba94 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	370c      	adds	r7, #12
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba92:	4770      	bx	lr
 800ba94:	2400005c 	.word	0x2400005c

0800ba98 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b083      	sub	sp, #12
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2243      	movs	r2, #67	; 0x43
 800baa4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800baa6:	4b03      	ldr	r3, [pc, #12]	; (800bab4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	370c      	adds	r7, #12
 800baac:	46bd      	mov	sp, r7
 800baae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab2:	4770      	bx	lr
 800bab4:	240000e4 	.word	0x240000e4

0800bab8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bab8:	b480      	push	{r7}
 800baba:	b083      	sub	sp, #12
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	220a      	movs	r2, #10
 800bac4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800bac6:	4b03      	ldr	r3, [pc, #12]	; (800bad4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bac8:	4618      	mov	r0, r3
 800baca:	370c      	adds	r7, #12
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr
 800bad4:	24000018 	.word	0x24000018

0800bad8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800bad8:	b480      	push	{r7}
 800bada:	b085      	sub	sp, #20
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800bae2:	2302      	movs	r3, #2
 800bae4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d005      	beq.n	800baf8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	683a      	ldr	r2, [r7, #0]
 800baf0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800baf4:	2300      	movs	r3, #0
 800baf6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800baf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3714      	adds	r7, #20
 800bafe:	46bd      	mov	sp, r7
 800bb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb04:	4770      	bx	lr

0800bb06 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800bb06:	b480      	push	{r7}
 800bb08:	b087      	sub	sp, #28
 800bb0a:	af00      	add	r7, sp, #0
 800bb0c:	60f8      	str	r0, [r7, #12]
 800bb0e:	60b9      	str	r1, [r7, #8]
 800bb10:	4613      	mov	r3, r2
 800bb12:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb1a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	68ba      	ldr	r2, [r7, #8]
 800bb20:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800bb24:	88fa      	ldrh	r2, [r7, #6]
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800bb2c:	2300      	movs	r3, #0
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	371c      	adds	r7, #28
 800bb32:	46bd      	mov	sp, r7
 800bb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb38:	4770      	bx	lr

0800bb3a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800bb3a:	b480      	push	{r7}
 800bb3c:	b085      	sub	sp, #20
 800bb3e:	af00      	add	r7, sp, #0
 800bb40:	6078      	str	r0, [r7, #4]
 800bb42:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb4a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	683a      	ldr	r2, [r7, #0]
 800bb50:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800bb54:	2300      	movs	r3, #0
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	3714      	adds	r7, #20
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb60:	4770      	bx	lr

0800bb62 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bb62:	b580      	push	{r7, lr}
 800bb64:	b084      	sub	sp, #16
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb70:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d01c      	beq.n	800bbb6 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d115      	bne.n	800bbb2 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	2201      	movs	r2, #1
 800bb8a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800bba4:	b29b      	uxth	r3, r3
 800bba6:	2181      	movs	r1, #129	; 0x81
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f001 fdac 	bl	800d706 <USBD_LL_Transmit>

      return USBD_OK;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	e002      	b.n	800bbb8 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	e000      	b.n	800bbb8 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800bbb6:	2302      	movs	r3, #2
  }
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3710      	adds	r7, #16
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}

0800bbc0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b084      	sub	sp, #16
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbce:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d017      	beq.n	800bc0a <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	7c1b      	ldrb	r3, [r3, #16]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d109      	bne.n	800bbf6 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bbe8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bbec:	2101      	movs	r1, #1
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f001 fdac 	bl	800d74c <USBD_LL_PrepareReceive>
 800bbf4:	e007      	b.n	800bc06 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bbfc:	2340      	movs	r3, #64	; 0x40
 800bbfe:	2101      	movs	r1, #1
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f001 fda3 	bl	800d74c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800bc06:	2300      	movs	r3, #0
 800bc08:	e000      	b.n	800bc0c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800bc0a:	2302      	movs	r3, #2
  }
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3710      	adds	r7, #16
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b084      	sub	sp, #16
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	60f8      	str	r0, [r7, #12]
 800bc1c:	60b9      	str	r1, [r7, #8]
 800bc1e:	4613      	mov	r3, r2
 800bc20:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d101      	bne.n	800bc2c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800bc28:	2302      	movs	r3, #2
 800bc2a:	e01a      	b.n	800bc62 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d003      	beq.n	800bc3e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d003      	beq.n	800bc4c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	68ba      	ldr	r2, [r7, #8]
 800bc48:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2201      	movs	r2, #1
 800bc50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	79fa      	ldrb	r2, [r7, #7]
 800bc58:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800bc5a:	68f8      	ldr	r0, [r7, #12]
 800bc5c:	f001 fc1a 	bl	800d494 <USBD_LL_Init>

  return USBD_OK;
 800bc60:	2300      	movs	r3, #0
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3710      	adds	r7, #16
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}

0800bc6a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bc6a:	b480      	push	{r7}
 800bc6c:	b085      	sub	sp, #20
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	6078      	str	r0, [r7, #4]
 800bc72:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800bc74:	2300      	movs	r3, #0
 800bc76:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d006      	beq.n	800bc8c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	683a      	ldr	r2, [r7, #0]
 800bc82:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800bc86:	2300      	movs	r3, #0
 800bc88:	73fb      	strb	r3, [r7, #15]
 800bc8a:	e001      	b.n	800bc90 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800bc8c:	2302      	movs	r3, #2
 800bc8e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bc90:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3714      	adds	r7, #20
 800bc96:	46bd      	mov	sp, r7
 800bc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9c:	4770      	bx	lr

0800bc9e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bc9e:	b580      	push	{r7, lr}
 800bca0:	b082      	sub	sp, #8
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f001 fc44 	bl	800d534 <USBD_LL_Start>

  return USBD_OK;
 800bcac:	2300      	movs	r3, #0
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3708      	adds	r7, #8
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}

0800bcb6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800bcb6:	b480      	push	{r7}
 800bcb8:	b083      	sub	sp, #12
 800bcba:	af00      	add	r7, sp, #0
 800bcbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bcbe:	2300      	movs	r3, #0
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	370c      	adds	r7, #12
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr

0800bccc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b084      	sub	sp, #16
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	460b      	mov	r3, r1
 800bcd6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800bcd8:	2302      	movs	r3, #2
 800bcda:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d00c      	beq.n	800bd00 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	78fa      	ldrb	r2, [r7, #3]
 800bcf0:	4611      	mov	r1, r2
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	4798      	blx	r3
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d101      	bne.n	800bd00 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800bd00:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	3710      	adds	r7, #16
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}

0800bd0a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800bd0a:	b580      	push	{r7, lr}
 800bd0c:	b082      	sub	sp, #8
 800bd0e:	af00      	add	r7, sp, #0
 800bd10:	6078      	str	r0, [r7, #4]
 800bd12:	460b      	mov	r3, r1
 800bd14:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd1c:	685b      	ldr	r3, [r3, #4]
 800bd1e:	78fa      	ldrb	r2, [r7, #3]
 800bd20:	4611      	mov	r1, r2
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	4798      	blx	r3

  return USBD_OK;
 800bd26:	2300      	movs	r3, #0
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3708      	adds	r7, #8
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}

0800bd30 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b082      	sub	sp, #8
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800bd40:	6839      	ldr	r1, [r7, #0]
 800bd42:	4618      	mov	r0, r3
 800bd44:	f000 ff0a 	bl	800cb5c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800bd56:	461a      	mov	r2, r3
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800bd64:	f003 031f 	and.w	r3, r3, #31
 800bd68:	2b01      	cmp	r3, #1
 800bd6a:	d00c      	beq.n	800bd86 <USBD_LL_SetupStage+0x56>
 800bd6c:	2b01      	cmp	r3, #1
 800bd6e:	d302      	bcc.n	800bd76 <USBD_LL_SetupStage+0x46>
 800bd70:	2b02      	cmp	r3, #2
 800bd72:	d010      	beq.n	800bd96 <USBD_LL_SetupStage+0x66>
 800bd74:	e017      	b.n	800bda6 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800bd7c:	4619      	mov	r1, r3
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f000 fa0a 	bl	800c198 <USBD_StdDevReq>
      break;
 800bd84:	e01a      	b.n	800bdbc <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800bd8c:	4619      	mov	r1, r3
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f000 fa6c 	bl	800c26c <USBD_StdItfReq>
      break;
 800bd94:	e012      	b.n	800bdbc <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f000 faaa 	bl	800c2f8 <USBD_StdEPReq>
      break;
 800bda4:	e00a      	b.n	800bdbc <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800bdac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bdb0:	b2db      	uxtb	r3, r3
 800bdb2:	4619      	mov	r1, r3
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	f001 fc1d 	bl	800d5f4 <USBD_LL_StallEP>
      break;
 800bdba:	bf00      	nop
  }

  return USBD_OK;
 800bdbc:	2300      	movs	r3, #0
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3708      	adds	r7, #8
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}

0800bdc6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bdc6:	b580      	push	{r7, lr}
 800bdc8:	b086      	sub	sp, #24
 800bdca:	af00      	add	r7, sp, #0
 800bdcc:	60f8      	str	r0, [r7, #12]
 800bdce:	460b      	mov	r3, r1
 800bdd0:	607a      	str	r2, [r7, #4]
 800bdd2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800bdd4:	7afb      	ldrb	r3, [r7, #11]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d14b      	bne.n	800be72 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bde0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bde8:	2b03      	cmp	r3, #3
 800bdea:	d134      	bne.n	800be56 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	68da      	ldr	r2, [r3, #12]
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	691b      	ldr	r3, [r3, #16]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d919      	bls.n	800be2c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	68da      	ldr	r2, [r3, #12]
 800bdfc:	697b      	ldr	r3, [r7, #20]
 800bdfe:	691b      	ldr	r3, [r3, #16]
 800be00:	1ad2      	subs	r2, r2, r3
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800be06:	697b      	ldr	r3, [r7, #20]
 800be08:	68da      	ldr	r2, [r3, #12]
 800be0a:	697b      	ldr	r3, [r7, #20]
 800be0c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800be0e:	429a      	cmp	r2, r3
 800be10:	d203      	bcs.n	800be1a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800be16:	b29b      	uxth	r3, r3
 800be18:	e002      	b.n	800be20 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800be1e:	b29b      	uxth	r3, r3
 800be20:	461a      	mov	r2, r3
 800be22:	6879      	ldr	r1, [r7, #4]
 800be24:	68f8      	ldr	r0, [r7, #12]
 800be26:	f000 ff8d 	bl	800cd44 <USBD_CtlContinueRx>
 800be2a:	e038      	b.n	800be9e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be32:	691b      	ldr	r3, [r3, #16]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d00a      	beq.n	800be4e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800be3e:	2b03      	cmp	r3, #3
 800be40:	d105      	bne.n	800be4e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be48:	691b      	ldr	r3, [r3, #16]
 800be4a:	68f8      	ldr	r0, [r7, #12]
 800be4c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800be4e:	68f8      	ldr	r0, [r7, #12]
 800be50:	f000 ff8a 	bl	800cd68 <USBD_CtlSendStatus>
 800be54:	e023      	b.n	800be9e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800be5c:	2b05      	cmp	r3, #5
 800be5e:	d11e      	bne.n	800be9e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2200      	movs	r2, #0
 800be64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800be68:	2100      	movs	r1, #0
 800be6a:	68f8      	ldr	r0, [r7, #12]
 800be6c:	f001 fbc2 	bl	800d5f4 <USBD_LL_StallEP>
 800be70:	e015      	b.n	800be9e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be78:	699b      	ldr	r3, [r3, #24]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d00d      	beq.n	800be9a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800be84:	2b03      	cmp	r3, #3
 800be86:	d108      	bne.n	800be9a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be8e:	699b      	ldr	r3, [r3, #24]
 800be90:	7afa      	ldrb	r2, [r7, #11]
 800be92:	4611      	mov	r1, r2
 800be94:	68f8      	ldr	r0, [r7, #12]
 800be96:	4798      	blx	r3
 800be98:	e001      	b.n	800be9e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800be9a:	2302      	movs	r3, #2
 800be9c:	e000      	b.n	800bea0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800be9e:	2300      	movs	r3, #0
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3718      	adds	r7, #24
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}

0800bea8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b086      	sub	sp, #24
 800beac:	af00      	add	r7, sp, #0
 800beae:	60f8      	str	r0, [r7, #12]
 800beb0:	460b      	mov	r3, r1
 800beb2:	607a      	str	r2, [r7, #4]
 800beb4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800beb6:	7afb      	ldrb	r3, [r7, #11]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d17f      	bne.n	800bfbc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	3314      	adds	r3, #20
 800bec0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bec8:	2b02      	cmp	r3, #2
 800beca:	d15c      	bne.n	800bf86 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	68da      	ldr	r2, [r3, #12]
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	691b      	ldr	r3, [r3, #16]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d915      	bls.n	800bf04 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800bed8:	697b      	ldr	r3, [r7, #20]
 800beda:	68da      	ldr	r2, [r3, #12]
 800bedc:	697b      	ldr	r3, [r7, #20]
 800bede:	691b      	ldr	r3, [r3, #16]
 800bee0:	1ad2      	subs	r2, r2, r3
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	68db      	ldr	r3, [r3, #12]
 800beea:	b29b      	uxth	r3, r3
 800beec:	461a      	mov	r2, r3
 800beee:	6879      	ldr	r1, [r7, #4]
 800bef0:	68f8      	ldr	r0, [r7, #12]
 800bef2:	f000 fef7 	bl	800cce4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bef6:	2300      	movs	r3, #0
 800bef8:	2200      	movs	r2, #0
 800befa:	2100      	movs	r1, #0
 800befc:	68f8      	ldr	r0, [r7, #12]
 800befe:	f001 fc25 	bl	800d74c <USBD_LL_PrepareReceive>
 800bf02:	e04e      	b.n	800bfa2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	689b      	ldr	r3, [r3, #8]
 800bf08:	697a      	ldr	r2, [r7, #20]
 800bf0a:	6912      	ldr	r2, [r2, #16]
 800bf0c:	fbb3 f1f2 	udiv	r1, r3, r2
 800bf10:	fb02 f201 	mul.w	r2, r2, r1
 800bf14:	1a9b      	subs	r3, r3, r2
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d11c      	bne.n	800bf54 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	689a      	ldr	r2, [r3, #8]
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d316      	bcc.n	800bf54 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800bf26:	697b      	ldr	r3, [r7, #20]
 800bf28:	689a      	ldr	r2, [r3, #8]
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d20f      	bcs.n	800bf54 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bf34:	2200      	movs	r2, #0
 800bf36:	2100      	movs	r1, #0
 800bf38:	68f8      	ldr	r0, [r7, #12]
 800bf3a:	f000 fed3 	bl	800cce4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	2200      	movs	r2, #0
 800bf42:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bf46:	2300      	movs	r3, #0
 800bf48:	2200      	movs	r2, #0
 800bf4a:	2100      	movs	r1, #0
 800bf4c:	68f8      	ldr	r0, [r7, #12]
 800bf4e:	f001 fbfd 	bl	800d74c <USBD_LL_PrepareReceive>
 800bf52:	e026      	b.n	800bfa2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf5a:	68db      	ldr	r3, [r3, #12]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d00a      	beq.n	800bf76 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bf66:	2b03      	cmp	r3, #3
 800bf68:	d105      	bne.n	800bf76 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf70:	68db      	ldr	r3, [r3, #12]
 800bf72:	68f8      	ldr	r0, [r7, #12]
 800bf74:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800bf76:	2180      	movs	r1, #128	; 0x80
 800bf78:	68f8      	ldr	r0, [r7, #12]
 800bf7a:	f001 fb3b 	bl	800d5f4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800bf7e:	68f8      	ldr	r0, [r7, #12]
 800bf80:	f000 ff05 	bl	800cd8e <USBD_CtlReceiveStatus>
 800bf84:	e00d      	b.n	800bfa2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bf8c:	2b04      	cmp	r3, #4
 800bf8e:	d004      	beq.n	800bf9a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d103      	bne.n	800bfa2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800bf9a:	2180      	movs	r1, #128	; 0x80
 800bf9c:	68f8      	ldr	r0, [r7, #12]
 800bf9e:	f001 fb29 	bl	800d5f4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	d11d      	bne.n	800bfe8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800bfac:	68f8      	ldr	r0, [r7, #12]
 800bfae:	f7ff fe82 	bl	800bcb6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bfba:	e015      	b.n	800bfe8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfc2:	695b      	ldr	r3, [r3, #20]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d00d      	beq.n	800bfe4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800bfce:	2b03      	cmp	r3, #3
 800bfd0:	d108      	bne.n	800bfe4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfd8:	695b      	ldr	r3, [r3, #20]
 800bfda:	7afa      	ldrb	r2, [r7, #11]
 800bfdc:	4611      	mov	r1, r2
 800bfde:	68f8      	ldr	r0, [r7, #12]
 800bfe0:	4798      	blx	r3
 800bfe2:	e001      	b.n	800bfe8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bfe4:	2302      	movs	r3, #2
 800bfe6:	e000      	b.n	800bfea <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800bfe8:	2300      	movs	r3, #0
}
 800bfea:	4618      	mov	r0, r3
 800bfec:	3718      	adds	r7, #24
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}

0800bff2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bff2:	b580      	push	{r7, lr}
 800bff4:	b082      	sub	sp, #8
 800bff6:	af00      	add	r7, sp, #0
 800bff8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bffa:	2340      	movs	r3, #64	; 0x40
 800bffc:	2200      	movs	r2, #0
 800bffe:	2100      	movs	r1, #0
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f001 fab2 	bl	800d56a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2201      	movs	r2, #1
 800c00a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2240      	movs	r2, #64	; 0x40
 800c012:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c016:	2340      	movs	r3, #64	; 0x40
 800c018:	2200      	movs	r2, #0
 800c01a:	2180      	movs	r1, #128	; 0x80
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f001 faa4 	bl	800d56a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2201      	movs	r2, #1
 800c026:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2240      	movs	r2, #64	; 0x40
 800c02c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2201      	movs	r2, #1
 800c032:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2200      	movs	r2, #0
 800c03a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2200      	movs	r2, #0
 800c042:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2200      	movs	r2, #0
 800c048:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c052:	2b00      	cmp	r3, #0
 800c054:	d009      	beq.n	800c06a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c05c:	685b      	ldr	r3, [r3, #4]
 800c05e:	687a      	ldr	r2, [r7, #4]
 800c060:	6852      	ldr	r2, [r2, #4]
 800c062:	b2d2      	uxtb	r2, r2
 800c064:	4611      	mov	r1, r2
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	4798      	blx	r3
  }

  return USBD_OK;
 800c06a:	2300      	movs	r3, #0
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	3708      	adds	r7, #8
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}

0800c074 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c074:	b480      	push	{r7}
 800c076:	b083      	sub	sp, #12
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
 800c07c:	460b      	mov	r3, r1
 800c07e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	78fa      	ldrb	r2, [r7, #3]
 800c084:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c086:	2300      	movs	r3, #0
}
 800c088:	4618      	mov	r0, r3
 800c08a:	370c      	adds	r7, #12
 800c08c:	46bd      	mov	sp, r7
 800c08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c092:	4770      	bx	lr

0800c094 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c094:	b480      	push	{r7}
 800c096:	b083      	sub	sp, #12
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2204      	movs	r2, #4
 800c0ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c0b0:	2300      	movs	r3, #0
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	370c      	adds	r7, #12
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0bc:	4770      	bx	lr

0800c0be <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c0be:	b480      	push	{r7}
 800c0c0:	b083      	sub	sp, #12
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0cc:	2b04      	cmp	r3, #4
 800c0ce:	d105      	bne.n	800c0dc <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c0dc:	2300      	movs	r3, #0
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	370c      	adds	r7, #12
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e8:	4770      	bx	lr

0800c0ea <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c0ea:	b580      	push	{r7, lr}
 800c0ec:	b082      	sub	sp, #8
 800c0ee:	af00      	add	r7, sp, #0
 800c0f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0f8:	2b03      	cmp	r3, #3
 800c0fa:	d10b      	bne.n	800c114 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c102:	69db      	ldr	r3, [r3, #28]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d005      	beq.n	800c114 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c10e:	69db      	ldr	r3, [r3, #28]
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c114:	2300      	movs	r3, #0
}
 800c116:	4618      	mov	r0, r3
 800c118:	3708      	adds	r7, #8
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}

0800c11e <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c11e:	b480      	push	{r7}
 800c120:	b083      	sub	sp, #12
 800c122:	af00      	add	r7, sp, #0
 800c124:	6078      	str	r0, [r7, #4]
 800c126:	460b      	mov	r3, r1
 800c128:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c12a:	2300      	movs	r3, #0
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	370c      	adds	r7, #12
 800c130:	46bd      	mov	sp, r7
 800c132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c136:	4770      	bx	lr

0800c138 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c138:	b480      	push	{r7}
 800c13a:	b083      	sub	sp, #12
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
 800c140:	460b      	mov	r3, r1
 800c142:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c144:	2300      	movs	r3, #0
}
 800c146:	4618      	mov	r0, r3
 800c148:	370c      	adds	r7, #12
 800c14a:	46bd      	mov	sp, r7
 800c14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c150:	4770      	bx	lr

0800c152 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c152:	b480      	push	{r7}
 800c154:	b083      	sub	sp, #12
 800c156:	af00      	add	r7, sp, #0
 800c158:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c15a:	2300      	movs	r3, #0
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	370c      	adds	r7, #12
 800c160:	46bd      	mov	sp, r7
 800c162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c166:	4770      	bx	lr

0800c168 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b082      	sub	sp, #8
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2201      	movs	r2, #1
 800c174:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c17e:	685b      	ldr	r3, [r3, #4]
 800c180:	687a      	ldr	r2, [r7, #4]
 800c182:	6852      	ldr	r2, [r2, #4]
 800c184:	b2d2      	uxtb	r2, r2
 800c186:	4611      	mov	r1, r2
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	4798      	blx	r3

  return USBD_OK;
 800c18c:	2300      	movs	r3, #0
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3708      	adds	r7, #8
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
	...

0800c198 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b084      	sub	sp, #16
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
 800c1a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c1ae:	2b20      	cmp	r3, #32
 800c1b0:	d004      	beq.n	800c1bc <USBD_StdDevReq+0x24>
 800c1b2:	2b40      	cmp	r3, #64	; 0x40
 800c1b4:	d002      	beq.n	800c1bc <USBD_StdDevReq+0x24>
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d008      	beq.n	800c1cc <USBD_StdDevReq+0x34>
 800c1ba:	e04c      	b.n	800c256 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1c2:	689b      	ldr	r3, [r3, #8]
 800c1c4:	6839      	ldr	r1, [r7, #0]
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	4798      	blx	r3
      break;
 800c1ca:	e049      	b.n	800c260 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	785b      	ldrb	r3, [r3, #1]
 800c1d0:	2b09      	cmp	r3, #9
 800c1d2:	d83a      	bhi.n	800c24a <USBD_StdDevReq+0xb2>
 800c1d4:	a201      	add	r2, pc, #4	; (adr r2, 800c1dc <USBD_StdDevReq+0x44>)
 800c1d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1da:	bf00      	nop
 800c1dc:	0800c22d 	.word	0x0800c22d
 800c1e0:	0800c241 	.word	0x0800c241
 800c1e4:	0800c24b 	.word	0x0800c24b
 800c1e8:	0800c237 	.word	0x0800c237
 800c1ec:	0800c24b 	.word	0x0800c24b
 800c1f0:	0800c20f 	.word	0x0800c20f
 800c1f4:	0800c205 	.word	0x0800c205
 800c1f8:	0800c24b 	.word	0x0800c24b
 800c1fc:	0800c223 	.word	0x0800c223
 800c200:	0800c219 	.word	0x0800c219
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c204:	6839      	ldr	r1, [r7, #0]
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f000 f9d4 	bl	800c5b4 <USBD_GetDescriptor>
          break;
 800c20c:	e022      	b.n	800c254 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c20e:	6839      	ldr	r1, [r7, #0]
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	f000 fb37 	bl	800c884 <USBD_SetAddress>
          break;
 800c216:	e01d      	b.n	800c254 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800c218:	6839      	ldr	r1, [r7, #0]
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f000 fb74 	bl	800c908 <USBD_SetConfig>
          break;
 800c220:	e018      	b.n	800c254 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c222:	6839      	ldr	r1, [r7, #0]
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f000 fbfd 	bl	800ca24 <USBD_GetConfig>
          break;
 800c22a:	e013      	b.n	800c254 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c22c:	6839      	ldr	r1, [r7, #0]
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f000 fc2c 	bl	800ca8c <USBD_GetStatus>
          break;
 800c234:	e00e      	b.n	800c254 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c236:	6839      	ldr	r1, [r7, #0]
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 fc5a 	bl	800caf2 <USBD_SetFeature>
          break;
 800c23e:	e009      	b.n	800c254 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c240:	6839      	ldr	r1, [r7, #0]
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f000 fc69 	bl	800cb1a <USBD_ClrFeature>
          break;
 800c248:	e004      	b.n	800c254 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800c24a:	6839      	ldr	r1, [r7, #0]
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f000 fcc2 	bl	800cbd6 <USBD_CtlError>
          break;
 800c252:	bf00      	nop
      }
      break;
 800c254:	e004      	b.n	800c260 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800c256:	6839      	ldr	r1, [r7, #0]
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f000 fcbc 	bl	800cbd6 <USBD_CtlError>
      break;
 800c25e:	bf00      	nop
  }

  return ret;
 800c260:	7bfb      	ldrb	r3, [r7, #15]
}
 800c262:	4618      	mov	r0, r3
 800c264:	3710      	adds	r7, #16
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}
 800c26a:	bf00      	nop

0800c26c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b084      	sub	sp, #16
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
 800c274:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c276:	2300      	movs	r3, #0
 800c278:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	781b      	ldrb	r3, [r3, #0]
 800c27e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c282:	2b20      	cmp	r3, #32
 800c284:	d003      	beq.n	800c28e <USBD_StdItfReq+0x22>
 800c286:	2b40      	cmp	r3, #64	; 0x40
 800c288:	d001      	beq.n	800c28e <USBD_StdItfReq+0x22>
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d12a      	bne.n	800c2e4 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c294:	3b01      	subs	r3, #1
 800c296:	2b02      	cmp	r3, #2
 800c298:	d81d      	bhi.n	800c2d6 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	889b      	ldrh	r3, [r3, #4]
 800c29e:	b2db      	uxtb	r3, r3
 800c2a0:	2b01      	cmp	r3, #1
 800c2a2:	d813      	bhi.n	800c2cc <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2aa:	689b      	ldr	r3, [r3, #8]
 800c2ac:	6839      	ldr	r1, [r7, #0]
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	4798      	blx	r3
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	88db      	ldrh	r3, [r3, #6]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d110      	bne.n	800c2e0 <USBD_StdItfReq+0x74>
 800c2be:	7bfb      	ldrb	r3, [r7, #15]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d10d      	bne.n	800c2e0 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f000 fd4f 	bl	800cd68 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c2ca:	e009      	b.n	800c2e0 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800c2cc:	6839      	ldr	r1, [r7, #0]
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f000 fc81 	bl	800cbd6 <USBD_CtlError>
          break;
 800c2d4:	e004      	b.n	800c2e0 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800c2d6:	6839      	ldr	r1, [r7, #0]
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f000 fc7c 	bl	800cbd6 <USBD_CtlError>
          break;
 800c2de:	e000      	b.n	800c2e2 <USBD_StdItfReq+0x76>
          break;
 800c2e0:	bf00      	nop
      }
      break;
 800c2e2:	e004      	b.n	800c2ee <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800c2e4:	6839      	ldr	r1, [r7, #0]
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f000 fc75 	bl	800cbd6 <USBD_CtlError>
      break;
 800c2ec:	bf00      	nop
  }

  return USBD_OK;
 800c2ee:	2300      	movs	r3, #0
}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	3710      	adds	r7, #16
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}

0800c2f8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b084      	sub	sp, #16
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
 800c300:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c302:	2300      	movs	r3, #0
 800c304:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	889b      	ldrh	r3, [r3, #4]
 800c30a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	781b      	ldrb	r3, [r3, #0]
 800c310:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c314:	2b20      	cmp	r3, #32
 800c316:	d004      	beq.n	800c322 <USBD_StdEPReq+0x2a>
 800c318:	2b40      	cmp	r3, #64	; 0x40
 800c31a:	d002      	beq.n	800c322 <USBD_StdEPReq+0x2a>
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d008      	beq.n	800c332 <USBD_StdEPReq+0x3a>
 800c320:	e13d      	b.n	800c59e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c328:	689b      	ldr	r3, [r3, #8]
 800c32a:	6839      	ldr	r1, [r7, #0]
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	4798      	blx	r3
      break;
 800c330:	e13a      	b.n	800c5a8 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	781b      	ldrb	r3, [r3, #0]
 800c336:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c33a:	2b20      	cmp	r3, #32
 800c33c:	d10a      	bne.n	800c354 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c344:	689b      	ldr	r3, [r3, #8]
 800c346:	6839      	ldr	r1, [r7, #0]
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	4798      	blx	r3
 800c34c:	4603      	mov	r3, r0
 800c34e:	73fb      	strb	r3, [r7, #15]

        return ret;
 800c350:	7bfb      	ldrb	r3, [r7, #15]
 800c352:	e12a      	b.n	800c5aa <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	785b      	ldrb	r3, [r3, #1]
 800c358:	2b01      	cmp	r3, #1
 800c35a:	d03e      	beq.n	800c3da <USBD_StdEPReq+0xe2>
 800c35c:	2b03      	cmp	r3, #3
 800c35e:	d002      	beq.n	800c366 <USBD_StdEPReq+0x6e>
 800c360:	2b00      	cmp	r3, #0
 800c362:	d070      	beq.n	800c446 <USBD_StdEPReq+0x14e>
 800c364:	e115      	b.n	800c592 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c36c:	2b02      	cmp	r3, #2
 800c36e:	d002      	beq.n	800c376 <USBD_StdEPReq+0x7e>
 800c370:	2b03      	cmp	r3, #3
 800c372:	d015      	beq.n	800c3a0 <USBD_StdEPReq+0xa8>
 800c374:	e02b      	b.n	800c3ce <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c376:	7bbb      	ldrb	r3, [r7, #14]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d00c      	beq.n	800c396 <USBD_StdEPReq+0x9e>
 800c37c:	7bbb      	ldrb	r3, [r7, #14]
 800c37e:	2b80      	cmp	r3, #128	; 0x80
 800c380:	d009      	beq.n	800c396 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c382:	7bbb      	ldrb	r3, [r7, #14]
 800c384:	4619      	mov	r1, r3
 800c386:	6878      	ldr	r0, [r7, #4]
 800c388:	f001 f934 	bl	800d5f4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c38c:	2180      	movs	r1, #128	; 0x80
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	f001 f930 	bl	800d5f4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c394:	e020      	b.n	800c3d8 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800c396:	6839      	ldr	r1, [r7, #0]
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f000 fc1c 	bl	800cbd6 <USBD_CtlError>
              break;
 800c39e:	e01b      	b.n	800c3d8 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	885b      	ldrh	r3, [r3, #2]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d10e      	bne.n	800c3c6 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800c3a8:	7bbb      	ldrb	r3, [r7, #14]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d00b      	beq.n	800c3c6 <USBD_StdEPReq+0xce>
 800c3ae:	7bbb      	ldrb	r3, [r7, #14]
 800c3b0:	2b80      	cmp	r3, #128	; 0x80
 800c3b2:	d008      	beq.n	800c3c6 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	88db      	ldrh	r3, [r3, #6]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d104      	bne.n	800c3c6 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800c3bc:	7bbb      	ldrb	r3, [r7, #14]
 800c3be:	4619      	mov	r1, r3
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f001 f917 	bl	800d5f4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f000 fcce 	bl	800cd68 <USBD_CtlSendStatus>

              break;
 800c3cc:	e004      	b.n	800c3d8 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800c3ce:	6839      	ldr	r1, [r7, #0]
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f000 fc00 	bl	800cbd6 <USBD_CtlError>
              break;
 800c3d6:	bf00      	nop
          }
          break;
 800c3d8:	e0e0      	b.n	800c59c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3e0:	2b02      	cmp	r3, #2
 800c3e2:	d002      	beq.n	800c3ea <USBD_StdEPReq+0xf2>
 800c3e4:	2b03      	cmp	r3, #3
 800c3e6:	d015      	beq.n	800c414 <USBD_StdEPReq+0x11c>
 800c3e8:	e026      	b.n	800c438 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c3ea:	7bbb      	ldrb	r3, [r7, #14]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d00c      	beq.n	800c40a <USBD_StdEPReq+0x112>
 800c3f0:	7bbb      	ldrb	r3, [r7, #14]
 800c3f2:	2b80      	cmp	r3, #128	; 0x80
 800c3f4:	d009      	beq.n	800c40a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c3f6:	7bbb      	ldrb	r3, [r7, #14]
 800c3f8:	4619      	mov	r1, r3
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f001 f8fa 	bl	800d5f4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c400:	2180      	movs	r1, #128	; 0x80
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f001 f8f6 	bl	800d5f4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c408:	e01c      	b.n	800c444 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800c40a:	6839      	ldr	r1, [r7, #0]
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f000 fbe2 	bl	800cbd6 <USBD_CtlError>
              break;
 800c412:	e017      	b.n	800c444 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	885b      	ldrh	r3, [r3, #2]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d112      	bne.n	800c442 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c41c:	7bbb      	ldrb	r3, [r7, #14]
 800c41e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c422:	2b00      	cmp	r3, #0
 800c424:	d004      	beq.n	800c430 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800c426:	7bbb      	ldrb	r3, [r7, #14]
 800c428:	4619      	mov	r1, r3
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f001 f901 	bl	800d632 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f000 fc99 	bl	800cd68 <USBD_CtlSendStatus>
              }
              break;
 800c436:	e004      	b.n	800c442 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800c438:	6839      	ldr	r1, [r7, #0]
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f000 fbcb 	bl	800cbd6 <USBD_CtlError>
              break;
 800c440:	e000      	b.n	800c444 <USBD_StdEPReq+0x14c>
              break;
 800c442:	bf00      	nop
          }
          break;
 800c444:	e0aa      	b.n	800c59c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c44c:	2b02      	cmp	r3, #2
 800c44e:	d002      	beq.n	800c456 <USBD_StdEPReq+0x15e>
 800c450:	2b03      	cmp	r3, #3
 800c452:	d032      	beq.n	800c4ba <USBD_StdEPReq+0x1c2>
 800c454:	e097      	b.n	800c586 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c456:	7bbb      	ldrb	r3, [r7, #14]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d007      	beq.n	800c46c <USBD_StdEPReq+0x174>
 800c45c:	7bbb      	ldrb	r3, [r7, #14]
 800c45e:	2b80      	cmp	r3, #128	; 0x80
 800c460:	d004      	beq.n	800c46c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800c462:	6839      	ldr	r1, [r7, #0]
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f000 fbb6 	bl	800cbd6 <USBD_CtlError>
                break;
 800c46a:	e091      	b.n	800c590 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c46c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c470:	2b00      	cmp	r3, #0
 800c472:	da0b      	bge.n	800c48c <USBD_StdEPReq+0x194>
 800c474:	7bbb      	ldrb	r3, [r7, #14]
 800c476:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c47a:	4613      	mov	r3, r2
 800c47c:	009b      	lsls	r3, r3, #2
 800c47e:	4413      	add	r3, r2
 800c480:	009b      	lsls	r3, r3, #2
 800c482:	3310      	adds	r3, #16
 800c484:	687a      	ldr	r2, [r7, #4]
 800c486:	4413      	add	r3, r2
 800c488:	3304      	adds	r3, #4
 800c48a:	e00b      	b.n	800c4a4 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c48c:	7bbb      	ldrb	r3, [r7, #14]
 800c48e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c492:	4613      	mov	r3, r2
 800c494:	009b      	lsls	r3, r3, #2
 800c496:	4413      	add	r3, r2
 800c498:	009b      	lsls	r3, r3, #2
 800c49a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c49e:	687a      	ldr	r2, [r7, #4]
 800c4a0:	4413      	add	r3, r2
 800c4a2:	3304      	adds	r3, #4
 800c4a4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c4ac:	68bb      	ldr	r3, [r7, #8]
 800c4ae:	2202      	movs	r2, #2
 800c4b0:	4619      	mov	r1, r3
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f000 fbfa 	bl	800ccac <USBD_CtlSendData>
              break;
 800c4b8:	e06a      	b.n	800c590 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c4ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	da11      	bge.n	800c4e6 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c4c2:	7bbb      	ldrb	r3, [r7, #14]
 800c4c4:	f003 020f 	and.w	r2, r3, #15
 800c4c8:	6879      	ldr	r1, [r7, #4]
 800c4ca:	4613      	mov	r3, r2
 800c4cc:	009b      	lsls	r3, r3, #2
 800c4ce:	4413      	add	r3, r2
 800c4d0:	009b      	lsls	r3, r3, #2
 800c4d2:	440b      	add	r3, r1
 800c4d4:	3318      	adds	r3, #24
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d117      	bne.n	800c50c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800c4dc:	6839      	ldr	r1, [r7, #0]
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f000 fb79 	bl	800cbd6 <USBD_CtlError>
                  break;
 800c4e4:	e054      	b.n	800c590 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c4e6:	7bbb      	ldrb	r3, [r7, #14]
 800c4e8:	f003 020f 	and.w	r2, r3, #15
 800c4ec:	6879      	ldr	r1, [r7, #4]
 800c4ee:	4613      	mov	r3, r2
 800c4f0:	009b      	lsls	r3, r3, #2
 800c4f2:	4413      	add	r3, r2
 800c4f4:	009b      	lsls	r3, r3, #2
 800c4f6:	440b      	add	r3, r1
 800c4f8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d104      	bne.n	800c50c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800c502:	6839      	ldr	r1, [r7, #0]
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f000 fb66 	bl	800cbd6 <USBD_CtlError>
                  break;
 800c50a:	e041      	b.n	800c590 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c50c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c510:	2b00      	cmp	r3, #0
 800c512:	da0b      	bge.n	800c52c <USBD_StdEPReq+0x234>
 800c514:	7bbb      	ldrb	r3, [r7, #14]
 800c516:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c51a:	4613      	mov	r3, r2
 800c51c:	009b      	lsls	r3, r3, #2
 800c51e:	4413      	add	r3, r2
 800c520:	009b      	lsls	r3, r3, #2
 800c522:	3310      	adds	r3, #16
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	4413      	add	r3, r2
 800c528:	3304      	adds	r3, #4
 800c52a:	e00b      	b.n	800c544 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c52c:	7bbb      	ldrb	r3, [r7, #14]
 800c52e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c532:	4613      	mov	r3, r2
 800c534:	009b      	lsls	r3, r3, #2
 800c536:	4413      	add	r3, r2
 800c538:	009b      	lsls	r3, r3, #2
 800c53a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c53e:	687a      	ldr	r2, [r7, #4]
 800c540:	4413      	add	r3, r2
 800c542:	3304      	adds	r3, #4
 800c544:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c546:	7bbb      	ldrb	r3, [r7, #14]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d002      	beq.n	800c552 <USBD_StdEPReq+0x25a>
 800c54c:	7bbb      	ldrb	r3, [r7, #14]
 800c54e:	2b80      	cmp	r3, #128	; 0x80
 800c550:	d103      	bne.n	800c55a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	2200      	movs	r2, #0
 800c556:	601a      	str	r2, [r3, #0]
 800c558:	e00e      	b.n	800c578 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800c55a:	7bbb      	ldrb	r3, [r7, #14]
 800c55c:	4619      	mov	r1, r3
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f001 f886 	bl	800d670 <USBD_LL_IsStallEP>
 800c564:	4603      	mov	r3, r0
 800c566:	2b00      	cmp	r3, #0
 800c568:	d003      	beq.n	800c572 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	2201      	movs	r2, #1
 800c56e:	601a      	str	r2, [r3, #0]
 800c570:	e002      	b.n	800c578 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	2200      	movs	r2, #0
 800c576:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	2202      	movs	r2, #2
 800c57c:	4619      	mov	r1, r3
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f000 fb94 	bl	800ccac <USBD_CtlSendData>
              break;
 800c584:	e004      	b.n	800c590 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800c586:	6839      	ldr	r1, [r7, #0]
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f000 fb24 	bl	800cbd6 <USBD_CtlError>
              break;
 800c58e:	bf00      	nop
          }
          break;
 800c590:	e004      	b.n	800c59c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800c592:	6839      	ldr	r1, [r7, #0]
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f000 fb1e 	bl	800cbd6 <USBD_CtlError>
          break;
 800c59a:	bf00      	nop
      }
      break;
 800c59c:	e004      	b.n	800c5a8 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800c59e:	6839      	ldr	r1, [r7, #0]
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f000 fb18 	bl	800cbd6 <USBD_CtlError>
      break;
 800c5a6:	bf00      	nop
  }

  return ret;
 800c5a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3710      	adds	r7, #16
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}
	...

0800c5b4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b084      	sub	sp, #16
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	885b      	ldrh	r3, [r3, #2]
 800c5ce:	0a1b      	lsrs	r3, r3, #8
 800c5d0:	b29b      	uxth	r3, r3
 800c5d2:	3b01      	subs	r3, #1
 800c5d4:	2b06      	cmp	r3, #6
 800c5d6:	f200 8128 	bhi.w	800c82a <USBD_GetDescriptor+0x276>
 800c5da:	a201      	add	r2, pc, #4	; (adr r2, 800c5e0 <USBD_GetDescriptor+0x2c>)
 800c5dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5e0:	0800c5fd 	.word	0x0800c5fd
 800c5e4:	0800c615 	.word	0x0800c615
 800c5e8:	0800c655 	.word	0x0800c655
 800c5ec:	0800c82b 	.word	0x0800c82b
 800c5f0:	0800c82b 	.word	0x0800c82b
 800c5f4:	0800c7cb 	.word	0x0800c7cb
 800c5f8:	0800c7f7 	.word	0x0800c7f7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	687a      	ldr	r2, [r7, #4]
 800c606:	7c12      	ldrb	r2, [r2, #16]
 800c608:	f107 0108 	add.w	r1, r7, #8
 800c60c:	4610      	mov	r0, r2
 800c60e:	4798      	blx	r3
 800c610:	60f8      	str	r0, [r7, #12]
      break;
 800c612:	e112      	b.n	800c83a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	7c1b      	ldrb	r3, [r3, #16]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d10d      	bne.n	800c638 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c624:	f107 0208 	add.w	r2, r7, #8
 800c628:	4610      	mov	r0, r2
 800c62a:	4798      	blx	r3
 800c62c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	3301      	adds	r3, #1
 800c632:	2202      	movs	r2, #2
 800c634:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c636:	e100      	b.n	800c83a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c640:	f107 0208 	add.w	r2, r7, #8
 800c644:	4610      	mov	r0, r2
 800c646:	4798      	blx	r3
 800c648:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	3301      	adds	r3, #1
 800c64e:	2202      	movs	r2, #2
 800c650:	701a      	strb	r2, [r3, #0]
      break;
 800c652:	e0f2      	b.n	800c83a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	885b      	ldrh	r3, [r3, #2]
 800c658:	b2db      	uxtb	r3, r3
 800c65a:	2b05      	cmp	r3, #5
 800c65c:	f200 80ac 	bhi.w	800c7b8 <USBD_GetDescriptor+0x204>
 800c660:	a201      	add	r2, pc, #4	; (adr r2, 800c668 <USBD_GetDescriptor+0xb4>)
 800c662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c666:	bf00      	nop
 800c668:	0800c681 	.word	0x0800c681
 800c66c:	0800c6b5 	.word	0x0800c6b5
 800c670:	0800c6e9 	.word	0x0800c6e9
 800c674:	0800c71d 	.word	0x0800c71d
 800c678:	0800c751 	.word	0x0800c751
 800c67c:	0800c785 	.word	0x0800c785
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c686:	685b      	ldr	r3, [r3, #4]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d00b      	beq.n	800c6a4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c692:	685b      	ldr	r3, [r3, #4]
 800c694:	687a      	ldr	r2, [r7, #4]
 800c696:	7c12      	ldrb	r2, [r2, #16]
 800c698:	f107 0108 	add.w	r1, r7, #8
 800c69c:	4610      	mov	r0, r2
 800c69e:	4798      	blx	r3
 800c6a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6a2:	e091      	b.n	800c7c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c6a4:	6839      	ldr	r1, [r7, #0]
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f000 fa95 	bl	800cbd6 <USBD_CtlError>
            err++;
 800c6ac:	7afb      	ldrb	r3, [r7, #11]
 800c6ae:	3301      	adds	r3, #1
 800c6b0:	72fb      	strb	r3, [r7, #11]
          break;
 800c6b2:	e089      	b.n	800c7c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c6ba:	689b      	ldr	r3, [r3, #8]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d00b      	beq.n	800c6d8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c6c6:	689b      	ldr	r3, [r3, #8]
 800c6c8:	687a      	ldr	r2, [r7, #4]
 800c6ca:	7c12      	ldrb	r2, [r2, #16]
 800c6cc:	f107 0108 	add.w	r1, r7, #8
 800c6d0:	4610      	mov	r0, r2
 800c6d2:	4798      	blx	r3
 800c6d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6d6:	e077      	b.n	800c7c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c6d8:	6839      	ldr	r1, [r7, #0]
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f000 fa7b 	bl	800cbd6 <USBD_CtlError>
            err++;
 800c6e0:	7afb      	ldrb	r3, [r7, #11]
 800c6e2:	3301      	adds	r3, #1
 800c6e4:	72fb      	strb	r3, [r7, #11]
          break;
 800c6e6:	e06f      	b.n	800c7c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c6ee:	68db      	ldr	r3, [r3, #12]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d00b      	beq.n	800c70c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c6fa:	68db      	ldr	r3, [r3, #12]
 800c6fc:	687a      	ldr	r2, [r7, #4]
 800c6fe:	7c12      	ldrb	r2, [r2, #16]
 800c700:	f107 0108 	add.w	r1, r7, #8
 800c704:	4610      	mov	r0, r2
 800c706:	4798      	blx	r3
 800c708:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c70a:	e05d      	b.n	800c7c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c70c:	6839      	ldr	r1, [r7, #0]
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f000 fa61 	bl	800cbd6 <USBD_CtlError>
            err++;
 800c714:	7afb      	ldrb	r3, [r7, #11]
 800c716:	3301      	adds	r3, #1
 800c718:	72fb      	strb	r3, [r7, #11]
          break;
 800c71a:	e055      	b.n	800c7c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c722:	691b      	ldr	r3, [r3, #16]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d00b      	beq.n	800c740 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c72e:	691b      	ldr	r3, [r3, #16]
 800c730:	687a      	ldr	r2, [r7, #4]
 800c732:	7c12      	ldrb	r2, [r2, #16]
 800c734:	f107 0108 	add.w	r1, r7, #8
 800c738:	4610      	mov	r0, r2
 800c73a:	4798      	blx	r3
 800c73c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c73e:	e043      	b.n	800c7c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c740:	6839      	ldr	r1, [r7, #0]
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f000 fa47 	bl	800cbd6 <USBD_CtlError>
            err++;
 800c748:	7afb      	ldrb	r3, [r7, #11]
 800c74a:	3301      	adds	r3, #1
 800c74c:	72fb      	strb	r3, [r7, #11]
          break;
 800c74e:	e03b      	b.n	800c7c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c756:	695b      	ldr	r3, [r3, #20]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d00b      	beq.n	800c774 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c762:	695b      	ldr	r3, [r3, #20]
 800c764:	687a      	ldr	r2, [r7, #4]
 800c766:	7c12      	ldrb	r2, [r2, #16]
 800c768:	f107 0108 	add.w	r1, r7, #8
 800c76c:	4610      	mov	r0, r2
 800c76e:	4798      	blx	r3
 800c770:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c772:	e029      	b.n	800c7c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c774:	6839      	ldr	r1, [r7, #0]
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f000 fa2d 	bl	800cbd6 <USBD_CtlError>
            err++;
 800c77c:	7afb      	ldrb	r3, [r7, #11]
 800c77e:	3301      	adds	r3, #1
 800c780:	72fb      	strb	r3, [r7, #11]
          break;
 800c782:	e021      	b.n	800c7c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c78a:	699b      	ldr	r3, [r3, #24]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d00b      	beq.n	800c7a8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c796:	699b      	ldr	r3, [r3, #24]
 800c798:	687a      	ldr	r2, [r7, #4]
 800c79a:	7c12      	ldrb	r2, [r2, #16]
 800c79c:	f107 0108 	add.w	r1, r7, #8
 800c7a0:	4610      	mov	r0, r2
 800c7a2:	4798      	blx	r3
 800c7a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c7a6:	e00f      	b.n	800c7c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c7a8:	6839      	ldr	r1, [r7, #0]
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f000 fa13 	bl	800cbd6 <USBD_CtlError>
            err++;
 800c7b0:	7afb      	ldrb	r3, [r7, #11]
 800c7b2:	3301      	adds	r3, #1
 800c7b4:	72fb      	strb	r3, [r7, #11]
          break;
 800c7b6:	e007      	b.n	800c7c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c7b8:	6839      	ldr	r1, [r7, #0]
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f000 fa0b 	bl	800cbd6 <USBD_CtlError>
          err++;
 800c7c0:	7afb      	ldrb	r3, [r7, #11]
 800c7c2:	3301      	adds	r3, #1
 800c7c4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800c7c6:	e038      	b.n	800c83a <USBD_GetDescriptor+0x286>
 800c7c8:	e037      	b.n	800c83a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	7c1b      	ldrb	r3, [r3, #16]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d109      	bne.n	800c7e6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7da:	f107 0208 	add.w	r2, r7, #8
 800c7de:	4610      	mov	r0, r2
 800c7e0:	4798      	blx	r3
 800c7e2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c7e4:	e029      	b.n	800c83a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c7e6:	6839      	ldr	r1, [r7, #0]
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f000 f9f4 	bl	800cbd6 <USBD_CtlError>
        err++;
 800c7ee:	7afb      	ldrb	r3, [r7, #11]
 800c7f0:	3301      	adds	r3, #1
 800c7f2:	72fb      	strb	r3, [r7, #11]
      break;
 800c7f4:	e021      	b.n	800c83a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	7c1b      	ldrb	r3, [r3, #16]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d10d      	bne.n	800c81a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c806:	f107 0208 	add.w	r2, r7, #8
 800c80a:	4610      	mov	r0, r2
 800c80c:	4798      	blx	r3
 800c80e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	3301      	adds	r3, #1
 800c814:	2207      	movs	r2, #7
 800c816:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c818:	e00f      	b.n	800c83a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c81a:	6839      	ldr	r1, [r7, #0]
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f000 f9da 	bl	800cbd6 <USBD_CtlError>
        err++;
 800c822:	7afb      	ldrb	r3, [r7, #11]
 800c824:	3301      	adds	r3, #1
 800c826:	72fb      	strb	r3, [r7, #11]
      break;
 800c828:	e007      	b.n	800c83a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c82a:	6839      	ldr	r1, [r7, #0]
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f000 f9d2 	bl	800cbd6 <USBD_CtlError>
      err++;
 800c832:	7afb      	ldrb	r3, [r7, #11]
 800c834:	3301      	adds	r3, #1
 800c836:	72fb      	strb	r3, [r7, #11]
      break;
 800c838:	bf00      	nop
  }

  if (err != 0U)
 800c83a:	7afb      	ldrb	r3, [r7, #11]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d11c      	bne.n	800c87a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c840:	893b      	ldrh	r3, [r7, #8]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d011      	beq.n	800c86a <USBD_GetDescriptor+0x2b6>
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	88db      	ldrh	r3, [r3, #6]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d00d      	beq.n	800c86a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	88da      	ldrh	r2, [r3, #6]
 800c852:	893b      	ldrh	r3, [r7, #8]
 800c854:	4293      	cmp	r3, r2
 800c856:	bf28      	it	cs
 800c858:	4613      	movcs	r3, r2
 800c85a:	b29b      	uxth	r3, r3
 800c85c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c85e:	893b      	ldrh	r3, [r7, #8]
 800c860:	461a      	mov	r2, r3
 800c862:	68f9      	ldr	r1, [r7, #12]
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f000 fa21 	bl	800ccac <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	88db      	ldrh	r3, [r3, #6]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d104      	bne.n	800c87c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f000 fa78 	bl	800cd68 <USBD_CtlSendStatus>
 800c878:	e000      	b.n	800c87c <USBD_GetDescriptor+0x2c8>
    return;
 800c87a:	bf00      	nop
    }
  }
}
 800c87c:	3710      	adds	r7, #16
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}
 800c882:	bf00      	nop

0800c884 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b084      	sub	sp, #16
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
 800c88c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	889b      	ldrh	r3, [r3, #4]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d130      	bne.n	800c8f8 <USBD_SetAddress+0x74>
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	88db      	ldrh	r3, [r3, #6]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d12c      	bne.n	800c8f8 <USBD_SetAddress+0x74>
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	885b      	ldrh	r3, [r3, #2]
 800c8a2:	2b7f      	cmp	r3, #127	; 0x7f
 800c8a4:	d828      	bhi.n	800c8f8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	885b      	ldrh	r3, [r3, #2]
 800c8aa:	b2db      	uxtb	r3, r3
 800c8ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8b8:	2b03      	cmp	r3, #3
 800c8ba:	d104      	bne.n	800c8c6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c8bc:	6839      	ldr	r1, [r7, #0]
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f000 f989 	bl	800cbd6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8c4:	e01c      	b.n	800c900 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	7bfa      	ldrb	r2, [r7, #15]
 800c8ca:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c8ce:	7bfb      	ldrb	r3, [r7, #15]
 800c8d0:	4619      	mov	r1, r3
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f000 fef8 	bl	800d6c8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f000 fa45 	bl	800cd68 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c8de:	7bfb      	ldrb	r3, [r7, #15]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d004      	beq.n	800c8ee <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2202      	movs	r2, #2
 800c8e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8ec:	e008      	b.n	800c900 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2201      	movs	r2, #1
 800c8f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8f6:	e003      	b.n	800c900 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c8f8:	6839      	ldr	r1, [r7, #0]
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f000 f96b 	bl	800cbd6 <USBD_CtlError>
  }
}
 800c900:	bf00      	nop
 800c902:	3710      	adds	r7, #16
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}

0800c908 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b082      	sub	sp, #8
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
 800c910:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	885b      	ldrh	r3, [r3, #2]
 800c916:	b2da      	uxtb	r2, r3
 800c918:	4b41      	ldr	r3, [pc, #260]	; (800ca20 <USBD_SetConfig+0x118>)
 800c91a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c91c:	4b40      	ldr	r3, [pc, #256]	; (800ca20 <USBD_SetConfig+0x118>)
 800c91e:	781b      	ldrb	r3, [r3, #0]
 800c920:	2b01      	cmp	r3, #1
 800c922:	d904      	bls.n	800c92e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800c924:	6839      	ldr	r1, [r7, #0]
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f000 f955 	bl	800cbd6 <USBD_CtlError>
 800c92c:	e075      	b.n	800ca1a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c934:	2b02      	cmp	r3, #2
 800c936:	d002      	beq.n	800c93e <USBD_SetConfig+0x36>
 800c938:	2b03      	cmp	r3, #3
 800c93a:	d023      	beq.n	800c984 <USBD_SetConfig+0x7c>
 800c93c:	e062      	b.n	800ca04 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c93e:	4b38      	ldr	r3, [pc, #224]	; (800ca20 <USBD_SetConfig+0x118>)
 800c940:	781b      	ldrb	r3, [r3, #0]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d01a      	beq.n	800c97c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800c946:	4b36      	ldr	r3, [pc, #216]	; (800ca20 <USBD_SetConfig+0x118>)
 800c948:	781b      	ldrb	r3, [r3, #0]
 800c94a:	461a      	mov	r2, r3
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2203      	movs	r2, #3
 800c954:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c958:	4b31      	ldr	r3, [pc, #196]	; (800ca20 <USBD_SetConfig+0x118>)
 800c95a:	781b      	ldrb	r3, [r3, #0]
 800c95c:	4619      	mov	r1, r3
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f7ff f9b4 	bl	800bccc <USBD_SetClassConfig>
 800c964:	4603      	mov	r3, r0
 800c966:	2b02      	cmp	r3, #2
 800c968:	d104      	bne.n	800c974 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800c96a:	6839      	ldr	r1, [r7, #0]
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f000 f932 	bl	800cbd6 <USBD_CtlError>
            return;
 800c972:	e052      	b.n	800ca1a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f000 f9f7 	bl	800cd68 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c97a:	e04e      	b.n	800ca1a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	f000 f9f3 	bl	800cd68 <USBD_CtlSendStatus>
        break;
 800c982:	e04a      	b.n	800ca1a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c984:	4b26      	ldr	r3, [pc, #152]	; (800ca20 <USBD_SetConfig+0x118>)
 800c986:	781b      	ldrb	r3, [r3, #0]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d112      	bne.n	800c9b2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2202      	movs	r2, #2
 800c990:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800c994:	4b22      	ldr	r3, [pc, #136]	; (800ca20 <USBD_SetConfig+0x118>)
 800c996:	781b      	ldrb	r3, [r3, #0]
 800c998:	461a      	mov	r2, r3
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c99e:	4b20      	ldr	r3, [pc, #128]	; (800ca20 <USBD_SetConfig+0x118>)
 800c9a0:	781b      	ldrb	r3, [r3, #0]
 800c9a2:	4619      	mov	r1, r3
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f7ff f9b0 	bl	800bd0a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f000 f9dc 	bl	800cd68 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c9b0:	e033      	b.n	800ca1a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800c9b2:	4b1b      	ldr	r3, [pc, #108]	; (800ca20 <USBD_SetConfig+0x118>)
 800c9b4:	781b      	ldrb	r3, [r3, #0]
 800c9b6:	461a      	mov	r2, r3
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	685b      	ldr	r3, [r3, #4]
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	d01d      	beq.n	800c9fc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	685b      	ldr	r3, [r3, #4]
 800c9c4:	b2db      	uxtb	r3, r3
 800c9c6:	4619      	mov	r1, r3
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f7ff f99e 	bl	800bd0a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c9ce:	4b14      	ldr	r3, [pc, #80]	; (800ca20 <USBD_SetConfig+0x118>)
 800c9d0:	781b      	ldrb	r3, [r3, #0]
 800c9d2:	461a      	mov	r2, r3
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c9d8:	4b11      	ldr	r3, [pc, #68]	; (800ca20 <USBD_SetConfig+0x118>)
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	4619      	mov	r1, r3
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f7ff f974 	bl	800bccc <USBD_SetClassConfig>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	2b02      	cmp	r3, #2
 800c9e8:	d104      	bne.n	800c9f4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800c9ea:	6839      	ldr	r1, [r7, #0]
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	f000 f8f2 	bl	800cbd6 <USBD_CtlError>
            return;
 800c9f2:	e012      	b.n	800ca1a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f000 f9b7 	bl	800cd68 <USBD_CtlSendStatus>
        break;
 800c9fa:	e00e      	b.n	800ca1a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f000 f9b3 	bl	800cd68 <USBD_CtlSendStatus>
        break;
 800ca02:	e00a      	b.n	800ca1a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800ca04:	6839      	ldr	r1, [r7, #0]
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f000 f8e5 	bl	800cbd6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800ca0c:	4b04      	ldr	r3, [pc, #16]	; (800ca20 <USBD_SetConfig+0x118>)
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	4619      	mov	r1, r3
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	f7ff f979 	bl	800bd0a <USBD_ClrClassConfig>
        break;
 800ca18:	bf00      	nop
    }
  }
}
 800ca1a:	3708      	adds	r7, #8
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}
 800ca20:	24000274 	.word	0x24000274

0800ca24 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b082      	sub	sp, #8
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
 800ca2c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	88db      	ldrh	r3, [r3, #6]
 800ca32:	2b01      	cmp	r3, #1
 800ca34:	d004      	beq.n	800ca40 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ca36:	6839      	ldr	r1, [r7, #0]
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f000 f8cc 	bl	800cbd6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ca3e:	e021      	b.n	800ca84 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca46:	2b01      	cmp	r3, #1
 800ca48:	db17      	blt.n	800ca7a <USBD_GetConfig+0x56>
 800ca4a:	2b02      	cmp	r3, #2
 800ca4c:	dd02      	ble.n	800ca54 <USBD_GetConfig+0x30>
 800ca4e:	2b03      	cmp	r3, #3
 800ca50:	d00b      	beq.n	800ca6a <USBD_GetConfig+0x46>
 800ca52:	e012      	b.n	800ca7a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2200      	movs	r2, #0
 800ca58:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	3308      	adds	r3, #8
 800ca5e:	2201      	movs	r2, #1
 800ca60:	4619      	mov	r1, r3
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	f000 f922 	bl	800ccac <USBD_CtlSendData>
        break;
 800ca68:	e00c      	b.n	800ca84 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	3304      	adds	r3, #4
 800ca6e:	2201      	movs	r2, #1
 800ca70:	4619      	mov	r1, r3
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f000 f91a 	bl	800ccac <USBD_CtlSendData>
        break;
 800ca78:	e004      	b.n	800ca84 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800ca7a:	6839      	ldr	r1, [r7, #0]
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f000 f8aa 	bl	800cbd6 <USBD_CtlError>
        break;
 800ca82:	bf00      	nop
}
 800ca84:	bf00      	nop
 800ca86:	3708      	adds	r7, #8
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}

0800ca8c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b082      	sub	sp, #8
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
 800ca94:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca9c:	3b01      	subs	r3, #1
 800ca9e:	2b02      	cmp	r3, #2
 800caa0:	d81e      	bhi.n	800cae0 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	88db      	ldrh	r3, [r3, #6]
 800caa6:	2b02      	cmp	r3, #2
 800caa8:	d004      	beq.n	800cab4 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800caaa:	6839      	ldr	r1, [r7, #0]
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f000 f892 	bl	800cbd6 <USBD_CtlError>
        break;
 800cab2:	e01a      	b.n	800caea <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2201      	movs	r2, #1
 800cab8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d005      	beq.n	800cad0 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	68db      	ldr	r3, [r3, #12]
 800cac8:	f043 0202 	orr.w	r2, r3, #2
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	330c      	adds	r3, #12
 800cad4:	2202      	movs	r2, #2
 800cad6:	4619      	mov	r1, r3
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f000 f8e7 	bl	800ccac <USBD_CtlSendData>
      break;
 800cade:	e004      	b.n	800caea <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800cae0:	6839      	ldr	r1, [r7, #0]
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f000 f877 	bl	800cbd6 <USBD_CtlError>
      break;
 800cae8:	bf00      	nop
  }
}
 800caea:	bf00      	nop
 800caec:	3708      	adds	r7, #8
 800caee:	46bd      	mov	sp, r7
 800caf0:	bd80      	pop	{r7, pc}

0800caf2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800caf2:	b580      	push	{r7, lr}
 800caf4:	b082      	sub	sp, #8
 800caf6:	af00      	add	r7, sp, #0
 800caf8:	6078      	str	r0, [r7, #4]
 800cafa:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	885b      	ldrh	r3, [r3, #2]
 800cb00:	2b01      	cmp	r3, #1
 800cb02:	d106      	bne.n	800cb12 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2201      	movs	r2, #1
 800cb08:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f000 f92b 	bl	800cd68 <USBD_CtlSendStatus>
  }
}
 800cb12:	bf00      	nop
 800cb14:	3708      	adds	r7, #8
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}

0800cb1a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800cb1a:	b580      	push	{r7, lr}
 800cb1c:	b082      	sub	sp, #8
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	6078      	str	r0, [r7, #4]
 800cb22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb2a:	3b01      	subs	r3, #1
 800cb2c:	2b02      	cmp	r3, #2
 800cb2e:	d80b      	bhi.n	800cb48 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	885b      	ldrh	r3, [r3, #2]
 800cb34:	2b01      	cmp	r3, #1
 800cb36:	d10c      	bne.n	800cb52 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f000 f911 	bl	800cd68 <USBD_CtlSendStatus>
      }
      break;
 800cb46:	e004      	b.n	800cb52 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800cb48:	6839      	ldr	r1, [r7, #0]
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f000 f843 	bl	800cbd6 <USBD_CtlError>
      break;
 800cb50:	e000      	b.n	800cb54 <USBD_ClrFeature+0x3a>
      break;
 800cb52:	bf00      	nop
  }
}
 800cb54:	bf00      	nop
 800cb56:	3708      	adds	r7, #8
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd80      	pop	{r7, pc}

0800cb5c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cb5c:	b480      	push	{r7}
 800cb5e:	b083      	sub	sp, #12
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
 800cb64:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	781a      	ldrb	r2, [r3, #0]
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	785a      	ldrb	r2, [r3, #1]
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	3302      	adds	r3, #2
 800cb7a:	781b      	ldrb	r3, [r3, #0]
 800cb7c:	b29a      	uxth	r2, r3
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	3303      	adds	r3, #3
 800cb82:	781b      	ldrb	r3, [r3, #0]
 800cb84:	b29b      	uxth	r3, r3
 800cb86:	021b      	lsls	r3, r3, #8
 800cb88:	b29b      	uxth	r3, r3
 800cb8a:	4413      	add	r3, r2
 800cb8c:	b29a      	uxth	r2, r3
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	3304      	adds	r3, #4
 800cb96:	781b      	ldrb	r3, [r3, #0]
 800cb98:	b29a      	uxth	r2, r3
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	3305      	adds	r3, #5
 800cb9e:	781b      	ldrb	r3, [r3, #0]
 800cba0:	b29b      	uxth	r3, r3
 800cba2:	021b      	lsls	r3, r3, #8
 800cba4:	b29b      	uxth	r3, r3
 800cba6:	4413      	add	r3, r2
 800cba8:	b29a      	uxth	r2, r3
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	3306      	adds	r3, #6
 800cbb2:	781b      	ldrb	r3, [r3, #0]
 800cbb4:	b29a      	uxth	r2, r3
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	3307      	adds	r3, #7
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	b29b      	uxth	r3, r3
 800cbbe:	021b      	lsls	r3, r3, #8
 800cbc0:	b29b      	uxth	r3, r3
 800cbc2:	4413      	add	r3, r2
 800cbc4:	b29a      	uxth	r2, r3
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	80da      	strh	r2, [r3, #6]

}
 800cbca:	bf00      	nop
 800cbcc:	370c      	adds	r7, #12
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd4:	4770      	bx	lr

0800cbd6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800cbd6:	b580      	push	{r7, lr}
 800cbd8:	b082      	sub	sp, #8
 800cbda:	af00      	add	r7, sp, #0
 800cbdc:	6078      	str	r0, [r7, #4]
 800cbde:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800cbe0:	2180      	movs	r1, #128	; 0x80
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f000 fd06 	bl	800d5f4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800cbe8:	2100      	movs	r1, #0
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f000 fd02 	bl	800d5f4 <USBD_LL_StallEP>
}
 800cbf0:	bf00      	nop
 800cbf2:	3708      	adds	r7, #8
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}

0800cbf8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b086      	sub	sp, #24
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	60f8      	str	r0, [r7, #12]
 800cc00:	60b9      	str	r1, [r7, #8]
 800cc02:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cc04:	2300      	movs	r3, #0
 800cc06:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d032      	beq.n	800cc74 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800cc0e:	68f8      	ldr	r0, [r7, #12]
 800cc10:	f000 f834 	bl	800cc7c <USBD_GetLen>
 800cc14:	4603      	mov	r3, r0
 800cc16:	3301      	adds	r3, #1
 800cc18:	b29b      	uxth	r3, r3
 800cc1a:	005b      	lsls	r3, r3, #1
 800cc1c:	b29a      	uxth	r2, r3
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800cc22:	7dfb      	ldrb	r3, [r7, #23]
 800cc24:	1c5a      	adds	r2, r3, #1
 800cc26:	75fa      	strb	r2, [r7, #23]
 800cc28:	461a      	mov	r2, r3
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	4413      	add	r3, r2
 800cc2e:	687a      	ldr	r2, [r7, #4]
 800cc30:	7812      	ldrb	r2, [r2, #0]
 800cc32:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800cc34:	7dfb      	ldrb	r3, [r7, #23]
 800cc36:	1c5a      	adds	r2, r3, #1
 800cc38:	75fa      	strb	r2, [r7, #23]
 800cc3a:	461a      	mov	r2, r3
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	4413      	add	r3, r2
 800cc40:	2203      	movs	r2, #3
 800cc42:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800cc44:	e012      	b.n	800cc6c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	1c5a      	adds	r2, r3, #1
 800cc4a:	60fa      	str	r2, [r7, #12]
 800cc4c:	7dfa      	ldrb	r2, [r7, #23]
 800cc4e:	1c51      	adds	r1, r2, #1
 800cc50:	75f9      	strb	r1, [r7, #23]
 800cc52:	4611      	mov	r1, r2
 800cc54:	68ba      	ldr	r2, [r7, #8]
 800cc56:	440a      	add	r2, r1
 800cc58:	781b      	ldrb	r3, [r3, #0]
 800cc5a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800cc5c:	7dfb      	ldrb	r3, [r7, #23]
 800cc5e:	1c5a      	adds	r2, r3, #1
 800cc60:	75fa      	strb	r2, [r7, #23]
 800cc62:	461a      	mov	r2, r3
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	4413      	add	r3, r2
 800cc68:	2200      	movs	r2, #0
 800cc6a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	781b      	ldrb	r3, [r3, #0]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d1e8      	bne.n	800cc46 <USBD_GetString+0x4e>
    }
  }
}
 800cc74:	bf00      	nop
 800cc76:	3718      	adds	r7, #24
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}

0800cc7c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	b085      	sub	sp, #20
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cc84:	2300      	movs	r3, #0
 800cc86:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800cc88:	e005      	b.n	800cc96 <USBD_GetLen+0x1a>
  {
    len++;
 800cc8a:	7bfb      	ldrb	r3, [r7, #15]
 800cc8c:	3301      	adds	r3, #1
 800cc8e:	73fb      	strb	r3, [r7, #15]
    buf++;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	3301      	adds	r3, #1
 800cc94:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	781b      	ldrb	r3, [r3, #0]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d1f5      	bne.n	800cc8a <USBD_GetLen+0xe>
  }

  return len;
 800cc9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3714      	adds	r7, #20
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr

0800ccac <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b084      	sub	sp, #16
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	60f8      	str	r0, [r7, #12]
 800ccb4:	60b9      	str	r1, [r7, #8]
 800ccb6:	4613      	mov	r3, r2
 800ccb8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	2202      	movs	r2, #2
 800ccbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ccc2:	88fa      	ldrh	r2, [r7, #6]
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800ccc8:	88fa      	ldrh	r2, [r7, #6]
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ccce:	88fb      	ldrh	r3, [r7, #6]
 800ccd0:	68ba      	ldr	r2, [r7, #8]
 800ccd2:	2100      	movs	r1, #0
 800ccd4:	68f8      	ldr	r0, [r7, #12]
 800ccd6:	f000 fd16 	bl	800d706 <USBD_LL_Transmit>

  return USBD_OK;
 800ccda:	2300      	movs	r3, #0
}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	3710      	adds	r7, #16
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}

0800cce4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b084      	sub	sp, #16
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	60f8      	str	r0, [r7, #12]
 800ccec:	60b9      	str	r1, [r7, #8]
 800ccee:	4613      	mov	r3, r2
 800ccf0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ccf2:	88fb      	ldrh	r3, [r7, #6]
 800ccf4:	68ba      	ldr	r2, [r7, #8]
 800ccf6:	2100      	movs	r1, #0
 800ccf8:	68f8      	ldr	r0, [r7, #12]
 800ccfa:	f000 fd04 	bl	800d706 <USBD_LL_Transmit>

  return USBD_OK;
 800ccfe:	2300      	movs	r3, #0
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3710      	adds	r7, #16
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}

0800cd08 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b084      	sub	sp, #16
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	60f8      	str	r0, [r7, #12]
 800cd10:	60b9      	str	r1, [r7, #8]
 800cd12:	4613      	mov	r3, r2
 800cd14:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	2203      	movs	r2, #3
 800cd1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cd1e:	88fa      	ldrh	r2, [r7, #6]
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800cd26:	88fa      	ldrh	r2, [r7, #6]
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cd2e:	88fb      	ldrh	r3, [r7, #6]
 800cd30:	68ba      	ldr	r2, [r7, #8]
 800cd32:	2100      	movs	r1, #0
 800cd34:	68f8      	ldr	r0, [r7, #12]
 800cd36:	f000 fd09 	bl	800d74c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cd3a:	2300      	movs	r3, #0
}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	3710      	adds	r7, #16
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}

0800cd44 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b084      	sub	sp, #16
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	60f8      	str	r0, [r7, #12]
 800cd4c:	60b9      	str	r1, [r7, #8]
 800cd4e:	4613      	mov	r3, r2
 800cd50:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cd52:	88fb      	ldrh	r3, [r7, #6]
 800cd54:	68ba      	ldr	r2, [r7, #8]
 800cd56:	2100      	movs	r1, #0
 800cd58:	68f8      	ldr	r0, [r7, #12]
 800cd5a:	f000 fcf7 	bl	800d74c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cd5e:	2300      	movs	r3, #0
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	3710      	adds	r7, #16
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}

0800cd68 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b082      	sub	sp, #8
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2204      	movs	r2, #4
 800cd74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cd78:	2300      	movs	r3, #0
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	2100      	movs	r1, #0
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f000 fcc1 	bl	800d706 <USBD_LL_Transmit>

  return USBD_OK;
 800cd84:	2300      	movs	r3, #0
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	3708      	adds	r7, #8
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}

0800cd8e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cd8e:	b580      	push	{r7, lr}
 800cd90:	b082      	sub	sp, #8
 800cd92:	af00      	add	r7, sp, #0
 800cd94:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2205      	movs	r2, #5
 800cd9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cd9e:	2300      	movs	r3, #0
 800cda0:	2200      	movs	r2, #0
 800cda2:	2100      	movs	r1, #0
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f000 fcd1 	bl	800d74c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cdaa:	2300      	movs	r3, #0
}
 800cdac:	4618      	mov	r0, r3
 800cdae:	3708      	adds	r7, #8
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}

0800cdb4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cdb8:	2200      	movs	r2, #0
 800cdba:	4913      	ldr	r1, [pc, #76]	; (800ce08 <MX_USB_DEVICE_Init+0x54>)
 800cdbc:	4813      	ldr	r0, [pc, #76]	; (800ce0c <MX_USB_DEVICE_Init+0x58>)
 800cdbe:	f7fe ff29 	bl	800bc14 <USBD_Init>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d001      	beq.n	800cdcc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cdc8:	f7f4 fd72 	bl	80018b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cdcc:	4910      	ldr	r1, [pc, #64]	; (800ce10 <MX_USB_DEVICE_Init+0x5c>)
 800cdce:	480f      	ldr	r0, [pc, #60]	; (800ce0c <MX_USB_DEVICE_Init+0x58>)
 800cdd0:	f7fe ff4b 	bl	800bc6a <USBD_RegisterClass>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d001      	beq.n	800cdde <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cdda:	f7f4 fd69 	bl	80018b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cdde:	490d      	ldr	r1, [pc, #52]	; (800ce14 <MX_USB_DEVICE_Init+0x60>)
 800cde0:	480a      	ldr	r0, [pc, #40]	; (800ce0c <MX_USB_DEVICE_Init+0x58>)
 800cde2:	f7fe fe79 	bl	800bad8 <USBD_CDC_RegisterInterface>
 800cde6:	4603      	mov	r3, r0
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d001      	beq.n	800cdf0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cdec:	f7f4 fd60 	bl	80018b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cdf0:	4806      	ldr	r0, [pc, #24]	; (800ce0c <MX_USB_DEVICE_Init+0x58>)
 800cdf2:	f7fe ff54 	bl	800bc9e <USBD_Start>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d001      	beq.n	800ce00 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cdfc:	f7f4 fd58 	bl	80018b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800ce00:	f7f7 f8ca 	bl	8003f98 <HAL_PWREx_EnableUSBVoltageDetector>
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ce04:	bf00      	nop
 800ce06:	bd80      	pop	{r7, pc}
 800ce08:	24000138 	.word	0x24000138
 800ce0c:	24000584 	.word	0x24000584
 800ce10:	24000024 	.word	0x24000024
 800ce14:	24000128 	.word	0x24000128

0800ce18 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	4905      	ldr	r1, [pc, #20]	; (800ce34 <CDC_Init_FS+0x1c>)
 800ce20:	4805      	ldr	r0, [pc, #20]	; (800ce38 <CDC_Init_FS+0x20>)
 800ce22:	f7fe fe70 	bl	800bb06 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ce26:	4905      	ldr	r1, [pc, #20]	; (800ce3c <CDC_Init_FS+0x24>)
 800ce28:	4803      	ldr	r0, [pc, #12]	; (800ce38 <CDC_Init_FS+0x20>)
 800ce2a:	f7fe fe86 	bl	800bb3a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ce2e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	bd80      	pop	{r7, pc}
 800ce34:	24001048 	.word	0x24001048
 800ce38:	24000584 	.word	0x24000584
 800ce3c:	24000848 	.word	0x24000848

0800ce40 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ce40:	b480      	push	{r7}
 800ce42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ce44:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4e:	4770      	bx	lr

0800ce50 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ce50:	b480      	push	{r7}
 800ce52:	b085      	sub	sp, #20
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	4603      	mov	r3, r0
 800ce58:	6039      	str	r1, [r7, #0]
 800ce5a:	71fb      	strb	r3, [r7, #7]
 800ce5c:	4613      	mov	r3, r2
 800ce5e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 800ce60:	f107 0308 	add.w	r3, r7, #8
 800ce64:	2200      	movs	r2, #0
 800ce66:	601a      	str	r2, [r3, #0]
 800ce68:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 800ce6c:	79fb      	ldrb	r3, [r7, #7]
 800ce6e:	2b23      	cmp	r3, #35	; 0x23
 800ce70:	d87c      	bhi.n	800cf6c <CDC_Control_FS+0x11c>
 800ce72:	a201      	add	r2, pc, #4	; (adr r2, 800ce78 <CDC_Control_FS+0x28>)
 800ce74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce78:	0800cf6d 	.word	0x0800cf6d
 800ce7c:	0800cf6d 	.word	0x0800cf6d
 800ce80:	0800cf6d 	.word	0x0800cf6d
 800ce84:	0800cf6d 	.word	0x0800cf6d
 800ce88:	0800cf6d 	.word	0x0800cf6d
 800ce8c:	0800cf6d 	.word	0x0800cf6d
 800ce90:	0800cf6d 	.word	0x0800cf6d
 800ce94:	0800cf6d 	.word	0x0800cf6d
 800ce98:	0800cf6d 	.word	0x0800cf6d
 800ce9c:	0800cf6d 	.word	0x0800cf6d
 800cea0:	0800cf6d 	.word	0x0800cf6d
 800cea4:	0800cf6d 	.word	0x0800cf6d
 800cea8:	0800cf6d 	.word	0x0800cf6d
 800ceac:	0800cf6d 	.word	0x0800cf6d
 800ceb0:	0800cf6d 	.word	0x0800cf6d
 800ceb4:	0800cf6d 	.word	0x0800cf6d
 800ceb8:	0800cf6d 	.word	0x0800cf6d
 800cebc:	0800cf6d 	.word	0x0800cf6d
 800cec0:	0800cf6d 	.word	0x0800cf6d
 800cec4:	0800cf6d 	.word	0x0800cf6d
 800cec8:	0800cf6d 	.word	0x0800cf6d
 800cecc:	0800cf6d 	.word	0x0800cf6d
 800ced0:	0800cf6d 	.word	0x0800cf6d
 800ced4:	0800cf6d 	.word	0x0800cf6d
 800ced8:	0800cf6d 	.word	0x0800cf6d
 800cedc:	0800cf6d 	.word	0x0800cf6d
 800cee0:	0800cf6d 	.word	0x0800cf6d
 800cee4:	0800cf6d 	.word	0x0800cf6d
 800cee8:	0800cf6d 	.word	0x0800cf6d
 800ceec:	0800cf6d 	.word	0x0800cf6d
 800cef0:	0800cf6d 	.word	0x0800cf6d
 800cef4:	0800cf6d 	.word	0x0800cf6d
 800cef8:	0800cf09 	.word	0x0800cf09
 800cefc:	0800cf35 	.word	0x0800cf35
 800cf00:	0800cf6d 	.word	0x0800cf6d
 800cf04:	0800cf6d 	.word	0x0800cf6d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
     	tempbuf[0] = pbuf[0];
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	781b      	ldrb	r3, [r3, #0]
 800cf0c:	723b      	strb	r3, [r7, #8]
     	tempbuf[1] = pbuf[1];
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	785b      	ldrb	r3, [r3, #1]
 800cf12:	727b      	strb	r3, [r7, #9]
     	tempbuf[2] = pbuf[2];
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	789b      	ldrb	r3, [r3, #2]
 800cf18:	72bb      	strb	r3, [r7, #10]
     	tempbuf[3] = pbuf[3];
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	78db      	ldrb	r3, [r3, #3]
 800cf1e:	72fb      	strb	r3, [r7, #11]
     	tempbuf[4] = pbuf[4];
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	791b      	ldrb	r3, [r3, #4]
 800cf24:	733b      	strb	r3, [r7, #12]
     	tempbuf[5] = pbuf[5];
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	795b      	ldrb	r3, [r3, #5]
 800cf2a:	737b      	strb	r3, [r7, #13]
     	tempbuf[6] = pbuf[6];
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	799b      	ldrb	r3, [r3, #6]
 800cf30:	73bb      	strb	r3, [r7, #14]
     	break;
 800cf32:	e01c      	b.n	800cf6e <CDC_Control_FS+0x11e>

     case CDC_GET_LINE_CODING:
     	pbuf[0] = tempbuf[0];
 800cf34:	7a3a      	ldrb	r2, [r7, #8]
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	701a      	strb	r2, [r3, #0]
     	pbuf[1] = tempbuf[1];
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	3301      	adds	r3, #1
 800cf3e:	7a7a      	ldrb	r2, [r7, #9]
 800cf40:	701a      	strb	r2, [r3, #0]
     	pbuf[2] = tempbuf[2];
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	3302      	adds	r3, #2
 800cf46:	7aba      	ldrb	r2, [r7, #10]
 800cf48:	701a      	strb	r2, [r3, #0]
     	pbuf[3] = tempbuf[3];
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	3303      	adds	r3, #3
 800cf4e:	7afa      	ldrb	r2, [r7, #11]
 800cf50:	701a      	strb	r2, [r3, #0]
     	pbuf[4] = tempbuf[4];
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	3304      	adds	r3, #4
 800cf56:	7b3a      	ldrb	r2, [r7, #12]
 800cf58:	701a      	strb	r2, [r3, #0]
     	pbuf[5] = tempbuf[5];
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	3305      	adds	r3, #5
 800cf5e:	7b7a      	ldrb	r2, [r7, #13]
 800cf60:	701a      	strb	r2, [r3, #0]
     	pbuf[6] = tempbuf[6];
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	3306      	adds	r3, #6
 800cf66:	7bba      	ldrb	r2, [r7, #14]
 800cf68:	701a      	strb	r2, [r3, #0]
     	break;
 800cf6a:	e000      	b.n	800cf6e <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cf6c:	bf00      	nop
  }

  return (USBD_OK);
 800cf6e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	3714      	adds	r7, #20
 800cf74:	46bd      	mov	sp, r7
 800cf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7a:	4770      	bx	lr

0800cf7c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b082      	sub	sp, #8
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
 800cf84:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cf86:	6879      	ldr	r1, [r7, #4]
 800cf88:	4805      	ldr	r0, [pc, #20]	; (800cfa0 <CDC_Receive_FS+0x24>)
 800cf8a:	f7fe fdd6 	bl	800bb3a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cf8e:	4804      	ldr	r0, [pc, #16]	; (800cfa0 <CDC_Receive_FS+0x24>)
 800cf90:	f7fe fe16 	bl	800bbc0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cf94:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	3708      	adds	r7, #8
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}
 800cf9e:	bf00      	nop
 800cfa0:	24000584 	.word	0x24000584

0800cfa4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b084      	sub	sp, #16
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
 800cfac:	460b      	mov	r3, r1
 800cfae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cfb4:	4b0d      	ldr	r3, [pc, #52]	; (800cfec <CDC_Transmit_FS+0x48>)
 800cfb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d001      	beq.n	800cfca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	e00b      	b.n	800cfe2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cfca:	887b      	ldrh	r3, [r7, #2]
 800cfcc:	461a      	mov	r2, r3
 800cfce:	6879      	ldr	r1, [r7, #4]
 800cfd0:	4806      	ldr	r0, [pc, #24]	; (800cfec <CDC_Transmit_FS+0x48>)
 800cfd2:	f7fe fd98 	bl	800bb06 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cfd6:	4805      	ldr	r0, [pc, #20]	; (800cfec <CDC_Transmit_FS+0x48>)
 800cfd8:	f7fe fdc3 	bl	800bb62 <USBD_CDC_TransmitPacket>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cfe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3710      	adds	r7, #16
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
 800cfea:	bf00      	nop
 800cfec:	24000584 	.word	0x24000584

0800cff0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cff0:	b480      	push	{r7}
 800cff2:	b083      	sub	sp, #12
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	4603      	mov	r3, r0
 800cff8:	6039      	str	r1, [r7, #0]
 800cffa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	2212      	movs	r2, #18
 800d000:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d002:	4b03      	ldr	r3, [pc, #12]	; (800d010 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d004:	4618      	mov	r0, r3
 800d006:	370c      	adds	r7, #12
 800d008:	46bd      	mov	sp, r7
 800d00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00e:	4770      	bx	lr
 800d010:	24000154 	.word	0x24000154

0800d014 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d014:	b480      	push	{r7}
 800d016:	b083      	sub	sp, #12
 800d018:	af00      	add	r7, sp, #0
 800d01a:	4603      	mov	r3, r0
 800d01c:	6039      	str	r1, [r7, #0]
 800d01e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	2204      	movs	r2, #4
 800d024:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d026:	4b03      	ldr	r3, [pc, #12]	; (800d034 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d028:	4618      	mov	r0, r3
 800d02a:	370c      	adds	r7, #12
 800d02c:	46bd      	mov	sp, r7
 800d02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d032:	4770      	bx	lr
 800d034:	24000168 	.word	0x24000168

0800d038 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b082      	sub	sp, #8
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	4603      	mov	r3, r0
 800d040:	6039      	str	r1, [r7, #0]
 800d042:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d044:	79fb      	ldrb	r3, [r7, #7]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d105      	bne.n	800d056 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d04a:	683a      	ldr	r2, [r7, #0]
 800d04c:	4907      	ldr	r1, [pc, #28]	; (800d06c <USBD_FS_ProductStrDescriptor+0x34>)
 800d04e:	4808      	ldr	r0, [pc, #32]	; (800d070 <USBD_FS_ProductStrDescriptor+0x38>)
 800d050:	f7ff fdd2 	bl	800cbf8 <USBD_GetString>
 800d054:	e004      	b.n	800d060 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d056:	683a      	ldr	r2, [r7, #0]
 800d058:	4904      	ldr	r1, [pc, #16]	; (800d06c <USBD_FS_ProductStrDescriptor+0x34>)
 800d05a:	4805      	ldr	r0, [pc, #20]	; (800d070 <USBD_FS_ProductStrDescriptor+0x38>)
 800d05c:	f7ff fdcc 	bl	800cbf8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d060:	4b02      	ldr	r3, [pc, #8]	; (800d06c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d062:	4618      	mov	r0, r3
 800d064:	3708      	adds	r7, #8
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}
 800d06a:	bf00      	nop
 800d06c:	24001848 	.word	0x24001848
 800d070:	0800db44 	.word	0x0800db44

0800d074 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b082      	sub	sp, #8
 800d078:	af00      	add	r7, sp, #0
 800d07a:	4603      	mov	r3, r0
 800d07c:	6039      	str	r1, [r7, #0]
 800d07e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d080:	683a      	ldr	r2, [r7, #0]
 800d082:	4904      	ldr	r1, [pc, #16]	; (800d094 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d084:	4804      	ldr	r0, [pc, #16]	; (800d098 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d086:	f7ff fdb7 	bl	800cbf8 <USBD_GetString>
  return USBD_StrDesc;
 800d08a:	4b02      	ldr	r3, [pc, #8]	; (800d094 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d08c:	4618      	mov	r0, r3
 800d08e:	3708      	adds	r7, #8
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}
 800d094:	24001848 	.word	0x24001848
 800d098:	0800db5c 	.word	0x0800db5c

0800d09c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b082      	sub	sp, #8
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	6039      	str	r1, [r7, #0]
 800d0a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	221a      	movs	r2, #26
 800d0ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d0ae:	f000 f843 	bl	800d138 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d0b2:	4b02      	ldr	r3, [pc, #8]	; (800d0bc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	3708      	adds	r7, #8
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}
 800d0bc:	2400016c 	.word	0x2400016c

0800d0c0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b082      	sub	sp, #8
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	6039      	str	r1, [r7, #0]
 800d0ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d0cc:	79fb      	ldrb	r3, [r7, #7]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d105      	bne.n	800d0de <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d0d2:	683a      	ldr	r2, [r7, #0]
 800d0d4:	4907      	ldr	r1, [pc, #28]	; (800d0f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d0d6:	4808      	ldr	r0, [pc, #32]	; (800d0f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d0d8:	f7ff fd8e 	bl	800cbf8 <USBD_GetString>
 800d0dc:	e004      	b.n	800d0e8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d0de:	683a      	ldr	r2, [r7, #0]
 800d0e0:	4904      	ldr	r1, [pc, #16]	; (800d0f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d0e2:	4805      	ldr	r0, [pc, #20]	; (800d0f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d0e4:	f7ff fd88 	bl	800cbf8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d0e8:	4b02      	ldr	r3, [pc, #8]	; (800d0f4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3708      	adds	r7, #8
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}
 800d0f2:	bf00      	nop
 800d0f4:	24001848 	.word	0x24001848
 800d0f8:	0800db70 	.word	0x0800db70

0800d0fc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b082      	sub	sp, #8
 800d100:	af00      	add	r7, sp, #0
 800d102:	4603      	mov	r3, r0
 800d104:	6039      	str	r1, [r7, #0]
 800d106:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d108:	79fb      	ldrb	r3, [r7, #7]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d105      	bne.n	800d11a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d10e:	683a      	ldr	r2, [r7, #0]
 800d110:	4907      	ldr	r1, [pc, #28]	; (800d130 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d112:	4808      	ldr	r0, [pc, #32]	; (800d134 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d114:	f7ff fd70 	bl	800cbf8 <USBD_GetString>
 800d118:	e004      	b.n	800d124 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d11a:	683a      	ldr	r2, [r7, #0]
 800d11c:	4904      	ldr	r1, [pc, #16]	; (800d130 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d11e:	4805      	ldr	r0, [pc, #20]	; (800d134 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d120:	f7ff fd6a 	bl	800cbf8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d124:	4b02      	ldr	r3, [pc, #8]	; (800d130 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d126:	4618      	mov	r0, r3
 800d128:	3708      	adds	r7, #8
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}
 800d12e:	bf00      	nop
 800d130:	24001848 	.word	0x24001848
 800d134:	0800db7c 	.word	0x0800db7c

0800d138 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b084      	sub	sp, #16
 800d13c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d13e:	4b0f      	ldr	r3, [pc, #60]	; (800d17c <Get_SerialNum+0x44>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d144:	4b0e      	ldr	r3, [pc, #56]	; (800d180 <Get_SerialNum+0x48>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d14a:	4b0e      	ldr	r3, [pc, #56]	; (800d184 <Get_SerialNum+0x4c>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d150:	68fa      	ldr	r2, [r7, #12]
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	4413      	add	r3, r2
 800d156:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d009      	beq.n	800d172 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d15e:	2208      	movs	r2, #8
 800d160:	4909      	ldr	r1, [pc, #36]	; (800d188 <Get_SerialNum+0x50>)
 800d162:	68f8      	ldr	r0, [r7, #12]
 800d164:	f000 f814 	bl	800d190 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d168:	2204      	movs	r2, #4
 800d16a:	4908      	ldr	r1, [pc, #32]	; (800d18c <Get_SerialNum+0x54>)
 800d16c:	68b8      	ldr	r0, [r7, #8]
 800d16e:	f000 f80f 	bl	800d190 <IntToUnicode>
  }
}
 800d172:	bf00      	nop
 800d174:	3710      	adds	r7, #16
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}
 800d17a:	bf00      	nop
 800d17c:	1ff1e800 	.word	0x1ff1e800
 800d180:	1ff1e804 	.word	0x1ff1e804
 800d184:	1ff1e808 	.word	0x1ff1e808
 800d188:	2400016e 	.word	0x2400016e
 800d18c:	2400017e 	.word	0x2400017e

0800d190 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d190:	b480      	push	{r7}
 800d192:	b087      	sub	sp, #28
 800d194:	af00      	add	r7, sp, #0
 800d196:	60f8      	str	r0, [r7, #12]
 800d198:	60b9      	str	r1, [r7, #8]
 800d19a:	4613      	mov	r3, r2
 800d19c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d19e:	2300      	movs	r3, #0
 800d1a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	75fb      	strb	r3, [r7, #23]
 800d1a6:	e027      	b.n	800d1f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	0f1b      	lsrs	r3, r3, #28
 800d1ac:	2b09      	cmp	r3, #9
 800d1ae:	d80b      	bhi.n	800d1c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	0f1b      	lsrs	r3, r3, #28
 800d1b4:	b2da      	uxtb	r2, r3
 800d1b6:	7dfb      	ldrb	r3, [r7, #23]
 800d1b8:	005b      	lsls	r3, r3, #1
 800d1ba:	4619      	mov	r1, r3
 800d1bc:	68bb      	ldr	r3, [r7, #8]
 800d1be:	440b      	add	r3, r1
 800d1c0:	3230      	adds	r2, #48	; 0x30
 800d1c2:	b2d2      	uxtb	r2, r2
 800d1c4:	701a      	strb	r2, [r3, #0]
 800d1c6:	e00a      	b.n	800d1de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	0f1b      	lsrs	r3, r3, #28
 800d1cc:	b2da      	uxtb	r2, r3
 800d1ce:	7dfb      	ldrb	r3, [r7, #23]
 800d1d0:	005b      	lsls	r3, r3, #1
 800d1d2:	4619      	mov	r1, r3
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	440b      	add	r3, r1
 800d1d8:	3237      	adds	r2, #55	; 0x37
 800d1da:	b2d2      	uxtb	r2, r2
 800d1dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	011b      	lsls	r3, r3, #4
 800d1e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d1e4:	7dfb      	ldrb	r3, [r7, #23]
 800d1e6:	005b      	lsls	r3, r3, #1
 800d1e8:	3301      	adds	r3, #1
 800d1ea:	68ba      	ldr	r2, [r7, #8]
 800d1ec:	4413      	add	r3, r2
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d1f2:	7dfb      	ldrb	r3, [r7, #23]
 800d1f4:	3301      	adds	r3, #1
 800d1f6:	75fb      	strb	r3, [r7, #23]
 800d1f8:	7dfa      	ldrb	r2, [r7, #23]
 800d1fa:	79fb      	ldrb	r3, [r7, #7]
 800d1fc:	429a      	cmp	r2, r3
 800d1fe:	d3d3      	bcc.n	800d1a8 <IntToUnicode+0x18>
  }
}
 800d200:	bf00      	nop
 800d202:	371c      	adds	r7, #28
 800d204:	46bd      	mov	sp, r7
 800d206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20a:	4770      	bx	lr

0800d20c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b08a      	sub	sp, #40	; 0x28
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d214:	f107 0314 	add.w	r3, r7, #20
 800d218:	2200      	movs	r2, #0
 800d21a:	601a      	str	r2, [r3, #0]
 800d21c:	605a      	str	r2, [r3, #4]
 800d21e:	609a      	str	r2, [r3, #8]
 800d220:	60da      	str	r2, [r3, #12]
 800d222:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	4a1e      	ldr	r2, [pc, #120]	; (800d2a4 <HAL_PCD_MspInit+0x98>)
 800d22a:	4293      	cmp	r3, r2
 800d22c:	d136      	bne.n	800d29c <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d22e:	4b1e      	ldr	r3, [pc, #120]	; (800d2a8 <HAL_PCD_MspInit+0x9c>)
 800d230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d234:	4a1c      	ldr	r2, [pc, #112]	; (800d2a8 <HAL_PCD_MspInit+0x9c>)
 800d236:	f043 0301 	orr.w	r3, r3, #1
 800d23a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d23e:	4b1a      	ldr	r3, [pc, #104]	; (800d2a8 <HAL_PCD_MspInit+0x9c>)
 800d240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d244:	f003 0301 	and.w	r3, r3, #1
 800d248:	613b      	str	r3, [r7, #16]
 800d24a:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800d24c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800d250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d252:	2302      	movs	r3, #2
 800d254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d256:	2300      	movs	r3, #0
 800d258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d25a:	2300      	movs	r3, #0
 800d25c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800d25e:	230a      	movs	r3, #10
 800d260:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d262:	f107 0314 	add.w	r3, r7, #20
 800d266:	4619      	mov	r1, r3
 800d268:	4810      	ldr	r0, [pc, #64]	; (800d2ac <HAL_PCD_MspInit+0xa0>)
 800d26a:	f7f5 fa85 	bl	8002778 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d26e:	4b0e      	ldr	r3, [pc, #56]	; (800d2a8 <HAL_PCD_MspInit+0x9c>)
 800d270:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d274:	4a0c      	ldr	r2, [pc, #48]	; (800d2a8 <HAL_PCD_MspInit+0x9c>)
 800d276:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d27a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800d27e:	4b0a      	ldr	r3, [pc, #40]	; (800d2a8 <HAL_PCD_MspInit+0x9c>)
 800d280:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d284:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d288:	60fb      	str	r3, [r7, #12]
 800d28a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d28c:	2200      	movs	r2, #0
 800d28e:	2100      	movs	r1, #0
 800d290:	2065      	movs	r0, #101	; 0x65
 800d292:	f7f4 fff8 	bl	8002286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d296:	2065      	movs	r0, #101	; 0x65
 800d298:	f7f5 f80f 	bl	80022ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d29c:	bf00      	nop
 800d29e:	3728      	adds	r7, #40	; 0x28
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	bd80      	pop	{r7, pc}
 800d2a4:	40080000 	.word	0x40080000
 800d2a8:	58024400 	.word	0x58024400
 800d2ac:	58020000 	.word	0x58020000

0800d2b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b082      	sub	sp, #8
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d2c4:	4619      	mov	r1, r3
 800d2c6:	4610      	mov	r0, r2
 800d2c8:	f7fe fd32 	bl	800bd30 <USBD_LL_SetupStage>
}
 800d2cc:	bf00      	nop
 800d2ce:	3708      	adds	r7, #8
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}

0800d2d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b082      	sub	sp, #8
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	460b      	mov	r3, r1
 800d2de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d2e6:	78fa      	ldrb	r2, [r7, #3]
 800d2e8:	6879      	ldr	r1, [r7, #4]
 800d2ea:	4613      	mov	r3, r2
 800d2ec:	00db      	lsls	r3, r3, #3
 800d2ee:	1a9b      	subs	r3, r3, r2
 800d2f0:	009b      	lsls	r3, r3, #2
 800d2f2:	440b      	add	r3, r1
 800d2f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d2f8:	681a      	ldr	r2, [r3, #0]
 800d2fa:	78fb      	ldrb	r3, [r7, #3]
 800d2fc:	4619      	mov	r1, r3
 800d2fe:	f7fe fd62 	bl	800bdc6 <USBD_LL_DataOutStage>
}
 800d302:	bf00      	nop
 800d304:	3708      	adds	r7, #8
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}

0800d30a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d30a:	b580      	push	{r7, lr}
 800d30c:	b082      	sub	sp, #8
 800d30e:	af00      	add	r7, sp, #0
 800d310:	6078      	str	r0, [r7, #4]
 800d312:	460b      	mov	r3, r1
 800d314:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d31c:	78fa      	ldrb	r2, [r7, #3]
 800d31e:	6879      	ldr	r1, [r7, #4]
 800d320:	4613      	mov	r3, r2
 800d322:	00db      	lsls	r3, r3, #3
 800d324:	1a9b      	subs	r3, r3, r2
 800d326:	009b      	lsls	r3, r3, #2
 800d328:	440b      	add	r3, r1
 800d32a:	3348      	adds	r3, #72	; 0x48
 800d32c:	681a      	ldr	r2, [r3, #0]
 800d32e:	78fb      	ldrb	r3, [r7, #3]
 800d330:	4619      	mov	r1, r3
 800d332:	f7fe fdb9 	bl	800bea8 <USBD_LL_DataInStage>
}
 800d336:	bf00      	nop
 800d338:	3708      	adds	r7, #8
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}

0800d33e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d33e:	b580      	push	{r7, lr}
 800d340:	b082      	sub	sp, #8
 800d342:	af00      	add	r7, sp, #0
 800d344:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d34c:	4618      	mov	r0, r3
 800d34e:	f7fe fecc 	bl	800c0ea <USBD_LL_SOF>
}
 800d352:	bf00      	nop
 800d354:	3708      	adds	r7, #8
 800d356:	46bd      	mov	sp, r7
 800d358:	bd80      	pop	{r7, pc}

0800d35a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800d35a:	b580      	push	{r7, lr}
 800d35c:	b084      	sub	sp, #16
 800d35e:	af00      	add	r7, sp, #0
 800d360:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d362:	2301      	movs	r3, #1
 800d364:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	68db      	ldr	r3, [r3, #12]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d102      	bne.n	800d374 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d36e:	2300      	movs	r3, #0
 800d370:	73fb      	strb	r3, [r7, #15]
 800d372:	e008      	b.n	800d386 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	68db      	ldr	r3, [r3, #12]
 800d378:	2b02      	cmp	r3, #2
 800d37a:	d102      	bne.n	800d382 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d37c:	2301      	movs	r3, #1
 800d37e:	73fb      	strb	r3, [r7, #15]
 800d380:	e001      	b.n	800d386 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d382:	f7f4 fa95 	bl	80018b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d38c:	7bfa      	ldrb	r2, [r7, #15]
 800d38e:	4611      	mov	r1, r2
 800d390:	4618      	mov	r0, r3
 800d392:	f7fe fe6f 	bl	800c074 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d39c:	4618      	mov	r0, r3
 800d39e:	f7fe fe28 	bl	800bff2 <USBD_LL_Reset>
}
 800d3a2:	bf00      	nop
 800d3a4:	3710      	adds	r7, #16
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	bd80      	pop	{r7, pc}
	...

0800d3ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b082      	sub	sp, #8
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f7fe fe6a 	bl	800c094 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	687a      	ldr	r2, [r7, #4]
 800d3cc:	6812      	ldr	r2, [r2, #0]
 800d3ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d3d2:	f043 0301 	orr.w	r3, r3, #1
 800d3d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6a1b      	ldr	r3, [r3, #32]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d005      	beq.n	800d3ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d3e0:	4b04      	ldr	r3, [pc, #16]	; (800d3f4 <HAL_PCD_SuspendCallback+0x48>)
 800d3e2:	691b      	ldr	r3, [r3, #16]
 800d3e4:	4a03      	ldr	r2, [pc, #12]	; (800d3f4 <HAL_PCD_SuspendCallback+0x48>)
 800d3e6:	f043 0306 	orr.w	r3, r3, #6
 800d3ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d3ec:	bf00      	nop
 800d3ee:	3708      	adds	r7, #8
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}
 800d3f4:	e000ed00 	.word	0xe000ed00

0800d3f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b082      	sub	sp, #8
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d406:	4618      	mov	r0, r3
 800d408:	f7fe fe59 	bl	800c0be <USBD_LL_Resume>
}
 800d40c:	bf00      	nop
 800d40e:	3708      	adds	r7, #8
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}

0800d414 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b082      	sub	sp, #8
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
 800d41c:	460b      	mov	r3, r1
 800d41e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d426:	78fa      	ldrb	r2, [r7, #3]
 800d428:	4611      	mov	r1, r2
 800d42a:	4618      	mov	r0, r3
 800d42c:	f7fe fe84 	bl	800c138 <USBD_LL_IsoOUTIncomplete>
}
 800d430:	bf00      	nop
 800d432:	3708      	adds	r7, #8
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}

0800d438 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b082      	sub	sp, #8
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
 800d440:	460b      	mov	r3, r1
 800d442:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d44a:	78fa      	ldrb	r2, [r7, #3]
 800d44c:	4611      	mov	r1, r2
 800d44e:	4618      	mov	r0, r3
 800d450:	f7fe fe65 	bl	800c11e <USBD_LL_IsoINIncomplete>
}
 800d454:	bf00      	nop
 800d456:	3708      	adds	r7, #8
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}

0800d45c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b082      	sub	sp, #8
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d46a:	4618      	mov	r0, r3
 800d46c:	f7fe fe71 	bl	800c152 <USBD_LL_DevConnected>
}
 800d470:	bf00      	nop
 800d472:	3708      	adds	r7, #8
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}

0800d478 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b082      	sub	sp, #8
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d486:	4618      	mov	r0, r3
 800d488:	f7fe fe6e 	bl	800c168 <USBD_LL_DevDisconnected>
}
 800d48c:	bf00      	nop
 800d48e:	3708      	adds	r7, #8
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}

0800d494 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b082      	sub	sp, #8
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	781b      	ldrb	r3, [r3, #0]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d13e      	bne.n	800d522 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d4a4:	4a21      	ldr	r2, [pc, #132]	; (800d52c <USBD_LL_Init+0x98>)
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	4a1f      	ldr	r2, [pc, #124]	; (800d52c <USBD_LL_Init+0x98>)
 800d4b0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d4b4:	4b1d      	ldr	r3, [pc, #116]	; (800d52c <USBD_LL_Init+0x98>)
 800d4b6:	4a1e      	ldr	r2, [pc, #120]	; (800d530 <USBD_LL_Init+0x9c>)
 800d4b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800d4ba:	4b1c      	ldr	r3, [pc, #112]	; (800d52c <USBD_LL_Init+0x98>)
 800d4bc:	2209      	movs	r2, #9
 800d4be:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d4c0:	4b1a      	ldr	r3, [pc, #104]	; (800d52c <USBD_LL_Init+0x98>)
 800d4c2:	2202      	movs	r2, #2
 800d4c4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d4c6:	4b19      	ldr	r3, [pc, #100]	; (800d52c <USBD_LL_Init+0x98>)
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d4cc:	4b17      	ldr	r3, [pc, #92]	; (800d52c <USBD_LL_Init+0x98>)
 800d4ce:	2202      	movs	r2, #2
 800d4d0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800d4d2:	4b16      	ldr	r3, [pc, #88]	; (800d52c <USBD_LL_Init+0x98>)
 800d4d4:	2201      	movs	r2, #1
 800d4d6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d4d8:	4b14      	ldr	r3, [pc, #80]	; (800d52c <USBD_LL_Init+0x98>)
 800d4da:	2200      	movs	r2, #0
 800d4dc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d4de:	4b13      	ldr	r3, [pc, #76]	; (800d52c <USBD_LL_Init+0x98>)
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800d4e4:	4b11      	ldr	r3, [pc, #68]	; (800d52c <USBD_LL_Init+0x98>)
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d4ea:	4b10      	ldr	r3, [pc, #64]	; (800d52c <USBD_LL_Init+0x98>)
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d4f0:	4b0e      	ldr	r3, [pc, #56]	; (800d52c <USBD_LL_Init+0x98>)
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d4f6:	480d      	ldr	r0, [pc, #52]	; (800d52c <USBD_LL_Init+0x98>)
 800d4f8:	f7f5 fb39 	bl	8002b6e <HAL_PCD_Init>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d001      	beq.n	800d506 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800d502:	f7f4 f9d5 	bl	80018b0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d506:	2180      	movs	r1, #128	; 0x80
 800d508:	4808      	ldr	r0, [pc, #32]	; (800d52c <USBD_LL_Init+0x98>)
 800d50a:	f7f6 fcca 	bl	8003ea2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d50e:	2240      	movs	r2, #64	; 0x40
 800d510:	2100      	movs	r1, #0
 800d512:	4806      	ldr	r0, [pc, #24]	; (800d52c <USBD_LL_Init+0x98>)
 800d514:	f7f6 fc7e 	bl	8003e14 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d518:	2280      	movs	r2, #128	; 0x80
 800d51a:	2101      	movs	r1, #1
 800d51c:	4803      	ldr	r0, [pc, #12]	; (800d52c <USBD_LL_Init+0x98>)
 800d51e:	f7f6 fc79 	bl	8003e14 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d522:	2300      	movs	r3, #0
}
 800d524:	4618      	mov	r0, r3
 800d526:	3708      	adds	r7, #8
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}
 800d52c:	24001a48 	.word	0x24001a48
 800d530:	40080000 	.word	0x40080000

0800d534 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b084      	sub	sp, #16
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d53c:	2300      	movs	r3, #0
 800d53e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d540:	2300      	movs	r3, #0
 800d542:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d54a:	4618      	mov	r0, r3
 800d54c:	f7f5 fc33 	bl	8002db6 <HAL_PCD_Start>
 800d550:	4603      	mov	r3, r0
 800d552:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800d554:	7bfb      	ldrb	r3, [r7, #15]
 800d556:	4618      	mov	r0, r3
 800d558:	f000 f92e 	bl	800d7b8 <USBD_Get_USB_Status>
 800d55c:	4603      	mov	r3, r0
 800d55e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800d560:	7bbb      	ldrb	r3, [r7, #14]
}
 800d562:	4618      	mov	r0, r3
 800d564:	3710      	adds	r7, #16
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}

0800d56a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d56a:	b580      	push	{r7, lr}
 800d56c:	b084      	sub	sp, #16
 800d56e:	af00      	add	r7, sp, #0
 800d570:	6078      	str	r0, [r7, #4]
 800d572:	4608      	mov	r0, r1
 800d574:	4611      	mov	r1, r2
 800d576:	461a      	mov	r2, r3
 800d578:	4603      	mov	r3, r0
 800d57a:	70fb      	strb	r3, [r7, #3]
 800d57c:	460b      	mov	r3, r1
 800d57e:	70bb      	strb	r3, [r7, #2]
 800d580:	4613      	mov	r3, r2
 800d582:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d584:	2300      	movs	r3, #0
 800d586:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d588:	2300      	movs	r3, #0
 800d58a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d592:	78bb      	ldrb	r3, [r7, #2]
 800d594:	883a      	ldrh	r2, [r7, #0]
 800d596:	78f9      	ldrb	r1, [r7, #3]
 800d598:	f7f6 f844 	bl	8003624 <HAL_PCD_EP_Open>
 800d59c:	4603      	mov	r3, r0
 800d59e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5a0:	7bfb      	ldrb	r3, [r7, #15]
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f000 f908 	bl	800d7b8 <USBD_Get_USB_Status>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800d5ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	3710      	adds	r7, #16
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bd80      	pop	{r7, pc}

0800d5b6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d5b6:	b580      	push	{r7, lr}
 800d5b8:	b084      	sub	sp, #16
 800d5ba:	af00      	add	r7, sp, #0
 800d5bc:	6078      	str	r0, [r7, #4]
 800d5be:	460b      	mov	r3, r1
 800d5c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d5d0:	78fa      	ldrb	r2, [r7, #3]
 800d5d2:	4611      	mov	r1, r2
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f7f6 f88d 	bl	80036f4 <HAL_PCD_EP_Close>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800d5de:	7bfb      	ldrb	r3, [r7, #15]
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f000 f8e9 	bl	800d7b8 <USBD_Get_USB_Status>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800d5ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	3710      	adds	r7, #16
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}

0800d5f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b084      	sub	sp, #16
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
 800d5fc:	460b      	mov	r3, r1
 800d5fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d600:	2300      	movs	r3, #0
 800d602:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d604:	2300      	movs	r3, #0
 800d606:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d60e:	78fa      	ldrb	r2, [r7, #3]
 800d610:	4611      	mov	r1, r2
 800d612:	4618      	mov	r0, r3
 800d614:	f7f6 f965 	bl	80038e2 <HAL_PCD_EP_SetStall>
 800d618:	4603      	mov	r3, r0
 800d61a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d61c:	7bfb      	ldrb	r3, [r7, #15]
 800d61e:	4618      	mov	r0, r3
 800d620:	f000 f8ca 	bl	800d7b8 <USBD_Get_USB_Status>
 800d624:	4603      	mov	r3, r0
 800d626:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800d628:	7bbb      	ldrb	r3, [r7, #14]
}
 800d62a:	4618      	mov	r0, r3
 800d62c:	3710      	adds	r7, #16
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}

0800d632 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d632:	b580      	push	{r7, lr}
 800d634:	b084      	sub	sp, #16
 800d636:	af00      	add	r7, sp, #0
 800d638:	6078      	str	r0, [r7, #4]
 800d63a:	460b      	mov	r3, r1
 800d63c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d63e:	2300      	movs	r3, #0
 800d640:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d642:	2300      	movs	r3, #0
 800d644:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d64c:	78fa      	ldrb	r2, [r7, #3]
 800d64e:	4611      	mov	r1, r2
 800d650:	4618      	mov	r0, r3
 800d652:	f7f6 f9aa 	bl	80039aa <HAL_PCD_EP_ClrStall>
 800d656:	4603      	mov	r3, r0
 800d658:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800d65a:	7bfb      	ldrb	r3, [r7, #15]
 800d65c:	4618      	mov	r0, r3
 800d65e:	f000 f8ab 	bl	800d7b8 <USBD_Get_USB_Status>
 800d662:	4603      	mov	r3, r0
 800d664:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800d666:	7bbb      	ldrb	r3, [r7, #14]
}
 800d668:	4618      	mov	r0, r3
 800d66a:	3710      	adds	r7, #16
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}

0800d670 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d670:	b480      	push	{r7}
 800d672:	b085      	sub	sp, #20
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
 800d678:	460b      	mov	r3, r1
 800d67a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d682:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800d684:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	da0b      	bge.n	800d6a4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800d68c:	78fb      	ldrb	r3, [r7, #3]
 800d68e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d692:	68f9      	ldr	r1, [r7, #12]
 800d694:	4613      	mov	r3, r2
 800d696:	00db      	lsls	r3, r3, #3
 800d698:	1a9b      	subs	r3, r3, r2
 800d69a:	009b      	lsls	r3, r3, #2
 800d69c:	440b      	add	r3, r1
 800d69e:	333e      	adds	r3, #62	; 0x3e
 800d6a0:	781b      	ldrb	r3, [r3, #0]
 800d6a2:	e00b      	b.n	800d6bc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800d6a4:	78fb      	ldrb	r3, [r7, #3]
 800d6a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d6aa:	68f9      	ldr	r1, [r7, #12]
 800d6ac:	4613      	mov	r3, r2
 800d6ae:	00db      	lsls	r3, r3, #3
 800d6b0:	1a9b      	subs	r3, r3, r2
 800d6b2:	009b      	lsls	r3, r3, #2
 800d6b4:	440b      	add	r3, r1
 800d6b6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d6ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d6bc:	4618      	mov	r0, r3
 800d6be:	3714      	adds	r7, #20
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c6:	4770      	bx	lr

0800d6c8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b084      	sub	sp, #16
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
 800d6d0:	460b      	mov	r3, r1
 800d6d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6d8:	2300      	movs	r3, #0
 800d6da:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d6e2:	78fa      	ldrb	r2, [r7, #3]
 800d6e4:	4611      	mov	r1, r2
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f7f5 ff77 	bl	80035da <HAL_PCD_SetAddress>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d6f0:	7bfb      	ldrb	r3, [r7, #15]
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f000 f860 	bl	800d7b8 <USBD_Get_USB_Status>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800d6fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	3710      	adds	r7, #16
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}

0800d706 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d706:	b580      	push	{r7, lr}
 800d708:	b086      	sub	sp, #24
 800d70a:	af00      	add	r7, sp, #0
 800d70c:	60f8      	str	r0, [r7, #12]
 800d70e:	607a      	str	r2, [r7, #4]
 800d710:	461a      	mov	r2, r3
 800d712:	460b      	mov	r3, r1
 800d714:	72fb      	strb	r3, [r7, #11]
 800d716:	4613      	mov	r3, r2
 800d718:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d71a:	2300      	movs	r3, #0
 800d71c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d71e:	2300      	movs	r3, #0
 800d720:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d728:	893b      	ldrh	r3, [r7, #8]
 800d72a:	7af9      	ldrb	r1, [r7, #11]
 800d72c:	687a      	ldr	r2, [r7, #4]
 800d72e:	f7f6 f88e 	bl	800384e <HAL_PCD_EP_Transmit>
 800d732:	4603      	mov	r3, r0
 800d734:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800d736:	7dfb      	ldrb	r3, [r7, #23]
 800d738:	4618      	mov	r0, r3
 800d73a:	f000 f83d 	bl	800d7b8 <USBD_Get_USB_Status>
 800d73e:	4603      	mov	r3, r0
 800d740:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800d742:	7dbb      	ldrb	r3, [r7, #22]
}
 800d744:	4618      	mov	r0, r3
 800d746:	3718      	adds	r7, #24
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}

0800d74c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b086      	sub	sp, #24
 800d750:	af00      	add	r7, sp, #0
 800d752:	60f8      	str	r0, [r7, #12]
 800d754:	607a      	str	r2, [r7, #4]
 800d756:	461a      	mov	r2, r3
 800d758:	460b      	mov	r3, r1
 800d75a:	72fb      	strb	r3, [r7, #11]
 800d75c:	4613      	mov	r3, r2
 800d75e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d760:	2300      	movs	r3, #0
 800d762:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d764:	2300      	movs	r3, #0
 800d766:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d76e:	893b      	ldrh	r3, [r7, #8]
 800d770:	7af9      	ldrb	r1, [r7, #11]
 800d772:	687a      	ldr	r2, [r7, #4]
 800d774:	f7f6 f808 	bl	8003788 <HAL_PCD_EP_Receive>
 800d778:	4603      	mov	r3, r0
 800d77a:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800d77c:	7dfb      	ldrb	r3, [r7, #23]
 800d77e:	4618      	mov	r0, r3
 800d780:	f000 f81a 	bl	800d7b8 <USBD_Get_USB_Status>
 800d784:	4603      	mov	r3, r0
 800d786:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800d788:	7dbb      	ldrb	r3, [r7, #22]
}
 800d78a:	4618      	mov	r0, r3
 800d78c:	3718      	adds	r7, #24
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd80      	pop	{r7, pc}

0800d792 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d792:	b580      	push	{r7, lr}
 800d794:	b082      	sub	sp, #8
 800d796:	af00      	add	r7, sp, #0
 800d798:	6078      	str	r0, [r7, #4]
 800d79a:	460b      	mov	r3, r1
 800d79c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d7a4:	78fa      	ldrb	r2, [r7, #3]
 800d7a6:	4611      	mov	r1, r2
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f7f6 f838 	bl	800381e <HAL_PCD_EP_GetRxCount>
 800d7ae:	4603      	mov	r3, r0
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	3708      	adds	r7, #8
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}

0800d7b8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d7b8:	b480      	push	{r7}
 800d7ba:	b085      	sub	sp, #20
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	4603      	mov	r3, r0
 800d7c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d7c6:	79fb      	ldrb	r3, [r7, #7]
 800d7c8:	2b03      	cmp	r3, #3
 800d7ca:	d817      	bhi.n	800d7fc <USBD_Get_USB_Status+0x44>
 800d7cc:	a201      	add	r2, pc, #4	; (adr r2, 800d7d4 <USBD_Get_USB_Status+0x1c>)
 800d7ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7d2:	bf00      	nop
 800d7d4:	0800d7e5 	.word	0x0800d7e5
 800d7d8:	0800d7eb 	.word	0x0800d7eb
 800d7dc:	0800d7f1 	.word	0x0800d7f1
 800d7e0:	0800d7f7 	.word	0x0800d7f7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	73fb      	strb	r3, [r7, #15]
    break;
 800d7e8:	e00b      	b.n	800d802 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d7ea:	2302      	movs	r3, #2
 800d7ec:	73fb      	strb	r3, [r7, #15]
    break;
 800d7ee:	e008      	b.n	800d802 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	73fb      	strb	r3, [r7, #15]
    break;
 800d7f4:	e005      	b.n	800d802 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d7f6:	2302      	movs	r3, #2
 800d7f8:	73fb      	strb	r3, [r7, #15]
    break;
 800d7fa:	e002      	b.n	800d802 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d7fc:	2302      	movs	r3, #2
 800d7fe:	73fb      	strb	r3, [r7, #15]
    break;
 800d800:	bf00      	nop
  }
  return usb_status;
 800d802:	7bfb      	ldrb	r3, [r7, #15]
}
 800d804:	4618      	mov	r0, r3
 800d806:	3714      	adds	r7, #20
 800d808:	46bd      	mov	sp, r7
 800d80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80e:	4770      	bx	lr

0800d810 <__errno>:
 800d810:	4b01      	ldr	r3, [pc, #4]	; (800d818 <__errno+0x8>)
 800d812:	6818      	ldr	r0, [r3, #0]
 800d814:	4770      	bx	lr
 800d816:	bf00      	nop
 800d818:	24000188 	.word	0x24000188

0800d81c <__libc_init_array>:
 800d81c:	b570      	push	{r4, r5, r6, lr}
 800d81e:	4e0d      	ldr	r6, [pc, #52]	; (800d854 <__libc_init_array+0x38>)
 800d820:	4c0d      	ldr	r4, [pc, #52]	; (800d858 <__libc_init_array+0x3c>)
 800d822:	1ba4      	subs	r4, r4, r6
 800d824:	10a4      	asrs	r4, r4, #2
 800d826:	2500      	movs	r5, #0
 800d828:	42a5      	cmp	r5, r4
 800d82a:	d109      	bne.n	800d840 <__libc_init_array+0x24>
 800d82c:	4e0b      	ldr	r6, [pc, #44]	; (800d85c <__libc_init_array+0x40>)
 800d82e:	4c0c      	ldr	r4, [pc, #48]	; (800d860 <__libc_init_array+0x44>)
 800d830:	f000 f95a 	bl	800dae8 <_init>
 800d834:	1ba4      	subs	r4, r4, r6
 800d836:	10a4      	asrs	r4, r4, #2
 800d838:	2500      	movs	r5, #0
 800d83a:	42a5      	cmp	r5, r4
 800d83c:	d105      	bne.n	800d84a <__libc_init_array+0x2e>
 800d83e:	bd70      	pop	{r4, r5, r6, pc}
 800d840:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d844:	4798      	blx	r3
 800d846:	3501      	adds	r5, #1
 800d848:	e7ee      	b.n	800d828 <__libc_init_array+0xc>
 800d84a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d84e:	4798      	blx	r3
 800d850:	3501      	adds	r5, #1
 800d852:	e7f2      	b.n	800d83a <__libc_init_array+0x1e>
 800d854:	0800dbcc 	.word	0x0800dbcc
 800d858:	0800dbcc 	.word	0x0800dbcc
 800d85c:	0800dbcc 	.word	0x0800dbcc
 800d860:	0800dbd0 	.word	0x0800dbd0

0800d864 <__itoa>:
 800d864:	1e93      	subs	r3, r2, #2
 800d866:	2b22      	cmp	r3, #34	; 0x22
 800d868:	b510      	push	{r4, lr}
 800d86a:	460c      	mov	r4, r1
 800d86c:	d904      	bls.n	800d878 <__itoa+0x14>
 800d86e:	2300      	movs	r3, #0
 800d870:	700b      	strb	r3, [r1, #0]
 800d872:	461c      	mov	r4, r3
 800d874:	4620      	mov	r0, r4
 800d876:	bd10      	pop	{r4, pc}
 800d878:	2a0a      	cmp	r2, #10
 800d87a:	d109      	bne.n	800d890 <__itoa+0x2c>
 800d87c:	2800      	cmp	r0, #0
 800d87e:	da07      	bge.n	800d890 <__itoa+0x2c>
 800d880:	232d      	movs	r3, #45	; 0x2d
 800d882:	700b      	strb	r3, [r1, #0]
 800d884:	4240      	negs	r0, r0
 800d886:	2101      	movs	r1, #1
 800d888:	4421      	add	r1, r4
 800d88a:	f000 f8ed 	bl	800da68 <__utoa>
 800d88e:	e7f1      	b.n	800d874 <__itoa+0x10>
 800d890:	2100      	movs	r1, #0
 800d892:	e7f9      	b.n	800d888 <__itoa+0x24>

0800d894 <itoa>:
 800d894:	f7ff bfe6 	b.w	800d864 <__itoa>

0800d898 <malloc>:
 800d898:	4b02      	ldr	r3, [pc, #8]	; (800d8a4 <malloc+0xc>)
 800d89a:	4601      	mov	r1, r0
 800d89c:	6818      	ldr	r0, [r3, #0]
 800d89e:	f000 b861 	b.w	800d964 <_malloc_r>
 800d8a2:	bf00      	nop
 800d8a4:	24000188 	.word	0x24000188

0800d8a8 <free>:
 800d8a8:	4b02      	ldr	r3, [pc, #8]	; (800d8b4 <free+0xc>)
 800d8aa:	4601      	mov	r1, r0
 800d8ac:	6818      	ldr	r0, [r3, #0]
 800d8ae:	f000 b80b 	b.w	800d8c8 <_free_r>
 800d8b2:	bf00      	nop
 800d8b4:	24000188 	.word	0x24000188

0800d8b8 <memset>:
 800d8b8:	4402      	add	r2, r0
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	4293      	cmp	r3, r2
 800d8be:	d100      	bne.n	800d8c2 <memset+0xa>
 800d8c0:	4770      	bx	lr
 800d8c2:	f803 1b01 	strb.w	r1, [r3], #1
 800d8c6:	e7f9      	b.n	800d8bc <memset+0x4>

0800d8c8 <_free_r>:
 800d8c8:	b538      	push	{r3, r4, r5, lr}
 800d8ca:	4605      	mov	r5, r0
 800d8cc:	2900      	cmp	r1, #0
 800d8ce:	d045      	beq.n	800d95c <_free_r+0x94>
 800d8d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8d4:	1f0c      	subs	r4, r1, #4
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	bfb8      	it	lt
 800d8da:	18e4      	addlt	r4, r4, r3
 800d8dc:	f000 f902 	bl	800dae4 <__malloc_lock>
 800d8e0:	4a1f      	ldr	r2, [pc, #124]	; (800d960 <_free_r+0x98>)
 800d8e2:	6813      	ldr	r3, [r2, #0]
 800d8e4:	4610      	mov	r0, r2
 800d8e6:	b933      	cbnz	r3, 800d8f6 <_free_r+0x2e>
 800d8e8:	6063      	str	r3, [r4, #4]
 800d8ea:	6014      	str	r4, [r2, #0]
 800d8ec:	4628      	mov	r0, r5
 800d8ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d8f2:	f000 b8f8 	b.w	800dae6 <__malloc_unlock>
 800d8f6:	42a3      	cmp	r3, r4
 800d8f8:	d90c      	bls.n	800d914 <_free_r+0x4c>
 800d8fa:	6821      	ldr	r1, [r4, #0]
 800d8fc:	1862      	adds	r2, r4, r1
 800d8fe:	4293      	cmp	r3, r2
 800d900:	bf04      	itt	eq
 800d902:	681a      	ldreq	r2, [r3, #0]
 800d904:	685b      	ldreq	r3, [r3, #4]
 800d906:	6063      	str	r3, [r4, #4]
 800d908:	bf04      	itt	eq
 800d90a:	1852      	addeq	r2, r2, r1
 800d90c:	6022      	streq	r2, [r4, #0]
 800d90e:	6004      	str	r4, [r0, #0]
 800d910:	e7ec      	b.n	800d8ec <_free_r+0x24>
 800d912:	4613      	mov	r3, r2
 800d914:	685a      	ldr	r2, [r3, #4]
 800d916:	b10a      	cbz	r2, 800d91c <_free_r+0x54>
 800d918:	42a2      	cmp	r2, r4
 800d91a:	d9fa      	bls.n	800d912 <_free_r+0x4a>
 800d91c:	6819      	ldr	r1, [r3, #0]
 800d91e:	1858      	adds	r0, r3, r1
 800d920:	42a0      	cmp	r0, r4
 800d922:	d10b      	bne.n	800d93c <_free_r+0x74>
 800d924:	6820      	ldr	r0, [r4, #0]
 800d926:	4401      	add	r1, r0
 800d928:	1858      	adds	r0, r3, r1
 800d92a:	4282      	cmp	r2, r0
 800d92c:	6019      	str	r1, [r3, #0]
 800d92e:	d1dd      	bne.n	800d8ec <_free_r+0x24>
 800d930:	6810      	ldr	r0, [r2, #0]
 800d932:	6852      	ldr	r2, [r2, #4]
 800d934:	605a      	str	r2, [r3, #4]
 800d936:	4401      	add	r1, r0
 800d938:	6019      	str	r1, [r3, #0]
 800d93a:	e7d7      	b.n	800d8ec <_free_r+0x24>
 800d93c:	d902      	bls.n	800d944 <_free_r+0x7c>
 800d93e:	230c      	movs	r3, #12
 800d940:	602b      	str	r3, [r5, #0]
 800d942:	e7d3      	b.n	800d8ec <_free_r+0x24>
 800d944:	6820      	ldr	r0, [r4, #0]
 800d946:	1821      	adds	r1, r4, r0
 800d948:	428a      	cmp	r2, r1
 800d94a:	bf04      	itt	eq
 800d94c:	6811      	ldreq	r1, [r2, #0]
 800d94e:	6852      	ldreq	r2, [r2, #4]
 800d950:	6062      	str	r2, [r4, #4]
 800d952:	bf04      	itt	eq
 800d954:	1809      	addeq	r1, r1, r0
 800d956:	6021      	streq	r1, [r4, #0]
 800d958:	605c      	str	r4, [r3, #4]
 800d95a:	e7c7      	b.n	800d8ec <_free_r+0x24>
 800d95c:	bd38      	pop	{r3, r4, r5, pc}
 800d95e:	bf00      	nop
 800d960:	24000278 	.word	0x24000278

0800d964 <_malloc_r>:
 800d964:	b570      	push	{r4, r5, r6, lr}
 800d966:	1ccd      	adds	r5, r1, #3
 800d968:	f025 0503 	bic.w	r5, r5, #3
 800d96c:	3508      	adds	r5, #8
 800d96e:	2d0c      	cmp	r5, #12
 800d970:	bf38      	it	cc
 800d972:	250c      	movcc	r5, #12
 800d974:	2d00      	cmp	r5, #0
 800d976:	4606      	mov	r6, r0
 800d978:	db01      	blt.n	800d97e <_malloc_r+0x1a>
 800d97a:	42a9      	cmp	r1, r5
 800d97c:	d903      	bls.n	800d986 <_malloc_r+0x22>
 800d97e:	230c      	movs	r3, #12
 800d980:	6033      	str	r3, [r6, #0]
 800d982:	2000      	movs	r0, #0
 800d984:	bd70      	pop	{r4, r5, r6, pc}
 800d986:	f000 f8ad 	bl	800dae4 <__malloc_lock>
 800d98a:	4a21      	ldr	r2, [pc, #132]	; (800da10 <_malloc_r+0xac>)
 800d98c:	6814      	ldr	r4, [r2, #0]
 800d98e:	4621      	mov	r1, r4
 800d990:	b991      	cbnz	r1, 800d9b8 <_malloc_r+0x54>
 800d992:	4c20      	ldr	r4, [pc, #128]	; (800da14 <_malloc_r+0xb0>)
 800d994:	6823      	ldr	r3, [r4, #0]
 800d996:	b91b      	cbnz	r3, 800d9a0 <_malloc_r+0x3c>
 800d998:	4630      	mov	r0, r6
 800d99a:	f000 f83d 	bl	800da18 <_sbrk_r>
 800d99e:	6020      	str	r0, [r4, #0]
 800d9a0:	4629      	mov	r1, r5
 800d9a2:	4630      	mov	r0, r6
 800d9a4:	f000 f838 	bl	800da18 <_sbrk_r>
 800d9a8:	1c43      	adds	r3, r0, #1
 800d9aa:	d124      	bne.n	800d9f6 <_malloc_r+0x92>
 800d9ac:	230c      	movs	r3, #12
 800d9ae:	6033      	str	r3, [r6, #0]
 800d9b0:	4630      	mov	r0, r6
 800d9b2:	f000 f898 	bl	800dae6 <__malloc_unlock>
 800d9b6:	e7e4      	b.n	800d982 <_malloc_r+0x1e>
 800d9b8:	680b      	ldr	r3, [r1, #0]
 800d9ba:	1b5b      	subs	r3, r3, r5
 800d9bc:	d418      	bmi.n	800d9f0 <_malloc_r+0x8c>
 800d9be:	2b0b      	cmp	r3, #11
 800d9c0:	d90f      	bls.n	800d9e2 <_malloc_r+0x7e>
 800d9c2:	600b      	str	r3, [r1, #0]
 800d9c4:	50cd      	str	r5, [r1, r3]
 800d9c6:	18cc      	adds	r4, r1, r3
 800d9c8:	4630      	mov	r0, r6
 800d9ca:	f000 f88c 	bl	800dae6 <__malloc_unlock>
 800d9ce:	f104 000b 	add.w	r0, r4, #11
 800d9d2:	1d23      	adds	r3, r4, #4
 800d9d4:	f020 0007 	bic.w	r0, r0, #7
 800d9d8:	1ac3      	subs	r3, r0, r3
 800d9da:	d0d3      	beq.n	800d984 <_malloc_r+0x20>
 800d9dc:	425a      	negs	r2, r3
 800d9de:	50e2      	str	r2, [r4, r3]
 800d9e0:	e7d0      	b.n	800d984 <_malloc_r+0x20>
 800d9e2:	428c      	cmp	r4, r1
 800d9e4:	684b      	ldr	r3, [r1, #4]
 800d9e6:	bf16      	itet	ne
 800d9e8:	6063      	strne	r3, [r4, #4]
 800d9ea:	6013      	streq	r3, [r2, #0]
 800d9ec:	460c      	movne	r4, r1
 800d9ee:	e7eb      	b.n	800d9c8 <_malloc_r+0x64>
 800d9f0:	460c      	mov	r4, r1
 800d9f2:	6849      	ldr	r1, [r1, #4]
 800d9f4:	e7cc      	b.n	800d990 <_malloc_r+0x2c>
 800d9f6:	1cc4      	adds	r4, r0, #3
 800d9f8:	f024 0403 	bic.w	r4, r4, #3
 800d9fc:	42a0      	cmp	r0, r4
 800d9fe:	d005      	beq.n	800da0c <_malloc_r+0xa8>
 800da00:	1a21      	subs	r1, r4, r0
 800da02:	4630      	mov	r0, r6
 800da04:	f000 f808 	bl	800da18 <_sbrk_r>
 800da08:	3001      	adds	r0, #1
 800da0a:	d0cf      	beq.n	800d9ac <_malloc_r+0x48>
 800da0c:	6025      	str	r5, [r4, #0]
 800da0e:	e7db      	b.n	800d9c8 <_malloc_r+0x64>
 800da10:	24000278 	.word	0x24000278
 800da14:	2400027c 	.word	0x2400027c

0800da18 <_sbrk_r>:
 800da18:	b538      	push	{r3, r4, r5, lr}
 800da1a:	4c06      	ldr	r4, [pc, #24]	; (800da34 <_sbrk_r+0x1c>)
 800da1c:	2300      	movs	r3, #0
 800da1e:	4605      	mov	r5, r0
 800da20:	4608      	mov	r0, r1
 800da22:	6023      	str	r3, [r4, #0]
 800da24:	f7f4 f9dc 	bl	8001de0 <_sbrk>
 800da28:	1c43      	adds	r3, r0, #1
 800da2a:	d102      	bne.n	800da32 <_sbrk_r+0x1a>
 800da2c:	6823      	ldr	r3, [r4, #0]
 800da2e:	b103      	cbz	r3, 800da32 <_sbrk_r+0x1a>
 800da30:	602b      	str	r3, [r5, #0]
 800da32:	bd38      	pop	{r3, r4, r5, pc}
 800da34:	24001e50 	.word	0x24001e50

0800da38 <strcat>:
 800da38:	b510      	push	{r4, lr}
 800da3a:	4603      	mov	r3, r0
 800da3c:	781a      	ldrb	r2, [r3, #0]
 800da3e:	1c5c      	adds	r4, r3, #1
 800da40:	b93a      	cbnz	r2, 800da52 <strcat+0x1a>
 800da42:	3b01      	subs	r3, #1
 800da44:	f811 2b01 	ldrb.w	r2, [r1], #1
 800da48:	f803 2f01 	strb.w	r2, [r3, #1]!
 800da4c:	2a00      	cmp	r2, #0
 800da4e:	d1f9      	bne.n	800da44 <strcat+0xc>
 800da50:	bd10      	pop	{r4, pc}
 800da52:	4623      	mov	r3, r4
 800da54:	e7f2      	b.n	800da3c <strcat+0x4>

0800da56 <strcpy>:
 800da56:	4603      	mov	r3, r0
 800da58:	f811 2b01 	ldrb.w	r2, [r1], #1
 800da5c:	f803 2b01 	strb.w	r2, [r3], #1
 800da60:	2a00      	cmp	r2, #0
 800da62:	d1f9      	bne.n	800da58 <strcpy+0x2>
 800da64:	4770      	bx	lr
	...

0800da68 <__utoa>:
 800da68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da6a:	4b1d      	ldr	r3, [pc, #116]	; (800dae0 <__utoa+0x78>)
 800da6c:	b08b      	sub	sp, #44	; 0x2c
 800da6e:	4605      	mov	r5, r0
 800da70:	460c      	mov	r4, r1
 800da72:	466e      	mov	r6, sp
 800da74:	f103 0c20 	add.w	ip, r3, #32
 800da78:	6818      	ldr	r0, [r3, #0]
 800da7a:	6859      	ldr	r1, [r3, #4]
 800da7c:	4637      	mov	r7, r6
 800da7e:	c703      	stmia	r7!, {r0, r1}
 800da80:	3308      	adds	r3, #8
 800da82:	4563      	cmp	r3, ip
 800da84:	463e      	mov	r6, r7
 800da86:	d1f7      	bne.n	800da78 <__utoa+0x10>
 800da88:	6818      	ldr	r0, [r3, #0]
 800da8a:	791b      	ldrb	r3, [r3, #4]
 800da8c:	713b      	strb	r3, [r7, #4]
 800da8e:	1e93      	subs	r3, r2, #2
 800da90:	2b22      	cmp	r3, #34	; 0x22
 800da92:	6038      	str	r0, [r7, #0]
 800da94:	f04f 0300 	mov.w	r3, #0
 800da98:	d904      	bls.n	800daa4 <__utoa+0x3c>
 800da9a:	7023      	strb	r3, [r4, #0]
 800da9c:	461c      	mov	r4, r3
 800da9e:	4620      	mov	r0, r4
 800daa0:	b00b      	add	sp, #44	; 0x2c
 800daa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800daa4:	1e66      	subs	r6, r4, #1
 800daa6:	fbb5 f0f2 	udiv	r0, r5, r2
 800daaa:	af0a      	add	r7, sp, #40	; 0x28
 800daac:	fb02 5510 	mls	r5, r2, r0, r5
 800dab0:	443d      	add	r5, r7
 800dab2:	1c59      	adds	r1, r3, #1
 800dab4:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800dab8:	f806 5f01 	strb.w	r5, [r6, #1]!
 800dabc:	4605      	mov	r5, r0
 800dabe:	b968      	cbnz	r0, 800dadc <__utoa+0x74>
 800dac0:	5460      	strb	r0, [r4, r1]
 800dac2:	4423      	add	r3, r4
 800dac4:	4622      	mov	r2, r4
 800dac6:	1b19      	subs	r1, r3, r4
 800dac8:	1b10      	subs	r0, r2, r4
 800daca:	4281      	cmp	r1, r0
 800dacc:	dde7      	ble.n	800da9e <__utoa+0x36>
 800dace:	7811      	ldrb	r1, [r2, #0]
 800dad0:	7818      	ldrb	r0, [r3, #0]
 800dad2:	f802 0b01 	strb.w	r0, [r2], #1
 800dad6:	f803 1901 	strb.w	r1, [r3], #-1
 800dada:	e7f4      	b.n	800dac6 <__utoa+0x5e>
 800dadc:	460b      	mov	r3, r1
 800dade:	e7e2      	b.n	800daa6 <__utoa+0x3e>
 800dae0:	0800db9c 	.word	0x0800db9c

0800dae4 <__malloc_lock>:
 800dae4:	4770      	bx	lr

0800dae6 <__malloc_unlock>:
 800dae6:	4770      	bx	lr

0800dae8 <_init>:
 800dae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daea:	bf00      	nop
 800daec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800daee:	bc08      	pop	{r3}
 800daf0:	469e      	mov	lr, r3
 800daf2:	4770      	bx	lr

0800daf4 <_fini>:
 800daf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daf6:	bf00      	nop
 800daf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dafa:	bc08      	pop	{r3}
 800dafc:	469e      	mov	lr, r3
 800dafe:	4770      	bx	lr
