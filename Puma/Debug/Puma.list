
Puma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f624  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  0801f8c0  0801f8c0  0002f8c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801fc88  0801fc88  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  0801fc88  0801fc88  0002fc88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801fc90  0801fc90  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801fc90  0801fc90  0002fc90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801fc94  0801fc94  0002fc94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  24000000  0801fc98  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001db8  240001f8  0801fe8c  000301f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24001fb0  0801fe8c  00031fb0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f799  00000000  00000000  00030222  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005138  00000000  00000000  0005f9bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018b0  00000000  00000000  00064af8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001690  00000000  00000000  000663a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003b477  00000000  00000000  00067a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ad7f  00000000  00000000  000a2eaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00165434  00000000  00000000  000bdc2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00223062  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a8c  00000000  00000000  002230e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240001f8 	.word	0x240001f8
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0801f8a4 	.word	0x0801f8a4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240001fc 	.word	0x240001fc
 80002d4:	0801f8a4 	.word	0x0801f8a4

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b972 	b.w	80005e4 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9e08      	ldr	r6, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	4688      	mov	r8, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d14b      	bne.n	80003be <__udivmoddi4+0xa6>
 8000326:	428a      	cmp	r2, r1
 8000328:	4615      	mov	r5, r2
 800032a:	d967      	bls.n	80003fc <__udivmoddi4+0xe4>
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	b14a      	cbz	r2, 8000346 <__udivmoddi4+0x2e>
 8000332:	f1c2 0720 	rsb	r7, r2, #32
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	fa20 f707 	lsr.w	r7, r0, r7
 800033e:	4095      	lsls	r5, r2
 8000340:	ea47 0803 	orr.w	r8, r7, r3
 8000344:	4094      	lsls	r4, r2
 8000346:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000350:	fa1f fc85 	uxth.w	ip, r5
 8000354:	fb0e 8817 	mls	r8, lr, r7, r8
 8000358:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800035c:	fb07 f10c 	mul.w	r1, r7, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x60>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f107 30ff 	add.w	r0, r7, #4294967295
 800036a:	f080 811b 	bcs.w	80005a4 <__udivmoddi4+0x28c>
 800036e:	4299      	cmp	r1, r3
 8000370:	f240 8118 	bls.w	80005a4 <__udivmoddi4+0x28c>
 8000374:	3f02      	subs	r7, #2
 8000376:	442b      	add	r3, r5
 8000378:	1a5b      	subs	r3, r3, r1
 800037a:	b2a4      	uxth	r4, r4
 800037c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000380:	fb0e 3310 	mls	r3, lr, r0, r3
 8000384:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000388:	fb00 fc0c 	mul.w	ip, r0, ip
 800038c:	45a4      	cmp	ip, r4
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x8c>
 8000390:	192c      	adds	r4, r5, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	f080 8107 	bcs.w	80005a8 <__udivmoddi4+0x290>
 800039a:	45a4      	cmp	ip, r4
 800039c:	f240 8104 	bls.w	80005a8 <__udivmoddi4+0x290>
 80003a0:	3802      	subs	r0, #2
 80003a2:	442c      	add	r4, r5
 80003a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a8:	eba4 040c 	sub.w	r4, r4, ip
 80003ac:	2700      	movs	r7, #0
 80003ae:	b11e      	cbz	r6, 80003b8 <__udivmoddi4+0xa0>
 80003b0:	40d4      	lsrs	r4, r2
 80003b2:	2300      	movs	r3, #0
 80003b4:	e9c6 4300 	strd	r4, r3, [r6]
 80003b8:	4639      	mov	r1, r7
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d909      	bls.n	80003d6 <__udivmoddi4+0xbe>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	f000 80eb 	beq.w	800059e <__udivmoddi4+0x286>
 80003c8:	2700      	movs	r7, #0
 80003ca:	e9c6 0100 	strd	r0, r1, [r6]
 80003ce:	4638      	mov	r0, r7
 80003d0:	4639      	mov	r1, r7
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	fab3 f783 	clz	r7, r3
 80003da:	2f00      	cmp	r7, #0
 80003dc:	d147      	bne.n	800046e <__udivmoddi4+0x156>
 80003de:	428b      	cmp	r3, r1
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xd0>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 80fa 	bhi.w	80005dc <__udivmoddi4+0x2c4>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb61 0303 	sbc.w	r3, r1, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4698      	mov	r8, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d0e0      	beq.n	80003b8 <__udivmoddi4+0xa0>
 80003f6:	e9c6 4800 	strd	r4, r8, [r6]
 80003fa:	e7dd      	b.n	80003b8 <__udivmoddi4+0xa0>
 80003fc:	b902      	cbnz	r2, 8000400 <__udivmoddi4+0xe8>
 80003fe:	deff      	udf	#255	; 0xff
 8000400:	fab2 f282 	clz	r2, r2
 8000404:	2a00      	cmp	r2, #0
 8000406:	f040 808f 	bne.w	8000528 <__udivmoddi4+0x210>
 800040a:	1b49      	subs	r1, r1, r5
 800040c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000410:	fa1f f885 	uxth.w	r8, r5
 8000414:	2701      	movs	r7, #1
 8000416:	fbb1 fcfe 	udiv	ip, r1, lr
 800041a:	0c23      	lsrs	r3, r4, #16
 800041c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb08 f10c 	mul.w	r1, r8, ip
 8000428:	4299      	cmp	r1, r3
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x124>
 800042c:	18eb      	adds	r3, r5, r3
 800042e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x122>
 8000434:	4299      	cmp	r1, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2bc>
 800043a:	4684      	mov	ip, r0
 800043c:	1a59      	subs	r1, r3, r1
 800043e:	b2a3      	uxth	r3, r4
 8000440:	fbb1 f0fe 	udiv	r0, r1, lr
 8000444:	fb0e 1410 	mls	r4, lr, r0, r1
 8000448:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800044c:	fb08 f800 	mul.w	r8, r8, r0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x14c>
 8000454:	192c      	adds	r4, r5, r4
 8000456:	f100 33ff 	add.w	r3, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x14a>
 800045c:	45a0      	cmp	r8, r4
 800045e:	f200 80b6 	bhi.w	80005ce <__udivmoddi4+0x2b6>
 8000462:	4618      	mov	r0, r3
 8000464:	eba4 0408 	sub.w	r4, r4, r8
 8000468:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800046c:	e79f      	b.n	80003ae <__udivmoddi4+0x96>
 800046e:	f1c7 0c20 	rsb	ip, r7, #32
 8000472:	40bb      	lsls	r3, r7
 8000474:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000478:	ea4e 0e03 	orr.w	lr, lr, r3
 800047c:	fa01 f407 	lsl.w	r4, r1, r7
 8000480:	fa20 f50c 	lsr.w	r5, r0, ip
 8000484:	fa21 f30c 	lsr.w	r3, r1, ip
 8000488:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800048c:	4325      	orrs	r5, r4
 800048e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000492:	0c2c      	lsrs	r4, r5, #16
 8000494:	fb08 3319 	mls	r3, r8, r9, r3
 8000498:	fa1f fa8e 	uxth.w	sl, lr
 800049c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a0:	fb09 f40a 	mul.w	r4, r9, sl
 80004a4:	429c      	cmp	r4, r3
 80004a6:	fa02 f207 	lsl.w	r2, r2, r7
 80004aa:	fa00 f107 	lsl.w	r1, r0, r7
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b0>
 80004b0:	eb1e 0303 	adds.w	r3, lr, r3
 80004b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b8:	f080 8087 	bcs.w	80005ca <__udivmoddi4+0x2b2>
 80004bc:	429c      	cmp	r4, r3
 80004be:	f240 8084 	bls.w	80005ca <__udivmoddi4+0x2b2>
 80004c2:	f1a9 0902 	sub.w	r9, r9, #2
 80004c6:	4473      	add	r3, lr
 80004c8:	1b1b      	subs	r3, r3, r4
 80004ca:	b2ad      	uxth	r5, r5
 80004cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d0:	fb08 3310 	mls	r3, r8, r0, r3
 80004d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004dc:	45a2      	cmp	sl, r4
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1da>
 80004e0:	eb1e 0404 	adds.w	r4, lr, r4
 80004e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e8:	d26b      	bcs.n	80005c2 <__udivmoddi4+0x2aa>
 80004ea:	45a2      	cmp	sl, r4
 80004ec:	d969      	bls.n	80005c2 <__udivmoddi4+0x2aa>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4474      	add	r4, lr
 80004f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004f6:	fba0 8902 	umull	r8, r9, r0, r2
 80004fa:	eba4 040a 	sub.w	r4, r4, sl
 80004fe:	454c      	cmp	r4, r9
 8000500:	46c2      	mov	sl, r8
 8000502:	464b      	mov	r3, r9
 8000504:	d354      	bcc.n	80005b0 <__udivmoddi4+0x298>
 8000506:	d051      	beq.n	80005ac <__udivmoddi4+0x294>
 8000508:	2e00      	cmp	r6, #0
 800050a:	d069      	beq.n	80005e0 <__udivmoddi4+0x2c8>
 800050c:	ebb1 050a 	subs.w	r5, r1, sl
 8000510:	eb64 0403 	sbc.w	r4, r4, r3
 8000514:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000518:	40fd      	lsrs	r5, r7
 800051a:	40fc      	lsrs	r4, r7
 800051c:	ea4c 0505 	orr.w	r5, ip, r5
 8000520:	e9c6 5400 	strd	r5, r4, [r6]
 8000524:	2700      	movs	r7, #0
 8000526:	e747      	b.n	80003b8 <__udivmoddi4+0xa0>
 8000528:	f1c2 0320 	rsb	r3, r2, #32
 800052c:	fa20 f703 	lsr.w	r7, r0, r3
 8000530:	4095      	lsls	r5, r2
 8000532:	fa01 f002 	lsl.w	r0, r1, r2
 8000536:	fa21 f303 	lsr.w	r3, r1, r3
 800053a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800053e:	4338      	orrs	r0, r7
 8000540:	0c01      	lsrs	r1, r0, #16
 8000542:	fbb3 f7fe 	udiv	r7, r3, lr
 8000546:	fa1f f885 	uxth.w	r8, r5
 800054a:	fb0e 3317 	mls	r3, lr, r7, r3
 800054e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000552:	fb07 f308 	mul.w	r3, r7, r8
 8000556:	428b      	cmp	r3, r1
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x256>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f107 3cff 	add.w	ip, r7, #4294967295
 8000564:	d22f      	bcs.n	80005c6 <__udivmoddi4+0x2ae>
 8000566:	428b      	cmp	r3, r1
 8000568:	d92d      	bls.n	80005c6 <__udivmoddi4+0x2ae>
 800056a:	3f02      	subs	r7, #2
 800056c:	4429      	add	r1, r5
 800056e:	1acb      	subs	r3, r1, r3
 8000570:	b281      	uxth	r1, r0
 8000572:	fbb3 f0fe 	udiv	r0, r3, lr
 8000576:	fb0e 3310 	mls	r3, lr, r0, r3
 800057a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057e:	fb00 f308 	mul.w	r3, r0, r8
 8000582:	428b      	cmp	r3, r1
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x27e>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f100 3cff 	add.w	ip, r0, #4294967295
 800058c:	d217      	bcs.n	80005be <__udivmoddi4+0x2a6>
 800058e:	428b      	cmp	r3, r1
 8000590:	d915      	bls.n	80005be <__udivmoddi4+0x2a6>
 8000592:	3802      	subs	r0, #2
 8000594:	4429      	add	r1, r5
 8000596:	1ac9      	subs	r1, r1, r3
 8000598:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800059c:	e73b      	b.n	8000416 <__udivmoddi4+0xfe>
 800059e:	4637      	mov	r7, r6
 80005a0:	4630      	mov	r0, r6
 80005a2:	e709      	b.n	80003b8 <__udivmoddi4+0xa0>
 80005a4:	4607      	mov	r7, r0
 80005a6:	e6e7      	b.n	8000378 <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fb      	b.n	80003a4 <__udivmoddi4+0x8c>
 80005ac:	4541      	cmp	r1, r8
 80005ae:	d2ab      	bcs.n	8000508 <__udivmoddi4+0x1f0>
 80005b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005b4:	eb69 020e 	sbc.w	r2, r9, lr
 80005b8:	3801      	subs	r0, #1
 80005ba:	4613      	mov	r3, r2
 80005bc:	e7a4      	b.n	8000508 <__udivmoddi4+0x1f0>
 80005be:	4660      	mov	r0, ip
 80005c0:	e7e9      	b.n	8000596 <__udivmoddi4+0x27e>
 80005c2:	4618      	mov	r0, r3
 80005c4:	e795      	b.n	80004f2 <__udivmoddi4+0x1da>
 80005c6:	4667      	mov	r7, ip
 80005c8:	e7d1      	b.n	800056e <__udivmoddi4+0x256>
 80005ca:	4681      	mov	r9, r0
 80005cc:	e77c      	b.n	80004c8 <__udivmoddi4+0x1b0>
 80005ce:	3802      	subs	r0, #2
 80005d0:	442c      	add	r4, r5
 80005d2:	e747      	b.n	8000464 <__udivmoddi4+0x14c>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	442b      	add	r3, r5
 80005da:	e72f      	b.n	800043c <__udivmoddi4+0x124>
 80005dc:	4638      	mov	r0, r7
 80005de:	e708      	b.n	80003f2 <__udivmoddi4+0xda>
 80005e0:	4637      	mov	r7, r6
 80005e2:	e6e9      	b.n	80003b8 <__udivmoddi4+0xa0>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);
//handle GPIO interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	80fb      	strh	r3, [r7, #6]
		uint16_t  pin_num;
    }PINS;*/
	//encoder pins: 0,1,2,3,4,7 - PA0(PC10)y, PA1(PD5)y, PB2(PC7)y, PE3(PE4)y, PD4(PD3)y, PD7(PE2)y
	//homing pins: PE5, PF6, 8, 9, 10
	// HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
	switch (GPIO_Pin){
 80005f2:	88fb      	ldrh	r3, [r7, #6]
 80005f4:	2b20      	cmp	r3, #32
 80005f6:	f000 8271 	beq.w	8000adc <HAL_GPIO_EXTI_Callback+0x4f4>
 80005fa:	2b20      	cmp	r3, #32
 80005fc:	dc10      	bgt.n	8000620 <HAL_GPIO_EXTI_Callback+0x38>
 80005fe:	2b04      	cmp	r3, #4
 8000600:	f000 80e1 	beq.w	80007c6 <HAL_GPIO_EXTI_Callback+0x1de>
 8000604:	2b04      	cmp	r3, #4
 8000606:	dc04      	bgt.n	8000612 <HAL_GPIO_EXTI_Callback+0x2a>
 8000608:	2b01      	cmp	r3, #1
 800060a:	d020      	beq.n	800064e <HAL_GPIO_EXTI_Callback+0x66>
 800060c:	2b02      	cmp	r3, #2
 800060e:	d07c      	beq.n	800070a <HAL_GPIO_EXTI_Callback+0x122>
	case GPIO_PIN_10:
		desired_pos[4] = (double)motor_steps[4] *2.0*3.1415926/REV_COUNT_2*2.0;
		homing_state[4] = true;
		break;
	default:
		break;
 8000610:	e2fc      	b.n	8000c0c <HAL_GPIO_EXTI_Callback+0x624>
	switch (GPIO_Pin){
 8000612:	2b08      	cmp	r3, #8
 8000614:	f000 8144 	beq.w	80008a0 <HAL_GPIO_EXTI_Callback+0x2b8>
 8000618:	2b10      	cmp	r3, #16
 800061a:	f000 819f 	beq.w	800095c <HAL_GPIO_EXTI_Callback+0x374>
		break;
 800061e:	e2f5      	b.n	8000c0c <HAL_GPIO_EXTI_Callback+0x624>
	switch (GPIO_Pin){
 8000620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000624:	f000 82a7 	beq.w	8000b76 <HAL_GPIO_EXTI_Callback+0x58e>
 8000628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800062c:	dc06      	bgt.n	800063c <HAL_GPIO_EXTI_Callback+0x54>
 800062e:	2b40      	cmp	r3, #64	; 0x40
 8000630:	f000 8288 	beq.w	8000b44 <HAL_GPIO_EXTI_Callback+0x55c>
 8000634:	2b80      	cmp	r3, #128	; 0x80
 8000636:	f000 81f1 	beq.w	8000a1c <HAL_GPIO_EXTI_Callback+0x434>
		break;
 800063a:	e2e7      	b.n	8000c0c <HAL_GPIO_EXTI_Callback+0x624>
	switch (GPIO_Pin){
 800063c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000640:	f000 82b2 	beq.w	8000ba8 <HAL_GPIO_EXTI_Callback+0x5c0>
 8000644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000648:	f000 82c7 	beq.w	8000bda <HAL_GPIO_EXTI_Callback+0x5f2>
		break;
 800064c:	e2de      	b.n	8000c0c <HAL_GPIO_EXTI_Callback+0x624>
		 Lstate[0] = HAL_GPIO_ReadPin(encoders[0].port, encoders[0].pin_num);
 800064e:	4b8d      	ldr	r3, [pc, #564]	; (8000884 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	4b8c      	ldr	r3, [pc, #560]	; (8000884 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000654:	889b      	ldrh	r3, [r3, #4]
 8000656:	4619      	mov	r1, r3
 8000658:	4610      	mov	r0, r2
 800065a:	f013 f96d 	bl	8013938 <HAL_GPIO_ReadPin>
 800065e:	4603      	mov	r3, r0
 8000660:	461a      	mov	r2, r3
 8000662:	4b89      	ldr	r3, [pc, #548]	; (8000888 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8000664:	601a      	str	r2, [r3, #0]
		  if((val_encoderA[0] == LOW) && Lstate[0]==HIGH)
 8000666:	4b89      	ldr	r3, [pc, #548]	; (800088c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d12b      	bne.n	80006c6 <HAL_GPIO_EXTI_Callback+0xde>
 800066e:	4b86      	ldr	r3, [pc, #536]	; (8000888 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d127      	bne.n	80006c6 <HAL_GPIO_EXTI_Callback+0xde>
			val_encoderB[0] = HAL_GPIO_ReadPin(encoders[1].port, encoders[1].pin_num);
 8000676:	4b83      	ldr	r3, [pc, #524]	; (8000884 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000678:	689a      	ldr	r2, [r3, #8]
 800067a:	4b82      	ldr	r3, [pc, #520]	; (8000884 <HAL_GPIO_EXTI_Callback+0x29c>)
 800067c:	899b      	ldrh	r3, [r3, #12]
 800067e:	4619      	mov	r1, r3
 8000680:	4610      	mov	r0, r2
 8000682:	f013 f959 	bl	8013938 <HAL_GPIO_ReadPin>
 8000686:	4603      	mov	r3, r0
 8000688:	461a      	mov	r2, r3
 800068a:	4b81      	ldr	r3, [pc, #516]	; (8000890 <HAL_GPIO_EXTI_Callback+0x2a8>)
 800068c:	601a      	str	r2, [r3, #0]
		    if(val_encoderB[0] == LOW && direction[0])
 800068e:	4b80      	ldr	r3, [pc, #512]	; (8000890 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d108      	bne.n	80006a8 <HAL_GPIO_EXTI_Callback+0xc0>
 8000696:	4b7f      	ldr	r3, [pc, #508]	; (8000894 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	b2db      	uxtb	r3, r3
 800069c:	2b00      	cmp	r3, #0
 800069e:	d003      	beq.n	80006a8 <HAL_GPIO_EXTI_Callback+0xc0>
		      direction[0] = false; //Reverse
 80006a0:	4b7c      	ldr	r3, [pc, #496]	; (8000894 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
 80006a6:	e00e      	b.n	80006c6 <HAL_GPIO_EXTI_Callback+0xde>
		    else if(val_encoderB[0] == HIGH && !direction[0])
 80006a8:	4b79      	ldr	r3, [pc, #484]	; (8000890 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d10a      	bne.n	80006c6 <HAL_GPIO_EXTI_Callback+0xde>
 80006b0:	4b78      	ldr	r3, [pc, #480]	; (8000894 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	f083 0301 	eor.w	r3, r3, #1
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d002      	beq.n	80006c6 <HAL_GPIO_EXTI_Callback+0xde>
		    	direction[0] = true;  //Forward
 80006c0:	4b74      	ldr	r3, [pc, #464]	; (8000894 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	701a      	strb	r2, [r3, #0]
		  val_encoderA[0] = Lstate[0];
 80006c6:	4b70      	ldr	r3, [pc, #448]	; (8000888 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a70      	ldr	r2, [pc, #448]	; (800088c <HAL_GPIO_EXTI_Callback+0x2a4>)
 80006cc:	6013      	str	r3, [r2, #0]
		  if(!direction[0]){
 80006ce:	4b71      	ldr	r3, [pc, #452]	; (8000894 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	f083 0301 	eor.w	r3, r3, #1
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d00a      	beq.n	80006f4 <HAL_GPIO_EXTI_Callback+0x10c>
			  motor_steps[0]++;
 80006de:	4b6e      	ldr	r3, [pc, #440]	; (8000898 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	3301      	adds	r3, #1
 80006e4:	4a6c      	ldr	r2, [pc, #432]	; (8000898 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80006e6:	6013      	str	r3, [r2, #0]
			  delta_pos[0]++;
 80006e8:	4b6c      	ldr	r3, [pc, #432]	; (800089c <HAL_GPIO_EXTI_Callback+0x2b4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	3301      	adds	r3, #1
 80006ee:	4a6b      	ldr	r2, [pc, #428]	; (800089c <HAL_GPIO_EXTI_Callback+0x2b4>)
 80006f0:	6013      	str	r3, [r2, #0]
		break;
 80006f2:	e28b      	b.n	8000c0c <HAL_GPIO_EXTI_Callback+0x624>
			  motor_steps[0]--;
 80006f4:	4b68      	ldr	r3, [pc, #416]	; (8000898 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	3b01      	subs	r3, #1
 80006fa:	4a67      	ldr	r2, [pc, #412]	; (8000898 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80006fc:	6013      	str	r3, [r2, #0]
			  delta_pos[0]--;
 80006fe:	4b67      	ldr	r3, [pc, #412]	; (800089c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	3b01      	subs	r3, #1
 8000704:	4a65      	ldr	r2, [pc, #404]	; (800089c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000706:	6013      	str	r3, [r2, #0]
		break;
 8000708:	e280      	b.n	8000c0c <HAL_GPIO_EXTI_Callback+0x624>
		 Lstate[1] = HAL_GPIO_ReadPin(encoders[2].port, encoders[2].pin_num);
 800070a:	4b5e      	ldr	r3, [pc, #376]	; (8000884 <HAL_GPIO_EXTI_Callback+0x29c>)
 800070c:	691a      	ldr	r2, [r3, #16]
 800070e:	4b5d      	ldr	r3, [pc, #372]	; (8000884 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000710:	8a9b      	ldrh	r3, [r3, #20]
 8000712:	4619      	mov	r1, r3
 8000714:	4610      	mov	r0, r2
 8000716:	f013 f90f 	bl	8013938 <HAL_GPIO_ReadPin>
 800071a:	4603      	mov	r3, r0
 800071c:	461a      	mov	r2, r3
 800071e:	4b5a      	ldr	r3, [pc, #360]	; (8000888 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8000720:	605a      	str	r2, [r3, #4]
		  if((val_encoderA[1] == LOW) && Lstate[1]==HIGH)
 8000722:	4b5a      	ldr	r3, [pc, #360]	; (800088c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000724:	685b      	ldr	r3, [r3, #4]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d12b      	bne.n	8000782 <HAL_GPIO_EXTI_Callback+0x19a>
 800072a:	4b57      	ldr	r3, [pc, #348]	; (8000888 <HAL_GPIO_EXTI_Callback+0x2a0>)
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d127      	bne.n	8000782 <HAL_GPIO_EXTI_Callback+0x19a>
			val_encoderB[1] = HAL_GPIO_ReadPin(encoders[3].port, encoders[3].pin_num);
 8000732:	4b54      	ldr	r3, [pc, #336]	; (8000884 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000734:	699a      	ldr	r2, [r3, #24]
 8000736:	4b53      	ldr	r3, [pc, #332]	; (8000884 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000738:	8b9b      	ldrh	r3, [r3, #28]
 800073a:	4619      	mov	r1, r3
 800073c:	4610      	mov	r0, r2
 800073e:	f013 f8fb 	bl	8013938 <HAL_GPIO_ReadPin>
 8000742:	4603      	mov	r3, r0
 8000744:	461a      	mov	r2, r3
 8000746:	4b52      	ldr	r3, [pc, #328]	; (8000890 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000748:	605a      	str	r2, [r3, #4]
		    if(val_encoderB[1] == LOW && direction[1])
 800074a:	4b51      	ldr	r3, [pc, #324]	; (8000890 <HAL_GPIO_EXTI_Callback+0x2a8>)
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d108      	bne.n	8000764 <HAL_GPIO_EXTI_Callback+0x17c>
 8000752:	4b50      	ldr	r3, [pc, #320]	; (8000894 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000754:	785b      	ldrb	r3, [r3, #1]
 8000756:	b2db      	uxtb	r3, r3
 8000758:	2b00      	cmp	r3, #0
 800075a:	d003      	beq.n	8000764 <HAL_GPIO_EXTI_Callback+0x17c>
		      direction[1] = false; //Reverse
 800075c:	4b4d      	ldr	r3, [pc, #308]	; (8000894 <HAL_GPIO_EXTI_Callback+0x2ac>)
 800075e:	2200      	movs	r2, #0
 8000760:	705a      	strb	r2, [r3, #1]
 8000762:	e00e      	b.n	8000782 <HAL_GPIO_EXTI_Callback+0x19a>
		    else if(val_encoderB[1] == HIGH && !direction[1])
 8000764:	4b4a      	ldr	r3, [pc, #296]	; (8000890 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	2b01      	cmp	r3, #1
 800076a:	d10a      	bne.n	8000782 <HAL_GPIO_EXTI_Callback+0x19a>
 800076c:	4b49      	ldr	r3, [pc, #292]	; (8000894 <HAL_GPIO_EXTI_Callback+0x2ac>)
 800076e:	785b      	ldrb	r3, [r3, #1]
 8000770:	b2db      	uxtb	r3, r3
 8000772:	f083 0301 	eor.w	r3, r3, #1
 8000776:	b2db      	uxtb	r3, r3
 8000778:	2b00      	cmp	r3, #0
 800077a:	d002      	beq.n	8000782 <HAL_GPIO_EXTI_Callback+0x19a>
		    	direction[1] = true;  //Forward
 800077c:	4b45      	ldr	r3, [pc, #276]	; (8000894 <HAL_GPIO_EXTI_Callback+0x2ac>)
 800077e:	2201      	movs	r2, #1
 8000780:	705a      	strb	r2, [r3, #1]
		  val_encoderA[1] = Lstate[1];
 8000782:	4b41      	ldr	r3, [pc, #260]	; (8000888 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	4a41      	ldr	r2, [pc, #260]	; (800088c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000788:	6053      	str	r3, [r2, #4]
		  if(!direction[1]){
 800078a:	4b42      	ldr	r3, [pc, #264]	; (8000894 <HAL_GPIO_EXTI_Callback+0x2ac>)
 800078c:	785b      	ldrb	r3, [r3, #1]
 800078e:	b2db      	uxtb	r3, r3
 8000790:	f083 0301 	eor.w	r3, r3, #1
 8000794:	b2db      	uxtb	r3, r3
 8000796:	2b00      	cmp	r3, #0
 8000798:	d00a      	beq.n	80007b0 <HAL_GPIO_EXTI_Callback+0x1c8>
			  motor_steps[1]++;
 800079a:	4b3f      	ldr	r3, [pc, #252]	; (8000898 <HAL_GPIO_EXTI_Callback+0x2b0>)
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	3301      	adds	r3, #1
 80007a0:	4a3d      	ldr	r2, [pc, #244]	; (8000898 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80007a2:	6053      	str	r3, [r2, #4]
			  delta_pos[1]++;
 80007a4:	4b3d      	ldr	r3, [pc, #244]	; (800089c <HAL_GPIO_EXTI_Callback+0x2b4>)
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	3301      	adds	r3, #1
 80007aa:	4a3c      	ldr	r2, [pc, #240]	; (800089c <HAL_GPIO_EXTI_Callback+0x2b4>)
 80007ac:	6053      	str	r3, [r2, #4]
		break;
 80007ae:	e22d      	b.n	8000c0c <HAL_GPIO_EXTI_Callback+0x624>
			  motor_steps[1]--;
 80007b0:	4b39      	ldr	r3, [pc, #228]	; (8000898 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	3b01      	subs	r3, #1
 80007b6:	4a38      	ldr	r2, [pc, #224]	; (8000898 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80007b8:	6053      	str	r3, [r2, #4]
			  delta_pos[1]--;
 80007ba:	4b38      	ldr	r3, [pc, #224]	; (800089c <HAL_GPIO_EXTI_Callback+0x2b4>)
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	3b01      	subs	r3, #1
 80007c0:	4a36      	ldr	r2, [pc, #216]	; (800089c <HAL_GPIO_EXTI_Callback+0x2b4>)
 80007c2:	6053      	str	r3, [r2, #4]
		break;
 80007c4:	e222      	b.n	8000c0c <HAL_GPIO_EXTI_Callback+0x624>
		 Lstate[2] = HAL_GPIO_ReadPin(encoders[4].port, encoders[4].pin_num);
 80007c6:	4b2f      	ldr	r3, [pc, #188]	; (8000884 <HAL_GPIO_EXTI_Callback+0x29c>)
 80007c8:	6a1a      	ldr	r2, [r3, #32]
 80007ca:	4b2e      	ldr	r3, [pc, #184]	; (8000884 <HAL_GPIO_EXTI_Callback+0x29c>)
 80007cc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80007ce:	4619      	mov	r1, r3
 80007d0:	4610      	mov	r0, r2
 80007d2:	f013 f8b1 	bl	8013938 <HAL_GPIO_ReadPin>
 80007d6:	4603      	mov	r3, r0
 80007d8:	461a      	mov	r2, r3
 80007da:	4b2b      	ldr	r3, [pc, #172]	; (8000888 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80007dc:	609a      	str	r2, [r3, #8]
		  if((val_encoderA[2] == LOW) && Lstate[2]==HIGH)
 80007de:	4b2b      	ldr	r3, [pc, #172]	; (800088c <HAL_GPIO_EXTI_Callback+0x2a4>)
 80007e0:	689b      	ldr	r3, [r3, #8]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d12b      	bne.n	800083e <HAL_GPIO_EXTI_Callback+0x256>
 80007e6:	4b28      	ldr	r3, [pc, #160]	; (8000888 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80007e8:	689b      	ldr	r3, [r3, #8]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d127      	bne.n	800083e <HAL_GPIO_EXTI_Callback+0x256>
			val_encoderB[2] = HAL_GPIO_ReadPin(encoders[5].port, encoders[5].pin_num);
 80007ee:	4b25      	ldr	r3, [pc, #148]	; (8000884 <HAL_GPIO_EXTI_Callback+0x29c>)
 80007f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80007f2:	4b24      	ldr	r3, [pc, #144]	; (8000884 <HAL_GPIO_EXTI_Callback+0x29c>)
 80007f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80007f6:	4619      	mov	r1, r3
 80007f8:	4610      	mov	r0, r2
 80007fa:	f013 f89d 	bl	8013938 <HAL_GPIO_ReadPin>
 80007fe:	4603      	mov	r3, r0
 8000800:	461a      	mov	r2, r3
 8000802:	4b23      	ldr	r3, [pc, #140]	; (8000890 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000804:	609a      	str	r2, [r3, #8]
		    if(val_encoderB[2] == LOW && direction[2])
 8000806:	4b22      	ldr	r3, [pc, #136]	; (8000890 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000808:	689b      	ldr	r3, [r3, #8]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d108      	bne.n	8000820 <HAL_GPIO_EXTI_Callback+0x238>
 800080e:	4b21      	ldr	r3, [pc, #132]	; (8000894 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000810:	789b      	ldrb	r3, [r3, #2]
 8000812:	b2db      	uxtb	r3, r3
 8000814:	2b00      	cmp	r3, #0
 8000816:	d003      	beq.n	8000820 <HAL_GPIO_EXTI_Callback+0x238>
		      direction[2] = false; //Reverse
 8000818:	4b1e      	ldr	r3, [pc, #120]	; (8000894 <HAL_GPIO_EXTI_Callback+0x2ac>)
 800081a:	2200      	movs	r2, #0
 800081c:	709a      	strb	r2, [r3, #2]
 800081e:	e00e      	b.n	800083e <HAL_GPIO_EXTI_Callback+0x256>
		    else if(val_encoderB[2] == HIGH && !direction[2])
 8000820:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000822:	689b      	ldr	r3, [r3, #8]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d10a      	bne.n	800083e <HAL_GPIO_EXTI_Callback+0x256>
 8000828:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <HAL_GPIO_EXTI_Callback+0x2ac>)
 800082a:	789b      	ldrb	r3, [r3, #2]
 800082c:	b2db      	uxtb	r3, r3
 800082e:	f083 0301 	eor.w	r3, r3, #1
 8000832:	b2db      	uxtb	r3, r3
 8000834:	2b00      	cmp	r3, #0
 8000836:	d002      	beq.n	800083e <HAL_GPIO_EXTI_Callback+0x256>
		    	direction[2] = true;  //Forward
 8000838:	4b16      	ldr	r3, [pc, #88]	; (8000894 <HAL_GPIO_EXTI_Callback+0x2ac>)
 800083a:	2201      	movs	r2, #1
 800083c:	709a      	strb	r2, [r3, #2]
		  val_encoderA[2] = Lstate[2];
 800083e:	4b12      	ldr	r3, [pc, #72]	; (8000888 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8000840:	689b      	ldr	r3, [r3, #8]
 8000842:	4a12      	ldr	r2, [pc, #72]	; (800088c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000844:	6093      	str	r3, [r2, #8]
		  if(!direction[2]){
 8000846:	4b13      	ldr	r3, [pc, #76]	; (8000894 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000848:	789b      	ldrb	r3, [r3, #2]
 800084a:	b2db      	uxtb	r3, r3
 800084c:	f083 0301 	eor.w	r3, r3, #1
 8000850:	b2db      	uxtb	r3, r3
 8000852:	2b00      	cmp	r3, #0
 8000854:	d00a      	beq.n	800086c <HAL_GPIO_EXTI_Callback+0x284>
			  motor_steps[2]++;
 8000856:	4b10      	ldr	r3, [pc, #64]	; (8000898 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	3301      	adds	r3, #1
 800085c:	4a0e      	ldr	r2, [pc, #56]	; (8000898 <HAL_GPIO_EXTI_Callback+0x2b0>)
 800085e:	6093      	str	r3, [r2, #8]
			  delta_pos[2]++;
 8000860:	4b0e      	ldr	r3, [pc, #56]	; (800089c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000862:	689b      	ldr	r3, [r3, #8]
 8000864:	3301      	adds	r3, #1
 8000866:	4a0d      	ldr	r2, [pc, #52]	; (800089c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000868:	6093      	str	r3, [r2, #8]
		break;
 800086a:	e1cf      	b.n	8000c0c <HAL_GPIO_EXTI_Callback+0x624>
			  motor_steps[2]--;
 800086c:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <HAL_GPIO_EXTI_Callback+0x2b0>)
 800086e:	689b      	ldr	r3, [r3, #8]
 8000870:	3b01      	subs	r3, #1
 8000872:	4a09      	ldr	r2, [pc, #36]	; (8000898 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000874:	6093      	str	r3, [r2, #8]
			  delta_pos[2]--;
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000878:	689b      	ldr	r3, [r3, #8]
 800087a:	3b01      	subs	r3, #1
 800087c:	4a07      	ldr	r2, [pc, #28]	; (800089c <HAL_GPIO_EXTI_Callback+0x2b4>)
 800087e:	6093      	str	r3, [r2, #8]
		break;
 8000880:	e1c4      	b.n	8000c0c <HAL_GPIO_EXTI_Callback+0x624>
 8000882:	bf00      	nop
 8000884:	2400040c 	.word	0x2400040c
 8000888:	240003f4 	.word	0x240003f4
 800088c:	240003dc 	.word	0x240003dc
 8000890:	2400051c 	.word	0x2400051c
 8000894:	24000000 	.word	0x24000000
 8000898:	24000214 	.word	0x24000214
 800089c:	24000260 	.word	0x24000260
		 Lstate[3] = HAL_GPIO_ReadPin(encoders[6].port, encoders[6].pin_num);
 80008a0:	4b9f      	ldr	r3, [pc, #636]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x538>)
 80008a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008a4:	4b9e      	ldr	r3, [pc, #632]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x538>)
 80008a6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80008a8:	4619      	mov	r1, r3
 80008aa:	4610      	mov	r0, r2
 80008ac:	f013 f844 	bl	8013938 <HAL_GPIO_ReadPin>
 80008b0:	4603      	mov	r3, r0
 80008b2:	461a      	mov	r2, r3
 80008b4:	4b9b      	ldr	r3, [pc, #620]	; (8000b24 <HAL_GPIO_EXTI_Callback+0x53c>)
 80008b6:	60da      	str	r2, [r3, #12]
		  if((val_encoderA[3] == LOW) && Lstate[3]==HIGH)
 80008b8:	4b9b      	ldr	r3, [pc, #620]	; (8000b28 <HAL_GPIO_EXTI_Callback+0x540>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d12b      	bne.n	8000918 <HAL_GPIO_EXTI_Callback+0x330>
 80008c0:	4b98      	ldr	r3, [pc, #608]	; (8000b24 <HAL_GPIO_EXTI_Callback+0x53c>)
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d127      	bne.n	8000918 <HAL_GPIO_EXTI_Callback+0x330>
			val_encoderB[3] = HAL_GPIO_ReadPin(encoders[7].port, encoders[7].pin_num);
 80008c8:	4b95      	ldr	r3, [pc, #596]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x538>)
 80008ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008cc:	4b94      	ldr	r3, [pc, #592]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x538>)
 80008ce:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80008d0:	4619      	mov	r1, r3
 80008d2:	4610      	mov	r0, r2
 80008d4:	f013 f830 	bl	8013938 <HAL_GPIO_ReadPin>
 80008d8:	4603      	mov	r3, r0
 80008da:	461a      	mov	r2, r3
 80008dc:	4b93      	ldr	r3, [pc, #588]	; (8000b2c <HAL_GPIO_EXTI_Callback+0x544>)
 80008de:	60da      	str	r2, [r3, #12]
		    if(val_encoderB[3] == LOW && direction[3])
 80008e0:	4b92      	ldr	r3, [pc, #584]	; (8000b2c <HAL_GPIO_EXTI_Callback+0x544>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d108      	bne.n	80008fa <HAL_GPIO_EXTI_Callback+0x312>
 80008e8:	4b91      	ldr	r3, [pc, #580]	; (8000b30 <HAL_GPIO_EXTI_Callback+0x548>)
 80008ea:	78db      	ldrb	r3, [r3, #3]
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d003      	beq.n	80008fa <HAL_GPIO_EXTI_Callback+0x312>
		      direction[3] = false; //Reverse
 80008f2:	4b8f      	ldr	r3, [pc, #572]	; (8000b30 <HAL_GPIO_EXTI_Callback+0x548>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	70da      	strb	r2, [r3, #3]
 80008f8:	e00e      	b.n	8000918 <HAL_GPIO_EXTI_Callback+0x330>
		    else if(val_encoderB[3] == HIGH && !direction[3])
 80008fa:	4b8c      	ldr	r3, [pc, #560]	; (8000b2c <HAL_GPIO_EXTI_Callback+0x544>)
 80008fc:	68db      	ldr	r3, [r3, #12]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d10a      	bne.n	8000918 <HAL_GPIO_EXTI_Callback+0x330>
 8000902:	4b8b      	ldr	r3, [pc, #556]	; (8000b30 <HAL_GPIO_EXTI_Callback+0x548>)
 8000904:	78db      	ldrb	r3, [r3, #3]
 8000906:	b2db      	uxtb	r3, r3
 8000908:	f083 0301 	eor.w	r3, r3, #1
 800090c:	b2db      	uxtb	r3, r3
 800090e:	2b00      	cmp	r3, #0
 8000910:	d002      	beq.n	8000918 <HAL_GPIO_EXTI_Callback+0x330>
		    	direction[3] = true;  //Forward
 8000912:	4b87      	ldr	r3, [pc, #540]	; (8000b30 <HAL_GPIO_EXTI_Callback+0x548>)
 8000914:	2201      	movs	r2, #1
 8000916:	70da      	strb	r2, [r3, #3]
		  val_encoderA[3] = Lstate[3];
 8000918:	4b82      	ldr	r3, [pc, #520]	; (8000b24 <HAL_GPIO_EXTI_Callback+0x53c>)
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	4a82      	ldr	r2, [pc, #520]	; (8000b28 <HAL_GPIO_EXTI_Callback+0x540>)
 800091e:	60d3      	str	r3, [r2, #12]
		  if(!direction[3]){
 8000920:	4b83      	ldr	r3, [pc, #524]	; (8000b30 <HAL_GPIO_EXTI_Callback+0x548>)
 8000922:	78db      	ldrb	r3, [r3, #3]
 8000924:	b2db      	uxtb	r3, r3
 8000926:	f083 0301 	eor.w	r3, r3, #1
 800092a:	b2db      	uxtb	r3, r3
 800092c:	2b00      	cmp	r3, #0
 800092e:	d00a      	beq.n	8000946 <HAL_GPIO_EXTI_Callback+0x35e>
			  motor_steps[3]++;
 8000930:	4b80      	ldr	r3, [pc, #512]	; (8000b34 <HAL_GPIO_EXTI_Callback+0x54c>)
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	3301      	adds	r3, #1
 8000936:	4a7f      	ldr	r2, [pc, #508]	; (8000b34 <HAL_GPIO_EXTI_Callback+0x54c>)
 8000938:	60d3      	str	r3, [r2, #12]
			  delta_pos[3]++;
 800093a:	4b7f      	ldr	r3, [pc, #508]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x550>)
 800093c:	68db      	ldr	r3, [r3, #12]
 800093e:	3301      	adds	r3, #1
 8000940:	4a7d      	ldr	r2, [pc, #500]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x550>)
 8000942:	60d3      	str	r3, [r2, #12]
		break;
 8000944:	e162      	b.n	8000c0c <HAL_GPIO_EXTI_Callback+0x624>
			  motor_steps[3]--;
 8000946:	4b7b      	ldr	r3, [pc, #492]	; (8000b34 <HAL_GPIO_EXTI_Callback+0x54c>)
 8000948:	68db      	ldr	r3, [r3, #12]
 800094a:	3b01      	subs	r3, #1
 800094c:	4a79      	ldr	r2, [pc, #484]	; (8000b34 <HAL_GPIO_EXTI_Callback+0x54c>)
 800094e:	60d3      	str	r3, [r2, #12]
			  delta_pos[3]--;
 8000950:	4b79      	ldr	r3, [pc, #484]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x550>)
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	3b01      	subs	r3, #1
 8000956:	4a78      	ldr	r2, [pc, #480]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x550>)
 8000958:	60d3      	str	r3, [r2, #12]
		break;
 800095a:	e157      	b.n	8000c0c <HAL_GPIO_EXTI_Callback+0x624>
		 Lstate[4] = HAL_GPIO_ReadPin(encoders[8].port, encoders[9].pin_num);
 800095c:	4b70      	ldr	r3, [pc, #448]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x538>)
 800095e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000960:	4b6f      	ldr	r3, [pc, #444]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x538>)
 8000962:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8000966:	4619      	mov	r1, r3
 8000968:	4610      	mov	r0, r2
 800096a:	f012 ffe5 	bl	8013938 <HAL_GPIO_ReadPin>
 800096e:	4603      	mov	r3, r0
 8000970:	461a      	mov	r2, r3
 8000972:	4b6c      	ldr	r3, [pc, #432]	; (8000b24 <HAL_GPIO_EXTI_Callback+0x53c>)
 8000974:	611a      	str	r2, [r3, #16]
		  if((val_encoderA[4] == LOW) && Lstate[4]==HIGH)
 8000976:	4b6c      	ldr	r3, [pc, #432]	; (8000b28 <HAL_GPIO_EXTI_Callback+0x540>)
 8000978:	691b      	ldr	r3, [r3, #16]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d12c      	bne.n	80009d8 <HAL_GPIO_EXTI_Callback+0x3f0>
 800097e:	4b69      	ldr	r3, [pc, #420]	; (8000b24 <HAL_GPIO_EXTI_Callback+0x53c>)
 8000980:	691b      	ldr	r3, [r3, #16]
 8000982:	2b01      	cmp	r3, #1
 8000984:	d128      	bne.n	80009d8 <HAL_GPIO_EXTI_Callback+0x3f0>
			val_encoderB[4] = HAL_GPIO_ReadPin(encoders[9].port, encoders[9].pin_num);
 8000986:	4b66      	ldr	r3, [pc, #408]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x538>)
 8000988:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800098a:	4b65      	ldr	r3, [pc, #404]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x538>)
 800098c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8000990:	4619      	mov	r1, r3
 8000992:	4610      	mov	r0, r2
 8000994:	f012 ffd0 	bl	8013938 <HAL_GPIO_ReadPin>
 8000998:	4603      	mov	r3, r0
 800099a:	461a      	mov	r2, r3
 800099c:	4b63      	ldr	r3, [pc, #396]	; (8000b2c <HAL_GPIO_EXTI_Callback+0x544>)
 800099e:	611a      	str	r2, [r3, #16]
		    if(val_encoderB[4] == LOW && direction[4])
 80009a0:	4b62      	ldr	r3, [pc, #392]	; (8000b2c <HAL_GPIO_EXTI_Callback+0x544>)
 80009a2:	691b      	ldr	r3, [r3, #16]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d108      	bne.n	80009ba <HAL_GPIO_EXTI_Callback+0x3d2>
 80009a8:	4b61      	ldr	r3, [pc, #388]	; (8000b30 <HAL_GPIO_EXTI_Callback+0x548>)
 80009aa:	791b      	ldrb	r3, [r3, #4]
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d003      	beq.n	80009ba <HAL_GPIO_EXTI_Callback+0x3d2>
		      direction[4] = false; //Reverse
 80009b2:	4b5f      	ldr	r3, [pc, #380]	; (8000b30 <HAL_GPIO_EXTI_Callback+0x548>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	711a      	strb	r2, [r3, #4]
 80009b8:	e00e      	b.n	80009d8 <HAL_GPIO_EXTI_Callback+0x3f0>
		    else if(val_encoderB[4] == HIGH && !direction[4])
 80009ba:	4b5c      	ldr	r3, [pc, #368]	; (8000b2c <HAL_GPIO_EXTI_Callback+0x544>)
 80009bc:	691b      	ldr	r3, [r3, #16]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d10a      	bne.n	80009d8 <HAL_GPIO_EXTI_Callback+0x3f0>
 80009c2:	4b5b      	ldr	r3, [pc, #364]	; (8000b30 <HAL_GPIO_EXTI_Callback+0x548>)
 80009c4:	791b      	ldrb	r3, [r3, #4]
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	f083 0301 	eor.w	r3, r3, #1
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d002      	beq.n	80009d8 <HAL_GPIO_EXTI_Callback+0x3f0>
		    	direction[4] = true;  //Forward
 80009d2:	4b57      	ldr	r3, [pc, #348]	; (8000b30 <HAL_GPIO_EXTI_Callback+0x548>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	711a      	strb	r2, [r3, #4]
		  val_encoderA[4] = Lstate[4];
 80009d8:	4b52      	ldr	r3, [pc, #328]	; (8000b24 <HAL_GPIO_EXTI_Callback+0x53c>)
 80009da:	691b      	ldr	r3, [r3, #16]
 80009dc:	4a52      	ldr	r2, [pc, #328]	; (8000b28 <HAL_GPIO_EXTI_Callback+0x540>)
 80009de:	6113      	str	r3, [r2, #16]
		  if(!direction[4]){
 80009e0:	4b53      	ldr	r3, [pc, #332]	; (8000b30 <HAL_GPIO_EXTI_Callback+0x548>)
 80009e2:	791b      	ldrb	r3, [r3, #4]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	f083 0301 	eor.w	r3, r3, #1
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d00a      	beq.n	8000a06 <HAL_GPIO_EXTI_Callback+0x41e>
			  motor_steps[4]++;
 80009f0:	4b50      	ldr	r3, [pc, #320]	; (8000b34 <HAL_GPIO_EXTI_Callback+0x54c>)
 80009f2:	691b      	ldr	r3, [r3, #16]
 80009f4:	3301      	adds	r3, #1
 80009f6:	4a4f      	ldr	r2, [pc, #316]	; (8000b34 <HAL_GPIO_EXTI_Callback+0x54c>)
 80009f8:	6113      	str	r3, [r2, #16]
			  delta_pos[4]++;
 80009fa:	4b4f      	ldr	r3, [pc, #316]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x550>)
 80009fc:	691b      	ldr	r3, [r3, #16]
 80009fe:	3301      	adds	r3, #1
 8000a00:	4a4d      	ldr	r2, [pc, #308]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x550>)
 8000a02:	6113      	str	r3, [r2, #16]
		break;
 8000a04:	e102      	b.n	8000c0c <HAL_GPIO_EXTI_Callback+0x624>
			  motor_steps[4]--;
 8000a06:	4b4b      	ldr	r3, [pc, #300]	; (8000b34 <HAL_GPIO_EXTI_Callback+0x54c>)
 8000a08:	691b      	ldr	r3, [r3, #16]
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	4a49      	ldr	r2, [pc, #292]	; (8000b34 <HAL_GPIO_EXTI_Callback+0x54c>)
 8000a0e:	6113      	str	r3, [r2, #16]
			  delta_pos[4]--;
 8000a10:	4b49      	ldr	r3, [pc, #292]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x550>)
 8000a12:	691b      	ldr	r3, [r3, #16]
 8000a14:	3b01      	subs	r3, #1
 8000a16:	4a48      	ldr	r2, [pc, #288]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x550>)
 8000a18:	6113      	str	r3, [r2, #16]
		break;
 8000a1a:	e0f7      	b.n	8000c0c <HAL_GPIO_EXTI_Callback+0x624>
		 Lstate[5] = HAL_GPIO_ReadPin(encoders[10].port, encoders[10].pin_num);
 8000a1c:	4b40      	ldr	r3, [pc, #256]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x538>)
 8000a1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000a20:	4b3f      	ldr	r3, [pc, #252]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x538>)
 8000a22:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8000a26:	4619      	mov	r1, r3
 8000a28:	4610      	mov	r0, r2
 8000a2a:	f012 ff85 	bl	8013938 <HAL_GPIO_ReadPin>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	461a      	mov	r2, r3
 8000a32:	4b3c      	ldr	r3, [pc, #240]	; (8000b24 <HAL_GPIO_EXTI_Callback+0x53c>)
 8000a34:	615a      	str	r2, [r3, #20]
		  if((val_encoderA[5] == LOW) && Lstate[5]==HIGH)
 8000a36:	4b3c      	ldr	r3, [pc, #240]	; (8000b28 <HAL_GPIO_EXTI_Callback+0x540>)
 8000a38:	695b      	ldr	r3, [r3, #20]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d12c      	bne.n	8000a98 <HAL_GPIO_EXTI_Callback+0x4b0>
 8000a3e:	4b39      	ldr	r3, [pc, #228]	; (8000b24 <HAL_GPIO_EXTI_Callback+0x53c>)
 8000a40:	695b      	ldr	r3, [r3, #20]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d128      	bne.n	8000a98 <HAL_GPIO_EXTI_Callback+0x4b0>
			val_encoderB[5] = HAL_GPIO_ReadPin(encoders[11].port, encoders[11].pin_num);
 8000a46:	4b36      	ldr	r3, [pc, #216]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x538>)
 8000a48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a4a:	4b35      	ldr	r3, [pc, #212]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x538>)
 8000a4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8000a50:	4619      	mov	r1, r3
 8000a52:	4610      	mov	r0, r2
 8000a54:	f012 ff70 	bl	8013938 <HAL_GPIO_ReadPin>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	4b33      	ldr	r3, [pc, #204]	; (8000b2c <HAL_GPIO_EXTI_Callback+0x544>)
 8000a5e:	615a      	str	r2, [r3, #20]
		    if(val_encoderB[5] == LOW && direction[5])
 8000a60:	4b32      	ldr	r3, [pc, #200]	; (8000b2c <HAL_GPIO_EXTI_Callback+0x544>)
 8000a62:	695b      	ldr	r3, [r3, #20]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d108      	bne.n	8000a7a <HAL_GPIO_EXTI_Callback+0x492>
 8000a68:	4b31      	ldr	r3, [pc, #196]	; (8000b30 <HAL_GPIO_EXTI_Callback+0x548>)
 8000a6a:	795b      	ldrb	r3, [r3, #5]
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d003      	beq.n	8000a7a <HAL_GPIO_EXTI_Callback+0x492>
		      direction[5] = false; //Reverse
 8000a72:	4b2f      	ldr	r3, [pc, #188]	; (8000b30 <HAL_GPIO_EXTI_Callback+0x548>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	715a      	strb	r2, [r3, #5]
 8000a78:	e00e      	b.n	8000a98 <HAL_GPIO_EXTI_Callback+0x4b0>
		    else if(val_encoderB[5] == HIGH && !direction[5])
 8000a7a:	4b2c      	ldr	r3, [pc, #176]	; (8000b2c <HAL_GPIO_EXTI_Callback+0x544>)
 8000a7c:	695b      	ldr	r3, [r3, #20]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d10a      	bne.n	8000a98 <HAL_GPIO_EXTI_Callback+0x4b0>
 8000a82:	4b2b      	ldr	r3, [pc, #172]	; (8000b30 <HAL_GPIO_EXTI_Callback+0x548>)
 8000a84:	795b      	ldrb	r3, [r3, #5]
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	f083 0301 	eor.w	r3, r3, #1
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d002      	beq.n	8000a98 <HAL_GPIO_EXTI_Callback+0x4b0>
		    	direction[5] = true;  //Forward
 8000a92:	4b27      	ldr	r3, [pc, #156]	; (8000b30 <HAL_GPIO_EXTI_Callback+0x548>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	715a      	strb	r2, [r3, #5]
		  val_encoderA[5] = Lstate[5];
 8000a98:	4b22      	ldr	r3, [pc, #136]	; (8000b24 <HAL_GPIO_EXTI_Callback+0x53c>)
 8000a9a:	695b      	ldr	r3, [r3, #20]
 8000a9c:	4a22      	ldr	r2, [pc, #136]	; (8000b28 <HAL_GPIO_EXTI_Callback+0x540>)
 8000a9e:	6153      	str	r3, [r2, #20]
		  if(!direction[5]){
 8000aa0:	4b23      	ldr	r3, [pc, #140]	; (8000b30 <HAL_GPIO_EXTI_Callback+0x548>)
 8000aa2:	795b      	ldrb	r3, [r3, #5]
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	f083 0301 	eor.w	r3, r3, #1
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d00a      	beq.n	8000ac6 <HAL_GPIO_EXTI_Callback+0x4de>
			  motor_steps[5]++;
 8000ab0:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <HAL_GPIO_EXTI_Callback+0x54c>)
 8000ab2:	695b      	ldr	r3, [r3, #20]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	4a1f      	ldr	r2, [pc, #124]	; (8000b34 <HAL_GPIO_EXTI_Callback+0x54c>)
 8000ab8:	6153      	str	r3, [r2, #20]
			  delta_pos[5]++;
 8000aba:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x550>)
 8000abc:	695b      	ldr	r3, [r3, #20]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	4a1d      	ldr	r2, [pc, #116]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x550>)
 8000ac2:	6153      	str	r3, [r2, #20]
		break;
 8000ac4:	e0a2      	b.n	8000c0c <HAL_GPIO_EXTI_Callback+0x624>
			  motor_steps[5]--;
 8000ac6:	4b1b      	ldr	r3, [pc, #108]	; (8000b34 <HAL_GPIO_EXTI_Callback+0x54c>)
 8000ac8:	695b      	ldr	r3, [r3, #20]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	4a19      	ldr	r2, [pc, #100]	; (8000b34 <HAL_GPIO_EXTI_Callback+0x54c>)
 8000ace:	6153      	str	r3, [r2, #20]
			  delta_pos[5]--;
 8000ad0:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x550>)
 8000ad2:	695b      	ldr	r3, [r3, #20]
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	4a18      	ldr	r2, [pc, #96]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x550>)
 8000ad8:	6153      	str	r3, [r2, #20]
		break;
 8000ada:	e097      	b.n	8000c0c <HAL_GPIO_EXTI_Callback+0x624>
		desired_pos[0] = (double)motor_steps[0] *2.0*3.1415926/REV_COUNT_1*2.0;
 8000adc:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <HAL_GPIO_EXTI_Callback+0x54c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	ee07 3a90 	vmov	s15, r3
 8000ae4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ae8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000aec:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8000b10 <HAL_GPIO_EXTI_Callback+0x528>
 8000af0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000af4:	ed9f 5b08 	vldr	d5, [pc, #32]	; 8000b18 <HAL_GPIO_EXTI_Callback+0x530>
 8000af8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000afc:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000b00:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <HAL_GPIO_EXTI_Callback+0x554>)
 8000b02:	ed83 7b00 	vstr	d7, [r3]
		homing_state[0] = true;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <HAL_GPIO_EXTI_Callback+0x558>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	701a      	strb	r2, [r3, #0]
		break;
 8000b0c:	e07e      	b.n	8000c0c <HAL_GPIO_EXTI_Callback+0x624>
 8000b0e:	bf00      	nop
 8000b10:	4d12d84a 	.word	0x4d12d84a
 8000b14:	400921fb 	.word	0x400921fb
 8000b18:	00000000 	.word	0x00000000
 8000b1c:	40d0e000 	.word	0x40d0e000
 8000b20:	2400040c 	.word	0x2400040c
 8000b24:	240003f4 	.word	0x240003f4
 8000b28:	240003dc 	.word	0x240003dc
 8000b2c:	2400051c 	.word	0x2400051c
 8000b30:	24000000 	.word	0x24000000
 8000b34:	24000214 	.word	0x24000214
 8000b38:	24000260 	.word	0x24000260
 8000b3c:	240002d8 	.word	0x240002d8
 8000b40:	24000308 	.word	0x24000308
		desired_pos[1] = (double)motor_steps[1] *2.0*3.1415926/REV_COUNT_1*2.0;
 8000b44:	4b3a      	ldr	r3, [pc, #232]	; (8000c30 <HAL_GPIO_EXTI_Callback+0x648>)
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	ee07 3a90 	vmov	s15, r3
 8000b4c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b50:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000b54:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8000c18 <HAL_GPIO_EXTI_Callback+0x630>
 8000b58:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000b5c:	ed9f 5b30 	vldr	d5, [pc, #192]	; 8000c20 <HAL_GPIO_EXTI_Callback+0x638>
 8000b60:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b64:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000b68:	4b32      	ldr	r3, [pc, #200]	; (8000c34 <HAL_GPIO_EXTI_Callback+0x64c>)
 8000b6a:	ed83 7b02 	vstr	d7, [r3, #8]
		homing_state[1] = true;
 8000b6e:	4b32      	ldr	r3, [pc, #200]	; (8000c38 <HAL_GPIO_EXTI_Callback+0x650>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	705a      	strb	r2, [r3, #1]
		break;
 8000b74:	e04a      	b.n	8000c0c <HAL_GPIO_EXTI_Callback+0x624>
		desired_pos[2] = (double)motor_steps[2] *2.0*3.1415926/REV_COUNT_1*2.0;
 8000b76:	4b2e      	ldr	r3, [pc, #184]	; (8000c30 <HAL_GPIO_EXTI_Callback+0x648>)
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	ee07 3a90 	vmov	s15, r3
 8000b7e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b82:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000b86:	ed9f 6b24 	vldr	d6, [pc, #144]	; 8000c18 <HAL_GPIO_EXTI_Callback+0x630>
 8000b8a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000b8e:	ed9f 5b24 	vldr	d5, [pc, #144]	; 8000c20 <HAL_GPIO_EXTI_Callback+0x638>
 8000b92:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b96:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000b9a:	4b26      	ldr	r3, [pc, #152]	; (8000c34 <HAL_GPIO_EXTI_Callback+0x64c>)
 8000b9c:	ed83 7b04 	vstr	d7, [r3, #16]
		homing_state[2] = true;
 8000ba0:	4b25      	ldr	r3, [pc, #148]	; (8000c38 <HAL_GPIO_EXTI_Callback+0x650>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	709a      	strb	r2, [r3, #2]
		break;
 8000ba6:	e031      	b.n	8000c0c <HAL_GPIO_EXTI_Callback+0x624>
		desired_pos[3] = (double)motor_steps[3] *2.0*3.1415926/REV_COUNT_2*2.0;
 8000ba8:	4b21      	ldr	r3, [pc, #132]	; (8000c30 <HAL_GPIO_EXTI_Callback+0x648>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	ee07 3a90 	vmov	s15, r3
 8000bb0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000bb4:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000bb8:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8000c18 <HAL_GPIO_EXTI_Callback+0x630>
 8000bbc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000bc0:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8000c28 <HAL_GPIO_EXTI_Callback+0x640>
 8000bc4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000bc8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000bcc:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <HAL_GPIO_EXTI_Callback+0x64c>)
 8000bce:	ed83 7b06 	vstr	d7, [r3, #24]
		homing_state[3] = true;
 8000bd2:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <HAL_GPIO_EXTI_Callback+0x650>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	70da      	strb	r2, [r3, #3]
		break;
 8000bd8:	e018      	b.n	8000c0c <HAL_GPIO_EXTI_Callback+0x624>
		desired_pos[4] = (double)motor_steps[4] *2.0*3.1415926/REV_COUNT_2*2.0;
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <HAL_GPIO_EXTI_Callback+0x648>)
 8000bdc:	691b      	ldr	r3, [r3, #16]
 8000bde:	ee07 3a90 	vmov	s15, r3
 8000be2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000be6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000bea:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000c18 <HAL_GPIO_EXTI_Callback+0x630>
 8000bee:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000bf2:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8000c28 <HAL_GPIO_EXTI_Callback+0x640>
 8000bf6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000bfa:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <HAL_GPIO_EXTI_Callback+0x64c>)
 8000c00:	ed83 7b08 	vstr	d7, [r3, #32]
		homing_state[4] = true;
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <HAL_GPIO_EXTI_Callback+0x650>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	711a      	strb	r2, [r3, #4]
		break;
 8000c0a:	bf00      	nop
	}
}
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	f3af 8000 	nop.w
 8000c18:	4d12d84a 	.word	0x4d12d84a
 8000c1c:	400921fb 	.word	0x400921fb
 8000c20:	00000000 	.word	0x00000000
 8000c24:	40d0e000 	.word	0x40d0e000
 8000c28:	00000000 	.word	0x00000000
 8000c2c:	40b67c00 	.word	0x40b67c00
 8000c30:	24000214 	.word	0x24000214
 8000c34:	240002d8 	.word	0x240002d8
 8000c38:	24000308 	.word	0x24000308

08000c3c <set_up_encoder_pins>:

void set_up_encoder_pins(void){
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
	//pins: 0,1,2,3,4,7 - PA0(PC10)y, PA1(PD5)y, PB2(PC7)y, PE3(PE4)y, PD4(PD3)y, PD7(PE2)y
	// HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
	encoders[0].port = GPIOA; encoders[0].pin_num = GPIO_PIN_0;
 8000c40:	4b28      	ldr	r3, [pc, #160]	; (8000ce4 <set_up_encoder_pins+0xa8>)
 8000c42:	4a29      	ldr	r2, [pc, #164]	; (8000ce8 <set_up_encoder_pins+0xac>)
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	4b27      	ldr	r3, [pc, #156]	; (8000ce4 <set_up_encoder_pins+0xa8>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	809a      	strh	r2, [r3, #4]
	encoders[1].port = GPIOC; encoders[1].pin_num = GPIO_PIN_10;
 8000c4c:	4b25      	ldr	r3, [pc, #148]	; (8000ce4 <set_up_encoder_pins+0xa8>)
 8000c4e:	4a27      	ldr	r2, [pc, #156]	; (8000cec <set_up_encoder_pins+0xb0>)
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	4b24      	ldr	r3, [pc, #144]	; (8000ce4 <set_up_encoder_pins+0xa8>)
 8000c54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c58:	819a      	strh	r2, [r3, #12]
	encoders[2].port = GPIOA; encoders[2].pin_num = GPIO_PIN_1;
 8000c5a:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <set_up_encoder_pins+0xa8>)
 8000c5c:	4a22      	ldr	r2, [pc, #136]	; (8000ce8 <set_up_encoder_pins+0xac>)
 8000c5e:	611a      	str	r2, [r3, #16]
 8000c60:	4b20      	ldr	r3, [pc, #128]	; (8000ce4 <set_up_encoder_pins+0xa8>)
 8000c62:	2202      	movs	r2, #2
 8000c64:	829a      	strh	r2, [r3, #20]
	encoders[3].port = GPIOD; encoders[3].pin_num = GPIO_PIN_5;
 8000c66:	4b1f      	ldr	r3, [pc, #124]	; (8000ce4 <set_up_encoder_pins+0xa8>)
 8000c68:	4a21      	ldr	r2, [pc, #132]	; (8000cf0 <set_up_encoder_pins+0xb4>)
 8000c6a:	619a      	str	r2, [r3, #24]
 8000c6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ce4 <set_up_encoder_pins+0xa8>)
 8000c6e:	2220      	movs	r2, #32
 8000c70:	839a      	strh	r2, [r3, #28]
	encoders[4].port = GPIOB; encoders[4].pin_num = GPIO_PIN_2;
 8000c72:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <set_up_encoder_pins+0xa8>)
 8000c74:	4a1f      	ldr	r2, [pc, #124]	; (8000cf4 <set_up_encoder_pins+0xb8>)
 8000c76:	621a      	str	r2, [r3, #32]
 8000c78:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <set_up_encoder_pins+0xa8>)
 8000c7a:	2204      	movs	r2, #4
 8000c7c:	849a      	strh	r2, [r3, #36]	; 0x24
	encoders[5].port = GPIOC; encoders[5].pin_num = GPIO_PIN_7;
 8000c7e:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <set_up_encoder_pins+0xa8>)
 8000c80:	4a1a      	ldr	r2, [pc, #104]	; (8000cec <set_up_encoder_pins+0xb0>)
 8000c82:	629a      	str	r2, [r3, #40]	; 0x28
 8000c84:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <set_up_encoder_pins+0xa8>)
 8000c86:	2280      	movs	r2, #128	; 0x80
 8000c88:	859a      	strh	r2, [r3, #44]	; 0x2c
	encoders[6].port = GPIOE; encoders[6].pin_num = GPIO_PIN_3;
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <set_up_encoder_pins+0xa8>)
 8000c8c:	4a1a      	ldr	r2, [pc, #104]	; (8000cf8 <set_up_encoder_pins+0xbc>)
 8000c8e:	631a      	str	r2, [r3, #48]	; 0x30
 8000c90:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <set_up_encoder_pins+0xa8>)
 8000c92:	2208      	movs	r2, #8
 8000c94:	869a      	strh	r2, [r3, #52]	; 0x34
	encoders[7].port = GPIOE; encoders[7].pin_num = GPIO_PIN_4;
 8000c96:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <set_up_encoder_pins+0xa8>)
 8000c98:	4a17      	ldr	r2, [pc, #92]	; (8000cf8 <set_up_encoder_pins+0xbc>)
 8000c9a:	639a      	str	r2, [r3, #56]	; 0x38
 8000c9c:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <set_up_encoder_pins+0xa8>)
 8000c9e:	2210      	movs	r2, #16
 8000ca0:	879a      	strh	r2, [r3, #60]	; 0x3c
	encoders[8].port = GPIOD; encoders[8].pin_num = GPIO_PIN_4;
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <set_up_encoder_pins+0xa8>)
 8000ca4:	4a12      	ldr	r2, [pc, #72]	; (8000cf0 <set_up_encoder_pins+0xb4>)
 8000ca6:	641a      	str	r2, [r3, #64]	; 0x40
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <set_up_encoder_pins+0xa8>)
 8000caa:	2210      	movs	r2, #16
 8000cac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	encoders[9].port = GPIOD; encoders[9].pin_num = GPIO_PIN_3;
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <set_up_encoder_pins+0xa8>)
 8000cb2:	4a0f      	ldr	r2, [pc, #60]	; (8000cf0 <set_up_encoder_pins+0xb4>)
 8000cb4:	649a      	str	r2, [r3, #72]	; 0x48
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <set_up_encoder_pins+0xa8>)
 8000cb8:	2208      	movs	r2, #8
 8000cba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	encoders[10].port = GPIOD; encoders[10].pin_num = GPIO_PIN_7;
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <set_up_encoder_pins+0xa8>)
 8000cc0:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <set_up_encoder_pins+0xb4>)
 8000cc2:	651a      	str	r2, [r3, #80]	; 0x50
 8000cc4:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <set_up_encoder_pins+0xa8>)
 8000cc6:	2280      	movs	r2, #128	; 0x80
 8000cc8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    encoders[11].port = GPIOE; encoders[11].pin_num = GPIO_PIN_2;
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <set_up_encoder_pins+0xa8>)
 8000cce:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <set_up_encoder_pins+0xbc>)
 8000cd0:	659a      	str	r2, [r3, #88]	; 0x58
 8000cd2:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <set_up_encoder_pins+0xa8>)
 8000cd4:	2204      	movs	r2, #4
 8000cd6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	2400040c 	.word	0x2400040c
 8000ce8:	58020000 	.word	0x58020000
 8000cec:	58020800 	.word	0x58020800
 8000cf0:	58020c00 	.word	0x58020c00
 8000cf4:	58020400 	.word	0x58020400
 8000cf8:	58021000 	.word	0x58021000

08000cfc <set_up_driver_pins>:
void set_up_driver_pins(void){
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
	//PE0, PF11, PG8, PG5, PF15, PD10, PG4, PE10, PE12, PD11, PD12, PD13
	Driver_P[0].port = GPIOE; Driver_P[0].pin_num = GPIO_PIN_0;
 8000d00:	4b2a      	ldr	r3, [pc, #168]	; (8000dac <set_up_driver_pins+0xb0>)
 8000d02:	4a2b      	ldr	r2, [pc, #172]	; (8000db0 <set_up_driver_pins+0xb4>)
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	4b29      	ldr	r3, [pc, #164]	; (8000dac <set_up_driver_pins+0xb0>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	809a      	strh	r2, [r3, #4]
	Driver_N[0].port = GPIOF; Driver_N[0].pin_num = GPIO_PIN_11;
 8000d0c:	4b29      	ldr	r3, [pc, #164]	; (8000db4 <set_up_driver_pins+0xb8>)
 8000d0e:	4a2a      	ldr	r2, [pc, #168]	; (8000db8 <set_up_driver_pins+0xbc>)
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	4b28      	ldr	r3, [pc, #160]	; (8000db4 <set_up_driver_pins+0xb8>)
 8000d14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d18:	809a      	strh	r2, [r3, #4]
	Driver_P[1].port = GPIOG; Driver_P[1].pin_num = GPIO_PIN_8;
 8000d1a:	4b24      	ldr	r3, [pc, #144]	; (8000dac <set_up_driver_pins+0xb0>)
 8000d1c:	4a27      	ldr	r2, [pc, #156]	; (8000dbc <set_up_driver_pins+0xc0>)
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	4b22      	ldr	r3, [pc, #136]	; (8000dac <set_up_driver_pins+0xb0>)
 8000d22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d26:	819a      	strh	r2, [r3, #12]
	Driver_N[1].port = GPIOG; Driver_N[1].pin_num = GPIO_PIN_5;
 8000d28:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <set_up_driver_pins+0xb8>)
 8000d2a:	4a24      	ldr	r2, [pc, #144]	; (8000dbc <set_up_driver_pins+0xc0>)
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	4b21      	ldr	r3, [pc, #132]	; (8000db4 <set_up_driver_pins+0xb8>)
 8000d30:	2220      	movs	r2, #32
 8000d32:	819a      	strh	r2, [r3, #12]
	Driver_P[2].port = GPIOF; Driver_P[2].pin_num = GPIO_PIN_15;
 8000d34:	4b1d      	ldr	r3, [pc, #116]	; (8000dac <set_up_driver_pins+0xb0>)
 8000d36:	4a20      	ldr	r2, [pc, #128]	; (8000db8 <set_up_driver_pins+0xbc>)
 8000d38:	611a      	str	r2, [r3, #16]
 8000d3a:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <set_up_driver_pins+0xb0>)
 8000d3c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d40:	829a      	strh	r2, [r3, #20]
	Driver_N[2].port = GPIOD; Driver_N[3].pin_num = GPIO_PIN_10;
 8000d42:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <set_up_driver_pins+0xb8>)
 8000d44:	4a1e      	ldr	r2, [pc, #120]	; (8000dc0 <set_up_driver_pins+0xc4>)
 8000d46:	611a      	str	r2, [r3, #16]
 8000d48:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <set_up_driver_pins+0xb8>)
 8000d4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d4e:	839a      	strh	r2, [r3, #28]
	Driver_P[3].port = GPIOG; Driver_P[3].pin_num = GPIO_PIN_4;
 8000d50:	4b16      	ldr	r3, [pc, #88]	; (8000dac <set_up_driver_pins+0xb0>)
 8000d52:	4a1a      	ldr	r2, [pc, #104]	; (8000dbc <set_up_driver_pins+0xc0>)
 8000d54:	619a      	str	r2, [r3, #24]
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <set_up_driver_pins+0xb0>)
 8000d58:	2210      	movs	r2, #16
 8000d5a:	839a      	strh	r2, [r3, #28]
	Driver_N[3].port = GPIOE; Driver_N[3].pin_num = GPIO_PIN_10;
 8000d5c:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <set_up_driver_pins+0xb8>)
 8000d5e:	4a14      	ldr	r2, [pc, #80]	; (8000db0 <set_up_driver_pins+0xb4>)
 8000d60:	619a      	str	r2, [r3, #24]
 8000d62:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <set_up_driver_pins+0xb8>)
 8000d64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d68:	839a      	strh	r2, [r3, #28]
	Driver_P[4].port = GPIOE; Driver_P[4].pin_num = GPIO_PIN_12;
 8000d6a:	4b10      	ldr	r3, [pc, #64]	; (8000dac <set_up_driver_pins+0xb0>)
 8000d6c:	4a10      	ldr	r2, [pc, #64]	; (8000db0 <set_up_driver_pins+0xb4>)
 8000d6e:	621a      	str	r2, [r3, #32]
 8000d70:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <set_up_driver_pins+0xb0>)
 8000d72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d76:	849a      	strh	r2, [r3, #36]	; 0x24
	Driver_N[4].port = GPIOD; Driver_N[4].pin_num = GPIO_PIN_11;
 8000d78:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <set_up_driver_pins+0xb8>)
 8000d7a:	4a11      	ldr	r2, [pc, #68]	; (8000dc0 <set_up_driver_pins+0xc4>)
 8000d7c:	621a      	str	r2, [r3, #32]
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <set_up_driver_pins+0xb8>)
 8000d80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d84:	849a      	strh	r2, [r3, #36]	; 0x24
	Driver_P[5].port = GPIOD; Driver_P[5].pin_num = GPIO_PIN_12;
 8000d86:	4b09      	ldr	r3, [pc, #36]	; (8000dac <set_up_driver_pins+0xb0>)
 8000d88:	4a0d      	ldr	r2, [pc, #52]	; (8000dc0 <set_up_driver_pins+0xc4>)
 8000d8a:	629a      	str	r2, [r3, #40]	; 0x28
 8000d8c:	4b07      	ldr	r3, [pc, #28]	; (8000dac <set_up_driver_pins+0xb0>)
 8000d8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d92:	859a      	strh	r2, [r3, #44]	; 0x2c
	Driver_N[5].port = GPIOD; Driver_N[5].pin_num = GPIO_PIN_13;
 8000d94:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <set_up_driver_pins+0xb8>)
 8000d96:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <set_up_driver_pins+0xc4>)
 8000d98:	629a      	str	r2, [r3, #40]	; 0x28
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <set_up_driver_pins+0xb8>)
 8000d9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000da0:	859a      	strh	r2, [r3, #44]	; 0x2c
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	24000320 	.word	0x24000320
 8000db0:	58021000 	.word	0x58021000
 8000db4:	240004ac 	.word	0x240004ac
 8000db8:	58021400 	.word	0x58021400
 8000dbc:	58021800 	.word	0x58021800
 8000dc0:	58020c00 	.word	0x58020c00

08000dc4 <PWM3_change_duty_cycle>:

void PWM3_change_duty_cycle (int valuePA6, int valuePB1, int valuePA7){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08c      	sub	sp, #48	; 0x30
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
 8000de0:	615a      	str	r2, [r3, #20]
 8000de2:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000de4:	2360      	movs	r3, #96	; 0x60
 8000de6:	617b      	str	r3, [r7, #20]
	  sConfigOC.Pulse = valuePA6;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	61bb      	str	r3, [r7, #24]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dec:	2300      	movs	r3, #0
 8000dee:	61fb      	str	r3, [r7, #28]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	2200      	movs	r2, #0
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4819      	ldr	r0, [pc, #100]	; (8000e64 <PWM3_change_duty_cycle+0xa0>)
 8000dfe:	f016 fc51 	bl	80176a4 <HAL_TIM_PWM_ConfigChannel>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <PWM3_change_duty_cycle+0x48>
	  {
	    Error_Handler();
 8000e08:	f001 fa7c 	bl	8002304 <Error_Handler>
	  /*sConfigOC.Pulse = valuePB0;
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
	  {
	    Error_Handler();
	  }*/
	  sConfigOC.Pulse = valuePB1;
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	220c      	movs	r2, #12
 8000e16:	4619      	mov	r1, r3
 8000e18:	4812      	ldr	r0, [pc, #72]	; (8000e64 <PWM3_change_duty_cycle+0xa0>)
 8000e1a:	f016 fc43 	bl	80176a4 <HAL_TIM_PWM_ConfigChannel>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <PWM3_change_duty_cycle+0x64>
	  {
	    Error_Handler();
 8000e24:	f001 fa6e 	bl	8002304 <Error_Handler>
	  }
	  sConfigOC.Pulse = valuePA7;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	2204      	movs	r2, #4
 8000e32:	4619      	mov	r1, r3
 8000e34:	480b      	ldr	r0, [pc, #44]	; (8000e64 <PWM3_change_duty_cycle+0xa0>)
 8000e36:	f016 fc35 	bl	80176a4 <HAL_TIM_PWM_ConfigChannel>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <PWM3_change_duty_cycle+0x80>
	  	  {
	  	    Error_Handler();
 8000e40:	f001 fa60 	bl	8002304 <Error_Handler>
	  	  }
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e44:	2100      	movs	r1, #0
 8000e46:	4807      	ldr	r0, [pc, #28]	; (8000e64 <PWM3_change_duty_cycle+0xa0>)
 8000e48:	f016 fab4 	bl	80173b4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000e4c:	2104      	movs	r1, #4
 8000e4e:	4805      	ldr	r0, [pc, #20]	; (8000e64 <PWM3_change_duty_cycle+0xa0>)
 8000e50:	f016 fab0 	bl	80173b4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000e54:	210c      	movs	r1, #12
 8000e56:	4803      	ldr	r0, [pc, #12]	; (8000e64 <PWM3_change_duty_cycle+0xa0>)
 8000e58:	f016 faac 	bl	80173b4 <HAL_TIM_PWM_Start>
}
 8000e5c:	bf00      	nop
 8000e5e:	3730      	adds	r7, #48	; 0x30
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	240004dc 	.word	0x240004dc

08000e68 <PWM1_change_duty_cycle>:
void PWM1_change_duty_cycle (int valuePE11, int valuePE13){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	; 0x28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000e72:	f107 030c 	add.w	r3, r7, #12
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
 8000e80:	611a      	str	r2, [r3, #16]
 8000e82:	615a      	str	r2, [r3, #20]
 8000e84:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e86:	2360      	movs	r3, #96	; 0x60
 8000e88:	60fb      	str	r3, [r7, #12]
	  sConfigOC.Pulse = valuePE11;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	613b      	str	r3, [r7, #16]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61bb      	str	r3, [r7, #24]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	623b      	str	r3, [r7, #32]
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ea2:	f107 030c 	add.w	r3, r7, #12
 8000ea6:	2204      	movs	r2, #4
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4811      	ldr	r0, [pc, #68]	; (8000ef0 <PWM1_change_duty_cycle+0x88>)
 8000eac:	f016 fbfa 	bl	80176a4 <HAL_TIM_PWM_ConfigChannel>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <PWM1_change_duty_cycle+0x52>
	  {
	    Error_Handler();
 8000eb6:	f001 fa25 	bl	8002304 <Error_Handler>
	  }
	  sConfigOC.Pulse = valuePE13;
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	613b      	str	r3, [r7, #16]
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ebe:	f107 030c 	add.w	r3, r7, #12
 8000ec2:	2208      	movs	r2, #8
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	480a      	ldr	r0, [pc, #40]	; (8000ef0 <PWM1_change_duty_cycle+0x88>)
 8000ec8:	f016 fbec 	bl	80176a4 <HAL_TIM_PWM_ConfigChannel>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <PWM1_change_duty_cycle+0x6e>
	  {
	    Error_Handler();
 8000ed2:	f001 fa17 	bl	8002304 <Error_Handler>
	  }
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000ed6:	2104      	movs	r1, #4
 8000ed8:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <PWM1_change_duty_cycle+0x88>)
 8000eda:	f016 fa6b 	bl	80173b4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000ede:	2108      	movs	r1, #8
 8000ee0:	4803      	ldr	r0, [pc, #12]	; (8000ef0 <PWM1_change_duty_cycle+0x88>)
 8000ee2:	f016 fa67 	bl	80173b4 <HAL_TIM_PWM_Start>
}
 8000ee6:	bf00      	nop
 8000ee8:	3728      	adds	r7, #40	; 0x28
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	240005c0 	.word	0x240005c0

08000ef4 <PWM2_change_duty_cycle>:

//pin PA5
void PWM2_change_duty_cycle (int valuePA5){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	; 0x28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000efc:	f107 030c 	add.w	r3, r7, #12
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
 8000f0c:	615a      	str	r2, [r3, #20]
 8000f0e:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f10:	2360      	movs	r3, #96	; 0x60
 8000f12:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = valuePA5;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f20:	f107 030c 	add.w	r3, r7, #12
 8000f24:	2200      	movs	r2, #0
 8000f26:	4619      	mov	r1, r3
 8000f28:	4807      	ldr	r0, [pc, #28]	; (8000f48 <PWM2_change_duty_cycle+0x54>)
 8000f2a:	f016 fbbb 	bl	80176a4 <HAL_TIM_PWM_ConfigChannel>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <PWM2_change_duty_cycle+0x44>
	{
	  Error_Handler();
 8000f34:	f001 f9e6 	bl	8002304 <Error_Handler>
    }
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4803      	ldr	r0, [pc, #12]	; (8000f48 <PWM2_change_duty_cycle+0x54>)
 8000f3c:	f016 fa3a 	bl	80173b4 <HAL_TIM_PWM_Start>
}
 8000f40:	bf00      	nop
 8000f42:	3728      	adds	r7, #40	; 0x28
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	24000638 	.word	0x24000638
 8000f4c:	00000000 	.word	0x00000000

08000f50 <HAL_TIM_PeriodElapsedCallback>:
  //HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);
  CDC_Transmit_FS((uint8_t *)&ch, 1);
  return ch;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	int j;
	if (htim == &htim7){
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a71      	ldr	r2, [pc, #452]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	f040 80c2 	bne.w	80010e6 <HAL_TIM_PeriodElapsedCallback+0x196>
		for (j = 0; j < NUM_JOINTS; j++){
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	e0b7      	b.n	80010d8 <HAL_TIM_PeriodElapsedCallback+0x188>

			if (j <3){
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	dc38      	bgt.n	8000fe0 <HAL_TIM_PeriodElapsedCallback+0x90>
				current_angle[j] = (double)motor_steps[j] *2.0*3.1415926/REV_COUNT_1*2.0;
 8000f6e:	4a6d      	ldr	r2, [pc, #436]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f76:	ee07 3a90 	vmov	s15, r3
 8000f7a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f7e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000f82:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 80010f8 <HAL_TIM_PeriodElapsedCallback+0x1a8>
 8000f86:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f8a:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 8001100 <HAL_TIM_PeriodElapsedCallback+0x1b0>
 8000f8e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f92:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000f96:	4a64      	ldr	r2, [pc, #400]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	00db      	lsls	r3, r3, #3
 8000f9c:	4413      	add	r3, r2
 8000f9e:	ed83 7b00 	vstr	d7, [r3]
				joint_speed[j] = (double)delta_pos[j] *2.0*3.1415926/REV_COUNT_1/0.01*2.0;
 8000fa2:	4a62      	ldr	r2, [pc, #392]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000faa:	ee07 3a90 	vmov	s15, r3
 8000fae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000fb2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000fb6:	ed9f 6b50 	vldr	d6, [pc, #320]	; 80010f8 <HAL_TIM_PeriodElapsedCallback+0x1a8>
 8000fba:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fbe:	ed9f 5b50 	vldr	d5, [pc, #320]	; 8001100 <HAL_TIM_PeriodElapsedCallback+0x1b0>
 8000fc2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000fc6:	ed9f 5b50 	vldr	d5, [pc, #320]	; 8001108 <HAL_TIM_PeriodElapsedCallback+0x1b8>
 8000fca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fce:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000fd2:	4a57      	ldr	r2, [pc, #348]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	4413      	add	r3, r2
 8000fda:	ed83 7b00 	vstr	d7, [r3]
 8000fde:	e073      	b.n	80010c8 <HAL_TIM_PeriodElapsedCallback+0x178>
			}
			else if (j < 5){
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	dc38      	bgt.n	8001058 <HAL_TIM_PeriodElapsedCallback+0x108>
				current_angle[j] = (double)motor_steps[j] *2.0*3.1415926/REV_COUNT_2*2.0;
 8000fe6:	4a4f      	ldr	r2, [pc, #316]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fee:	ee07 3a90 	vmov	s15, r3
 8000ff2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ff6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000ffa:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 80010f8 <HAL_TIM_PeriodElapsedCallback+0x1a8>
 8000ffe:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001002:	ed9f 5b43 	vldr	d5, [pc, #268]	; 8001110 <HAL_TIM_PeriodElapsedCallback+0x1c0>
 8001006:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800100a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800100e:	4a46      	ldr	r2, [pc, #280]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	4413      	add	r3, r2
 8001016:	ed83 7b00 	vstr	d7, [r3]
				joint_speed[j] = (double)delta_pos[j] *2.0*3.1415926/REV_COUNT_2/0.01*2.0;
 800101a:	4a44      	ldr	r2, [pc, #272]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001022:	ee07 3a90 	vmov	s15, r3
 8001026:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800102a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800102e:	ed9f 6b32 	vldr	d6, [pc, #200]	; 80010f8 <HAL_TIM_PeriodElapsedCallback+0x1a8>
 8001032:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001036:	ed9f 5b36 	vldr	d5, [pc, #216]	; 8001110 <HAL_TIM_PeriodElapsedCallback+0x1c0>
 800103a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800103e:	ed9f 5b32 	vldr	d5, [pc, #200]	; 8001108 <HAL_TIM_PeriodElapsedCallback+0x1b8>
 8001042:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001046:	ee37 7b07 	vadd.f64	d7, d7, d7
 800104a:	4a39      	ldr	r2, [pc, #228]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	4413      	add	r3, r2
 8001052:	ed83 7b00 	vstr	d7, [r3]
 8001056:	e037      	b.n	80010c8 <HAL_TIM_PeriodElapsedCallback+0x178>
			}
			else{
				current_angle[j] = (double)motor_steps[j] *2.0*3.1415926/REV_COUNT_3*2.0;
 8001058:	4a32      	ldr	r2, [pc, #200]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001060:	ee07 3a90 	vmov	s15, r3
 8001064:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001068:	ee37 7b07 	vadd.f64	d7, d7, d7
 800106c:	ed9f 6b22 	vldr	d6, [pc, #136]	; 80010f8 <HAL_TIM_PeriodElapsedCallback+0x1a8>
 8001070:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001074:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8001118 <HAL_TIM_PeriodElapsedCallback+0x1c8>
 8001078:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800107c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001080:	4a29      	ldr	r2, [pc, #164]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	4413      	add	r3, r2
 8001088:	ed83 7b00 	vstr	d7, [r3]
				joint_speed[j] = (double)delta_pos[j] *2.0*3.1415926/REV_COUNT_3/0.01*2.0;
 800108c:	4a27      	ldr	r2, [pc, #156]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001094:	ee07 3a90 	vmov	s15, r3
 8001098:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800109c:	ee37 7b07 	vadd.f64	d7, d7, d7
 80010a0:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80010f8 <HAL_TIM_PeriodElapsedCallback+0x1a8>
 80010a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010a8:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 8001118 <HAL_TIM_PeriodElapsedCallback+0x1c8>
 80010ac:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80010b0:	ed9f 5b15 	vldr	d5, [pc, #84]	; 8001108 <HAL_TIM_PeriodElapsedCallback+0x1b8>
 80010b4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010b8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80010bc:	4a1c      	ldr	r2, [pc, #112]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	4413      	add	r3, r2
 80010c4:	ed83 7b00 	vstr	d7, [r3]
			}
			delta_pos[j] = 0;
 80010c8:	4a18      	ldr	r2, [pc, #96]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2100      	movs	r1, #0
 80010ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (j = 0; j < NUM_JOINTS; j++){
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	3301      	adds	r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2b05      	cmp	r3, #5
 80010dc:	f77f af44 	ble.w	8000f68 <HAL_TIM_PeriodElapsedCallback+0x18>
		}

		need_control = true;
 80010e0:	4b14      	ldr	r3, [pc, #80]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	701a      	strb	r2, [r3, #0]
	}
}
 80010e6:	bf00      	nop
 80010e8:	3714      	adds	r7, #20
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	f3af 8000 	nop.w
 80010f8:	4d12d84a 	.word	0x4d12d84a
 80010fc:	400921fb 	.word	0x400921fb
 8001100:	00000000 	.word	0x00000000
 8001104:	40d0e000 	.word	0x40d0e000
 8001108:	47ae147b 	.word	0x47ae147b
 800110c:	3f847ae1 	.word	0x3f847ae1
 8001110:	00000000 	.word	0x00000000
 8001114:	40b67c00 	.word	0x40b67c00
 8001118:	00000000 	.word	0x00000000
 800111c:	405cc000 	.word	0x405cc000
 8001120:	24000678 	.word	0x24000678
 8001124:	24000214 	.word	0x24000214
 8001128:	24000278 	.word	0x24000278
 800112c:	24000260 	.word	0x24000260
 8001130:	24000230 	.word	0x24000230
 8001134:	24000006 	.word	0x24000006

08001138 <Joint_controller>:


void Joint_controller(bool homing, creal_T* G_q_vector){
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b097      	sub	sp, #92	; 0x5c
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	6039      	str	r1, [r7, #0]
 8001142:	71fb      	strb	r3, [r7, #7]
	int k;
	int PWM_val [6] = {0};
 8001144:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
 8001154:	615a      	str	r2, [r3, #20]
	double G_q_r [6] = {0};
 8001156:	f107 0308 	add.w	r3, r7, #8
 800115a:	2230      	movs	r2, #48	; 0x30
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f01d fada 	bl	801e718 <memset>
	G_q(G_CONSTANT, current_angle[2], current_angle[3], current_angle[4], current_angle[5], G_q_vector);
 8001164:	4bba      	ldr	r3, [pc, #744]	; (8001450 <Joint_controller+0x318>)
 8001166:	ed93 7b04 	vldr	d7, [r3, #16]
 800116a:	4bb9      	ldr	r3, [pc, #740]	; (8001450 <Joint_controller+0x318>)
 800116c:	ed93 6b06 	vldr	d6, [r3, #24]
 8001170:	4bb7      	ldr	r3, [pc, #732]	; (8001450 <Joint_controller+0x318>)
 8001172:	ed93 5b08 	vldr	d5, [r3, #32]
 8001176:	4bb6      	ldr	r3, [pc, #728]	; (8001450 <Joint_controller+0x318>)
 8001178:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 800117c:	6838      	ldr	r0, [r7, #0]
 800117e:	eeb0 3b45 	vmov.f64	d3, d5
 8001182:	eeb0 2b46 	vmov.f64	d2, d6
 8001186:	eeb0 1b47 	vmov.f64	d1, d7
 800118a:	ed9f 0bad 	vldr	d0, [pc, #692]	; 8001440 <Joint_controller+0x308>
 800118e:	f001 fc13 	bl	80029b8 <G_q>
	for (k = 0; k < NUM_JOINTS; k++){
 8001192:	2300      	movs	r3, #0
 8001194:	657b      	str	r3, [r7, #84]	; 0x54
 8001196:	e13a      	b.n	800140e <Joint_controller+0x2d6>
		//set duty cycle with PD+Gravity control
		G_q_r[k] = (double)G_q_vector[k].re;
 8001198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800119a:	011b      	lsls	r3, r3, #4
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	4413      	add	r3, r2
 80011a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80011a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80011a6:	00d2      	lsls	r2, r2, #3
 80011a8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80011ac:	440a      	add	r2, r1
 80011ae:	3a50      	subs	r2, #80	; 0x50
 80011b0:	e9c2 3400 	strd	r3, r4, [r2]
		backemf[k] = joint_speed[k] * V_CONSTANT[k];
 80011b4:	4aa7      	ldr	r2, [pc, #668]	; (8001454 <Joint_controller+0x31c>)
 80011b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	4413      	add	r3, r2
 80011bc:	ed93 6b00 	vldr	d6, [r3]
 80011c0:	4aa5      	ldr	r2, [pc, #660]	; (8001458 <Joint_controller+0x320>)
 80011c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	4413      	add	r3, r2
 80011c8:	ed93 7b00 	vldr	d7, [r3]
 80011cc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80011d0:	4aa2      	ldr	r2, [pc, #648]	; (800145c <Joint_controller+0x324>)
 80011d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	4413      	add	r3, r2
 80011d8:	ed83 7b00 	vstr	d7, [r3]
		G_q_r[k] *= 1024;
 80011dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80011e4:	4413      	add	r3, r2
 80011e6:	3b50      	subs	r3, #80	; 0x50
 80011e8:	ed93 7b00 	vldr	d7, [r3]
 80011ec:	ed9f 6b96 	vldr	d6, [pc, #600]	; 8001448 <Joint_controller+0x310>
 80011f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80011f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80011fc:	4413      	add	r3, r2
 80011fe:	3b50      	subs	r3, #80	; 0x50
 8001200:	ed83 7b00 	vstr	d7, [r3]
		G_q_r[k] /= (12.0 - backemf[k])/RESISTANCE[k]*T_CONSTANT[k];
 8001204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800120c:	4413      	add	r3, r2
 800120e:	3b50      	subs	r3, #80	; 0x50
 8001210:	ed93 5b00 	vldr	d5, [r3]
 8001214:	4a91      	ldr	r2, [pc, #580]	; (800145c <Joint_controller+0x324>)
 8001216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	4413      	add	r3, r2
 800121c:	ed93 7b00 	vldr	d7, [r3]
 8001220:	eeb2 6b08 	vmov.f64	d6, #40	; 0x41400000  12.0
 8001224:	ee36 4b47 	vsub.f64	d4, d6, d7
 8001228:	4a8d      	ldr	r2, [pc, #564]	; (8001460 <Joint_controller+0x328>)
 800122a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	4413      	add	r3, r2
 8001230:	ed93 7b00 	vldr	d7, [r3]
 8001234:	ee84 6b07 	vdiv.f64	d6, d4, d7
 8001238:	4a8a      	ldr	r2, [pc, #552]	; (8001464 <Joint_controller+0x32c>)
 800123a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	4413      	add	r3, r2
 8001240:	ed93 7b00 	vldr	d7, [r3]
 8001244:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001248:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800124c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001254:	4413      	add	r3, r2
 8001256:	3b50      	subs	r3, #80	; 0x50
 8001258:	ed83 7b00 	vstr	d7, [r3]
		PWM_val[k] = G_q_r[k] + K_P[k] * (desired_pos[k] - current_angle[k]) - K_V[k] * joint_speed[k];
 800125c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001264:	4413      	add	r3, r2
 8001266:	3b50      	subs	r3, #80	; 0x50
 8001268:	ed93 6b00 	vldr	d6, [r3]
 800126c:	4a7e      	ldr	r2, [pc, #504]	; (8001468 <Joint_controller+0x330>)
 800126e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001274:	ee07 3a90 	vmov	s15, r3
 8001278:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800127c:	4a7b      	ldr	r2, [pc, #492]	; (800146c <Joint_controller+0x334>)
 800127e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	4413      	add	r3, r2
 8001284:	ed93 4b00 	vldr	d4, [r3]
 8001288:	4a71      	ldr	r2, [pc, #452]	; (8001450 <Joint_controller+0x318>)
 800128a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800128c:	00db      	lsls	r3, r3, #3
 800128e:	4413      	add	r3, r2
 8001290:	ed93 7b00 	vldr	d7, [r3]
 8001294:	ee34 7b47 	vsub.f64	d7, d4, d7
 8001298:	ee25 7b07 	vmul.f64	d7, d5, d7
 800129c:	ee36 6b07 	vadd.f64	d6, d6, d7
 80012a0:	4a73      	ldr	r2, [pc, #460]	; (8001470 <Joint_controller+0x338>)
 80012a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a8:	ee07 3a90 	vmov	s15, r3
 80012ac:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80012b0:	4a68      	ldr	r2, [pc, #416]	; (8001454 <Joint_controller+0x31c>)
 80012b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	4413      	add	r3, r2
 80012b8:	ed93 7b00 	vldr	d7, [r3]
 80012bc:	ee25 7b07 	vmul.f64	d7, d5, d7
 80012c0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80012c4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80012c8:	ee17 2a90 	vmov	r2, s15
 80012cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80012d4:	440b      	add	r3, r1
 80012d6:	f843 2c1c 	str.w	r2, [r3, #-28]
		if (PWM_val[k] > 1024){
 80012da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80012e2:	4413      	add	r3, r2
 80012e4:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80012e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012ec:	dd09      	ble.n	8001302 <Joint_controller+0x1ca>
			PWM_val[k] = 1024;
 80012ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80012f6:	4413      	add	r3, r2
 80012f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012fc:	f843 2c1c 	str.w	r2, [r3, #-28]
 8001300:	e011      	b.n	8001326 <Joint_controller+0x1ee>
		}
		else if (PWM_val[k] < -1024){
 8001302:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800130a:	4413      	add	r3, r2
 800130c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8001310:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 8001314:	da07      	bge.n	8001326 <Joint_controller+0x1ee>
			PWM_val[k] = -1024;
 8001316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800131e:	4413      	add	r3, r2
 8001320:	4a54      	ldr	r2, [pc, #336]	; (8001474 <Joint_controller+0x33c>)
 8001322:	f843 2c1c 	str.w	r2, [r3, #-28]
		}

		//set directions
		if (PWM_val[k] < 0){
 8001326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800132e:	4413      	add	r3, r2
 8001330:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8001334:	2b00      	cmp	r3, #0
 8001336:	da29      	bge.n	800138c <Joint_controller+0x254>
			HAL_GPIO_WritePin(Driver_P[k].port, Driver_P[k].pin_num, 0);
 8001338:	4a4f      	ldr	r2, [pc, #316]	; (8001478 <Joint_controller+0x340>)
 800133a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800133c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001340:	4a4d      	ldr	r2, [pc, #308]	; (8001478 <Joint_controller+0x340>)
 8001342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	4413      	add	r3, r2
 8001348:	889b      	ldrh	r3, [r3, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	4619      	mov	r1, r3
 800134e:	f012 fb0b 	bl	8013968 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Driver_N[k].port, Driver_N[k].pin_num, 1);
 8001352:	4a4a      	ldr	r2, [pc, #296]	; (800147c <Joint_controller+0x344>)
 8001354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001356:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800135a:	4a48      	ldr	r2, [pc, #288]	; (800147c <Joint_controller+0x344>)
 800135c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	4413      	add	r3, r2
 8001362:	889b      	ldrh	r3, [r3, #4]
 8001364:	2201      	movs	r2, #1
 8001366:	4619      	mov	r1, r3
 8001368:	f012 fafe 	bl	8013968 <HAL_GPIO_WritePin>
			PWM_val[k] = 0-PWM_val[k];
 800136c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001374:	4413      	add	r3, r2
 8001376:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800137a:	425a      	negs	r2, r3
 800137c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001384:	440b      	add	r3, r1
 8001386:	f843 2c1c 	str.w	r2, [r3, #-28]
 800138a:	e03d      	b.n	8001408 <Joint_controller+0x2d0>
		}
		else if (PWM_val[k] > 0){
 800138c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001394:	4413      	add	r3, r2
 8001396:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800139a:	2b00      	cmp	r3, #0
 800139c:	dd1a      	ble.n	80013d4 <Joint_controller+0x29c>
			HAL_GPIO_WritePin(Driver_P[k].port, Driver_P[k].pin_num, 1);
 800139e:	4a36      	ldr	r2, [pc, #216]	; (8001478 <Joint_controller+0x340>)
 80013a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013a2:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80013a6:	4a34      	ldr	r2, [pc, #208]	; (8001478 <Joint_controller+0x340>)
 80013a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	4413      	add	r3, r2
 80013ae:	889b      	ldrh	r3, [r3, #4]
 80013b0:	2201      	movs	r2, #1
 80013b2:	4619      	mov	r1, r3
 80013b4:	f012 fad8 	bl	8013968 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Driver_N[k].port, Driver_N[k].pin_num, 0);
 80013b8:	4a30      	ldr	r2, [pc, #192]	; (800147c <Joint_controller+0x344>)
 80013ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013bc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80013c0:	4a2e      	ldr	r2, [pc, #184]	; (800147c <Joint_controller+0x344>)
 80013c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	4413      	add	r3, r2
 80013c8:	889b      	ldrh	r3, [r3, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	4619      	mov	r1, r3
 80013ce:	f012 facb 	bl	8013968 <HAL_GPIO_WritePin>
 80013d2:	e019      	b.n	8001408 <Joint_controller+0x2d0>
		}
		else{
			HAL_GPIO_WritePin(Driver_P[k].port, Driver_P[k].pin_num, 0);
 80013d4:	4a28      	ldr	r2, [pc, #160]	; (8001478 <Joint_controller+0x340>)
 80013d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013d8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80013dc:	4a26      	ldr	r2, [pc, #152]	; (8001478 <Joint_controller+0x340>)
 80013de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	4413      	add	r3, r2
 80013e4:	889b      	ldrh	r3, [r3, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	4619      	mov	r1, r3
 80013ea:	f012 fabd 	bl	8013968 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Driver_N[k].port, Driver_N[k].pin_num, 0);
 80013ee:	4a23      	ldr	r2, [pc, #140]	; (800147c <Joint_controller+0x344>)
 80013f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013f2:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80013f6:	4a21      	ldr	r2, [pc, #132]	; (800147c <Joint_controller+0x344>)
 80013f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	4413      	add	r3, r2
 80013fe:	889b      	ldrh	r3, [r3, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	4619      	mov	r1, r3
 8001404:	f012 fab0 	bl	8013968 <HAL_GPIO_WritePin>
	for (k = 0; k < NUM_JOINTS; k++){
 8001408:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800140a:	3301      	adds	r3, #1
 800140c:	657b      	str	r3, [r7, #84]	; 0x54
 800140e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001410:	2b05      	cmp	r3, #5
 8001412:	f77f aec1 	ble.w	8001198 <Joint_controller+0x60>
		}

	}
	PWM1_change_duty_cycle(PWM_val[0], PWM_val[1]);
 8001416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001418:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800141a:	4611      	mov	r1, r2
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff fd23 	bl	8000e68 <PWM1_change_duty_cycle>
	PWM2_change_duty_cycle(PWM_val[2]);
 8001422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fd65 	bl	8000ef4 <PWM2_change_duty_cycle>
	PWM3_change_duty_cycle(PWM_val[3], PWM_val[4], PWM_val[5]);
 800142a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800142c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800142e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fcc7 	bl	8000dc4 <PWM3_change_duty_cycle>
}
 8001436:	bf00      	nop
 8001438:	375c      	adds	r7, #92	; 0x5c
 800143a:	46bd      	mov	sp, r7
 800143c:	bd90      	pop	{r4, r7, pc}
 800143e:	bf00      	nop
 8001440:	51eb851f 	.word	0x51eb851f
 8001444:	c0239eb8 	.word	0xc0239eb8
 8001448:	00000000 	.word	0x00000000
 800144c:	40900000 	.word	0x40900000
 8001450:	24000278 	.word	0x24000278
 8001454:	24000230 	.word	0x24000230
 8001458:	0801f980 	.word	0x0801f980
 800145c:	240002a8 	.word	0x240002a8
 8001460:	0801f9e0 	.word	0x0801f9e0
 8001464:	0801f9b0 	.word	0x0801f9b0
 8001468:	0801f94c 	.word	0x0801f94c
 800146c:	240002d8 	.word	0x240002d8
 8001470:	0801f964 	.word	0x0801f964
 8001474:	fffffc00 	.word	0xfffffc00
 8001478:	24000320 	.word	0x24000320
 800147c:	240004ac 	.word	0x240004ac

08001480 <homing>:

void homing (void){
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
		current_angle[g] = 0;
		motor_steps[g] = 0;
	}*/
	//after everything is finished for homing it will set all coords to 0

	start_state = false;
 8001484:	4b03      	ldr	r3, [pc, #12]	; (8001494 <homing+0x14>)
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]

}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	24000008 	.word	0x24000008

08001498 <StartUp>:
void StartUp(void){
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0

	//spin motors
	PWM1_change_duty_cycle(500, 500);
 800149c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80014a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014a4:	f7ff fce0 	bl	8000e68 <PWM1_change_duty_cycle>
	PWM2_change_duty_cycle(500);
 80014a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014ac:	f7ff fd22 	bl	8000ef4 <PWM2_change_duty_cycle>
	PWM3_change_duty_cycle(500, 500, 0);
 80014b0:	2200      	movs	r2, #0
 80014b2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80014b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014ba:	f7ff fc83 	bl	8000dc4 <PWM3_change_duty_cycle>
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c4:	b590      	push	{r4, r7, lr}
 80014c6:	b0b3      	sub	sp, #204	; 0xcc
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char* msg = "Hello Nucleo Fun!\n\r";
 80014ca:	4ba8      	ldr	r3, [pc, #672]	; (800176c <main+0x2a8>)
 80014cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	char* EOL = "]\n\r";
 80014d0:	4ba7      	ldr	r3, [pc, #668]	; (8001770 <main+0x2ac>)
 80014d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	char* EOJ = ", ";
 80014d6:	4ba7      	ldr	r3, [pc, #668]	; (8001774 <main+0x2b0>)
 80014d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	char* timer_tester = "timed\n\r";
 80014dc:	4ba6      	ldr	r3, [pc, #664]	; (8001778 <main+0x2b4>)
 80014de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	uint32_t  stop;
	uint32_t  delta;
	creal_T G_q_vector[6];

	//setting up pins
	set_up_encoder_pins();
 80014e2:	f7ff fbab 	bl	8000c3c <set_up_encoder_pins>
	set_up_driver_pins();
 80014e6:	f7ff fc09 	bl	8000cfc <set_up_driver_pins>

    for(i = 0; i < NUM_JOINTS; i++){
 80014ea:	2300      	movs	r3, #0
 80014ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80014f0:	e024      	b.n	800153c <main+0x78>
    	val_encoderA [i] = HIGH;
 80014f2:	4aa2      	ldr	r2, [pc, #648]	; (800177c <main+0x2b8>)
 80014f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80014f8:	2101      	movs	r1, #1
 80014fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	val_encoderB [i] = HIGH;
 80014fe:	4aa0      	ldr	r2, [pc, #640]	; (8001780 <main+0x2bc>)
 8001500:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001504:	2101      	movs	r1, #1
 8001506:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	direction [i] = true;
 800150a:	4a9e      	ldr	r2, [pc, #632]	; (8001784 <main+0x2c0>)
 800150c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001510:	4413      	add	r3, r2
 8001512:	2201      	movs	r2, #1
 8001514:	701a      	strb	r2, [r3, #0]
    	desired_pos[i] = test_pos[i];
 8001516:	4a9c      	ldr	r2, [pc, #624]	; (8001788 <main+0x2c4>)
 8001518:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	4413      	add	r3, r2
 8001520:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001524:	4999      	ldr	r1, [pc, #612]	; (800178c <main+0x2c8>)
 8001526:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800152a:	00d2      	lsls	r2, r2, #3
 800152c:	440a      	add	r2, r1
 800152e:	e9c2 3400 	strd	r3, r4, [r2]
    for(i = 0; i < NUM_JOINTS; i++){
 8001532:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001536:	3301      	adds	r3, #1
 8001538:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800153c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001540:	2b05      	cmp	r3, #5
 8001542:	ddd6      	ble.n	80014f2 <main+0x2e>
    }
    Homing.home_set = false;
 8001544:	4b92      	ldr	r3, [pc, #584]	; (8001790 <main+0x2cc>)
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    //for CPU cycle counts
    if (ARM_CM_DWT_CTRL != 0) {        // See if DWT is available
 800154c:	4b91      	ldr	r3, [pc, #580]	; (8001794 <main+0x2d0>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d00e      	beq.n	8001572 <main+0xae>

        ARM_CM_DEMCR      |= 1 << 24;  // Set bit 24
 8001554:	4b90      	ldr	r3, [pc, #576]	; (8001798 <main+0x2d4>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a8f      	ldr	r2, [pc, #572]	; (8001798 <main+0x2d4>)
 800155a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800155e:	6013      	str	r3, [r2, #0]

        ARM_CM_DWT_CYCCNT  = 0;
 8001560:	4b8e      	ldr	r3, [pc, #568]	; (800179c <main+0x2d8>)
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]

        ARM_CM_DWT_CTRL   |= 1 << 0;   // Set bit 0
 8001566:	4b8b      	ldr	r3, [pc, #556]	; (8001794 <main+0x2d0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a8a      	ldr	r2, [pc, #552]	; (8001794 <main+0x2d0>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001572:	f011 fc1d 	bl	8012db0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001576:	f000 f921 	bl	80017bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800157a:	f000 fc79 	bl	8001e70 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800157e:	f000 fc2b 	bl	8001dd8 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8001582:	f000 f9d9 	bl	8001938 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001586:	f000 fa73 	bl	8001a70 <MX_TIM2_Init>
  MX_TIM3_Init();
 800158a:	f000 facb 	bl	8001b24 <MX_TIM3_Init>
  MX_TIM5_Init();
 800158e:	f000 fb3b 	bl	8001c08 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8001592:	f000 fbd5 	bl	8001d40 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8001596:	f01c fb3d 	bl	801dc14 <MX_USB_DEVICE_Init>
  MX_TIM7_Init();
 800159a:	f000 fb91 	bl	8001cc0 <MX_TIM7_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  start_up = !(homing_state[0] && homing_state[1] && homing_state[2] && homing_state[3] && homing_state[4]) && start_state;
 800159e:	4b80      	ldr	r3, [pc, #512]	; (80017a0 <main+0x2dc>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	f083 0301 	eor.w	r3, r3, #1
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d11b      	bne.n	80015e4 <main+0x120>
 80015ac:	4b7c      	ldr	r3, [pc, #496]	; (80017a0 <main+0x2dc>)
 80015ae:	785b      	ldrb	r3, [r3, #1]
 80015b0:	f083 0301 	eor.w	r3, r3, #1
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d114      	bne.n	80015e4 <main+0x120>
 80015ba:	4b79      	ldr	r3, [pc, #484]	; (80017a0 <main+0x2dc>)
 80015bc:	789b      	ldrb	r3, [r3, #2]
 80015be:	f083 0301 	eor.w	r3, r3, #1
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d10d      	bne.n	80015e4 <main+0x120>
 80015c8:	4b75      	ldr	r3, [pc, #468]	; (80017a0 <main+0x2dc>)
 80015ca:	78db      	ldrb	r3, [r3, #3]
 80015cc:	f083 0301 	eor.w	r3, r3, #1
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d106      	bne.n	80015e4 <main+0x120>
 80015d6:	4b72      	ldr	r3, [pc, #456]	; (80017a0 <main+0x2dc>)
 80015d8:	791b      	ldrb	r3, [r3, #4]
 80015da:	f083 0301 	eor.w	r3, r3, #1
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d005      	beq.n	80015f0 <main+0x12c>
 80015e4:	4b6f      	ldr	r3, [pc, #444]	; (80017a4 <main+0x2e0>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <main+0x12c>
 80015ec:	2301      	movs	r3, #1
 80015ee:	e000      	b.n	80015f2 <main+0x12e>
 80015f0:	2300      	movs	r3, #0
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	4b6b      	ldr	r3, [pc, #428]	; (80017a8 <main+0x2e4>)
 80015fa:	701a      	strb	r2, [r3, #0]
	  Homing.home_set = (homing_state[0] && homing_state[1] && homing_state[2] && homing_state[3] && homing_state[4]) && start_state;
 80015fc:	4b68      	ldr	r3, [pc, #416]	; (80017a0 <main+0x2dc>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d015      	beq.n	8001630 <main+0x16c>
 8001604:	4b66      	ldr	r3, [pc, #408]	; (80017a0 <main+0x2dc>)
 8001606:	785b      	ldrb	r3, [r3, #1]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d011      	beq.n	8001630 <main+0x16c>
 800160c:	4b64      	ldr	r3, [pc, #400]	; (80017a0 <main+0x2dc>)
 800160e:	789b      	ldrb	r3, [r3, #2]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d00d      	beq.n	8001630 <main+0x16c>
 8001614:	4b62      	ldr	r3, [pc, #392]	; (80017a0 <main+0x2dc>)
 8001616:	78db      	ldrb	r3, [r3, #3]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d009      	beq.n	8001630 <main+0x16c>
 800161c:	4b60      	ldr	r3, [pc, #384]	; (80017a0 <main+0x2dc>)
 800161e:	791b      	ldrb	r3, [r3, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d005      	beq.n	8001630 <main+0x16c>
 8001624:	4b5f      	ldr	r3, [pc, #380]	; (80017a4 <main+0x2e0>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <main+0x16c>
 800162c:	2301      	movs	r3, #1
 800162e:	e000      	b.n	8001632 <main+0x16e>
 8001630:	2300      	movs	r3, #0
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	b2da      	uxtb	r2, r3
 8001638:	4b55      	ldr	r3, [pc, #340]	; (8001790 <main+0x2cc>)
 800163a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  if (Homing.home_set){
 800163e:	4b54      	ldr	r3, [pc, #336]	; (8001790 <main+0x2cc>)
 8001640:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001644:	2b00      	cmp	r3, #0
 8001646:	d002      	beq.n	800164e <main+0x18a>
		  homing();
 8001648:	f7ff ff1a 	bl	8001480 <homing>
		  break;
 800164c:	e087      	b.n	800175e <main+0x29a>
	  }
	  else if (start_up){
 800164e:	4b56      	ldr	r3, [pc, #344]	; (80017a8 <main+0x2e4>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d002      	beq.n	800165c <main+0x198>
		  StartUp();
 8001656:	f7ff ff1f 	bl	8001498 <StartUp>
		  break;
 800165a:	e080      	b.n	800175e <main+0x29a>
	  }
	  //printf(msg);
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 800165c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001660:	4852      	ldr	r0, [pc, #328]	; (80017ac <main+0x2e8>)
 8001662:	f012 f969 	bl	8013938 <HAL_GPIO_ReadPin>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d05a      	beq.n	8001722 <main+0x25e>
		  itoa(motor_steps[0], one_motor, 10);
 800166c:	4b50      	ldr	r3, [pc, #320]	; (80017b0 <main+0x2ec>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8001674:	220a      	movs	r2, #10
 8001676:	4618      	mov	r0, r3
 8001678:	f01d f83c 	bl	801e6f4 <itoa>
		  strcpy(print_string, one_motor);
 800167c:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8001680:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001684:	4611      	mov	r1, r2
 8001686:	4618      	mov	r0, r3
 8001688:	f01d f915 	bl	801e8b6 <strcpy>
		  for (i = 1; i < NUM_JOINTS; i++){
 800168c:	2301      	movs	r3, #1
 800168e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001692:	e01e      	b.n	80016d2 <main+0x20e>
			  itoa(motor_steps[i], one_motor, 10);
 8001694:	4a46      	ldr	r2, [pc, #280]	; (80017b0 <main+0x2ec>)
 8001696:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800169a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800169e:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 80016a2:	220a      	movs	r2, #10
 80016a4:	4618      	mov	r0, r3
 80016a6:	f01d f825 	bl	801e6f4 <itoa>
			  strcat(print_string, EOJ);
 80016aa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80016ae:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80016b2:	4618      	mov	r0, r3
 80016b4:	f01d f8f0 	bl	801e898 <strcat>
			  strcat(print_string, one_motor);
 80016b8:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80016bc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80016c0:	4611      	mov	r1, r2
 80016c2:	4618      	mov	r0, r3
 80016c4:	f01d f8e8 	bl	801e898 <strcat>
		  for (i = 1; i < NUM_JOINTS; i++){
 80016c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80016cc:	3301      	adds	r3, #1
 80016ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80016d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80016d6:	2b05      	cmp	r3, #5
 80016d8:	dddc      	ble.n	8001694 <main+0x1d0>
		  }
		  strcat(print_string, EOL);
 80016da:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80016de:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80016e2:	4618      	mov	r0, r3
 80016e4:	f01d f8d8 	bl	801e898 <strcat>
		  CDC_Transmit_FS((uint8_t*)"motor is at [", strlen(msg));
 80016e8:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80016ec:	f7fe fdf4 	bl	80002d8 <strlen>
 80016f0:	4603      	mov	r3, r0
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	4619      	mov	r1, r3
 80016f6:	482f      	ldr	r0, [pc, #188]	; (80017b4 <main+0x2f0>)
 80016f8:	f01c fb84 	bl	801de04 <CDC_Transmit_FS>
		  HAL_Delay(2);
 80016fc:	2002      	movs	r0, #2
 80016fe:	f011 fbe9 	bl	8012ed4 <HAL_Delay>
		  CDC_Transmit_FS((uint8_t*)print_string, strlen(print_string));
 8001702:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001706:	4618      	mov	r0, r3
 8001708:	f7fe fde6 	bl	80002d8 <strlen>
 800170c:	4603      	mov	r3, r0
 800170e:	b29a      	uxth	r2, r3
 8001710:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001714:	4611      	mov	r1, r2
 8001716:	4618      	mov	r0, r3
 8001718:	f01c fb74 	bl	801de04 <CDC_Transmit_FS>
		  HAL_Delay(2);
 800171c:	2002      	movs	r0, #2
 800171e:	f011 fbd9 	bl	8012ed4 <HAL_Delay>
	  }
	  if (need_control){
 8001722:	4b25      	ldr	r3, [pc, #148]	; (80017b8 <main+0x2f4>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b00      	cmp	r3, #0
 800172a:	f43f af38 	beq.w	800159e <main+0xda>
		  start = ARM_CM_DWT_CYCCNT;
 800172e:	4b1b      	ldr	r3, [pc, #108]	; (800179c <main+0x2d8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		  Joint_controller(false, G_q_vector);
 8001736:	463b      	mov	r3, r7
 8001738:	4619      	mov	r1, r3
 800173a:	2000      	movs	r0, #0
 800173c:	f7ff fcfc 	bl	8001138 <Joint_controller>
		  stop  = ARM_CM_DWT_CYCCNT;
 8001740:	4b16      	ldr	r3, [pc, #88]	; (800179c <main+0x2d8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		  delta = stop - start;
 8001748:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800174c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		  need_control = false;
 8001756:	4b18      	ldr	r3, [pc, #96]	; (80017b8 <main+0x2f4>)
 8001758:	2200      	movs	r2, #0
 800175a:	701a      	strb	r2, [r3, #0]
	  start_up = !(homing_state[0] && homing_state[1] && homing_state[2] && homing_state[3] && homing_state[4]) && start_state;
 800175c:	e71f      	b.n	800159e <main+0xda>
	  }

	  //HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 100);
	  //CDC_Transmit_FS(msg, sizeof(msg));
  }
  G_q_terminate();
 800175e:	f011 fa37 	bl	8012bd0 <G_q_terminate>
 8001762:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8001764:	4618      	mov	r0, r3
 8001766:	37cc      	adds	r7, #204	; 0xcc
 8001768:	46bd      	mov	sp, r7
 800176a:	bd90      	pop	{r4, r7, pc}
 800176c:	0801f8c0 	.word	0x0801f8c0
 8001770:	0801f8d4 	.word	0x0801f8d4
 8001774:	0801f8d8 	.word	0x0801f8d8
 8001778:	0801f8dc 	.word	0x0801f8dc
 800177c:	240003dc 	.word	0x240003dc
 8001780:	2400051c 	.word	0x2400051c
 8001784:	24000000 	.word	0x24000000
 8001788:	0801fa10 	.word	0x0801fa10
 800178c:	240002d8 	.word	0x240002d8
 8001790:	24000600 	.word	0x24000600
 8001794:	e0001000 	.word	0xe0001000
 8001798:	e000edfc 	.word	0xe000edfc
 800179c:	e0001004 	.word	0xe0001004
 80017a0:	24000308 	.word	0x24000308
 80017a4:	24000008 	.word	0x24000008
 80017a8:	24000007 	.word	0x24000007
 80017ac:	58020800 	.word	0x58020800
 80017b0:	24000214 	.word	0x24000214
 80017b4:	0801f8e4 	.word	0x0801f8e4
 80017b8:	24000006 	.word	0x24000006

080017bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b0cc      	sub	sp, #304	; 0x130
 80017c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017c2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80017c6:	224c      	movs	r2, #76	; 0x4c
 80017c8:	2100      	movs	r1, #0
 80017ca:	4618      	mov	r0, r3
 80017cc:	f01c ffa4 	bl	801e718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017d0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80017d4:	2220      	movs	r2, #32
 80017d6:	2100      	movs	r1, #0
 80017d8:	4618      	mov	r0, r3
 80017da:	f01c ff9d 	bl	801e718 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017de:	f107 0308 	add.w	r3, r7, #8
 80017e2:	4618      	mov	r0, r3
 80017e4:	23bc      	movs	r3, #188	; 0xbc
 80017e6:	461a      	mov	r2, r3
 80017e8:	2100      	movs	r1, #0
 80017ea:	f01c ff95 	bl	801e718 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80017ee:	2002      	movs	r0, #2
 80017f0:	f013 fac8 	bl	8014d84 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017f4:	1d3b      	adds	r3, r7, #4
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	4b4c      	ldr	r3, [pc, #304]	; (800192c <SystemClock_Config+0x170>)
 80017fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fe:	4a4b      	ldr	r2, [pc, #300]	; (800192c <SystemClock_Config+0x170>)
 8001800:	f023 0301 	bic.w	r3, r3, #1
 8001804:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001806:	4b49      	ldr	r3, [pc, #292]	; (800192c <SystemClock_Config+0x170>)
 8001808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180a:	f003 0201 	and.w	r2, r3, #1
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	4b47      	ldr	r3, [pc, #284]	; (8001930 <SystemClock_Config+0x174>)
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	4a46      	ldr	r2, [pc, #280]	; (8001930 <SystemClock_Config+0x174>)
 8001818:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800181c:	6193      	str	r3, [r2, #24]
 800181e:	4b44      	ldr	r3, [pc, #272]	; (8001930 <SystemClock_Config+0x174>)
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8001826:	1d3b      	adds	r3, r7, #4
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800182e:	bf00      	nop
 8001830:	4b3f      	ldr	r3, [pc, #252]	; (8001930 <SystemClock_Config+0x174>)
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001838:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800183c:	d1f8      	bne.n	8001830 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800183e:	2301      	movs	r3, #1
 8001840:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001844:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001848:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800184c:	2302      	movs	r3, #2
 800184e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001852:	2302      	movs	r3, #2
 8001854:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001858:	2301      	movs	r3, #1
 800185a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 54;
 800185e:	2336      	movs	r3, #54	; 0x36
 8001860:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001864:	2302      	movs	r3, #2
 8001866:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800186a:	2309      	movs	r3, #9
 800186c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001870:	2302      	movs	r3, #2
 8001872:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001876:	230c      	movs	r3, #12
 8001878:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800187c:	2300      	movs	r3, #0
 800187e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001888:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800188c:	4618      	mov	r0, r3
 800188e:	f013 fac3 	bl	8014e18 <HAL_RCC_OscConfig>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8001898:	f000 fd34 	bl	8002304 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800189c:	233f      	movs	r3, #63	; 0x3f
 800189e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018a2:	2303      	movs	r3, #3
 80018a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80018a8:	2300      	movs	r3, #0
 80018aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80018ae:	2300      	movs	r3, #0
 80018b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80018b4:	2340      	movs	r3, #64	; 0x40
 80018b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80018ba:	2340      	movs	r3, #64	; 0x40
 80018bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80018c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80018c8:	2340      	movs	r3, #64	; 0x40
 80018ca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80018ce:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80018d2:	2103      	movs	r1, #3
 80018d4:	4618      	mov	r0, r3
 80018d6:	f013 fe77 	bl	80155c8 <HAL_RCC_ClockConfig>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <SystemClock_Config+0x128>
  {
    Error_Handler();
 80018e0:	f000 fd10 	bl	8002304 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART1
 80018e4:	f107 0308 	add.w	r3, r7, #8
 80018e8:	4a12      	ldr	r2, [pc, #72]	; (8001934 <SystemClock_Config+0x178>)
 80018ea:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80018ec:	f107 0308 	add.w	r3, r7, #8
 80018f0:	2200      	movs	r2, #0
 80018f2:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80018f4:	f107 0308 	add.w	r3, r7, #8
 80018f8:	2200      	movs	r2, #0
 80018fa:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80018fc:	f107 0308 	add.w	r3, r7, #8
 8001900:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001904:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001908:	f107 0308 	add.w	r3, r7, #8
 800190c:	4618      	mov	r0, r3
 800190e:	f014 f9df 	bl	8015cd0 <HAL_RCCEx_PeriphCLKConfig>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <SystemClock_Config+0x160>
  {
    Error_Handler();
 8001918:	f000 fcf4 	bl	8002304 <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 800191c:	f013 fa6c 	bl	8014df8 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8001920:	bf00      	nop
 8001922:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	58000400 	.word	0x58000400
 8001930:	58024800 	.word	0x58024800
 8001934:	00040003 	.word	0x00040003

08001938 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b096      	sub	sp, #88	; 0x58
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800193e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]
 8001948:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800194a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]
 8001958:	611a      	str	r2, [r3, #16]
 800195a:	615a      	str	r2, [r3, #20]
 800195c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	222c      	movs	r2, #44	; 0x2c
 8001962:	2100      	movs	r1, #0
 8001964:	4618      	mov	r0, r3
 8001966:	f01c fed7 	bl	801e718 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800196a:	4b3f      	ldr	r3, [pc, #252]	; (8001a68 <MX_TIM1_Init+0x130>)
 800196c:	4a3f      	ldr	r2, [pc, #252]	; (8001a6c <MX_TIM1_Init+0x134>)
 800196e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1080-1;
 8001970:	4b3d      	ldr	r3, [pc, #244]	; (8001a68 <MX_TIM1_Init+0x130>)
 8001972:	f240 4237 	movw	r2, #1079	; 0x437
 8001976:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001978:	4b3b      	ldr	r3, [pc, #236]	; (8001a68 <MX_TIM1_Init+0x130>)
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024-1;
 800197e:	4b3a      	ldr	r3, [pc, #232]	; (8001a68 <MX_TIM1_Init+0x130>)
 8001980:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001984:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001986:	4b38      	ldr	r3, [pc, #224]	; (8001a68 <MX_TIM1_Init+0x130>)
 8001988:	2200      	movs	r2, #0
 800198a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800198c:	4b36      	ldr	r3, [pc, #216]	; (8001a68 <MX_TIM1_Init+0x130>)
 800198e:	2200      	movs	r2, #0
 8001990:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001992:	4b35      	ldr	r3, [pc, #212]	; (8001a68 <MX_TIM1_Init+0x130>)
 8001994:	2200      	movs	r2, #0
 8001996:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001998:	4833      	ldr	r0, [pc, #204]	; (8001a68 <MX_TIM1_Init+0x130>)
 800199a:	f015 fcdf 	bl	801735c <HAL_TIM_PWM_Init>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 80019a4:	f000 fcae 	bl	8002304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a8:	2300      	movs	r3, #0
 80019aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019ac:	2300      	movs	r3, #0
 80019ae:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b0:	2300      	movs	r3, #0
 80019b2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019b8:	4619      	mov	r1, r3
 80019ba:	482b      	ldr	r0, [pc, #172]	; (8001a68 <MX_TIM1_Init+0x130>)
 80019bc:	f016 fb40 	bl	8018040 <HAL_TIMEx_MasterConfigSynchronization>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80019c6:	f000 fc9d 	bl	8002304 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ca:	2360      	movs	r3, #96	; 0x60
 80019cc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019d2:	2300      	movs	r3, #0
 80019d4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019d6:	2300      	movs	r3, #0
 80019d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019da:	2300      	movs	r3, #0
 80019dc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019de:	2300      	movs	r3, #0
 80019e0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019e2:	2300      	movs	r3, #0
 80019e4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019ea:	2204      	movs	r2, #4
 80019ec:	4619      	mov	r1, r3
 80019ee:	481e      	ldr	r0, [pc, #120]	; (8001a68 <MX_TIM1_Init+0x130>)
 80019f0:	f015 fe58 	bl	80176a4 <HAL_TIM_PWM_ConfigChannel>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80019fa:	f000 fc83 	bl	8002304 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a02:	2208      	movs	r2, #8
 8001a04:	4619      	mov	r1, r3
 8001a06:	4818      	ldr	r0, [pc, #96]	; (8001a68 <MX_TIM1_Init+0x130>)
 8001a08:	f015 fe4c 	bl	80176a4 <HAL_TIM_PWM_ConfigChannel>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8001a12:	f000 fc77 	bl	8002304 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a2e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a46:	1d3b      	adds	r3, r7, #4
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4807      	ldr	r0, [pc, #28]	; (8001a68 <MX_TIM1_Init+0x130>)
 8001a4c:	f016 fb80 	bl	8018150 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 8001a56:	f000 fc55 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a5a:	4803      	ldr	r0, [pc, #12]	; (8001a68 <MX_TIM1_Init+0x130>)
 8001a5c:	f000 fd02 	bl	8002464 <HAL_TIM_MspPostInit>

}
 8001a60:	bf00      	nop
 8001a62:	3758      	adds	r7, #88	; 0x58
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	240005c0 	.word	0x240005c0
 8001a6c:	40010000 	.word	0x40010000

08001a70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08a      	sub	sp, #40	; 0x28
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a76:	f107 031c 	add.w	r3, r7, #28
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a82:	463b      	mov	r3, r7
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]
 8001a90:	615a      	str	r2, [r3, #20]
 8001a92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a94:	4b22      	ldr	r3, [pc, #136]	; (8001b20 <MX_TIM2_Init+0xb0>)
 8001a96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1080-1;
 8001a9c:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <MX_TIM2_Init+0xb0>)
 8001a9e:	f240 4237 	movw	r2, #1079	; 0x437
 8001aa2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa4:	4b1e      	ldr	r3, [pc, #120]	; (8001b20 <MX_TIM2_Init+0xb0>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024-1;
 8001aaa:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <MX_TIM2_Init+0xb0>)
 8001aac:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001ab0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab2:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <MX_TIM2_Init+0xb0>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab8:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <MX_TIM2_Init+0xb0>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001abe:	4818      	ldr	r0, [pc, #96]	; (8001b20 <MX_TIM2_Init+0xb0>)
 8001ac0:	f015 fc4c 	bl	801735c <HAL_TIM_PWM_Init>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8001aca:	f000 fc1b 	bl	8002304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ad6:	f107 031c 	add.w	r3, r7, #28
 8001ada:	4619      	mov	r1, r3
 8001adc:	4810      	ldr	r0, [pc, #64]	; (8001b20 <MX_TIM2_Init+0xb0>)
 8001ade:	f016 faaf 	bl	8018040 <HAL_TIMEx_MasterConfigSynchronization>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001ae8:	f000 fc0c 	bl	8002304 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aec:	2360      	movs	r3, #96	; 0x60
 8001aee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001af8:	2300      	movs	r3, #0
 8001afa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001afc:	463b      	mov	r3, r7
 8001afe:	2200      	movs	r2, #0
 8001b00:	4619      	mov	r1, r3
 8001b02:	4807      	ldr	r0, [pc, #28]	; (8001b20 <MX_TIM2_Init+0xb0>)
 8001b04:	f015 fdce 	bl	80176a4 <HAL_TIM_PWM_ConfigChannel>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001b0e:	f000 fbf9 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b12:	4803      	ldr	r0, [pc, #12]	; (8001b20 <MX_TIM2_Init+0xb0>)
 8001b14:	f000 fca6 	bl	8002464 <HAL_TIM_MspPostInit>

}
 8001b18:	bf00      	nop
 8001b1a:	3728      	adds	r7, #40	; 0x28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	24000638 	.word	0x24000638

08001b24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08a      	sub	sp, #40	; 0x28
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b2a:	f107 031c 	add.w	r3, r7, #28
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	605a      	str	r2, [r3, #4]
 8001b34:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b36:	463b      	mov	r3, r7
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
 8001b44:	615a      	str	r2, [r3, #20]
 8001b46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b48:	4b2d      	ldr	r3, [pc, #180]	; (8001c00 <MX_TIM3_Init+0xdc>)
 8001b4a:	4a2e      	ldr	r2, [pc, #184]	; (8001c04 <MX_TIM3_Init+0xe0>)
 8001b4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1080-1;
 8001b4e:	4b2c      	ldr	r3, [pc, #176]	; (8001c00 <MX_TIM3_Init+0xdc>)
 8001b50:	f240 4237 	movw	r2, #1079	; 0x437
 8001b54:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b56:	4b2a      	ldr	r3, [pc, #168]	; (8001c00 <MX_TIM3_Init+0xdc>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1024-1;
 8001b5c:	4b28      	ldr	r3, [pc, #160]	; (8001c00 <MX_TIM3_Init+0xdc>)
 8001b5e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001b62:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b64:	4b26      	ldr	r3, [pc, #152]	; (8001c00 <MX_TIM3_Init+0xdc>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6a:	4b25      	ldr	r3, [pc, #148]	; (8001c00 <MX_TIM3_Init+0xdc>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b70:	4823      	ldr	r0, [pc, #140]	; (8001c00 <MX_TIM3_Init+0xdc>)
 8001b72:	f015 fbf3 	bl	801735c <HAL_TIM_PWM_Init>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8001b7c:	f000 fbc2 	bl	8002304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b80:	2300      	movs	r3, #0
 8001b82:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b84:	2300      	movs	r3, #0
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b88:	f107 031c 	add.w	r3, r7, #28
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	481c      	ldr	r0, [pc, #112]	; (8001c00 <MX_TIM3_Init+0xdc>)
 8001b90:	f016 fa56 	bl	8018040 <HAL_TIMEx_MasterConfigSynchronization>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8001b9a:	f000 fbb3 	bl	8002304 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b9e:	2360      	movs	r3, #96	; 0x60
 8001ba0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bae:	463b      	mov	r3, r7
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4812      	ldr	r0, [pc, #72]	; (8001c00 <MX_TIM3_Init+0xdc>)
 8001bb6:	f015 fd75 	bl	80176a4 <HAL_TIM_PWM_ConfigChannel>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001bc0:	f000 fba0 	bl	8002304 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bc4:	463b      	mov	r3, r7
 8001bc6:	2204      	movs	r2, #4
 8001bc8:	4619      	mov	r1, r3
 8001bca:	480d      	ldr	r0, [pc, #52]	; (8001c00 <MX_TIM3_Init+0xdc>)
 8001bcc:	f015 fd6a 	bl	80176a4 <HAL_TIM_PWM_ConfigChannel>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8001bd6:	f000 fb95 	bl	8002304 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001bda:	463b      	mov	r3, r7
 8001bdc:	220c      	movs	r2, #12
 8001bde:	4619      	mov	r1, r3
 8001be0:	4807      	ldr	r0, [pc, #28]	; (8001c00 <MX_TIM3_Init+0xdc>)
 8001be2:	f015 fd5f 	bl	80176a4 <HAL_TIM_PWM_ConfigChannel>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8001bec:	f000 fb8a 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001bf0:	4803      	ldr	r0, [pc, #12]	; (8001c00 <MX_TIM3_Init+0xdc>)
 8001bf2:	f000 fc37 	bl	8002464 <HAL_TIM_MspPostInit>

}
 8001bf6:	bf00      	nop
 8001bf8:	3728      	adds	r7, #40	; 0x28
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	240004dc 	.word	0x240004dc
 8001c04:	40000400 	.word	0x40000400

08001c08 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	; 0x28
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c0e:	f107 031c 	add.w	r3, r7, #28
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	605a      	str	r2, [r3, #4]
 8001c18:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c1a:	463b      	mov	r3, r7
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]
 8001c28:	615a      	str	r2, [r3, #20]
 8001c2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001c2c:	4b22      	ldr	r3, [pc, #136]	; (8001cb8 <MX_TIM5_Init+0xb0>)
 8001c2e:	4a23      	ldr	r2, [pc, #140]	; (8001cbc <MX_TIM5_Init+0xb4>)
 8001c30:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1080-1;
 8001c32:	4b21      	ldr	r3, [pc, #132]	; (8001cb8 <MX_TIM5_Init+0xb0>)
 8001c34:	f240 4237 	movw	r2, #1079	; 0x437
 8001c38:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c3a:	4b1f      	ldr	r3, [pc, #124]	; (8001cb8 <MX_TIM5_Init+0xb0>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024-1;
 8001c40:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <MX_TIM5_Init+0xb0>)
 8001c42:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001c46:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c48:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <MX_TIM5_Init+0xb0>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c4e:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <MX_TIM5_Init+0xb0>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001c54:	4818      	ldr	r0, [pc, #96]	; (8001cb8 <MX_TIM5_Init+0xb0>)
 8001c56:	f015 fb81 	bl	801735c <HAL_TIM_PWM_Init>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM5_Init+0x5c>
  {
    Error_Handler();
 8001c60:	f000 fb50 	bl	8002304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c64:	2300      	movs	r3, #0
 8001c66:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c6c:	f107 031c 	add.w	r3, r7, #28
 8001c70:	4619      	mov	r1, r3
 8001c72:	4811      	ldr	r0, [pc, #68]	; (8001cb8 <MX_TIM5_Init+0xb0>)
 8001c74:	f016 f9e4 	bl	8018040 <HAL_TIMEx_MasterConfigSynchronization>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 8001c7e:	f000 fb41 	bl	8002304 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c82:	2360      	movs	r3, #96	; 0x60
 8001c84:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c92:	463b      	mov	r3, r7
 8001c94:	220c      	movs	r2, #12
 8001c96:	4619      	mov	r1, r3
 8001c98:	4807      	ldr	r0, [pc, #28]	; (8001cb8 <MX_TIM5_Init+0xb0>)
 8001c9a:	f015 fd03 	bl	80176a4 <HAL_TIM_PWM_ConfigChannel>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8001ca4:	f000 fb2e 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001ca8:	4803      	ldr	r0, [pc, #12]	; (8001cb8 <MX_TIM5_Init+0xb0>)
 8001caa:	f000 fbdb 	bl	8002464 <HAL_TIM_MspPostInit>

}
 8001cae:	bf00      	nop
 8001cb0:	3728      	adds	r7, #40	; 0x28
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	2400046c 	.word	0x2400046c
 8001cbc:	40000c00 	.word	0x40000c00

08001cc0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001cd0:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <MX_TIM7_Init+0x78>)
 8001cd2:	4a1a      	ldr	r2, [pc, #104]	; (8001d3c <MX_TIM7_Init+0x7c>)
 8001cd4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1080-1;
 8001cd6:	4b18      	ldr	r3, [pc, #96]	; (8001d38 <MX_TIM7_Init+0x78>)
 8001cd8:	f240 4237 	movw	r2, #1079	; 0x437
 8001cdc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cde:	4b16      	ldr	r3, [pc, #88]	; (8001d38 <MX_TIM7_Init+0x78>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8001ce4:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <MX_TIM7_Init+0x78>)
 8001ce6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cea:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cec:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <MX_TIM7_Init+0x78>)
 8001cee:	2280      	movs	r2, #128	; 0x80
 8001cf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001cf2:	4811      	ldr	r0, [pc, #68]	; (8001d38 <MX_TIM7_Init+0x78>)
 8001cf4:	f015 fadc 	bl	80172b0 <HAL_TIM_Base_Init>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001cfe:	f000 fb01 	bl	8002304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d02:	2300      	movs	r3, #0
 8001d04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001d0a:	1d3b      	adds	r3, r7, #4
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	480a      	ldr	r0, [pc, #40]	; (8001d38 <MX_TIM7_Init+0x78>)
 8001d10:	f016 f996 	bl	8018040 <HAL_TIMEx_MasterConfigSynchronization>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001d1a:	f000 faf3 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  /*##-2- Start the TIM Base generation in interrupt mode ####################*/
  if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK)
 8001d1e:	4806      	ldr	r0, [pc, #24]	; (8001d38 <MX_TIM7_Init+0x78>)
 8001d20:	f015 faf2 	bl	8017308 <HAL_TIM_Base_Start_IT>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_TIM7_Init+0x6e>
  {
    /* Starting Error */
    Error_Handler();
 8001d2a:	f000 faeb 	bl	8002304 <Error_Handler>
  }
  /* USER CODE END TIM7_Init 2 */

}
 8001d2e:	bf00      	nop
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	24000678 	.word	0x24000678
 8001d3c:	40001400 	.word	0x40001400

08001d40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d44:	4b22      	ldr	r3, [pc, #136]	; (8001dd0 <MX_USART1_UART_Init+0x90>)
 8001d46:	4a23      	ldr	r2, [pc, #140]	; (8001dd4 <MX_USART1_UART_Init+0x94>)
 8001d48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001d4a:	4b21      	ldr	r3, [pc, #132]	; (8001dd0 <MX_USART1_UART_Init+0x90>)
 8001d4c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d52:	4b1f      	ldr	r3, [pc, #124]	; (8001dd0 <MX_USART1_UART_Init+0x90>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d58:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <MX_USART1_UART_Init+0x90>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d5e:	4b1c      	ldr	r3, [pc, #112]	; (8001dd0 <MX_USART1_UART_Init+0x90>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d64:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <MX_USART1_UART_Init+0x90>)
 8001d66:	220c      	movs	r2, #12
 8001d68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d6a:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <MX_USART1_UART_Init+0x90>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d70:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <MX_USART1_UART_Init+0x90>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d76:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <MX_USART1_UART_Init+0x90>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d7c:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <MX_USART1_UART_Init+0x90>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d82:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <MX_USART1_UART_Init+0x90>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d88:	4811      	ldr	r0, [pc, #68]	; (8001dd0 <MX_USART1_UART_Init+0x90>)
 8001d8a:	f016 fa7d 	bl	8018288 <HAL_UART_Init>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001d94:	f000 fab6 	bl	8002304 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d98:	2100      	movs	r1, #0
 8001d9a:	480d      	ldr	r0, [pc, #52]	; (8001dd0 <MX_USART1_UART_Init+0x90>)
 8001d9c:	f018 ffeb 	bl	801ad76 <HAL_UARTEx_SetTxFifoThreshold>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001da6:	f000 faad 	bl	8002304 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001daa:	2100      	movs	r1, #0
 8001dac:	4808      	ldr	r0, [pc, #32]	; (8001dd0 <MX_USART1_UART_Init+0x90>)
 8001dae:	f019 f820 	bl	801adf2 <HAL_UARTEx_SetRxFifoThreshold>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001db8:	f000 faa4 	bl	8002304 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001dbc:	4804      	ldr	r0, [pc, #16]	; (8001dd0 <MX_USART1_UART_Init+0x90>)
 8001dbe:	f018 ffa1 	bl	801ad04 <HAL_UARTEx_DisableFifoMode>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001dc8:	f000 fa9c 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001dcc:	bf00      	nop
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	24000534 	.word	0x24000534
 8001dd4:	40011000 	.word	0x40011000

08001dd8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ddc:	4b22      	ldr	r3, [pc, #136]	; (8001e68 <MX_USART3_UART_Init+0x90>)
 8001dde:	4a23      	ldr	r2, [pc, #140]	; (8001e6c <MX_USART3_UART_Init+0x94>)
 8001de0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001de2:	4b21      	ldr	r3, [pc, #132]	; (8001e68 <MX_USART3_UART_Init+0x90>)
 8001de4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001de8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001dea:	4b1f      	ldr	r3, [pc, #124]	; (8001e68 <MX_USART3_UART_Init+0x90>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001df0:	4b1d      	ldr	r3, [pc, #116]	; (8001e68 <MX_USART3_UART_Init+0x90>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001df6:	4b1c      	ldr	r3, [pc, #112]	; (8001e68 <MX_USART3_UART_Init+0x90>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001dfc:	4b1a      	ldr	r3, [pc, #104]	; (8001e68 <MX_USART3_UART_Init+0x90>)
 8001dfe:	220c      	movs	r2, #12
 8001e00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e02:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <MX_USART3_UART_Init+0x90>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e08:	4b17      	ldr	r3, [pc, #92]	; (8001e68 <MX_USART3_UART_Init+0x90>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e0e:	4b16      	ldr	r3, [pc, #88]	; (8001e68 <MX_USART3_UART_Init+0x90>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e14:	4b14      	ldr	r3, [pc, #80]	; (8001e68 <MX_USART3_UART_Init+0x90>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e1a:	4b13      	ldr	r3, [pc, #76]	; (8001e68 <MX_USART3_UART_Init+0x90>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e20:	4811      	ldr	r0, [pc, #68]	; (8001e68 <MX_USART3_UART_Init+0x90>)
 8001e22:	f016 fa31 	bl	8018288 <HAL_UART_Init>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001e2c:	f000 fa6a 	bl	8002304 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e30:	2100      	movs	r1, #0
 8001e32:	480d      	ldr	r0, [pc, #52]	; (8001e68 <MX_USART3_UART_Init+0x90>)
 8001e34:	f018 ff9f 	bl	801ad76 <HAL_UARTEx_SetTxFifoThreshold>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001e3e:	f000 fa61 	bl	8002304 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e42:	2100      	movs	r1, #0
 8001e44:	4808      	ldr	r0, [pc, #32]	; (8001e68 <MX_USART3_UART_Init+0x90>)
 8001e46:	f018 ffd4 	bl	801adf2 <HAL_UARTEx_SetRxFifoThreshold>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001e50:	f000 fa58 	bl	8002304 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001e54:	4804      	ldr	r0, [pc, #16]	; (8001e68 <MX_USART3_UART_Init+0x90>)
 8001e56:	f018 ff55 	bl	801ad04 <HAL_UARTEx_DisableFifoMode>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001e60:	f000 fa50 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	24000350 	.word	0x24000350
 8001e6c:	40004800 	.word	0x40004800

08001e70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08e      	sub	sp, #56	; 0x38
 8001e74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	609a      	str	r2, [r3, #8]
 8001e82:	60da      	str	r2, [r3, #12]
 8001e84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e86:	4bbe      	ldr	r3, [pc, #760]	; (8002180 <MX_GPIO_Init+0x310>)
 8001e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e8c:	4abc      	ldr	r2, [pc, #752]	; (8002180 <MX_GPIO_Init+0x310>)
 8001e8e:	f043 0310 	orr.w	r3, r3, #16
 8001e92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e96:	4bba      	ldr	r3, [pc, #744]	; (8002180 <MX_GPIO_Init+0x310>)
 8001e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e9c:	f003 0310 	and.w	r3, r3, #16
 8001ea0:	623b      	str	r3, [r7, #32]
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea4:	4bb6      	ldr	r3, [pc, #728]	; (8002180 <MX_GPIO_Init+0x310>)
 8001ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eaa:	4ab5      	ldr	r2, [pc, #724]	; (8002180 <MX_GPIO_Init+0x310>)
 8001eac:	f043 0304 	orr.w	r3, r3, #4
 8001eb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eb4:	4bb2      	ldr	r3, [pc, #712]	; (8002180 <MX_GPIO_Init+0x310>)
 8001eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eba:	f003 0304 	and.w	r3, r3, #4
 8001ebe:	61fb      	str	r3, [r7, #28]
 8001ec0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ec2:	4baf      	ldr	r3, [pc, #700]	; (8002180 <MX_GPIO_Init+0x310>)
 8001ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ec8:	4aad      	ldr	r2, [pc, #692]	; (8002180 <MX_GPIO_Init+0x310>)
 8001eca:	f043 0320 	orr.w	r3, r3, #32
 8001ece:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ed2:	4bab      	ldr	r3, [pc, #684]	; (8002180 <MX_GPIO_Init+0x310>)
 8001ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ed8:	f003 0320 	and.w	r3, r3, #32
 8001edc:	61bb      	str	r3, [r7, #24]
 8001ede:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ee0:	4ba7      	ldr	r3, [pc, #668]	; (8002180 <MX_GPIO_Init+0x310>)
 8001ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee6:	4aa6      	ldr	r2, [pc, #664]	; (8002180 <MX_GPIO_Init+0x310>)
 8001ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ef0:	4ba3      	ldr	r3, [pc, #652]	; (8002180 <MX_GPIO_Init+0x310>)
 8001ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efa:	617b      	str	r3, [r7, #20]
 8001efc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efe:	4ba0      	ldr	r3, [pc, #640]	; (8002180 <MX_GPIO_Init+0x310>)
 8001f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f04:	4a9e      	ldr	r2, [pc, #632]	; (8002180 <MX_GPIO_Init+0x310>)
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f0e:	4b9c      	ldr	r3, [pc, #624]	; (8002180 <MX_GPIO_Init+0x310>)
 8001f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f1c:	4b98      	ldr	r3, [pc, #608]	; (8002180 <MX_GPIO_Init+0x310>)
 8001f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f22:	4a97      	ldr	r2, [pc, #604]	; (8002180 <MX_GPIO_Init+0x310>)
 8001f24:	f043 0302 	orr.w	r3, r3, #2
 8001f28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f2c:	4b94      	ldr	r3, [pc, #592]	; (8002180 <MX_GPIO_Init+0x310>)
 8001f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f3a:	4b91      	ldr	r3, [pc, #580]	; (8002180 <MX_GPIO_Init+0x310>)
 8001f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f40:	4a8f      	ldr	r2, [pc, #572]	; (8002180 <MX_GPIO_Init+0x310>)
 8001f42:	f043 0308 	orr.w	r3, r3, #8
 8001f46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f4a:	4b8d      	ldr	r3, [pc, #564]	; (8002180 <MX_GPIO_Init+0x310>)
 8001f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f58:	4b89      	ldr	r3, [pc, #548]	; (8002180 <MX_GPIO_Init+0x310>)
 8001f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f5e:	4a88      	ldr	r2, [pc, #544]	; (8002180 <MX_GPIO_Init+0x310>)
 8001f60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f68:	4b85      	ldr	r3, [pc, #532]	; (8002180 <MX_GPIO_Init+0x310>)
 8001f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f72:	607b      	str	r3, [r7, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 8001f76:	2200      	movs	r2, #0
 8001f78:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8001f7c:	4881      	ldr	r0, [pc, #516]	; (8002184 <MX_GPIO_Init+0x314>)
 8001f7e:	f011 fcf3 	bl	8013968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_0, GPIO_PIN_RESET);
 8001f82:	2200      	movs	r2, #0
 8001f84:	f241 4101 	movw	r1, #5121	; 0x1401
 8001f88:	487f      	ldr	r0, [pc, #508]	; (8002188 <MX_GPIO_Init+0x318>)
 8001f8a:	f011 fced 	bl	8013968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001f94:	487d      	ldr	r0, [pc, #500]	; (800218c <MX_GPIO_Init+0x31c>)
 8001f96:	f011 fce7 	bl	8013968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8001fa0:	487b      	ldr	r0, [pc, #492]	; (8002190 <MX_GPIO_Init+0x320>)
 8001fa2:	f011 fce1 	bl	8013968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4|GPIO_PIN_5|USB_PowerSwitchOn_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8001fac:	4879      	ldr	r0, [pc, #484]	; (8002194 <MX_GPIO_Init+0x324>)
 8001fae:	f011 fcdb 	bl	8013968 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 8001fb2:	2314      	movs	r3, #20
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4870      	ldr	r0, [pc, #448]	; (8002188 <MX_GPIO_Init+0x318>)
 8001fc6:	f011 fb07 	bl	80135d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001fca:	2308      	movs	r3, #8
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001fce:	4b72      	ldr	r3, [pc, #456]	; (8002198 <MX_GPIO_Init+0x328>)
 8001fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fda:	4619      	mov	r1, r3
 8001fdc:	486a      	ldr	r0, [pc, #424]	; (8002188 <MX_GPIO_Init+0x318>)
 8001fde:	f011 fafb 	bl	80135d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001fe2:	2320      	movs	r3, #32
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fe6:	4b6d      	ldr	r3, [pc, #436]	; (800219c <MX_GPIO_Init+0x32c>)
 8001fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001fea:	2302      	movs	r3, #2
 8001fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4864      	ldr	r0, [pc, #400]	; (8002188 <MX_GPIO_Init+0x318>)
 8001ff6:	f011 faef 	bl	80135d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001ffa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002000:	2300      	movs	r3, #0
 8002002:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002004:	2302      	movs	r3, #2
 8002006:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800200c:	4619      	mov	r1, r3
 800200e:	4864      	ldr	r0, [pc, #400]	; (80021a0 <MX_GPIO_Init+0x330>)
 8002010:	f011 fae2 	bl	80135d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF8 PF9 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002014:	f44f 63e8 	mov.w	r3, #1856	; 0x740
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800201a:	4b60      	ldr	r3, [pc, #384]	; (800219c <MX_GPIO_Init+0x32c>)
 800201c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800201e:	2302      	movs	r3, #2
 8002020:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002026:	4619      	mov	r1, r3
 8002028:	4856      	ldr	r0, [pc, #344]	; (8002184 <MX_GPIO_Init+0x314>)
 800202a:	f011 fad5 	bl	80135d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800202e:	2380      	movs	r3, #128	; 0x80
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002032:	2300      	movs	r3, #0
 8002034:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800203a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800203e:	4619      	mov	r1, r3
 8002040:	4850      	ldr	r0, [pc, #320]	; (8002184 <MX_GPIO_Init+0x314>)
 8002042:	f011 fac9 	bl	80135d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC7 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_10;
 8002046:	f240 4382 	movw	r3, #1154	; 0x482
 800204a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800204c:	2300      	movs	r3, #0
 800204e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002050:	2301      	movs	r3, #1
 8002052:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002054:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002058:	4619      	mov	r1, r3
 800205a:	4851      	ldr	r0, [pc, #324]	; (80021a0 <MX_GPIO_Init+0x330>)
 800205c:	f011 fabc 	bl	80135d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002060:	2303      	movs	r3, #3
 8002062:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002064:	4b4c      	ldr	r3, [pc, #304]	; (8002198 <MX_GPIO_Init+0x328>)
 8002066:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002068:	2301      	movs	r3, #1
 800206a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002070:	4619      	mov	r1, r3
 8002072:	484c      	ldr	r0, [pc, #304]	; (80021a4 <MX_GPIO_Init+0x334>)
 8002074:	f011 fab0 	bl	80135d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin;
 8002078:	2304      	movs	r3, #4
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207c:	2302      	movs	r3, #2
 800207e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002084:	2300      	movs	r3, #0
 8002086:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002088:	230b      	movs	r3, #11
 800208a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_MDIO_GPIO_Port, &GPIO_InitStruct);
 800208c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002090:	4619      	mov	r1, r3
 8002092:	4844      	ldr	r0, [pc, #272]	; (80021a4 <MX_GPIO_Init+0x334>)
 8002094:	f011 faa0 	bl	80135d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002098:	2330      	movs	r3, #48	; 0x30
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209c:	2302      	movs	r3, #2
 800209e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a4:	2300      	movs	r3, #0
 80020a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020a8:	230b      	movs	r3, #11
 80020aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b0:	4619      	mov	r1, r3
 80020b2:	483b      	ldr	r0, [pc, #236]	; (80021a0 <MX_GPIO_Init+0x330>)
 80020b4:	f011 fa90 	bl	80135d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020b8:	2304      	movs	r3, #4
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80020bc:	4b36      	ldr	r3, [pc, #216]	; (8002198 <MX_GPIO_Init+0x328>)
 80020be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020c0:	2301      	movs	r3, #1
 80020c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020c8:	4619      	mov	r1, r3
 80020ca:	4830      	ldr	r0, [pc, #192]	; (800218c <MX_GPIO_Init+0x31c>)
 80020cc:	f011 fa84 	bl	80135d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80020d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d6:	2301      	movs	r3, #1
 80020d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80020da:	2302      	movs	r3, #2
 80020dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020de:	2300      	movs	r3, #0
 80020e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e6:	4619      	mov	r1, r3
 80020e8:	4826      	ldr	r0, [pc, #152]	; (8002184 <MX_GPIO_Init+0x314>)
 80020ea:	f011 fa75 	bl	80135d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80020ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f4:	2301      	movs	r3, #1
 80020f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fc:	2300      	movs	r3, #0
 80020fe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002104:	4619      	mov	r1, r3
 8002106:	481f      	ldr	r0, [pc, #124]	; (8002184 <MX_GPIO_Init+0x314>)
 8002108:	f011 fa66 	bl	80135d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE12 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_0;
 800210c:	f241 4301 	movw	r3, #5121	; 0x1401
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002112:	2301      	movs	r3, #1
 8002114:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002116:	2302      	movs	r3, #2
 8002118:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211a:	2300      	movs	r3, #0
 800211c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800211e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002122:	4619      	mov	r1, r3
 8002124:	4818      	ldr	r0, [pc, #96]	; (8002188 <MX_GPIO_Init+0x318>)
 8002126:	f011 fa57 	bl	80135d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800212a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002130:	2302      	movs	r3, #2
 8002132:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002138:	2300      	movs	r3, #0
 800213a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800213c:	230b      	movs	r3, #11
 800213e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002140:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002144:	4619      	mov	r1, r3
 8002146:	4811      	ldr	r0, [pc, #68]	; (800218c <MX_GPIO_Init+0x31c>)
 8002148:	f011 fa46 	bl	80135d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800214c:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002152:	2301      	movs	r3, #1
 8002154:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215a:	2300      	movs	r3, #0
 800215c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800215e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002162:	4619      	mov	r1, r3
 8002164:	4809      	ldr	r0, [pc, #36]	; (800218c <MX_GPIO_Init+0x31c>)
 8002166:	f011 fa37 	bl	80135d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800216a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800216e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002170:	2301      	movs	r3, #1
 8002172:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002174:	2302      	movs	r3, #2
 8002176:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002178:	2300      	movs	r3, #0
 800217a:	633b      	str	r3, [r7, #48]	; 0x30
 800217c:	e014      	b.n	80021a8 <MX_GPIO_Init+0x338>
 800217e:	bf00      	nop
 8002180:	58024400 	.word	0x58024400
 8002184:	58021400 	.word	0x58021400
 8002188:	58021000 	.word	0x58021000
 800218c:	58020400 	.word	0x58020400
 8002190:	58020c00 	.word	0x58020c00
 8002194:	58021800 	.word	0x58021800
 8002198:	11310000 	.word	0x11310000
 800219c:	11110000 	.word	0x11110000
 80021a0:	58020800 	.word	0x58020800
 80021a4:	58020000 	.word	0x58020000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ac:	4619      	mov	r1, r3
 80021ae:	4851      	ldr	r0, [pc, #324]	; (80022f4 <MX_GPIO_Init+0x484>)
 80021b0:	f011 fa12 	bl	80135d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG4 PG5 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8;
 80021b4:	f44f 7398 	mov.w	r3, #304	; 0x130
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ba:	2301      	movs	r3, #1
 80021bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80021be:	2302      	movs	r3, #2
 80021c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c2:	2300      	movs	r3, #0
 80021c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ca:	4619      	mov	r1, r3
 80021cc:	484a      	ldr	r0, [pc, #296]	; (80022f8 <MX_GPIO_Init+0x488>)
 80021ce:	f011 fa03 	bl	80135d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80021d2:	2340      	movs	r3, #64	; 0x40
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d6:	2301      	movs	r3, #1
 80021d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021de:	2300      	movs	r3, #0
 80021e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80021e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e6:	4619      	mov	r1, r3
 80021e8:	4843      	ldr	r0, [pc, #268]	; (80022f8 <MX_GPIO_Init+0x488>)
 80021ea:	f011 f9f5 	bl	80135d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80021ee:	2380      	movs	r3, #128	; 0x80
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021f2:	2300      	movs	r3, #0
 80021f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021f6:	2301      	movs	r3, #1
 80021f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80021fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021fe:	4619      	mov	r1, r3
 8002200:	483d      	ldr	r0, [pc, #244]	; (80022f8 <MX_GPIO_Init+0x488>)
 8002202:	f011 f9e9 	bl	80135d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002206:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800220c:	2300      	movs	r3, #0
 800220e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002218:	4619      	mov	r1, r3
 800221a:	4838      	ldr	r0, [pc, #224]	; (80022fc <MX_GPIO_Init+0x48c>)
 800221c:	f011 f9dc 	bl	80135d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002220:	2308      	movs	r3, #8
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002224:	2300      	movs	r3, #0
 8002226:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800222c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002230:	4619      	mov	r1, r3
 8002232:	4830      	ldr	r0, [pc, #192]	; (80022f4 <MX_GPIO_Init+0x484>)
 8002234:	f011 f9d0 	bl	80135d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 8002238:	2390      	movs	r3, #144	; 0x90
 800223a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800223c:	4b30      	ldr	r3, [pc, #192]	; (8002300 <MX_GPIO_Init+0x490>)
 800223e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002240:	2301      	movs	r3, #1
 8002242:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002248:	4619      	mov	r1, r3
 800224a:	482a      	ldr	r0, [pc, #168]	; (80022f4 <MX_GPIO_Init+0x484>)
 800224c:	f011 f9c4 	bl	80135d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002250:	2320      	movs	r3, #32
 8002252:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002254:	2300      	movs	r3, #0
 8002256:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002258:	2301      	movs	r3, #1
 800225a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800225c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002260:	4619      	mov	r1, r3
 8002262:	4824      	ldr	r0, [pc, #144]	; (80022f4 <MX_GPIO_Init+0x484>)
 8002264:	f011 f9b8 	bl	80135d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002268:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226e:	2302      	movs	r3, #2
 8002270:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002272:	2300      	movs	r3, #0
 8002274:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002276:	2300      	movs	r3, #0
 8002278:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800227a:	230b      	movs	r3, #11
 800227c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800227e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002282:	4619      	mov	r1, r3
 8002284:	481c      	ldr	r0, [pc, #112]	; (80022f8 <MX_GPIO_Init+0x488>)
 8002286:	f011 f9a7 	bl	80135d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800228a:	2200      	movs	r2, #0
 800228c:	2100      	movs	r1, #0
 800228e:	2006      	movs	r0, #6
 8002290:	f010 ff29 	bl	80130e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002294:	2006      	movs	r0, #6
 8002296:	f010 ff40 	bl	801311a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800229a:	2200      	movs	r2, #0
 800229c:	2100      	movs	r1, #0
 800229e:	2007      	movs	r0, #7
 80022a0:	f010 ff21 	bl	80130e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80022a4:	2007      	movs	r0, #7
 80022a6:	f010 ff38 	bl	801311a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80022aa:	2200      	movs	r2, #0
 80022ac:	2100      	movs	r1, #0
 80022ae:	2008      	movs	r0, #8
 80022b0:	f010 ff19 	bl	80130e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80022b4:	2008      	movs	r0, #8
 80022b6:	f010 ff30 	bl	801311a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80022ba:	2200      	movs	r2, #0
 80022bc:	2100      	movs	r1, #0
 80022be:	2009      	movs	r0, #9
 80022c0:	f010 ff11 	bl	80130e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80022c4:	2009      	movs	r0, #9
 80022c6:	f010 ff28 	bl	801311a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80022ca:	2200      	movs	r2, #0
 80022cc:	2100      	movs	r1, #0
 80022ce:	200a      	movs	r0, #10
 80022d0:	f010 ff09 	bl	80130e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80022d4:	200a      	movs	r0, #10
 80022d6:	f010 ff20 	bl	801311a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80022da:	2200      	movs	r2, #0
 80022dc:	2100      	movs	r1, #0
 80022de:	2017      	movs	r0, #23
 80022e0:	f010 ff01 	bl	80130e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80022e4:	2017      	movs	r0, #23
 80022e6:	f010 ff18 	bl	801311a <HAL_NVIC_EnableIRQ>

}
 80022ea:	bf00      	nop
 80022ec:	3738      	adds	r7, #56	; 0x38
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	58020c00 	.word	0x58020c00
 80022f8:	58021800 	.word	0x58021800
 80022fc:	58020800 	.word	0x58020800
 8002300:	11310000 	.word	0x11310000

08002304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
	...

08002314 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800231a:	4b0a      	ldr	r3, [pc, #40]	; (8002344 <HAL_MspInit+0x30>)
 800231c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002320:	4a08      	ldr	r2, [pc, #32]	; (8002344 <HAL_MspInit+0x30>)
 8002322:	f043 0302 	orr.w	r3, r3, #2
 8002326:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_MspInit+0x30>)
 800232c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	607b      	str	r3, [r7, #4]
 8002336:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	58024400 	.word	0x58024400

08002348 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002348:	b480      	push	{r7}
 800234a:	b087      	sub	sp, #28
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a2b      	ldr	r2, [pc, #172]	; (8002404 <HAL_TIM_PWM_MspInit+0xbc>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d10f      	bne.n	800237a <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800235a:	4b2b      	ldr	r3, [pc, #172]	; (8002408 <HAL_TIM_PWM_MspInit+0xc0>)
 800235c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002360:	4a29      	ldr	r2, [pc, #164]	; (8002408 <HAL_TIM_PWM_MspInit+0xc0>)
 8002362:	f043 0301 	orr.w	r3, r3, #1
 8002366:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800236a:	4b27      	ldr	r3, [pc, #156]	; (8002408 <HAL_TIM_PWM_MspInit+0xc0>)
 800236c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002378:	e03d      	b.n	80023f6 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM2)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002382:	d10f      	bne.n	80023a4 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002384:	4b20      	ldr	r3, [pc, #128]	; (8002408 <HAL_TIM_PWM_MspInit+0xc0>)
 8002386:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800238a:	4a1f      	ldr	r2, [pc, #124]	; (8002408 <HAL_TIM_PWM_MspInit+0xc0>)
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002394:	4b1c      	ldr	r3, [pc, #112]	; (8002408 <HAL_TIM_PWM_MspInit+0xc0>)
 8002396:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	613b      	str	r3, [r7, #16]
 80023a0:	693b      	ldr	r3, [r7, #16]
}
 80023a2:	e028      	b.n	80023f6 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM3)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a18      	ldr	r2, [pc, #96]	; (800240c <HAL_TIM_PWM_MspInit+0xc4>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d10f      	bne.n	80023ce <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023ae:	4b16      	ldr	r3, [pc, #88]	; (8002408 <HAL_TIM_PWM_MspInit+0xc0>)
 80023b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023b4:	4a14      	ldr	r2, [pc, #80]	; (8002408 <HAL_TIM_PWM_MspInit+0xc0>)
 80023b6:	f043 0302 	orr.w	r3, r3, #2
 80023ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023be:	4b12      	ldr	r3, [pc, #72]	; (8002408 <HAL_TIM_PWM_MspInit+0xc0>)
 80023c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	68fb      	ldr	r3, [r7, #12]
}
 80023cc:	e013      	b.n	80023f6 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM5)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a0f      	ldr	r2, [pc, #60]	; (8002410 <HAL_TIM_PWM_MspInit+0xc8>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d10e      	bne.n	80023f6 <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80023d8:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <HAL_TIM_PWM_MspInit+0xc0>)
 80023da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023de:	4a0a      	ldr	r2, [pc, #40]	; (8002408 <HAL_TIM_PWM_MspInit+0xc0>)
 80023e0:	f043 0308 	orr.w	r3, r3, #8
 80023e4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023e8:	4b07      	ldr	r3, [pc, #28]	; (8002408 <HAL_TIM_PWM_MspInit+0xc0>)
 80023ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	60bb      	str	r3, [r7, #8]
 80023f4:	68bb      	ldr	r3, [r7, #8]
}
 80023f6:	bf00      	nop
 80023f8:	371c      	adds	r7, #28
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	40010000 	.word	0x40010000
 8002408:	58024400 	.word	0x58024400
 800240c:	40000400 	.word	0x40000400
 8002410:	40000c00 	.word	0x40000c00

08002414 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a0e      	ldr	r2, [pc, #56]	; (800245c <HAL_TIM_Base_MspInit+0x48>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d116      	bne.n	8002454 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002426:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <HAL_TIM_Base_MspInit+0x4c>)
 8002428:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800242c:	4a0c      	ldr	r2, [pc, #48]	; (8002460 <HAL_TIM_Base_MspInit+0x4c>)
 800242e:	f043 0320 	orr.w	r3, r3, #32
 8002432:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002436:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <HAL_TIM_Base_MspInit+0x4c>)
 8002438:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800243c:	f003 0320 	and.w	r3, r3, #32
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002444:	2200      	movs	r2, #0
 8002446:	2100      	movs	r1, #0
 8002448:	2037      	movs	r0, #55	; 0x37
 800244a:	f010 fe4c 	bl	80130e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800244e:	2037      	movs	r0, #55	; 0x37
 8002450:	f010 fe63 	bl	801311a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002454:	bf00      	nop
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40001400 	.word	0x40001400
 8002460:	58024400 	.word	0x58024400

08002464 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b08c      	sub	sp, #48	; 0x30
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246c:	f107 031c 	add.w	r3, r7, #28
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	60da      	str	r2, [r3, #12]
 800247a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a5a      	ldr	r2, [pc, #360]	; (80025ec <HAL_TIM_MspPostInit+0x188>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d120      	bne.n	80024c8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002486:	4b5a      	ldr	r3, [pc, #360]	; (80025f0 <HAL_TIM_MspPostInit+0x18c>)
 8002488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800248c:	4a58      	ldr	r2, [pc, #352]	; (80025f0 <HAL_TIM_MspPostInit+0x18c>)
 800248e:	f043 0310 	orr.w	r3, r3, #16
 8002492:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002496:	4b56      	ldr	r3, [pc, #344]	; (80025f0 <HAL_TIM_MspPostInit+0x18c>)
 8002498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800249c:	f003 0310 	and.w	r3, r3, #16
 80024a0:	61bb      	str	r3, [r7, #24]
 80024a2:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80024a4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80024a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024aa:	2302      	movs	r3, #2
 80024ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b2:	2300      	movs	r3, #0
 80024b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024b6:	2301      	movs	r3, #1
 80024b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024ba:	f107 031c 	add.w	r3, r7, #28
 80024be:	4619      	mov	r1, r3
 80024c0:	484c      	ldr	r0, [pc, #304]	; (80025f4 <HAL_TIM_MspPostInit+0x190>)
 80024c2:	f011 f889 	bl	80135d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80024c6:	e08c      	b.n	80025e2 <HAL_TIM_MspPostInit+0x17e>
  else if(htim->Instance==TIM2)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024d0:	d11f      	bne.n	8002512 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d2:	4b47      	ldr	r3, [pc, #284]	; (80025f0 <HAL_TIM_MspPostInit+0x18c>)
 80024d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024d8:	4a45      	ldr	r2, [pc, #276]	; (80025f0 <HAL_TIM_MspPostInit+0x18c>)
 80024da:	f043 0301 	orr.w	r3, r3, #1
 80024de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024e2:	4b43      	ldr	r3, [pc, #268]	; (80025f0 <HAL_TIM_MspPostInit+0x18c>)
 80024e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80024f0:	2320      	movs	r3, #32
 80024f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f4:	2302      	movs	r3, #2
 80024f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fc:	2300      	movs	r3, #0
 80024fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002500:	2301      	movs	r3, #1
 8002502:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002504:	f107 031c 	add.w	r3, r7, #28
 8002508:	4619      	mov	r1, r3
 800250a:	483b      	ldr	r0, [pc, #236]	; (80025f8 <HAL_TIM_MspPostInit+0x194>)
 800250c:	f011 f864 	bl	80135d8 <HAL_GPIO_Init>
}
 8002510:	e067      	b.n	80025e2 <HAL_TIM_MspPostInit+0x17e>
  else if(htim->Instance==TIM3)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a39      	ldr	r2, [pc, #228]	; (80025fc <HAL_TIM_MspPostInit+0x198>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d13e      	bne.n	800259a <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800251c:	4b34      	ldr	r3, [pc, #208]	; (80025f0 <HAL_TIM_MspPostInit+0x18c>)
 800251e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002522:	4a33      	ldr	r2, [pc, #204]	; (80025f0 <HAL_TIM_MspPostInit+0x18c>)
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800252c:	4b30      	ldr	r3, [pc, #192]	; (80025f0 <HAL_TIM_MspPostInit+0x18c>)
 800252e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	613b      	str	r3, [r7, #16]
 8002538:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800253a:	4b2d      	ldr	r3, [pc, #180]	; (80025f0 <HAL_TIM_MspPostInit+0x18c>)
 800253c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002540:	4a2b      	ldr	r2, [pc, #172]	; (80025f0 <HAL_TIM_MspPostInit+0x18c>)
 8002542:	f043 0302 	orr.w	r3, r3, #2
 8002546:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800254a:	4b29      	ldr	r3, [pc, #164]	; (80025f0 <HAL_TIM_MspPostInit+0x18c>)
 800254c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002558:	23c0      	movs	r3, #192	; 0xc0
 800255a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255c:	2302      	movs	r3, #2
 800255e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002560:	2300      	movs	r3, #0
 8002562:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002564:	2300      	movs	r3, #0
 8002566:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002568:	2302      	movs	r3, #2
 800256a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256c:	f107 031c 	add.w	r3, r7, #28
 8002570:	4619      	mov	r1, r3
 8002572:	4821      	ldr	r0, [pc, #132]	; (80025f8 <HAL_TIM_MspPostInit+0x194>)
 8002574:	f011 f830 	bl	80135d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002578:	2302      	movs	r3, #2
 800257a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257c:	2302      	movs	r3, #2
 800257e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002580:	2300      	movs	r3, #0
 8002582:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002584:	2300      	movs	r3, #0
 8002586:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002588:	2302      	movs	r3, #2
 800258a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800258c:	f107 031c 	add.w	r3, r7, #28
 8002590:	4619      	mov	r1, r3
 8002592:	481b      	ldr	r0, [pc, #108]	; (8002600 <HAL_TIM_MspPostInit+0x19c>)
 8002594:	f011 f820 	bl	80135d8 <HAL_GPIO_Init>
}
 8002598:	e023      	b.n	80025e2 <HAL_TIM_MspPostInit+0x17e>
  else if(htim->Instance==TIM5)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a19      	ldr	r2, [pc, #100]	; (8002604 <HAL_TIM_MspPostInit+0x1a0>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d11e      	bne.n	80025e2 <HAL_TIM_MspPostInit+0x17e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a4:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <HAL_TIM_MspPostInit+0x18c>)
 80025a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025aa:	4a11      	ldr	r2, [pc, #68]	; (80025f0 <HAL_TIM_MspPostInit+0x18c>)
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025b4:	4b0e      	ldr	r3, [pc, #56]	; (80025f0 <HAL_TIM_MspPostInit+0x18c>)
 80025b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	60bb      	str	r3, [r7, #8]
 80025c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80025c2:	2308      	movs	r3, #8
 80025c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c6:	2302      	movs	r3, #2
 80025c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ce:	2300      	movs	r3, #0
 80025d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80025d2:	2302      	movs	r3, #2
 80025d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d6:	f107 031c 	add.w	r3, r7, #28
 80025da:	4619      	mov	r1, r3
 80025dc:	4806      	ldr	r0, [pc, #24]	; (80025f8 <HAL_TIM_MspPostInit+0x194>)
 80025de:	f010 fffb 	bl	80135d8 <HAL_GPIO_Init>
}
 80025e2:	bf00      	nop
 80025e4:	3730      	adds	r7, #48	; 0x30
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40010000 	.word	0x40010000
 80025f0:	58024400 	.word	0x58024400
 80025f4:	58021000 	.word	0x58021000
 80025f8:	58020000 	.word	0x58020000
 80025fc:	40000400 	.word	0x40000400
 8002600:	58020400 	.word	0x58020400
 8002604:	40000c00 	.word	0x40000c00

08002608 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08c      	sub	sp, #48	; 0x30
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002610:	f107 031c 	add.w	r3, r7, #28
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	60da      	str	r2, [r3, #12]
 800261e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a41      	ldr	r2, [pc, #260]	; (800272c <HAL_UART_MspInit+0x124>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d13f      	bne.n	80026aa <HAL_UART_MspInit+0xa2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800262a:	4b41      	ldr	r3, [pc, #260]	; (8002730 <HAL_UART_MspInit+0x128>)
 800262c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002630:	4a3f      	ldr	r2, [pc, #252]	; (8002730 <HAL_UART_MspInit+0x128>)
 8002632:	f043 0310 	orr.w	r3, r3, #16
 8002636:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800263a:	4b3d      	ldr	r3, [pc, #244]	; (8002730 <HAL_UART_MspInit+0x128>)
 800263c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002640:	f003 0310 	and.w	r3, r3, #16
 8002644:	61bb      	str	r3, [r7, #24]
 8002646:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002648:	4b39      	ldr	r3, [pc, #228]	; (8002730 <HAL_UART_MspInit+0x128>)
 800264a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800264e:	4a38      	ldr	r2, [pc, #224]	; (8002730 <HAL_UART_MspInit+0x128>)
 8002650:	f043 0302 	orr.w	r3, r3, #2
 8002654:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002658:	4b35      	ldr	r3, [pc, #212]	; (8002730 <HAL_UART_MspInit+0x128>)
 800265a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	617b      	str	r3, [r7, #20]
 8002664:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800266a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266c:	2302      	movs	r3, #2
 800266e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002670:	2300      	movs	r3, #0
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002674:	2300      	movs	r3, #0
 8002676:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002678:	2304      	movs	r3, #4
 800267a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800267c:	f107 031c 	add.w	r3, r7, #28
 8002680:	4619      	mov	r1, r3
 8002682:	482c      	ldr	r0, [pc, #176]	; (8002734 <HAL_UART_MspInit+0x12c>)
 8002684:	f010 ffa8 	bl	80135d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002688:	2340      	movs	r3, #64	; 0x40
 800268a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268c:	2302      	movs	r3, #2
 800268e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002690:	2300      	movs	r3, #0
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002694:	2300      	movs	r3, #0
 8002696:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002698:	2307      	movs	r3, #7
 800269a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800269c:	f107 031c 	add.w	r3, r7, #28
 80026a0:	4619      	mov	r1, r3
 80026a2:	4824      	ldr	r0, [pc, #144]	; (8002734 <HAL_UART_MspInit+0x12c>)
 80026a4:	f010 ff98 	bl	80135d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80026a8:	e03b      	b.n	8002722 <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART3)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a22      	ldr	r2, [pc, #136]	; (8002738 <HAL_UART_MspInit+0x130>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d136      	bne.n	8002722 <HAL_UART_MspInit+0x11a>
    __HAL_RCC_USART3_CLK_ENABLE();
 80026b4:	4b1e      	ldr	r3, [pc, #120]	; (8002730 <HAL_UART_MspInit+0x128>)
 80026b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026ba:	4a1d      	ldr	r2, [pc, #116]	; (8002730 <HAL_UART_MspInit+0x128>)
 80026bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026c0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80026c4:	4b1a      	ldr	r3, [pc, #104]	; (8002730 <HAL_UART_MspInit+0x128>)
 80026c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026ce:	613b      	str	r3, [r7, #16]
 80026d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026d2:	4b17      	ldr	r3, [pc, #92]	; (8002730 <HAL_UART_MspInit+0x128>)
 80026d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026d8:	4a15      	ldr	r2, [pc, #84]	; (8002730 <HAL_UART_MspInit+0x128>)
 80026da:	f043 0308 	orr.w	r3, r3, #8
 80026de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026e2:	4b13      	ldr	r3, [pc, #76]	; (8002730 <HAL_UART_MspInit+0x128>)
 80026e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026e8:	f003 0308 	and.w	r3, r3, #8
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80026f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f6:	2302      	movs	r3, #2
 80026f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fe:	2300      	movs	r3, #0
 8002700:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002702:	2307      	movs	r3, #7
 8002704:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002706:	f107 031c 	add.w	r3, r7, #28
 800270a:	4619      	mov	r1, r3
 800270c:	480b      	ldr	r0, [pc, #44]	; (800273c <HAL_UART_MspInit+0x134>)
 800270e:	f010 ff63 	bl	80135d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002712:	2200      	movs	r2, #0
 8002714:	2100      	movs	r1, #0
 8002716:	2027      	movs	r0, #39	; 0x27
 8002718:	f010 fce5 	bl	80130e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800271c:	2027      	movs	r0, #39	; 0x27
 800271e:	f010 fcfc 	bl	801311a <HAL_NVIC_EnableIRQ>
}
 8002722:	bf00      	nop
 8002724:	3730      	adds	r7, #48	; 0x30
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40011000 	.word	0x40011000
 8002730:	58024400 	.word	0x58024400
 8002734:	58020400 	.word	0x58020400
 8002738:	40004800 	.word	0x40004800
 800273c:	58020c00 	.word	0x58020c00

08002740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800274e:	b480      	push	{r7}
 8002750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002752:	e7fe      	b.n	8002752 <HardFault_Handler+0x4>

08002754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002758:	e7fe      	b.n	8002758 <MemManage_Handler+0x4>

0800275a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800275e:	e7fe      	b.n	800275e <BusFault_Handler+0x4>

08002760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002764:	e7fe      	b.n	8002764 <UsageFault_Handler+0x4>

08002766 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002766:	b480      	push	{r7}
 8002768:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002778:	bf00      	nop
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002782:	b480      	push	{r7}
 8002784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002794:	f010 fb7e 	bl	8012e94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002798:	bf00      	nop
 800279a:	bd80      	pop	{r7, pc}

0800279c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80027a0:	2001      	movs	r0, #1
 80027a2:	f011 f8fa 	bl	801399a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}

080027aa <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80027ae:	2002      	movs	r0, #2
 80027b0:	f011 f8f3 	bl	801399a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80027b4:	bf00      	nop
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80027bc:	2004      	movs	r0, #4
 80027be:	f011 f8ec 	bl	801399a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80027ca:	2008      	movs	r0, #8
 80027cc:	f011 f8e5 	bl	801399a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80027d0:	bf00      	nop
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80027d8:	2010      	movs	r0, #16
 80027da:	f011 f8de 	bl	801399a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80027e6:	2020      	movs	r0, #32
 80027e8:	f011 f8d7 	bl	801399a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80027ec:	2040      	movs	r0, #64	; 0x40
 80027ee:	f011 f8d4 	bl	801399a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80027f2:	2080      	movs	r0, #128	; 0x80
 80027f4:	f011 f8d1 	bl	801399a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80027f8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80027fc:	f011 f8cd 	bl	801399a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002800:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002804:	f011 f8c9 	bl	801399a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002808:	bf00      	nop
 800280a:	bd80      	pop	{r7, pc}

0800280c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002810:	4802      	ldr	r0, [pc, #8]	; (800281c <USART3_IRQHandler+0x10>)
 8002812:	f015 fd89 	bl	8018328 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	24000350 	.word	0x24000350

08002820 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002824:	4802      	ldr	r0, [pc, #8]	; (8002830 <TIM7_IRQHandler+0x10>)
 8002826:	f014 fe1d 	bl	8017464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	24000678 	.word	0x24000678

08002834 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002838:	4802      	ldr	r0, [pc, #8]	; (8002844 <OTG_FS_IRQHandler+0x10>)
 800283a:	f011 fa1f 	bl	8013c7c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	24001ba4 	.word	0x24001ba4

08002848 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002850:	4b11      	ldr	r3, [pc, #68]	; (8002898 <_sbrk+0x50>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d102      	bne.n	800285e <_sbrk+0x16>
		heap_end = &end;
 8002858:	4b0f      	ldr	r3, [pc, #60]	; (8002898 <_sbrk+0x50>)
 800285a:	4a10      	ldr	r2, [pc, #64]	; (800289c <_sbrk+0x54>)
 800285c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800285e:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <_sbrk+0x50>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002864:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <_sbrk+0x50>)
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4413      	add	r3, r2
 800286c:	466a      	mov	r2, sp
 800286e:	4293      	cmp	r3, r2
 8002870:	d907      	bls.n	8002882 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002872:	f01b fefd 	bl	801e670 <__errno>
 8002876:	4602      	mov	r2, r0
 8002878:	230c      	movs	r3, #12
 800287a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800287c:	f04f 33ff 	mov.w	r3, #4294967295
 8002880:	e006      	b.n	8002890 <_sbrk+0x48>
	}

	heap_end += incr;
 8002882:	4b05      	ldr	r3, [pc, #20]	; (8002898 <_sbrk+0x50>)
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4413      	add	r3, r2
 800288a:	4a03      	ldr	r2, [pc, #12]	; (8002898 <_sbrk+0x50>)
 800288c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800288e:	68fb      	ldr	r3, [r7, #12]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	24000310 	.word	0x24000310
 800289c:	24001fb0 	.word	0x24001fb0

080028a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80028a4:	4b29      	ldr	r3, [pc, #164]	; (800294c <SystemInit+0xac>)
 80028a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028aa:	4a28      	ldr	r2, [pc, #160]	; (800294c <SystemInit+0xac>)
 80028ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80028b4:	4b26      	ldr	r3, [pc, #152]	; (8002950 <SystemInit+0xb0>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a25      	ldr	r2, [pc, #148]	; (8002950 <SystemInit+0xb0>)
 80028ba:	f043 0301 	orr.w	r3, r3, #1
 80028be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80028c0:	4b23      	ldr	r3, [pc, #140]	; (8002950 <SystemInit+0xb0>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80028c6:	4b22      	ldr	r3, [pc, #136]	; (8002950 <SystemInit+0xb0>)
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	4921      	ldr	r1, [pc, #132]	; (8002950 <SystemInit+0xb0>)
 80028cc:	4b21      	ldr	r3, [pc, #132]	; (8002954 <SystemInit+0xb4>)
 80028ce:	4013      	ands	r3, r2
 80028d0:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80028d2:	4b1f      	ldr	r3, [pc, #124]	; (8002950 <SystemInit+0xb0>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80028d8:	4b1d      	ldr	r3, [pc, #116]	; (8002950 <SystemInit+0xb0>)
 80028da:	2200      	movs	r2, #0
 80028dc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80028de:	4b1c      	ldr	r3, [pc, #112]	; (8002950 <SystemInit+0xb0>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80028e4:	4b1a      	ldr	r3, [pc, #104]	; (8002950 <SystemInit+0xb0>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80028ea:	4b19      	ldr	r3, [pc, #100]	; (8002950 <SystemInit+0xb0>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80028f0:	4b17      	ldr	r3, [pc, #92]	; (8002950 <SystemInit+0xb0>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80028f6:	4b16      	ldr	r3, [pc, #88]	; (8002950 <SystemInit+0xb0>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80028fc:	4b14      	ldr	r3, [pc, #80]	; (8002950 <SystemInit+0xb0>)
 80028fe:	2200      	movs	r2, #0
 8002900:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002902:	4b13      	ldr	r3, [pc, #76]	; (8002950 <SystemInit+0xb0>)
 8002904:	2200      	movs	r2, #0
 8002906:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8002908:	4b11      	ldr	r3, [pc, #68]	; (8002950 <SystemInit+0xb0>)
 800290a:	2200      	movs	r2, #0
 800290c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800290e:	4b10      	ldr	r3, [pc, #64]	; (8002950 <SystemInit+0xb0>)
 8002910:	2200      	movs	r2, #0
 8002912:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002914:	4b0e      	ldr	r3, [pc, #56]	; (8002950 <SystemInit+0xb0>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a0d      	ldr	r2, [pc, #52]	; (8002950 <SystemInit+0xb0>)
 800291a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800291e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002920:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <SystemInit+0xb0>)
 8002922:	2200      	movs	r2, #0
 8002924:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002926:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <SystemInit+0xb8>)
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	4b0c      	ldr	r3, [pc, #48]	; (800295c <SystemInit+0xbc>)
 800292c:	4013      	ands	r3, r2
 800292e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002932:	d202      	bcs.n	800293a <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002934:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <SystemInit+0xc0>)
 8002936:	2201      	movs	r2, #1
 8002938:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800293a:	4b04      	ldr	r3, [pc, #16]	; (800294c <SystemInit+0xac>)
 800293c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002940:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002942:	bf00      	nop
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	e000ed00 	.word	0xe000ed00
 8002950:	58024400 	.word	0x58024400
 8002954:	eaf6ed7f 	.word	0xeaf6ed7f
 8002958:	5c001000 	.word	0x5c001000
 800295c:	ffff0000 	.word	0xffff0000
 8002960:	51008108 	.word	0x51008108

08002964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002964:	f8df d034 	ldr.w	sp, [pc, #52]	; 800299c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002968:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800296a:	e003      	b.n	8002974 <LoopCopyDataInit>

0800296c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800296c:	4b0c      	ldr	r3, [pc, #48]	; (80029a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800296e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002970:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002972:	3104      	adds	r1, #4

08002974 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002974:	480b      	ldr	r0, [pc, #44]	; (80029a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002976:	4b0c      	ldr	r3, [pc, #48]	; (80029a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002978:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800297a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800297c:	d3f6      	bcc.n	800296c <CopyDataInit>
  ldr  r2, =_sbss
 800297e:	4a0b      	ldr	r2, [pc, #44]	; (80029ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002980:	e002      	b.n	8002988 <LoopFillZerobss>

08002982 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002982:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002984:	f842 3b04 	str.w	r3, [r2], #4

08002988 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002988:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800298a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800298c:	d3f9      	bcc.n	8002982 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800298e:	f7ff ff87 	bl	80028a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002992:	f01b fe73 	bl	801e67c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002996:	f7fe fd95 	bl	80014c4 <main>
  bx  lr    
 800299a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800299c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80029a0:	0801fc98 	.word	0x0801fc98
  ldr  r0, =_sdata
 80029a4:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80029a8:	240001f4 	.word	0x240001f4
  ldr  r2, =_sbss
 80029ac:	240001f8 	.word	0x240001f8
  ldr  r3, = _ebss
 80029b0:	24001fb0 	.word	0x24001fb0

080029b4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029b4:	e7fe      	b.n	80029b4 <ADC3_IRQHandler>
	...

080029b8 <G_q>:
 *                creal_T b_G_q[6]
 * Return Type  : void
 */
void G_q(double g, double theta2, double theta3, double theta4, double theta5,
         creal_T b_G_q[6])
{
 80029b8:	b590      	push	{r4, r7, lr}
 80029ba:	f5ad 5d9e 	sub.w	sp, sp, #5056	; 0x13c0
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4bc1      	ldr	r3, [pc, #772]	; (8002cc8 <G_q+0x310>)
 80029c4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80029c8:	443a      	add	r2, r7
 80029ca:	4413      	add	r3, r2
 80029cc:	ed83 0b00 	vstr	d0, [r3]
 80029d0:	4bbe      	ldr	r3, [pc, #760]	; (8002ccc <G_q+0x314>)
 80029d2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80029d6:	443a      	add	r2, r7
 80029d8:	4413      	add	r3, r2
 80029da:	ed83 1b00 	vstr	d1, [r3]
 80029de:	4bbc      	ldr	r3, [pc, #752]	; (8002cd0 <G_q+0x318>)
 80029e0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80029e4:	443a      	add	r2, r7
 80029e6:	4413      	add	r3, r2
 80029e8:	ed83 2b00 	vstr	d2, [r3]
 80029ec:	f107 0310 	add.w	r3, r7, #16
 80029f0:	ed83 3b00 	vstr	d3, [r3]
 80029f4:	4bb7      	ldr	r3, [pc, #732]	; (8002cd4 <G_q+0x31c>)
 80029f6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80029fa:	443a      	add	r2, r7
 80029fc:	4413      	add	r3, r2
 80029fe:	ed83 4b00 	vstr	d4, [r3]
 8002a02:	4bb5      	ldr	r3, [pc, #724]	; (8002cd8 <G_q+0x320>)
 8002a04:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002a08:	443a      	add	r2, r7
 8002a0a:	4413      	add	r3, r2
 8002a0c:	6018      	str	r0, [r3, #0]
  double t74_re;
  double t74_im;
  double t76_re;
  double t58_im;
  double t60_re;
  if (isInitialized_G_q == false) {
 8002a0e:	4bb3      	ldr	r3, [pc, #716]	; (8002cdc <G_q+0x324>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <G_q+0x62>
    G_q_initialize();
 8002a16:	f010 f8cf 	bl	8012bb8 <G_q_initialize>
  }

  /*     This function was generated by the Symbolic Math Toolbox version 8.2. */
  /*     24-May-2020 14:27:08 */
  t299.re = theta2 * 0.0;
 8002a1a:	4bac      	ldr	r3, [pc, #688]	; (8002ccc <G_q+0x314>)
 8002a1c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002a20:	443a      	add	r2, r7
 8002a22:	4413      	add	r3, r2
 8002a24:	ed93 7b00 	vldr	d7, [r3]
 8002a28:	ed9f 6ba5 	vldr	d6, [pc, #660]	; 8002cc0 <G_q+0x308>
 8002a2c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002a30:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002a34:	ed83 7b00 	vstr	d7, [r3]
  t299.im = theta2;
 8002a38:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8002a3c:	4ba3      	ldr	r3, [pc, #652]	; (8002ccc <G_q+0x314>)
 8002a3e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002a42:	4439      	add	r1, r7
 8002a44:	440b      	add	r3, r1
 8002a46:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002a4a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t298.re = -t299.re;
 8002a4e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002a52:	ed93 7b00 	vldr	d7, [r3]
 8002a56:	eeb1 7b47 	vneg.f64	d7, d7
 8002a5a:	f241 2330 	movw	r3, #4656	; 0x1230
 8002a5e:	443b      	add	r3, r7
 8002a60:	ed83 7b00 	vstr	d7, [r3]
  t298.im = -theta2;
 8002a64:	4b99      	ldr	r3, [pc, #612]	; (8002ccc <G_q+0x314>)
 8002a66:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002a6a:	443a      	add	r2, r7
 8002a6c:	4413      	add	r3, r2
 8002a6e:	ed93 7b00 	vldr	d7, [r3]
 8002a72:	eeb1 7b47 	vneg.f64	d7, d7
 8002a76:	f241 2330 	movw	r3, #4656	; 0x1230
 8002a7a:	443b      	add	r3, r7
 8002a7c:	ed83 7b02 	vstr	d7, [r3, #8]
  t293.re = t299.re;
 8002a80:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002a84:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002a88:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8002a8c:	e9c2 3400 	strd	r3, r4, [r2]
  t293.im = theta2;
 8002a90:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8002a94:	4b8d      	ldr	r3, [pc, #564]	; (8002ccc <G_q+0x314>)
 8002a96:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002a9a:	4439      	add	r1, r7
 8002a9c:	440b      	add	r3, r1
 8002a9e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002aa2:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t292.re = -t299.re;
 8002aa6:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002aaa:	ed93 7b00 	vldr	d7, [r3]
 8002aae:	eeb1 7b47 	vneg.f64	d7, d7
 8002ab2:	f241 2310 	movw	r3, #4624	; 0x1210
 8002ab6:	443b      	add	r3, r7
 8002ab8:	ed83 7b00 	vstr	d7, [r3]
  t292.im = -theta2;
 8002abc:	4b83      	ldr	r3, [pc, #524]	; (8002ccc <G_q+0x314>)
 8002abe:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002ac2:	443a      	add	r2, r7
 8002ac4:	4413      	add	r3, r2
 8002ac6:	ed93 7b00 	vldr	d7, [r3]
 8002aca:	eeb1 7b47 	vneg.f64	d7, d7
 8002ace:	f241 2310 	movw	r3, #4624	; 0x1210
 8002ad2:	443b      	add	r3, r7
 8002ad4:	ed83 7b02 	vstr	d7, [r3, #8]
  t291.re = t299.re;
 8002ad8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002adc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002ae0:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8002ae4:	e9c2 3400 	strd	r3, r4, [r2]
  t291.im = theta2;
 8002ae8:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8002aec:	4b77      	ldr	r3, [pc, #476]	; (8002ccc <G_q+0x314>)
 8002aee:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002af2:	4439      	add	r1, r7
 8002af4:	440b      	add	r3, r1
 8002af6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002afa:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t290.re = -t299.re;
 8002afe:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002b02:	ed93 7b00 	vldr	d7, [r3]
 8002b06:	eeb1 7b47 	vneg.f64	d7, d7
 8002b0a:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8002b0e:	443b      	add	r3, r7
 8002b10:	ed83 7b00 	vstr	d7, [r3]
  t290.im = -theta2;
 8002b14:	4b6d      	ldr	r3, [pc, #436]	; (8002ccc <G_q+0x314>)
 8002b16:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002b1a:	443a      	add	r2, r7
 8002b1c:	4413      	add	r3, r2
 8002b1e:	ed93 7b00 	vldr	d7, [r3]
 8002b22:	eeb1 7b47 	vneg.f64	d7, d7
 8002b26:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8002b2a:	443b      	add	r3, r7
 8002b2c:	ed83 7b02 	vstr	d7, [r3, #8]
  t287.re = t299.re;
 8002b30:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002b34:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002b38:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8002b3c:	e9c2 3400 	strd	r3, r4, [r2]
  t287.im = theta2;
 8002b40:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8002b44:	4b61      	ldr	r3, [pc, #388]	; (8002ccc <G_q+0x314>)
 8002b46:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002b4a:	4439      	add	r1, r7
 8002b4c:	440b      	add	r3, r1
 8002b4e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002b52:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t286.re = -t299.re;
 8002b56:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002b5a:	ed93 7b00 	vldr	d7, [r3]
 8002b5e:	eeb1 7b47 	vneg.f64	d7, d7
 8002b62:	f241 13d0 	movw	r3, #4560	; 0x11d0
 8002b66:	443b      	add	r3, r7
 8002b68:	ed83 7b00 	vstr	d7, [r3]
  t286.im = -theta2;
 8002b6c:	4b57      	ldr	r3, [pc, #348]	; (8002ccc <G_q+0x314>)
 8002b6e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002b72:	443a      	add	r2, r7
 8002b74:	4413      	add	r3, r2
 8002b76:	ed93 7b00 	vldr	d7, [r3]
 8002b7a:	eeb1 7b47 	vneg.f64	d7, d7
 8002b7e:	f241 13d0 	movw	r3, #4560	; 0x11d0
 8002b82:	443b      	add	r3, r7
 8002b84:	ed83 7b02 	vstr	d7, [r3, #8]
  t281.re = t299.re;
 8002b88:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002b8c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002b90:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002b94:	e9c2 3400 	strd	r3, r4, [r2]
  t281.im = theta2;
 8002b98:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002b9c:	4b4b      	ldr	r3, [pc, #300]	; (8002ccc <G_q+0x314>)
 8002b9e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002ba2:	4439      	add	r1, r7
 8002ba4:	440b      	add	r3, r1
 8002ba6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002baa:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t280.re = -t299.re;
 8002bae:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002bb2:	ed93 7b00 	vldr	d7, [r3]
 8002bb6:	eeb1 7b47 	vneg.f64	d7, d7
 8002bba:	f241 13b0 	movw	r3, #4528	; 0x11b0
 8002bbe:	443b      	add	r3, r7
 8002bc0:	ed83 7b00 	vstr	d7, [r3]
  t280.im = -theta2;
 8002bc4:	4b41      	ldr	r3, [pc, #260]	; (8002ccc <G_q+0x314>)
 8002bc6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002bca:	443a      	add	r2, r7
 8002bcc:	4413      	add	r3, r2
 8002bce:	ed93 7b00 	vldr	d7, [r3]
 8002bd2:	eeb1 7b47 	vneg.f64	d7, d7
 8002bd6:	f241 13b0 	movw	r3, #4528	; 0x11b0
 8002bda:	443b      	add	r3, r7
 8002bdc:	ed83 7b02 	vstr	d7, [r3, #8]
  t277.re = t299.re;
 8002be0:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002be4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002be8:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 8002bec:	e9c2 3400 	strd	r3, r4, [r2]
  t277.im = theta2;
 8002bf0:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 8002bf4:	4b35      	ldr	r3, [pc, #212]	; (8002ccc <G_q+0x314>)
 8002bf6:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002bfa:	4439      	add	r1, r7
 8002bfc:	440b      	add	r3, r1
 8002bfe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002c02:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t276.re = -t299.re;
 8002c06:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002c0a:	ed93 7b00 	vldr	d7, [r3]
 8002c0e:	eeb1 7b47 	vneg.f64	d7, d7
 8002c12:	f241 1390 	movw	r3, #4496	; 0x1190
 8002c16:	443b      	add	r3, r7
 8002c18:	ed83 7b00 	vstr	d7, [r3]
  t276.im = -theta2;
 8002c1c:	4b2b      	ldr	r3, [pc, #172]	; (8002ccc <G_q+0x314>)
 8002c1e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002c22:	443a      	add	r2, r7
 8002c24:	4413      	add	r3, r2
 8002c26:	ed93 7b00 	vldr	d7, [r3]
 8002c2a:	eeb1 7b47 	vneg.f64	d7, d7
 8002c2e:	f241 1390 	movw	r3, #4496	; 0x1190
 8002c32:	443b      	add	r3, r7
 8002c34:	ed83 7b02 	vstr	d7, [r3, #8]
  t273.re = t299.re;
 8002c38:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002c3c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002c40:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 8002c44:	e9c2 3400 	strd	r3, r4, [r2]
  t273.im = theta2;
 8002c48:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 8002c4c:	4b1f      	ldr	r3, [pc, #124]	; (8002ccc <G_q+0x314>)
 8002c4e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002c52:	4439      	add	r1, r7
 8002c54:	440b      	add	r3, r1
 8002c56:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002c5a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t272.re = -t299.re;
 8002c5e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002c62:	ed93 7b00 	vldr	d7, [r3]
 8002c66:	eeb1 7b47 	vneg.f64	d7, d7
 8002c6a:	f241 1370 	movw	r3, #4464	; 0x1170
 8002c6e:	443b      	add	r3, r7
 8002c70:	ed83 7b00 	vstr	d7, [r3]
  t272.im = -theta2;
 8002c74:	4b15      	ldr	r3, [pc, #84]	; (8002ccc <G_q+0x314>)
 8002c76:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002c7a:	443a      	add	r2, r7
 8002c7c:	4413      	add	r3, r2
 8002c7e:	ed93 7b00 	vldr	d7, [r3]
 8002c82:	eeb1 7b47 	vneg.f64	d7, d7
 8002c86:	f241 1370 	movw	r3, #4464	; 0x1170
 8002c8a:	443b      	add	r3, r7
 8002c8c:	ed83 7b02 	vstr	d7, [r3, #8]
  t269.re = t299.re;
 8002c90:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002c94:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002c98:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8002c9c:	e9c2 3400 	strd	r3, r4, [r2]
  t269.im = theta2;
 8002ca0:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8002ca4:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <G_q+0x314>)
 8002ca6:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002caa:	4439      	add	r1, r7
 8002cac:	440b      	add	r3, r1
 8002cae:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002cb2:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t268.re = -t299.re;
 8002cb6:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002cba:	ed93 7b00 	vldr	d7, [r3]
 8002cbe:	e00f      	b.n	8002ce0 <G_q+0x328>
	...
 8002cc8:	ffffec58 	.word	0xffffec58
 8002ccc:	ffffec50 	.word	0xffffec50
 8002cd0:	ffffec48 	.word	0xffffec48
 8002cd4:	ffffec38 	.word	0xffffec38
 8002cd8:	ffffec34 	.word	0xffffec34
 8002cdc:	24000314 	.word	0x24000314
 8002ce0:	eeb1 7b47 	vneg.f64	d7, d7
 8002ce4:	f241 1350 	movw	r3, #4432	; 0x1150
 8002ce8:	443b      	add	r3, r7
 8002cea:	ed83 7b00 	vstr	d7, [r3]
  t268.im = -theta2;
 8002cee:	4bc0      	ldr	r3, [pc, #768]	; (8002ff0 <G_q+0x638>)
 8002cf0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002cf4:	443a      	add	r2, r7
 8002cf6:	4413      	add	r3, r2
 8002cf8:	ed93 7b00 	vldr	d7, [r3]
 8002cfc:	eeb1 7b47 	vneg.f64	d7, d7
 8002d00:	f241 1350 	movw	r3, #4432	; 0x1150
 8002d04:	443b      	add	r3, r7
 8002d06:	ed83 7b02 	vstr	d7, [r3, #8]
  t263.re = t299.re;
 8002d0a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002d0e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002d12:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8002d16:	e9c2 3400 	strd	r3, r4, [r2]
  t263.im = theta2;
 8002d1a:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8002d1e:	4bb4      	ldr	r3, [pc, #720]	; (8002ff0 <G_q+0x638>)
 8002d20:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002d24:	4439      	add	r1, r7
 8002d26:	440b      	add	r3, r1
 8002d28:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002d2c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t262.re = -t299.re;
 8002d30:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002d34:	ed93 7b00 	vldr	d7, [r3]
 8002d38:	eeb1 7b47 	vneg.f64	d7, d7
 8002d3c:	f241 1330 	movw	r3, #4400	; 0x1130
 8002d40:	443b      	add	r3, r7
 8002d42:	ed83 7b00 	vstr	d7, [r3]
  t262.im = -theta2;
 8002d46:	4baa      	ldr	r3, [pc, #680]	; (8002ff0 <G_q+0x638>)
 8002d48:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002d4c:	443a      	add	r2, r7
 8002d4e:	4413      	add	r3, r2
 8002d50:	ed93 7b00 	vldr	d7, [r3]
 8002d54:	eeb1 7b47 	vneg.f64	d7, d7
 8002d58:	f241 1330 	movw	r3, #4400	; 0x1130
 8002d5c:	443b      	add	r3, r7
 8002d5e:	ed83 7b02 	vstr	d7, [r3, #8]
  t259.re = t299.re;
 8002d62:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002d66:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002d6a:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 8002d6e:	e9c2 3400 	strd	r3, r4, [r2]
  t259.im = theta2;
 8002d72:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 8002d76:	4b9e      	ldr	r3, [pc, #632]	; (8002ff0 <G_q+0x638>)
 8002d78:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002d7c:	4439      	add	r1, r7
 8002d7e:	440b      	add	r3, r1
 8002d80:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002d84:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t258.re = -t299.re;
 8002d88:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002d8c:	ed93 7b00 	vldr	d7, [r3]
 8002d90:	eeb1 7b47 	vneg.f64	d7, d7
 8002d94:	f241 1310 	movw	r3, #4368	; 0x1110
 8002d98:	443b      	add	r3, r7
 8002d9a:	ed83 7b00 	vstr	d7, [r3]
  t258.im = -theta2;
 8002d9e:	4b94      	ldr	r3, [pc, #592]	; (8002ff0 <G_q+0x638>)
 8002da0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002da4:	443a      	add	r2, r7
 8002da6:	4413      	add	r3, r2
 8002da8:	ed93 7b00 	vldr	d7, [r3]
 8002dac:	eeb1 7b47 	vneg.f64	d7, d7
 8002db0:	f241 1310 	movw	r3, #4368	; 0x1110
 8002db4:	443b      	add	r3, r7
 8002db6:	ed83 7b02 	vstr	d7, [r3, #8]
  t251.re = t299.re;
 8002dba:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002dbe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002dc2:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8002dc6:	e9c2 3400 	strd	r3, r4, [r2]
  t251.im = theta2;
 8002dca:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8002dce:	4b88      	ldr	r3, [pc, #544]	; (8002ff0 <G_q+0x638>)
 8002dd0:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002dd4:	4439      	add	r1, r7
 8002dd6:	440b      	add	r3, r1
 8002dd8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002ddc:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t250.re = -t299.re;
 8002de0:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002de4:	ed93 7b00 	vldr	d7, [r3]
 8002de8:	eeb1 7b47 	vneg.f64	d7, d7
 8002dec:	f241 03f0 	movw	r3, #4336	; 0x10f0
 8002df0:	443b      	add	r3, r7
 8002df2:	ed83 7b00 	vstr	d7, [r3]
  t250.im = -theta2;
 8002df6:	4b7e      	ldr	r3, [pc, #504]	; (8002ff0 <G_q+0x638>)
 8002df8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002dfc:	443a      	add	r2, r7
 8002dfe:	4413      	add	r3, r2
 8002e00:	ed93 7b00 	vldr	d7, [r3]
 8002e04:	eeb1 7b47 	vneg.f64	d7, d7
 8002e08:	f241 03f0 	movw	r3, #4336	; 0x10f0
 8002e0c:	443b      	add	r3, r7
 8002e0e:	ed83 7b02 	vstr	d7, [r3, #8]
  t249.re = t299.re;
 8002e12:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002e16:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002e1a:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8002e1e:	e9c2 3400 	strd	r3, r4, [r2]
  t249.im = theta2;
 8002e22:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8002e26:	4b72      	ldr	r3, [pc, #456]	; (8002ff0 <G_q+0x638>)
 8002e28:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002e2c:	4439      	add	r1, r7
 8002e2e:	440b      	add	r3, r1
 8002e30:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002e34:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t248.re = -t299.re;
 8002e38:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002e3c:	ed93 7b00 	vldr	d7, [r3]
 8002e40:	eeb1 7b47 	vneg.f64	d7, d7
 8002e44:	f241 03d0 	movw	r3, #4304	; 0x10d0
 8002e48:	443b      	add	r3, r7
 8002e4a:	ed83 7b00 	vstr	d7, [r3]
  t248.im = -theta2;
 8002e4e:	4b68      	ldr	r3, [pc, #416]	; (8002ff0 <G_q+0x638>)
 8002e50:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002e54:	443a      	add	r2, r7
 8002e56:	4413      	add	r3, r2
 8002e58:	ed93 7b00 	vldr	d7, [r3]
 8002e5c:	eeb1 7b47 	vneg.f64	d7, d7
 8002e60:	f241 03d0 	movw	r3, #4304	; 0x10d0
 8002e64:	443b      	add	r3, r7
 8002e66:	ed83 7b02 	vstr	d7, [r3, #8]
  t245.re = t299.re;
 8002e6a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002e6e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002e72:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 8002e76:	e9c2 3400 	strd	r3, r4, [r2]
  t245.im = theta2;
 8002e7a:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 8002e7e:	4b5c      	ldr	r3, [pc, #368]	; (8002ff0 <G_q+0x638>)
 8002e80:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002e84:	4439      	add	r1, r7
 8002e86:	440b      	add	r3, r1
 8002e88:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002e8c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t244.re = -t299.re;
 8002e90:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002e94:	ed93 7b00 	vldr	d7, [r3]
 8002e98:	eeb1 7b47 	vneg.f64	d7, d7
 8002e9c:	f241 03b0 	movw	r3, #4272	; 0x10b0
 8002ea0:	443b      	add	r3, r7
 8002ea2:	ed83 7b00 	vstr	d7, [r3]
  t244.im = -theta2;
 8002ea6:	4b52      	ldr	r3, [pc, #328]	; (8002ff0 <G_q+0x638>)
 8002ea8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002eac:	443a      	add	r2, r7
 8002eae:	4413      	add	r3, r2
 8002eb0:	ed93 7b00 	vldr	d7, [r3]
 8002eb4:	eeb1 7b47 	vneg.f64	d7, d7
 8002eb8:	f241 03b0 	movw	r3, #4272	; 0x10b0
 8002ebc:	443b      	add	r3, r7
 8002ebe:	ed83 7b02 	vstr	d7, [r3, #8]
  t239.re = t299.re;
 8002ec2:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002ec6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002eca:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8002ece:	e9c2 3400 	strd	r3, r4, [r2]
  t239.im = theta2;
 8002ed2:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8002ed6:	4b46      	ldr	r3, [pc, #280]	; (8002ff0 <G_q+0x638>)
 8002ed8:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002edc:	4439      	add	r1, r7
 8002ede:	440b      	add	r3, r1
 8002ee0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002ee4:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t238.re = -t299.re;
 8002ee8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002eec:	ed93 7b00 	vldr	d7, [r3]
 8002ef0:	eeb1 7b47 	vneg.f64	d7, d7
 8002ef4:	f241 0390 	movw	r3, #4240	; 0x1090
 8002ef8:	443b      	add	r3, r7
 8002efa:	ed83 7b00 	vstr	d7, [r3]
  t238.im = -theta2;
 8002efe:	4b3c      	ldr	r3, [pc, #240]	; (8002ff0 <G_q+0x638>)
 8002f00:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002f04:	443a      	add	r2, r7
 8002f06:	4413      	add	r3, r2
 8002f08:	ed93 7b00 	vldr	d7, [r3]
 8002f0c:	eeb1 7b47 	vneg.f64	d7, d7
 8002f10:	f241 0390 	movw	r3, #4240	; 0x1090
 8002f14:	443b      	add	r3, r7
 8002f16:	ed83 7b02 	vstr	d7, [r3, #8]
  t237.re = t299.re;
 8002f1a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002f1e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002f22:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002f26:	e9c2 3400 	strd	r3, r4, [r2]
  t237.im = theta2;
 8002f2a:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002f2e:	4b30      	ldr	r3, [pc, #192]	; (8002ff0 <G_q+0x638>)
 8002f30:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002f34:	4439      	add	r1, r7
 8002f36:	440b      	add	r3, r1
 8002f38:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002f3c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t236.re = -t299.re;
 8002f40:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002f44:	ed93 7b00 	vldr	d7, [r3]
 8002f48:	eeb1 7b47 	vneg.f64	d7, d7
 8002f4c:	f241 0370 	movw	r3, #4208	; 0x1070
 8002f50:	443b      	add	r3, r7
 8002f52:	ed83 7b00 	vstr	d7, [r3]
  t236.im = -theta2;
 8002f56:	4b26      	ldr	r3, [pc, #152]	; (8002ff0 <G_q+0x638>)
 8002f58:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002f5c:	443a      	add	r2, r7
 8002f5e:	4413      	add	r3, r2
 8002f60:	ed93 7b00 	vldr	d7, [r3]
 8002f64:	eeb1 7b47 	vneg.f64	d7, d7
 8002f68:	f241 0370 	movw	r3, #4208	; 0x1070
 8002f6c:	443b      	add	r3, r7
 8002f6e:	ed83 7b02 	vstr	d7, [r3, #8]
  t233.re = t299.re;
 8002f72:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002f76:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002f7a:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002f7e:	e9c2 3400 	strd	r3, r4, [r2]
  t233.im = theta2;
 8002f82:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002f86:	4b1a      	ldr	r3, [pc, #104]	; (8002ff0 <G_q+0x638>)
 8002f88:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002f8c:	4439      	add	r1, r7
 8002f8e:	440b      	add	r3, r1
 8002f90:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002f94:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t232.re = -t299.re;
 8002f98:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002f9c:	ed93 7b00 	vldr	d7, [r3]
 8002fa0:	eeb1 7b47 	vneg.f64	d7, d7
 8002fa4:	f241 0350 	movw	r3, #4176	; 0x1050
 8002fa8:	443b      	add	r3, r7
 8002faa:	ed83 7b00 	vstr	d7, [r3]
  t232.im = -theta2;
 8002fae:	4b10      	ldr	r3, [pc, #64]	; (8002ff0 <G_q+0x638>)
 8002fb0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002fb4:	443a      	add	r2, r7
 8002fb6:	4413      	add	r3, r2
 8002fb8:	ed93 7b00 	vldr	d7, [r3]
 8002fbc:	eeb1 7b47 	vneg.f64	d7, d7
 8002fc0:	f241 0350 	movw	r3, #4176	; 0x1050
 8002fc4:	443b      	add	r3, r7
 8002fc6:	ed83 7b02 	vstr	d7, [r3, #8]
  t227.re = t299.re;
 8002fca:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002fce:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002fd2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002fd6:	e9c2 3400 	strd	r3, r4, [r2]
  t227.im = theta2;
 8002fda:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002fde:	4b04      	ldr	r3, [pc, #16]	; (8002ff0 <G_q+0x638>)
 8002fe0:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002fe4:	4439      	add	r1, r7
 8002fe6:	440b      	add	r3, r1
 8002fe8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002fec:	e002      	b.n	8002ff4 <G_q+0x63c>
 8002fee:	bf00      	nop
 8002ff0:	ffffec50 	.word	0xffffec50
 8002ff4:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t226.re = -t299.re;
 8002ff8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002ffc:	ed93 7b00 	vldr	d7, [r3]
 8003000:	eeb1 7b47 	vneg.f64	d7, d7
 8003004:	f241 0330 	movw	r3, #4144	; 0x1030
 8003008:	443b      	add	r3, r7
 800300a:	ed83 7b00 	vstr	d7, [r3]
  t226.im = -theta2;
 800300e:	4bc4      	ldr	r3, [pc, #784]	; (8003320 <G_q+0x968>)
 8003010:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003014:	443a      	add	r2, r7
 8003016:	4413      	add	r3, r2
 8003018:	ed93 7b00 	vldr	d7, [r3]
 800301c:	eeb1 7b47 	vneg.f64	d7, d7
 8003020:	f241 0330 	movw	r3, #4144	; 0x1030
 8003024:	443b      	add	r3, r7
 8003026:	ed83 7b02 	vstr	d7, [r3, #8]
  t223.re = t299.re;
 800302a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800302e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003032:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003036:	e9c2 3400 	strd	r3, r4, [r2]
  t223.im = theta2;
 800303a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800303e:	4bb8      	ldr	r3, [pc, #736]	; (8003320 <G_q+0x968>)
 8003040:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003044:	4439      	add	r1, r7
 8003046:	440b      	add	r3, r1
 8003048:	e9d3 3400 	ldrd	r3, r4, [r3]
 800304c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t222.re = -t299.re;
 8003050:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003054:	ed93 7b00 	vldr	d7, [r3]
 8003058:	eeb1 7b47 	vneg.f64	d7, d7
 800305c:	f241 0310 	movw	r3, #4112	; 0x1010
 8003060:	443b      	add	r3, r7
 8003062:	ed83 7b00 	vstr	d7, [r3]
  t222.im = -theta2;
 8003066:	4bae      	ldr	r3, [pc, #696]	; (8003320 <G_q+0x968>)
 8003068:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800306c:	443a      	add	r2, r7
 800306e:	4413      	add	r3, r2
 8003070:	ed93 7b00 	vldr	d7, [r3]
 8003074:	eeb1 7b47 	vneg.f64	d7, d7
 8003078:	f241 0310 	movw	r3, #4112	; 0x1010
 800307c:	443b      	add	r3, r7
 800307e:	ed83 7b02 	vstr	d7, [r3, #8]
  t217.re = t299.re;
 8003082:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003086:	e9d3 3400 	ldrd	r3, r4, [r3]
 800308a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800308e:	e9c2 3400 	strd	r3, r4, [r2]
  t217.im = theta2;
 8003092:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003096:	4ba2      	ldr	r3, [pc, #648]	; (8003320 <G_q+0x968>)
 8003098:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800309c:	4439      	add	r1, r7
 800309e:	440b      	add	r3, r1
 80030a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80030a4:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t216.re = -t299.re;
 80030a8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80030ac:	ed93 7b00 	vldr	d7, [r3]
 80030b0:	eeb1 7b47 	vneg.f64	d7, d7
 80030b4:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 80030b8:	ed83 7b00 	vstr	d7, [r3]
  t216.im = -theta2;
 80030bc:	4b98      	ldr	r3, [pc, #608]	; (8003320 <G_q+0x968>)
 80030be:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80030c2:	443a      	add	r2, r7
 80030c4:	4413      	add	r3, r2
 80030c6:	ed93 7b00 	vldr	d7, [r3]
 80030ca:	eeb1 7b47 	vneg.f64	d7, d7
 80030ce:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 80030d2:	ed83 7b02 	vstr	d7, [r3, #8]
  t213.re = t299.re;
 80030d6:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80030da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80030de:	f507 627e 	add.w	r2, r7, #4064	; 0xfe0
 80030e2:	e9c2 3400 	strd	r3, r4, [r2]
  t213.im = theta2;
 80030e6:	f507 627e 	add.w	r2, r7, #4064	; 0xfe0
 80030ea:	4b8d      	ldr	r3, [pc, #564]	; (8003320 <G_q+0x968>)
 80030ec:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80030f0:	4439      	add	r1, r7
 80030f2:	440b      	add	r3, r1
 80030f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80030f8:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t212.re = -t299.re;
 80030fc:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003100:	ed93 7b00 	vldr	d7, [r3]
 8003104:	eeb1 7b47 	vneg.f64	d7, d7
 8003108:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 800310c:	ed83 7b00 	vstr	d7, [r3]
  t212.im = -theta2;
 8003110:	4b83      	ldr	r3, [pc, #524]	; (8003320 <G_q+0x968>)
 8003112:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003116:	443a      	add	r2, r7
 8003118:	4413      	add	r3, r2
 800311a:	ed93 7b00 	vldr	d7, [r3]
 800311e:	eeb1 7b47 	vneg.f64	d7, d7
 8003122:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 8003126:	ed83 7b02 	vstr	d7, [r3, #8]
  t205.re = t299.re;
 800312a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800312e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003132:	f507 627c 	add.w	r2, r7, #4032	; 0xfc0
 8003136:	e9c2 3400 	strd	r3, r4, [r2]
  t205.im = theta2;
 800313a:	f507 627c 	add.w	r2, r7, #4032	; 0xfc0
 800313e:	4b78      	ldr	r3, [pc, #480]	; (8003320 <G_q+0x968>)
 8003140:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003144:	4439      	add	r1, r7
 8003146:	440b      	add	r3, r1
 8003148:	e9d3 3400 	ldrd	r3, r4, [r3]
 800314c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t204.re = -t299.re;
 8003150:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003154:	ed93 7b00 	vldr	d7, [r3]
 8003158:	eeb1 7b47 	vneg.f64	d7, d7
 800315c:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 8003160:	ed83 7b00 	vstr	d7, [r3]
  t204.im = -theta2;
 8003164:	4b6e      	ldr	r3, [pc, #440]	; (8003320 <G_q+0x968>)
 8003166:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800316a:	443a      	add	r2, r7
 800316c:	4413      	add	r3, r2
 800316e:	ed93 7b00 	vldr	d7, [r3]
 8003172:	eeb1 7b47 	vneg.f64	d7, d7
 8003176:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 800317a:	ed83 7b02 	vstr	d7, [r3, #8]
  t203.re = t299.re;
 800317e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003182:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003186:	f507 627a 	add.w	r2, r7, #4000	; 0xfa0
 800318a:	e9c2 3400 	strd	r3, r4, [r2]
  t203.im = theta2;
 800318e:	f507 627a 	add.w	r2, r7, #4000	; 0xfa0
 8003192:	4b63      	ldr	r3, [pc, #396]	; (8003320 <G_q+0x968>)
 8003194:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003198:	4439      	add	r1, r7
 800319a:	440b      	add	r3, r1
 800319c:	e9d3 3400 	ldrd	r3, r4, [r3]
 80031a0:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t202.re = -t299.re;
 80031a4:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80031a8:	ed93 7b00 	vldr	d7, [r3]
 80031ac:	eeb1 7b47 	vneg.f64	d7, d7
 80031b0:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 80031b4:	ed83 7b00 	vstr	d7, [r3]
  t202.im = -theta2;
 80031b8:	4b59      	ldr	r3, [pc, #356]	; (8003320 <G_q+0x968>)
 80031ba:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80031be:	443a      	add	r2, r7
 80031c0:	4413      	add	r3, r2
 80031c2:	ed93 7b00 	vldr	d7, [r3]
 80031c6:	eeb1 7b47 	vneg.f64	d7, d7
 80031ca:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 80031ce:	ed83 7b02 	vstr	d7, [r3, #8]
  t199.re = t299.re;
 80031d2:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80031d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80031da:	f507 6278 	add.w	r2, r7, #3968	; 0xf80
 80031de:	e9c2 3400 	strd	r3, r4, [r2]
  t199.im = theta2;
 80031e2:	f507 6278 	add.w	r2, r7, #3968	; 0xf80
 80031e6:	4b4e      	ldr	r3, [pc, #312]	; (8003320 <G_q+0x968>)
 80031e8:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80031ec:	4439      	add	r1, r7
 80031ee:	440b      	add	r3, r1
 80031f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80031f4:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t198.re = -t299.re;
 80031f8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80031fc:	ed93 7b00 	vldr	d7, [r3]
 8003200:	eeb1 7b47 	vneg.f64	d7, d7
 8003204:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003208:	ed83 7b00 	vstr	d7, [r3]
  t198.im = -theta2;
 800320c:	4b44      	ldr	r3, [pc, #272]	; (8003320 <G_q+0x968>)
 800320e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003212:	443a      	add	r2, r7
 8003214:	4413      	add	r3, r2
 8003216:	ed93 7b00 	vldr	d7, [r3]
 800321a:	eeb1 7b47 	vneg.f64	d7, d7
 800321e:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8003222:	ed83 7b02 	vstr	d7, [r3, #8]
  t193.re = t299.re;
 8003226:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800322a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800322e:	f507 6276 	add.w	r2, r7, #3936	; 0xf60
 8003232:	e9c2 3400 	strd	r3, r4, [r2]
  t193.im = theta2;
 8003236:	f507 6276 	add.w	r2, r7, #3936	; 0xf60
 800323a:	4b39      	ldr	r3, [pc, #228]	; (8003320 <G_q+0x968>)
 800323c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003240:	4439      	add	r1, r7
 8003242:	440b      	add	r3, r1
 8003244:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003248:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t192.re = -t299.re;
 800324c:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003250:	ed93 7b00 	vldr	d7, [r3]
 8003254:	eeb1 7b47 	vneg.f64	d7, d7
 8003258:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800325c:	ed83 7b00 	vstr	d7, [r3]
  t192.im = -theta2;
 8003260:	4b2f      	ldr	r3, [pc, #188]	; (8003320 <G_q+0x968>)
 8003262:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003266:	443a      	add	r2, r7
 8003268:	4413      	add	r3, r2
 800326a:	ed93 7b00 	vldr	d7, [r3]
 800326e:	eeb1 7b47 	vneg.f64	d7, d7
 8003272:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 8003276:	ed83 7b02 	vstr	d7, [r3, #8]
  t189.re = t299.re;
 800327a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800327e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003282:	f507 6274 	add.w	r2, r7, #3904	; 0xf40
 8003286:	e9c2 3400 	strd	r3, r4, [r2]
  t189.im = theta2;
 800328a:	f507 6274 	add.w	r2, r7, #3904	; 0xf40
 800328e:	4b24      	ldr	r3, [pc, #144]	; (8003320 <G_q+0x968>)
 8003290:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003294:	4439      	add	r1, r7
 8003296:	440b      	add	r3, r1
 8003298:	e9d3 3400 	ldrd	r3, r4, [r3]
 800329c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t188.re = -t299.re;
 80032a0:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80032a4:	ed93 7b00 	vldr	d7, [r3]
 80032a8:	eeb1 7b47 	vneg.f64	d7, d7
 80032ac:	f507 6373 	add.w	r3, r7, #3888	; 0xf30
 80032b0:	ed83 7b00 	vstr	d7, [r3]
  t188.im = -theta2;
 80032b4:	4b1a      	ldr	r3, [pc, #104]	; (8003320 <G_q+0x968>)
 80032b6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80032ba:	443a      	add	r2, r7
 80032bc:	4413      	add	r3, r2
 80032be:	ed93 7b00 	vldr	d7, [r3]
 80032c2:	eeb1 7b47 	vneg.f64	d7, d7
 80032c6:	f507 6373 	add.w	r3, r7, #3888	; 0xf30
 80032ca:	ed83 7b02 	vstr	d7, [r3, #8]
  t181.re = t299.re;
 80032ce:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80032d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80032d6:	f507 6272 	add.w	r2, r7, #3872	; 0xf20
 80032da:	e9c2 3400 	strd	r3, r4, [r2]
  t181.im = theta2;
 80032de:	f507 6272 	add.w	r2, r7, #3872	; 0xf20
 80032e2:	4b0f      	ldr	r3, [pc, #60]	; (8003320 <G_q+0x968>)
 80032e4:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80032e8:	4439      	add	r1, r7
 80032ea:	440b      	add	r3, r1
 80032ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 80032f0:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t180.re = -t299.re;
 80032f4:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80032f8:	ed93 7b00 	vldr	d7, [r3]
 80032fc:	eeb1 7b47 	vneg.f64	d7, d7
 8003300:	f507 6371 	add.w	r3, r7, #3856	; 0xf10
 8003304:	ed83 7b00 	vstr	d7, [r3]
  t180.im = -theta2;
 8003308:	4b05      	ldr	r3, [pc, #20]	; (8003320 <G_q+0x968>)
 800330a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800330e:	443a      	add	r2, r7
 8003310:	4413      	add	r3, r2
 8003312:	ed93 7b00 	vldr	d7, [r3]
 8003316:	eeb1 7b47 	vneg.f64	d7, d7
 800331a:	f507 6371 	add.w	r3, r7, #3856	; 0xf10
 800331e:	e001      	b.n	8003324 <G_q+0x96c>
 8003320:	ffffec50 	.word	0xffffec50
 8003324:	ed83 7b02 	vstr	d7, [r3, #8]
  t179.re = t299.re;
 8003328:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800332c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003330:	f507 6270 	add.w	r2, r7, #3840	; 0xf00
 8003334:	e9c2 3400 	strd	r3, r4, [r2]
  t179.im = theta2;
 8003338:	f507 6270 	add.w	r2, r7, #3840	; 0xf00
 800333c:	4bc3      	ldr	r3, [pc, #780]	; (800364c <G_q+0xc94>)
 800333e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003342:	4439      	add	r1, r7
 8003344:	440b      	add	r3, r1
 8003346:	e9d3 3400 	ldrd	r3, r4, [r3]
 800334a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t178.re = -t299.re;
 800334e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003352:	ed93 7b00 	vldr	d7, [r3]
 8003356:	eeb1 7b47 	vneg.f64	d7, d7
 800335a:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 800335e:	ed83 7b00 	vstr	d7, [r3]
  t178.im = -theta2;
 8003362:	4bba      	ldr	r3, [pc, #744]	; (800364c <G_q+0xc94>)
 8003364:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003368:	443a      	add	r2, r7
 800336a:	4413      	add	r3, r2
 800336c:	ed93 7b00 	vldr	d7, [r3]
 8003370:	eeb1 7b47 	vneg.f64	d7, d7
 8003374:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8003378:	ed83 7b02 	vstr	d7, [r3, #8]
  t175.re = t299.re;
 800337c:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003380:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003384:	f507 626e 	add.w	r2, r7, #3808	; 0xee0
 8003388:	e9c2 3400 	strd	r3, r4, [r2]
  t175.im = theta2;
 800338c:	f507 626e 	add.w	r2, r7, #3808	; 0xee0
 8003390:	4bae      	ldr	r3, [pc, #696]	; (800364c <G_q+0xc94>)
 8003392:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003396:	4439      	add	r1, r7
 8003398:	440b      	add	r3, r1
 800339a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800339e:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t174.re = -t299.re;
 80033a2:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80033a6:	ed93 7b00 	vldr	d7, [r3]
 80033aa:	eeb1 7b47 	vneg.f64	d7, d7
 80033ae:	f507 636d 	add.w	r3, r7, #3792	; 0xed0
 80033b2:	ed83 7b00 	vstr	d7, [r3]
  t174.im = -theta2;
 80033b6:	4ba5      	ldr	r3, [pc, #660]	; (800364c <G_q+0xc94>)
 80033b8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80033bc:	443a      	add	r2, r7
 80033be:	4413      	add	r3, r2
 80033c0:	ed93 7b00 	vldr	d7, [r3]
 80033c4:	eeb1 7b47 	vneg.f64	d7, d7
 80033c8:	f507 636d 	add.w	r3, r7, #3792	; 0xed0
 80033cc:	ed83 7b02 	vstr	d7, [r3, #8]
  t171.re = t299.re;
 80033d0:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80033d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80033d8:	f507 626c 	add.w	r2, r7, #3776	; 0xec0
 80033dc:	e9c2 3400 	strd	r3, r4, [r2]
  t171.im = theta2;
 80033e0:	f507 626c 	add.w	r2, r7, #3776	; 0xec0
 80033e4:	4b99      	ldr	r3, [pc, #612]	; (800364c <G_q+0xc94>)
 80033e6:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80033ea:	4439      	add	r1, r7
 80033ec:	440b      	add	r3, r1
 80033ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80033f2:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t170.re = -t299.re;
 80033f6:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80033fa:	ed93 7b00 	vldr	d7, [r3]
 80033fe:	eeb1 7b47 	vneg.f64	d7, d7
 8003402:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 8003406:	ed83 7b00 	vstr	d7, [r3]
  t170.im = -theta2;
 800340a:	4b90      	ldr	r3, [pc, #576]	; (800364c <G_q+0xc94>)
 800340c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003410:	443a      	add	r2, r7
 8003412:	4413      	add	r3, r2
 8003414:	ed93 7b00 	vldr	d7, [r3]
 8003418:	eeb1 7b47 	vneg.f64	d7, d7
 800341c:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 8003420:	ed83 7b02 	vstr	d7, [r3, #8]
  t167.re = t299.re;
 8003424:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003428:	e9d3 3400 	ldrd	r3, r4, [r3]
 800342c:	f507 626a 	add.w	r2, r7, #3744	; 0xea0
 8003430:	e9c2 3400 	strd	r3, r4, [r2]
  t167.im = theta2;
 8003434:	f507 626a 	add.w	r2, r7, #3744	; 0xea0
 8003438:	4b84      	ldr	r3, [pc, #528]	; (800364c <G_q+0xc94>)
 800343a:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800343e:	4439      	add	r1, r7
 8003440:	440b      	add	r3, r1
 8003442:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003446:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t166.re = -t299.re;
 800344a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800344e:	ed93 7b00 	vldr	d7, [r3]
 8003452:	eeb1 7b47 	vneg.f64	d7, d7
 8003456:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 800345a:	ed83 7b00 	vstr	d7, [r3]
  t166.im = -theta2;
 800345e:	4b7b      	ldr	r3, [pc, #492]	; (800364c <G_q+0xc94>)
 8003460:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003464:	443a      	add	r2, r7
 8003466:	4413      	add	r3, r2
 8003468:	ed93 7b00 	vldr	d7, [r3]
 800346c:	eeb1 7b47 	vneg.f64	d7, d7
 8003470:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 8003474:	ed83 7b02 	vstr	d7, [r3, #8]
  t161.re = t299.re;
 8003478:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800347c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003480:	f507 6268 	add.w	r2, r7, #3712	; 0xe80
 8003484:	e9c2 3400 	strd	r3, r4, [r2]
  t161.im = theta2;
 8003488:	f507 6268 	add.w	r2, r7, #3712	; 0xe80
 800348c:	4b6f      	ldr	r3, [pc, #444]	; (800364c <G_q+0xc94>)
 800348e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003492:	4439      	add	r1, r7
 8003494:	440b      	add	r3, r1
 8003496:	e9d3 3400 	ldrd	r3, r4, [r3]
 800349a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t160.re = -t299.re;
 800349e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80034a2:	ed93 7b00 	vldr	d7, [r3]
 80034a6:	eeb1 7b47 	vneg.f64	d7, d7
 80034aa:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 80034ae:	ed83 7b00 	vstr	d7, [r3]
  t160.im = -theta2;
 80034b2:	4b66      	ldr	r3, [pc, #408]	; (800364c <G_q+0xc94>)
 80034b4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80034b8:	443a      	add	r2, r7
 80034ba:	4413      	add	r3, r2
 80034bc:	ed93 7b00 	vldr	d7, [r3]
 80034c0:	eeb1 7b47 	vneg.f64	d7, d7
 80034c4:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 80034c8:	ed83 7b02 	vstr	d7, [r3, #8]
  t157.re = t299.re;
 80034cc:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80034d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80034d4:	f507 6266 	add.w	r2, r7, #3680	; 0xe60
 80034d8:	e9c2 3400 	strd	r3, r4, [r2]
  t157.im = theta2;
 80034dc:	f507 6266 	add.w	r2, r7, #3680	; 0xe60
 80034e0:	4b5a      	ldr	r3, [pc, #360]	; (800364c <G_q+0xc94>)
 80034e2:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80034e6:	4439      	add	r1, r7
 80034e8:	440b      	add	r3, r1
 80034ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 80034ee:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t156.re = -t299.re;
 80034f2:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80034f6:	ed93 7b00 	vldr	d7, [r3]
 80034fa:	eeb1 7b47 	vneg.f64	d7, d7
 80034fe:	f507 6365 	add.w	r3, r7, #3664	; 0xe50
 8003502:	ed83 7b00 	vstr	d7, [r3]
  t156.im = -theta2;
 8003506:	4b51      	ldr	r3, [pc, #324]	; (800364c <G_q+0xc94>)
 8003508:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800350c:	443a      	add	r2, r7
 800350e:	4413      	add	r3, r2
 8003510:	ed93 7b00 	vldr	d7, [r3]
 8003514:	eeb1 7b47 	vneg.f64	d7, d7
 8003518:	f507 6365 	add.w	r3, r7, #3664	; 0xe50
 800351c:	ed83 7b02 	vstr	d7, [r3, #8]
  t149.re = t299.re;
 8003520:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003524:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003528:	f507 6264 	add.w	r2, r7, #3648	; 0xe40
 800352c:	e9c2 3400 	strd	r3, r4, [r2]
  t149.im = theta2;
 8003530:	f507 6264 	add.w	r2, r7, #3648	; 0xe40
 8003534:	4b45      	ldr	r3, [pc, #276]	; (800364c <G_q+0xc94>)
 8003536:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800353a:	4439      	add	r1, r7
 800353c:	440b      	add	r3, r1
 800353e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003542:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t148.re = -t299.re;
 8003546:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800354a:	ed93 7b00 	vldr	d7, [r3]
 800354e:	eeb1 7b47 	vneg.f64	d7, d7
 8003552:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 8003556:	ed83 7b00 	vstr	d7, [r3]
  t148.im = -theta2;
 800355a:	4b3c      	ldr	r3, [pc, #240]	; (800364c <G_q+0xc94>)
 800355c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003560:	443a      	add	r2, r7
 8003562:	4413      	add	r3, r2
 8003564:	ed93 7b00 	vldr	d7, [r3]
 8003568:	eeb1 7b47 	vneg.f64	d7, d7
 800356c:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 8003570:	ed83 7b02 	vstr	d7, [r3, #8]
  t147.re = t299.re;
 8003574:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003578:	e9d3 3400 	ldrd	r3, r4, [r3]
 800357c:	f507 6262 	add.w	r2, r7, #3616	; 0xe20
 8003580:	e9c2 3400 	strd	r3, r4, [r2]
  t147.im = theta2;
 8003584:	f507 6262 	add.w	r2, r7, #3616	; 0xe20
 8003588:	4b30      	ldr	r3, [pc, #192]	; (800364c <G_q+0xc94>)
 800358a:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800358e:	4439      	add	r1, r7
 8003590:	440b      	add	r3, r1
 8003592:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003596:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t146.re = -t299.re;
 800359a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800359e:	ed93 7b00 	vldr	d7, [r3]
 80035a2:	eeb1 7b47 	vneg.f64	d7, d7
 80035a6:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80035aa:	ed83 7b00 	vstr	d7, [r3]
  t146.im = -theta2;
 80035ae:	4b27      	ldr	r3, [pc, #156]	; (800364c <G_q+0xc94>)
 80035b0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80035b4:	443a      	add	r2, r7
 80035b6:	4413      	add	r3, r2
 80035b8:	ed93 7b00 	vldr	d7, [r3]
 80035bc:	eeb1 7b47 	vneg.f64	d7, d7
 80035c0:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80035c4:	ed83 7b02 	vstr	d7, [r3, #8]
  t143.re = t299.re;
 80035c8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80035cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80035d0:	f507 6260 	add.w	r2, r7, #3584	; 0xe00
 80035d4:	e9c2 3400 	strd	r3, r4, [r2]
  t143.im = theta2;
 80035d8:	f507 6260 	add.w	r2, r7, #3584	; 0xe00
 80035dc:	4b1b      	ldr	r3, [pc, #108]	; (800364c <G_q+0xc94>)
 80035de:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80035e2:	4439      	add	r1, r7
 80035e4:	440b      	add	r3, r1
 80035e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80035ea:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t142.re = -t299.re;
 80035ee:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80035f2:	ed93 7b00 	vldr	d7, [r3]
 80035f6:	eeb1 7b47 	vneg.f64	d7, d7
 80035fa:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 80035fe:	ed83 7b00 	vstr	d7, [r3]
  t142.im = -theta2;
 8003602:	4b12      	ldr	r3, [pc, #72]	; (800364c <G_q+0xc94>)
 8003604:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003608:	443a      	add	r2, r7
 800360a:	4413      	add	r3, r2
 800360c:	ed93 7b00 	vldr	d7, [r3]
 8003610:	eeb1 7b47 	vneg.f64	d7, d7
 8003614:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 8003618:	ed83 7b02 	vstr	d7, [r3, #8]
  t139.re = t299.re;
 800361c:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003620:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003624:	f507 625e 	add.w	r2, r7, #3552	; 0xde0
 8003628:	e9c2 3400 	strd	r3, r4, [r2]
  t139.im = theta2;
 800362c:	f507 625e 	add.w	r2, r7, #3552	; 0xde0
 8003630:	4b06      	ldr	r3, [pc, #24]	; (800364c <G_q+0xc94>)
 8003632:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003636:	4439      	add	r1, r7
 8003638:	440b      	add	r3, r1
 800363a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800363e:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t138.re = -t299.re;
 8003642:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003646:	ed93 7b00 	vldr	d7, [r3]
 800364a:	e001      	b.n	8003650 <G_q+0xc98>
 800364c:	ffffec50 	.word	0xffffec50
 8003650:	eeb1 7b47 	vneg.f64	d7, d7
 8003654:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 8003658:	ed83 7b00 	vstr	d7, [r3]
  t138.im = -theta2;
 800365c:	4bc4      	ldr	r3, [pc, #784]	; (8003970 <G_q+0xfb8>)
 800365e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003662:	443a      	add	r2, r7
 8003664:	4413      	add	r3, r2
 8003666:	ed93 7b00 	vldr	d7, [r3]
 800366a:	eeb1 7b47 	vneg.f64	d7, d7
 800366e:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 8003672:	ed83 7b02 	vstr	d7, [r3, #8]
  t133.re = t299.re;
 8003676:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800367a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800367e:	f507 625c 	add.w	r2, r7, #3520	; 0xdc0
 8003682:	e9c2 3400 	strd	r3, r4, [r2]
  t133.im = theta2;
 8003686:	f507 625c 	add.w	r2, r7, #3520	; 0xdc0
 800368a:	4bb9      	ldr	r3, [pc, #740]	; (8003970 <G_q+0xfb8>)
 800368c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003690:	4439      	add	r1, r7
 8003692:	440b      	add	r3, r1
 8003694:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003698:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t132.re = -t299.re;
 800369c:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80036a0:	ed93 7b00 	vldr	d7, [r3]
 80036a4:	eeb1 7b47 	vneg.f64	d7, d7
 80036a8:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 80036ac:	ed83 7b00 	vstr	d7, [r3]
  t132.im = -theta2;
 80036b0:	4baf      	ldr	r3, [pc, #700]	; (8003970 <G_q+0xfb8>)
 80036b2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80036b6:	443a      	add	r2, r7
 80036b8:	4413      	add	r3, r2
 80036ba:	ed93 7b00 	vldr	d7, [r3]
 80036be:	eeb1 7b47 	vneg.f64	d7, d7
 80036c2:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 80036c6:	ed83 7b02 	vstr	d7, [r3, #8]
  t127.re = t299.re;
 80036ca:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80036ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80036d2:	f507 625a 	add.w	r2, r7, #3488	; 0xda0
 80036d6:	e9c2 3400 	strd	r3, r4, [r2]
  t127.im = theta2;
 80036da:	f507 625a 	add.w	r2, r7, #3488	; 0xda0
 80036de:	4ba4      	ldr	r3, [pc, #656]	; (8003970 <G_q+0xfb8>)
 80036e0:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80036e4:	4439      	add	r1, r7
 80036e6:	440b      	add	r3, r1
 80036e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80036ec:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t126.re = -t299.re;
 80036f0:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80036f4:	ed93 7b00 	vldr	d7, [r3]
 80036f8:	eeb1 7b47 	vneg.f64	d7, d7
 80036fc:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 8003700:	ed83 7b00 	vstr	d7, [r3]
  t126.im = -theta2;
 8003704:	4b9a      	ldr	r3, [pc, #616]	; (8003970 <G_q+0xfb8>)
 8003706:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800370a:	443a      	add	r2, r7
 800370c:	4413      	add	r3, r2
 800370e:	ed93 7b00 	vldr	d7, [r3]
 8003712:	eeb1 7b47 	vneg.f64	d7, d7
 8003716:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 800371a:	ed83 7b02 	vstr	d7, [r3, #8]
  t119.re = t299.re;
 800371e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003722:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003726:	f507 6258 	add.w	r2, r7, #3456	; 0xd80
 800372a:	e9c2 3400 	strd	r3, r4, [r2]
  t119.im = theta2;
 800372e:	f507 6258 	add.w	r2, r7, #3456	; 0xd80
 8003732:	4b8f      	ldr	r3, [pc, #572]	; (8003970 <G_q+0xfb8>)
 8003734:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003738:	4439      	add	r1, r7
 800373a:	440b      	add	r3, r1
 800373c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003740:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t118.re = -t299.re;
 8003744:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003748:	ed93 7b00 	vldr	d7, [r3]
 800374c:	eeb1 7b47 	vneg.f64	d7, d7
 8003750:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 8003754:	ed83 7b00 	vstr	d7, [r3]
  t118.im = -theta2;
 8003758:	4b85      	ldr	r3, [pc, #532]	; (8003970 <G_q+0xfb8>)
 800375a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800375e:	443a      	add	r2, r7
 8003760:	4413      	add	r3, r2
 8003762:	ed93 7b00 	vldr	d7, [r3]
 8003766:	eeb1 7b47 	vneg.f64	d7, d7
 800376a:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 800376e:	ed83 7b02 	vstr	d7, [r3, #8]
  t117.re = t299.re;
 8003772:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003776:	e9d3 3400 	ldrd	r3, r4, [r3]
 800377a:	f507 6256 	add.w	r2, r7, #3424	; 0xd60
 800377e:	e9c2 3400 	strd	r3, r4, [r2]
  t117.im = theta2;
 8003782:	f507 6256 	add.w	r2, r7, #3424	; 0xd60
 8003786:	4b7a      	ldr	r3, [pc, #488]	; (8003970 <G_q+0xfb8>)
 8003788:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800378c:	4439      	add	r1, r7
 800378e:	440b      	add	r3, r1
 8003790:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003794:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t116.re = -t299.re;
 8003798:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800379c:	ed93 7b00 	vldr	d7, [r3]
 80037a0:	eeb1 7b47 	vneg.f64	d7, d7
 80037a4:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 80037a8:	ed83 7b00 	vstr	d7, [r3]
  t116.im = -theta2;
 80037ac:	4b70      	ldr	r3, [pc, #448]	; (8003970 <G_q+0xfb8>)
 80037ae:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80037b2:	443a      	add	r2, r7
 80037b4:	4413      	add	r3, r2
 80037b6:	ed93 7b00 	vldr	d7, [r3]
 80037ba:	eeb1 7b47 	vneg.f64	d7, d7
 80037be:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 80037c2:	ed83 7b02 	vstr	d7, [r3, #8]
  t111.re = t299.re;
 80037c6:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80037ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80037ce:	f507 6254 	add.w	r2, r7, #3392	; 0xd40
 80037d2:	e9c2 3400 	strd	r3, r4, [r2]
  t111.im = theta2;
 80037d6:	f507 6254 	add.w	r2, r7, #3392	; 0xd40
 80037da:	4b65      	ldr	r3, [pc, #404]	; (8003970 <G_q+0xfb8>)
 80037dc:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80037e0:	4439      	add	r1, r7
 80037e2:	440b      	add	r3, r1
 80037e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80037e8:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t110.re = -t299.re;
 80037ec:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80037f0:	ed93 7b00 	vldr	d7, [r3]
 80037f4:	eeb1 7b47 	vneg.f64	d7, d7
 80037f8:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 80037fc:	ed83 7b00 	vstr	d7, [r3]
  t110.im = -theta2;
 8003800:	4b5b      	ldr	r3, [pc, #364]	; (8003970 <G_q+0xfb8>)
 8003802:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003806:	443a      	add	r2, r7
 8003808:	4413      	add	r3, r2
 800380a:	ed93 7b00 	vldr	d7, [r3]
 800380e:	eeb1 7b47 	vneg.f64	d7, d7
 8003812:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8003816:	ed83 7b02 	vstr	d7, [r3, #8]
  t105.re = t299.re;
 800381a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800381e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003822:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8003826:	e9c2 3400 	strd	r3, r4, [r2]
  t105.im = theta2;
 800382a:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 800382e:	4b50      	ldr	r3, [pc, #320]	; (8003970 <G_q+0xfb8>)
 8003830:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003834:	4439      	add	r1, r7
 8003836:	440b      	add	r3, r1
 8003838:	e9d3 3400 	ldrd	r3, r4, [r3]
 800383c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t104.re = -t299.re;
 8003840:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003844:	ed93 7b00 	vldr	d7, [r3]
 8003848:	eeb1 7b47 	vneg.f64	d7, d7
 800384c:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8003850:	ed83 7b00 	vstr	d7, [r3]
  t104.im = -theta2;
 8003854:	4b46      	ldr	r3, [pc, #280]	; (8003970 <G_q+0xfb8>)
 8003856:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800385a:	443a      	add	r2, r7
 800385c:	4413      	add	r3, r2
 800385e:	ed93 7b00 	vldr	d7, [r3]
 8003862:	eeb1 7b47 	vneg.f64	d7, d7
 8003866:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 800386a:	ed83 7b02 	vstr	d7, [r3, #8]
  t97.re = t299.re;
 800386e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003872:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003876:	f507 6250 	add.w	r2, r7, #3328	; 0xd00
 800387a:	e9c2 3400 	strd	r3, r4, [r2]
  t97.im = theta2;
 800387e:	f507 6250 	add.w	r2, r7, #3328	; 0xd00
 8003882:	4b3b      	ldr	r3, [pc, #236]	; (8003970 <G_q+0xfb8>)
 8003884:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003888:	4439      	add	r1, r7
 800388a:	440b      	add	r3, r1
 800388c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003890:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t96.re = -t299.re;
 8003894:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003898:	ed93 7b00 	vldr	d7, [r3]
 800389c:	eeb1 7b47 	vneg.f64	d7, d7
 80038a0:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 80038a4:	ed83 7b00 	vstr	d7, [r3]
  t96.im = -theta2;
 80038a8:	4b31      	ldr	r3, [pc, #196]	; (8003970 <G_q+0xfb8>)
 80038aa:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80038ae:	443a      	add	r2, r7
 80038b0:	4413      	add	r3, r2
 80038b2:	ed93 7b00 	vldr	d7, [r3]
 80038b6:	eeb1 7b47 	vneg.f64	d7, d7
 80038ba:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 80038be:	ed83 7b02 	vstr	d7, [r3, #8]
  t95.re = t299.re;
 80038c2:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80038c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80038ca:	f507 624e 	add.w	r2, r7, #3296	; 0xce0
 80038ce:	e9c2 3400 	strd	r3, r4, [r2]
  t95.im = theta2;
 80038d2:	f507 624e 	add.w	r2, r7, #3296	; 0xce0
 80038d6:	4b26      	ldr	r3, [pc, #152]	; (8003970 <G_q+0xfb8>)
 80038d8:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80038dc:	4439      	add	r1, r7
 80038de:	440b      	add	r3, r1
 80038e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80038e4:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t94.re = -t299.re;
 80038e8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80038ec:	ed93 7b00 	vldr	d7, [r3]
 80038f0:	eeb1 7b47 	vneg.f64	d7, d7
 80038f4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80038f8:	ed83 7b00 	vstr	d7, [r3]
  t94.im = -theta2;
 80038fc:	4b1c      	ldr	r3, [pc, #112]	; (8003970 <G_q+0xfb8>)
 80038fe:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003902:	443a      	add	r2, r7
 8003904:	4413      	add	r3, r2
 8003906:	ed93 7b00 	vldr	d7, [r3]
 800390a:	eeb1 7b47 	vneg.f64	d7, d7
 800390e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8003912:	ed83 7b02 	vstr	d7, [r3, #8]
  t83.re = t299.re;
 8003916:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800391a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800391e:	f507 624c 	add.w	r2, r7, #3264	; 0xcc0
 8003922:	e9c2 3400 	strd	r3, r4, [r2]
  t83.im = theta2;
 8003926:	f507 624c 	add.w	r2, r7, #3264	; 0xcc0
 800392a:	4b11      	ldr	r3, [pc, #68]	; (8003970 <G_q+0xfb8>)
 800392c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003930:	4439      	add	r1, r7
 8003932:	440b      	add	r3, r1
 8003934:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003938:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t82.re = -t299.re;
 800393c:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003940:	ed93 7b00 	vldr	d7, [r3]
 8003944:	eeb1 7b47 	vneg.f64	d7, d7
 8003948:	f507 634b 	add.w	r3, r7, #3248	; 0xcb0
 800394c:	ed83 7b00 	vstr	d7, [r3]
  t82.im = -theta2;
 8003950:	4b07      	ldr	r3, [pc, #28]	; (8003970 <G_q+0xfb8>)
 8003952:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003956:	443a      	add	r2, r7
 8003958:	4413      	add	r3, r2
 800395a:	ed93 7b00 	vldr	d7, [r3]
 800395e:	eeb1 7b47 	vneg.f64	d7, d7
 8003962:	f507 634b 	add.w	r3, r7, #3248	; 0xcb0
 8003966:	ed83 7b02 	vstr	d7, [r3, #8]
  t79.re = t299.re;
 800396a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800396e:	e001      	b.n	8003974 <G_q+0xfbc>
 8003970:	ffffec50 	.word	0xffffec50
 8003974:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003978:	f507 624a 	add.w	r2, r7, #3232	; 0xca0
 800397c:	e9c2 3400 	strd	r3, r4, [r2]
  t79.im = theta2;
 8003980:	f507 624a 	add.w	r2, r7, #3232	; 0xca0
 8003984:	4bc3      	ldr	r3, [pc, #780]	; (8003c94 <G_q+0x12dc>)
 8003986:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800398a:	4439      	add	r1, r7
 800398c:	440b      	add	r3, r1
 800398e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003992:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t78.re = -t299.re;
 8003996:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800399a:	ed93 7b00 	vldr	d7, [r3]
 800399e:	eeb1 7b47 	vneg.f64	d7, d7
 80039a2:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 80039a6:	ed83 7b00 	vstr	d7, [r3]
  t78.im = -theta2;
 80039aa:	4bba      	ldr	r3, [pc, #744]	; (8003c94 <G_q+0x12dc>)
 80039ac:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80039b0:	443a      	add	r2, r7
 80039b2:	4413      	add	r3, r2
 80039b4:	ed93 7b00 	vldr	d7, [r3]
 80039b8:	eeb1 7b47 	vneg.f64	d7, d7
 80039bc:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 80039c0:	ed83 7b02 	vstr	d7, [r3, #8]
  t77.re = t299.re;
 80039c4:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80039c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80039cc:	f507 6248 	add.w	r2, r7, #3200	; 0xc80
 80039d0:	e9c2 3400 	strd	r3, r4, [r2]
  t77.im = theta2;
 80039d4:	f507 6248 	add.w	r2, r7, #3200	; 0xc80
 80039d8:	4bae      	ldr	r3, [pc, #696]	; (8003c94 <G_q+0x12dc>)
 80039da:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80039de:	4439      	add	r1, r7
 80039e0:	440b      	add	r3, r1
 80039e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80039e6:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t76.re = -t299.re;
 80039ea:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80039ee:	ed93 7b00 	vldr	d7, [r3]
 80039f2:	eeb1 7b47 	vneg.f64	d7, d7
 80039f6:	f507 6347 	add.w	r3, r7, #3184	; 0xc70
 80039fa:	ed83 7b00 	vstr	d7, [r3]
  t76.im = -theta2;
 80039fe:	4ba5      	ldr	r3, [pc, #660]	; (8003c94 <G_q+0x12dc>)
 8003a00:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003a04:	443a      	add	r2, r7
 8003a06:	4413      	add	r3, r2
 8003a08:	ed93 7b00 	vldr	d7, [r3]
 8003a0c:	eeb1 7b47 	vneg.f64	d7, d7
 8003a10:	f507 6347 	add.w	r3, r7, #3184	; 0xc70
 8003a14:	ed83 7b02 	vstr	d7, [r3, #8]
  t71.re = t299.re;
 8003a18:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003a1c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003a20:	f507 6246 	add.w	r2, r7, #3168	; 0xc60
 8003a24:	e9c2 3400 	strd	r3, r4, [r2]
  t71.im = theta2;
 8003a28:	f507 6246 	add.w	r2, r7, #3168	; 0xc60
 8003a2c:	4b99      	ldr	r3, [pc, #612]	; (8003c94 <G_q+0x12dc>)
 8003a2e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003a32:	4439      	add	r1, r7
 8003a34:	440b      	add	r3, r1
 8003a36:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003a3a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t70.re = -t299.re;
 8003a3e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003a42:	ed93 7b00 	vldr	d7, [r3]
 8003a46:	eeb1 7b47 	vneg.f64	d7, d7
 8003a4a:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 8003a4e:	ed83 7b00 	vstr	d7, [r3]
  t70.im = -theta2;
 8003a52:	4b90      	ldr	r3, [pc, #576]	; (8003c94 <G_q+0x12dc>)
 8003a54:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003a58:	443a      	add	r2, r7
 8003a5a:	4413      	add	r3, r2
 8003a5c:	ed93 7b00 	vldr	d7, [r3]
 8003a60:	eeb1 7b47 	vneg.f64	d7, d7
 8003a64:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 8003a68:	ed83 7b02 	vstr	d7, [r3, #8]
  t67.re = t299.re;
 8003a6c:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003a70:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003a74:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 8003a78:	e9c2 3400 	strd	r3, r4, [r2]
  t67.im = theta2;
 8003a7c:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 8003a80:	4b84      	ldr	r3, [pc, #528]	; (8003c94 <G_q+0x12dc>)
 8003a82:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003a86:	4439      	add	r1, r7
 8003a88:	440b      	add	r3, r1
 8003a8a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003a8e:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t66.re = -t299.re;
 8003a92:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003a96:	ed93 7b00 	vldr	d7, [r3]
 8003a9a:	eeb1 7b47 	vneg.f64	d7, d7
 8003a9e:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003aa2:	ed83 7b00 	vstr	d7, [r3]
  t66.im = -theta2;
 8003aa6:	4b7b      	ldr	r3, [pc, #492]	; (8003c94 <G_q+0x12dc>)
 8003aa8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003aac:	443a      	add	r2, r7
 8003aae:	4413      	add	r3, r2
 8003ab0:	ed93 7b00 	vldr	d7, [r3]
 8003ab4:	eeb1 7b47 	vneg.f64	d7, d7
 8003ab8:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003abc:	ed83 7b02 	vstr	d7, [r3, #8]
  t63.re = t299.re;
 8003ac0:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003ac4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ac8:	f507 6242 	add.w	r2, r7, #3104	; 0xc20
 8003acc:	e9c2 3400 	strd	r3, r4, [r2]
  t63.im = theta2;
 8003ad0:	f507 6242 	add.w	r2, r7, #3104	; 0xc20
 8003ad4:	4b6f      	ldr	r3, [pc, #444]	; (8003c94 <G_q+0x12dc>)
 8003ad6:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003ada:	4439      	add	r1, r7
 8003adc:	440b      	add	r3, r1
 8003ade:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ae2:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t62.re = -t299.re;
 8003ae6:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003aea:	ed93 7b00 	vldr	d7, [r3]
 8003aee:	eeb1 7b47 	vneg.f64	d7, d7
 8003af2:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8003af6:	ed83 7b00 	vstr	d7, [r3]
  t62.im = -theta2;
 8003afa:	4b66      	ldr	r3, [pc, #408]	; (8003c94 <G_q+0x12dc>)
 8003afc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003b00:	443a      	add	r2, r7
 8003b02:	4413      	add	r3, r2
 8003b04:	ed93 7b00 	vldr	d7, [r3]
 8003b08:	eeb1 7b47 	vneg.f64	d7, d7
 8003b0c:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8003b10:	ed83 7b02 	vstr	d7, [r3, #8]
  t61.re = t299.re;
 8003b14:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003b18:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003b1c:	f507 6240 	add.w	r2, r7, #3072	; 0xc00
 8003b20:	e9c2 3400 	strd	r3, r4, [r2]
  t61.im = theta2;
 8003b24:	f507 6240 	add.w	r2, r7, #3072	; 0xc00
 8003b28:	4b5a      	ldr	r3, [pc, #360]	; (8003c94 <G_q+0x12dc>)
 8003b2a:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003b2e:	4439      	add	r1, r7
 8003b30:	440b      	add	r3, r1
 8003b32:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003b36:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t60.re = -t299.re;
 8003b3a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003b3e:	ed93 7b00 	vldr	d7, [r3]
 8003b42:	eeb1 7b47 	vneg.f64	d7, d7
 8003b46:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 8003b4a:	ed83 7b00 	vstr	d7, [r3]
  t60.im = -theta2;
 8003b4e:	4b51      	ldr	r3, [pc, #324]	; (8003c94 <G_q+0x12dc>)
 8003b50:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003b54:	443a      	add	r2, r7
 8003b56:	4413      	add	r3, r2
 8003b58:	ed93 7b00 	vldr	d7, [r3]
 8003b5c:	eeb1 7b47 	vneg.f64	d7, d7
 8003b60:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 8003b64:	ed83 7b02 	vstr	d7, [r3, #8]
  t57.re = t299.re;
 8003b68:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003b6c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003b70:	f507 623e 	add.w	r2, r7, #3040	; 0xbe0
 8003b74:	e9c2 3400 	strd	r3, r4, [r2]
  t57.im = theta2;
 8003b78:	f507 623e 	add.w	r2, r7, #3040	; 0xbe0
 8003b7c:	4b45      	ldr	r3, [pc, #276]	; (8003c94 <G_q+0x12dc>)
 8003b7e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003b82:	4439      	add	r1, r7
 8003b84:	440b      	add	r3, r1
 8003b86:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003b8a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t56.re = -t299.re;
 8003b8e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003b92:	ed93 7b00 	vldr	d7, [r3]
 8003b96:	eeb1 7b47 	vneg.f64	d7, d7
 8003b9a:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8003b9e:	ed83 7b00 	vstr	d7, [r3]
  t56.im = -theta2;
 8003ba2:	4b3c      	ldr	r3, [pc, #240]	; (8003c94 <G_q+0x12dc>)
 8003ba4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003ba8:	443a      	add	r2, r7
 8003baa:	4413      	add	r3, r2
 8003bac:	ed93 7b00 	vldr	d7, [r3]
 8003bb0:	eeb1 7b47 	vneg.f64	d7, d7
 8003bb4:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8003bb8:	ed83 7b02 	vstr	d7, [r3, #8]
  t50.re = t299.re;
 8003bbc:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003bc0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003bc4:	f507 623c 	add.w	r2, r7, #3008	; 0xbc0
 8003bc8:	e9c2 3400 	strd	r3, r4, [r2]
  t50.im = theta2;
 8003bcc:	f507 623c 	add.w	r2, r7, #3008	; 0xbc0
 8003bd0:	4b30      	ldr	r3, [pc, #192]	; (8003c94 <G_q+0x12dc>)
 8003bd2:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003bd6:	4439      	add	r1, r7
 8003bd8:	440b      	add	r3, r1
 8003bda:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003bde:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t49.re = -t299.re;
 8003be2:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003be6:	ed93 7b00 	vldr	d7, [r3]
 8003bea:	eeb1 7b47 	vneg.f64	d7, d7
 8003bee:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 8003bf2:	ed83 7b00 	vstr	d7, [r3]
  t49.im = -theta2;
 8003bf6:	4b27      	ldr	r3, [pc, #156]	; (8003c94 <G_q+0x12dc>)
 8003bf8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003bfc:	443a      	add	r2, r7
 8003bfe:	4413      	add	r3, r2
 8003c00:	ed93 7b00 	vldr	d7, [r3]
 8003c04:	eeb1 7b47 	vneg.f64	d7, d7
 8003c08:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 8003c0c:	ed83 7b02 	vstr	d7, [r3, #8]
  t46.re = t299.re;
 8003c10:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003c14:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003c18:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8003c1c:	e9c2 3400 	strd	r3, r4, [r2]
  t46.im = theta2;
 8003c20:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8003c24:	4b1b      	ldr	r3, [pc, #108]	; (8003c94 <G_q+0x12dc>)
 8003c26:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003c2a:	4439      	add	r1, r7
 8003c2c:	440b      	add	r3, r1
 8003c2e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003c32:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t45.re = -t299.re;
 8003c36:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003c3a:	ed93 7b00 	vldr	d7, [r3]
 8003c3e:	eeb1 7b47 	vneg.f64	d7, d7
 8003c42:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8003c46:	ed83 7b00 	vstr	d7, [r3]
  t45.im = -theta2;
 8003c4a:	4b12      	ldr	r3, [pc, #72]	; (8003c94 <G_q+0x12dc>)
 8003c4c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003c50:	443a      	add	r2, r7
 8003c52:	4413      	add	r3, r2
 8003c54:	ed93 7b00 	vldr	d7, [r3]
 8003c58:	eeb1 7b47 	vneg.f64	d7, d7
 8003c5c:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8003c60:	ed83 7b02 	vstr	d7, [r3, #8]
  t44.re = t299.re;
 8003c64:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003c68:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003c6c:	f507 6238 	add.w	r2, r7, #2944	; 0xb80
 8003c70:	e9c2 3400 	strd	r3, r4, [r2]
  t44.im = theta2;
 8003c74:	f507 6238 	add.w	r2, r7, #2944	; 0xb80
 8003c78:	4b06      	ldr	r3, [pc, #24]	; (8003c94 <G_q+0x12dc>)
 8003c7a:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003c7e:	4439      	add	r1, r7
 8003c80:	440b      	add	r3, r1
 8003c82:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003c86:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t43.re = -t299.re;
 8003c8a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003c8e:	ed93 7b00 	vldr	d7, [r3]
 8003c92:	e001      	b.n	8003c98 <G_q+0x12e0>
 8003c94:	ffffec50 	.word	0xffffec50
 8003c98:	eeb1 7b47 	vneg.f64	d7, d7
 8003c9c:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8003ca0:	ed83 7b00 	vstr	d7, [r3]
  t43.im = -theta2;
 8003ca4:	4bc6      	ldr	r3, [pc, #792]	; (8003fc0 <G_q+0x1608>)
 8003ca6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003caa:	443a      	add	r2, r7
 8003cac:	4413      	add	r3, r2
 8003cae:	ed93 7b00 	vldr	d7, [r3]
 8003cb2:	eeb1 7b47 	vneg.f64	d7, d7
 8003cb6:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8003cba:	ed83 7b02 	vstr	d7, [r3, #8]
  t40.re = t299.re;
 8003cbe:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003cc2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003cc6:	f507 6236 	add.w	r2, r7, #2912	; 0xb60
 8003cca:	e9c2 3400 	strd	r3, r4, [r2]
  t40.im = theta2;
 8003cce:	f507 6236 	add.w	r2, r7, #2912	; 0xb60
 8003cd2:	4bbb      	ldr	r3, [pc, #748]	; (8003fc0 <G_q+0x1608>)
 8003cd4:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003cd8:	4439      	add	r1, r7
 8003cda:	440b      	add	r3, r1
 8003cdc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ce0:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t39.re = -t299.re;
 8003ce4:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003ce8:	ed93 7b00 	vldr	d7, [r3]
 8003cec:	eeb1 7b47 	vneg.f64	d7, d7
 8003cf0:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8003cf4:	ed83 7b00 	vstr	d7, [r3]
  t39.im = -theta2;
 8003cf8:	4bb1      	ldr	r3, [pc, #708]	; (8003fc0 <G_q+0x1608>)
 8003cfa:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003cfe:	443a      	add	r2, r7
 8003d00:	4413      	add	r3, r2
 8003d02:	ed93 7b00 	vldr	d7, [r3]
 8003d06:	eeb1 7b47 	vneg.f64	d7, d7
 8003d0a:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8003d0e:	ed83 7b02 	vstr	d7, [r3, #8]
  t34.re = t299.re;
 8003d12:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003d16:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d1a:	f507 6234 	add.w	r2, r7, #2880	; 0xb40
 8003d1e:	e9c2 3400 	strd	r3, r4, [r2]
  t34.im = theta2;
 8003d22:	f507 6234 	add.w	r2, r7, #2880	; 0xb40
 8003d26:	4ba6      	ldr	r3, [pc, #664]	; (8003fc0 <G_q+0x1608>)
 8003d28:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003d2c:	4439      	add	r1, r7
 8003d2e:	440b      	add	r3, r1
 8003d30:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d34:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t33.re = -t299.re;
 8003d38:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003d3c:	ed93 7b00 	vldr	d7, [r3]
 8003d40:	eeb1 7b47 	vneg.f64	d7, d7
 8003d44:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8003d48:	ed83 7b00 	vstr	d7, [r3]
  t33.im = -theta2;
 8003d4c:	4b9c      	ldr	r3, [pc, #624]	; (8003fc0 <G_q+0x1608>)
 8003d4e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003d52:	443a      	add	r2, r7
 8003d54:	4413      	add	r3, r2
 8003d56:	ed93 7b00 	vldr	d7, [r3]
 8003d5a:	eeb1 7b47 	vneg.f64	d7, d7
 8003d5e:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8003d62:	ed83 7b02 	vstr	d7, [r3, #8]
  t30.re = t299.re;
 8003d66:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003d6a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d6e:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 8003d72:	e9c2 3400 	strd	r3, r4, [r2]
  t30.im = theta2;
 8003d76:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 8003d7a:	4b91      	ldr	r3, [pc, #580]	; (8003fc0 <G_q+0x1608>)
 8003d7c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003d80:	4439      	add	r1, r7
 8003d82:	440b      	add	r3, r1
 8003d84:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d88:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t29.re = -t299.re;
 8003d8c:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003d90:	ed93 7b00 	vldr	d7, [r3]
 8003d94:	eeb1 7b47 	vneg.f64	d7, d7
 8003d98:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 8003d9c:	ed83 7b00 	vstr	d7, [r3]
  t29.im = -theta2;
 8003da0:	4b87      	ldr	r3, [pc, #540]	; (8003fc0 <G_q+0x1608>)
 8003da2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003da6:	443a      	add	r2, r7
 8003da8:	4413      	add	r3, r2
 8003daa:	ed93 7b00 	vldr	d7, [r3]
 8003dae:	eeb1 7b47 	vneg.f64	d7, d7
 8003db2:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 8003db6:	ed83 7b02 	vstr	d7, [r3, #8]
  t26.re = t299.re;
 8003dba:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003dbe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003dc2:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8003dc6:	e9c2 3400 	strd	r3, r4, [r2]
  t26.im = theta2;
 8003dca:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8003dce:	4b7c      	ldr	r3, [pc, #496]	; (8003fc0 <G_q+0x1608>)
 8003dd0:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003dd4:	4439      	add	r1, r7
 8003dd6:	440b      	add	r3, r1
 8003dd8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ddc:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t25.re = -t299.re;
 8003de0:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003de4:	ed93 7b00 	vldr	d7, [r3]
 8003de8:	eeb1 7b47 	vneg.f64	d7, d7
 8003dec:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8003df0:	ed83 7b00 	vstr	d7, [r3]
  t25.im = -theta2;
 8003df4:	4b72      	ldr	r3, [pc, #456]	; (8003fc0 <G_q+0x1608>)
 8003df6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003dfa:	443a      	add	r2, r7
 8003dfc:	4413      	add	r3, r2
 8003dfe:	ed93 7b00 	vldr	d7, [r3]
 8003e02:	eeb1 7b47 	vneg.f64	d7, d7
 8003e06:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8003e0a:	ed83 7b02 	vstr	d7, [r3, #8]
  t24.re = t299.re;
 8003e0e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003e12:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e16:	f507 622e 	add.w	r2, r7, #2784	; 0xae0
 8003e1a:	e9c2 3400 	strd	r3, r4, [r2]
  t24.im = theta2;
 8003e1e:	f507 622e 	add.w	r2, r7, #2784	; 0xae0
 8003e22:	4b67      	ldr	r3, [pc, #412]	; (8003fc0 <G_q+0x1608>)
 8003e24:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003e28:	4439      	add	r1, r7
 8003e2a:	440b      	add	r3, r1
 8003e2c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e30:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t23.re = -t299.re;
 8003e34:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003e38:	ed93 7b00 	vldr	d7, [r3]
 8003e3c:	eeb1 7b47 	vneg.f64	d7, d7
 8003e40:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8003e44:	ed83 7b00 	vstr	d7, [r3]
  t23.im = -theta2;
 8003e48:	4b5d      	ldr	r3, [pc, #372]	; (8003fc0 <G_q+0x1608>)
 8003e4a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003e4e:	443a      	add	r2, r7
 8003e50:	4413      	add	r3, r2
 8003e52:	ed93 7b00 	vldr	d7, [r3]
 8003e56:	eeb1 7b47 	vneg.f64	d7, d7
 8003e5a:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8003e5e:	ed83 7b02 	vstr	d7, [r3, #8]
  t15.re = t299.re;
 8003e62:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003e66:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e6a:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 8003e6e:	e9c2 3400 	strd	r3, r4, [r2]
  t15.im = theta2;
 8003e72:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 8003e76:	4b52      	ldr	r3, [pc, #328]	; (8003fc0 <G_q+0x1608>)
 8003e78:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003e7c:	4439      	add	r1, r7
 8003e7e:	440b      	add	r3, r1
 8003e80:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e84:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t14.re = -t299.re;
 8003e88:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003e8c:	ed93 7b00 	vldr	d7, [r3]
 8003e90:	eeb1 7b47 	vneg.f64	d7, d7
 8003e94:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8003e98:	ed83 7b00 	vstr	d7, [r3]
  t14.im = -theta2;
 8003e9c:	4b48      	ldr	r3, [pc, #288]	; (8003fc0 <G_q+0x1608>)
 8003e9e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003ea2:	443a      	add	r2, r7
 8003ea4:	4413      	add	r3, r2
 8003ea6:	ed93 7b00 	vldr	d7, [r3]
 8003eaa:	eeb1 7b47 	vneg.f64	d7, d7
 8003eae:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8003eb2:	ed83 7b02 	vstr	d7, [r3, #8]
  t11.re = t299.re;
 8003eb6:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003eba:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ebe:	f507 622a 	add.w	r2, r7, #2720	; 0xaa0
 8003ec2:	e9c2 3400 	strd	r3, r4, [r2]
  t11.im = theta2;
 8003ec6:	f507 622a 	add.w	r2, r7, #2720	; 0xaa0
 8003eca:	4b3d      	ldr	r3, [pc, #244]	; (8003fc0 <G_q+0x1608>)
 8003ecc:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003ed0:	4439      	add	r1, r7
 8003ed2:	440b      	add	r3, r1
 8003ed4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ed8:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t10.re = -t299.re;
 8003edc:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003ee0:	ed93 7b00 	vldr	d7, [r3]
 8003ee4:	eeb1 7b47 	vneg.f64	d7, d7
 8003ee8:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8003eec:	ed83 7b00 	vstr	d7, [r3]
  t10.im = -theta2;
 8003ef0:	4b33      	ldr	r3, [pc, #204]	; (8003fc0 <G_q+0x1608>)
 8003ef2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003ef6:	443a      	add	r2, r7
 8003ef8:	4413      	add	r3, r2
 8003efa:	ed93 7b00 	vldr	d7, [r3]
 8003efe:	eeb1 7b47 	vneg.f64	d7, d7
 8003f02:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8003f06:	ed83 7b02 	vstr	d7, [r3, #8]
  t6.re = t299.re;
 8003f0a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003f0e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f12:	f507 6228 	add.w	r2, r7, #2688	; 0xa80
 8003f16:	e9c2 3400 	strd	r3, r4, [r2]
  t6.im = theta2;
 8003f1a:	f507 6228 	add.w	r2, r7, #2688	; 0xa80
 8003f1e:	4b28      	ldr	r3, [pc, #160]	; (8003fc0 <G_q+0x1608>)
 8003f20:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003f24:	4439      	add	r1, r7
 8003f26:	440b      	add	r3, r1
 8003f28:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f2c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t5.re = -t299.re;
 8003f30:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003f34:	ed93 7b00 	vldr	d7, [r3]
 8003f38:	eeb1 7b47 	vneg.f64	d7, d7
 8003f3c:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8003f40:	ed83 7b00 	vstr	d7, [r3]
  t5.im = -theta2;
 8003f44:	4b1e      	ldr	r3, [pc, #120]	; (8003fc0 <G_q+0x1608>)
 8003f46:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003f4a:	443a      	add	r2, r7
 8003f4c:	4413      	add	r3, r2
 8003f4e:	ed93 7b00 	vldr	d7, [r3]
 8003f52:	eeb1 7b47 	vneg.f64	d7, d7
 8003f56:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8003f5a:	ed83 7b02 	vstr	d7, [r3, #8]
  t4.re = t299.re;
 8003f5e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003f62:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f66:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8003f6a:	e9c2 3400 	strd	r3, r4, [r2]
  t4.im = theta2;
 8003f6e:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8003f72:	4b13      	ldr	r3, [pc, #76]	; (8003fc0 <G_q+0x1608>)
 8003f74:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003f78:	4439      	add	r1, r7
 8003f7a:	440b      	add	r3, r1
 8003f7c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f80:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t3.re = -t299.re;
 8003f84:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003f88:	ed93 7b00 	vldr	d7, [r3]
 8003f8c:	eeb1 7b47 	vneg.f64	d7, d7
 8003f90:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8003f94:	ed83 7b00 	vstr	d7, [r3]
  t3.im = -theta2;
 8003f98:	4b09      	ldr	r3, [pc, #36]	; (8003fc0 <G_q+0x1608>)
 8003f9a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003f9e:	443a      	add	r2, r7
 8003fa0:	4413      	add	r3, r2
 8003fa2:	ed93 7b00 	vldr	d7, [r3]
 8003fa6:	eeb1 7b47 	vneg.f64	d7, d7
 8003faa:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8003fae:	ed83 7b02 	vstr	d7, [r3, #8]
  b_exp(&t3);
 8003fb2:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f00e fe16 	bl	8012be8 <b_exp>
 8003fbc:	e002      	b.n	8003fc4 <G_q+0x160c>
 8003fbe:	bf00      	nop
 8003fc0:	ffffec50 	.word	0xffffec50
  t297.re = theta3 * 0.0;
 8003fc4:	4bc6      	ldr	r3, [pc, #792]	; (80042e0 <G_q+0x1928>)
 8003fc6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003fca:	443a      	add	r2, r7
 8003fcc:	4413      	add	r3, r2
 8003fce:	ed93 7b00 	vldr	d7, [r3]
 8003fd2:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 80042d8 <G_q+0x1920>
 8003fd6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003fda:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003fde:	ed83 7b00 	vstr	d7, [r3]
  t297.im = theta3;
 8003fe2:	f507 6224 	add.w	r2, r7, #2624	; 0xa40
 8003fe6:	4bbe      	ldr	r3, [pc, #760]	; (80042e0 <G_q+0x1928>)
 8003fe8:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003fec:	4439      	add	r1, r7
 8003fee:	440b      	add	r3, r1
 8003ff0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ff4:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t296.re = -t297.re;
 8003ff8:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003ffc:	ed93 7b00 	vldr	d7, [r3]
 8004000:	eeb1 7b47 	vneg.f64	d7, d7
 8004004:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8004008:	ed83 7b00 	vstr	d7, [r3]
  t296.im = -theta3;
 800400c:	4bb4      	ldr	r3, [pc, #720]	; (80042e0 <G_q+0x1928>)
 800400e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004012:	443a      	add	r2, r7
 8004014:	4413      	add	r3, r2
 8004016:	ed93 7b00 	vldr	d7, [r3]
 800401a:	eeb1 7b47 	vneg.f64	d7, d7
 800401e:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8004022:	ed83 7b02 	vstr	d7, [r3, #8]
  t295.re = t297.re;
 8004026:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800402a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800402e:	f507 6222 	add.w	r2, r7, #2592	; 0xa20
 8004032:	e9c2 3400 	strd	r3, r4, [r2]
  t295.im = theta3;
 8004036:	f507 6222 	add.w	r2, r7, #2592	; 0xa20
 800403a:	4ba9      	ldr	r3, [pc, #676]	; (80042e0 <G_q+0x1928>)
 800403c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004040:	4439      	add	r1, r7
 8004042:	440b      	add	r3, r1
 8004044:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004048:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t294.re = -t297.re;
 800404c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004050:	ed93 7b00 	vldr	d7, [r3]
 8004054:	eeb1 7b47 	vneg.f64	d7, d7
 8004058:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 800405c:	ed83 7b00 	vstr	d7, [r3]
  t294.im = -theta3;
 8004060:	4b9f      	ldr	r3, [pc, #636]	; (80042e0 <G_q+0x1928>)
 8004062:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004066:	443a      	add	r2, r7
 8004068:	4413      	add	r3, r2
 800406a:	ed93 7b00 	vldr	d7, [r3]
 800406e:	eeb1 7b47 	vneg.f64	d7, d7
 8004072:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8004076:	ed83 7b02 	vstr	d7, [r3, #8]
  t289.re = t297.re;
 800407a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800407e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004082:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 8004086:	e9c2 3400 	strd	r3, r4, [r2]
  t289.im = theta3;
 800408a:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 800408e:	4b94      	ldr	r3, [pc, #592]	; (80042e0 <G_q+0x1928>)
 8004090:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004094:	4439      	add	r1, r7
 8004096:	440b      	add	r3, r1
 8004098:	e9d3 3400 	ldrd	r3, r4, [r3]
 800409c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t288.re = -t297.re;
 80040a0:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80040a4:	ed93 7b00 	vldr	d7, [r3]
 80040a8:	eeb1 7b47 	vneg.f64	d7, d7
 80040ac:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 80040b0:	ed83 7b00 	vstr	d7, [r3]
  t288.im = -theta3;
 80040b4:	4b8a      	ldr	r3, [pc, #552]	; (80042e0 <G_q+0x1928>)
 80040b6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80040ba:	443a      	add	r2, r7
 80040bc:	4413      	add	r3, r2
 80040be:	ed93 7b00 	vldr	d7, [r3]
 80040c2:	eeb1 7b47 	vneg.f64	d7, d7
 80040c6:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 80040ca:	ed83 7b02 	vstr	d7, [r3, #8]
  t283.re = t297.re;
 80040ce:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80040d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80040d6:	f507 621e 	add.w	r2, r7, #2528	; 0x9e0
 80040da:	e9c2 3400 	strd	r3, r4, [r2]
  t283.im = theta3;
 80040de:	f507 621e 	add.w	r2, r7, #2528	; 0x9e0
 80040e2:	4b7f      	ldr	r3, [pc, #508]	; (80042e0 <G_q+0x1928>)
 80040e4:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80040e8:	4439      	add	r1, r7
 80040ea:	440b      	add	r3, r1
 80040ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 80040f0:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t282.re = -t297.re;
 80040f4:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80040f8:	ed93 7b00 	vldr	d7, [r3]
 80040fc:	eeb1 7b47 	vneg.f64	d7, d7
 8004100:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8004104:	ed83 7b00 	vstr	d7, [r3]
  t282.im = -theta3;
 8004108:	4b75      	ldr	r3, [pc, #468]	; (80042e0 <G_q+0x1928>)
 800410a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800410e:	443a      	add	r2, r7
 8004110:	4413      	add	r3, r2
 8004112:	ed93 7b00 	vldr	d7, [r3]
 8004116:	eeb1 7b47 	vneg.f64	d7, d7
 800411a:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 800411e:	ed83 7b02 	vstr	d7, [r3, #8]
  t275.re = t297.re;
 8004122:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004126:	e9d3 3400 	ldrd	r3, r4, [r3]
 800412a:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 800412e:	e9c2 3400 	strd	r3, r4, [r2]
  t275.im = theta3;
 8004132:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8004136:	4b6a      	ldr	r3, [pc, #424]	; (80042e0 <G_q+0x1928>)
 8004138:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800413c:	4439      	add	r1, r7
 800413e:	440b      	add	r3, r1
 8004140:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004144:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t274.re = -t297.re;
 8004148:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800414c:	ed93 7b00 	vldr	d7, [r3]
 8004150:	eeb1 7b47 	vneg.f64	d7, d7
 8004154:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8004158:	ed83 7b00 	vstr	d7, [r3]
  t274.im = -theta3;
 800415c:	4b60      	ldr	r3, [pc, #384]	; (80042e0 <G_q+0x1928>)
 800415e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004162:	443a      	add	r2, r7
 8004164:	4413      	add	r3, r2
 8004166:	ed93 7b00 	vldr	d7, [r3]
 800416a:	eeb1 7b47 	vneg.f64	d7, d7
 800416e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8004172:	ed83 7b02 	vstr	d7, [r3, #8]
  t271.re = t297.re;
 8004176:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800417a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800417e:	f507 621a 	add.w	r2, r7, #2464	; 0x9a0
 8004182:	e9c2 3400 	strd	r3, r4, [r2]
  t271.im = theta3;
 8004186:	f507 621a 	add.w	r2, r7, #2464	; 0x9a0
 800418a:	4b55      	ldr	r3, [pc, #340]	; (80042e0 <G_q+0x1928>)
 800418c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004190:	4439      	add	r1, r7
 8004192:	440b      	add	r3, r1
 8004194:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004198:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t270.re = -t297.re;
 800419c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80041a0:	ed93 7b00 	vldr	d7, [r3]
 80041a4:	eeb1 7b47 	vneg.f64	d7, d7
 80041a8:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 80041ac:	ed83 7b00 	vstr	d7, [r3]
  t270.im = -theta3;
 80041b0:	4b4b      	ldr	r3, [pc, #300]	; (80042e0 <G_q+0x1928>)
 80041b2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80041b6:	443a      	add	r2, r7
 80041b8:	4413      	add	r3, r2
 80041ba:	ed93 7b00 	vldr	d7, [r3]
 80041be:	eeb1 7b47 	vneg.f64	d7, d7
 80041c2:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 80041c6:	ed83 7b02 	vstr	d7, [r3, #8]
  t261.re = t297.re;
 80041ca:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80041ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80041d2:	f507 6218 	add.w	r2, r7, #2432	; 0x980
 80041d6:	e9c2 3400 	strd	r3, r4, [r2]
  t261.im = theta3;
 80041da:	f507 6218 	add.w	r2, r7, #2432	; 0x980
 80041de:	4b40      	ldr	r3, [pc, #256]	; (80042e0 <G_q+0x1928>)
 80041e0:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80041e4:	4439      	add	r1, r7
 80041e6:	440b      	add	r3, r1
 80041e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80041ec:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t260.re = -t297.re;
 80041f0:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80041f4:	ed93 7b00 	vldr	d7, [r3]
 80041f8:	eeb1 7b47 	vneg.f64	d7, d7
 80041fc:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 8004200:	ed83 7b00 	vstr	d7, [r3]
  t260.im = -theta3;
 8004204:	4b36      	ldr	r3, [pc, #216]	; (80042e0 <G_q+0x1928>)
 8004206:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800420a:	443a      	add	r2, r7
 800420c:	4413      	add	r3, r2
 800420e:	ed93 7b00 	vldr	d7, [r3]
 8004212:	eeb1 7b47 	vneg.f64	d7, d7
 8004216:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 800421a:	ed83 7b02 	vstr	d7, [r3, #8]
  t257.re = t297.re;
 800421e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004222:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004226:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 800422a:	e9c2 3400 	strd	r3, r4, [r2]
  t257.im = theta3;
 800422e:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 8004232:	4b2b      	ldr	r3, [pc, #172]	; (80042e0 <G_q+0x1928>)
 8004234:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004238:	4439      	add	r1, r7
 800423a:	440b      	add	r3, r1
 800423c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004240:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t256.re = -t297.re;
 8004244:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004248:	ed93 7b00 	vldr	d7, [r3]
 800424c:	eeb1 7b47 	vneg.f64	d7, d7
 8004250:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8004254:	ed83 7b00 	vstr	d7, [r3]
  t256.im = -theta3;
 8004258:	4b21      	ldr	r3, [pc, #132]	; (80042e0 <G_q+0x1928>)
 800425a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800425e:	443a      	add	r2, r7
 8004260:	4413      	add	r3, r2
 8004262:	ed93 7b00 	vldr	d7, [r3]
 8004266:	eeb1 7b47 	vneg.f64	d7, d7
 800426a:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 800426e:	ed83 7b02 	vstr	d7, [r3, #8]
  t253.re = t297.re;
 8004272:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004276:	e9d3 3400 	ldrd	r3, r4, [r3]
 800427a:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 800427e:	e9c2 3400 	strd	r3, r4, [r2]
  t253.im = theta3;
 8004282:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8004286:	4b16      	ldr	r3, [pc, #88]	; (80042e0 <G_q+0x1928>)
 8004288:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800428c:	4439      	add	r1, r7
 800428e:	440b      	add	r3, r1
 8004290:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004294:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t252.re = -t297.re;
 8004298:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800429c:	ed93 7b00 	vldr	d7, [r3]
 80042a0:	eeb1 7b47 	vneg.f64	d7, d7
 80042a4:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 80042a8:	ed83 7b00 	vstr	d7, [r3]
  t252.im = -theta3;
 80042ac:	4b0c      	ldr	r3, [pc, #48]	; (80042e0 <G_q+0x1928>)
 80042ae:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80042b2:	443a      	add	r2, r7
 80042b4:	4413      	add	r3, r2
 80042b6:	ed93 7b00 	vldr	d7, [r3]
 80042ba:	eeb1 7b47 	vneg.f64	d7, d7
 80042be:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 80042c2:	ed83 7b02 	vstr	d7, [r3, #8]
  t247.re = t297.re;
 80042c6:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80042ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80042ce:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 80042d2:	e007      	b.n	80042e4 <G_q+0x192c>
 80042d4:	f3af 8000 	nop.w
	...
 80042e0:	ffffec48 	.word	0xffffec48
 80042e4:	e9c2 3400 	strd	r3, r4, [r2]
  t247.im = theta3;
 80042e8:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 80042ec:	4bc3      	ldr	r3, [pc, #780]	; (80045fc <G_q+0x1c44>)
 80042ee:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80042f2:	4439      	add	r1, r7
 80042f4:	440b      	add	r3, r1
 80042f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80042fa:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t246.re = -t297.re;
 80042fe:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004302:	ed93 7b00 	vldr	d7, [r3]
 8004306:	eeb1 7b47 	vneg.f64	d7, d7
 800430a:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 800430e:	ed83 7b00 	vstr	d7, [r3]
  t246.im = -theta3;
 8004312:	4bba      	ldr	r3, [pc, #744]	; (80045fc <G_q+0x1c44>)
 8004314:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004318:	443a      	add	r2, r7
 800431a:	4413      	add	r3, r2
 800431c:	ed93 7b00 	vldr	d7, [r3]
 8004320:	eeb1 7b47 	vneg.f64	d7, d7
 8004324:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8004328:	ed83 7b02 	vstr	d7, [r3, #8]
  t241.re = t297.re;
 800432c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004330:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004334:	f507 6210 	add.w	r2, r7, #2304	; 0x900
 8004338:	e9c2 3400 	strd	r3, r4, [r2]
  t241.im = theta3;
 800433c:	f507 6210 	add.w	r2, r7, #2304	; 0x900
 8004340:	4bae      	ldr	r3, [pc, #696]	; (80045fc <G_q+0x1c44>)
 8004342:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004346:	4439      	add	r1, r7
 8004348:	440b      	add	r3, r1
 800434a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800434e:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t240.re = -t297.re;
 8004352:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004356:	ed93 7b00 	vldr	d7, [r3]
 800435a:	eeb1 7b47 	vneg.f64	d7, d7
 800435e:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8004362:	ed83 7b00 	vstr	d7, [r3]
  t240.im = -theta3;
 8004366:	4ba5      	ldr	r3, [pc, #660]	; (80045fc <G_q+0x1c44>)
 8004368:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800436c:	443a      	add	r2, r7
 800436e:	4413      	add	r3, r2
 8004370:	ed93 7b00 	vldr	d7, [r3]
 8004374:	eeb1 7b47 	vneg.f64	d7, d7
 8004378:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800437c:	ed83 7b02 	vstr	d7, [r3, #8]
  t235.re = t297.re;
 8004380:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004384:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004388:	f507 620e 	add.w	r2, r7, #2272	; 0x8e0
 800438c:	e9c2 3400 	strd	r3, r4, [r2]
  t235.im = theta3;
 8004390:	f507 620e 	add.w	r2, r7, #2272	; 0x8e0
 8004394:	4b99      	ldr	r3, [pc, #612]	; (80045fc <G_q+0x1c44>)
 8004396:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800439a:	4439      	add	r1, r7
 800439c:	440b      	add	r3, r1
 800439e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80043a2:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t234.re = -t297.re;
 80043a6:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80043aa:	ed93 7b00 	vldr	d7, [r3]
 80043ae:	eeb1 7b47 	vneg.f64	d7, d7
 80043b2:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 80043b6:	ed83 7b00 	vstr	d7, [r3]
  t234.im = -theta3;
 80043ba:	4b90      	ldr	r3, [pc, #576]	; (80045fc <G_q+0x1c44>)
 80043bc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80043c0:	443a      	add	r2, r7
 80043c2:	4413      	add	r3, r2
 80043c4:	ed93 7b00 	vldr	d7, [r3]
 80043c8:	eeb1 7b47 	vneg.f64	d7, d7
 80043cc:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 80043d0:	ed83 7b02 	vstr	d7, [r3, #8]
  t225.re = t297.re;
 80043d4:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80043d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80043dc:	f507 620c 	add.w	r2, r7, #2240	; 0x8c0
 80043e0:	e9c2 3400 	strd	r3, r4, [r2]
  t225.im = theta3;
 80043e4:	f507 620c 	add.w	r2, r7, #2240	; 0x8c0
 80043e8:	4b84      	ldr	r3, [pc, #528]	; (80045fc <G_q+0x1c44>)
 80043ea:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80043ee:	4439      	add	r1, r7
 80043f0:	440b      	add	r3, r1
 80043f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80043f6:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t224.re = -t297.re;
 80043fa:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80043fe:	ed93 7b00 	vldr	d7, [r3]
 8004402:	eeb1 7b47 	vneg.f64	d7, d7
 8004406:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800440a:	ed83 7b00 	vstr	d7, [r3]
  t224.im = -theta3;
 800440e:	4b7b      	ldr	r3, [pc, #492]	; (80045fc <G_q+0x1c44>)
 8004410:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004414:	443a      	add	r2, r7
 8004416:	4413      	add	r3, r2
 8004418:	ed93 7b00 	vldr	d7, [r3]
 800441c:	eeb1 7b47 	vneg.f64	d7, d7
 8004420:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8004424:	ed83 7b02 	vstr	d7, [r3, #8]
  t221.re = t297.re;
 8004428:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800442c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004430:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 8004434:	e9c2 3400 	strd	r3, r4, [r2]
  t221.im = theta3;
 8004438:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 800443c:	4b6f      	ldr	r3, [pc, #444]	; (80045fc <G_q+0x1c44>)
 800443e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004442:	4439      	add	r1, r7
 8004444:	440b      	add	r3, r1
 8004446:	e9d3 3400 	ldrd	r3, r4, [r3]
 800444a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t220.re = -t297.re;
 800444e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004452:	ed93 7b00 	vldr	d7, [r3]
 8004456:	eeb1 7b47 	vneg.f64	d7, d7
 800445a:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800445e:	ed83 7b00 	vstr	d7, [r3]
  t220.im = -theta3;
 8004462:	4b66      	ldr	r3, [pc, #408]	; (80045fc <G_q+0x1c44>)
 8004464:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004468:	443a      	add	r2, r7
 800446a:	4413      	add	r3, r2
 800446c:	ed93 7b00 	vldr	d7, [r3]
 8004470:	eeb1 7b47 	vneg.f64	d7, d7
 8004474:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8004478:	ed83 7b02 	vstr	d7, [r3, #8]
  t215.re = t297.re;
 800447c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004480:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004484:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8004488:	e9c2 3400 	strd	r3, r4, [r2]
  t215.im = theta3;
 800448c:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8004490:	4b5a      	ldr	r3, [pc, #360]	; (80045fc <G_q+0x1c44>)
 8004492:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004496:	4439      	add	r1, r7
 8004498:	440b      	add	r3, r1
 800449a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800449e:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t214.re = -t297.re;
 80044a2:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80044a6:	ed93 7b00 	vldr	d7, [r3]
 80044aa:	eeb1 7b47 	vneg.f64	d7, d7
 80044ae:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 80044b2:	ed83 7b00 	vstr	d7, [r3]
  t214.im = -theta3;
 80044b6:	4b51      	ldr	r3, [pc, #324]	; (80045fc <G_q+0x1c44>)
 80044b8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80044bc:	443a      	add	r2, r7
 80044be:	4413      	add	r3, r2
 80044c0:	ed93 7b00 	vldr	d7, [r3]
 80044c4:	eeb1 7b47 	vneg.f64	d7, d7
 80044c8:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 80044cc:	ed83 7b02 	vstr	d7, [r3, #8]
  t211.re = t297.re;
 80044d0:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80044d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80044d8:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 80044dc:	e9c2 3400 	strd	r3, r4, [r2]
  t211.im = theta3;
 80044e0:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 80044e4:	4b45      	ldr	r3, [pc, #276]	; (80045fc <G_q+0x1c44>)
 80044e6:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80044ea:	4439      	add	r1, r7
 80044ec:	440b      	add	r3, r1
 80044ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80044f2:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t210.re = -t297.re;
 80044f6:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80044fa:	ed93 7b00 	vldr	d7, [r3]
 80044fe:	eeb1 7b47 	vneg.f64	d7, d7
 8004502:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 8004506:	ed83 7b00 	vstr	d7, [r3]
  t210.im = -theta3;
 800450a:	4b3c      	ldr	r3, [pc, #240]	; (80045fc <G_q+0x1c44>)
 800450c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004510:	443a      	add	r2, r7
 8004512:	4413      	add	r3, r2
 8004514:	ed93 7b00 	vldr	d7, [r3]
 8004518:	eeb1 7b47 	vneg.f64	d7, d7
 800451c:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 8004520:	ed83 7b02 	vstr	d7, [r3, #8]
  t207.re = t297.re;
 8004524:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004528:	e9d3 3400 	ldrd	r3, r4, [r3]
 800452c:	f507 6204 	add.w	r2, r7, #2112	; 0x840
 8004530:	e9c2 3400 	strd	r3, r4, [r2]
  t207.im = theta3;
 8004534:	f507 6204 	add.w	r2, r7, #2112	; 0x840
 8004538:	4b30      	ldr	r3, [pc, #192]	; (80045fc <G_q+0x1c44>)
 800453a:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800453e:	4439      	add	r1, r7
 8004540:	440b      	add	r3, r1
 8004542:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004546:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t206.re = -t297.re;
 800454a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800454e:	ed93 7b00 	vldr	d7, [r3]
 8004552:	eeb1 7b47 	vneg.f64	d7, d7
 8004556:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 800455a:	ed83 7b00 	vstr	d7, [r3]
  t206.im = -theta3;
 800455e:	4b27      	ldr	r3, [pc, #156]	; (80045fc <G_q+0x1c44>)
 8004560:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004564:	443a      	add	r2, r7
 8004566:	4413      	add	r3, r2
 8004568:	ed93 7b00 	vldr	d7, [r3]
 800456c:	eeb1 7b47 	vneg.f64	d7, d7
 8004570:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8004574:	ed83 7b02 	vstr	d7, [r3, #8]
  t201.re = t297.re;
 8004578:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800457c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004580:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 8004584:	e9c2 3400 	strd	r3, r4, [r2]
  t201.im = theta3;
 8004588:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 800458c:	4b1b      	ldr	r3, [pc, #108]	; (80045fc <G_q+0x1c44>)
 800458e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004592:	4439      	add	r1, r7
 8004594:	440b      	add	r3, r1
 8004596:	e9d3 3400 	ldrd	r3, r4, [r3]
 800459a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t200.re = -t297.re;
 800459e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80045a2:	ed93 7b00 	vldr	d7, [r3]
 80045a6:	eeb1 7b47 	vneg.f64	d7, d7
 80045aa:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80045ae:	ed83 7b00 	vstr	d7, [r3]
  t200.im = -theta3;
 80045b2:	4b12      	ldr	r3, [pc, #72]	; (80045fc <G_q+0x1c44>)
 80045b4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80045b8:	443a      	add	r2, r7
 80045ba:	4413      	add	r3, r2
 80045bc:	ed93 7b00 	vldr	d7, [r3]
 80045c0:	eeb1 7b47 	vneg.f64	d7, d7
 80045c4:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80045c8:	ed83 7b02 	vstr	d7, [r3, #8]
  t191.re = t297.re;
 80045cc:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80045d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80045d4:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 80045d8:	e9c2 3400 	strd	r3, r4, [r2]
  t191.im = theta3;
 80045dc:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 80045e0:	4b06      	ldr	r3, [pc, #24]	; (80045fc <G_q+0x1c44>)
 80045e2:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80045e6:	4439      	add	r1, r7
 80045e8:	440b      	add	r3, r1
 80045ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 80045ee:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t190.re = -t297.re;
 80045f2:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80045f6:	ed93 7b00 	vldr	d7, [r3]
 80045fa:	e001      	b.n	8004600 <G_q+0x1c48>
 80045fc:	ffffec48 	.word	0xffffec48
 8004600:	eeb1 7b47 	vneg.f64	d7, d7
 8004604:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8004608:	ed83 7b00 	vstr	d7, [r3]
  t190.im = -theta3;
 800460c:	4bc4      	ldr	r3, [pc, #784]	; (8004920 <G_q+0x1f68>)
 800460e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004612:	443a      	add	r2, r7
 8004614:	4413      	add	r3, r2
 8004616:	ed93 7b00 	vldr	d7, [r3]
 800461a:	eeb1 7b47 	vneg.f64	d7, d7
 800461e:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8004622:	ed83 7b02 	vstr	d7, [r3, #8]
  t187.re = t297.re;
 8004626:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800462a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800462e:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8004632:	e9c2 3400 	strd	r3, r4, [r2]
  t187.im = theta3;
 8004636:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800463a:	4bb9      	ldr	r3, [pc, #740]	; (8004920 <G_q+0x1f68>)
 800463c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004640:	4439      	add	r1, r7
 8004642:	440b      	add	r3, r1
 8004644:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004648:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t186.re = -t297.re;
 800464c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004650:	ed93 7b00 	vldr	d7, [r3]
 8004654:	eeb1 7b47 	vneg.f64	d7, d7
 8004658:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800465c:	ed83 7b00 	vstr	d7, [r3]
  t186.im = -theta3;
 8004660:	4baf      	ldr	r3, [pc, #700]	; (8004920 <G_q+0x1f68>)
 8004662:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004666:	443a      	add	r2, r7
 8004668:	4413      	add	r3, r2
 800466a:	ed93 7b00 	vldr	d7, [r3]
 800466e:	eeb1 7b47 	vneg.f64	d7, d7
 8004672:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 8004676:	ed83 7b02 	vstr	d7, [r3, #8]
  t183.re = t297.re;
 800467a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800467e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004682:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 8004686:	e9c2 3400 	strd	r3, r4, [r2]
  t183.im = theta3;
 800468a:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 800468e:	4ba4      	ldr	r3, [pc, #656]	; (8004920 <G_q+0x1f68>)
 8004690:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004694:	4439      	add	r1, r7
 8004696:	440b      	add	r3, r1
 8004698:	e9d3 3400 	ldrd	r3, r4, [r3]
 800469c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t182.re = -t297.re;
 80046a0:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80046a4:	ed93 7b00 	vldr	d7, [r3]
 80046a8:	eeb1 7b47 	vneg.f64	d7, d7
 80046ac:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 80046b0:	ed83 7b00 	vstr	d7, [r3]
  t182.im = -theta3;
 80046b4:	4b9a      	ldr	r3, [pc, #616]	; (8004920 <G_q+0x1f68>)
 80046b6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80046ba:	443a      	add	r2, r7
 80046bc:	4413      	add	r3, r2
 80046be:	ed93 7b00 	vldr	d7, [r3]
 80046c2:	eeb1 7b47 	vneg.f64	d7, d7
 80046c6:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 80046ca:	ed83 7b02 	vstr	d7, [r3, #8]
  t177.re = t297.re;
 80046ce:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80046d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80046d6:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 80046da:	e9c2 3400 	strd	r3, r4, [r2]
  t177.im = theta3;
 80046de:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 80046e2:	4b8f      	ldr	r3, [pc, #572]	; (8004920 <G_q+0x1f68>)
 80046e4:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80046e8:	4439      	add	r1, r7
 80046ea:	440b      	add	r3, r1
 80046ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 80046f0:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t176.re = -t297.re;
 80046f4:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80046f8:	ed93 7b00 	vldr	d7, [r3]
 80046fc:	eeb1 7b47 	vneg.f64	d7, d7
 8004700:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 8004704:	ed83 7b00 	vstr	d7, [r3]
  t176.im = -theta3;
 8004708:	4b85      	ldr	r3, [pc, #532]	; (8004920 <G_q+0x1f68>)
 800470a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800470e:	443a      	add	r2, r7
 8004710:	4413      	add	r3, r2
 8004712:	ed93 7b00 	vldr	d7, [r3]
 8004716:	eeb1 7b47 	vneg.f64	d7, d7
 800471a:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 800471e:	ed83 7b02 	vstr	d7, [r3, #8]
  t169.re = t297.re;
 8004722:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004726:	e9d3 3400 	ldrd	r3, r4, [r3]
 800472a:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 800472e:	e9c2 3400 	strd	r3, r4, [r2]
  t169.im = theta3;
 8004732:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 8004736:	4b7a      	ldr	r3, [pc, #488]	; (8004920 <G_q+0x1f68>)
 8004738:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800473c:	4439      	add	r1, r7
 800473e:	440b      	add	r3, r1
 8004740:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004744:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t168.re = -t297.re;
 8004748:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800474c:	ed93 7b00 	vldr	d7, [r3]
 8004750:	eeb1 7b47 	vneg.f64	d7, d7
 8004754:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 8004758:	ed83 7b00 	vstr	d7, [r3]
  t168.im = -theta3;
 800475c:	4b70      	ldr	r3, [pc, #448]	; (8004920 <G_q+0x1f68>)
 800475e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004762:	443a      	add	r2, r7
 8004764:	4413      	add	r3, r2
 8004766:	ed93 7b00 	vldr	d7, [r3]
 800476a:	eeb1 7b47 	vneg.f64	d7, d7
 800476e:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 8004772:	ed83 7b02 	vstr	d7, [r3, #8]
  t165.re = t297.re;
 8004776:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800477a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800477e:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 8004782:	e9c2 3400 	strd	r3, r4, [r2]
  t165.im = theta3;
 8004786:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 800478a:	4b65      	ldr	r3, [pc, #404]	; (8004920 <G_q+0x1f68>)
 800478c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004790:	4439      	add	r1, r7
 8004792:	440b      	add	r3, r1
 8004794:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004798:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t164.re = -t297.re;
 800479c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80047a0:	ed93 7b00 	vldr	d7, [r3]
 80047a4:	eeb1 7b47 	vneg.f64	d7, d7
 80047a8:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 80047ac:	ed83 7b00 	vstr	d7, [r3]
  t164.im = -theta3;
 80047b0:	4b5b      	ldr	r3, [pc, #364]	; (8004920 <G_q+0x1f68>)
 80047b2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80047b6:	443a      	add	r2, r7
 80047b8:	4413      	add	r3, r2
 80047ba:	ed93 7b00 	vldr	d7, [r3]
 80047be:	eeb1 7b47 	vneg.f64	d7, d7
 80047c2:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 80047c6:	ed83 7b02 	vstr	d7, [r3, #8]
  t163.re = t297.re;
 80047ca:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80047ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80047d2:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 80047d6:	e9c2 3400 	strd	r3, r4, [r2]
  t163.im = theta3;
 80047da:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 80047de:	4b50      	ldr	r3, [pc, #320]	; (8004920 <G_q+0x1f68>)
 80047e0:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80047e4:	4439      	add	r1, r7
 80047e6:	440b      	add	r3, r1
 80047e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80047ec:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t162.re = -t297.re;
 80047f0:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80047f4:	ed93 7b00 	vldr	d7, [r3]
 80047f8:	eeb1 7b47 	vneg.f64	d7, d7
 80047fc:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8004800:	ed83 7b00 	vstr	d7, [r3]
  t162.im = -theta3;
 8004804:	4b46      	ldr	r3, [pc, #280]	; (8004920 <G_q+0x1f68>)
 8004806:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800480a:	443a      	add	r2, r7
 800480c:	4413      	add	r3, r2
 800480e:	ed93 7b00 	vldr	d7, [r3]
 8004812:	eeb1 7b47 	vneg.f64	d7, d7
 8004816:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800481a:	ed83 7b02 	vstr	d7, [r3, #8]
  t155.re = t297.re;
 800481e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004822:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004826:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 800482a:	e9c2 3400 	strd	r3, r4, [r2]
  t155.im = theta3;
 800482e:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 8004832:	4b3b      	ldr	r3, [pc, #236]	; (8004920 <G_q+0x1f68>)
 8004834:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004838:	4439      	add	r1, r7
 800483a:	440b      	add	r3, r1
 800483c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004840:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t154.re = -t297.re;
 8004844:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004848:	ed93 7b00 	vldr	d7, [r3]
 800484c:	eeb1 7b47 	vneg.f64	d7, d7
 8004850:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8004854:	ed83 7b00 	vstr	d7, [r3]
  t154.im = -theta3;
 8004858:	4b31      	ldr	r3, [pc, #196]	; (8004920 <G_q+0x1f68>)
 800485a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800485e:	443a      	add	r2, r7
 8004860:	4413      	add	r3, r2
 8004862:	ed93 7b00 	vldr	d7, [r3]
 8004866:	eeb1 7b47 	vneg.f64	d7, d7
 800486a:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800486e:	ed83 7b02 	vstr	d7, [r3, #8]
  t151.re = t297.re;
 8004872:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004876:	e9d3 3400 	ldrd	r3, r4, [r3]
 800487a:	f507 62e0 	add.w	r2, r7, #1792	; 0x700
 800487e:	e9c2 3400 	strd	r3, r4, [r2]
  t151.im = theta3;
 8004882:	f507 62e0 	add.w	r2, r7, #1792	; 0x700
 8004886:	4b26      	ldr	r3, [pc, #152]	; (8004920 <G_q+0x1f68>)
 8004888:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800488c:	4439      	add	r1, r7
 800488e:	440b      	add	r3, r1
 8004890:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004894:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t150.re = -t297.re;
 8004898:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800489c:	ed93 7b00 	vldr	d7, [r3]
 80048a0:	eeb1 7b47 	vneg.f64	d7, d7
 80048a4:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80048a8:	ed83 7b00 	vstr	d7, [r3]
  t150.im = -theta3;
 80048ac:	4b1c      	ldr	r3, [pc, #112]	; (8004920 <G_q+0x1f68>)
 80048ae:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80048b2:	443a      	add	r2, r7
 80048b4:	4413      	add	r3, r2
 80048b6:	ed93 7b00 	vldr	d7, [r3]
 80048ba:	eeb1 7b47 	vneg.f64	d7, d7
 80048be:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80048c2:	ed83 7b02 	vstr	d7, [r3, #8]
  t145.re = t297.re;
 80048c6:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80048ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80048ce:	f507 62dc 	add.w	r2, r7, #1760	; 0x6e0
 80048d2:	e9c2 3400 	strd	r3, r4, [r2]
  t145.im = theta3;
 80048d6:	f507 62dc 	add.w	r2, r7, #1760	; 0x6e0
 80048da:	4b11      	ldr	r3, [pc, #68]	; (8004920 <G_q+0x1f68>)
 80048dc:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80048e0:	4439      	add	r1, r7
 80048e2:	440b      	add	r3, r1
 80048e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80048e8:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t144.re = -t297.re;
 80048ec:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80048f0:	ed93 7b00 	vldr	d7, [r3]
 80048f4:	eeb1 7b47 	vneg.f64	d7, d7
 80048f8:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 80048fc:	ed83 7b00 	vstr	d7, [r3]
  t144.im = -theta3;
 8004900:	4b07      	ldr	r3, [pc, #28]	; (8004920 <G_q+0x1f68>)
 8004902:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004906:	443a      	add	r2, r7
 8004908:	4413      	add	r3, r2
 800490a:	ed93 7b00 	vldr	d7, [r3]
 800490e:	eeb1 7b47 	vneg.f64	d7, d7
 8004912:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 8004916:	ed83 7b02 	vstr	d7, [r3, #8]
  t141.re = t297.re;
 800491a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800491e:	e001      	b.n	8004924 <G_q+0x1f6c>
 8004920:	ffffec48 	.word	0xffffec48
 8004924:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004928:	f507 62d8 	add.w	r2, r7, #1728	; 0x6c0
 800492c:	e9c2 3400 	strd	r3, r4, [r2]
  t141.im = theta3;
 8004930:	f507 62d8 	add.w	r2, r7, #1728	; 0x6c0
 8004934:	4bc3      	ldr	r3, [pc, #780]	; (8004c44 <G_q+0x228c>)
 8004936:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800493a:	4439      	add	r1, r7
 800493c:	440b      	add	r3, r1
 800493e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004942:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t140.re = -t297.re;
 8004946:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800494a:	ed93 7b00 	vldr	d7, [r3]
 800494e:	eeb1 7b47 	vneg.f64	d7, d7
 8004952:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8004956:	ed83 7b00 	vstr	d7, [r3]
  t140.im = -theta3;
 800495a:	4bba      	ldr	r3, [pc, #744]	; (8004c44 <G_q+0x228c>)
 800495c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004960:	443a      	add	r2, r7
 8004962:	4413      	add	r3, r2
 8004964:	ed93 7b00 	vldr	d7, [r3]
 8004968:	eeb1 7b47 	vneg.f64	d7, d7
 800496c:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8004970:	ed83 7b02 	vstr	d7, [r3, #8]
  t137.re = t297.re;
 8004974:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004978:	e9d3 3400 	ldrd	r3, r4, [r3]
 800497c:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8004980:	e9c2 3400 	strd	r3, r4, [r2]
  t137.im = theta3;
 8004984:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8004988:	4bae      	ldr	r3, [pc, #696]	; (8004c44 <G_q+0x228c>)
 800498a:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800498e:	4439      	add	r1, r7
 8004990:	440b      	add	r3, r1
 8004992:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004996:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t136.re = -t297.re;
 800499a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800499e:	ed93 7b00 	vldr	d7, [r3]
 80049a2:	eeb1 7b47 	vneg.f64	d7, d7
 80049a6:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 80049aa:	ed83 7b00 	vstr	d7, [r3]
  t136.im = -theta3;
 80049ae:	4ba5      	ldr	r3, [pc, #660]	; (8004c44 <G_q+0x228c>)
 80049b0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80049b4:	443a      	add	r2, r7
 80049b6:	4413      	add	r3, r2
 80049b8:	ed93 7b00 	vldr	d7, [r3]
 80049bc:	eeb1 7b47 	vneg.f64	d7, d7
 80049c0:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 80049c4:	ed83 7b02 	vstr	d7, [r3, #8]
  t131.re = t297.re;
 80049c8:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80049cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80049d0:	f507 62d0 	add.w	r2, r7, #1664	; 0x680
 80049d4:	e9c2 3400 	strd	r3, r4, [r2]
  t131.im = theta3;
 80049d8:	f507 62d0 	add.w	r2, r7, #1664	; 0x680
 80049dc:	4b99      	ldr	r3, [pc, #612]	; (8004c44 <G_q+0x228c>)
 80049de:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80049e2:	4439      	add	r1, r7
 80049e4:	440b      	add	r3, r1
 80049e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80049ea:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t130.re = -t297.re;
 80049ee:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80049f2:	ed93 7b00 	vldr	d7, [r3]
 80049f6:	eeb1 7b47 	vneg.f64	d7, d7
 80049fa:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80049fe:	ed83 7b00 	vstr	d7, [r3]
  t130.im = -theta3;
 8004a02:	4b90      	ldr	r3, [pc, #576]	; (8004c44 <G_q+0x228c>)
 8004a04:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004a08:	443a      	add	r2, r7
 8004a0a:	4413      	add	r3, r2
 8004a0c:	ed93 7b00 	vldr	d7, [r3]
 8004a10:	eeb1 7b47 	vneg.f64	d7, d7
 8004a14:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8004a18:	ed83 7b02 	vstr	d7, [r3, #8]
  t129.re = t297.re;
 8004a1c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004a20:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004a24:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 8004a28:	e9c2 3400 	strd	r3, r4, [r2]
  t129.im = theta3;
 8004a2c:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 8004a30:	4b84      	ldr	r3, [pc, #528]	; (8004c44 <G_q+0x228c>)
 8004a32:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004a36:	4439      	add	r1, r7
 8004a38:	440b      	add	r3, r1
 8004a3a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004a3e:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t128.re = -t297.re;
 8004a42:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004a46:	ed93 7b00 	vldr	d7, [r3]
 8004a4a:	eeb1 7b47 	vneg.f64	d7, d7
 8004a4e:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8004a52:	ed83 7b00 	vstr	d7, [r3]
  t128.im = -theta3;
 8004a56:	4b7b      	ldr	r3, [pc, #492]	; (8004c44 <G_q+0x228c>)
 8004a58:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004a5c:	443a      	add	r2, r7
 8004a5e:	4413      	add	r3, r2
 8004a60:	ed93 7b00 	vldr	d7, [r3]
 8004a64:	eeb1 7b47 	vneg.f64	d7, d7
 8004a68:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8004a6c:	ed83 7b02 	vstr	d7, [r3, #8]
  t121.re = t297.re;
 8004a70:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004a74:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004a78:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8004a7c:	e9c2 3400 	strd	r3, r4, [r2]
  t121.im = theta3;
 8004a80:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8004a84:	4b6f      	ldr	r3, [pc, #444]	; (8004c44 <G_q+0x228c>)
 8004a86:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004a8a:	4439      	add	r1, r7
 8004a8c:	440b      	add	r3, r1
 8004a8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004a92:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t120.re = -t297.re;
 8004a96:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004a9a:	ed93 7b00 	vldr	d7, [r3]
 8004a9e:	eeb1 7b47 	vneg.f64	d7, d7
 8004aa2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8004aa6:	ed83 7b00 	vstr	d7, [r3]
  t120.im = -theta3;
 8004aaa:	4b66      	ldr	r3, [pc, #408]	; (8004c44 <G_q+0x228c>)
 8004aac:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004ab0:	443a      	add	r2, r7
 8004ab2:	4413      	add	r3, r2
 8004ab4:	ed93 7b00 	vldr	d7, [r3]
 8004ab8:	eeb1 7b47 	vneg.f64	d7, d7
 8004abc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8004ac0:	ed83 7b02 	vstr	d7, [r3, #8]
  t115.re = t297.re;
 8004ac4:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004ac8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004acc:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 8004ad0:	e9c2 3400 	strd	r3, r4, [r2]
  t115.im = theta3;
 8004ad4:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 8004ad8:	4b5a      	ldr	r3, [pc, #360]	; (8004c44 <G_q+0x228c>)
 8004ada:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004ade:	4439      	add	r1, r7
 8004ae0:	440b      	add	r3, r1
 8004ae2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004ae6:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t114.re = -t297.re;
 8004aea:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004aee:	ed93 7b00 	vldr	d7, [r3]
 8004af2:	eeb1 7b47 	vneg.f64	d7, d7
 8004af6:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8004afa:	ed83 7b00 	vstr	d7, [r3]
  t114.im = -theta3;
 8004afe:	4b51      	ldr	r3, [pc, #324]	; (8004c44 <G_q+0x228c>)
 8004b00:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004b04:	443a      	add	r2, r7
 8004b06:	4413      	add	r3, r2
 8004b08:	ed93 7b00 	vldr	d7, [r3]
 8004b0c:	eeb1 7b47 	vneg.f64	d7, d7
 8004b10:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8004b14:	ed83 7b02 	vstr	d7, [r3, #8]
  t109.re = t297.re;
 8004b18:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004b1c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004b20:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8004b24:	e9c2 3400 	strd	r3, r4, [r2]
  t109.im = theta3;
 8004b28:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8004b2c:	4b45      	ldr	r3, [pc, #276]	; (8004c44 <G_q+0x228c>)
 8004b2e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004b32:	4439      	add	r1, r7
 8004b34:	440b      	add	r3, r1
 8004b36:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004b3a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t108.re = -t297.re;
 8004b3e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004b42:	ed93 7b00 	vldr	d7, [r3]
 8004b46:	eeb1 7b47 	vneg.f64	d7, d7
 8004b4a:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8004b4e:	ed83 7b00 	vstr	d7, [r3]
  t108.im = -theta3;
 8004b52:	4b3c      	ldr	r3, [pc, #240]	; (8004c44 <G_q+0x228c>)
 8004b54:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004b58:	443a      	add	r2, r7
 8004b5a:	4413      	add	r3, r2
 8004b5c:	ed93 7b00 	vldr	d7, [r3]
 8004b60:	eeb1 7b47 	vneg.f64	d7, d7
 8004b64:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8004b68:	ed83 7b02 	vstr	d7, [r3, #8]
  t107.re = t297.re;
 8004b6c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004b70:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004b74:	f507 62bc 	add.w	r2, r7, #1504	; 0x5e0
 8004b78:	e9c2 3400 	strd	r3, r4, [r2]
  t107.im = theta3;
 8004b7c:	f507 62bc 	add.w	r2, r7, #1504	; 0x5e0
 8004b80:	4b30      	ldr	r3, [pc, #192]	; (8004c44 <G_q+0x228c>)
 8004b82:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004b86:	4439      	add	r1, r7
 8004b88:	440b      	add	r3, r1
 8004b8a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004b8e:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t106.re = -t297.re;
 8004b92:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004b96:	ed93 7b00 	vldr	d7, [r3]
 8004b9a:	eeb1 7b47 	vneg.f64	d7, d7
 8004b9e:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8004ba2:	ed83 7b00 	vstr	d7, [r3]
  t106.im = -theta3;
 8004ba6:	4b27      	ldr	r3, [pc, #156]	; (8004c44 <G_q+0x228c>)
 8004ba8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004bac:	443a      	add	r2, r7
 8004bae:	4413      	add	r3, r2
 8004bb0:	ed93 7b00 	vldr	d7, [r3]
 8004bb4:	eeb1 7b47 	vneg.f64	d7, d7
 8004bb8:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8004bbc:	ed83 7b02 	vstr	d7, [r3, #8]
  t99.re = t297.re;
 8004bc0:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004bc4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004bc8:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 8004bcc:	e9c2 3400 	strd	r3, r4, [r2]
  t99.im = theta3;
 8004bd0:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 8004bd4:	4b1b      	ldr	r3, [pc, #108]	; (8004c44 <G_q+0x228c>)
 8004bd6:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004bda:	4439      	add	r1, r7
 8004bdc:	440b      	add	r3, r1
 8004bde:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004be2:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t98.re = -t297.re;
 8004be6:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004bea:	ed93 7b00 	vldr	d7, [r3]
 8004bee:	eeb1 7b47 	vneg.f64	d7, d7
 8004bf2:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 8004bf6:	ed83 7b00 	vstr	d7, [r3]
  t98.im = -theta3;
 8004bfa:	4b12      	ldr	r3, [pc, #72]	; (8004c44 <G_q+0x228c>)
 8004bfc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004c00:	443a      	add	r2, r7
 8004c02:	4413      	add	r3, r2
 8004c04:	ed93 7b00 	vldr	d7, [r3]
 8004c08:	eeb1 7b47 	vneg.f64	d7, d7
 8004c0c:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 8004c10:	ed83 7b02 	vstr	d7, [r3, #8]
  t93.re = t297.re;
 8004c14:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004c18:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c1c:	f507 62b4 	add.w	r2, r7, #1440	; 0x5a0
 8004c20:	e9c2 3400 	strd	r3, r4, [r2]
  t93.im = theta3;
 8004c24:	f507 62b4 	add.w	r2, r7, #1440	; 0x5a0
 8004c28:	4b06      	ldr	r3, [pc, #24]	; (8004c44 <G_q+0x228c>)
 8004c2a:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004c2e:	4439      	add	r1, r7
 8004c30:	440b      	add	r3, r1
 8004c32:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c36:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t92.re = -t297.re;
 8004c3a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004c3e:	ed93 7b00 	vldr	d7, [r3]
 8004c42:	e001      	b.n	8004c48 <G_q+0x2290>
 8004c44:	ffffec48 	.word	0xffffec48
 8004c48:	eeb1 7b47 	vneg.f64	d7, d7
 8004c4c:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8004c50:	ed83 7b00 	vstr	d7, [r3]
  t92.im = -theta3;
 8004c54:	4bc4      	ldr	r3, [pc, #784]	; (8004f68 <G_q+0x25b0>)
 8004c56:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004c5a:	443a      	add	r2, r7
 8004c5c:	4413      	add	r3, r2
 8004c5e:	ed93 7b00 	vldr	d7, [r3]
 8004c62:	eeb1 7b47 	vneg.f64	d7, d7
 8004c66:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8004c6a:	ed83 7b02 	vstr	d7, [r3, #8]
  t85.re = t297.re;
 8004c6e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004c72:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c76:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8004c7a:	e9c2 3400 	strd	r3, r4, [r2]
  t85.im = theta3;
 8004c7e:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8004c82:	4bb9      	ldr	r3, [pc, #740]	; (8004f68 <G_q+0x25b0>)
 8004c84:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004c88:	4439      	add	r1, r7
 8004c8a:	440b      	add	r3, r1
 8004c8c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c90:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t84.re = -t297.re;
 8004c94:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004c98:	ed93 7b00 	vldr	d7, [r3]
 8004c9c:	eeb1 7b47 	vneg.f64	d7, d7
 8004ca0:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8004ca4:	ed83 7b00 	vstr	d7, [r3]
  t84.im = -theta3;
 8004ca8:	4baf      	ldr	r3, [pc, #700]	; (8004f68 <G_q+0x25b0>)
 8004caa:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004cae:	443a      	add	r2, r7
 8004cb0:	4413      	add	r3, r2
 8004cb2:	ed93 7b00 	vldr	d7, [r3]
 8004cb6:	eeb1 7b47 	vneg.f64	d7, d7
 8004cba:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8004cbe:	ed83 7b02 	vstr	d7, [r3, #8]
  t81.re = t297.re;
 8004cc2:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004cc6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004cca:	f507 62ac 	add.w	r2, r7, #1376	; 0x560
 8004cce:	e9c2 3400 	strd	r3, r4, [r2]
  t81.im = theta3;
 8004cd2:	f507 62ac 	add.w	r2, r7, #1376	; 0x560
 8004cd6:	4ba4      	ldr	r3, [pc, #656]	; (8004f68 <G_q+0x25b0>)
 8004cd8:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004cdc:	4439      	add	r1, r7
 8004cde:	440b      	add	r3, r1
 8004ce0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004ce4:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t80.re = -t297.re;
 8004ce8:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004cec:	ed93 7b00 	vldr	d7, [r3]
 8004cf0:	eeb1 7b47 	vneg.f64	d7, d7
 8004cf4:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8004cf8:	ed83 7b00 	vstr	d7, [r3]
  t80.im = -theta3;
 8004cfc:	4b9a      	ldr	r3, [pc, #616]	; (8004f68 <G_q+0x25b0>)
 8004cfe:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004d02:	443a      	add	r2, r7
 8004d04:	4413      	add	r3, r2
 8004d06:	ed93 7b00 	vldr	d7, [r3]
 8004d0a:	eeb1 7b47 	vneg.f64	d7, d7
 8004d0e:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8004d12:	ed83 7b02 	vstr	d7, [r3, #8]
  t75.re = t297.re;
 8004d16:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004d1a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004d1e:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
 8004d22:	e9c2 3400 	strd	r3, r4, [r2]
  t75.im = theta3;
 8004d26:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
 8004d2a:	4b8f      	ldr	r3, [pc, #572]	; (8004f68 <G_q+0x25b0>)
 8004d2c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004d30:	4439      	add	r1, r7
 8004d32:	440b      	add	r3, r1
 8004d34:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004d38:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t74.re = -t297.re;
 8004d3c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004d40:	ed93 7b00 	vldr	d7, [r3]
 8004d44:	eeb1 7b47 	vneg.f64	d7, d7
 8004d48:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8004d4c:	ed83 7b00 	vstr	d7, [r3]
  t74.im = -theta3;
 8004d50:	4b85      	ldr	r3, [pc, #532]	; (8004f68 <G_q+0x25b0>)
 8004d52:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004d56:	443a      	add	r2, r7
 8004d58:	4413      	add	r3, r2
 8004d5a:	ed93 7b00 	vldr	d7, [r3]
 8004d5e:	eeb1 7b47 	vneg.f64	d7, d7
 8004d62:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8004d66:	ed83 7b02 	vstr	d7, [r3, #8]
  t73.re = t297.re;
 8004d6a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004d6e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004d72:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 8004d76:	e9c2 3400 	strd	r3, r4, [r2]
  t73.im = theta3;
 8004d7a:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 8004d7e:	4b7a      	ldr	r3, [pc, #488]	; (8004f68 <G_q+0x25b0>)
 8004d80:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004d84:	4439      	add	r1, r7
 8004d86:	440b      	add	r3, r1
 8004d88:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004d8c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t72.re = -t297.re;
 8004d90:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004d94:	ed93 7b00 	vldr	d7, [r3]
 8004d98:	eeb1 7b47 	vneg.f64	d7, d7
 8004d9c:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8004da0:	ed83 7b00 	vstr	d7, [r3]
  t72.im = -theta3;
 8004da4:	4b70      	ldr	r3, [pc, #448]	; (8004f68 <G_q+0x25b0>)
 8004da6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004daa:	443a      	add	r2, r7
 8004dac:	4413      	add	r3, r2
 8004dae:	ed93 7b00 	vldr	d7, [r3]
 8004db2:	eeb1 7b47 	vneg.f64	d7, d7
 8004db6:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8004dba:	ed83 7b02 	vstr	d7, [r3, #8]
  t69.re = t297.re;
 8004dbe:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004dc2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004dc6:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 8004dca:	e9c2 3400 	strd	r3, r4, [r2]
  t69.im = theta3;
 8004dce:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 8004dd2:	4b65      	ldr	r3, [pc, #404]	; (8004f68 <G_q+0x25b0>)
 8004dd4:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004dd8:	4439      	add	r1, r7
 8004dda:	440b      	add	r3, r1
 8004ddc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004de0:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t68.re = -t297.re;
 8004de4:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004de8:	ed93 7b00 	vldr	d7, [r3]
 8004dec:	eeb1 7b47 	vneg.f64	d7, d7
 8004df0:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8004df4:	ed83 7b00 	vstr	d7, [r3]
  t68.im = -theta3;
 8004df8:	4b5b      	ldr	r3, [pc, #364]	; (8004f68 <G_q+0x25b0>)
 8004dfa:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004dfe:	443a      	add	r2, r7
 8004e00:	4413      	add	r3, r2
 8004e02:	ed93 7b00 	vldr	d7, [r3]
 8004e06:	eeb1 7b47 	vneg.f64	d7, d7
 8004e0a:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8004e0e:	ed83 7b02 	vstr	d7, [r3, #8]
  t65.re = t297.re;
 8004e12:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004e16:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004e1a:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 8004e1e:	e9c2 3400 	strd	r3, r4, [r2]
  t65.im = theta3;
 8004e22:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 8004e26:	4b50      	ldr	r3, [pc, #320]	; (8004f68 <G_q+0x25b0>)
 8004e28:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004e2c:	4439      	add	r1, r7
 8004e2e:	440b      	add	r3, r1
 8004e30:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004e34:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t64.re = -t297.re;
 8004e38:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004e3c:	ed93 7b00 	vldr	d7, [r3]
 8004e40:	eeb1 7b47 	vneg.f64	d7, d7
 8004e44:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8004e48:	ed83 7b00 	vstr	d7, [r3]
  t64.im = -theta3;
 8004e4c:	4b46      	ldr	r3, [pc, #280]	; (8004f68 <G_q+0x25b0>)
 8004e4e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004e52:	443a      	add	r2, r7
 8004e54:	4413      	add	r3, r2
 8004e56:	ed93 7b00 	vldr	d7, [r3]
 8004e5a:	eeb1 7b47 	vneg.f64	d7, d7
 8004e5e:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8004e62:	ed83 7b02 	vstr	d7, [r3, #8]
  t52.re = t297.re;
 8004e66:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004e6a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004e6e:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 8004e72:	e9c2 3400 	strd	r3, r4, [r2]
  t52.im = theta3;
 8004e76:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 8004e7a:	4b3b      	ldr	r3, [pc, #236]	; (8004f68 <G_q+0x25b0>)
 8004e7c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004e80:	4439      	add	r1, r7
 8004e82:	440b      	add	r3, r1
 8004e84:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004e88:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t51.re = -t297.re;
 8004e8c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004e90:	ed93 7b00 	vldr	d7, [r3]
 8004e94:	eeb1 7b47 	vneg.f64	d7, d7
 8004e98:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8004e9c:	ed83 7b00 	vstr	d7, [r3]
  t51.im = -theta3;
 8004ea0:	4b31      	ldr	r3, [pc, #196]	; (8004f68 <G_q+0x25b0>)
 8004ea2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004ea6:	443a      	add	r2, r7
 8004ea8:	4413      	add	r3, r2
 8004eaa:	ed93 7b00 	vldr	d7, [r3]
 8004eae:	eeb1 7b47 	vneg.f64	d7, d7
 8004eb2:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8004eb6:	ed83 7b02 	vstr	d7, [r3, #8]
  t48.re = t297.re;
 8004eba:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004ebe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004ec2:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 8004ec6:	e9c2 3400 	strd	r3, r4, [r2]
  t48.im = theta3;
 8004eca:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 8004ece:	4b26      	ldr	r3, [pc, #152]	; (8004f68 <G_q+0x25b0>)
 8004ed0:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004ed4:	4439      	add	r1, r7
 8004ed6:	440b      	add	r3, r1
 8004ed8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004edc:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t47.re = -t297.re;
 8004ee0:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004ee4:	ed93 7b00 	vldr	d7, [r3]
 8004ee8:	eeb1 7b47 	vneg.f64	d7, d7
 8004eec:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8004ef0:	ed83 7b00 	vstr	d7, [r3]
  t47.im = -theta3;
 8004ef4:	4b1c      	ldr	r3, [pc, #112]	; (8004f68 <G_q+0x25b0>)
 8004ef6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004efa:	443a      	add	r2, r7
 8004efc:	4413      	add	r3, r2
 8004efe:	ed93 7b00 	vldr	d7, [r3]
 8004f02:	eeb1 7b47 	vneg.f64	d7, d7
 8004f06:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8004f0a:	ed83 7b02 	vstr	d7, [r3, #8]
  t38.re = t297.re;
 8004f0e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004f12:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004f16:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 8004f1a:	e9c2 3400 	strd	r3, r4, [r2]
  t38.im = theta3;
 8004f1e:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 8004f22:	4b11      	ldr	r3, [pc, #68]	; (8004f68 <G_q+0x25b0>)
 8004f24:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004f28:	4439      	add	r1, r7
 8004f2a:	440b      	add	r3, r1
 8004f2c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004f30:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t37.re = -t297.re;
 8004f34:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004f38:	ed93 7b00 	vldr	d7, [r3]
 8004f3c:	eeb1 7b47 	vneg.f64	d7, d7
 8004f40:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8004f44:	ed83 7b00 	vstr	d7, [r3]
  t37.im = -theta3;
 8004f48:	4b07      	ldr	r3, [pc, #28]	; (8004f68 <G_q+0x25b0>)
 8004f4a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004f4e:	443a      	add	r2, r7
 8004f50:	4413      	add	r3, r2
 8004f52:	ed93 7b00 	vldr	d7, [r3]
 8004f56:	eeb1 7b47 	vneg.f64	d7, d7
 8004f5a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8004f5e:	ed83 7b02 	vstr	d7, [r3, #8]
  t36.re = t297.re;
 8004f62:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004f66:	e001      	b.n	8004f6c <G_q+0x25b4>
 8004f68:	ffffec48 	.word	0xffffec48
 8004f6c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004f70:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 8004f74:	e9c2 3400 	strd	r3, r4, [r2]
  t36.im = theta3;
 8004f78:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 8004f7c:	4bc4      	ldr	r3, [pc, #784]	; (8005290 <G_q+0x28d8>)
 8004f7e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004f82:	4439      	add	r1, r7
 8004f84:	440b      	add	r3, r1
 8004f86:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004f8a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t35.re = -t297.re;
 8004f8e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004f92:	ed93 7b00 	vldr	d7, [r3]
 8004f96:	eeb1 7b47 	vneg.f64	d7, d7
 8004f9a:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8004f9e:	ed83 7b00 	vstr	d7, [r3]
  t35.im = -theta3;
 8004fa2:	4bbb      	ldr	r3, [pc, #748]	; (8005290 <G_q+0x28d8>)
 8004fa4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004fa8:	443a      	add	r2, r7
 8004faa:	4413      	add	r3, r2
 8004fac:	ed93 7b00 	vldr	d7, [r3]
 8004fb0:	eeb1 7b47 	vneg.f64	d7, d7
 8004fb4:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8004fb8:	ed83 7b02 	vstr	d7, [r3, #8]
  t32.re = t297.re;
 8004fbc:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004fc0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004fc4:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8004fc8:	e9c2 3400 	strd	r3, r4, [r2]
  t32.im = theta3;
 8004fcc:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8004fd0:	4baf      	ldr	r3, [pc, #700]	; (8005290 <G_q+0x28d8>)
 8004fd2:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004fd6:	4439      	add	r1, r7
 8004fd8:	440b      	add	r3, r1
 8004fda:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004fde:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t31.re = -t297.re;
 8004fe2:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004fe6:	ed93 7b00 	vldr	d7, [r3]
 8004fea:	eeb1 7b47 	vneg.f64	d7, d7
 8004fee:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8004ff2:	ed83 7b00 	vstr	d7, [r3]
  t31.im = -theta3;
 8004ff6:	4ba6      	ldr	r3, [pc, #664]	; (8005290 <G_q+0x28d8>)
 8004ff8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004ffc:	443a      	add	r2, r7
 8004ffe:	4413      	add	r3, r2
 8005000:	ed93 7b00 	vldr	d7, [r3]
 8005004:	eeb1 7b47 	vneg.f64	d7, d7
 8005008:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800500c:	ed83 7b02 	vstr	d7, [r3, #8]
  t28.re = t297.re;
 8005010:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8005014:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005018:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 800501c:	e9c2 3400 	strd	r3, r4, [r2]
  t28.im = theta3;
 8005020:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8005024:	4b9a      	ldr	r3, [pc, #616]	; (8005290 <G_q+0x28d8>)
 8005026:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800502a:	4439      	add	r1, r7
 800502c:	440b      	add	r3, r1
 800502e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005032:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t27.re = -t297.re;
 8005036:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800503a:	ed93 7b00 	vldr	d7, [r3]
 800503e:	eeb1 7b47 	vneg.f64	d7, d7
 8005042:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8005046:	ed83 7b00 	vstr	d7, [r3]
  t27.im = -theta3;
 800504a:	4b91      	ldr	r3, [pc, #580]	; (8005290 <G_q+0x28d8>)
 800504c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005050:	443a      	add	r2, r7
 8005052:	4413      	add	r3, r2
 8005054:	ed93 7b00 	vldr	d7, [r3]
 8005058:	eeb1 7b47 	vneg.f64	d7, d7
 800505c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8005060:	ed83 7b02 	vstr	d7, [r3, #8]
  t17.re = t297.re;
 8005064:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8005068:	e9d3 3400 	ldrd	r3, r4, [r3]
 800506c:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8005070:	e9c2 3400 	strd	r3, r4, [r2]
  t17.im = theta3;
 8005074:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8005078:	4b85      	ldr	r3, [pc, #532]	; (8005290 <G_q+0x28d8>)
 800507a:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800507e:	4439      	add	r1, r7
 8005080:	440b      	add	r3, r1
 8005082:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005086:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t16.re = -t297.re;
 800508a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800508e:	ed93 7b00 	vldr	d7, [r3]
 8005092:	eeb1 7b47 	vneg.f64	d7, d7
 8005096:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800509a:	ed83 7b00 	vstr	d7, [r3]
  t16.im = -theta3;
 800509e:	4b7c      	ldr	r3, [pc, #496]	; (8005290 <G_q+0x28d8>)
 80050a0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80050a4:	443a      	add	r2, r7
 80050a6:	4413      	add	r3, r2
 80050a8:	ed93 7b00 	vldr	d7, [r3]
 80050ac:	eeb1 7b47 	vneg.f64	d7, d7
 80050b0:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80050b4:	ed83 7b02 	vstr	d7, [r3, #8]
  t13.re = t297.re;
 80050b8:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80050bc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80050c0:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 80050c4:	e9c2 3400 	strd	r3, r4, [r2]
  t13.im = theta3;
 80050c8:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 80050cc:	4b70      	ldr	r3, [pc, #448]	; (8005290 <G_q+0x28d8>)
 80050ce:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80050d2:	4439      	add	r1, r7
 80050d4:	440b      	add	r3, r1
 80050d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80050da:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t12.re = -t297.re;
 80050de:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80050e2:	ed93 7b00 	vldr	d7, [r3]
 80050e6:	eeb1 7b47 	vneg.f64	d7, d7
 80050ea:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 80050ee:	ed83 7b00 	vstr	d7, [r3]
  t12.im = -theta3;
 80050f2:	4b67      	ldr	r3, [pc, #412]	; (8005290 <G_q+0x28d8>)
 80050f4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80050f8:	443a      	add	r2, r7
 80050fa:	4413      	add	r3, r2
 80050fc:	ed93 7b00 	vldr	d7, [r3]
 8005100:	eeb1 7b47 	vneg.f64	d7, d7
 8005104:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8005108:	ed83 7b02 	vstr	d7, [r3, #8]
  t9.re = t297.re;
 800510c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8005110:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005114:	4b5f      	ldr	r3, [pc, #380]	; (8005294 <G_q+0x28dc>)
 8005116:	f241 30d0 	movw	r0, #5072	; 0x13d0
 800511a:	4438      	add	r0, r7
 800511c:	4403      	add	r3, r0
 800511e:	e9c3 1200 	strd	r1, r2, [r3]
  t9.im = theta3;
 8005122:	4b5c      	ldr	r3, [pc, #368]	; (8005294 <G_q+0x28dc>)
 8005124:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005128:	443a      	add	r2, r7
 800512a:	4413      	add	r3, r2
 800512c:	4a58      	ldr	r2, [pc, #352]	; (8005290 <G_q+0x28d8>)
 800512e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8005132:	4439      	add	r1, r7
 8005134:	440a      	add	r2, r1
 8005136:	e9d2 1200 	ldrd	r1, r2, [r2]
 800513a:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t8.re = -t297.re;
 800513e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8005142:	ed93 7b00 	vldr	d7, [r3]
 8005146:	eeb1 7b47 	vneg.f64	d7, d7
 800514a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800514e:	ed83 7b00 	vstr	d7, [r3]
  t8.im = -theta3;
 8005152:	4b4f      	ldr	r3, [pc, #316]	; (8005290 <G_q+0x28d8>)
 8005154:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005158:	443a      	add	r2, r7
 800515a:	4413      	add	r3, r2
 800515c:	ed93 7b00 	vldr	d7, [r3]
 8005160:	eeb1 7b47 	vneg.f64	d7, d7
 8005164:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8005168:	ed83 7b02 	vstr	d7, [r3, #8]
  b_exp(&t8);
 800516c:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8005170:	4618      	mov	r0, r3
 8005172:	f00d fd39 	bl	8012be8 <b_exp>
  t285.re = theta4 * 0.0;
 8005176:	f107 0310 	add.w	r3, r7, #16
 800517a:	ed93 7b00 	vldr	d7, [r3]
 800517e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8005288 <G_q+0x28d0>
 8005182:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005186:	4b44      	ldr	r3, [pc, #272]	; (8005298 <G_q+0x28e0>)
 8005188:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800518c:	443a      	add	r2, r7
 800518e:	4413      	add	r3, r2
 8005190:	ed83 7b00 	vstr	d7, [r3]
  t285.im = theta4;
 8005194:	4b40      	ldr	r3, [pc, #256]	; (8005298 <G_q+0x28e0>)
 8005196:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800519a:	443a      	add	r2, r7
 800519c:	4413      	add	r3, r2
 800519e:	f107 0210 	add.w	r2, r7, #16
 80051a2:	e9d2 1200 	ldrd	r1, r2, [r2]
 80051a6:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t284.re = -t285.re;
 80051aa:	4b3b      	ldr	r3, [pc, #236]	; (8005298 <G_q+0x28e0>)
 80051ac:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80051b0:	443a      	add	r2, r7
 80051b2:	4413      	add	r3, r2
 80051b4:	ed93 7b00 	vldr	d7, [r3]
 80051b8:	eeb1 7b47 	vneg.f64	d7, d7
 80051bc:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80051c0:	ed83 7b00 	vstr	d7, [r3]
  t284.im = -theta4;
 80051c4:	f107 0310 	add.w	r3, r7, #16
 80051c8:	ed93 7b00 	vldr	d7, [r3]
 80051cc:	eeb1 7b47 	vneg.f64	d7, d7
 80051d0:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80051d4:	ed83 7b02 	vstr	d7, [r3, #8]
  t279.re = t285.re;
 80051d8:	4b2f      	ldr	r3, [pc, #188]	; (8005298 <G_q+0x28e0>)
 80051da:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80051de:	443a      	add	r2, r7
 80051e0:	4413      	add	r3, r2
 80051e2:	e9d3 1200 	ldrd	r1, r2, [r3]
 80051e6:	4b2d      	ldr	r3, [pc, #180]	; (800529c <G_q+0x28e4>)
 80051e8:	f241 30d0 	movw	r0, #5072	; 0x13d0
 80051ec:	4438      	add	r0, r7
 80051ee:	4403      	add	r3, r0
 80051f0:	e9c3 1200 	strd	r1, r2, [r3]
  t279.im = theta4;
 80051f4:	4b29      	ldr	r3, [pc, #164]	; (800529c <G_q+0x28e4>)
 80051f6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80051fa:	443a      	add	r2, r7
 80051fc:	4413      	add	r3, r2
 80051fe:	f107 0210 	add.w	r2, r7, #16
 8005202:	e9d2 1200 	ldrd	r1, r2, [r2]
 8005206:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t278.re = -t285.re;
 800520a:	4b23      	ldr	r3, [pc, #140]	; (8005298 <G_q+0x28e0>)
 800520c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005210:	443a      	add	r2, r7
 8005212:	4413      	add	r3, r2
 8005214:	ed93 7b00 	vldr	d7, [r3]
 8005218:	eeb1 7b47 	vneg.f64	d7, d7
 800521c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005220:	ed83 7b00 	vstr	d7, [r3]
  t278.im = -theta4;
 8005224:	f107 0310 	add.w	r3, r7, #16
 8005228:	ed93 7b00 	vldr	d7, [r3]
 800522c:	eeb1 7b47 	vneg.f64	d7, d7
 8005230:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005234:	ed83 7b02 	vstr	d7, [r3, #8]
  t255.re = t285.re;
 8005238:	4b17      	ldr	r3, [pc, #92]	; (8005298 <G_q+0x28e0>)
 800523a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800523e:	443a      	add	r2, r7
 8005240:	4413      	add	r3, r2
 8005242:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005246:	4b16      	ldr	r3, [pc, #88]	; (80052a0 <G_q+0x28e8>)
 8005248:	f241 30d0 	movw	r0, #5072	; 0x13d0
 800524c:	4438      	add	r0, r7
 800524e:	4403      	add	r3, r0
 8005250:	e9c3 1200 	strd	r1, r2, [r3]
  t255.im = theta4;
 8005254:	4b12      	ldr	r3, [pc, #72]	; (80052a0 <G_q+0x28e8>)
 8005256:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800525a:	443a      	add	r2, r7
 800525c:	4413      	add	r3, r2
 800525e:	f107 0210 	add.w	r2, r7, #16
 8005262:	e9d2 1200 	ldrd	r1, r2, [r2]
 8005266:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t254.re = -t285.re;
 800526a:	4b0b      	ldr	r3, [pc, #44]	; (8005298 <G_q+0x28e0>)
 800526c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005270:	443a      	add	r2, r7
 8005272:	4413      	add	r3, r2
 8005274:	ed93 7b00 	vldr	d7, [r3]
 8005278:	eeb1 7b47 	vneg.f64	d7, d7
 800527c:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8005280:	ed83 7b00 	vstr	d7, [r3]
 8005284:	e00e      	b.n	80052a4 <G_q+0x28ec>
 8005286:	bf00      	nop
	...
 8005290:	ffffec48 	.word	0xffffec48
 8005294:	ffffeff0 	.word	0xffffeff0
 8005298:	ffffefd0 	.word	0xffffefd0
 800529c:	ffffefb0 	.word	0xffffefb0
 80052a0:	ffffef90 	.word	0xffffef90
  t254.im = -theta4;
 80052a4:	f107 0310 	add.w	r3, r7, #16
 80052a8:	ed93 7b00 	vldr	d7, [r3]
 80052ac:	eeb1 7b47 	vneg.f64	d7, d7
 80052b0:	f507 7354 	add.w	r3, r7, #848	; 0x350
 80052b4:	ed83 7b02 	vstr	d7, [r3, #8]
  t243.re = t285.re;
 80052b8:	4bbd      	ldr	r3, [pc, #756]	; (80055b0 <G_q+0x2bf8>)
 80052ba:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80052be:	443a      	add	r2, r7
 80052c0:	4413      	add	r3, r2
 80052c2:	e9d3 1200 	ldrd	r1, r2, [r3]
 80052c6:	4bbb      	ldr	r3, [pc, #748]	; (80055b4 <G_q+0x2bfc>)
 80052c8:	f241 30d0 	movw	r0, #5072	; 0x13d0
 80052cc:	4438      	add	r0, r7
 80052ce:	4403      	add	r3, r0
 80052d0:	e9c3 1200 	strd	r1, r2, [r3]
  t243.im = theta4;
 80052d4:	4bb7      	ldr	r3, [pc, #732]	; (80055b4 <G_q+0x2bfc>)
 80052d6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80052da:	443a      	add	r2, r7
 80052dc:	4413      	add	r3, r2
 80052de:	f107 0210 	add.w	r2, r7, #16
 80052e2:	e9d2 1200 	ldrd	r1, r2, [r2]
 80052e6:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t242.re = -t285.re;
 80052ea:	4bb1      	ldr	r3, [pc, #708]	; (80055b0 <G_q+0x2bf8>)
 80052ec:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80052f0:	443a      	add	r2, r7
 80052f2:	4413      	add	r3, r2
 80052f4:	ed93 7b00 	vldr	d7, [r3]
 80052f8:	eeb1 7b47 	vneg.f64	d7, d7
 80052fc:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8005300:	ed83 7b00 	vstr	d7, [r3]
  t242.im = -theta4;
 8005304:	f107 0310 	add.w	r3, r7, #16
 8005308:	ed93 7b00 	vldr	d7, [r3]
 800530c:	eeb1 7b47 	vneg.f64	d7, d7
 8005310:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8005314:	ed83 7b02 	vstr	d7, [r3, #8]
  t231.re = t285.re;
 8005318:	4ba5      	ldr	r3, [pc, #660]	; (80055b0 <G_q+0x2bf8>)
 800531a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800531e:	443a      	add	r2, r7
 8005320:	4413      	add	r3, r2
 8005322:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005326:	4ba4      	ldr	r3, [pc, #656]	; (80055b8 <G_q+0x2c00>)
 8005328:	f241 30d0 	movw	r0, #5072	; 0x13d0
 800532c:	4438      	add	r0, r7
 800532e:	4403      	add	r3, r0
 8005330:	e9c3 1200 	strd	r1, r2, [r3]
  t231.im = theta4;
 8005334:	4ba0      	ldr	r3, [pc, #640]	; (80055b8 <G_q+0x2c00>)
 8005336:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800533a:	443a      	add	r2, r7
 800533c:	4413      	add	r3, r2
 800533e:	f107 0210 	add.w	r2, r7, #16
 8005342:	e9d2 1200 	ldrd	r1, r2, [r2]
 8005346:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t230.re = -t285.re;
 800534a:	4b99      	ldr	r3, [pc, #612]	; (80055b0 <G_q+0x2bf8>)
 800534c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005350:	443a      	add	r2, r7
 8005352:	4413      	add	r3, r2
 8005354:	ed93 7b00 	vldr	d7, [r3]
 8005358:	eeb1 7b47 	vneg.f64	d7, d7
 800535c:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8005360:	ed83 7b00 	vstr	d7, [r3]
  t230.im = -theta4;
 8005364:	f107 0310 	add.w	r3, r7, #16
 8005368:	ed93 7b00 	vldr	d7, [r3]
 800536c:	eeb1 7b47 	vneg.f64	d7, d7
 8005370:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8005374:	ed83 7b02 	vstr	d7, [r3, #8]
  t229.re = t285.re;
 8005378:	4b8d      	ldr	r3, [pc, #564]	; (80055b0 <G_q+0x2bf8>)
 800537a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800537e:	443a      	add	r2, r7
 8005380:	4413      	add	r3, r2
 8005382:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005386:	4b8d      	ldr	r3, [pc, #564]	; (80055bc <G_q+0x2c04>)
 8005388:	f241 30d0 	movw	r0, #5072	; 0x13d0
 800538c:	4438      	add	r0, r7
 800538e:	4403      	add	r3, r0
 8005390:	e9c3 1200 	strd	r1, r2, [r3]
  t229.im = theta4;
 8005394:	4b89      	ldr	r3, [pc, #548]	; (80055bc <G_q+0x2c04>)
 8005396:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800539a:	443a      	add	r2, r7
 800539c:	4413      	add	r3, r2
 800539e:	f107 0210 	add.w	r2, r7, #16
 80053a2:	e9d2 1200 	ldrd	r1, r2, [r2]
 80053a6:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t228.re = -t285.re;
 80053aa:	4b81      	ldr	r3, [pc, #516]	; (80055b0 <G_q+0x2bf8>)
 80053ac:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80053b0:	443a      	add	r2, r7
 80053b2:	4413      	add	r3, r2
 80053b4:	ed93 7b00 	vldr	d7, [r3]
 80053b8:	eeb1 7b47 	vneg.f64	d7, d7
 80053bc:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80053c0:	ed83 7b00 	vstr	d7, [r3]
  t228.im = -theta4;
 80053c4:	f107 0310 	add.w	r3, r7, #16
 80053c8:	ed93 7b00 	vldr	d7, [r3]
 80053cc:	eeb1 7b47 	vneg.f64	d7, d7
 80053d0:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80053d4:	ed83 7b02 	vstr	d7, [r3, #8]
  t209.re = t285.re;
 80053d8:	4b75      	ldr	r3, [pc, #468]	; (80055b0 <G_q+0x2bf8>)
 80053da:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80053de:	443a      	add	r2, r7
 80053e0:	4413      	add	r3, r2
 80053e2:	e9d3 1200 	ldrd	r1, r2, [r3]
 80053e6:	4b76      	ldr	r3, [pc, #472]	; (80055c0 <G_q+0x2c08>)
 80053e8:	f241 30d0 	movw	r0, #5072	; 0x13d0
 80053ec:	4438      	add	r0, r7
 80053ee:	4403      	add	r3, r0
 80053f0:	e9c3 1200 	strd	r1, r2, [r3]
  t209.im = theta4;
 80053f4:	4b72      	ldr	r3, [pc, #456]	; (80055c0 <G_q+0x2c08>)
 80053f6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80053fa:	443a      	add	r2, r7
 80053fc:	4413      	add	r3, r2
 80053fe:	f107 0210 	add.w	r2, r7, #16
 8005402:	e9d2 1200 	ldrd	r1, r2, [r2]
 8005406:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t208.re = -t285.re;
 800540a:	4b69      	ldr	r3, [pc, #420]	; (80055b0 <G_q+0x2bf8>)
 800540c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005410:	443a      	add	r2, r7
 8005412:	4413      	add	r3, r2
 8005414:	ed93 7b00 	vldr	d7, [r3]
 8005418:	eeb1 7b47 	vneg.f64	d7, d7
 800541c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005420:	ed83 7b00 	vstr	d7, [r3]
  t208.im = -theta4;
 8005424:	f107 0310 	add.w	r3, r7, #16
 8005428:	ed93 7b00 	vldr	d7, [r3]
 800542c:	eeb1 7b47 	vneg.f64	d7, d7
 8005430:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005434:	ed83 7b02 	vstr	d7, [r3, #8]
  t197.re = t285.re;
 8005438:	4b5d      	ldr	r3, [pc, #372]	; (80055b0 <G_q+0x2bf8>)
 800543a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800543e:	443a      	add	r2, r7
 8005440:	4413      	add	r3, r2
 8005442:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005446:	4b5f      	ldr	r3, [pc, #380]	; (80055c4 <G_q+0x2c0c>)
 8005448:	f241 30d0 	movw	r0, #5072	; 0x13d0
 800544c:	4438      	add	r0, r7
 800544e:	4403      	add	r3, r0
 8005450:	e9c3 1200 	strd	r1, r2, [r3]
  t197.im = theta4;
 8005454:	4b5b      	ldr	r3, [pc, #364]	; (80055c4 <G_q+0x2c0c>)
 8005456:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800545a:	443a      	add	r2, r7
 800545c:	4413      	add	r3, r2
 800545e:	f107 0210 	add.w	r2, r7, #16
 8005462:	e9d2 1200 	ldrd	r1, r2, [r2]
 8005466:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t196.re = -t285.re;
 800546a:	4b51      	ldr	r3, [pc, #324]	; (80055b0 <G_q+0x2bf8>)
 800546c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005470:	443a      	add	r2, r7
 8005472:	4413      	add	r3, r2
 8005474:	ed93 7b00 	vldr	d7, [r3]
 8005478:	eeb1 7b47 	vneg.f64	d7, d7
 800547c:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8005480:	ed83 7b00 	vstr	d7, [r3]
  t196.im = -theta4;
 8005484:	f107 0310 	add.w	r3, r7, #16
 8005488:	ed93 7b00 	vldr	d7, [r3]
 800548c:	eeb1 7b47 	vneg.f64	d7, d7
 8005490:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8005494:	ed83 7b02 	vstr	d7, [r3, #8]
  t185.re = t285.re;
 8005498:	4b45      	ldr	r3, [pc, #276]	; (80055b0 <G_q+0x2bf8>)
 800549a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800549e:	443a      	add	r2, r7
 80054a0:	4413      	add	r3, r2
 80054a2:	e9d3 1200 	ldrd	r1, r2, [r3]
 80054a6:	4b48      	ldr	r3, [pc, #288]	; (80055c8 <G_q+0x2c10>)
 80054a8:	f241 30d0 	movw	r0, #5072	; 0x13d0
 80054ac:	4438      	add	r0, r7
 80054ae:	4403      	add	r3, r0
 80054b0:	e9c3 1200 	strd	r1, r2, [r3]
  t185.im = theta4;
 80054b4:	4b44      	ldr	r3, [pc, #272]	; (80055c8 <G_q+0x2c10>)
 80054b6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80054ba:	443a      	add	r2, r7
 80054bc:	4413      	add	r3, r2
 80054be:	f107 0210 	add.w	r2, r7, #16
 80054c2:	e9d2 1200 	ldrd	r1, r2, [r2]
 80054c6:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t184.re = -t285.re;
 80054ca:	4b39      	ldr	r3, [pc, #228]	; (80055b0 <G_q+0x2bf8>)
 80054cc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80054d0:	443a      	add	r2, r7
 80054d2:	4413      	add	r3, r2
 80054d4:	ed93 7b00 	vldr	d7, [r3]
 80054d8:	eeb1 7b47 	vneg.f64	d7, d7
 80054dc:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80054e0:	ed83 7b00 	vstr	d7, [r3]
  t184.im = -theta4;
 80054e4:	f107 0310 	add.w	r3, r7, #16
 80054e8:	ed93 7b00 	vldr	d7, [r3]
 80054ec:	eeb1 7b47 	vneg.f64	d7, d7
 80054f0:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80054f4:	ed83 7b02 	vstr	d7, [r3, #8]
  t173.re = t285.re;
 80054f8:	4b2d      	ldr	r3, [pc, #180]	; (80055b0 <G_q+0x2bf8>)
 80054fa:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80054fe:	443a      	add	r2, r7
 8005500:	4413      	add	r3, r2
 8005502:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005506:	4b31      	ldr	r3, [pc, #196]	; (80055cc <G_q+0x2c14>)
 8005508:	f241 30d0 	movw	r0, #5072	; 0x13d0
 800550c:	4438      	add	r0, r7
 800550e:	4403      	add	r3, r0
 8005510:	e9c3 1200 	strd	r1, r2, [r3]
  t173.im = theta4;
 8005514:	4b2d      	ldr	r3, [pc, #180]	; (80055cc <G_q+0x2c14>)
 8005516:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800551a:	443a      	add	r2, r7
 800551c:	4413      	add	r3, r2
 800551e:	f107 0210 	add.w	r2, r7, #16
 8005522:	e9d2 1200 	ldrd	r1, r2, [r2]
 8005526:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t172.re = -t285.re;
 800552a:	4b21      	ldr	r3, [pc, #132]	; (80055b0 <G_q+0x2bf8>)
 800552c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005530:	443a      	add	r2, r7
 8005532:	4413      	add	r3, r2
 8005534:	ed93 7b00 	vldr	d7, [r3]
 8005538:	eeb1 7b47 	vneg.f64	d7, d7
 800553c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8005540:	ed83 7b00 	vstr	d7, [r3]
  t172.im = -theta4;
 8005544:	f107 0310 	add.w	r3, r7, #16
 8005548:	ed93 7b00 	vldr	d7, [r3]
 800554c:	eeb1 7b47 	vneg.f64	d7, d7
 8005550:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8005554:	ed83 7b02 	vstr	d7, [r3, #8]
  t159.re = t285.re;
 8005558:	4b15      	ldr	r3, [pc, #84]	; (80055b0 <G_q+0x2bf8>)
 800555a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800555e:	443a      	add	r2, r7
 8005560:	4413      	add	r3, r2
 8005562:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005566:	4b1a      	ldr	r3, [pc, #104]	; (80055d0 <G_q+0x2c18>)
 8005568:	f241 30d0 	movw	r0, #5072	; 0x13d0
 800556c:	4438      	add	r0, r7
 800556e:	4403      	add	r3, r0
 8005570:	e9c3 1200 	strd	r1, r2, [r3]
  t159.im = theta4;
 8005574:	4b16      	ldr	r3, [pc, #88]	; (80055d0 <G_q+0x2c18>)
 8005576:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800557a:	443a      	add	r2, r7
 800557c:	4413      	add	r3, r2
 800557e:	f107 0210 	add.w	r2, r7, #16
 8005582:	e9d2 1200 	ldrd	r1, r2, [r2]
 8005586:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t158.re = -t285.re;
 800558a:	4b09      	ldr	r3, [pc, #36]	; (80055b0 <G_q+0x2bf8>)
 800558c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005590:	443a      	add	r2, r7
 8005592:	4413      	add	r3, r2
 8005594:	ed93 7b00 	vldr	d7, [r3]
 8005598:	eeb1 7b47 	vneg.f64	d7, d7
 800559c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80055a0:	ed83 7b00 	vstr	d7, [r3]
  t158.im = -theta4;
 80055a4:	f107 0310 	add.w	r3, r7, #16
 80055a8:	ed93 7b00 	vldr	d7, [r3]
 80055ac:	e012      	b.n	80055d4 <G_q+0x2c1c>
 80055ae:	bf00      	nop
 80055b0:	ffffefd0 	.word	0xffffefd0
 80055b4:	ffffef70 	.word	0xffffef70
 80055b8:	ffffef50 	.word	0xffffef50
 80055bc:	ffffef30 	.word	0xffffef30
 80055c0:	ffffef10 	.word	0xffffef10
 80055c4:	ffffeef0 	.word	0xffffeef0
 80055c8:	ffffeed0 	.word	0xffffeed0
 80055cc:	ffffeeb0 	.word	0xffffeeb0
 80055d0:	ffffee90 	.word	0xffffee90
 80055d4:	eeb1 7b47 	vneg.f64	d7, d7
 80055d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80055dc:	ed83 7b02 	vstr	d7, [r3, #8]
  t153.re = t285.re;
 80055e0:	4bbd      	ldr	r3, [pc, #756]	; (80058d8 <G_q+0x2f20>)
 80055e2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80055e6:	443a      	add	r2, r7
 80055e8:	4413      	add	r3, r2
 80055ea:	e9d3 1200 	ldrd	r1, r2, [r3]
 80055ee:	4bbb      	ldr	r3, [pc, #748]	; (80058dc <G_q+0x2f24>)
 80055f0:	f241 30d0 	movw	r0, #5072	; 0x13d0
 80055f4:	4438      	add	r0, r7
 80055f6:	4403      	add	r3, r0
 80055f8:	e9c3 1200 	strd	r1, r2, [r3]
  t153.im = theta4;
 80055fc:	4bb7      	ldr	r3, [pc, #732]	; (80058dc <G_q+0x2f24>)
 80055fe:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005602:	443a      	add	r2, r7
 8005604:	4413      	add	r3, r2
 8005606:	f107 0210 	add.w	r2, r7, #16
 800560a:	e9d2 1200 	ldrd	r1, r2, [r2]
 800560e:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t152.re = -t285.re;
 8005612:	4bb1      	ldr	r3, [pc, #708]	; (80058d8 <G_q+0x2f20>)
 8005614:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005618:	443a      	add	r2, r7
 800561a:	4413      	add	r3, r2
 800561c:	ed93 7b00 	vldr	d7, [r3]
 8005620:	eeb1 7b47 	vneg.f64	d7, d7
 8005624:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8005628:	ed83 7b00 	vstr	d7, [r3]
  t152.im = -theta4;
 800562c:	f107 0310 	add.w	r3, r7, #16
 8005630:	ed93 7b00 	vldr	d7, [r3]
 8005634:	eeb1 7b47 	vneg.f64	d7, d7
 8005638:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800563c:	ed83 7b02 	vstr	d7, [r3, #8]
  t135.re = t285.re;
 8005640:	4ba5      	ldr	r3, [pc, #660]	; (80058d8 <G_q+0x2f20>)
 8005642:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005646:	443a      	add	r2, r7
 8005648:	4413      	add	r3, r2
 800564a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800564e:	4ba4      	ldr	r3, [pc, #656]	; (80058e0 <G_q+0x2f28>)
 8005650:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8005654:	4438      	add	r0, r7
 8005656:	4403      	add	r3, r0
 8005658:	e9c3 1200 	strd	r1, r2, [r3]
  t135.im = theta4;
 800565c:	4ba0      	ldr	r3, [pc, #640]	; (80058e0 <G_q+0x2f28>)
 800565e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005662:	443a      	add	r2, r7
 8005664:	4413      	add	r3, r2
 8005666:	f107 0210 	add.w	r2, r7, #16
 800566a:	e9d2 1200 	ldrd	r1, r2, [r2]
 800566e:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t134.re = -t285.re;
 8005672:	4b99      	ldr	r3, [pc, #612]	; (80058d8 <G_q+0x2f20>)
 8005674:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005678:	443a      	add	r2, r7
 800567a:	4413      	add	r3, r2
 800567c:	ed93 7b00 	vldr	d7, [r3]
 8005680:	eeb1 7b47 	vneg.f64	d7, d7
 8005684:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8005688:	ed83 7b00 	vstr	d7, [r3]
  t134.im = -theta4;
 800568c:	f107 0310 	add.w	r3, r7, #16
 8005690:	ed93 7b00 	vldr	d7, [r3]
 8005694:	eeb1 7b47 	vneg.f64	d7, d7
 8005698:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800569c:	ed83 7b02 	vstr	d7, [r3, #8]
  t123.re = t285.re;
 80056a0:	4b8d      	ldr	r3, [pc, #564]	; (80058d8 <G_q+0x2f20>)
 80056a2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80056a6:	443a      	add	r2, r7
 80056a8:	4413      	add	r3, r2
 80056aa:	e9d3 1200 	ldrd	r1, r2, [r3]
 80056ae:	4b8d      	ldr	r3, [pc, #564]	; (80058e4 <G_q+0x2f2c>)
 80056b0:	f241 30d0 	movw	r0, #5072	; 0x13d0
 80056b4:	4438      	add	r0, r7
 80056b6:	4403      	add	r3, r0
 80056b8:	e9c3 1200 	strd	r1, r2, [r3]
  t123.im = theta4;
 80056bc:	4b89      	ldr	r3, [pc, #548]	; (80058e4 <G_q+0x2f2c>)
 80056be:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80056c2:	443a      	add	r2, r7
 80056c4:	4413      	add	r3, r2
 80056c6:	f107 0210 	add.w	r2, r7, #16
 80056ca:	e9d2 1200 	ldrd	r1, r2, [r2]
 80056ce:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t122.re = -t285.re;
 80056d2:	4b81      	ldr	r3, [pc, #516]	; (80058d8 <G_q+0x2f20>)
 80056d4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80056d8:	443a      	add	r2, r7
 80056da:	4413      	add	r3, r2
 80056dc:	ed93 7b00 	vldr	d7, [r3]
 80056e0:	eeb1 7b47 	vneg.f64	d7, d7
 80056e4:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80056e8:	ed83 7b00 	vstr	d7, [r3]
  t122.im = -theta4;
 80056ec:	f107 0310 	add.w	r3, r7, #16
 80056f0:	ed93 7b00 	vldr	d7, [r3]
 80056f4:	eeb1 7b47 	vneg.f64	d7, d7
 80056f8:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80056fc:	ed83 7b02 	vstr	d7, [r3, #8]
  t103.re = t285.re;
 8005700:	4b75      	ldr	r3, [pc, #468]	; (80058d8 <G_q+0x2f20>)
 8005702:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005706:	443a      	add	r2, r7
 8005708:	4413      	add	r3, r2
 800570a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800570e:	4b76      	ldr	r3, [pc, #472]	; (80058e8 <G_q+0x2f30>)
 8005710:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8005714:	4438      	add	r0, r7
 8005716:	4403      	add	r3, r0
 8005718:	e9c3 1200 	strd	r1, r2, [r3]
  t103.im = theta4;
 800571c:	4b72      	ldr	r3, [pc, #456]	; (80058e8 <G_q+0x2f30>)
 800571e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005722:	443a      	add	r2, r7
 8005724:	4413      	add	r3, r2
 8005726:	f107 0210 	add.w	r2, r7, #16
 800572a:	e9d2 1200 	ldrd	r1, r2, [r2]
 800572e:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t102.re = -t285.re;
 8005732:	4b69      	ldr	r3, [pc, #420]	; (80058d8 <G_q+0x2f20>)
 8005734:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005738:	443a      	add	r2, r7
 800573a:	4413      	add	r3, r2
 800573c:	ed93 7b00 	vldr	d7, [r3]
 8005740:	eeb1 7b47 	vneg.f64	d7, d7
 8005744:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8005748:	ed83 7b00 	vstr	d7, [r3]
  t102.im = -theta4;
 800574c:	f107 0310 	add.w	r3, r7, #16
 8005750:	ed93 7b00 	vldr	d7, [r3]
 8005754:	eeb1 7b47 	vneg.f64	d7, d7
 8005758:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800575c:	ed83 7b02 	vstr	d7, [r3, #8]
  t101.re = t285.re;
 8005760:	4b5d      	ldr	r3, [pc, #372]	; (80058d8 <G_q+0x2f20>)
 8005762:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005766:	443a      	add	r2, r7
 8005768:	4413      	add	r3, r2
 800576a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800576e:	4b5f      	ldr	r3, [pc, #380]	; (80058ec <G_q+0x2f34>)
 8005770:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8005774:	4438      	add	r0, r7
 8005776:	4403      	add	r3, r0
 8005778:	e9c3 1200 	strd	r1, r2, [r3]
  t101.im = theta4;
 800577c:	4b5b      	ldr	r3, [pc, #364]	; (80058ec <G_q+0x2f34>)
 800577e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005782:	443a      	add	r2, r7
 8005784:	4413      	add	r3, r2
 8005786:	f107 0210 	add.w	r2, r7, #16
 800578a:	e9d2 1200 	ldrd	r1, r2, [r2]
 800578e:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t100.re = -t285.re;
 8005792:	4b51      	ldr	r3, [pc, #324]	; (80058d8 <G_q+0x2f20>)
 8005794:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005798:	443a      	add	r2, r7
 800579a:	4413      	add	r3, r2
 800579c:	ed93 7b00 	vldr	d7, [r3]
 80057a0:	eeb1 7b47 	vneg.f64	d7, d7
 80057a4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80057a8:	ed83 7b00 	vstr	d7, [r3]
  t100.im = -theta4;
 80057ac:	f107 0310 	add.w	r3, r7, #16
 80057b0:	ed93 7b00 	vldr	d7, [r3]
 80057b4:	eeb1 7b47 	vneg.f64	d7, d7
 80057b8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80057bc:	ed83 7b02 	vstr	d7, [r3, #8]
  t87.re = t285.re;
 80057c0:	4b45      	ldr	r3, [pc, #276]	; (80058d8 <G_q+0x2f20>)
 80057c2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80057c6:	443a      	add	r2, r7
 80057c8:	4413      	add	r3, r2
 80057ca:	e9d3 1200 	ldrd	r1, r2, [r3]
 80057ce:	4b48      	ldr	r3, [pc, #288]	; (80058f0 <G_q+0x2f38>)
 80057d0:	f241 30d0 	movw	r0, #5072	; 0x13d0
 80057d4:	4438      	add	r0, r7
 80057d6:	4403      	add	r3, r0
 80057d8:	e9c3 1200 	strd	r1, r2, [r3]
  t87.im = theta4;
 80057dc:	4b44      	ldr	r3, [pc, #272]	; (80058f0 <G_q+0x2f38>)
 80057de:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80057e2:	443a      	add	r2, r7
 80057e4:	4413      	add	r3, r2
 80057e6:	f107 0210 	add.w	r2, r7, #16
 80057ea:	e9d2 1200 	ldrd	r1, r2, [r2]
 80057ee:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t86.re = -t285.re;
 80057f2:	4b39      	ldr	r3, [pc, #228]	; (80058d8 <G_q+0x2f20>)
 80057f4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80057f8:	443a      	add	r2, r7
 80057fa:	4413      	add	r3, r2
 80057fc:	ed93 7b00 	vldr	d7, [r3]
 8005800:	eeb1 7b47 	vneg.f64	d7, d7
 8005804:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8005808:	ed83 7b00 	vstr	d7, [r3]
  t86.im = -theta4;
 800580c:	f107 0310 	add.w	r3, r7, #16
 8005810:	ed93 7b00 	vldr	d7, [r3]
 8005814:	eeb1 7b47 	vneg.f64	d7, d7
 8005818:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800581c:	ed83 7b02 	vstr	d7, [r3, #8]
  t59.re = t285.re;
 8005820:	4b2d      	ldr	r3, [pc, #180]	; (80058d8 <G_q+0x2f20>)
 8005822:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005826:	443a      	add	r2, r7
 8005828:	4413      	add	r3, r2
 800582a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800582e:	4b31      	ldr	r3, [pc, #196]	; (80058f4 <G_q+0x2f3c>)
 8005830:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8005834:	4438      	add	r0, r7
 8005836:	4403      	add	r3, r0
 8005838:	e9c3 1200 	strd	r1, r2, [r3]
  t59.im = theta4;
 800583c:	4b2d      	ldr	r3, [pc, #180]	; (80058f4 <G_q+0x2f3c>)
 800583e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005842:	443a      	add	r2, r7
 8005844:	4413      	add	r3, r2
 8005846:	f107 0210 	add.w	r2, r7, #16
 800584a:	e9d2 1200 	ldrd	r1, r2, [r2]
 800584e:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t58.re = -t285.re;
 8005852:	4b21      	ldr	r3, [pc, #132]	; (80058d8 <G_q+0x2f20>)
 8005854:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005858:	443a      	add	r2, r7
 800585a:	4413      	add	r3, r2
 800585c:	ed93 7b00 	vldr	d7, [r3]
 8005860:	eeb1 7b47 	vneg.f64	d7, d7
 8005864:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8005868:	ed83 7b00 	vstr	d7, [r3]
  t58.im = -theta4;
 800586c:	f107 0310 	add.w	r3, r7, #16
 8005870:	ed93 7b00 	vldr	d7, [r3]
 8005874:	eeb1 7b47 	vneg.f64	d7, d7
 8005878:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800587c:	ed83 7b02 	vstr	d7, [r3, #8]
  t42.re = t285.re;
 8005880:	4b15      	ldr	r3, [pc, #84]	; (80058d8 <G_q+0x2f20>)
 8005882:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005886:	443a      	add	r2, r7
 8005888:	4413      	add	r3, r2
 800588a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800588e:	4b1a      	ldr	r3, [pc, #104]	; (80058f8 <G_q+0x2f40>)
 8005890:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8005894:	4438      	add	r0, r7
 8005896:	4403      	add	r3, r0
 8005898:	e9c3 1200 	strd	r1, r2, [r3]
  t42.im = theta4;
 800589c:	4b16      	ldr	r3, [pc, #88]	; (80058f8 <G_q+0x2f40>)
 800589e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80058a2:	443a      	add	r2, r7
 80058a4:	4413      	add	r3, r2
 80058a6:	f107 0210 	add.w	r2, r7, #16
 80058aa:	e9d2 1200 	ldrd	r1, r2, [r2]
 80058ae:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t41.re = -t285.re;
 80058b2:	4b09      	ldr	r3, [pc, #36]	; (80058d8 <G_q+0x2f20>)
 80058b4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80058b8:	443a      	add	r2, r7
 80058ba:	4413      	add	r3, r2
 80058bc:	ed93 7b00 	vldr	d7, [r3]
 80058c0:	eeb1 7b47 	vneg.f64	d7, d7
 80058c4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80058c8:	ed83 7b00 	vstr	d7, [r3]
  t41.im = -theta4;
 80058cc:	f107 0310 	add.w	r3, r7, #16
 80058d0:	ed93 7b00 	vldr	d7, [r3]
 80058d4:	e012      	b.n	80058fc <G_q+0x2f44>
 80058d6:	bf00      	nop
 80058d8:	ffffefd0 	.word	0xffffefd0
 80058dc:	ffffee70 	.word	0xffffee70
 80058e0:	ffffee50 	.word	0xffffee50
 80058e4:	ffffee30 	.word	0xffffee30
 80058e8:	ffffee10 	.word	0xffffee10
 80058ec:	ffffedf0 	.word	0xffffedf0
 80058f0:	ffffedd0 	.word	0xffffedd0
 80058f4:	ffffedb0 	.word	0xffffedb0
 80058f8:	ffffed90 	.word	0xffffed90
 80058fc:	eeb1 7b47 	vneg.f64	d7, d7
 8005900:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005904:	ed83 7b02 	vstr	d7, [r3, #8]
  t22.re = t285.re;
 8005908:	4bbd      	ldr	r3, [pc, #756]	; (8005c00 <G_q+0x3248>)
 800590a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800590e:	443a      	add	r2, r7
 8005910:	4413      	add	r3, r2
 8005912:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005916:	4bbb      	ldr	r3, [pc, #748]	; (8005c04 <G_q+0x324c>)
 8005918:	f241 30d0 	movw	r0, #5072	; 0x13d0
 800591c:	4438      	add	r0, r7
 800591e:	4403      	add	r3, r0
 8005920:	e9c3 1200 	strd	r1, r2, [r3]
  t22.im = theta4;
 8005924:	4bb7      	ldr	r3, [pc, #732]	; (8005c04 <G_q+0x324c>)
 8005926:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800592a:	443a      	add	r2, r7
 800592c:	4413      	add	r3, r2
 800592e:	f107 0210 	add.w	r2, r7, #16
 8005932:	e9d2 1200 	ldrd	r1, r2, [r2]
 8005936:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t21.re = -t285.re;
 800593a:	4bb1      	ldr	r3, [pc, #708]	; (8005c00 <G_q+0x3248>)
 800593c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005940:	443a      	add	r2, r7
 8005942:	4413      	add	r3, r2
 8005944:	ed93 7b00 	vldr	d7, [r3]
 8005948:	eeb1 7b47 	vneg.f64	d7, d7
 800594c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005950:	ed83 7b00 	vstr	d7, [r3]
  t21.im = -theta4;
 8005954:	f107 0310 	add.w	r3, r7, #16
 8005958:	ed93 7b00 	vldr	d7, [r3]
 800595c:	eeb1 7b47 	vneg.f64	d7, d7
 8005960:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005964:	ed83 7b02 	vstr	d7, [r3, #8]
  t20.re = t285.re;
 8005968:	4ba5      	ldr	r3, [pc, #660]	; (8005c00 <G_q+0x3248>)
 800596a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800596e:	443a      	add	r2, r7
 8005970:	4413      	add	r3, r2
 8005972:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005976:	4ba4      	ldr	r3, [pc, #656]	; (8005c08 <G_q+0x3250>)
 8005978:	f241 30d0 	movw	r0, #5072	; 0x13d0
 800597c:	4438      	add	r0, r7
 800597e:	4403      	add	r3, r0
 8005980:	e9c3 1200 	strd	r1, r2, [r3]
  t20.im = theta4;
 8005984:	4ba0      	ldr	r3, [pc, #640]	; (8005c08 <G_q+0x3250>)
 8005986:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800598a:	443a      	add	r2, r7
 800598c:	4413      	add	r3, r2
 800598e:	f107 0210 	add.w	r2, r7, #16
 8005992:	e9d2 1200 	ldrd	r1, r2, [r2]
 8005996:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t19.re = -t285.re;
 800599a:	4b99      	ldr	r3, [pc, #612]	; (8005c00 <G_q+0x3248>)
 800599c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80059a0:	443a      	add	r2, r7
 80059a2:	4413      	add	r3, r2
 80059a4:	ed93 7b00 	vldr	d7, [r3]
 80059a8:	eeb1 7b47 	vneg.f64	d7, d7
 80059ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80059b0:	ed83 7b00 	vstr	d7, [r3]
  t19.im = -theta4;
 80059b4:	f107 0310 	add.w	r3, r7, #16
 80059b8:	ed93 7b00 	vldr	d7, [r3]
 80059bc:	eeb1 7b47 	vneg.f64	d7, d7
 80059c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80059c4:	ed83 7b02 	vstr	d7, [r3, #8]
  b_exp(&t19);
 80059c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80059cc:	4618      	mov	r0, r3
 80059ce:	f00d f90b 	bl	8012be8 <b_exp>
  t267.re = theta5 * 0.0;
 80059d2:	4b8e      	ldr	r3, [pc, #568]	; (8005c0c <G_q+0x3254>)
 80059d4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80059d8:	443a      	add	r2, r7
 80059da:	4413      	add	r3, r2
 80059dc:	ed93 7b00 	vldr	d7, [r3]
 80059e0:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8005bf8 <G_q+0x3240>
 80059e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80059e8:	4b89      	ldr	r3, [pc, #548]	; (8005c10 <G_q+0x3258>)
 80059ea:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80059ee:	443a      	add	r2, r7
 80059f0:	4413      	add	r3, r2
 80059f2:	ed83 7b00 	vstr	d7, [r3]
  t267.im = theta5;
 80059f6:	4b86      	ldr	r3, [pc, #536]	; (8005c10 <G_q+0x3258>)
 80059f8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80059fc:	443a      	add	r2, r7
 80059fe:	4413      	add	r3, r2
 8005a00:	4a82      	ldr	r2, [pc, #520]	; (8005c0c <G_q+0x3254>)
 8005a02:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8005a06:	4439      	add	r1, r7
 8005a08:	440a      	add	r2, r1
 8005a0a:	e9d2 1200 	ldrd	r1, r2, [r2]
 8005a0e:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t266.re = -t267.re;
 8005a12:	4b7f      	ldr	r3, [pc, #508]	; (8005c10 <G_q+0x3258>)
 8005a14:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005a18:	443a      	add	r2, r7
 8005a1a:	4413      	add	r3, r2
 8005a1c:	ed93 7b00 	vldr	d7, [r3]
 8005a20:	eeb1 7b47 	vneg.f64	d7, d7
 8005a24:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005a28:	ed83 7b00 	vstr	d7, [r3]
  t266.im = -theta5;
 8005a2c:	4b77      	ldr	r3, [pc, #476]	; (8005c0c <G_q+0x3254>)
 8005a2e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005a32:	443a      	add	r2, r7
 8005a34:	4413      	add	r3, r2
 8005a36:	ed93 7b00 	vldr	d7, [r3]
 8005a3a:	eeb1 7b47 	vneg.f64	d7, d7
 8005a3e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005a42:	ed83 7b02 	vstr	d7, [r3, #8]
  t265.re = t267.re;
 8005a46:	4b72      	ldr	r3, [pc, #456]	; (8005c10 <G_q+0x3258>)
 8005a48:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005a4c:	443a      	add	r2, r7
 8005a4e:	4413      	add	r3, r2
 8005a50:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005a54:	4b6f      	ldr	r3, [pc, #444]	; (8005c14 <G_q+0x325c>)
 8005a56:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8005a5a:	4438      	add	r0, r7
 8005a5c:	4403      	add	r3, r0
 8005a5e:	e9c3 1200 	strd	r1, r2, [r3]
  t265.im = theta5;
 8005a62:	4b6c      	ldr	r3, [pc, #432]	; (8005c14 <G_q+0x325c>)
 8005a64:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005a68:	443a      	add	r2, r7
 8005a6a:	4413      	add	r3, r2
 8005a6c:	4a67      	ldr	r2, [pc, #412]	; (8005c0c <G_q+0x3254>)
 8005a6e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8005a72:	4439      	add	r1, r7
 8005a74:	440a      	add	r2, r1
 8005a76:	e9d2 1200 	ldrd	r1, r2, [r2]
 8005a7a:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t264.re = -t267.re;
 8005a7e:	4b64      	ldr	r3, [pc, #400]	; (8005c10 <G_q+0x3258>)
 8005a80:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005a84:	443a      	add	r2, r7
 8005a86:	4413      	add	r3, r2
 8005a88:	ed93 7b00 	vldr	d7, [r3]
 8005a8c:	eeb1 7b47 	vneg.f64	d7, d7
 8005a90:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005a94:	ed83 7b00 	vstr	d7, [r3]
  t264.im = -theta5;
 8005a98:	4b5c      	ldr	r3, [pc, #368]	; (8005c0c <G_q+0x3254>)
 8005a9a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005a9e:	443a      	add	r2, r7
 8005aa0:	4413      	add	r3, r2
 8005aa2:	ed93 7b00 	vldr	d7, [r3]
 8005aa6:	eeb1 7b47 	vneg.f64	d7, d7
 8005aaa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005aae:	ed83 7b02 	vstr	d7, [r3, #8]
  t219.re = t267.re;
 8005ab2:	4b57      	ldr	r3, [pc, #348]	; (8005c10 <G_q+0x3258>)
 8005ab4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005ab8:	443a      	add	r2, r7
 8005aba:	4413      	add	r3, r2
 8005abc:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005ac0:	4b55      	ldr	r3, [pc, #340]	; (8005c18 <G_q+0x3260>)
 8005ac2:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8005ac6:	4438      	add	r0, r7
 8005ac8:	4403      	add	r3, r0
 8005aca:	e9c3 1200 	strd	r1, r2, [r3]
  t219.im = theta5;
 8005ace:	4b52      	ldr	r3, [pc, #328]	; (8005c18 <G_q+0x3260>)
 8005ad0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005ad4:	443a      	add	r2, r7
 8005ad6:	4413      	add	r3, r2
 8005ad8:	4a4c      	ldr	r2, [pc, #304]	; (8005c0c <G_q+0x3254>)
 8005ada:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8005ade:	4439      	add	r1, r7
 8005ae0:	440a      	add	r2, r1
 8005ae2:	e9d2 1200 	ldrd	r1, r2, [r2]
 8005ae6:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t218.re = -t267.re;
 8005aea:	4b49      	ldr	r3, [pc, #292]	; (8005c10 <G_q+0x3258>)
 8005aec:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005af0:	443a      	add	r2, r7
 8005af2:	4413      	add	r3, r2
 8005af4:	ed93 7b00 	vldr	d7, [r3]
 8005af8:	eeb1 7b47 	vneg.f64	d7, d7
 8005afc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005b00:	ed83 7b00 	vstr	d7, [r3]
  t218.im = -theta5;
 8005b04:	4b41      	ldr	r3, [pc, #260]	; (8005c0c <G_q+0x3254>)
 8005b06:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005b0a:	443a      	add	r2, r7
 8005b0c:	4413      	add	r3, r2
 8005b0e:	ed93 7b00 	vldr	d7, [r3]
 8005b12:	eeb1 7b47 	vneg.f64	d7, d7
 8005b16:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005b1a:	ed83 7b02 	vstr	d7, [r3, #8]
  t195.re = t267.re;
 8005b1e:	4b3c      	ldr	r3, [pc, #240]	; (8005c10 <G_q+0x3258>)
 8005b20:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005b24:	443a      	add	r2, r7
 8005b26:	4413      	add	r3, r2
 8005b28:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005b2c:	4b3b      	ldr	r3, [pc, #236]	; (8005c1c <G_q+0x3264>)
 8005b2e:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8005b32:	4438      	add	r0, r7
 8005b34:	4403      	add	r3, r0
 8005b36:	e9c3 1200 	strd	r1, r2, [r3]
  t195.im = theta5;
 8005b3a:	4b38      	ldr	r3, [pc, #224]	; (8005c1c <G_q+0x3264>)
 8005b3c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005b40:	443a      	add	r2, r7
 8005b42:	4413      	add	r3, r2
 8005b44:	4a31      	ldr	r2, [pc, #196]	; (8005c0c <G_q+0x3254>)
 8005b46:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8005b4a:	4439      	add	r1, r7
 8005b4c:	440a      	add	r2, r1
 8005b4e:	e9d2 1200 	ldrd	r1, r2, [r2]
 8005b52:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t194.re = -t267.re;
 8005b56:	4b2e      	ldr	r3, [pc, #184]	; (8005c10 <G_q+0x3258>)
 8005b58:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005b5c:	443a      	add	r2, r7
 8005b5e:	4413      	add	r3, r2
 8005b60:	ed93 7b00 	vldr	d7, [r3]
 8005b64:	eeb1 7b47 	vneg.f64	d7, d7
 8005b68:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005b6c:	ed83 7b00 	vstr	d7, [r3]
  t194.im = -theta5;
 8005b70:	4b26      	ldr	r3, [pc, #152]	; (8005c0c <G_q+0x3254>)
 8005b72:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005b76:	443a      	add	r2, r7
 8005b78:	4413      	add	r3, r2
 8005b7a:	ed93 7b00 	vldr	d7, [r3]
 8005b7e:	eeb1 7b47 	vneg.f64	d7, d7
 8005b82:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005b86:	ed83 7b02 	vstr	d7, [r3, #8]
  t125.re = t267.re;
 8005b8a:	4b21      	ldr	r3, [pc, #132]	; (8005c10 <G_q+0x3258>)
 8005b8c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005b90:	443a      	add	r2, r7
 8005b92:	4413      	add	r3, r2
 8005b94:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005b98:	4b21      	ldr	r3, [pc, #132]	; (8005c20 <G_q+0x3268>)
 8005b9a:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8005b9e:	4438      	add	r0, r7
 8005ba0:	4403      	add	r3, r0
 8005ba2:	e9c3 1200 	strd	r1, r2, [r3]
  t125.im = theta5;
 8005ba6:	4b1e      	ldr	r3, [pc, #120]	; (8005c20 <G_q+0x3268>)
 8005ba8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005bac:	443a      	add	r2, r7
 8005bae:	4413      	add	r3, r2
 8005bb0:	4a16      	ldr	r2, [pc, #88]	; (8005c0c <G_q+0x3254>)
 8005bb2:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8005bb6:	4439      	add	r1, r7
 8005bb8:	440a      	add	r2, r1
 8005bba:	e9d2 1200 	ldrd	r1, r2, [r2]
 8005bbe:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t124.re = -t267.re;
 8005bc2:	4b13      	ldr	r3, [pc, #76]	; (8005c10 <G_q+0x3258>)
 8005bc4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005bc8:	443a      	add	r2, r7
 8005bca:	4413      	add	r3, r2
 8005bcc:	ed93 7b00 	vldr	d7, [r3]
 8005bd0:	eeb1 7b47 	vneg.f64	d7, d7
 8005bd4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005bd8:	ed83 7b00 	vstr	d7, [r3]
  t124.im = -theta5;
 8005bdc:	4b0b      	ldr	r3, [pc, #44]	; (8005c0c <G_q+0x3254>)
 8005bde:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005be2:	443a      	add	r2, r7
 8005be4:	4413      	add	r3, r2
 8005be6:	ed93 7b00 	vldr	d7, [r3]
 8005bea:	eeb1 7b47 	vneg.f64	d7, d7
 8005bee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005bf2:	e017      	b.n	8005c24 <G_q+0x326c>
 8005bf4:	f3af 8000 	nop.w
	...
 8005c00:	ffffefd0 	.word	0xffffefd0
 8005c04:	ffffed70 	.word	0xffffed70
 8005c08:	ffffed50 	.word	0xffffed50
 8005c0c:	ffffec38 	.word	0xffffec38
 8005c10:	ffffed30 	.word	0xffffed30
 8005c14:	ffffed10 	.word	0xffffed10
 8005c18:	ffffecf0 	.word	0xffffecf0
 8005c1c:	ffffecd0 	.word	0xffffecd0
 8005c20:	ffffecb0 	.word	0xffffecb0
 8005c24:	ed83 7b02 	vstr	d7, [r3, #8]
  t113.re = t267.re;
 8005c28:	4be2      	ldr	r3, [pc, #904]	; (8005fb4 <G_q+0x35fc>)
 8005c2a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005c2e:	443a      	add	r2, r7
 8005c30:	4413      	add	r3, r2
 8005c32:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005c36:	4be0      	ldr	r3, [pc, #896]	; (8005fb8 <G_q+0x3600>)
 8005c38:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8005c3c:	4438      	add	r0, r7
 8005c3e:	4403      	add	r3, r0
 8005c40:	e9c3 1200 	strd	r1, r2, [r3]
  t113.im = theta5;
 8005c44:	4bdc      	ldr	r3, [pc, #880]	; (8005fb8 <G_q+0x3600>)
 8005c46:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005c4a:	443a      	add	r2, r7
 8005c4c:	4413      	add	r3, r2
 8005c4e:	4adb      	ldr	r2, [pc, #876]	; (8005fbc <G_q+0x3604>)
 8005c50:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8005c54:	4439      	add	r1, r7
 8005c56:	440a      	add	r2, r1
 8005c58:	e9d2 1200 	ldrd	r1, r2, [r2]
 8005c5c:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t112.re = -t267.re;
 8005c60:	4bd4      	ldr	r3, [pc, #848]	; (8005fb4 <G_q+0x35fc>)
 8005c62:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005c66:	443a      	add	r2, r7
 8005c68:	4413      	add	r3, r2
 8005c6a:	ed93 7b00 	vldr	d7, [r3]
 8005c6e:	eeb1 7b47 	vneg.f64	d7, d7
 8005c72:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005c76:	ed83 7b00 	vstr	d7, [r3]
  t112.im = -theta5;
 8005c7a:	4bd0      	ldr	r3, [pc, #832]	; (8005fbc <G_q+0x3604>)
 8005c7c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005c80:	443a      	add	r2, r7
 8005c82:	4413      	add	r3, r2
 8005c84:	ed93 7b00 	vldr	d7, [r3]
 8005c88:	eeb1 7b47 	vneg.f64	d7, d7
 8005c8c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005c90:	ed83 7b02 	vstr	d7, [r3, #8]
  t55.re = t267.re;
 8005c94:	4bc7      	ldr	r3, [pc, #796]	; (8005fb4 <G_q+0x35fc>)
 8005c96:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005c9a:	443a      	add	r2, r7
 8005c9c:	4413      	add	r3, r2
 8005c9e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005ca2:	4bc7      	ldr	r3, [pc, #796]	; (8005fc0 <G_q+0x3608>)
 8005ca4:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8005ca8:	4438      	add	r0, r7
 8005caa:	4403      	add	r3, r0
 8005cac:	e9c3 1200 	strd	r1, r2, [r3]
  t55.im = theta5;
 8005cb0:	4bc3      	ldr	r3, [pc, #780]	; (8005fc0 <G_q+0x3608>)
 8005cb2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005cb6:	443a      	add	r2, r7
 8005cb8:	4413      	add	r3, r2
 8005cba:	4ac0      	ldr	r2, [pc, #768]	; (8005fbc <G_q+0x3604>)
 8005cbc:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8005cc0:	4439      	add	r1, r7
 8005cc2:	440a      	add	r2, r1
 8005cc4:	e9d2 1200 	ldrd	r1, r2, [r2]
 8005cc8:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t54.re = -t267.re;
 8005ccc:	4bb9      	ldr	r3, [pc, #740]	; (8005fb4 <G_q+0x35fc>)
 8005cce:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005cd2:	443a      	add	r2, r7
 8005cd4:	4413      	add	r3, r2
 8005cd6:	ed93 7b00 	vldr	d7, [r3]
 8005cda:	eeb1 7b47 	vneg.f64	d7, d7
 8005cde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005ce2:	ed83 7b00 	vstr	d7, [r3]
  t54.im = -theta5;
 8005ce6:	4bb5      	ldr	r3, [pc, #724]	; (8005fbc <G_q+0x3604>)
 8005ce8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005cec:	443a      	add	r2, r7
 8005cee:	4413      	add	r3, r2
 8005cf0:	ed93 7b00 	vldr	d7, [r3]
 8005cf4:	eeb1 7b47 	vneg.f64	d7, d7
 8005cf8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005cfc:	ed83 7b02 	vstr	d7, [r3, #8]
  b_exp(&t54);
 8005d00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005d04:	4618      	mov	r0, r3
 8005d06:	f00c ff6f 	bl	8012be8 <b_exp>
  b_exp(&t87);
 8005d0a:	4bae      	ldr	r3, [pc, #696]	; (8005fc4 <G_q+0x360c>)
 8005d0c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005d10:	443a      	add	r2, r7
 8005d12:	4413      	add	r3, r2
 8005d14:	4618      	mov	r0, r3
 8005d16:	f00c ff67 	bl	8012be8 <b_exp>
  b_exp(&t83);
 8005d1a:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f00c ff62 	bl	8012be8 <b_exp>
  b_exp(&t85);
 8005d24:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f00c ff5d 	bl	8012be8 <b_exp>
  b_exp(&t55);
 8005d2e:	4ba4      	ldr	r3, [pc, #656]	; (8005fc0 <G_q+0x3608>)
 8005d30:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005d34:	443a      	add	r2, r7
 8005d36:	4413      	add	r3, r2
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f00c ff55 	bl	8012be8 <b_exp>
  b_exp(&t33);
 8005d3e:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8005d42:	4618      	mov	r0, r3
 8005d44:	f00c ff50 	bl	8012be8 <b_exp>
  b_exp(&t34);
 8005d48:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f00c ff4b 	bl	8012be8 <b_exp>
  b_exp(&t35);
 8005d52:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8005d56:	4618      	mov	r0, r3
 8005d58:	f00c ff46 	bl	8012be8 <b_exp>
  b_exp(&t36);
 8005d5c:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8005d60:	4618      	mov	r0, r3
 8005d62:	f00c ff41 	bl	8012be8 <b_exp>
  b_exp(&t37);
 8005d66:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f00c ff3c 	bl	8012be8 <b_exp>
  b_exp(&t38);
 8005d70:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8005d74:	4618      	mov	r0, r3
 8005d76:	f00c ff37 	bl	8012be8 <b_exp>
  b_exp(&t39);
 8005d7a:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f00c ff32 	bl	8012be8 <b_exp>
  b_exp(&t40);
 8005d84:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f00c ff2d 	bl	8012be8 <b_exp>
  b_exp(&t10);
 8005d8e:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8005d92:	4618      	mov	r0, r3
 8005d94:	f00c ff28 	bl	8012be8 <b_exp>
  b_exp(&t11);
 8005d98:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f00c ff23 	bl	8012be8 <b_exp>
  b_exp(&t12);
 8005da2:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8005da6:	4618      	mov	r0, r3
 8005da8:	f00c ff1e 	bl	8012be8 <b_exp>
  b_exp(&t13);
 8005dac:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8005db0:	4618      	mov	r0, r3
 8005db2:	f00c ff19 	bl	8012be8 <b_exp>
  b_exp(&t14);
 8005db6:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f00c ff14 	bl	8012be8 <b_exp>
  b_exp(&t15);
 8005dc0:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f00c ff0f 	bl	8012be8 <b_exp>
  b_exp(&t16);
 8005dca:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f00c ff0a 	bl	8012be8 <b_exp>
  b_exp(&t17);
 8005dd4:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f00c ff05 	bl	8012be8 <b_exp>
  b_exp(&t20);
 8005dde:	4b7a      	ldr	r3, [pc, #488]	; (8005fc8 <G_q+0x3610>)
 8005de0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005de4:	443a      	add	r2, r7
 8005de6:	4413      	add	r3, r2
 8005de8:	4618      	mov	r0, r3
 8005dea:	f00c fefd 	bl	8012be8 <b_exp>
  b_exp(&t21);
 8005dee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005df2:	4618      	mov	r0, r3
 8005df4:	f00c fef8 	bl	8012be8 <b_exp>
  b_exp(&t22);
 8005df8:	4b74      	ldr	r3, [pc, #464]	; (8005fcc <G_q+0x3614>)
 8005dfa:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005dfe:	443a      	add	r2, r7
 8005e00:	4413      	add	r3, r2
 8005e02:	4618      	mov	r0, r3
 8005e04:	f00c fef0 	bl	8012be8 <b_exp>
  b_exp(&t23);
 8005e08:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f00c feeb 	bl	8012be8 <b_exp>
  b_exp(&t24);
 8005e12:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8005e16:	4618      	mov	r0, r3
 8005e18:	f00c fee6 	bl	8012be8 <b_exp>
  b_exp(&t27);
 8005e1c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8005e20:	4618      	mov	r0, r3
 8005e22:	f00c fee1 	bl	8012be8 <b_exp>
  b_exp(&t28);
 8005e26:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f00c fedc 	bl	8012be8 <b_exp>
  b_exp(&t25);
 8005e30:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8005e34:	4618      	mov	r0, r3
 8005e36:	f00c fed7 	bl	8012be8 <b_exp>
  b_exp(&t26);
 8005e3a:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f00c fed2 	bl	8012be8 <b_exp>
  b_exp(&t31);
 8005e44:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f00c fecd 	bl	8012be8 <b_exp>
  b_exp(&t32);
 8005e4e:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8005e52:	4618      	mov	r0, r3
 8005e54:	f00c fec8 	bl	8012be8 <b_exp>
  b_exp(&t29);
 8005e58:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f00c fec3 	bl	8012be8 <b_exp>
  b_exp(&t30);
 8005e62:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8005e66:	4618      	mov	r0, r3
 8005e68:	f00c febe 	bl	8012be8 <b_exp>
  b_exp(&t9);
 8005e6c:	4b58      	ldr	r3, [pc, #352]	; (8005fd0 <G_q+0x3618>)
 8005e6e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005e72:	443a      	add	r2, r7
 8005e74:	4413      	add	r3, r2
 8005e76:	4618      	mov	r0, r3
 8005e78:	f00c feb6 	bl	8012be8 <b_exp>
  b_exp(&t5);
 8005e7c:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8005e80:	4618      	mov	r0, r3
 8005e82:	f00c feb1 	bl	8012be8 <b_exp>
  b_exp(&t6);
 8005e86:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f00c feac 	bl	8012be8 <b_exp>
  b_exp(&t4);
 8005e90:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8005e94:	4618      	mov	r0, r3
 8005e96:	f00c fea7 	bl	8012be8 <b_exp>
  b_exp(&t41);
 8005e9a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f00c fea2 	bl	8012be8 <b_exp>
  b_exp(&t42);
 8005ea4:	4b4b      	ldr	r3, [pc, #300]	; (8005fd4 <G_q+0x361c>)
 8005ea6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005eaa:	443a      	add	r2, r7
 8005eac:	4413      	add	r3, r2
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f00c fe9a 	bl	8012be8 <b_exp>
  b_exp(&t43);
 8005eb4:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f00c fe95 	bl	8012be8 <b_exp>
  b_exp(&t44);
 8005ebe:	f507 6338 	add.w	r3, r7, #2944	; 0xb80
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f00c fe90 	bl	8012be8 <b_exp>
  b_exp(&t47);
 8005ec8:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f00c fe8b 	bl	8012be8 <b_exp>
  b_exp(&t48);
 8005ed2:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f00c fe86 	bl	8012be8 <b_exp>
  b_exp(&t45);
 8005edc:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f00c fe81 	bl	8012be8 <b_exp>
  b_exp(&t46);
 8005ee6:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 8005eea:	4618      	mov	r0, r3
 8005eec:	f00c fe7c 	bl	8012be8 <b_exp>
  b_exp(&t51);
 8005ef0:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f00c fe77 	bl	8012be8 <b_exp>
  b_exp(&t52);
 8005efa:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8005efe:	4618      	mov	r0, r3
 8005f00:	f00c fe72 	bl	8012be8 <b_exp>
  b_exp(&t49);
 8005f04:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f00c fe6d 	bl	8012be8 <b_exp>
  b_exp(&t50);
 8005f0e:	f507 633c 	add.w	r3, r7, #3008	; 0xbc0
 8005f12:	4618      	mov	r0, r3
 8005f14:	f00c fe68 	bl	8012be8 <b_exp>
  b_exp(&t56);
 8005f18:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f00c fe63 	bl	8012be8 <b_exp>
  b_exp(&t57);
 8005f22:	f507 633e 	add.w	r3, r7, #3040	; 0xbe0
 8005f26:	4618      	mov	r0, r3
 8005f28:	f00c fe5e 	bl	8012be8 <b_exp>
  b_exp(&t70);
 8005f2c:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 8005f30:	4618      	mov	r0, r3
 8005f32:	f00c fe59 	bl	8012be8 <b_exp>
  b_exp(&t71);
 8005f36:	f507 6346 	add.w	r3, r7, #3168	; 0xc60
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f00c fe54 	bl	8012be8 <b_exp>
  b_exp(&t72);
 8005f40:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8005f44:	4618      	mov	r0, r3
 8005f46:	f00c fe4f 	bl	8012be8 <b_exp>
  b_exp(&t73);
 8005f4a:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f00c fe4a 	bl	8012be8 <b_exp>
  b_exp(&t74);
 8005f54:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f00c fe45 	bl	8012be8 <b_exp>
  b_exp(&t75);
 8005f5e:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8005f62:	4618      	mov	r0, r3
 8005f64:	f00c fe40 	bl	8012be8 <b_exp>
  b_exp(&t76);
 8005f68:	f507 6347 	add.w	r3, r7, #3184	; 0xc70
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f00c fe3b 	bl	8012be8 <b_exp>
  b_exp(&t77);
 8005f72:	f507 6348 	add.w	r3, r7, #3200	; 0xc80
 8005f76:	4618      	mov	r0, r3
 8005f78:	f00c fe36 	bl	8012be8 <b_exp>
  b_exp(&t58);
 8005f7c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8005f80:	4618      	mov	r0, r3
 8005f82:	f00c fe31 	bl	8012be8 <b_exp>
  b_exp(&t59);
 8005f86:	4b14      	ldr	r3, [pc, #80]	; (8005fd8 <G_q+0x3620>)
 8005f88:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005f8c:	443a      	add	r2, r7
 8005f8e:	4413      	add	r3, r2
 8005f90:	4618      	mov	r0, r3
 8005f92:	f00c fe29 	bl	8012be8 <b_exp>
  b_exp(&t60);
 8005f96:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f00c fe24 	bl	8012be8 <b_exp>
  b_exp(&t61);
 8005fa0:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f00c fe1f 	bl	8012be8 <b_exp>
  b_exp(&t64);
 8005faa:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8005fae:	4618      	mov	r0, r3
 8005fb0:	e014      	b.n	8005fdc <G_q+0x3624>
 8005fb2:	bf00      	nop
 8005fb4:	ffffed30 	.word	0xffffed30
 8005fb8:	ffffec90 	.word	0xffffec90
 8005fbc:	ffffec38 	.word	0xffffec38
 8005fc0:	ffffec70 	.word	0xffffec70
 8005fc4:	ffffedd0 	.word	0xffffedd0
 8005fc8:	ffffed50 	.word	0xffffed50
 8005fcc:	ffffed70 	.word	0xffffed70
 8005fd0:	ffffeff0 	.word	0xffffeff0
 8005fd4:	ffffed90 	.word	0xffffed90
 8005fd8:	ffffedb0 	.word	0xffffedb0
 8005fdc:	f00c fe04 	bl	8012be8 <b_exp>
  b_exp(&t65);
 8005fe0:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f00c fdff 	bl	8012be8 <b_exp>
  b_exp(&t62);
 8005fea:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f00c fdfa 	bl	8012be8 <b_exp>
  b_exp(&t63);
 8005ff4:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f00c fdf5 	bl	8012be8 <b_exp>
  b_exp(&t68);
 8005ffe:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8006002:	4618      	mov	r0, r3
 8006004:	f00c fdf0 	bl	8012be8 <b_exp>
  b_exp(&t69);
 8006008:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800600c:	4618      	mov	r0, r3
 800600e:	f00c fdeb 	bl	8012be8 <b_exp>
  b_exp(&t66);
 8006012:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8006016:	4618      	mov	r0, r3
 8006018:	f00c fde6 	bl	8012be8 <b_exp>
  b_exp(&t67);
 800601c:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8006020:	4618      	mov	r0, r3
 8006022:	f00c fde1 	bl	8012be8 <b_exp>
  b_exp(&t78);
 8006026:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 800602a:	4618      	mov	r0, r3
 800602c:	f00c fddc 	bl	8012be8 <b_exp>
  b_exp(&t79);
 8006030:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 8006034:	4618      	mov	r0, r3
 8006036:	f00c fdd7 	bl	8012be8 <b_exp>
  b_exp(&t80);
 800603a:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800603e:	4618      	mov	r0, r3
 8006040:	f00c fdd2 	bl	8012be8 <b_exp>
  b_exp(&t81);
 8006044:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006048:	4618      	mov	r0, r3
 800604a:	f00c fdcd 	bl	8012be8 <b_exp>
  b_exp(&t82);
 800604e:	f507 634b 	add.w	r3, r7, #3248	; 0xcb0
 8006052:	4618      	mov	r0, r3
 8006054:	f00c fdc8 	bl	8012be8 <b_exp>
  b_exp(&t84);
 8006058:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 800605c:	4618      	mov	r0, r3
 800605e:	f00c fdc3 	bl	8012be8 <b_exp>
  b_exp(&t86);
 8006062:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8006066:	4618      	mov	r0, r3
 8006068:	f00c fdbe 	bl	8012be8 <b_exp>
  b_exp(&t154);
 800606c:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8006070:	4618      	mov	r0, r3
 8006072:	f00c fdb9 	bl	8012be8 <b_exp>
  b_exp(&t155);
 8006076:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800607a:	4618      	mov	r0, r3
 800607c:	f00c fdb4 	bl	8012be8 <b_exp>
  b_exp(&t156);
 8006080:	f507 6365 	add.w	r3, r7, #3664	; 0xe50
 8006084:	4618      	mov	r0, r3
 8006086:	f00c fdaf 	bl	8012be8 <b_exp>
  b_exp(&t157);
 800608a:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800608e:	4618      	mov	r0, r3
 8006090:	f00c fdaa 	bl	8012be8 <b_exp>
  b_exp(&t112);
 8006094:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006098:	4618      	mov	r0, r3
 800609a:	f00c fda5 	bl	8012be8 <b_exp>
  b_exp(&t113);
 800609e:	4bf3      	ldr	r3, [pc, #972]	; (800646c <G_q+0x3ab4>)
 80060a0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80060a4:	443a      	add	r2, r7
 80060a6:	4413      	add	r3, r2
 80060a8:	4618      	mov	r0, r3
 80060aa:	f00c fd9d 	bl	8012be8 <b_exp>
  b_exp(&t98);
 80060ae:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 80060b2:	4618      	mov	r0, r3
 80060b4:	f00c fd98 	bl	8012be8 <b_exp>
  b_exp(&t99);
 80060b8:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 80060bc:	4618      	mov	r0, r3
 80060be:	f00c fd93 	bl	8012be8 <b_exp>
  b_exp(&t96);
 80060c2:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 80060c6:	4618      	mov	r0, r3
 80060c8:	f00c fd8e 	bl	8012be8 <b_exp>
  b_exp(&t97);
 80060cc:	f507 6350 	add.w	r3, r7, #3328	; 0xd00
 80060d0:	4618      	mov	r0, r3
 80060d2:	f00c fd89 	bl	8012be8 <b_exp>
  b_exp(&t92);
 80060d6:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 80060da:	4618      	mov	r0, r3
 80060dc:	f00c fd84 	bl	8012be8 <b_exp>
  b_exp(&t93);
 80060e0:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 80060e4:	4618      	mov	r0, r3
 80060e6:	f00c fd7f 	bl	8012be8 <b_exp>
  b_exp(&t94);
 80060ea:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80060ee:	4618      	mov	r0, r3
 80060f0:	f00c fd7a 	bl	8012be8 <b_exp>
  b_exp(&t95);
 80060f4:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 80060f8:	4618      	mov	r0, r3
 80060fa:	f00c fd75 	bl	8012be8 <b_exp>
  b_exp(&t100);
 80060fe:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8006102:	4618      	mov	r0, r3
 8006104:	f00c fd70 	bl	8012be8 <b_exp>
  b_exp(&t101);
 8006108:	4bd9      	ldr	r3, [pc, #868]	; (8006470 <G_q+0x3ab8>)
 800610a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800610e:	443a      	add	r2, r7
 8006110:	4413      	add	r3, r2
 8006112:	4618      	mov	r0, r3
 8006114:	f00c fd68 	bl	8012be8 <b_exp>
  b_exp(&t104);
 8006118:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 800611c:	4618      	mov	r0, r3
 800611e:	f00c fd63 	bl	8012be8 <b_exp>
  b_exp(&t105);
 8006122:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8006126:	4618      	mov	r0, r3
 8006128:	f00c fd5e 	bl	8012be8 <b_exp>
  b_exp(&t106);
 800612c:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8006130:	4618      	mov	r0, r3
 8006132:	f00c fd59 	bl	8012be8 <b_exp>
  b_exp(&t107);
 8006136:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 800613a:	4618      	mov	r0, r3
 800613c:	f00c fd54 	bl	8012be8 <b_exp>
  b_exp(&t108);
 8006140:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8006144:	4618      	mov	r0, r3
 8006146:	f00c fd4f 	bl	8012be8 <b_exp>
  b_exp(&t109);
 800614a:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800614e:	4618      	mov	r0, r3
 8006150:	f00c fd4a 	bl	8012be8 <b_exp>
  b_exp(&t110);
 8006154:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8006158:	4618      	mov	r0, r3
 800615a:	f00c fd45 	bl	8012be8 <b_exp>
  b_exp(&t111);
 800615e:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 8006162:	4618      	mov	r0, r3
 8006164:	f00c fd40 	bl	8012be8 <b_exp>
  b_exp(&t102);
 8006168:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800616c:	4618      	mov	r0, r3
 800616e:	f00c fd3b 	bl	8012be8 <b_exp>
  b_exp(&t103);
 8006172:	4bc0      	ldr	r3, [pc, #768]	; (8006474 <G_q+0x3abc>)
 8006174:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006178:	443a      	add	r2, r7
 800617a:	4413      	add	r3, r2
 800617c:	4618      	mov	r0, r3
 800617e:	f00c fd33 	bl	8012be8 <b_exp>
  b_exp(&t124);
 8006182:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006186:	4618      	mov	r0, r3
 8006188:	f00c fd2e 	bl	8012be8 <b_exp>
  b_exp(&t125);
 800618c:	4bba      	ldr	r3, [pc, #744]	; (8006478 <G_q+0x3ac0>)
 800618e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006192:	443a      	add	r2, r7
 8006194:	4413      	add	r3, r2
 8006196:	4618      	mov	r0, r3
 8006198:	f00c fd26 	bl	8012be8 <b_exp>
  b_exp(&t136);
 800619c:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 80061a0:	4618      	mov	r0, r3
 80061a2:	f00c fd21 	bl	8012be8 <b_exp>
  b_exp(&t137);
 80061a6:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 80061aa:	4618      	mov	r0, r3
 80061ac:	f00c fd1c 	bl	8012be8 <b_exp>
  b_exp(&t138);
 80061b0:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 80061b4:	4618      	mov	r0, r3
 80061b6:	f00c fd17 	bl	8012be8 <b_exp>
  b_exp(&t139);
 80061ba:	f507 635e 	add.w	r3, r7, #3552	; 0xde0
 80061be:	4618      	mov	r0, r3
 80061c0:	f00c fd12 	bl	8012be8 <b_exp>
  b_exp(&t152);
 80061c4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80061c8:	4618      	mov	r0, r3
 80061ca:	f00c fd0d 	bl	8012be8 <b_exp>
  b_exp(&t153);
 80061ce:	4bab      	ldr	r3, [pc, #684]	; (800647c <G_q+0x3ac4>)
 80061d0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80061d4:	443a      	add	r2, r7
 80061d6:	4413      	add	r3, r2
 80061d8:	4618      	mov	r0, r3
 80061da:	f00c fd05 	bl	8012be8 <b_exp>
  b_exp(&t150);
 80061de:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80061e2:	4618      	mov	r0, r3
 80061e4:	f00c fd00 	bl	8012be8 <b_exp>
  b_exp(&t151);
 80061e8:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 80061ec:	4618      	mov	r0, r3
 80061ee:	f00c fcfb 	bl	8012be8 <b_exp>
  b_exp(&t148);
 80061f2:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 80061f6:	4618      	mov	r0, r3
 80061f8:	f00c fcf6 	bl	8012be8 <b_exp>
  b_exp(&t149);
 80061fc:	f507 6364 	add.w	r3, r7, #3648	; 0xe40
 8006200:	4618      	mov	r0, r3
 8006202:	f00c fcf1 	bl	8012be8 <b_exp>
  b_exp(&t144);
 8006206:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 800620a:	4618      	mov	r0, r3
 800620c:	f00c fcec 	bl	8012be8 <b_exp>
  b_exp(&t145);
 8006210:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8006214:	4618      	mov	r0, r3
 8006216:	f00c fce7 	bl	8012be8 <b_exp>
  b_exp(&t146);
 800621a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 800621e:	4618      	mov	r0, r3
 8006220:	f00c fce2 	bl	8012be8 <b_exp>
  b_exp(&t147);
 8006224:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 8006228:	4618      	mov	r0, r3
 800622a:	f00c fcdd 	bl	8012be8 <b_exp>
  b_exp(&t134);
 800622e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8006232:	4618      	mov	r0, r3
 8006234:	f00c fcd8 	bl	8012be8 <b_exp>
  b_exp(&t135);
 8006238:	4b91      	ldr	r3, [pc, #580]	; (8006480 <G_q+0x3ac8>)
 800623a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800623e:	443a      	add	r2, r7
 8006240:	4413      	add	r3, r2
 8006242:	4618      	mov	r0, r3
 8006244:	f00c fcd0 	bl	8012be8 <b_exp>
  b_exp(&t126);
 8006248:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 800624c:	4618      	mov	r0, r3
 800624e:	f00c fccb 	bl	8012be8 <b_exp>
  b_exp(&t127);
 8006252:	f507 635a 	add.w	r3, r7, #3488	; 0xda0
 8006256:	4618      	mov	r0, r3
 8006258:	f00c fcc6 	bl	8012be8 <b_exp>
  b_exp(&t128);
 800625c:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8006260:	4618      	mov	r0, r3
 8006262:	f00c fcc1 	bl	8012be8 <b_exp>
  b_exp(&t129);
 8006266:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 800626a:	4618      	mov	r0, r3
 800626c:	f00c fcbc 	bl	8012be8 <b_exp>
  b_exp(&t130);
 8006270:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8006274:	4618      	mov	r0, r3
 8006276:	f00c fcb7 	bl	8012be8 <b_exp>
  b_exp(&t131);
 800627a:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 800627e:	4618      	mov	r0, r3
 8006280:	f00c fcb2 	bl	8012be8 <b_exp>
  b_exp(&t132);
 8006284:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 8006288:	4618      	mov	r0, r3
 800628a:	f00c fcad 	bl	8012be8 <b_exp>
  b_exp(&t133);
 800628e:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 8006292:	4618      	mov	r0, r3
 8006294:	f00c fca8 	bl	8012be8 <b_exp>
  b_exp(&t140);
 8006298:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 800629c:	4618      	mov	r0, r3
 800629e:	f00c fca3 	bl	8012be8 <b_exp>
  b_exp(&t141);
 80062a2:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 80062a6:	4618      	mov	r0, r3
 80062a8:	f00c fc9e 	bl	8012be8 <b_exp>
  b_exp(&t142);
 80062ac:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 80062b0:	4618      	mov	r0, r3
 80062b2:	f00c fc99 	bl	8012be8 <b_exp>
  b_exp(&t143);
 80062b6:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80062ba:	4618      	mov	r0, r3
 80062bc:	f00c fc94 	bl	8012be8 <b_exp>
  b_exp(&t168);
 80062c0:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 80062c4:	4618      	mov	r0, r3
 80062c6:	f00c fc8f 	bl	8012be8 <b_exp>
  b_exp(&t169);
 80062ca:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 80062ce:	4618      	mov	r0, r3
 80062d0:	f00c fc8a 	bl	8012be8 <b_exp>
  b_exp(&t170);
 80062d4:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 80062d8:	4618      	mov	r0, r3
 80062da:	f00c fc85 	bl	8012be8 <b_exp>
  b_exp(&t171);
 80062de:	f507 636c 	add.w	r3, r7, #3776	; 0xec0
 80062e2:	4618      	mov	r0, r3
 80062e4:	f00c fc80 	bl	8012be8 <b_exp>
  b_exp(&t120);
 80062e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80062ec:	4618      	mov	r0, r3
 80062ee:	f00c fc7b 	bl	8012be8 <b_exp>
  b_exp(&t121);
 80062f2:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 80062f6:	4618      	mov	r0, r3
 80062f8:	f00c fc76 	bl	8012be8 <b_exp>
  b_exp(&t118);
 80062fc:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 8006300:	4618      	mov	r0, r3
 8006302:	f00c fc71 	bl	8012be8 <b_exp>
  b_exp(&t119);
 8006306:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 800630a:	4618      	mov	r0, r3
 800630c:	f00c fc6c 	bl	8012be8 <b_exp>
  b_exp(&t114);
 8006310:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8006314:	4618      	mov	r0, r3
 8006316:	f00c fc67 	bl	8012be8 <b_exp>
  b_exp(&t115);
 800631a:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800631e:	4618      	mov	r0, r3
 8006320:	f00c fc62 	bl	8012be8 <b_exp>
  b_exp(&t116);
 8006324:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8006328:	4618      	mov	r0, r3
 800632a:	f00c fc5d 	bl	8012be8 <b_exp>
  b_exp(&t117);
 800632e:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 8006332:	4618      	mov	r0, r3
 8006334:	f00c fc58 	bl	8012be8 <b_exp>
  b_exp(&t122);
 8006338:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800633c:	4618      	mov	r0, r3
 800633e:	f00c fc53 	bl	8012be8 <b_exp>
  b_exp(&t123);
 8006342:	4b50      	ldr	r3, [pc, #320]	; (8006484 <G_q+0x3acc>)
 8006344:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006348:	443a      	add	r2, r7
 800634a:	4413      	add	r3, r2
 800634c:	4618      	mov	r0, r3
 800634e:	f00c fc4b 	bl	8012be8 <b_exp>
  b_exp(&t160);
 8006352:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 8006356:	4618      	mov	r0, r3
 8006358:	f00c fc46 	bl	8012be8 <b_exp>
  b_exp(&t161);
 800635c:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8006360:	4618      	mov	r0, r3
 8006362:	f00c fc41 	bl	8012be8 <b_exp>
  b_exp(&t162);
 8006366:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800636a:	4618      	mov	r0, r3
 800636c:	f00c fc3c 	bl	8012be8 <b_exp>
  b_exp(&t163);
 8006370:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8006374:	4618      	mov	r0, r3
 8006376:	f00c fc37 	bl	8012be8 <b_exp>
  b_exp(&t164);
 800637a:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800637e:	4618      	mov	r0, r3
 8006380:	f00c fc32 	bl	8012be8 <b_exp>
  b_exp(&t165);
 8006384:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 8006388:	4618      	mov	r0, r3
 800638a:	f00c fc2d 	bl	8012be8 <b_exp>
  b_exp(&t166);
 800638e:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 8006392:	4618      	mov	r0, r3
 8006394:	f00c fc28 	bl	8012be8 <b_exp>
  b_exp(&t167);
 8006398:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 800639c:	4618      	mov	r0, r3
 800639e:	f00c fc23 	bl	8012be8 <b_exp>
  b_exp(&t158);
 80063a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80063a6:	4618      	mov	r0, r3
 80063a8:	f00c fc1e 	bl	8012be8 <b_exp>
  b_exp(&t159);
 80063ac:	4b36      	ldr	r3, [pc, #216]	; (8006488 <G_q+0x3ad0>)
 80063ae:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80063b2:	443a      	add	r2, r7
 80063b4:	4413      	add	r3, r2
 80063b6:	4618      	mov	r0, r3
 80063b8:	f00c fc16 	bl	8012be8 <b_exp>
  b_exp(&t194);
 80063bc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80063c0:	4618      	mov	r0, r3
 80063c2:	f00c fc11 	bl	8012be8 <b_exp>
  b_exp(&t195);
 80063c6:	4b31      	ldr	r3, [pc, #196]	; (800648c <G_q+0x3ad4>)
 80063c8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80063cc:	443a      	add	r2, r7
 80063ce:	4413      	add	r3, r2
 80063d0:	4618      	mov	r0, r3
 80063d2:	f00c fc09 	bl	8012be8 <b_exp>
  b_exp(&t172);
 80063d6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80063da:	4618      	mov	r0, r3
 80063dc:	f00c fc04 	bl	8012be8 <b_exp>
  b_exp(&t173);
 80063e0:	4b2b      	ldr	r3, [pc, #172]	; (8006490 <G_q+0x3ad8>)
 80063e2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80063e6:	443a      	add	r2, r7
 80063e8:	4413      	add	r3, r2
 80063ea:	4618      	mov	r0, r3
 80063ec:	f00c fbfc 	bl	8012be8 <b_exp>
  b_exp(&t174);
 80063f0:	f507 636d 	add.w	r3, r7, #3792	; 0xed0
 80063f4:	4618      	mov	r0, r3
 80063f6:	f00c fbf7 	bl	8012be8 <b_exp>
  b_exp(&t175);
 80063fa:	f507 636e 	add.w	r3, r7, #3808	; 0xee0
 80063fe:	4618      	mov	r0, r3
 8006400:	f00c fbf2 	bl	8012be8 <b_exp>
  b_exp(&t182);
 8006404:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 8006408:	4618      	mov	r0, r3
 800640a:	f00c fbed 	bl	8012be8 <b_exp>
  b_exp(&t183);
 800640e:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 8006412:	4618      	mov	r0, r3
 8006414:	f00c fbe8 	bl	8012be8 <b_exp>
  b_exp(&t180);
 8006418:	f507 6371 	add.w	r3, r7, #3856	; 0xf10
 800641c:	4618      	mov	r0, r3
 800641e:	f00c fbe3 	bl	8012be8 <b_exp>
  b_exp(&t181);
 8006422:	f507 6372 	add.w	r3, r7, #3872	; 0xf20
 8006426:	4618      	mov	r0, r3
 8006428:	f00c fbde 	bl	8012be8 <b_exp>
  b_exp(&t176);
 800642c:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 8006430:	4618      	mov	r0, r3
 8006432:	f00c fbd9 	bl	8012be8 <b_exp>
  b_exp(&t177);
 8006436:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 800643a:	4618      	mov	r0, r3
 800643c:	f00c fbd4 	bl	8012be8 <b_exp>
  b_exp(&t178);
 8006440:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8006444:	4618      	mov	r0, r3
 8006446:	f00c fbcf 	bl	8012be8 <b_exp>
  b_exp(&t179);
 800644a:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 800644e:	4618      	mov	r0, r3
 8006450:	f00c fbca 	bl	8012be8 <b_exp>
  b_exp(&t186);
 8006454:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 8006458:	4618      	mov	r0, r3
 800645a:	f00c fbc5 	bl	8012be8 <b_exp>
  b_exp(&t187);
 800645e:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8006462:	4618      	mov	r0, r3
 8006464:	f00c fbc0 	bl	8012be8 <b_exp>
 8006468:	e014      	b.n	8006494 <G_q+0x3adc>
 800646a:	bf00      	nop
 800646c:	ffffec90 	.word	0xffffec90
 8006470:	ffffedf0 	.word	0xffffedf0
 8006474:	ffffee10 	.word	0xffffee10
 8006478:	ffffecb0 	.word	0xffffecb0
 800647c:	ffffee70 	.word	0xffffee70
 8006480:	ffffee50 	.word	0xffffee50
 8006484:	ffffee30 	.word	0xffffee30
 8006488:	ffffee90 	.word	0xffffee90
 800648c:	ffffecd0 	.word	0xffffecd0
 8006490:	ffffeeb0 	.word	0xffffeeb0
  b_exp(&t188);
 8006494:	f507 6373 	add.w	r3, r7, #3888	; 0xf30
 8006498:	4618      	mov	r0, r3
 800649a:	f00c fba5 	bl	8012be8 <b_exp>
  b_exp(&t189);
 800649e:	f507 6374 	add.w	r3, r7, #3904	; 0xf40
 80064a2:	4618      	mov	r0, r3
 80064a4:	f00c fba0 	bl	8012be8 <b_exp>
  b_exp(&t190);
 80064a8:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 80064ac:	4618      	mov	r0, r3
 80064ae:	f00c fb9b 	bl	8012be8 <b_exp>
  b_exp(&t191);
 80064b2:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 80064b6:	4618      	mov	r0, r3
 80064b8:	f00c fb96 	bl	8012be8 <b_exp>
  b_exp(&t192);
 80064bc:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 80064c0:	4618      	mov	r0, r3
 80064c2:	f00c fb91 	bl	8012be8 <b_exp>
  b_exp(&t193);
 80064c6:	f507 6376 	add.w	r3, r7, #3936	; 0xf60
 80064ca:	4618      	mov	r0, r3
 80064cc:	f00c fb8c 	bl	8012be8 <b_exp>
  b_exp(&t184);
 80064d0:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80064d4:	4618      	mov	r0, r3
 80064d6:	f00c fb87 	bl	8012be8 <b_exp>
  b_exp(&t185);
 80064da:	4bec      	ldr	r3, [pc, #944]	; (800688c <G_q+0x3ed4>)
 80064dc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80064e0:	443a      	add	r2, r7
 80064e2:	4413      	add	r3, r2
 80064e4:	4618      	mov	r0, r3
 80064e6:	f00c fb7f 	bl	8012be8 <b_exp>
  b_exp(&t196);
 80064ea:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 80064ee:	4618      	mov	r0, r3
 80064f0:	f00c fb7a 	bl	8012be8 <b_exp>
  b_exp(&t197);
 80064f4:	4be6      	ldr	r3, [pc, #920]	; (8006890 <G_q+0x3ed8>)
 80064f6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80064fa:	443a      	add	r2, r7
 80064fc:	4413      	add	r3, r2
 80064fe:	4618      	mov	r0, r3
 8006500:	f00c fb72 	bl	8012be8 <b_exp>
  b_exp(&t198);
 8006504:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8006508:	4618      	mov	r0, r3
 800650a:	f00c fb6d 	bl	8012be8 <b_exp>
  b_exp(&t199);
 800650e:	f507 6378 	add.w	r3, r7, #3968	; 0xf80
 8006512:	4618      	mov	r0, r3
 8006514:	f00c fb68 	bl	8012be8 <b_exp>
  b_exp(&t206);
 8006518:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 800651c:	4618      	mov	r0, r3
 800651e:	f00c fb63 	bl	8012be8 <b_exp>
  b_exp(&t207);
 8006522:	f507 6304 	add.w	r3, r7, #2112	; 0x840
 8006526:	4618      	mov	r0, r3
 8006528:	f00c fb5e 	bl	8012be8 <b_exp>
  b_exp(&t204);
 800652c:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 8006530:	4618      	mov	r0, r3
 8006532:	f00c fb59 	bl	8012be8 <b_exp>
  b_exp(&t205);
 8006536:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 800653a:	4618      	mov	r0, r3
 800653c:	f00c fb54 	bl	8012be8 <b_exp>
  b_exp(&t200);
 8006540:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8006544:	4618      	mov	r0, r3
 8006546:	f00c fb4f 	bl	8012be8 <b_exp>
  b_exp(&t201);
 800654a:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800654e:	4618      	mov	r0, r3
 8006550:	f00c fb4a 	bl	8012be8 <b_exp>
  b_exp(&t202);
 8006554:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 8006558:	4618      	mov	r0, r3
 800655a:	f00c fb45 	bl	8012be8 <b_exp>
  b_exp(&t203);
 800655e:	f507 637a 	add.w	r3, r7, #4000	; 0xfa0
 8006562:	4618      	mov	r0, r3
 8006564:	f00c fb40 	bl	8012be8 <b_exp>
  b_exp(&t210);
 8006568:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800656c:	4618      	mov	r0, r3
 800656e:	f00c fb3b 	bl	8012be8 <b_exp>
  b_exp(&t211);
 8006572:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8006576:	4618      	mov	r0, r3
 8006578:	f00c fb36 	bl	8012be8 <b_exp>
  b_exp(&t212);
 800657c:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 8006580:	4618      	mov	r0, r3
 8006582:	f00c fb31 	bl	8012be8 <b_exp>
  b_exp(&t213);
 8006586:	f507 637e 	add.w	r3, r7, #4064	; 0xfe0
 800658a:	4618      	mov	r0, r3
 800658c:	f00c fb2c 	bl	8012be8 <b_exp>
  b_exp(&t214);
 8006590:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8006594:	4618      	mov	r0, r3
 8006596:	f00c fb27 	bl	8012be8 <b_exp>
  b_exp(&t215);
 800659a:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800659e:	4618      	mov	r0, r3
 80065a0:	f00c fb22 	bl	8012be8 <b_exp>
  b_exp(&t216);
 80065a4:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 80065a8:	4618      	mov	r0, r3
 80065aa:	f00c fb1d 	bl	8012be8 <b_exp>
  b_exp(&t217);
 80065ae:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80065b2:	4618      	mov	r0, r3
 80065b4:	f00c fb18 	bl	8012be8 <b_exp>
  b_exp(&t208);
 80065b8:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80065bc:	4618      	mov	r0, r3
 80065be:	f00c fb13 	bl	8012be8 <b_exp>
  b_exp(&t209);
 80065c2:	4bb4      	ldr	r3, [pc, #720]	; (8006894 <G_q+0x3edc>)
 80065c4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80065c8:	443a      	add	r2, r7
 80065ca:	4413      	add	r3, r2
 80065cc:	4618      	mov	r0, r3
 80065ce:	f00c fb0b 	bl	8012be8 <b_exp>
  b_exp(&t230);
 80065d2:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80065d6:	4618      	mov	r0, r3
 80065d8:	f00c fb06 	bl	8012be8 <b_exp>
  b_exp(&t231);
 80065dc:	4bae      	ldr	r3, [pc, #696]	; (8006898 <G_q+0x3ee0>)
 80065de:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80065e2:	443a      	add	r2, r7
 80065e4:	4413      	add	r3, r2
 80065e6:	4618      	mov	r0, r3
 80065e8:	f00c fafe 	bl	8012be8 <b_exp>
  b_exp(&t232);
 80065ec:	f241 0350 	movw	r3, #4176	; 0x1050
 80065f0:	443b      	add	r3, r7
 80065f2:	4618      	mov	r0, r3
 80065f4:	f00c faf8 	bl	8012be8 <b_exp>
  b_exp(&t233);
 80065f8:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80065fc:	4618      	mov	r0, r3
 80065fe:	f00c faf3 	bl	8012be8 <b_exp>
  b_exp(&t240);
 8006602:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8006606:	4618      	mov	r0, r3
 8006608:	f00c faee 	bl	8012be8 <b_exp>
  b_exp(&t241);
 800660c:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 8006610:	4618      	mov	r0, r3
 8006612:	f00c fae9 	bl	8012be8 <b_exp>
  b_exp(&t238);
 8006616:	f241 0390 	movw	r3, #4240	; 0x1090
 800661a:	443b      	add	r3, r7
 800661c:	4618      	mov	r0, r3
 800661e:	f00c fae3 	bl	8012be8 <b_exp>
  b_exp(&t239);
 8006622:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8006626:	4618      	mov	r0, r3
 8006628:	f00c fade 	bl	8012be8 <b_exp>
  b_exp(&t234);
 800662c:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8006630:	4618      	mov	r0, r3
 8006632:	f00c fad9 	bl	8012be8 <b_exp>
  b_exp(&t235);
 8006636:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 800663a:	4618      	mov	r0, r3
 800663c:	f00c fad4 	bl	8012be8 <b_exp>
  b_exp(&t236);
 8006640:	f241 0370 	movw	r3, #4208	; 0x1070
 8006644:	443b      	add	r3, r7
 8006646:	4618      	mov	r0, r3
 8006648:	f00c face 	bl	8012be8 <b_exp>
  b_exp(&t237);
 800664c:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8006650:	4618      	mov	r0, r3
 8006652:	f00c fac9 	bl	8012be8 <b_exp>
  b_exp(&t228);
 8006656:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800665a:	4618      	mov	r0, r3
 800665c:	f00c fac4 	bl	8012be8 <b_exp>
  b_exp(&t229);
 8006660:	4b8e      	ldr	r3, [pc, #568]	; (800689c <G_q+0x3ee4>)
 8006662:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006666:	443a      	add	r2, r7
 8006668:	4413      	add	r3, r2
 800666a:	4618      	mov	r0, r3
 800666c:	f00c fabc 	bl	8012be8 <b_exp>
  b_exp(&t220);
 8006670:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8006674:	4618      	mov	r0, r3
 8006676:	f00c fab7 	bl	8012be8 <b_exp>
  b_exp(&t221);
 800667a:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800667e:	4618      	mov	r0, r3
 8006680:	f00c fab2 	bl	8012be8 <b_exp>
  b_exp(&t222);
 8006684:	f241 0310 	movw	r3, #4112	; 0x1010
 8006688:	443b      	add	r3, r7
 800668a:	4618      	mov	r0, r3
 800668c:	f00c faac 	bl	8012be8 <b_exp>
  b_exp(&t223);
 8006690:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006694:	4618      	mov	r0, r3
 8006696:	f00c faa7 	bl	8012be8 <b_exp>
  b_exp(&t224);
 800669a:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800669e:	4618      	mov	r0, r3
 80066a0:	f00c faa2 	bl	8012be8 <b_exp>
  b_exp(&t225);
 80066a4:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 80066a8:	4618      	mov	r0, r3
 80066aa:	f00c fa9d 	bl	8012be8 <b_exp>
  b_exp(&t226);
 80066ae:	f241 0330 	movw	r3, #4144	; 0x1030
 80066b2:	443b      	add	r3, r7
 80066b4:	4618      	mov	r0, r3
 80066b6:	f00c fa97 	bl	8012be8 <b_exp>
  b_exp(&t227);
 80066ba:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80066be:	4618      	mov	r0, r3
 80066c0:	f00c fa92 	bl	8012be8 <b_exp>
  b_exp(&t218);
 80066c4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80066c8:	4618      	mov	r0, r3
 80066ca:	f00c fa8d 	bl	8012be8 <b_exp>
  b_exp(&t219);
 80066ce:	4b74      	ldr	r3, [pc, #464]	; (80068a0 <G_q+0x3ee8>)
 80066d0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80066d4:	443a      	add	r2, r7
 80066d6:	4413      	add	r3, r2
 80066d8:	4618      	mov	r0, r3
 80066da:	f00c fa85 	bl	8012be8 <b_exp>
  b_exp(&t264);
 80066de:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80066e2:	4618      	mov	r0, r3
 80066e4:	f00c fa80 	bl	8012be8 <b_exp>
  b_exp(&t265);
 80066e8:	4b6e      	ldr	r3, [pc, #440]	; (80068a4 <G_q+0x3eec>)
 80066ea:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80066ee:	443a      	add	r2, r7
 80066f0:	4413      	add	r3, r2
 80066f2:	4618      	mov	r0, r3
 80066f4:	f00c fa78 	bl	8012be8 <b_exp>
  b_exp(&t242);
 80066f8:	f507 734c 	add.w	r3, r7, #816	; 0x330
 80066fc:	4618      	mov	r0, r3
 80066fe:	f00c fa73 	bl	8012be8 <b_exp>
  b_exp(&t243);
 8006702:	4b69      	ldr	r3, [pc, #420]	; (80068a8 <G_q+0x3ef0>)
 8006704:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006708:	443a      	add	r2, r7
 800670a:	4413      	add	r3, r2
 800670c:	4618      	mov	r0, r3
 800670e:	f00c fa6b 	bl	8012be8 <b_exp>
  b_exp(&t244);
 8006712:	f241 03b0 	movw	r3, #4272	; 0x10b0
 8006716:	443b      	add	r3, r7
 8006718:	4618      	mov	r0, r3
 800671a:	f00c fa65 	bl	8012be8 <b_exp>
  b_exp(&t245);
 800671e:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 8006722:	4618      	mov	r0, r3
 8006724:	f00c fa60 	bl	8012be8 <b_exp>
  b_exp(&t252);
 8006728:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 800672c:	4618      	mov	r0, r3
 800672e:	f00c fa5b 	bl	8012be8 <b_exp>
  b_exp(&t253);
 8006732:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8006736:	4618      	mov	r0, r3
 8006738:	f00c fa56 	bl	8012be8 <b_exp>
  b_exp(&t250);
 800673c:	f241 03f0 	movw	r3, #4336	; 0x10f0
 8006740:	443b      	add	r3, r7
 8006742:	4618      	mov	r0, r3
 8006744:	f00c fa50 	bl	8012be8 <b_exp>
  b_exp(&t251);
 8006748:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800674c:	4618      	mov	r0, r3
 800674e:	f00c fa4b 	bl	8012be8 <b_exp>
  b_exp(&t246);
 8006752:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8006756:	4618      	mov	r0, r3
 8006758:	f00c fa46 	bl	8012be8 <b_exp>
  b_exp(&t247);
 800675c:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8006760:	4618      	mov	r0, r3
 8006762:	f00c fa41 	bl	8012be8 <b_exp>
  b_exp(&t248);
 8006766:	f241 03d0 	movw	r3, #4304	; 0x10d0
 800676a:	443b      	add	r3, r7
 800676c:	4618      	mov	r0, r3
 800676e:	f00c fa3b 	bl	8012be8 <b_exp>
  b_exp(&t249);
 8006772:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8006776:	4618      	mov	r0, r3
 8006778:	f00c fa36 	bl	8012be8 <b_exp>
  b_exp(&t256);
 800677c:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8006780:	4618      	mov	r0, r3
 8006782:	f00c fa31 	bl	8012be8 <b_exp>
  b_exp(&t257);
 8006786:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 800678a:	4618      	mov	r0, r3
 800678c:	f00c fa2c 	bl	8012be8 <b_exp>
  b_exp(&t258);
 8006790:	f241 1310 	movw	r3, #4368	; 0x1110
 8006794:	443b      	add	r3, r7
 8006796:	4618      	mov	r0, r3
 8006798:	f00c fa26 	bl	8012be8 <b_exp>
  b_exp(&t259);
 800679c:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 80067a0:	4618      	mov	r0, r3
 80067a2:	f00c fa21 	bl	8012be8 <b_exp>
  b_exp(&t260);
 80067a6:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 80067aa:	4618      	mov	r0, r3
 80067ac:	f00c fa1c 	bl	8012be8 <b_exp>
  b_exp(&t261);
 80067b0:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 80067b4:	4618      	mov	r0, r3
 80067b6:	f00c fa17 	bl	8012be8 <b_exp>
  b_exp(&t262);
 80067ba:	f241 1330 	movw	r3, #4400	; 0x1130
 80067be:	443b      	add	r3, r7
 80067c0:	4618      	mov	r0, r3
 80067c2:	f00c fa11 	bl	8012be8 <b_exp>
  b_exp(&t263);
 80067c6:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80067ca:	4618      	mov	r0, r3
 80067cc:	f00c fa0c 	bl	8012be8 <b_exp>
  b_exp(&t254);
 80067d0:	f507 7354 	add.w	r3, r7, #848	; 0x350
 80067d4:	4618      	mov	r0, r3
 80067d6:	f00c fa07 	bl	8012be8 <b_exp>
  b_exp(&t255);
 80067da:	4b34      	ldr	r3, [pc, #208]	; (80068ac <G_q+0x3ef4>)
 80067dc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80067e0:	443a      	add	r2, r7
 80067e2:	4413      	add	r3, r2
 80067e4:	4618      	mov	r0, r3
 80067e6:	f00c f9ff 	bl	8012be8 <b_exp>
  b_exp(&t266);
 80067ea:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80067ee:	4618      	mov	r0, r3
 80067f0:	f00c f9fa 	bl	8012be8 <b_exp>
  b_exp(&t267);
 80067f4:	4b2e      	ldr	r3, [pc, #184]	; (80068b0 <G_q+0x3ef8>)
 80067f6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80067fa:	443a      	add	r2, r7
 80067fc:	4413      	add	r3, r2
 80067fe:	4618      	mov	r0, r3
 8006800:	f00c f9f2 	bl	8012be8 <b_exp>
  b_exp(&t268);
 8006804:	f241 1350 	movw	r3, #4432	; 0x1150
 8006808:	443b      	add	r3, r7
 800680a:	4618      	mov	r0, r3
 800680c:	f00c f9ec 	bl	8012be8 <b_exp>
  b_exp(&t269);
 8006810:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8006814:	4618      	mov	r0, r3
 8006816:	f00c f9e7 	bl	8012be8 <b_exp>
  b_exp(&t280);
 800681a:	f241 13b0 	movw	r3, #4528	; 0x11b0
 800681e:	443b      	add	r3, r7
 8006820:	4618      	mov	r0, r3
 8006822:	f00c f9e1 	bl	8012be8 <b_exp>
  b_exp(&t281);
 8006826:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 800682a:	4618      	mov	r0, r3
 800682c:	f00c f9dc 	bl	8012be8 <b_exp>
  b_exp(&t282);
 8006830:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8006834:	4618      	mov	r0, r3
 8006836:	f00c f9d7 	bl	8012be8 <b_exp>
  b_exp(&t283);
 800683a:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800683e:	4618      	mov	r0, r3
 8006840:	f00c f9d2 	bl	8012be8 <b_exp>
  b_exp(&t284);
 8006844:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8006848:	4618      	mov	r0, r3
 800684a:	f00c f9cd 	bl	8012be8 <b_exp>
  b_exp(&t285);
 800684e:	4b19      	ldr	r3, [pc, #100]	; (80068b4 <G_q+0x3efc>)
 8006850:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006854:	443a      	add	r2, r7
 8006856:	4413      	add	r3, r2
 8006858:	4618      	mov	r0, r3
 800685a:	f00c f9c5 	bl	8012be8 <b_exp>
  b_exp(&t286);
 800685e:	f241 13d0 	movw	r3, #4560	; 0x11d0
 8006862:	443b      	add	r3, r7
 8006864:	4618      	mov	r0, r3
 8006866:	f00c f9bf 	bl	8012be8 <b_exp>
  b_exp(&t287);
 800686a:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 800686e:	4618      	mov	r0, r3
 8006870:	f00c f9ba 	bl	8012be8 <b_exp>
  b_exp(&t294);
 8006874:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8006878:	4618      	mov	r0, r3
 800687a:	f00c f9b5 	bl	8012be8 <b_exp>
  b_exp(&t295);
 800687e:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 8006882:	4618      	mov	r0, r3
 8006884:	f00c f9b0 	bl	8012be8 <b_exp>
 8006888:	e016      	b.n	80068b8 <G_q+0x3f00>
 800688a:	bf00      	nop
 800688c:	ffffeed0 	.word	0xffffeed0
 8006890:	ffffeef0 	.word	0xffffeef0
 8006894:	ffffef10 	.word	0xffffef10
 8006898:	ffffef50 	.word	0xffffef50
 800689c:	ffffef30 	.word	0xffffef30
 80068a0:	ffffecf0 	.word	0xffffecf0
 80068a4:	ffffed10 	.word	0xffffed10
 80068a8:	ffffef70 	.word	0xffffef70
 80068ac:	ffffef90 	.word	0xffffef90
 80068b0:	ffffed30 	.word	0xffffed30
 80068b4:	ffffefd0 	.word	0xffffefd0
  b_exp(&t292);
 80068b8:	f241 2310 	movw	r3, #4624	; 0x1210
 80068bc:	443b      	add	r3, r7
 80068be:	4618      	mov	r0, r3
 80068c0:	f00c f992 	bl	8012be8 <b_exp>
  b_exp(&t293);
 80068c4:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 80068c8:	4618      	mov	r0, r3
 80068ca:	f00c f98d 	bl	8012be8 <b_exp>
  b_exp(&t288);
 80068ce:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 80068d2:	4618      	mov	r0, r3
 80068d4:	f00c f988 	bl	8012be8 <b_exp>
  b_exp(&t289);
 80068d8:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 80068dc:	4618      	mov	r0, r3
 80068de:	f00c f983 	bl	8012be8 <b_exp>
  b_exp(&t290);
 80068e2:	f241 13f0 	movw	r3, #4592	; 0x11f0
 80068e6:	443b      	add	r3, r7
 80068e8:	4618      	mov	r0, r3
 80068ea:	f00c f97d 	bl	8012be8 <b_exp>
  b_exp(&t291);
 80068ee:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 80068f2:	4618      	mov	r0, r3
 80068f4:	f00c f978 	bl	8012be8 <b_exp>
  b_exp(&t278);
 80068f8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80068fc:	4618      	mov	r0, r3
 80068fe:	f00c f973 	bl	8012be8 <b_exp>
  b_exp(&t279);
 8006902:	4bd5      	ldr	r3, [pc, #852]	; (8006c58 <G_q+0x42a0>)
 8006904:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006908:	443a      	add	r2, r7
 800690a:	4413      	add	r3, r2
 800690c:	4618      	mov	r0, r3
 800690e:	f00c f96b 	bl	8012be8 <b_exp>
  b_exp(&t270);
 8006912:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 8006916:	4618      	mov	r0, r3
 8006918:	f00c f966 	bl	8012be8 <b_exp>
  b_exp(&t271);
 800691c:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 8006920:	4618      	mov	r0, r3
 8006922:	f00c f961 	bl	8012be8 <b_exp>
  b_exp(&t272);
 8006926:	f241 1370 	movw	r3, #4464	; 0x1170
 800692a:	443b      	add	r3, r7
 800692c:	4618      	mov	r0, r3
 800692e:	f00c f95b 	bl	8012be8 <b_exp>
  b_exp(&t273);
 8006932:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8006936:	4618      	mov	r0, r3
 8006938:	f00c f956 	bl	8012be8 <b_exp>
  b_exp(&t274);
 800693c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8006940:	4618      	mov	r0, r3
 8006942:	f00c f951 	bl	8012be8 <b_exp>
  b_exp(&t275);
 8006946:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 800694a:	4618      	mov	r0, r3
 800694c:	f00c f94c 	bl	8012be8 <b_exp>
  b_exp(&t276);
 8006950:	f241 1390 	movw	r3, #4496	; 0x1190
 8006954:	443b      	add	r3, r7
 8006956:	4618      	mov	r0, r3
 8006958:	f00c f946 	bl	8012be8 <b_exp>
  b_exp(&t277);
 800695c:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8006960:	4618      	mov	r0, r3
 8006962:	f00c f941 	bl	8012be8 <b_exp>
  b_exp(&t296);
 8006966:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 800696a:	4618      	mov	r0, r3
 800696c:	f00c f93c 	bl	8012be8 <b_exp>
  b_exp(&t297);
 8006970:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8006974:	4618      	mov	r0, r3
 8006976:	f00c f937 	bl	8012be8 <b_exp>
  b_exp(&t298);
 800697a:	f241 2330 	movw	r3, #4656	; 0x1230
 800697e:	443b      	add	r3, r7
 8006980:	4618      	mov	r0, r3
 8006982:	f00c f931 	bl	8012be8 <b_exp>
  b_exp(&t299);
 8006986:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800698a:	4618      	mov	r0, r3
 800698c:	f00c f92c 	bl	8012be8 <b_exp>
  b_G_q[0].re = 0.0;
 8006990:	4bb2      	ldr	r3, [pc, #712]	; (8006c5c <G_q+0x42a4>)
 8006992:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006996:	443a      	add	r2, r7
 8006998:	4413      	add	r3, r2
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	f04f 0300 	mov.w	r3, #0
 80069a0:	f04f 0400 	mov.w	r4, #0
 80069a4:	e9c2 3400 	strd	r3, r4, [r2]
  b_G_q[0].im = 0.0;
 80069a8:	4bac      	ldr	r3, [pc, #688]	; (8006c5c <G_q+0x42a4>)
 80069aa:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80069ae:	443a      	add	r2, r7
 80069b0:	4413      	add	r3, r2
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	f04f 0300 	mov.w	r3, #0
 80069b8:	f04f 0400 	mov.w	r4, #0
 80069bc:	e9c2 3402 	strd	r3, r4, [r2, #8]
  if (t33.im == 0.0) {
 80069c0:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 80069c4:	ed93 7b02 	vldr	d7, [r3, #8]
 80069c8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80069cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069d0:	d115      	bne.n	80069fe <G_q+0x4046>
    t33_re = t33.re / 2.0;
 80069d2:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 80069d6:	ed93 6b00 	vldr	d6, [r3]
 80069da:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80069de:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80069e2:	f241 33c8 	movw	r3, #5064	; 0x13c8
 80069e6:	443b      	add	r3, r7
 80069e8:	ed83 7b00 	vstr	d7, [r3]
    t33_im = 0.0;
 80069ec:	f04f 0300 	mov.w	r3, #0
 80069f0:	f04f 0400 	mov.w	r4, #0
 80069f4:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 80069f8:	e9c2 3400 	strd	r3, r4, [r2]
 80069fc:	e037      	b.n	8006a6e <G_q+0x40b6>
  } else if (t33.re == 0.0) {
 80069fe:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8006a02:	ed93 7b00 	vldr	d7, [r3]
 8006a06:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a0e:	d115      	bne.n	8006a3c <G_q+0x4084>
    t33_re = 0.0;
 8006a10:	f04f 0300 	mov.w	r3, #0
 8006a14:	f04f 0400 	mov.w	r4, #0
 8006a18:	f241 32c8 	movw	r2, #5064	; 0x13c8
 8006a1c:	443a      	add	r2, r7
 8006a1e:	e9c2 3400 	strd	r3, r4, [r2]
    t33_im = t33.im / 2.0;
 8006a22:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8006a26:	ed93 6b02 	vldr	d6, [r3, #8]
 8006a2a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006a2e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006a32:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8006a36:	ed83 7b00 	vstr	d7, [r3]
 8006a3a:	e018      	b.n	8006a6e <G_q+0x40b6>
  } else {
    t33_re = t33.re / 2.0;
 8006a3c:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8006a40:	ed93 6b00 	vldr	d6, [r3]
 8006a44:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006a48:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006a4c:	f241 33c8 	movw	r3, #5064	; 0x13c8
 8006a50:	443b      	add	r3, r7
 8006a52:	ed83 7b00 	vstr	d7, [r3]
    t33_im = t33.im / 2.0;
 8006a56:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8006a5a:	ed93 6b02 	vldr	d6, [r3, #8]
 8006a5e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006a62:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006a66:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8006a6a:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t34.im == 0.0) {
 8006a6e:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8006a72:	ed93 7b02 	vldr	d7, [r3, #8]
 8006a76:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a7e:	d116      	bne.n	8006aae <G_q+0x40f6>
    t34_re = t34.re / 2.0;
 8006a80:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8006a84:	ed93 6b00 	vldr	d6, [r3]
 8006a88:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006a8c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006a90:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8006a94:	443b      	add	r3, r7
 8006a96:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8006a9a:	f04f 0300 	mov.w	r3, #0
 8006a9e:	f04f 0400 	mov.w	r4, #0
 8006aa2:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8006aa6:	443a      	add	r2, r7
 8006aa8:	e9c2 3400 	strd	r3, r4, [r2]
 8006aac:	e039      	b.n	8006b22 <G_q+0x416a>
  } else if (t34.re == 0.0) {
 8006aae:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8006ab2:	ed93 7b00 	vldr	d7, [r3]
 8006ab6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006abe:	d116      	bne.n	8006aee <G_q+0x4136>
    t34_re = 0.0;
 8006ac0:	f04f 0300 	mov.w	r3, #0
 8006ac4:	f04f 0400 	mov.w	r4, #0
 8006ac8:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8006acc:	443a      	add	r2, r7
 8006ace:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t34.im / 2.0;
 8006ad2:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8006ad6:	ed93 6b02 	vldr	d6, [r3, #8]
 8006ada:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006ade:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006ae2:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8006ae6:	443b      	add	r3, r7
 8006ae8:	ed83 7b00 	vstr	d7, [r3]
 8006aec:	e019      	b.n	8006b22 <G_q+0x416a>
  } else {
    t34_re = t34.re / 2.0;
 8006aee:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8006af2:	ed93 6b00 	vldr	d6, [r3]
 8006af6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006afa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006afe:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8006b02:	443b      	add	r3, r7
 8006b04:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t34.im / 2.0;
 8006b08:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8006b0c:	ed93 6b02 	vldr	d6, [r3, #8]
 8006b10:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006b14:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006b18:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8006b1c:	443b      	add	r3, r7
 8006b1e:	ed83 7b00 	vstr	d7, [r3]
  }

  t33_re += t34_re;
 8006b22:	f241 33c8 	movw	r3, #5064	; 0x13c8
 8006b26:	443b      	add	r3, r7
 8006b28:	ed93 6b00 	vldr	d6, [r3]
 8006b2c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8006b30:	443b      	add	r3, r7
 8006b32:	ed93 7b00 	vldr	d7, [r3]
 8006b36:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006b3a:	f241 33c8 	movw	r3, #5064	; 0x13c8
 8006b3e:	443b      	add	r3, r7
 8006b40:	ed83 7b00 	vstr	d7, [r3]
  t33_im += t34_im;
 8006b44:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8006b48:	ed93 6b00 	vldr	d6, [r3]
 8006b4c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8006b50:	443b      	add	r3, r7
 8006b52:	ed93 7b00 	vldr	d7, [r3]
 8006b56:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006b5a:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8006b5e:	ed83 7b00 	vstr	d7, [r3]
  t35_re = (t35.re * 0.0 - t35.im * 0.5) - (t36.re * 0.0 - t36.im * 0.5);
 8006b62:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8006b66:	ed93 7b00 	vldr	d7, [r3]
 8006b6a:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8006c50 <G_q+0x4298>
 8006b6e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006b72:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8006b76:	ed93 7b02 	vldr	d7, [r3, #8]
 8006b7a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006b7e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006b82:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006b86:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8006b8a:	ed93 7b00 	vldr	d7, [r3]
 8006b8e:	ed9f 5b30 	vldr	d5, [pc, #192]	; 8006c50 <G_q+0x4298>
 8006b92:	ee27 5b05 	vmul.f64	d5, d7, d5
 8006b96:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8006b9a:	ed93 7b02 	vldr	d7, [r3, #8]
 8006b9e:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8006ba2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006ba6:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006baa:	f241 2398 	movw	r3, #4760	; 0x1298
 8006bae:	443b      	add	r3, r7
 8006bb0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006bb4:	ed83 7b00 	vstr	d7, [r3]
  t35_im = (t35.re * 0.5 + t35.im * 0.0) - (t36.re * 0.5 + t36.im * 0.0);
 8006bb8:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8006bbc:	ed93 7b00 	vldr	d7, [r3]
 8006bc0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8006bc4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006bc8:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8006bcc:	ed93 7b02 	vldr	d7, [r3, #8]
 8006bd0:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 8006c50 <G_q+0x4298>
 8006bd4:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006bd8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006bdc:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8006be0:	ed93 7b00 	vldr	d7, [r3]
 8006be4:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006be8:	ee27 5b05 	vmul.f64	d5, d7, d5
 8006bec:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8006bf0:	ed93 7b02 	vldr	d7, [r3, #8]
 8006bf4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8006c50 <G_q+0x4298>
 8006bf8:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006bfc:	ee35 7b07 	vadd.f64	d7, d5, d7
 8006c00:	f241 2390 	movw	r3, #4752	; 0x1290
 8006c04:	443b      	add	r3, r7
 8006c06:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006c0a:	ed83 7b00 	vstr	d7, [r3]
  if (t37.im == 0.0) {
 8006c0e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006c12:	ed93 7b02 	vldr	d7, [r3, #8]
 8006c16:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c1e:	d11f      	bne.n	8006c60 <G_q+0x42a8>
    t37_re = t37.re / 2.0;
 8006c20:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006c24:	ed93 6b00 	vldr	d6, [r3]
 8006c28:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006c2c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006c30:	f241 33a8 	movw	r3, #5032	; 0x13a8
 8006c34:	443b      	add	r3, r7
 8006c36:	ed83 7b00 	vstr	d7, [r3]
    t37_im = 0.0;
 8006c3a:	f04f 0300 	mov.w	r3, #0
 8006c3e:	f04f 0400 	mov.w	r4, #0
 8006c42:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 8006c46:	e9c2 3400 	strd	r3, r4, [r2]
 8006c4a:	e041      	b.n	8006cd0 <G_q+0x4318>
 8006c4c:	f3af 8000 	nop.w
	...
 8006c58:	ffffefb0 	.word	0xffffefb0
 8006c5c:	ffffec34 	.word	0xffffec34
  } else if (t37.re == 0.0) {
 8006c60:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006c64:	ed93 7b00 	vldr	d7, [r3]
 8006c68:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c70:	d115      	bne.n	8006c9e <G_q+0x42e6>
    t37_re = 0.0;
 8006c72:	f04f 0300 	mov.w	r3, #0
 8006c76:	f04f 0400 	mov.w	r4, #0
 8006c7a:	f241 32a8 	movw	r2, #5032	; 0x13a8
 8006c7e:	443a      	add	r2, r7
 8006c80:	e9c2 3400 	strd	r3, r4, [r2]
    t37_im = t37.im / 2.0;
 8006c84:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006c88:	ed93 6b02 	vldr	d6, [r3, #8]
 8006c8c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006c90:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006c94:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8006c98:	ed83 7b00 	vstr	d7, [r3]
 8006c9c:	e018      	b.n	8006cd0 <G_q+0x4318>
  } else {
    t37_re = t37.re / 2.0;
 8006c9e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006ca2:	ed93 6b00 	vldr	d6, [r3]
 8006ca6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006caa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006cae:	f241 33a8 	movw	r3, #5032	; 0x13a8
 8006cb2:	443b      	add	r3, r7
 8006cb4:	ed83 7b00 	vstr	d7, [r3]
    t37_im = t37.im / 2.0;
 8006cb8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006cbc:	ed93 6b02 	vldr	d6, [r3, #8]
 8006cc0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006cc4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006cc8:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8006ccc:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t38.im == 0.0) {
 8006cd0:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8006cd4:	ed93 7b02 	vldr	d7, [r3, #8]
 8006cd8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ce0:	d116      	bne.n	8006d10 <G_q+0x4358>
    t34_re = t38.re / 2.0;
 8006ce2:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8006ce6:	ed93 6b00 	vldr	d6, [r3]
 8006cea:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006cee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006cf2:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8006cf6:	443b      	add	r3, r7
 8006cf8:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8006cfc:	f04f 0300 	mov.w	r3, #0
 8006d00:	f04f 0400 	mov.w	r4, #0
 8006d04:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8006d08:	443a      	add	r2, r7
 8006d0a:	e9c2 3400 	strd	r3, r4, [r2]
 8006d0e:	e039      	b.n	8006d84 <G_q+0x43cc>
  } else if (t38.re == 0.0) {
 8006d10:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8006d14:	ed93 7b00 	vldr	d7, [r3]
 8006d18:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d20:	d116      	bne.n	8006d50 <G_q+0x4398>
    t34_re = 0.0;
 8006d22:	f04f 0300 	mov.w	r3, #0
 8006d26:	f04f 0400 	mov.w	r4, #0
 8006d2a:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8006d2e:	443a      	add	r2, r7
 8006d30:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t38.im / 2.0;
 8006d34:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8006d38:	ed93 6b02 	vldr	d6, [r3, #8]
 8006d3c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006d40:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006d44:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8006d48:	443b      	add	r3, r7
 8006d4a:	ed83 7b00 	vstr	d7, [r3]
 8006d4e:	e019      	b.n	8006d84 <G_q+0x43cc>
  } else {
    t34_re = t38.re / 2.0;
 8006d50:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8006d54:	ed93 6b00 	vldr	d6, [r3]
 8006d58:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006d5c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006d60:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8006d64:	443b      	add	r3, r7
 8006d66:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t38.im / 2.0;
 8006d6a:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8006d6e:	ed93 6b02 	vldr	d6, [r3, #8]
 8006d72:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006d76:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006d7a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8006d7e:	443b      	add	r3, r7
 8006d80:	ed83 7b00 	vstr	d7, [r3]
  }

  t37_re += t34_re;
 8006d84:	f241 33a8 	movw	r3, #5032	; 0x13a8
 8006d88:	443b      	add	r3, r7
 8006d8a:	ed93 6b00 	vldr	d6, [r3]
 8006d8e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8006d92:	443b      	add	r3, r7
 8006d94:	ed93 7b00 	vldr	d7, [r3]
 8006d98:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006d9c:	f241 33a8 	movw	r3, #5032	; 0x13a8
 8006da0:	443b      	add	r3, r7
 8006da2:	ed83 7b00 	vstr	d7, [r3]
  t37_im += t34_im;
 8006da6:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8006daa:	ed93 6b00 	vldr	d6, [r3]
 8006dae:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8006db2:	443b      	add	r3, r7
 8006db4:	ed93 7b00 	vldr	d7, [r3]
 8006db8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006dbc:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8006dc0:	ed83 7b00 	vstr	d7, [r3]
  t39_re = (t39.re * 0.0 - t39.im * 0.5) - (t40.re * 0.0 - t40.im * 0.5);
 8006dc4:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8006dc8:	ed93 7b00 	vldr	d7, [r3]
 8006dcc:	ed9f 6bce 	vldr	d6, [pc, #824]	; 8007108 <G_q+0x4750>
 8006dd0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006dd4:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8006dd8:	ed93 7b02 	vldr	d7, [r3, #8]
 8006ddc:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006de0:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006de4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006de8:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 8006dec:	ed93 7b00 	vldr	d7, [r3]
 8006df0:	ed9f 5bc5 	vldr	d5, [pc, #788]	; 8007108 <G_q+0x4750>
 8006df4:	ee27 5b05 	vmul.f64	d5, d7, d5
 8006df8:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 8006dfc:	ed93 7b02 	vldr	d7, [r3, #8]
 8006e00:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8006e04:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006e08:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006e0c:	f241 2388 	movw	r3, #4744	; 0x1288
 8006e10:	443b      	add	r3, r7
 8006e12:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006e16:	ed83 7b00 	vstr	d7, [r3]
  t39_im = (t39.re * 0.5 + t39.im * 0.0) - (t40.re * 0.5 + t40.im * 0.0);
 8006e1a:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8006e1e:	ed93 7b00 	vldr	d7, [r3]
 8006e22:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8006e26:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006e2a:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8006e2e:	ed93 7b02 	vldr	d7, [r3, #8]
 8006e32:	ed9f 5bb5 	vldr	d5, [pc, #724]	; 8007108 <G_q+0x4750>
 8006e36:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006e3a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006e3e:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 8006e42:	ed93 7b00 	vldr	d7, [r3]
 8006e46:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006e4a:	ee27 5b05 	vmul.f64	d5, d7, d5
 8006e4e:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 8006e52:	ed93 7b02 	vldr	d7, [r3, #8]
 8006e56:	ed9f 4bac 	vldr	d4, [pc, #688]	; 8007108 <G_q+0x4750>
 8006e5a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006e5e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8006e62:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8006e66:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006e6a:	ed83 7b00 	vstr	d7, [r3]
  if (t10.im == 0.0) {
 8006e6e:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8006e72:	ed93 7b02 	vldr	d7, [r3, #8]
 8006e76:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e7e:	d116      	bne.n	8006eae <G_q+0x44f6>
    t10_re = t10.re / 2.0;
 8006e80:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8006e84:	ed93 6b00 	vldr	d6, [r3]
 8006e88:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006e8c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006e90:	f241 3398 	movw	r3, #5016	; 0x1398
 8006e94:	443b      	add	r3, r7
 8006e96:	ed83 7b00 	vstr	d7, [r3]
    t10_im = 0.0;
 8006e9a:	f04f 0300 	mov.w	r3, #0
 8006e9e:	f04f 0400 	mov.w	r4, #0
 8006ea2:	f241 3290 	movw	r2, #5008	; 0x1390
 8006ea6:	443a      	add	r2, r7
 8006ea8:	e9c2 3400 	strd	r3, r4, [r2]
 8006eac:	e039      	b.n	8006f22 <G_q+0x456a>
  } else if (t10.re == 0.0) {
 8006eae:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8006eb2:	ed93 7b00 	vldr	d7, [r3]
 8006eb6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ebe:	d116      	bne.n	8006eee <G_q+0x4536>
    t10_re = 0.0;
 8006ec0:	f04f 0300 	mov.w	r3, #0
 8006ec4:	f04f 0400 	mov.w	r4, #0
 8006ec8:	f241 3298 	movw	r2, #5016	; 0x1398
 8006ecc:	443a      	add	r2, r7
 8006ece:	e9c2 3400 	strd	r3, r4, [r2]
    t10_im = t10.im / 2.0;
 8006ed2:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8006ed6:	ed93 6b02 	vldr	d6, [r3, #8]
 8006eda:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006ede:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006ee2:	f241 3390 	movw	r3, #5008	; 0x1390
 8006ee6:	443b      	add	r3, r7
 8006ee8:	ed83 7b00 	vstr	d7, [r3]
 8006eec:	e019      	b.n	8006f22 <G_q+0x456a>
  } else {
    t10_re = t10.re / 2.0;
 8006eee:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8006ef2:	ed93 6b00 	vldr	d6, [r3]
 8006ef6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006efa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006efe:	f241 3398 	movw	r3, #5016	; 0x1398
 8006f02:	443b      	add	r3, r7
 8006f04:	ed83 7b00 	vstr	d7, [r3]
    t10_im = t10.im / 2.0;
 8006f08:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8006f0c:	ed93 6b02 	vldr	d6, [r3, #8]
 8006f10:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006f14:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006f18:	f241 3390 	movw	r3, #5008	; 0x1390
 8006f1c:	443b      	add	r3, r7
 8006f1e:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t11.im == 0.0) {
 8006f22:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8006f26:	ed93 7b02 	vldr	d7, [r3, #8]
 8006f2a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f32:	d116      	bne.n	8006f62 <G_q+0x45aa>
    t34_re = t11.re / 2.0;
 8006f34:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8006f38:	ed93 6b00 	vldr	d6, [r3]
 8006f3c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006f40:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006f44:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8006f48:	443b      	add	r3, r7
 8006f4a:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8006f4e:	f04f 0300 	mov.w	r3, #0
 8006f52:	f04f 0400 	mov.w	r4, #0
 8006f56:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8006f5a:	443a      	add	r2, r7
 8006f5c:	e9c2 3400 	strd	r3, r4, [r2]
 8006f60:	e039      	b.n	8006fd6 <G_q+0x461e>
  } else if (t11.re == 0.0) {
 8006f62:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8006f66:	ed93 7b00 	vldr	d7, [r3]
 8006f6a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f72:	d116      	bne.n	8006fa2 <G_q+0x45ea>
    t34_re = 0.0;
 8006f74:	f04f 0300 	mov.w	r3, #0
 8006f78:	f04f 0400 	mov.w	r4, #0
 8006f7c:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8006f80:	443a      	add	r2, r7
 8006f82:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t11.im / 2.0;
 8006f86:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8006f8a:	ed93 6b02 	vldr	d6, [r3, #8]
 8006f8e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006f92:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006f96:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8006f9a:	443b      	add	r3, r7
 8006f9c:	ed83 7b00 	vstr	d7, [r3]
 8006fa0:	e019      	b.n	8006fd6 <G_q+0x461e>
  } else {
    t34_re = t11.re / 2.0;
 8006fa2:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8006fa6:	ed93 6b00 	vldr	d6, [r3]
 8006faa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006fae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006fb2:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8006fb6:	443b      	add	r3, r7
 8006fb8:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t11.im / 2.0;
 8006fbc:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8006fc0:	ed93 6b02 	vldr	d6, [r3, #8]
 8006fc4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006fc8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006fcc:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8006fd0:	443b      	add	r3, r7
 8006fd2:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t12.im == 0.0) {
 8006fd6:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8006fda:	ed93 7b02 	vldr	d7, [r3, #8]
 8006fde:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fe6:	d115      	bne.n	8007014 <G_q+0x465c>
    t12_re = t12.re / 2.0;
 8006fe8:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8006fec:	ed93 6b00 	vldr	d6, [r3]
 8006ff0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006ff4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006ff8:	f241 3388 	movw	r3, #5000	; 0x1388
 8006ffc:	443b      	add	r3, r7
 8006ffe:	ed83 7b00 	vstr	d7, [r3]
    t12_im = 0.0;
 8007002:	f04f 0300 	mov.w	r3, #0
 8007006:	f04f 0400 	mov.w	r4, #0
 800700a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800700e:	e9c2 3400 	strd	r3, r4, [r2]
 8007012:	e037      	b.n	8007084 <G_q+0x46cc>
  } else if (t12.re == 0.0) {
 8007014:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8007018:	ed93 7b00 	vldr	d7, [r3]
 800701c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007024:	d115      	bne.n	8007052 <G_q+0x469a>
    t12_re = 0.0;
 8007026:	f04f 0300 	mov.w	r3, #0
 800702a:	f04f 0400 	mov.w	r4, #0
 800702e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007032:	443a      	add	r2, r7
 8007034:	e9c2 3400 	strd	r3, r4, [r2]
    t12_im = t12.im / 2.0;
 8007038:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 800703c:	ed93 6b02 	vldr	d6, [r3, #8]
 8007040:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007044:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007048:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800704c:	ed83 7b00 	vstr	d7, [r3]
 8007050:	e018      	b.n	8007084 <G_q+0x46cc>
  } else {
    t12_re = t12.re / 2.0;
 8007052:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8007056:	ed93 6b00 	vldr	d6, [r3]
 800705a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800705e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007062:	f241 3388 	movw	r3, #5000	; 0x1388
 8007066:	443b      	add	r3, r7
 8007068:	ed83 7b00 	vstr	d7, [r3]
    t12_im = t12.im / 2.0;
 800706c:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8007070:	ed93 6b02 	vldr	d6, [r3, #8]
 8007074:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007078:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800707c:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8007080:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t13.im == 0.0) {
 8007084:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8007088:	ed93 7b02 	vldr	d7, [r3, #8]
 800708c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007094:	d116      	bne.n	80070c4 <G_q+0x470c>
    t13_re = t13.re / 2.0;
 8007096:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 800709a:	ed93 6b00 	vldr	d6, [r3]
 800709e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80070a2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80070a6:	f241 3378 	movw	r3, #4984	; 0x1378
 80070aa:	443b      	add	r3, r7
 80070ac:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 80070b0:	f04f 0300 	mov.w	r3, #0
 80070b4:	f04f 0400 	mov.w	r4, #0
 80070b8:	f241 3270 	movw	r2, #4976	; 0x1370
 80070bc:	443a      	add	r2, r7
 80070be:	e9c2 3400 	strd	r3, r4, [r2]
 80070c2:	e03f      	b.n	8007144 <G_q+0x478c>
  } else if (t13.re == 0.0) {
 80070c4:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80070c8:	ed93 7b00 	vldr	d7, [r3]
 80070cc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80070d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070d4:	d11c      	bne.n	8007110 <G_q+0x4758>
    t13_re = 0.0;
 80070d6:	f04f 0300 	mov.w	r3, #0
 80070da:	f04f 0400 	mov.w	r4, #0
 80070de:	f241 3278 	movw	r2, #4984	; 0x1378
 80070e2:	443a      	add	r2, r7
 80070e4:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t13.im / 2.0;
 80070e8:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80070ec:	ed93 6b02 	vldr	d6, [r3, #8]
 80070f0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80070f4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80070f8:	f241 3370 	movw	r3, #4976	; 0x1370
 80070fc:	443b      	add	r3, r7
 80070fe:	ed83 7b00 	vstr	d7, [r3]
 8007102:	e01f      	b.n	8007144 <G_q+0x478c>
 8007104:	f3af 8000 	nop.w
	...
  } else {
    t13_re = t13.re / 2.0;
 8007110:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8007114:	ed93 6b00 	vldr	d6, [r3]
 8007118:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800711c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007120:	f241 3378 	movw	r3, #4984	; 0x1378
 8007124:	443b      	add	r3, r7
 8007126:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t13.im / 2.0;
 800712a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 800712e:	ed93 6b02 	vldr	d6, [r3, #8]
 8007132:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007136:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800713a:	f241 3370 	movw	r3, #4976	; 0x1370
 800713e:	443b      	add	r3, r7
 8007140:	ed83 7b00 	vstr	d7, [r3]
  }

  t10_re += t34_re;
 8007144:	f241 3398 	movw	r3, #5016	; 0x1398
 8007148:	443b      	add	r3, r7
 800714a:	ed93 6b00 	vldr	d6, [r3]
 800714e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8007152:	443b      	add	r3, r7
 8007154:	ed93 7b00 	vldr	d7, [r3]
 8007158:	ee36 7b07 	vadd.f64	d7, d6, d7
 800715c:	f241 3398 	movw	r3, #5016	; 0x1398
 8007160:	443b      	add	r3, r7
 8007162:	ed83 7b00 	vstr	d7, [r3]
  t10_im += t34_im;
 8007166:	f241 3390 	movw	r3, #5008	; 0x1390
 800716a:	443b      	add	r3, r7
 800716c:	ed93 6b00 	vldr	d6, [r3]
 8007170:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8007174:	443b      	add	r3, r7
 8007176:	ed93 7b00 	vldr	d7, [r3]
 800717a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800717e:	f241 3390 	movw	r3, #5008	; 0x1390
 8007182:	443b      	add	r3, r7
 8007184:	ed83 7b00 	vstr	d7, [r3]
  t12_re += t13_re;
 8007188:	f241 3388 	movw	r3, #5000	; 0x1388
 800718c:	443b      	add	r3, r7
 800718e:	ed93 6b00 	vldr	d6, [r3]
 8007192:	f241 3378 	movw	r3, #4984	; 0x1378
 8007196:	443b      	add	r3, r7
 8007198:	ed93 7b00 	vldr	d7, [r3]
 800719c:	ee36 7b07 	vadd.f64	d7, d6, d7
 80071a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80071a4:	443b      	add	r3, r7
 80071a6:	ed83 7b00 	vstr	d7, [r3]
  t12_im += t13_im;
 80071aa:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80071ae:	ed93 6b00 	vldr	d6, [r3]
 80071b2:	f241 3370 	movw	r3, #4976	; 0x1370
 80071b6:	443b      	add	r3, r7
 80071b8:	ed93 7b00 	vldr	d7, [r3]
 80071bc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80071c0:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80071c4:	ed83 7b00 	vstr	d7, [r3]
  t34_re = (t14.re * 0.0 - t14.im * 0.5) - (t15.re * 0.0 - t15.im * 0.5);
 80071c8:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80071cc:	ed93 7b00 	vldr	d7, [r3]
 80071d0:	ed1f 6b33 	vldr	d6, [pc, #-204]	; 8007108 <G_q+0x4750>
 80071d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80071d8:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80071dc:	ed93 7b02 	vldr	d7, [r3, #8]
 80071e0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80071e4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80071e8:	ee36 6b47 	vsub.f64	d6, d6, d7
 80071ec:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 80071f0:	ed93 7b00 	vldr	d7, [r3]
 80071f4:	ed1f 5b3c 	vldr	d5, [pc, #-240]	; 8007108 <G_q+0x4750>
 80071f8:	ee27 5b05 	vmul.f64	d5, d7, d5
 80071fc:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8007200:	ed93 7b02 	vldr	d7, [r3, #8]
 8007204:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8007208:	ee27 7b04 	vmul.f64	d7, d7, d4
 800720c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007210:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007214:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8007218:	443b      	add	r3, r7
 800721a:	ed83 7b00 	vstr	d7, [r3]
  t34_im = (t14.re * 0.5 + t14.im * 0.0) - (t15.re * 0.5 + t15.im * 0.0);
 800721e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8007222:	ed93 7b00 	vldr	d7, [r3]
 8007226:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800722a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800722e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8007232:	ed93 7b02 	vldr	d7, [r3, #8]
 8007236:	ed1f 5b4c 	vldr	d5, [pc, #-304]	; 8007108 <G_q+0x4750>
 800723a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800723e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007242:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8007246:	ed93 7b00 	vldr	d7, [r3]
 800724a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800724e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8007252:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8007256:	ed93 7b02 	vldr	d7, [r3, #8]
 800725a:	ed1f 4b55 	vldr	d4, [pc, #-340]	; 8007108 <G_q+0x4750>
 800725e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007262:	ee35 7b07 	vadd.f64	d7, d5, d7
 8007266:	ee36 7b47 	vsub.f64	d7, d6, d7
 800726a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800726e:	443b      	add	r3, r7
 8007270:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t16.re * 0.0 - t16.im * 0.5) - (t17.re * 0.0 - t17.im * 0.5);
 8007274:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8007278:	ed93 7b00 	vldr	d7, [r3]
 800727c:	ed1f 6b5e 	vldr	d6, [pc, #-376]	; 8007108 <G_q+0x4750>
 8007280:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007284:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8007288:	ed93 7b02 	vldr	d7, [r3, #8]
 800728c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007290:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007294:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007298:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800729c:	ed93 7b00 	vldr	d7, [r3]
 80072a0:	ed1f 5b67 	vldr	d5, [pc, #-412]	; 8007108 <G_q+0x4750>
 80072a4:	ee27 5b05 	vmul.f64	d5, d7, d5
 80072a8:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80072ac:	ed93 7b02 	vldr	d7, [r3, #8]
 80072b0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80072b4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80072b8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80072bc:	ee36 7b47 	vsub.f64	d7, d6, d7
 80072c0:	f241 3368 	movw	r3, #4968	; 0x1368
 80072c4:	443b      	add	r3, r7
 80072c6:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t16.re * 0.5 + t16.im * 0.0) - (t17.re * 0.5 + t17.im * 0.0);
 80072ca:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80072ce:	ed93 7b00 	vldr	d7, [r3]
 80072d2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80072d6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80072da:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80072de:	ed93 7b02 	vldr	d7, [r3, #8]
 80072e2:	ed1f 5b77 	vldr	d5, [pc, #-476]	; 8007108 <G_q+0x4750>
 80072e6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80072ea:	ee36 6b07 	vadd.f64	d6, d6, d7
 80072ee:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80072f2:	ed93 7b00 	vldr	d7, [r3]
 80072f6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80072fa:	ee27 5b05 	vmul.f64	d5, d7, d5
 80072fe:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8007302:	ed93 7b02 	vldr	d7, [r3, #8]
 8007306:	ed1f 4b80 	vldr	d4, [pc, #-512]	; 8007108 <G_q+0x4750>
 800730a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800730e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8007312:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007316:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800731a:	ed83 7b00 	vstr	d7, [r3]
  if (t19.im == 0.0) {
 800731e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007322:	ed93 7b02 	vldr	d7, [r3, #8]
 8007326:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800732a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800732e:	d116      	bne.n	800735e <G_q+0x49a6>
    t19_re = t19.re / 2.0;
 8007330:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007334:	ed93 6b00 	vldr	d6, [r3]
 8007338:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800733c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007340:	f241 3358 	movw	r3, #4952	; 0x1358
 8007344:	443b      	add	r3, r7
 8007346:	ed83 7b00 	vstr	d7, [r3]
    t19_im = 0.0;
 800734a:	f04f 0300 	mov.w	r3, #0
 800734e:	f04f 0400 	mov.w	r4, #0
 8007352:	f241 3250 	movw	r2, #4944	; 0x1350
 8007356:	443a      	add	r2, r7
 8007358:	e9c2 3400 	strd	r3, r4, [r2]
 800735c:	e039      	b.n	80073d2 <G_q+0x4a1a>
  } else if (t19.re == 0.0) {
 800735e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007362:	ed93 7b00 	vldr	d7, [r3]
 8007366:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800736a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800736e:	d116      	bne.n	800739e <G_q+0x49e6>
    t19_re = 0.0;
 8007370:	f04f 0300 	mov.w	r3, #0
 8007374:	f04f 0400 	mov.w	r4, #0
 8007378:	f241 3258 	movw	r2, #4952	; 0x1358
 800737c:	443a      	add	r2, r7
 800737e:	e9c2 3400 	strd	r3, r4, [r2]
    t19_im = t19.im / 2.0;
 8007382:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007386:	ed93 6b02 	vldr	d6, [r3, #8]
 800738a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800738e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007392:	f241 3350 	movw	r3, #4944	; 0x1350
 8007396:	443b      	add	r3, r7
 8007398:	ed83 7b00 	vstr	d7, [r3]
 800739c:	e019      	b.n	80073d2 <G_q+0x4a1a>
  } else {
    t19_re = t19.re / 2.0;
 800739e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80073a2:	ed93 6b00 	vldr	d6, [r3]
 80073a6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80073aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80073ae:	f241 3358 	movw	r3, #4952	; 0x1358
 80073b2:	443b      	add	r3, r7
 80073b4:	ed83 7b00 	vstr	d7, [r3]
    t19_im = t19.im / 2.0;
 80073b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80073bc:	ed93 6b02 	vldr	d6, [r3, #8]
 80073c0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80073c4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80073c8:	f241 3350 	movw	r3, #4944	; 0x1350
 80073cc:	443b      	add	r3, r7
 80073ce:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t20.im == 0.0) {
 80073d2:	4bcb      	ldr	r3, [pc, #812]	; (8007700 <G_q+0x4d48>)
 80073d4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80073d8:	443a      	add	r2, r7
 80073da:	4413      	add	r3, r2
 80073dc:	ed93 7b02 	vldr	d7, [r3, #8]
 80073e0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80073e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073e8:	d118      	bne.n	800741c <G_q+0x4a64>
    t20_re = t20.re / 2.0;
 80073ea:	4bc5      	ldr	r3, [pc, #788]	; (8007700 <G_q+0x4d48>)
 80073ec:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80073f0:	443a      	add	r2, r7
 80073f2:	4413      	add	r3, r2
 80073f4:	ed93 6b00 	vldr	d6, [r3]
 80073f8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80073fc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007400:	f241 3348 	movw	r3, #4936	; 0x1348
 8007404:	443b      	add	r3, r7
 8007406:	ed83 7b00 	vstr	d7, [r3]
    t20_im = 0.0;
 800740a:	f04f 0300 	mov.w	r3, #0
 800740e:	f04f 0400 	mov.w	r4, #0
 8007412:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8007416:	e9c2 3400 	strd	r3, r4, [r2]
 800741a:	e043      	b.n	80074a4 <G_q+0x4aec>
  } else if (t20.re == 0.0) {
 800741c:	4bb8      	ldr	r3, [pc, #736]	; (8007700 <G_q+0x4d48>)
 800741e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007422:	443a      	add	r2, r7
 8007424:	4413      	add	r3, r2
 8007426:	ed93 7b00 	vldr	d7, [r3]
 800742a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800742e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007432:	d118      	bne.n	8007466 <G_q+0x4aae>
    t20_re = 0.0;
 8007434:	f04f 0300 	mov.w	r3, #0
 8007438:	f04f 0400 	mov.w	r4, #0
 800743c:	f241 3248 	movw	r2, #4936	; 0x1348
 8007440:	443a      	add	r2, r7
 8007442:	e9c2 3400 	strd	r3, r4, [r2]
    t20_im = t20.im / 2.0;
 8007446:	4bae      	ldr	r3, [pc, #696]	; (8007700 <G_q+0x4d48>)
 8007448:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800744c:	443a      	add	r2, r7
 800744e:	4413      	add	r3, r2
 8007450:	ed93 6b02 	vldr	d6, [r3, #8]
 8007454:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007458:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800745c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8007460:	ed83 7b00 	vstr	d7, [r3]
 8007464:	e01e      	b.n	80074a4 <G_q+0x4aec>
  } else {
    t20_re = t20.re / 2.0;
 8007466:	4ba6      	ldr	r3, [pc, #664]	; (8007700 <G_q+0x4d48>)
 8007468:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800746c:	443a      	add	r2, r7
 800746e:	4413      	add	r3, r2
 8007470:	ed93 6b00 	vldr	d6, [r3]
 8007474:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007478:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800747c:	f241 3348 	movw	r3, #4936	; 0x1348
 8007480:	443b      	add	r3, r7
 8007482:	ed83 7b00 	vstr	d7, [r3]
    t20_im = t20.im / 2.0;
 8007486:	4b9e      	ldr	r3, [pc, #632]	; (8007700 <G_q+0x4d48>)
 8007488:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800748c:	443a      	add	r2, r7
 800748e:	4413      	add	r3, r2
 8007490:	ed93 6b02 	vldr	d6, [r3, #8]
 8007494:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007498:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800749c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80074a0:	ed83 7b00 	vstr	d7, [r3]
  }

  b_t10_re = (t10_re * t12_re - t10_im * t12_im) + (t34_re * t16_re - t34_im *
 80074a4:	f241 3398 	movw	r3, #5016	; 0x1398
 80074a8:	443b      	add	r3, r7
 80074aa:	ed93 6b00 	vldr	d6, [r3]
 80074ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80074b2:	443b      	add	r3, r7
 80074b4:	ed93 7b00 	vldr	d7, [r3]
 80074b8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80074bc:	f241 3390 	movw	r3, #5008	; 0x1390
 80074c0:	443b      	add	r3, r7
 80074c2:	ed93 5b00 	vldr	d5, [r3]
 80074c6:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80074ca:	ed93 7b00 	vldr	d7, [r3]
 80074ce:	ee25 7b07 	vmul.f64	d7, d5, d7
 80074d2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80074d6:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80074da:	443b      	add	r3, r7
 80074dc:	ed93 5b00 	vldr	d5, [r3]
 80074e0:	f241 3368 	movw	r3, #4968	; 0x1368
 80074e4:	443b      	add	r3, r7
 80074e6:	ed93 7b00 	vldr	d7, [r3]
 80074ea:	ee25 5b07 	vmul.f64	d5, d5, d7
 80074ee:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80074f2:	443b      	add	r3, r7
 80074f4:	ed93 4b00 	vldr	d4, [r3]
 80074f8:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80074fc:	ed93 7b00 	vldr	d7, [r3]
 8007500:	ee24 7b07 	vmul.f64	d7, d4, d7
 8007504:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007508:	ee36 7b07 	vadd.f64	d7, d6, d7
 800750c:	f241 3338 	movw	r3, #4920	; 0x1338
 8007510:	443b      	add	r3, r7
 8007512:	ed83 7b00 	vstr	d7, [r3]
    t16_im);
  t10_im = (t10_re * t12_im + t10_im * t12_re) + (t34_re * t16_im + t34_im *
 8007516:	f241 3398 	movw	r3, #5016	; 0x1398
 800751a:	443b      	add	r3, r7
 800751c:	ed93 6b00 	vldr	d6, [r3]
 8007520:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8007524:	ed93 7b00 	vldr	d7, [r3]
 8007528:	ee26 6b07 	vmul.f64	d6, d6, d7
 800752c:	f241 3390 	movw	r3, #5008	; 0x1390
 8007530:	443b      	add	r3, r7
 8007532:	ed93 5b00 	vldr	d5, [r3]
 8007536:	f241 3388 	movw	r3, #5000	; 0x1388
 800753a:	443b      	add	r3, r7
 800753c:	ed93 7b00 	vldr	d7, [r3]
 8007540:	ee25 7b07 	vmul.f64	d7, d5, d7
 8007544:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007548:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800754c:	443b      	add	r3, r7
 800754e:	ed93 5b00 	vldr	d5, [r3]
 8007552:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8007556:	ed93 7b00 	vldr	d7, [r3]
 800755a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800755e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8007562:	443b      	add	r3, r7
 8007564:	ed93 4b00 	vldr	d4, [r3]
 8007568:	f241 3368 	movw	r3, #4968	; 0x1368
 800756c:	443b      	add	r3, r7
 800756e:	ed93 7b00 	vldr	d7, [r3]
 8007572:	ee24 7b07 	vmul.f64	d7, d4, d7
 8007576:	ee35 7b07 	vadd.f64	d7, d5, d7
 800757a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800757e:	f241 3390 	movw	r3, #5008	; 0x1390
 8007582:	443b      	add	r3, r7
 8007584:	ed83 7b00 	vstr	d7, [r3]
    t16_re);
  t19_re += t20_re;
 8007588:	f241 3358 	movw	r3, #4952	; 0x1358
 800758c:	443b      	add	r3, r7
 800758e:	ed93 6b00 	vldr	d6, [r3]
 8007592:	f241 3348 	movw	r3, #4936	; 0x1348
 8007596:	443b      	add	r3, r7
 8007598:	ed93 7b00 	vldr	d7, [r3]
 800759c:	ee36 7b07 	vadd.f64	d7, d6, d7
 80075a0:	f241 3358 	movw	r3, #4952	; 0x1358
 80075a4:	443b      	add	r3, r7
 80075a6:	ed83 7b00 	vstr	d7, [r3]
  t19_im += t20_im;
 80075aa:	f241 3350 	movw	r3, #4944	; 0x1350
 80075ae:	443b      	add	r3, r7
 80075b0:	ed93 6b00 	vldr	d6, [r3]
 80075b4:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80075b8:	ed93 7b00 	vldr	d7, [r3]
 80075bc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80075c0:	f241 3350 	movw	r3, #4944	; 0x1350
 80075c4:	443b      	add	r3, r7
 80075c6:	ed83 7b00 	vstr	d7, [r3]
  if (t25.im == 0.0) {
 80075ca:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 80075ce:	ed93 7b02 	vldr	d7, [r3, #8]
 80075d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80075d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075da:	d116      	bne.n	800760a <G_q+0x4c52>
    t13_re = t25.re / 2.0;
 80075dc:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 80075e0:	ed93 6b00 	vldr	d6, [r3]
 80075e4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80075e8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80075ec:	f241 3378 	movw	r3, #4984	; 0x1378
 80075f0:	443b      	add	r3, r7
 80075f2:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 80075f6:	f04f 0300 	mov.w	r3, #0
 80075fa:	f04f 0400 	mov.w	r4, #0
 80075fe:	f241 3270 	movw	r2, #4976	; 0x1370
 8007602:	443a      	add	r2, r7
 8007604:	e9c2 3400 	strd	r3, r4, [r2]
 8007608:	e039      	b.n	800767e <G_q+0x4cc6>
  } else if (t25.re == 0.0) {
 800760a:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 800760e:	ed93 7b00 	vldr	d7, [r3]
 8007612:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800761a:	d116      	bne.n	800764a <G_q+0x4c92>
    t13_re = 0.0;
 800761c:	f04f 0300 	mov.w	r3, #0
 8007620:	f04f 0400 	mov.w	r4, #0
 8007624:	f241 3278 	movw	r2, #4984	; 0x1378
 8007628:	443a      	add	r2, r7
 800762a:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t25.im / 2.0;
 800762e:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8007632:	ed93 6b02 	vldr	d6, [r3, #8]
 8007636:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800763a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800763e:	f241 3370 	movw	r3, #4976	; 0x1370
 8007642:	443b      	add	r3, r7
 8007644:	ed83 7b00 	vstr	d7, [r3]
 8007648:	e019      	b.n	800767e <G_q+0x4cc6>
  } else {
    t13_re = t25.re / 2.0;
 800764a:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 800764e:	ed93 6b00 	vldr	d6, [r3]
 8007652:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007656:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800765a:	f241 3378 	movw	r3, #4984	; 0x1378
 800765e:	443b      	add	r3, r7
 8007660:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t25.im / 2.0;
 8007664:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8007668:	ed93 6b02 	vldr	d6, [r3, #8]
 800766c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007670:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007674:	f241 3370 	movw	r3, #4976	; 0x1370
 8007678:	443b      	add	r3, r7
 800767a:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t26.im == 0.0) {
 800767e:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8007682:	ed93 7b02 	vldr	d7, [r3, #8]
 8007686:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800768a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800768e:	d116      	bne.n	80076be <G_q+0x4d06>
    t34_re = t26.re / 2.0;
 8007690:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8007694:	ed93 6b00 	vldr	d6, [r3]
 8007698:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800769c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80076a0:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80076a4:	443b      	add	r3, r7
 80076a6:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 80076aa:	f04f 0300 	mov.w	r3, #0
 80076ae:	f04f 0400 	mov.w	r4, #0
 80076b2:	f241 32b0 	movw	r2, #5040	; 0x13b0
 80076b6:	443a      	add	r2, r7
 80076b8:	e9c2 3400 	strd	r3, r4, [r2]
 80076bc:	e03c      	b.n	8007738 <G_q+0x4d80>
  } else if (t26.re == 0.0) {
 80076be:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80076c2:	ed93 7b00 	vldr	d7, [r3]
 80076c6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80076ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ce:	d119      	bne.n	8007704 <G_q+0x4d4c>
    t34_re = 0.0;
 80076d0:	f04f 0300 	mov.w	r3, #0
 80076d4:	f04f 0400 	mov.w	r4, #0
 80076d8:	f241 32b8 	movw	r2, #5048	; 0x13b8
 80076dc:	443a      	add	r2, r7
 80076de:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t26.im / 2.0;
 80076e2:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80076e6:	ed93 6b02 	vldr	d6, [r3, #8]
 80076ea:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80076ee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80076f2:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80076f6:	443b      	add	r3, r7
 80076f8:	ed83 7b00 	vstr	d7, [r3]
 80076fc:	e01c      	b.n	8007738 <G_q+0x4d80>
 80076fe:	bf00      	nop
 8007700:	ffffed50 	.word	0xffffed50
  } else {
    t34_re = t26.re / 2.0;
 8007704:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8007708:	ed93 6b00 	vldr	d6, [r3]
 800770c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007710:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007714:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8007718:	443b      	add	r3, r7
 800771a:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t26.im / 2.0;
 800771e:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8007722:	ed93 6b02 	vldr	d6, [r3, #8]
 8007726:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800772a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800772e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8007732:	443b      	add	r3, r7
 8007734:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re = (t27.re * 0.0 - t27.im * 3.061616997868383E-17) - (t28.re * 0.0 -
 8007738:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800773c:	ed93 7b00 	vldr	d7, [r3]
 8007740:	ed9f 6bf1 	vldr	d6, [pc, #964]	; 8007b08 <G_q+0x5150>
 8007744:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007748:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800774c:	ed93 7b02 	vldr	d7, [r3, #8]
 8007750:	ed9f 5bef 	vldr	d5, [pc, #956]	; 8007b10 <G_q+0x5158>
 8007754:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007758:	ee36 6b47 	vsub.f64	d6, d6, d7
 800775c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8007760:	ed93 7b00 	vldr	d7, [r3]
 8007764:	ed9f 5be8 	vldr	d5, [pc, #928]	; 8007b08 <G_q+0x5150>
 8007768:	ee27 5b05 	vmul.f64	d5, d7, d5
    t28.im * 3.061616997868383E-17);
 800776c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8007770:	ed93 7b02 	vldr	d7, [r3, #8]
 8007774:	ed9f 4be6 	vldr	d4, [pc, #920]	; 8007b10 <G_q+0x5158>
 8007778:	ee27 7b04 	vmul.f64	d7, d7, d4
  t16_re = (t27.re * 0.0 - t27.im * 3.061616997868383E-17) - (t28.re * 0.0 -
 800777c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007780:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007784:	f241 3368 	movw	r3, #4968	; 0x1368
 8007788:	443b      	add	r3, r7
 800778a:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t27.re * 3.061616997868383E-17 + t27.im * 0.0) - (t28.re *
 800778e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8007792:	ed93 7b00 	vldr	d7, [r3]
 8007796:	ed9f 6bde 	vldr	d6, [pc, #888]	; 8007b10 <G_q+0x5158>
 800779a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800779e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80077a2:	ed93 7b02 	vldr	d7, [r3, #8]
 80077a6:	ed9f 5bd8 	vldr	d5, [pc, #864]	; 8007b08 <G_q+0x5150>
 80077aa:	ee27 7b05 	vmul.f64	d7, d7, d5
 80077ae:	ee36 6b07 	vadd.f64	d6, d6, d7
 80077b2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80077b6:	ed93 7b00 	vldr	d7, [r3]
 80077ba:	ed9f 5bd5 	vldr	d5, [pc, #852]	; 8007b10 <G_q+0x5158>
 80077be:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t28.im * 0.0);
 80077c2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80077c6:	ed93 7b02 	vldr	d7, [r3, #8]
 80077ca:	ed9f 4bcf 	vldr	d4, [pc, #828]	; 8007b08 <G_q+0x5150>
 80077ce:	ee27 7b04 	vmul.f64	d7, d7, d4
 80077d2:	ee35 7b07 	vadd.f64	d7, d5, d7
  t16_im = (t27.re * 3.061616997868383E-17 + t27.im * 0.0) - (t28.re *
 80077d6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80077da:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80077de:	ed83 7b00 	vstr	d7, [r3]
  t13_re += t34_re;
 80077e2:	f241 3378 	movw	r3, #4984	; 0x1378
 80077e6:	443b      	add	r3, r7
 80077e8:	ed93 6b00 	vldr	d6, [r3]
 80077ec:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80077f0:	443b      	add	r3, r7
 80077f2:	ed93 7b00 	vldr	d7, [r3]
 80077f6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80077fa:	f241 3378 	movw	r3, #4984	; 0x1378
 80077fe:	443b      	add	r3, r7
 8007800:	ed83 7b00 	vstr	d7, [r3]
  t13_im += t34_im;
 8007804:	f241 3370 	movw	r3, #4976	; 0x1370
 8007808:	443b      	add	r3, r7
 800780a:	ed93 6b00 	vldr	d6, [r3]
 800780e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8007812:	443b      	add	r3, r7
 8007814:	ed93 7b00 	vldr	d7, [r3]
 8007818:	ee36 7b07 	vadd.f64	d7, d6, d7
 800781c:	f241 3370 	movw	r3, #4976	; 0x1370
 8007820:	443b      	add	r3, r7
 8007822:	ed83 7b00 	vstr	d7, [r3]
  t34_re = t31.re * 3.061616997868383E-17 + t32.re * 3.061616997868383E-17;
 8007826:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800782a:	ed93 7b00 	vldr	d7, [r3]
 800782e:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 8007b10 <G_q+0x5158>
 8007832:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007836:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800783a:	ed93 7b00 	vldr	d7, [r3]
 800783e:	ed9f 5bb4 	vldr	d5, [pc, #720]	; 8007b10 <G_q+0x5158>
 8007842:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007846:	ee36 7b07 	vadd.f64	d7, d6, d7
 800784a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800784e:	443b      	add	r3, r7
 8007850:	ed83 7b00 	vstr	d7, [r3]
  t34_im = t31.im * 3.061616997868383E-17 + t32.im * 3.061616997868383E-17;
 8007854:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007858:	ed93 7b02 	vldr	d7, [r3, #8]
 800785c:	ed9f 6bac 	vldr	d6, [pc, #688]	; 8007b10 <G_q+0x5158>
 8007860:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007864:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8007868:	ed93 7b02 	vldr	d7, [r3, #8]
 800786c:	ed9f 5ba8 	vldr	d5, [pc, #672]	; 8007b10 <G_q+0x5158>
 8007870:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007874:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007878:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800787c:	443b      	add	r3, r7
 800787e:	ed83 7b00 	vstr	d7, [r3]
  t12_re = (t29.re * 0.0 - t29.im * 0.5) - (t30.re * 0.0 - t30.im * 0.5);
 8007882:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 8007886:	ed93 7b00 	vldr	d7, [r3]
 800788a:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 8007b08 <G_q+0x5150>
 800788e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007892:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 8007896:	ed93 7b02 	vldr	d7, [r3, #8]
 800789a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800789e:	ee27 7b05 	vmul.f64	d7, d7, d5
 80078a2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80078a6:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 80078aa:	ed93 7b00 	vldr	d7, [r3]
 80078ae:	ed9f 5b96 	vldr	d5, [pc, #600]	; 8007b08 <G_q+0x5150>
 80078b2:	ee27 5b05 	vmul.f64	d5, d7, d5
 80078b6:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 80078ba:	ed93 7b02 	vldr	d7, [r3, #8]
 80078be:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80078c2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80078c6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80078ca:	ee36 7b47 	vsub.f64	d7, d6, d7
 80078ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80078d2:	443b      	add	r3, r7
 80078d4:	ed83 7b00 	vstr	d7, [r3]
  t12_im = (t29.re * 0.5 + t29.im * 0.0) - (t30.re * 0.5 + t30.im * 0.0);
 80078d8:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 80078dc:	ed93 7b00 	vldr	d7, [r3]
 80078e0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80078e4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80078e8:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 80078ec:	ed93 7b02 	vldr	d7, [r3, #8]
 80078f0:	ed9f 5b85 	vldr	d5, [pc, #532]	; 8007b08 <G_q+0x5150>
 80078f4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80078f8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80078fc:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8007900:	ed93 7b00 	vldr	d7, [r3]
 8007904:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007908:	ee27 5b05 	vmul.f64	d5, d7, d5
 800790c:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8007910:	ed93 7b02 	vldr	d7, [r3, #8]
 8007914:	ed9f 4b7c 	vldr	d4, [pc, #496]	; 8007b08 <G_q+0x5150>
 8007918:	ee27 7b04 	vmul.f64	d7, d7, d4
 800791c:	ee35 7b07 	vadd.f64	d7, d5, d7
 8007920:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007924:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8007928:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t21.re * 0.0 - t21.im * 0.5) - (t22.re * 0.0 - t22.im * 0.5);
 800792c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007930:	ed93 7b00 	vldr	d7, [r3]
 8007934:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8007b08 <G_q+0x5150>
 8007938:	ee27 6b06 	vmul.f64	d6, d7, d6
 800793c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007940:	ed93 7b02 	vldr	d7, [r3, #8]
 8007944:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007948:	ee27 7b05 	vmul.f64	d7, d7, d5
 800794c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007950:	4b73      	ldr	r3, [pc, #460]	; (8007b20 <G_q+0x5168>)
 8007952:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007956:	443a      	add	r2, r7
 8007958:	4413      	add	r3, r2
 800795a:	ed93 7b00 	vldr	d7, [r3]
 800795e:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8007b08 <G_q+0x5150>
 8007962:	ee27 5b05 	vmul.f64	d5, d7, d5
 8007966:	4b6e      	ldr	r3, [pc, #440]	; (8007b20 <G_q+0x5168>)
 8007968:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800796c:	443a      	add	r2, r7
 800796e:	4413      	add	r3, r2
 8007970:	ed93 7b02 	vldr	d7, [r3, #8]
 8007974:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8007978:	ee27 7b04 	vmul.f64	d7, d7, d4
 800797c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007980:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007984:	f241 3348 	movw	r3, #4936	; 0x1348
 8007988:	443b      	add	r3, r7
 800798a:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t21.re * 0.5 + t21.im * 0.0) - (t22.re * 0.5 + t22.im * 0.0);
 800798e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007992:	ed93 7b00 	vldr	d7, [r3]
 8007996:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800799a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800799e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079a2:	ed93 7b02 	vldr	d7, [r3, #8]
 80079a6:	ed9f 5b58 	vldr	d5, [pc, #352]	; 8007b08 <G_q+0x5150>
 80079aa:	ee27 7b05 	vmul.f64	d7, d7, d5
 80079ae:	ee36 6b07 	vadd.f64	d6, d6, d7
 80079b2:	4b5b      	ldr	r3, [pc, #364]	; (8007b20 <G_q+0x5168>)
 80079b4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80079b8:	443a      	add	r2, r7
 80079ba:	4413      	add	r3, r2
 80079bc:	ed93 7b00 	vldr	d7, [r3]
 80079c0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80079c4:	ee27 5b05 	vmul.f64	d5, d7, d5
 80079c8:	4b55      	ldr	r3, [pc, #340]	; (8007b20 <G_q+0x5168>)
 80079ca:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80079ce:	443a      	add	r2, r7
 80079d0:	4413      	add	r3, r2
 80079d2:	ed93 7b02 	vldr	d7, [r3, #8]
 80079d6:	ed9f 4b4c 	vldr	d4, [pc, #304]	; 8007b08 <G_q+0x5150>
 80079da:	ee27 7b04 	vmul.f64	d7, d7, d4
 80079de:	ee35 7b07 	vadd.f64	d7, d5, d7
 80079e2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80079e6:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80079ea:	ed83 7b00 	vstr	d7, [r3]
  t23_re = (((t23.re * 0.0 - t23.im * 6.123233995736766E-17) - (t24.re * 0.0 -
 80079ee:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 80079f2:	ed93 7b00 	vldr	d7, [r3]
 80079f6:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8007b08 <G_q+0x5150>
 80079fa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80079fe:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8007a02:	ed93 7b02 	vldr	d7, [r3, #8]
 8007a06:	ed9f 5b44 	vldr	d5, [pc, #272]	; 8007b18 <G_q+0x5160>
 8007a0a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007a0e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007a12:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8007a16:	ed93 7b00 	vldr	d7, [r3]
 8007a1a:	ed9f 5b3b 	vldr	d5, [pc, #236]	; 8007b08 <G_q+0x5150>
 8007a1e:	ee27 5b05 	vmul.f64	d5, d7, d5
              t24.im * 6.123233995736766E-17)) - (t16_re * t13_re - t16_im *
 8007a22:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8007a26:	ed93 7b02 	vldr	d7, [r3, #8]
 8007a2a:	ed9f 4b3b 	vldr	d4, [pc, #236]	; 8007b18 <G_q+0x5160>
 8007a2e:	ee27 7b04 	vmul.f64	d7, d7, d4
  t23_re = (((t23.re * 0.0 - t23.im * 6.123233995736766E-17) - (t24.re * 0.0 -
 8007a32:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007a36:	ee36 6b47 	vsub.f64	d6, d6, d7
              t24.im * 6.123233995736766E-17)) - (t16_re * t13_re - t16_im *
 8007a3a:	f241 3368 	movw	r3, #4968	; 0x1368
 8007a3e:	443b      	add	r3, r7
 8007a40:	ed93 5b00 	vldr	d5, [r3]
 8007a44:	f241 3378 	movw	r3, #4984	; 0x1378
 8007a48:	443b      	add	r3, r7
 8007a4a:	ed93 7b00 	vldr	d7, [r3]
 8007a4e:	ee25 5b07 	vmul.f64	d5, d5, d7
 8007a52:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8007a56:	ed93 4b00 	vldr	d4, [r3]
 8007a5a:	f241 3370 	movw	r3, #4976	; 0x1370
 8007a5e:	443b      	add	r3, r7
 8007a60:	ed93 7b00 	vldr	d7, [r3]
 8007a64:	ee24 7b07 	vmul.f64	d7, d4, d7
 8007a68:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007a6c:	ee36 6b47 	vsub.f64	d6, d6, d7
             t13_im)) + (t34_re * t12_re - t34_im * t12_im);
 8007a70:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8007a74:	443b      	add	r3, r7
 8007a76:	ed93 5b00 	vldr	d5, [r3]
 8007a7a:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a7e:	443b      	add	r3, r7
 8007a80:	ed93 7b00 	vldr	d7, [r3]
 8007a84:	ee25 5b07 	vmul.f64	d5, d5, d7
 8007a88:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8007a8c:	443b      	add	r3, r7
 8007a8e:	ed93 4b00 	vldr	d4, [r3]
 8007a92:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8007a96:	ed93 7b00 	vldr	d7, [r3]
 8007a9a:	ee24 7b07 	vmul.f64	d7, d4, d7
 8007a9e:	ee35 7b47 	vsub.f64	d7, d5, d7
  t23_re = (((t23.re * 0.0 - t23.im * 6.123233995736766E-17) - (t24.re * 0.0 -
 8007aa2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007aa6:	f241 3330 	movw	r3, #4912	; 0x1330
 8007aaa:	443b      	add	r3, r7
 8007aac:	ed83 7b00 	vstr	d7, [r3]
  t34_re = (((t23.re * 6.123233995736766E-17 + t23.im * 0.0) - (t24.re *
 8007ab0:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8007ab4:	ed93 7b00 	vldr	d7, [r3]
 8007ab8:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8007b18 <G_q+0x5160>
 8007abc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007ac0:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8007ac4:	ed93 7b02 	vldr	d7, [r3, #8]
 8007ac8:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 8007b08 <G_q+0x5150>
 8007acc:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007ad0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007ad4:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8007ad8:	ed93 7b00 	vldr	d7, [r3]
 8007adc:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 8007b18 <G_q+0x5160>
 8007ae0:	ee27 5b05 	vmul.f64	d5, d7, d5
              6.123233995736766E-17 + t24.im * 0.0)) - (t16_re * t13_im + t16_im
 8007ae4:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8007ae8:	ed93 7b02 	vldr	d7, [r3, #8]
 8007aec:	ed9f 4b06 	vldr	d4, [pc, #24]	; 8007b08 <G_q+0x5150>
 8007af0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007af4:	ee35 7b07 	vadd.f64	d7, d5, d7
  t34_re = (((t23.re * 6.123233995736766E-17 + t23.im * 0.0) - (t24.re *
 8007af8:	ee36 6b47 	vsub.f64	d6, d6, d7
              6.123233995736766E-17 + t24.im * 0.0)) - (t16_re * t13_im + t16_im
 8007afc:	f241 3368 	movw	r3, #4968	; 0x1368
 8007b00:	e010      	b.n	8007b24 <G_q+0x516c>
 8007b02:	bf00      	nop
 8007b04:	f3af 8000 	nop.w
	...
 8007b10:	33145c07 	.word	0x33145c07
 8007b14:	3c81a626 	.word	0x3c81a626
 8007b18:	33145c07 	.word	0x33145c07
 8007b1c:	3c91a626 	.word	0x3c91a626
 8007b20:	ffffed70 	.word	0xffffed70
 8007b24:	443b      	add	r3, r7
 8007b26:	ed93 5b00 	vldr	d5, [r3]
 8007b2a:	f241 3370 	movw	r3, #4976	; 0x1370
 8007b2e:	443b      	add	r3, r7
 8007b30:	ed93 7b00 	vldr	d7, [r3]
 8007b34:	ee25 5b07 	vmul.f64	d5, d5, d7
             * t13_re)) + (t34_re * t12_im + t34_im * t12_re);
 8007b38:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8007b3c:	ed93 4b00 	vldr	d4, [r3]
 8007b40:	f241 3378 	movw	r3, #4984	; 0x1378
 8007b44:	443b      	add	r3, r7
 8007b46:	ed93 7b00 	vldr	d7, [r3]
 8007b4a:	ee24 7b07 	vmul.f64	d7, d4, d7
              6.123233995736766E-17 + t24.im * 0.0)) - (t16_re * t13_im + t16_im
 8007b4e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8007b52:	ee36 6b47 	vsub.f64	d6, d6, d7
             * t13_re)) + (t34_re * t12_im + t34_im * t12_re);
 8007b56:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8007b5a:	443b      	add	r3, r7
 8007b5c:	ed93 5b00 	vldr	d5, [r3]
 8007b60:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8007b64:	ed93 7b00 	vldr	d7, [r3]
 8007b68:	ee25 5b07 	vmul.f64	d5, d5, d7
 8007b6c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8007b70:	443b      	add	r3, r7
 8007b72:	ed93 4b00 	vldr	d4, [r3]
 8007b76:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b7a:	443b      	add	r3, r7
 8007b7c:	ed93 7b00 	vldr	d7, [r3]
 8007b80:	ee24 7b07 	vmul.f64	d7, d4, d7
 8007b84:	ee35 7b07 	vadd.f64	d7, d5, d7
  t34_re = (((t23.re * 6.123233995736766E-17 + t23.im * 0.0) - (t24.re *
 8007b88:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007b8c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8007b90:	443b      	add	r3, r7
 8007b92:	ed83 7b00 	vstr	d7, [r3]
  t54_re = (t54.re * 0.0 - t54.im * 0.5) - (t55.re * 0.0 - t55.im * 0.5);
 8007b96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007b9a:	ed93 7b00 	vldr	d7, [r3]
 8007b9e:	ed9f 6be4 	vldr	d6, [pc, #912]	; 8007f30 <G_q+0x5578>
 8007ba2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007ba6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007baa:	ed93 7b02 	vldr	d7, [r3, #8]
 8007bae:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007bb2:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007bb6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007bba:	4bdf      	ldr	r3, [pc, #892]	; (8007f38 <G_q+0x5580>)
 8007bbc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007bc0:	443a      	add	r2, r7
 8007bc2:	4413      	add	r3, r2
 8007bc4:	ed93 7b00 	vldr	d7, [r3]
 8007bc8:	ed9f 5bd9 	vldr	d5, [pc, #868]	; 8007f30 <G_q+0x5578>
 8007bcc:	ee27 5b05 	vmul.f64	d5, d7, d5
 8007bd0:	4bd9      	ldr	r3, [pc, #868]	; (8007f38 <G_q+0x5580>)
 8007bd2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007bd6:	443a      	add	r2, r7
 8007bd8:	4413      	add	r3, r2
 8007bda:	ed93 7b02 	vldr	d7, [r3, #8]
 8007bde:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8007be2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007be6:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007bea:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007bee:	f241 3328 	movw	r3, #4904	; 0x1328
 8007bf2:	443b      	add	r3, r7
 8007bf4:	ed83 7b00 	vstr	d7, [r3]
  t54_im = (t54.re * 0.5 + t54.im * 0.0) - (t55.re * 0.5 + t55.im * 0.0);
 8007bf8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007bfc:	ed93 7b00 	vldr	d7, [r3]
 8007c00:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8007c04:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007c08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007c0c:	ed93 7b02 	vldr	d7, [r3, #8]
 8007c10:	ed9f 5bc7 	vldr	d5, [pc, #796]	; 8007f30 <G_q+0x5578>
 8007c14:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007c18:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007c1c:	4bc6      	ldr	r3, [pc, #792]	; (8007f38 <G_q+0x5580>)
 8007c1e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007c22:	443a      	add	r2, r7
 8007c24:	4413      	add	r3, r2
 8007c26:	ed93 7b00 	vldr	d7, [r3]
 8007c2a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007c2e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8007c32:	4bc1      	ldr	r3, [pc, #772]	; (8007f38 <G_q+0x5580>)
 8007c34:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007c38:	443a      	add	r2, r7
 8007c3a:	4413      	add	r3, r2
 8007c3c:	ed93 7b02 	vldr	d7, [r3, #8]
 8007c40:	ed9f 4bbb 	vldr	d4, [pc, #748]	; 8007f30 <G_q+0x5578>
 8007c44:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007c48:	ee35 7b07 	vadd.f64	d7, d5, d7
 8007c4c:	f241 2378 	movw	r3, #4728	; 0x1278
 8007c50:	443b      	add	r3, r7
 8007c52:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007c56:	ed83 7b00 	vstr	d7, [r3]
  t10_re = (b_t10_re * t19_re - t10_im * t19_im) + (t20_re * t23_re - t20_im *
 8007c5a:	f241 3338 	movw	r3, #4920	; 0x1338
 8007c5e:	443b      	add	r3, r7
 8007c60:	ed93 6b00 	vldr	d6, [r3]
 8007c64:	f241 3358 	movw	r3, #4952	; 0x1358
 8007c68:	443b      	add	r3, r7
 8007c6a:	ed93 7b00 	vldr	d7, [r3]
 8007c6e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007c72:	f241 3390 	movw	r3, #5008	; 0x1390
 8007c76:	443b      	add	r3, r7
 8007c78:	ed93 5b00 	vldr	d5, [r3]
 8007c7c:	f241 3350 	movw	r3, #4944	; 0x1350
 8007c80:	443b      	add	r3, r7
 8007c82:	ed93 7b00 	vldr	d7, [r3]
 8007c86:	ee25 7b07 	vmul.f64	d7, d5, d7
 8007c8a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007c8e:	f241 3348 	movw	r3, #4936	; 0x1348
 8007c92:	443b      	add	r3, r7
 8007c94:	ed93 5b00 	vldr	d5, [r3]
 8007c98:	f241 3330 	movw	r3, #4912	; 0x1330
 8007c9c:	443b      	add	r3, r7
 8007c9e:	ed93 7b00 	vldr	d7, [r3]
 8007ca2:	ee25 5b07 	vmul.f64	d5, d5, d7
 8007ca6:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8007caa:	ed93 4b00 	vldr	d4, [r3]
 8007cae:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8007cb2:	443b      	add	r3, r7
 8007cb4:	ed93 7b00 	vldr	d7, [r3]
 8007cb8:	ee24 7b07 	vmul.f64	d7, d4, d7
 8007cbc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007cc0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007cc4:	f241 3398 	movw	r3, #5016	; 0x1398
 8007cc8:	443b      	add	r3, r7
 8007cca:	ed83 7b00 	vstr	d7, [r3]
    t34_re);
  t10_im = (b_t10_re * t19_im + t10_im * t19_re) + (t20_re * t34_re + t20_im *
 8007cce:	f241 3338 	movw	r3, #4920	; 0x1338
 8007cd2:	443b      	add	r3, r7
 8007cd4:	ed93 6b00 	vldr	d6, [r3]
 8007cd8:	f241 3350 	movw	r3, #4944	; 0x1350
 8007cdc:	443b      	add	r3, r7
 8007cde:	ed93 7b00 	vldr	d7, [r3]
 8007ce2:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007ce6:	f241 3390 	movw	r3, #5008	; 0x1390
 8007cea:	443b      	add	r3, r7
 8007cec:	ed93 5b00 	vldr	d5, [r3]
 8007cf0:	f241 3358 	movw	r3, #4952	; 0x1358
 8007cf4:	443b      	add	r3, r7
 8007cf6:	ed93 7b00 	vldr	d7, [r3]
 8007cfa:	ee25 7b07 	vmul.f64	d7, d5, d7
 8007cfe:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007d02:	f241 3348 	movw	r3, #4936	; 0x1348
 8007d06:	443b      	add	r3, r7
 8007d08:	ed93 5b00 	vldr	d5, [r3]
 8007d0c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8007d10:	443b      	add	r3, r7
 8007d12:	ed93 7b00 	vldr	d7, [r3]
 8007d16:	ee25 5b07 	vmul.f64	d5, d5, d7
 8007d1a:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8007d1e:	ed93 4b00 	vldr	d4, [r3]
 8007d22:	f241 3330 	movw	r3, #4912	; 0x1330
 8007d26:	443b      	add	r3, r7
 8007d28:	ed93 7b00 	vldr	d7, [r3]
 8007d2c:	ee24 7b07 	vmul.f64	d7, d4, d7
 8007d30:	ee35 7b07 	vadd.f64	d7, d5, d7
 8007d34:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007d38:	f241 3390 	movw	r3, #5008	; 0x1390
 8007d3c:	443b      	add	r3, r7
 8007d3e:	ed83 7b00 	vstr	d7, [r3]
    t23_re);
  t13_re = (t8.re * 0.0 - t8.im * 0.5) - (t9.re * 0.0 - t9.im * 0.5);
 8007d42:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8007d46:	ed93 7b00 	vldr	d7, [r3]
 8007d4a:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8007f30 <G_q+0x5578>
 8007d4e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007d52:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8007d56:	ed93 7b02 	vldr	d7, [r3, #8]
 8007d5a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007d5e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007d62:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007d66:	4b75      	ldr	r3, [pc, #468]	; (8007f3c <G_q+0x5584>)
 8007d68:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007d6c:	443a      	add	r2, r7
 8007d6e:	4413      	add	r3, r2
 8007d70:	ed93 7b00 	vldr	d7, [r3]
 8007d74:	ed9f 5b6e 	vldr	d5, [pc, #440]	; 8007f30 <G_q+0x5578>
 8007d78:	ee27 5b05 	vmul.f64	d5, d7, d5
 8007d7c:	4b6f      	ldr	r3, [pc, #444]	; (8007f3c <G_q+0x5584>)
 8007d7e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007d82:	443a      	add	r2, r7
 8007d84:	4413      	add	r3, r2
 8007d86:	ed93 7b02 	vldr	d7, [r3, #8]
 8007d8a:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8007d8e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007d92:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007d96:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007d9a:	f241 3378 	movw	r3, #4984	; 0x1378
 8007d9e:	443b      	add	r3, r7
 8007da0:	ed83 7b00 	vstr	d7, [r3]
  t8_im = (t8.re * 0.5 + t8.im * 0.0) - (t9.re * 0.5 + t9.im * 0.0);
 8007da4:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8007da8:	ed93 7b00 	vldr	d7, [r3]
 8007dac:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8007db0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007db4:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8007db8:	ed93 7b02 	vldr	d7, [r3, #8]
 8007dbc:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 8007f30 <G_q+0x5578>
 8007dc0:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007dc4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007dc8:	4b5c      	ldr	r3, [pc, #368]	; (8007f3c <G_q+0x5584>)
 8007dca:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007dce:	443a      	add	r2, r7
 8007dd0:	4413      	add	r3, r2
 8007dd2:	ed93 7b00 	vldr	d7, [r3]
 8007dd6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007dda:	ee27 5b05 	vmul.f64	d5, d7, d5
 8007dde:	4b57      	ldr	r3, [pc, #348]	; (8007f3c <G_q+0x5584>)
 8007de0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007de4:	443a      	add	r2, r7
 8007de6:	4413      	add	r3, r2
 8007de8:	ed93 7b02 	vldr	d7, [r3, #8]
 8007dec:	ed9f 4b50 	vldr	d4, [pc, #320]	; 8007f30 <G_q+0x5578>
 8007df0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007df4:	ee35 7b07 	vadd.f64	d7, d5, d7
 8007df8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007dfc:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8007e00:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t5.re * 0.0 - t5.im * 0.5) - (t6.re * 0.0 - t6.im * 0.5);
 8007e04:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8007e08:	ed93 7b00 	vldr	d7, [r3]
 8007e0c:	ed9f 6b48 	vldr	d6, [pc, #288]	; 8007f30 <G_q+0x5578>
 8007e10:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007e14:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8007e18:	ed93 7b02 	vldr	d7, [r3, #8]
 8007e1c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007e20:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007e24:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007e28:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8007e2c:	ed93 7b00 	vldr	d7, [r3]
 8007e30:	ed9f 5b3f 	vldr	d5, [pc, #252]	; 8007f30 <G_q+0x5578>
 8007e34:	ee27 5b05 	vmul.f64	d5, d7, d5
 8007e38:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8007e3c:	ed93 7b02 	vldr	d7, [r3, #8]
 8007e40:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8007e44:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007e48:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007e4c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007e50:	f241 3370 	movw	r3, #4976	; 0x1370
 8007e54:	443b      	add	r3, r7
 8007e56:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t5.re * 0.5 + t5.im * 0.0) - (t6.re * 0.5 + t6.im * 0.0);
 8007e5a:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8007e5e:	ed93 7b00 	vldr	d7, [r3]
 8007e62:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8007e66:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007e6a:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8007e6e:	ed93 7b02 	vldr	d7, [r3, #8]
 8007e72:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8007f30 <G_q+0x5578>
 8007e76:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007e7a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007e7e:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8007e82:	ed93 7b00 	vldr	d7, [r3]
 8007e86:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007e8a:	ee27 5b05 	vmul.f64	d5, d7, d5
 8007e8e:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8007e92:	ed93 7b02 	vldr	d7, [r3, #8]
 8007e96:	ed9f 4b26 	vldr	d4, [pc, #152]	; 8007f30 <G_q+0x5578>
 8007e9a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007e9e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8007ea2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007ea6:	f241 3368 	movw	r3, #4968	; 0x1368
 8007eaa:	443b      	add	r3, r7
 8007eac:	ed83 7b00 	vstr	d7, [r3]
  if (t8.im == 0.0) {
 8007eb0:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8007eb4:	ed93 7b02 	vldr	d7, [r3, #8]
 8007eb8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ec0:	d115      	bne.n	8007eee <G_q+0x5536>
    t16_im = t8.re / 2.0;
 8007ec2:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8007ec6:	ed93 6b00 	vldr	d6, [r3]
 8007eca:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007ece:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007ed2:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8007ed6:	ed83 7b00 	vstr	d7, [r3]
    t20_re = 0.0;
 8007eda:	f04f 0300 	mov.w	r3, #0
 8007ede:	f04f 0400 	mov.w	r4, #0
 8007ee2:	f241 3248 	movw	r2, #4936	; 0x1348
 8007ee6:	443a      	add	r2, r7
 8007ee8:	e9c2 3400 	strd	r3, r4, [r2]
 8007eec:	e041      	b.n	8007f72 <G_q+0x55ba>
  } else if (t8.re == 0.0) {
 8007eee:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8007ef2:	ed93 7b00 	vldr	d7, [r3]
 8007ef6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007efe:	d11f      	bne.n	8007f40 <G_q+0x5588>
    t16_im = 0.0;
 8007f00:	f04f 0300 	mov.w	r3, #0
 8007f04:	f04f 0400 	mov.w	r4, #0
 8007f08:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8007f0c:	e9c2 3400 	strd	r3, r4, [r2]
    t20_re = t8.im / 2.0;
 8007f10:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8007f14:	ed93 6b02 	vldr	d6, [r3, #8]
 8007f18:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007f1c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007f20:	f241 3348 	movw	r3, #4936	; 0x1348
 8007f24:	443b      	add	r3, r7
 8007f26:	ed83 7b00 	vstr	d7, [r3]
 8007f2a:	e022      	b.n	8007f72 <G_q+0x55ba>
 8007f2c:	f3af 8000 	nop.w
	...
 8007f38:	ffffec70 	.word	0xffffec70
 8007f3c:	ffffeff0 	.word	0xffffeff0
  } else {
    t16_im = t8.re / 2.0;
 8007f40:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8007f44:	ed93 6b00 	vldr	d6, [r3]
 8007f48:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007f4c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007f50:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8007f54:	ed83 7b00 	vstr	d7, [r3]
    t20_re = t8.im / 2.0;
 8007f58:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8007f5c:	ed93 6b02 	vldr	d6, [r3, #8]
 8007f60:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007f64:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007f68:	f241 3348 	movw	r3, #4936	; 0x1348
 8007f6c:	443b      	add	r3, r7
 8007f6e:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t85.im == 0.0) {
 8007f72:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8007f76:	ed93 7b02 	vldr	d7, [r3, #8]
 8007f7a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f82:	d115      	bne.n	8007fb0 <G_q+0x55f8>
    t12_im = t85.re / 2.0;
 8007f84:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8007f88:	ed93 6b00 	vldr	d6, [r3]
 8007f8c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007f90:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007f94:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8007f98:	ed83 7b00 	vstr	d7, [r3]
    t85_im = 0.0;
 8007f9c:	f04f 0300 	mov.w	r3, #0
 8007fa0:	f04f 0400 	mov.w	r4, #0
 8007fa4:	f241 3218 	movw	r2, #4888	; 0x1318
 8007fa8:	443a      	add	r2, r7
 8007faa:	e9c2 3400 	strd	r3, r4, [r2]
 8007fae:	e037      	b.n	8008020 <G_q+0x5668>
  } else if (t85.re == 0.0) {
 8007fb0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8007fb4:	ed93 7b00 	vldr	d7, [r3]
 8007fb8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fc0:	d115      	bne.n	8007fee <G_q+0x5636>
    t12_im = 0.0;
 8007fc2:	f04f 0300 	mov.w	r3, #0
 8007fc6:	f04f 0400 	mov.w	r4, #0
 8007fca:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8007fce:	e9c2 3400 	strd	r3, r4, [r2]
    t85_im = t85.im / 2.0;
 8007fd2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8007fd6:	ed93 6b02 	vldr	d6, [r3, #8]
 8007fda:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007fde:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007fe2:	f241 3318 	movw	r3, #4888	; 0x1318
 8007fe6:	443b      	add	r3, r7
 8007fe8:	ed83 7b00 	vstr	d7, [r3]
 8007fec:	e018      	b.n	8008020 <G_q+0x5668>
  } else {
    t12_im = t85.re / 2.0;
 8007fee:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8007ff2:	ed93 6b00 	vldr	d6, [r3]
 8007ff6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007ffa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007ffe:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8008002:	ed83 7b00 	vstr	d7, [r3]
    t85_im = t85.im / 2.0;
 8008006:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800800a:	ed93 6b02 	vldr	d6, [r3, #8]
 800800e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008012:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008016:	f241 3318 	movw	r3, #4888	; 0x1318
 800801a:	443b      	add	r3, r7
 800801c:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t3.im == 0.0) {
 8008020:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8008024:	ed93 7b02 	vldr	d7, [r3, #8]
 8008028:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800802c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008030:	d115      	bne.n	800805e <G_q+0x56a6>
    t20_im = t3.re / 2.0;
 8008032:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8008036:	ed93 6b00 	vldr	d6, [r3]
 800803a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800803e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008042:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8008046:	ed83 7b00 	vstr	d7, [r3]
    t3_im = 0.0;
 800804a:	f04f 0300 	mov.w	r3, #0
 800804e:	f04f 0400 	mov.w	r4, #0
 8008052:	f241 3210 	movw	r2, #4880	; 0x1310
 8008056:	443a      	add	r2, r7
 8008058:	e9c2 3400 	strd	r3, r4, [r2]
 800805c:	e037      	b.n	80080ce <G_q+0x5716>
  } else if (t3.re == 0.0) {
 800805e:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8008062:	ed93 7b00 	vldr	d7, [r3]
 8008066:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800806a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800806e:	d115      	bne.n	800809c <G_q+0x56e4>
    t20_im = 0.0;
 8008070:	f04f 0300 	mov.w	r3, #0
 8008074:	f04f 0400 	mov.w	r4, #0
 8008078:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 800807c:	e9c2 3400 	strd	r3, r4, [r2]
    t3_im = t3.im / 2.0;
 8008080:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8008084:	ed93 6b02 	vldr	d6, [r3, #8]
 8008088:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800808c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008090:	f241 3310 	movw	r3, #4880	; 0x1310
 8008094:	443b      	add	r3, r7
 8008096:	ed83 7b00 	vstr	d7, [r3]
 800809a:	e018      	b.n	80080ce <G_q+0x5716>
  } else {
    t20_im = t3.re / 2.0;
 800809c:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 80080a0:	ed93 6b00 	vldr	d6, [r3]
 80080a4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80080a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80080ac:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80080b0:	ed83 7b00 	vstr	d7, [r3]
    t3_im = t3.im / 2.0;
 80080b4:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 80080b8:	ed93 6b02 	vldr	d6, [r3, #8]
 80080bc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80080c0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80080c4:	f241 3310 	movw	r3, #4880	; 0x1310
 80080c8:	443b      	add	r3, r7
 80080ca:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t4.im == 0.0) {
 80080ce:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80080d2:	ed93 7b02 	vldr	d7, [r3, #8]
 80080d6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80080da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080de:	d116      	bne.n	800810e <G_q+0x5756>
    t34_re = t4.re / 2.0;
 80080e0:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80080e4:	ed93 6b00 	vldr	d6, [r3]
 80080e8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80080ec:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80080f0:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80080f4:	443b      	add	r3, r7
 80080f6:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 80080fa:	f04f 0300 	mov.w	r3, #0
 80080fe:	f04f 0400 	mov.w	r4, #0
 8008102:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8008106:	443a      	add	r2, r7
 8008108:	e9c2 3400 	strd	r3, r4, [r2]
 800810c:	e039      	b.n	8008182 <G_q+0x57ca>
  } else if (t4.re == 0.0) {
 800810e:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8008112:	ed93 7b00 	vldr	d7, [r3]
 8008116:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800811a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800811e:	d116      	bne.n	800814e <G_q+0x5796>
    t34_re = 0.0;
 8008120:	f04f 0300 	mov.w	r3, #0
 8008124:	f04f 0400 	mov.w	r4, #0
 8008128:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800812c:	443a      	add	r2, r7
 800812e:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t4.im / 2.0;
 8008132:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8008136:	ed93 6b02 	vldr	d6, [r3, #8]
 800813a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800813e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008142:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008146:	443b      	add	r3, r7
 8008148:	ed83 7b00 	vstr	d7, [r3]
 800814c:	e019      	b.n	8008182 <G_q+0x57ca>
  } else {
    t34_re = t4.re / 2.0;
 800814e:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8008152:	ed93 6b00 	vldr	d6, [r3]
 8008156:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800815a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800815e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008162:	443b      	add	r3, r7
 8008164:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t4.im / 2.0;
 8008168:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 800816c:	ed93 6b02 	vldr	d6, [r3, #8]
 8008170:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008174:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008178:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800817c:	443b      	add	r3, r7
 800817e:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_im += t12_im;
 8008182:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8008186:	ed93 6b00 	vldr	d6, [r3]
 800818a:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800818e:	ed93 7b00 	vldr	d7, [r3]
 8008192:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008196:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800819a:	ed83 7b00 	vstr	d7, [r3]
  t20_re += t85_im;
 800819e:	f241 3348 	movw	r3, #4936	; 0x1348
 80081a2:	443b      	add	r3, r7
 80081a4:	ed93 6b00 	vldr	d6, [r3]
 80081a8:	f241 3318 	movw	r3, #4888	; 0x1318
 80081ac:	443b      	add	r3, r7
 80081ae:	ed93 7b00 	vldr	d7, [r3]
 80081b2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80081b6:	f241 3348 	movw	r3, #4936	; 0x1348
 80081ba:	443b      	add	r3, r7
 80081bc:	ed83 7b00 	vstr	d7, [r3]
  t20_im += t34_re;
 80081c0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80081c4:	ed93 6b00 	vldr	d6, [r3]
 80081c8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80081cc:	443b      	add	r3, r7
 80081ce:	ed93 7b00 	vldr	d7, [r3]
 80081d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80081d6:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80081da:	ed83 7b00 	vstr	d7, [r3]
  t3_im += t34_im;
 80081de:	f241 3310 	movw	r3, #4880	; 0x1310
 80081e2:	443b      	add	r3, r7
 80081e4:	ed93 6b00 	vldr	d6, [r3]
 80081e8:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80081ec:	443b      	add	r3, r7
 80081ee:	ed93 7b00 	vldr	d7, [r3]
 80081f2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80081f6:	f241 3310 	movw	r3, #4880	; 0x1310
 80081fa:	443b      	add	r3, r7
 80081fc:	ed83 7b00 	vstr	d7, [r3]
  t19_re_tmp = t87.re * 0.0;
 8008200:	4bc5      	ldr	r3, [pc, #788]	; (8008518 <G_q+0x5b60>)
 8008202:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8008206:	443a      	add	r2, r7
 8008208:	4413      	add	r3, r2
 800820a:	ed93 7b00 	vldr	d7, [r3]
 800820e:	f241 2370 	movw	r3, #4720	; 0x1270
 8008212:	443b      	add	r3, r7
 8008214:	ed9f 6bbe 	vldr	d6, [pc, #760]	; 8008510 <G_q+0x5b58>
 8008218:	ee27 7b06 	vmul.f64	d7, d7, d6
 800821c:	ed83 7b00 	vstr	d7, [r3]
  t19_re = (t19.re * 0.0 - t19.im * 0.5) - (t19_re_tmp - t87.im * 0.5);
 8008220:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008224:	ed93 7b00 	vldr	d7, [r3]
 8008228:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8008510 <G_q+0x5b58>
 800822c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008230:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008234:	ed93 7b02 	vldr	d7, [r3, #8]
 8008238:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800823c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008240:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008244:	4bb4      	ldr	r3, [pc, #720]	; (8008518 <G_q+0x5b60>)
 8008246:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800824a:	443a      	add	r2, r7
 800824c:	4413      	add	r3, r2
 800824e:	ed93 7b02 	vldr	d7, [r3, #8]
 8008252:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008256:	ee27 7b05 	vmul.f64	d7, d7, d5
 800825a:	f241 2370 	movw	r3, #4720	; 0x1270
 800825e:	443b      	add	r3, r7
 8008260:	ed93 5b00 	vldr	d5, [r3]
 8008264:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008268:	ee36 7b47 	vsub.f64	d7, d6, d7
 800826c:	f241 3358 	movw	r3, #4952	; 0x1358
 8008270:	443b      	add	r3, r7
 8008272:	ed83 7b00 	vstr	d7, [r3]
  t19_im_tmp = t87.im * 0.0;
 8008276:	4ba8      	ldr	r3, [pc, #672]	; (8008518 <G_q+0x5b60>)
 8008278:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800827c:	443a      	add	r2, r7
 800827e:	4413      	add	r3, r2
 8008280:	ed93 7b02 	vldr	d7, [r3, #8]
 8008284:	f241 2368 	movw	r3, #4712	; 0x1268
 8008288:	443b      	add	r3, r7
 800828a:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 8008510 <G_q+0x5b58>
 800828e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008292:	ed83 7b00 	vstr	d7, [r3]
  t19_im = (t19.re * 0.5 + t19.im * 0.0) - (t87.re * 0.5 + t19_im_tmp);
 8008296:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800829a:	ed93 7b00 	vldr	d7, [r3]
 800829e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80082a2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80082a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80082aa:	ed93 7b02 	vldr	d7, [r3, #8]
 80082ae:	ed9f 5b98 	vldr	d5, [pc, #608]	; 8008510 <G_q+0x5b58>
 80082b2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80082b6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80082ba:	4b97      	ldr	r3, [pc, #604]	; (8008518 <G_q+0x5b60>)
 80082bc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80082c0:	443a      	add	r2, r7
 80082c2:	4413      	add	r3, r2
 80082c4:	ed93 7b00 	vldr	d7, [r3]
 80082c8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80082cc:	ee27 5b05 	vmul.f64	d5, d7, d5
 80082d0:	f241 2368 	movw	r3, #4712	; 0x1268
 80082d4:	443b      	add	r3, r7
 80082d6:	ed93 7b00 	vldr	d7, [r3]
 80082da:	ee35 7b07 	vadd.f64	d7, d5, d7
 80082de:	ee36 7b47 	vsub.f64	d7, d6, d7
 80082e2:	f241 3350 	movw	r3, #4944	; 0x1350
 80082e6:	443b      	add	r3, r7
 80082e8:	ed83 7b00 	vstr	d7, [r3]
  t8_re = (t13_re * t13_im - t8_im * t16_re) + (t16_im * t20_im - t20_re * t3_im);
 80082ec:	f241 3378 	movw	r3, #4984	; 0x1378
 80082f0:	443b      	add	r3, r7
 80082f2:	ed93 6b00 	vldr	d6, [r3]
 80082f6:	f241 3370 	movw	r3, #4976	; 0x1370
 80082fa:	443b      	add	r3, r7
 80082fc:	ed93 7b00 	vldr	d7, [r3]
 8008300:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008304:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8008308:	ed93 5b00 	vldr	d5, [r3]
 800830c:	f241 3368 	movw	r3, #4968	; 0x1368
 8008310:	443b      	add	r3, r7
 8008312:	ed93 7b00 	vldr	d7, [r3]
 8008316:	ee25 7b07 	vmul.f64	d7, d5, d7
 800831a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800831e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8008322:	ed93 5b00 	vldr	d5, [r3]
 8008326:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800832a:	ed93 7b00 	vldr	d7, [r3]
 800832e:	ee25 5b07 	vmul.f64	d5, d5, d7
 8008332:	f241 3348 	movw	r3, #4936	; 0x1348
 8008336:	443b      	add	r3, r7
 8008338:	ed93 4b00 	vldr	d4, [r3]
 800833c:	f241 3310 	movw	r3, #4880	; 0x1310
 8008340:	443b      	add	r3, r7
 8008342:	ed93 7b00 	vldr	d7, [r3]
 8008346:	ee24 7b07 	vmul.f64	d7, d4, d7
 800834a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800834e:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8008352:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008356:	ed83 7b00 	vstr	d7, [r3]
  t8_im = (t13_re * t16_re + t8_im * t13_im) + (t16_im * t3_im + t20_re * t20_im);
 800835a:	f241 3378 	movw	r3, #4984	; 0x1378
 800835e:	443b      	add	r3, r7
 8008360:	ed93 6b00 	vldr	d6, [r3]
 8008364:	f241 3368 	movw	r3, #4968	; 0x1368
 8008368:	443b      	add	r3, r7
 800836a:	ed93 7b00 	vldr	d7, [r3]
 800836e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008372:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8008376:	ed93 5b00 	vldr	d5, [r3]
 800837a:	f241 3370 	movw	r3, #4976	; 0x1370
 800837e:	443b      	add	r3, r7
 8008380:	ed93 7b00 	vldr	d7, [r3]
 8008384:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008388:	ee36 6b07 	vadd.f64	d6, d6, d7
 800838c:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8008390:	ed93 5b00 	vldr	d5, [r3]
 8008394:	f241 3310 	movw	r3, #4880	; 0x1310
 8008398:	443b      	add	r3, r7
 800839a:	ed93 7b00 	vldr	d7, [r3]
 800839e:	ee25 5b07 	vmul.f64	d5, d5, d7
 80083a2:	f241 3348 	movw	r3, #4936	; 0x1348
 80083a6:	443b      	add	r3, r7
 80083a8:	ed93 4b00 	vldr	d4, [r3]
 80083ac:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80083b0:	ed93 7b00 	vldr	d7, [r3]
 80083b4:	ee24 7b07 	vmul.f64	d7, d4, d7
 80083b8:	ee35 7b07 	vadd.f64	d7, d5, d7
 80083bc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80083c0:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 80083c4:	ed83 7b00 	vstr	d7, [r3]
  if (t41.im == 0.0) {
 80083c8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80083cc:	ed93 7b02 	vldr	d7, [r3, #8]
 80083d0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80083d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083d8:	d115      	bne.n	8008406 <G_q+0x5a4e>
    t41_re = t41.re / 2.0;
 80083da:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80083de:	ed93 6b00 	vldr	d6, [r3]
 80083e2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80083e6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80083ea:	f241 3308 	movw	r3, #4872	; 0x1308
 80083ee:	443b      	add	r3, r7
 80083f0:	ed83 7b00 	vstr	d7, [r3]
    t41_im = 0.0;
 80083f4:	f04f 0300 	mov.w	r3, #0
 80083f8:	f04f 0400 	mov.w	r4, #0
 80083fc:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8008400:	e9c2 3400 	strd	r3, r4, [r2]
 8008404:	e037      	b.n	8008476 <G_q+0x5abe>
  } else if (t41.re == 0.0) {
 8008406:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800840a:	ed93 7b00 	vldr	d7, [r3]
 800840e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008416:	d115      	bne.n	8008444 <G_q+0x5a8c>
    t41_re = 0.0;
 8008418:	f04f 0300 	mov.w	r3, #0
 800841c:	f04f 0400 	mov.w	r4, #0
 8008420:	f241 3208 	movw	r2, #4872	; 0x1308
 8008424:	443a      	add	r2, r7
 8008426:	e9c2 3400 	strd	r3, r4, [r2]
    t41_im = t41.im / 2.0;
 800842a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800842e:	ed93 6b02 	vldr	d6, [r3, #8]
 8008432:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008436:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800843a:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800843e:	ed83 7b00 	vstr	d7, [r3]
 8008442:	e018      	b.n	8008476 <G_q+0x5abe>
  } else {
    t41_re = t41.re / 2.0;
 8008444:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8008448:	ed93 6b00 	vldr	d6, [r3]
 800844c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008450:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008454:	f241 3308 	movw	r3, #4872	; 0x1308
 8008458:	443b      	add	r3, r7
 800845a:	ed83 7b00 	vstr	d7, [r3]
    t41_im = t41.im / 2.0;
 800845e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8008462:	ed93 6b02 	vldr	d6, [r3, #8]
 8008466:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800846a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800846e:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8008472:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t42.im == 0.0) {
 8008476:	4b29      	ldr	r3, [pc, #164]	; (800851c <G_q+0x5b64>)
 8008478:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800847c:	443a      	add	r2, r7
 800847e:	4413      	add	r3, r2
 8008480:	ed93 7b02 	vldr	d7, [r3, #8]
 8008484:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800848c:	d118      	bne.n	80084c0 <G_q+0x5b08>
    t16_re = t42.re / 2.0;
 800848e:	4b23      	ldr	r3, [pc, #140]	; (800851c <G_q+0x5b64>)
 8008490:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8008494:	443a      	add	r2, r7
 8008496:	4413      	add	r3, r2
 8008498:	ed93 6b00 	vldr	d6, [r3]
 800849c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80084a0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80084a4:	f241 3368 	movw	r3, #4968	; 0x1368
 80084a8:	443b      	add	r3, r7
 80084aa:	ed83 7b00 	vstr	d7, [r3]
    t16_im = 0.0;
 80084ae:	f04f 0300 	mov.w	r3, #0
 80084b2:	f04f 0400 	mov.w	r4, #0
 80084b6:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 80084ba:	e9c2 3400 	strd	r3, r4, [r2]
 80084be:	e04e      	b.n	800855e <G_q+0x5ba6>
  } else if (t42.re == 0.0) {
 80084c0:	4b16      	ldr	r3, [pc, #88]	; (800851c <G_q+0x5b64>)
 80084c2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80084c6:	443a      	add	r2, r7
 80084c8:	4413      	add	r3, r2
 80084ca:	ed93 7b00 	vldr	d7, [r3]
 80084ce:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80084d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084d6:	d123      	bne.n	8008520 <G_q+0x5b68>
    t16_re = 0.0;
 80084d8:	f04f 0300 	mov.w	r3, #0
 80084dc:	f04f 0400 	mov.w	r4, #0
 80084e0:	f241 3268 	movw	r2, #4968	; 0x1368
 80084e4:	443a      	add	r2, r7
 80084e6:	e9c2 3400 	strd	r3, r4, [r2]
    t16_im = t42.im / 2.0;
 80084ea:	4b0c      	ldr	r3, [pc, #48]	; (800851c <G_q+0x5b64>)
 80084ec:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80084f0:	443a      	add	r2, r7
 80084f2:	4413      	add	r3, r2
 80084f4:	ed93 6b02 	vldr	d6, [r3, #8]
 80084f8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80084fc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008500:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8008504:	ed83 7b00 	vstr	d7, [r3]
 8008508:	e029      	b.n	800855e <G_q+0x5ba6>
 800850a:	bf00      	nop
 800850c:	f3af 8000 	nop.w
	...
 8008518:	ffffedd0 	.word	0xffffedd0
 800851c:	ffffed90 	.word	0xffffed90
  } else {
    t16_re = t42.re / 2.0;
 8008520:	4b5a      	ldr	r3, [pc, #360]	; (800868c <G_q+0x5cd4>)
 8008522:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8008526:	443a      	add	r2, r7
 8008528:	4413      	add	r3, r2
 800852a:	ed93 6b00 	vldr	d6, [r3]
 800852e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008532:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008536:	f241 3368 	movw	r3, #4968	; 0x1368
 800853a:	443b      	add	r3, r7
 800853c:	ed83 7b00 	vstr	d7, [r3]
    t16_im = t42.im / 2.0;
 8008540:	4b52      	ldr	r3, [pc, #328]	; (800868c <G_q+0x5cd4>)
 8008542:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8008546:	443a      	add	r2, r7
 8008548:	4413      	add	r3, r2
 800854a:	ed93 6b02 	vldr	d6, [r3, #8]
 800854e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008552:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008556:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800855a:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t45.im == 0.0) {
 800855e:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8008562:	ed93 7b02 	vldr	d7, [r3, #8]
 8008566:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800856a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800856e:	d115      	bne.n	800859c <G_q+0x5be4>
    t20_re = t45.re / 2.0;
 8008570:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8008574:	ed93 6b00 	vldr	d6, [r3]
 8008578:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800857c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008580:	f241 3348 	movw	r3, #4936	; 0x1348
 8008584:	443b      	add	r3, r7
 8008586:	ed83 7b00 	vstr	d7, [r3]
    t20_im = 0.0;
 800858a:	f04f 0300 	mov.w	r3, #0
 800858e:	f04f 0400 	mov.w	r4, #0
 8008592:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8008596:	e9c2 3400 	strd	r3, r4, [r2]
 800859a:	e037      	b.n	800860c <G_q+0x5c54>
  } else if (t45.re == 0.0) {
 800859c:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 80085a0:	ed93 7b00 	vldr	d7, [r3]
 80085a4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80085a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085ac:	d115      	bne.n	80085da <G_q+0x5c22>
    t20_re = 0.0;
 80085ae:	f04f 0300 	mov.w	r3, #0
 80085b2:	f04f 0400 	mov.w	r4, #0
 80085b6:	f241 3248 	movw	r2, #4936	; 0x1348
 80085ba:	443a      	add	r2, r7
 80085bc:	e9c2 3400 	strd	r3, r4, [r2]
    t20_im = t45.im / 2.0;
 80085c0:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 80085c4:	ed93 6b02 	vldr	d6, [r3, #8]
 80085c8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80085cc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80085d0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80085d4:	ed83 7b00 	vstr	d7, [r3]
 80085d8:	e018      	b.n	800860c <G_q+0x5c54>
  } else {
    t20_re = t45.re / 2.0;
 80085da:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 80085de:	ed93 6b00 	vldr	d6, [r3]
 80085e2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80085e6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80085ea:	f241 3348 	movw	r3, #4936	; 0x1348
 80085ee:	443b      	add	r3, r7
 80085f0:	ed83 7b00 	vstr	d7, [r3]
    t20_im = t45.im / 2.0;
 80085f4:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 80085f8:	ed93 6b02 	vldr	d6, [r3, #8]
 80085fc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008600:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008604:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8008608:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t46.im == 0.0) {
 800860c:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 8008610:	ed93 7b02 	vldr	d7, [r3, #8]
 8008614:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800861c:	d116      	bne.n	800864c <G_q+0x5c94>
    t34_re = t46.re / 2.0;
 800861e:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 8008622:	ed93 6b00 	vldr	d6, [r3]
 8008626:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800862a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800862e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008632:	443b      	add	r3, r7
 8008634:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8008638:	f04f 0300 	mov.w	r3, #0
 800863c:	f04f 0400 	mov.w	r4, #0
 8008640:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8008644:	443a      	add	r2, r7
 8008646:	e9c2 3400 	strd	r3, r4, [r2]
 800864a:	e03b      	b.n	80086c4 <G_q+0x5d0c>
  } else if (t46.re == 0.0) {
 800864c:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 8008650:	ed93 7b00 	vldr	d7, [r3]
 8008654:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800865c:	d118      	bne.n	8008690 <G_q+0x5cd8>
    t34_re = 0.0;
 800865e:	f04f 0300 	mov.w	r3, #0
 8008662:	f04f 0400 	mov.w	r4, #0
 8008666:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800866a:	443a      	add	r2, r7
 800866c:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t46.im / 2.0;
 8008670:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 8008674:	ed93 6b02 	vldr	d6, [r3, #8]
 8008678:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800867c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008680:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008684:	443b      	add	r3, r7
 8008686:	ed83 7b00 	vstr	d7, [r3]
 800868a:	e01b      	b.n	80086c4 <G_q+0x5d0c>
 800868c:	ffffed90 	.word	0xffffed90
  } else {
    t34_re = t46.re / 2.0;
 8008690:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 8008694:	ed93 6b00 	vldr	d6, [r3]
 8008698:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800869c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80086a0:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80086a4:	443b      	add	r3, r7
 80086a6:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t46.im / 2.0;
 80086aa:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 80086ae:	ed93 6b02 	vldr	d6, [r3, #8]
 80086b2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80086b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80086ba:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80086be:	443b      	add	r3, r7
 80086c0:	ed83 7b00 	vstr	d7, [r3]
  }

  t12_re = (t47.re * 0.0 - t47.im * 3.061616997868383E-17) - (t48.re * 0.0 -
 80086c4:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80086c8:	ed93 7b00 	vldr	d7, [r3]
 80086cc:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 8008a90 <G_q+0x60d8>
 80086d0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80086d4:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80086d8:	ed93 7b02 	vldr	d7, [r3, #8]
 80086dc:	ed9f 5bee 	vldr	d5, [pc, #952]	; 8008a98 <G_q+0x60e0>
 80086e0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80086e4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80086e8:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80086ec:	ed93 7b00 	vldr	d7, [r3]
 80086f0:	ed9f 5be7 	vldr	d5, [pc, #924]	; 8008a90 <G_q+0x60d8>
 80086f4:	ee27 5b05 	vmul.f64	d5, d7, d5
    t48.im * 3.061616997868383E-17);
 80086f8:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80086fc:	ed93 7b02 	vldr	d7, [r3, #8]
 8008700:	ed9f 4be5 	vldr	d4, [pc, #916]	; 8008a98 <G_q+0x60e0>
 8008704:	ee27 7b04 	vmul.f64	d7, d7, d4
  t12_re = (t47.re * 0.0 - t47.im * 3.061616997868383E-17) - (t48.re * 0.0 -
 8008708:	ee35 7b47 	vsub.f64	d7, d5, d7
 800870c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008710:	f241 3388 	movw	r3, #5000	; 0x1388
 8008714:	443b      	add	r3, r7
 8008716:	ed83 7b00 	vstr	d7, [r3]
  t12_im = (t47.re * 3.061616997868383E-17 + t47.im * 0.0) - (t48.re *
 800871a:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800871e:	ed93 7b00 	vldr	d7, [r3]
 8008722:	ed9f 6bdd 	vldr	d6, [pc, #884]	; 8008a98 <G_q+0x60e0>
 8008726:	ee27 6b06 	vmul.f64	d6, d7, d6
 800872a:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800872e:	ed93 7b02 	vldr	d7, [r3, #8]
 8008732:	ed9f 5bd7 	vldr	d5, [pc, #860]	; 8008a90 <G_q+0x60d8>
 8008736:	ee27 7b05 	vmul.f64	d7, d7, d5
 800873a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800873e:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8008742:	ed93 7b00 	vldr	d7, [r3]
 8008746:	ed9f 5bd4 	vldr	d5, [pc, #848]	; 8008a98 <G_q+0x60e0>
 800874a:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t48.im * 0.0);
 800874e:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8008752:	ed93 7b02 	vldr	d7, [r3, #8]
 8008756:	ed9f 4bce 	vldr	d4, [pc, #824]	; 8008a90 <G_q+0x60d8>
 800875a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800875e:	ee35 7b07 	vadd.f64	d7, d5, d7
  t12_im = (t47.re * 3.061616997868383E-17 + t47.im * 0.0) - (t48.re *
 8008762:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008766:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800876a:	ed83 7b00 	vstr	d7, [r3]
  t20_re += t34_re;
 800876e:	f241 3348 	movw	r3, #4936	; 0x1348
 8008772:	443b      	add	r3, r7
 8008774:	ed93 6b00 	vldr	d6, [r3]
 8008778:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800877c:	443b      	add	r3, r7
 800877e:	ed93 7b00 	vldr	d7, [r3]
 8008782:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008786:	f241 3348 	movw	r3, #4936	; 0x1348
 800878a:	443b      	add	r3, r7
 800878c:	ed83 7b00 	vstr	d7, [r3]
  t20_im += t34_im;
 8008790:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8008794:	ed93 6b00 	vldr	d6, [r3]
 8008798:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800879c:	443b      	add	r3, r7
 800879e:	ed93 7b00 	vldr	d7, [r3]
 80087a2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80087a6:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80087aa:	ed83 7b00 	vstr	d7, [r3]
  t34_re = t51.re * 3.061616997868383E-17 + t52.re * 3.061616997868383E-17;
 80087ae:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80087b2:	ed93 7b00 	vldr	d7, [r3]
 80087b6:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 8008a98 <G_q+0x60e0>
 80087ba:	ee27 6b06 	vmul.f64	d6, d7, d6
 80087be:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80087c2:	ed93 7b00 	vldr	d7, [r3]
 80087c6:	ed9f 5bb4 	vldr	d5, [pc, #720]	; 8008a98 <G_q+0x60e0>
 80087ca:	ee27 7b05 	vmul.f64	d7, d7, d5
 80087ce:	ee36 7b07 	vadd.f64	d7, d6, d7
 80087d2:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80087d6:	443b      	add	r3, r7
 80087d8:	ed83 7b00 	vstr	d7, [r3]
  t34_im = t51.im * 3.061616997868383E-17 + t52.im * 3.061616997868383E-17;
 80087dc:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80087e0:	ed93 7b02 	vldr	d7, [r3, #8]
 80087e4:	ed9f 6bac 	vldr	d6, [pc, #688]	; 8008a98 <G_q+0x60e0>
 80087e8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80087ec:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80087f0:	ed93 7b02 	vldr	d7, [r3, #8]
 80087f4:	ed9f 5ba8 	vldr	d5, [pc, #672]	; 8008a98 <G_q+0x60e0>
 80087f8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80087fc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008800:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008804:	443b      	add	r3, r7
 8008806:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t49.re * 0.0 - t49.im * 0.5) - (t50.re * 0.0 - t50.im * 0.5);
 800880a:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 800880e:	ed93 7b00 	vldr	d7, [r3]
 8008812:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 8008a90 <G_q+0x60d8>
 8008816:	ee27 6b06 	vmul.f64	d6, d7, d6
 800881a:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 800881e:	ed93 7b02 	vldr	d7, [r3, #8]
 8008822:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008826:	ee27 7b05 	vmul.f64	d7, d7, d5
 800882a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800882e:	f507 633c 	add.w	r3, r7, #3008	; 0xbc0
 8008832:	ed93 7b00 	vldr	d7, [r3]
 8008836:	ed9f 5b96 	vldr	d5, [pc, #600]	; 8008a90 <G_q+0x60d8>
 800883a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800883e:	f507 633c 	add.w	r3, r7, #3008	; 0xbc0
 8008842:	ed93 7b02 	vldr	d7, [r3, #8]
 8008846:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800884a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800884e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008852:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008856:	f241 3378 	movw	r3, #4984	; 0x1378
 800885a:	443b      	add	r3, r7
 800885c:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t49.re * 0.5 + t49.im * 0.0) - (t50.re * 0.5 + t50.im * 0.0);
 8008860:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 8008864:	ed93 7b00 	vldr	d7, [r3]
 8008868:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800886c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008870:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 8008874:	ed93 7b02 	vldr	d7, [r3, #8]
 8008878:	ed9f 5b85 	vldr	d5, [pc, #532]	; 8008a90 <G_q+0x60d8>
 800887c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008880:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008884:	f507 633c 	add.w	r3, r7, #3008	; 0xbc0
 8008888:	ed93 7b00 	vldr	d7, [r3]
 800888c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008890:	ee27 5b05 	vmul.f64	d5, d7, d5
 8008894:	f507 633c 	add.w	r3, r7, #3008	; 0xbc0
 8008898:	ed93 7b02 	vldr	d7, [r3, #8]
 800889c:	ed9f 4b7c 	vldr	d4, [pc, #496]	; 8008a90 <G_q+0x60d8>
 80088a0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80088a4:	ee35 7b07 	vadd.f64	d7, d5, d7
 80088a8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80088ac:	f241 3370 	movw	r3, #4976	; 0x1370
 80088b0:	443b      	add	r3, r7
 80088b2:	ed83 7b00 	vstr	d7, [r3]
  t41_re += t16_re;
 80088b6:	f241 3308 	movw	r3, #4872	; 0x1308
 80088ba:	443b      	add	r3, r7
 80088bc:	ed93 6b00 	vldr	d6, [r3]
 80088c0:	f241 3368 	movw	r3, #4968	; 0x1368
 80088c4:	443b      	add	r3, r7
 80088c6:	ed93 7b00 	vldr	d7, [r3]
 80088ca:	ee36 7b07 	vadd.f64	d7, d6, d7
 80088ce:	f241 3308 	movw	r3, #4872	; 0x1308
 80088d2:	443b      	add	r3, r7
 80088d4:	ed83 7b00 	vstr	d7, [r3]
  t41_im += t16_im;
 80088d8:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 80088dc:	ed93 6b00 	vldr	d6, [r3]
 80088e0:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80088e4:	ed93 7b00 	vldr	d7, [r3]
 80088e8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80088ec:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 80088f0:	ed83 7b00 	vstr	d7, [r3]
  t43_re = (((t43.re * 0.0 - t43.im * 6.123233995736766E-17) - (t44.re * 0.0 -
 80088f4:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 80088f8:	ed93 7b00 	vldr	d7, [r3]
 80088fc:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8008a90 <G_q+0x60d8>
 8008900:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008904:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8008908:	ed93 7b02 	vldr	d7, [r3, #8]
 800890c:	ed9f 5b64 	vldr	d5, [pc, #400]	; 8008aa0 <G_q+0x60e8>
 8008910:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008914:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008918:	f507 6338 	add.w	r3, r7, #2944	; 0xb80
 800891c:	ed93 7b00 	vldr	d7, [r3]
 8008920:	ed9f 5b5b 	vldr	d5, [pc, #364]	; 8008a90 <G_q+0x60d8>
 8008924:	ee27 5b05 	vmul.f64	d5, d7, d5
              t44.im * 6.123233995736766E-17)) - (t12_re * t20_re - t12_im *
 8008928:	f507 6338 	add.w	r3, r7, #2944	; 0xb80
 800892c:	ed93 7b02 	vldr	d7, [r3, #8]
 8008930:	ed9f 4b5b 	vldr	d4, [pc, #364]	; 8008aa0 <G_q+0x60e8>
 8008934:	ee27 7b04 	vmul.f64	d7, d7, d4
  t43_re = (((t43.re * 0.0 - t43.im * 6.123233995736766E-17) - (t44.re * 0.0 -
 8008938:	ee35 7b47 	vsub.f64	d7, d5, d7
 800893c:	ee36 6b47 	vsub.f64	d6, d6, d7
              t44.im * 6.123233995736766E-17)) - (t12_re * t20_re - t12_im *
 8008940:	f241 3388 	movw	r3, #5000	; 0x1388
 8008944:	443b      	add	r3, r7
 8008946:	ed93 5b00 	vldr	d5, [r3]
 800894a:	f241 3348 	movw	r3, #4936	; 0x1348
 800894e:	443b      	add	r3, r7
 8008950:	ed93 7b00 	vldr	d7, [r3]
 8008954:	ee25 5b07 	vmul.f64	d5, d5, d7
 8008958:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800895c:	ed93 4b00 	vldr	d4, [r3]
 8008960:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8008964:	ed93 7b00 	vldr	d7, [r3]
 8008968:	ee24 7b07 	vmul.f64	d7, d4, d7
 800896c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008970:	ee36 6b47 	vsub.f64	d6, d6, d7
             t20_im)) + (t34_re * t13_re - t34_im * t13_im);
 8008974:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008978:	443b      	add	r3, r7
 800897a:	ed93 5b00 	vldr	d5, [r3]
 800897e:	f241 3378 	movw	r3, #4984	; 0x1378
 8008982:	443b      	add	r3, r7
 8008984:	ed93 7b00 	vldr	d7, [r3]
 8008988:	ee25 5b07 	vmul.f64	d5, d5, d7
 800898c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008990:	443b      	add	r3, r7
 8008992:	ed93 4b00 	vldr	d4, [r3]
 8008996:	f241 3370 	movw	r3, #4976	; 0x1370
 800899a:	443b      	add	r3, r7
 800899c:	ed93 7b00 	vldr	d7, [r3]
 80089a0:	ee24 7b07 	vmul.f64	d7, d4, d7
 80089a4:	ee35 7b47 	vsub.f64	d7, d5, d7
  t43_re = (((t43.re * 0.0 - t43.im * 6.123233995736766E-17) - (t44.re * 0.0 -
 80089a8:	f241 2358 	movw	r3, #4696	; 0x1258
 80089ac:	443b      	add	r3, r7
 80089ae:	ee36 7b07 	vadd.f64	d7, d6, d7
 80089b2:	ed83 7b00 	vstr	d7, [r3]
  t43_im = (((t43.re * 6.123233995736766E-17 + t43.im * 0.0) - (t44.re *
 80089b6:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 80089ba:	ed93 7b00 	vldr	d7, [r3]
 80089be:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8008aa0 <G_q+0x60e8>
 80089c2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80089c6:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 80089ca:	ed93 7b02 	vldr	d7, [r3, #8]
 80089ce:	ed9f 5b30 	vldr	d5, [pc, #192]	; 8008a90 <G_q+0x60d8>
 80089d2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80089d6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80089da:	f507 6338 	add.w	r3, r7, #2944	; 0xb80
 80089de:	ed93 7b00 	vldr	d7, [r3]
 80089e2:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8008aa0 <G_q+0x60e8>
 80089e6:	ee27 5b05 	vmul.f64	d5, d7, d5
              6.123233995736766E-17 + t44.im * 0.0)) - (t12_re * t20_im + t12_im
 80089ea:	f507 6338 	add.w	r3, r7, #2944	; 0xb80
 80089ee:	ed93 7b02 	vldr	d7, [r3, #8]
 80089f2:	ed9f 4b27 	vldr	d4, [pc, #156]	; 8008a90 <G_q+0x60d8>
 80089f6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80089fa:	ee35 7b07 	vadd.f64	d7, d5, d7
  t43_im = (((t43.re * 6.123233995736766E-17 + t43.im * 0.0) - (t44.re *
 80089fe:	ee36 6b47 	vsub.f64	d6, d6, d7
              6.123233995736766E-17 + t44.im * 0.0)) - (t12_re * t20_im + t12_im
 8008a02:	f241 3388 	movw	r3, #5000	; 0x1388
 8008a06:	443b      	add	r3, r7
 8008a08:	ed93 5b00 	vldr	d5, [r3]
 8008a0c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8008a10:	ed93 7b00 	vldr	d7, [r3]
 8008a14:	ee25 5b07 	vmul.f64	d5, d5, d7
             * t20_re)) + (t34_re * t13_im + t34_im * t13_re);
 8008a18:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8008a1c:	ed93 4b00 	vldr	d4, [r3]
 8008a20:	f241 3348 	movw	r3, #4936	; 0x1348
 8008a24:	443b      	add	r3, r7
 8008a26:	ed93 7b00 	vldr	d7, [r3]
 8008a2a:	ee24 7b07 	vmul.f64	d7, d4, d7
              6.123233995736766E-17 + t44.im * 0.0)) - (t12_re * t20_im + t12_im
 8008a2e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8008a32:	ee36 6b47 	vsub.f64	d6, d6, d7
             * t20_re)) + (t34_re * t13_im + t34_im * t13_re);
 8008a36:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008a3a:	443b      	add	r3, r7
 8008a3c:	ed93 5b00 	vldr	d5, [r3]
 8008a40:	f241 3370 	movw	r3, #4976	; 0x1370
 8008a44:	443b      	add	r3, r7
 8008a46:	ed93 7b00 	vldr	d7, [r3]
 8008a4a:	ee25 5b07 	vmul.f64	d5, d5, d7
 8008a4e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008a52:	443b      	add	r3, r7
 8008a54:	ed93 4b00 	vldr	d4, [r3]
 8008a58:	f241 3378 	movw	r3, #4984	; 0x1378
 8008a5c:	443b      	add	r3, r7
 8008a5e:	ed93 7b00 	vldr	d7, [r3]
 8008a62:	ee24 7b07 	vmul.f64	d7, d4, d7
 8008a66:	ee35 7b07 	vadd.f64	d7, d5, d7
  t43_im = (((t43.re * 6.123233995736766E-17 + t43.im * 0.0) - (t44.re *
 8008a6a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008a6e:	f241 23f8 	movw	r3, #4856	; 0x12f8
 8008a72:	443b      	add	r3, r7
 8008a74:	ed83 7b00 	vstr	d7, [r3]
  if (t54.im == 0.0) {
 8008a78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008a7c:	ed93 7b02 	vldr	d7, [r3, #8]
 8008a80:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a88:	d125      	bne.n	8008ad6 <G_q+0x611e>
 8008a8a:	e00d      	b.n	8008aa8 <G_q+0x60f0>
 8008a8c:	f3af 8000 	nop.w
	...
 8008a98:	33145c07 	.word	0x33145c07
 8008a9c:	3c81a626 	.word	0x3c81a626
 8008aa0:	33145c07 	.word	0x33145c07
 8008aa4:	3c91a626 	.word	0x3c91a626
    b_t54_re = t54.re / 2.0;
 8008aa8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008aac:	ed93 6b00 	vldr	d6, [r3]
 8008ab0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008ab4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008ab8:	f241 23f0 	movw	r3, #4848	; 0x12f0
 8008abc:	443b      	add	r3, r7
 8008abe:	ed83 7b00 	vstr	d7, [r3]
    b_t54_im = 0.0;
 8008ac2:	f04f 0300 	mov.w	r3, #0
 8008ac6:	f04f 0400 	mov.w	r4, #0
 8008aca:	f241 22e8 	movw	r2, #4840	; 0x12e8
 8008ace:	443a      	add	r2, r7
 8008ad0:	e9c2 3400 	strd	r3, r4, [r2]
 8008ad4:	e039      	b.n	8008b4a <G_q+0x6192>
  } else if (t54.re == 0.0) {
 8008ad6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008ada:	ed93 7b00 	vldr	d7, [r3]
 8008ade:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ae6:	d116      	bne.n	8008b16 <G_q+0x615e>
    b_t54_re = 0.0;
 8008ae8:	f04f 0300 	mov.w	r3, #0
 8008aec:	f04f 0400 	mov.w	r4, #0
 8008af0:	f241 22f0 	movw	r2, #4848	; 0x12f0
 8008af4:	443a      	add	r2, r7
 8008af6:	e9c2 3400 	strd	r3, r4, [r2]
    b_t54_im = t54.im / 2.0;
 8008afa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008afe:	ed93 6b02 	vldr	d6, [r3, #8]
 8008b02:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008b06:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008b0a:	f241 23e8 	movw	r3, #4840	; 0x12e8
 8008b0e:	443b      	add	r3, r7
 8008b10:	ed83 7b00 	vstr	d7, [r3]
 8008b14:	e019      	b.n	8008b4a <G_q+0x6192>
  } else {
    b_t54_re = t54.re / 2.0;
 8008b16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008b1a:	ed93 6b00 	vldr	d6, [r3]
 8008b1e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008b22:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008b26:	f241 23f0 	movw	r3, #4848	; 0x12f0
 8008b2a:	443b      	add	r3, r7
 8008b2c:	ed83 7b00 	vstr	d7, [r3]
    b_t54_im = t54.im / 2.0;
 8008b30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008b34:	ed93 6b02 	vldr	d6, [r3, #8]
 8008b38:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008b3c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008b40:	f241 23e8 	movw	r3, #4840	; 0x12e8
 8008b44:	443b      	add	r3, r7
 8008b46:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t55.im == 0.0) {
 8008b4a:	4bdd      	ldr	r3, [pc, #884]	; (8008ec0 <G_q+0x6508>)
 8008b4c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8008b50:	443a      	add	r2, r7
 8008b52:	4413      	add	r3, r2
 8008b54:	ed93 7b02 	vldr	d7, [r3, #8]
 8008b58:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b60:	d118      	bne.n	8008b94 <G_q+0x61dc>
    t55_re = t55.re / 2.0;
 8008b62:	4bd7      	ldr	r3, [pc, #860]	; (8008ec0 <G_q+0x6508>)
 8008b64:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8008b68:	443a      	add	r2, r7
 8008b6a:	4413      	add	r3, r2
 8008b6c:	ed93 6b00 	vldr	d6, [r3]
 8008b70:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008b74:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008b78:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8008b7c:	ed83 7b00 	vstr	d7, [r3]
    t55_im = 0.0;
 8008b80:	f04f 0300 	mov.w	r3, #0
 8008b84:	f04f 0400 	mov.w	r4, #0
 8008b88:	f241 22d8 	movw	r2, #4824	; 0x12d8
 8008b8c:	443a      	add	r2, r7
 8008b8e:	e9c2 3400 	strd	r3, r4, [r2]
 8008b92:	e043      	b.n	8008c1c <G_q+0x6264>
  } else if (t55.re == 0.0) {
 8008b94:	4bca      	ldr	r3, [pc, #808]	; (8008ec0 <G_q+0x6508>)
 8008b96:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8008b9a:	443a      	add	r2, r7
 8008b9c:	4413      	add	r3, r2
 8008b9e:	ed93 7b00 	vldr	d7, [r3]
 8008ba2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008baa:	d118      	bne.n	8008bde <G_q+0x6226>
    t55_re = 0.0;
 8008bac:	f04f 0300 	mov.w	r3, #0
 8008bb0:	f04f 0400 	mov.w	r4, #0
 8008bb4:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 8008bb8:	e9c2 3400 	strd	r3, r4, [r2]
    t55_im = t55.im / 2.0;
 8008bbc:	4bc0      	ldr	r3, [pc, #768]	; (8008ec0 <G_q+0x6508>)
 8008bbe:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8008bc2:	443a      	add	r2, r7
 8008bc4:	4413      	add	r3, r2
 8008bc6:	ed93 6b02 	vldr	d6, [r3, #8]
 8008bca:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008bce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008bd2:	f241 23d8 	movw	r3, #4824	; 0x12d8
 8008bd6:	443b      	add	r3, r7
 8008bd8:	ed83 7b00 	vstr	d7, [r3]
 8008bdc:	e01e      	b.n	8008c1c <G_q+0x6264>
  } else {
    t55_re = t55.re / 2.0;
 8008bde:	4bb8      	ldr	r3, [pc, #736]	; (8008ec0 <G_q+0x6508>)
 8008be0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8008be4:	443a      	add	r2, r7
 8008be6:	4413      	add	r3, r2
 8008be8:	ed93 6b00 	vldr	d6, [r3]
 8008bec:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008bf0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008bf4:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8008bf8:	ed83 7b00 	vstr	d7, [r3]
    t55_im = t55.im / 2.0;
 8008bfc:	4bb0      	ldr	r3, [pc, #704]	; (8008ec0 <G_q+0x6508>)
 8008bfe:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8008c02:	443a      	add	r2, r7
 8008c04:	4413      	add	r3, r2
 8008c06:	ed93 6b02 	vldr	d6, [r3, #8]
 8008c0a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008c0e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008c12:	f241 23d8 	movw	r3, #4824	; 0x12d8
 8008c16:	443b      	add	r3, r7
 8008c18:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t70.im == 0.0) {
 8008c1c:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 8008c20:	ed93 7b02 	vldr	d7, [r3, #8]
 8008c24:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c2c:	d116      	bne.n	8008c5c <G_q+0x62a4>
    t70_re = t70.re / 2.0;
 8008c2e:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 8008c32:	ed93 6b00 	vldr	d6, [r3]
 8008c36:	f241 23d0 	movw	r3, #4816	; 0x12d0
 8008c3a:	443b      	add	r3, r7
 8008c3c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008c40:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008c44:	ed83 7b00 	vstr	d7, [r3]
    t70_im = 0.0;
 8008c48:	f241 22c8 	movw	r2, #4808	; 0x12c8
 8008c4c:	443a      	add	r2, r7
 8008c4e:	f04f 0300 	mov.w	r3, #0
 8008c52:	f04f 0400 	mov.w	r4, #0
 8008c56:	e9c2 3400 	strd	r3, r4, [r2]
 8008c5a:	e039      	b.n	8008cd0 <G_q+0x6318>
  } else if (t70.re == 0.0) {
 8008c5c:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 8008c60:	ed93 7b00 	vldr	d7, [r3]
 8008c64:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c6c:	d116      	bne.n	8008c9c <G_q+0x62e4>
    t70_re = 0.0;
 8008c6e:	f241 22d0 	movw	r2, #4816	; 0x12d0
 8008c72:	443a      	add	r2, r7
 8008c74:	f04f 0300 	mov.w	r3, #0
 8008c78:	f04f 0400 	mov.w	r4, #0
 8008c7c:	e9c2 3400 	strd	r3, r4, [r2]
    t70_im = t70.im / 2.0;
 8008c80:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 8008c84:	ed93 6b02 	vldr	d6, [r3, #8]
 8008c88:	f241 23c8 	movw	r3, #4808	; 0x12c8
 8008c8c:	443b      	add	r3, r7
 8008c8e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008c92:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008c96:	ed83 7b00 	vstr	d7, [r3]
 8008c9a:	e019      	b.n	8008cd0 <G_q+0x6318>
  } else {
    t70_re = t70.re / 2.0;
 8008c9c:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 8008ca0:	ed93 6b00 	vldr	d6, [r3]
 8008ca4:	f241 23d0 	movw	r3, #4816	; 0x12d0
 8008ca8:	443b      	add	r3, r7
 8008caa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008cae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008cb2:	ed83 7b00 	vstr	d7, [r3]
    t70_im = t70.im / 2.0;
 8008cb6:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 8008cba:	ed93 6b02 	vldr	d6, [r3, #8]
 8008cbe:	f241 23c8 	movw	r3, #4808	; 0x12c8
 8008cc2:	443b      	add	r3, r7
 8008cc4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008cc8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008ccc:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t71.im == 0.0) {
 8008cd0:	f507 6346 	add.w	r3, r7, #3168	; 0xc60
 8008cd4:	ed93 7b02 	vldr	d7, [r3, #8]
 8008cd8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ce0:	d116      	bne.n	8008d10 <G_q+0x6358>
    t34_re = t71.re / 2.0;
 8008ce2:	f507 6346 	add.w	r3, r7, #3168	; 0xc60
 8008ce6:	ed93 6b00 	vldr	d6, [r3]
 8008cea:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008cee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008cf2:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008cf6:	443b      	add	r3, r7
 8008cf8:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8008cfc:	f04f 0300 	mov.w	r3, #0
 8008d00:	f04f 0400 	mov.w	r4, #0
 8008d04:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8008d08:	443a      	add	r2, r7
 8008d0a:	e9c2 3400 	strd	r3, r4, [r2]
 8008d0e:	e039      	b.n	8008d84 <G_q+0x63cc>
  } else if (t71.re == 0.0) {
 8008d10:	f507 6346 	add.w	r3, r7, #3168	; 0xc60
 8008d14:	ed93 7b00 	vldr	d7, [r3]
 8008d18:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d20:	d116      	bne.n	8008d50 <G_q+0x6398>
    t34_re = 0.0;
 8008d22:	f04f 0300 	mov.w	r3, #0
 8008d26:	f04f 0400 	mov.w	r4, #0
 8008d2a:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8008d2e:	443a      	add	r2, r7
 8008d30:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t71.im / 2.0;
 8008d34:	f507 6346 	add.w	r3, r7, #3168	; 0xc60
 8008d38:	ed93 6b02 	vldr	d6, [r3, #8]
 8008d3c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008d40:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008d44:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008d48:	443b      	add	r3, r7
 8008d4a:	ed83 7b00 	vstr	d7, [r3]
 8008d4e:	e019      	b.n	8008d84 <G_q+0x63cc>
  } else {
    t34_re = t71.re / 2.0;
 8008d50:	f507 6346 	add.w	r3, r7, #3168	; 0xc60
 8008d54:	ed93 6b00 	vldr	d6, [r3]
 8008d58:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008d5c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008d60:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008d64:	443b      	add	r3, r7
 8008d66:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t71.im / 2.0;
 8008d6a:	f507 6346 	add.w	r3, r7, #3168	; 0xc60
 8008d6e:	ed93 6b02 	vldr	d6, [r3, #8]
 8008d72:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008d76:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008d7a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008d7e:	443b      	add	r3, r7
 8008d80:	ed83 7b00 	vstr	d7, [r3]
  }

  t70_re += t34_re;
 8008d84:	f241 23d0 	movw	r3, #4816	; 0x12d0
 8008d88:	443b      	add	r3, r7
 8008d8a:	f241 22d0 	movw	r2, #4816	; 0x12d0
 8008d8e:	443a      	add	r2, r7
 8008d90:	ed92 6b00 	vldr	d6, [r2]
 8008d94:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8008d98:	443a      	add	r2, r7
 8008d9a:	ed92 7b00 	vldr	d7, [r2]
 8008d9e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008da2:	ed83 7b00 	vstr	d7, [r3]
  t70_im += t34_im;
 8008da6:	f241 23c8 	movw	r3, #4808	; 0x12c8
 8008daa:	443b      	add	r3, r7
 8008dac:	f241 22c8 	movw	r2, #4808	; 0x12c8
 8008db0:	443a      	add	r2, r7
 8008db2:	ed92 6b00 	vldr	d6, [r2]
 8008db6:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8008dba:	443a      	add	r2, r7
 8008dbc:	ed92 7b00 	vldr	d7, [r2]
 8008dc0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008dc4:	ed83 7b00 	vstr	d7, [r3]
  t72_re = (t72.re * 0.0 - t72.im * 0.5) - (t73.re * 0.0 - t73.im * 0.5);
 8008dc8:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8008dcc:	ed93 7b00 	vldr	d7, [r3]
 8008dd0:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8008eb8 <G_q+0x6500>
 8008dd4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008dd8:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8008ddc:	ed93 7b02 	vldr	d7, [r3, #8]
 8008de0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008de4:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008de8:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008dec:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8008df0:	ed93 7b00 	vldr	d7, [r3]
 8008df4:	ed9f 5b30 	vldr	d5, [pc, #192]	; 8008eb8 <G_q+0x6500>
 8008df8:	ee27 5b05 	vmul.f64	d5, d7, d5
 8008dfc:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8008e00:	ed93 7b02 	vldr	d7, [r3, #8]
 8008e04:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8008e08:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008e0c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008e10:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8008e14:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008e18:	ed83 7b00 	vstr	d7, [r3]
  b_t10_re = (t72.re * 0.5 + t72.im * 0.0) - (t73.re * 0.5 + t73.im * 0.0);
 8008e1c:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8008e20:	ed93 7b00 	vldr	d7, [r3]
 8008e24:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8008e28:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008e2c:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8008e30:	ed93 7b02 	vldr	d7, [r3, #8]
 8008e34:	ed9f 5b20 	vldr	d5, [pc, #128]	; 8008eb8 <G_q+0x6500>
 8008e38:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008e3c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008e40:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8008e44:	ed93 7b00 	vldr	d7, [r3]
 8008e48:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008e4c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8008e50:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8008e54:	ed93 7b02 	vldr	d7, [r3, #8]
 8008e58:	ed9f 4b17 	vldr	d4, [pc, #92]	; 8008eb8 <G_q+0x6500>
 8008e5c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008e60:	ee35 7b07 	vadd.f64	d7, d5, d7
 8008e64:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008e68:	f241 3338 	movw	r3, #4920	; 0x1338
 8008e6c:	443b      	add	r3, r7
 8008e6e:	ed83 7b00 	vstr	d7, [r3]
  if (t74.im == 0.0) {
 8008e72:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8008e76:	ed93 7b02 	vldr	d7, [r3, #8]
 8008e7a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e82:	d11f      	bne.n	8008ec4 <G_q+0x650c>
    t74_re = t74.re / 2.0;
 8008e84:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8008e88:	ed93 6b00 	vldr	d6, [r3]
 8008e8c:	f241 23b8 	movw	r3, #4792	; 0x12b8
 8008e90:	443b      	add	r3, r7
 8008e92:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008e96:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008e9a:	ed83 7b00 	vstr	d7, [r3]
    t74_im = 0.0;
 8008e9e:	f241 22b0 	movw	r2, #4784	; 0x12b0
 8008ea2:	443a      	add	r2, r7
 8008ea4:	f04f 0300 	mov.w	r3, #0
 8008ea8:	f04f 0400 	mov.w	r4, #0
 8008eac:	e9c2 3400 	strd	r3, r4, [r2]
 8008eb0:	e042      	b.n	8008f38 <G_q+0x6580>
 8008eb2:	bf00      	nop
 8008eb4:	f3af 8000 	nop.w
	...
 8008ec0:	ffffec70 	.word	0xffffec70
  } else if (t74.re == 0.0) {
 8008ec4:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8008ec8:	ed93 7b00 	vldr	d7, [r3]
 8008ecc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ed4:	d116      	bne.n	8008f04 <G_q+0x654c>
    t74_re = 0.0;
 8008ed6:	f241 22b8 	movw	r2, #4792	; 0x12b8
 8008eda:	443a      	add	r2, r7
 8008edc:	f04f 0300 	mov.w	r3, #0
 8008ee0:	f04f 0400 	mov.w	r4, #0
 8008ee4:	e9c2 3400 	strd	r3, r4, [r2]
    t74_im = t74.im / 2.0;
 8008ee8:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8008eec:	ed93 6b02 	vldr	d6, [r3, #8]
 8008ef0:	f241 23b0 	movw	r3, #4784	; 0x12b0
 8008ef4:	443b      	add	r3, r7
 8008ef6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008efa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008efe:	ed83 7b00 	vstr	d7, [r3]
 8008f02:	e019      	b.n	8008f38 <G_q+0x6580>
  } else {
    t74_re = t74.re / 2.0;
 8008f04:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8008f08:	ed93 6b00 	vldr	d6, [r3]
 8008f0c:	f241 23b8 	movw	r3, #4792	; 0x12b8
 8008f10:	443b      	add	r3, r7
 8008f12:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008f16:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008f1a:	ed83 7b00 	vstr	d7, [r3]
    t74_im = t74.im / 2.0;
 8008f1e:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8008f22:	ed93 6b02 	vldr	d6, [r3, #8]
 8008f26:	f241 23b0 	movw	r3, #4784	; 0x12b0
 8008f2a:	443b      	add	r3, r7
 8008f2c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008f30:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008f34:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t75.im == 0.0) {
 8008f38:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8008f3c:	ed93 7b02 	vldr	d7, [r3, #8]
 8008f40:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f48:	d116      	bne.n	8008f78 <G_q+0x65c0>
    t34_re = t75.re / 2.0;
 8008f4a:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8008f4e:	ed93 6b00 	vldr	d6, [r3]
 8008f52:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008f56:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008f5a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008f5e:	443b      	add	r3, r7
 8008f60:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8008f64:	f04f 0300 	mov.w	r3, #0
 8008f68:	f04f 0400 	mov.w	r4, #0
 8008f6c:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8008f70:	443a      	add	r2, r7
 8008f72:	e9c2 3400 	strd	r3, r4, [r2]
 8008f76:	e039      	b.n	8008fec <G_q+0x6634>
  } else if (t75.re == 0.0) {
 8008f78:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8008f7c:	ed93 7b00 	vldr	d7, [r3]
 8008f80:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f88:	d116      	bne.n	8008fb8 <G_q+0x6600>
    t34_re = 0.0;
 8008f8a:	f04f 0300 	mov.w	r3, #0
 8008f8e:	f04f 0400 	mov.w	r4, #0
 8008f92:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8008f96:	443a      	add	r2, r7
 8008f98:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t75.im / 2.0;
 8008f9c:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8008fa0:	ed93 6b02 	vldr	d6, [r3, #8]
 8008fa4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008fa8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008fac:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008fb0:	443b      	add	r3, r7
 8008fb2:	ed83 7b00 	vstr	d7, [r3]
 8008fb6:	e019      	b.n	8008fec <G_q+0x6634>
  } else {
    t34_re = t75.re / 2.0;
 8008fb8:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8008fbc:	ed93 6b00 	vldr	d6, [r3]
 8008fc0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008fc4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008fc8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008fcc:	443b      	add	r3, r7
 8008fce:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t75.im / 2.0;
 8008fd2:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8008fd6:	ed93 6b02 	vldr	d6, [r3, #8]
 8008fda:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008fde:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008fe2:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008fe6:	443b      	add	r3, r7
 8008fe8:	ed83 7b00 	vstr	d7, [r3]
  }

  t74_re += t34_re;
 8008fec:	f241 23b8 	movw	r3, #4792	; 0x12b8
 8008ff0:	443b      	add	r3, r7
 8008ff2:	f241 22b8 	movw	r2, #4792	; 0x12b8
 8008ff6:	443a      	add	r2, r7
 8008ff8:	ed92 6b00 	vldr	d6, [r2]
 8008ffc:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8009000:	443a      	add	r2, r7
 8009002:	ed92 7b00 	vldr	d7, [r2]
 8009006:	ee36 7b07 	vadd.f64	d7, d6, d7
 800900a:	ed83 7b00 	vstr	d7, [r3]
  t74_im += t34_im;
 800900e:	f241 23b0 	movw	r3, #4784	; 0x12b0
 8009012:	443b      	add	r3, r7
 8009014:	f241 22b0 	movw	r2, #4784	; 0x12b0
 8009018:	443a      	add	r2, r7
 800901a:	ed92 6b00 	vldr	d6, [r2]
 800901e:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8009022:	443a      	add	r2, r7
 8009024:	ed92 7b00 	vldr	d7, [r2]
 8009028:	ee36 7b07 	vadd.f64	d7, d6, d7
 800902c:	ed83 7b00 	vstr	d7, [r3]
  t76_re = (t76.re * 0.0 - t76.im * 0.5) - (t77.re * 0.0 - t77.im * 0.5);
 8009030:	f507 6347 	add.w	r3, r7, #3184	; 0xc70
 8009034:	ed93 7b00 	vldr	d7, [r3]
 8009038:	ed9f 6b75 	vldr	d6, [pc, #468]	; 8009210 <G_q+0x6858>
 800903c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8009040:	f507 6347 	add.w	r3, r7, #3184	; 0xc70
 8009044:	ed93 7b02 	vldr	d7, [r3, #8]
 8009048:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800904c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009050:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009054:	f507 6348 	add.w	r3, r7, #3200	; 0xc80
 8009058:	ed93 7b00 	vldr	d7, [r3]
 800905c:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8009210 <G_q+0x6858>
 8009060:	ee27 5b05 	vmul.f64	d5, d7, d5
 8009064:	f507 6348 	add.w	r3, r7, #3200	; 0xc80
 8009068:	ed93 7b02 	vldr	d7, [r3, #8]
 800906c:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8009070:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009074:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009078:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800907c:	443b      	add	r3, r7
 800907e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009082:	ed83 7b00 	vstr	d7, [r3]
  t3_im = (t76.re * 0.5 + t76.im * 0.0) - (t77.re * 0.5 + t77.im * 0.0);
 8009086:	f507 6347 	add.w	r3, r7, #3184	; 0xc70
 800908a:	ed93 7b00 	vldr	d7, [r3]
 800908e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8009092:	ee27 6b06 	vmul.f64	d6, d7, d6
 8009096:	f507 6347 	add.w	r3, r7, #3184	; 0xc70
 800909a:	ed93 7b02 	vldr	d7, [r3, #8]
 800909e:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 8009210 <G_q+0x6858>
 80090a2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80090a6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80090aa:	f507 6348 	add.w	r3, r7, #3200	; 0xc80
 80090ae:	ed93 7b00 	vldr	d7, [r3]
 80090b2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80090b6:	ee27 5b05 	vmul.f64	d5, d7, d5
 80090ba:	f507 6348 	add.w	r3, r7, #3200	; 0xc80
 80090be:	ed93 7b02 	vldr	d7, [r3, #8]
 80090c2:	ed9f 4b53 	vldr	d4, [pc, #332]	; 8009210 <G_q+0x6858>
 80090c6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80090ca:	ee35 7b07 	vadd.f64	d7, d5, d7
 80090ce:	ee36 7b47 	vsub.f64	d7, d6, d7
 80090d2:	f241 3310 	movw	r3, #4880	; 0x1310
 80090d6:	443b      	add	r3, r7
 80090d8:	ed83 7b00 	vstr	d7, [r3]
  if (t62.im == 0.0) {
 80090dc:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80090e0:	ed93 7b02 	vldr	d7, [r3, #8]
 80090e4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80090e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090ec:	d115      	bne.n	800911a <G_q+0x6762>
    t16_re = t62.re / 2.0;
 80090ee:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80090f2:	ed93 6b00 	vldr	d6, [r3]
 80090f6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80090fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80090fe:	f241 3368 	movw	r3, #4968	; 0x1368
 8009102:	443b      	add	r3, r7
 8009104:	ed83 7b00 	vstr	d7, [r3]
    t16_im = 0.0;
 8009108:	f04f 0300 	mov.w	r3, #0
 800910c:	f04f 0400 	mov.w	r4, #0
 8009110:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8009114:	e9c2 3400 	strd	r3, r4, [r2]
 8009118:	e037      	b.n	800918a <G_q+0x67d2>
  } else if (t62.re == 0.0) {
 800911a:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 800911e:	ed93 7b00 	vldr	d7, [r3]
 8009122:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800912a:	d115      	bne.n	8009158 <G_q+0x67a0>
    t16_re = 0.0;
 800912c:	f04f 0300 	mov.w	r3, #0
 8009130:	f04f 0400 	mov.w	r4, #0
 8009134:	f241 3268 	movw	r2, #4968	; 0x1368
 8009138:	443a      	add	r2, r7
 800913a:	e9c2 3400 	strd	r3, r4, [r2]
    t16_im = t62.im / 2.0;
 800913e:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8009142:	ed93 6b02 	vldr	d6, [r3, #8]
 8009146:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800914a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800914e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8009152:	ed83 7b00 	vstr	d7, [r3]
 8009156:	e018      	b.n	800918a <G_q+0x67d2>
  } else {
    t16_re = t62.re / 2.0;
 8009158:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 800915c:	ed93 6b00 	vldr	d6, [r3]
 8009160:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009164:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009168:	f241 3368 	movw	r3, #4968	; 0x1368
 800916c:	443b      	add	r3, r7
 800916e:	ed83 7b00 	vstr	d7, [r3]
    t16_im = t62.im / 2.0;
 8009172:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8009176:	ed93 6b02 	vldr	d6, [r3, #8]
 800917a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800917e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009182:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8009186:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t63.im == 0.0) {
 800918a:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 800918e:	ed93 7b02 	vldr	d7, [r3, #8]
 8009192:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800919a:	d116      	bne.n	80091ca <G_q+0x6812>
    t34_re = t63.re / 2.0;
 800919c:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 80091a0:	ed93 6b00 	vldr	d6, [r3]
 80091a4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80091a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80091ac:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80091b0:	443b      	add	r3, r7
 80091b2:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 80091b6:	f04f 0300 	mov.w	r3, #0
 80091ba:	f04f 0400 	mov.w	r4, #0
 80091be:	f241 32b0 	movw	r2, #5040	; 0x13b0
 80091c2:	443a      	add	r2, r7
 80091c4:	e9c2 3400 	strd	r3, r4, [r2]
 80091c8:	e044      	b.n	8009254 <G_q+0x689c>
  } else if (t63.re == 0.0) {
 80091ca:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 80091ce:	ed93 7b00 	vldr	d7, [r3]
 80091d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80091d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091da:	d121      	bne.n	8009220 <G_q+0x6868>
    t34_re = 0.0;
 80091dc:	f04f 0300 	mov.w	r3, #0
 80091e0:	f04f 0400 	mov.w	r4, #0
 80091e4:	f241 32b8 	movw	r2, #5048	; 0x13b8
 80091e8:	443a      	add	r2, r7
 80091ea:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t63.im / 2.0;
 80091ee:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 80091f2:	ed93 6b02 	vldr	d6, [r3, #8]
 80091f6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80091fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80091fe:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8009202:	443b      	add	r3, r7
 8009204:	ed83 7b00 	vstr	d7, [r3]
 8009208:	e024      	b.n	8009254 <G_q+0x689c>
 800920a:	bf00      	nop
 800920c:	f3af 8000 	nop.w
	...
 8009218:	33145c07 	.word	0x33145c07
 800921c:	3c81a626 	.word	0x3c81a626
  } else {
    t34_re = t63.re / 2.0;
 8009220:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8009224:	ed93 6b00 	vldr	d6, [r3]
 8009228:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800922c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009230:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009234:	443b      	add	r3, r7
 8009236:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t63.im / 2.0;
 800923a:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 800923e:	ed93 6b02 	vldr	d6, [r3, #8]
 8009242:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009246:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800924a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800924e:	443b      	add	r3, r7
 8009250:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_re = (t64.re * 0.0 - t64.im * 3.061616997868383E-17) - (t65.re * 0.0 -
 8009254:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8009258:	ed93 7b00 	vldr	d7, [r3]
 800925c:	ed1f 6b14 	vldr	d6, [pc, #-80]	; 8009210 <G_q+0x6858>
 8009260:	ee27 6b06 	vmul.f64	d6, d7, d6
 8009264:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8009268:	ed93 7b02 	vldr	d7, [r3, #8]
 800926c:	ed1f 5b16 	vldr	d5, [pc, #-88]	; 8009218 <G_q+0x6860>
 8009270:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009274:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009278:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 800927c:	ed93 7b00 	vldr	d7, [r3]
 8009280:	ed1f 5b1d 	vldr	d5, [pc, #-116]	; 8009210 <G_q+0x6858>
 8009284:	ee27 5b05 	vmul.f64	d5, d7, d5
    t65.im * 3.061616997868383E-17);
 8009288:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 800928c:	ed93 7b02 	vldr	d7, [r3, #8]
 8009290:	ed1f 4b1f 	vldr	d4, [pc, #-124]	; 8009218 <G_q+0x6860>
 8009294:	ee27 7b04 	vmul.f64	d7, d7, d4
  t20_re = (t64.re * 0.0 - t64.im * 3.061616997868383E-17) - (t65.re * 0.0 -
 8009298:	ee35 7b47 	vsub.f64	d7, d5, d7
 800929c:	ee36 7b47 	vsub.f64	d7, d6, d7
 80092a0:	f241 3348 	movw	r3, #4936	; 0x1348
 80092a4:	443b      	add	r3, r7
 80092a6:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t64.re * 3.061616997868383E-17 + t64.im * 0.0) - (t65.re *
 80092aa:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 80092ae:	ed93 7b00 	vldr	d7, [r3]
 80092b2:	ed1f 6b27 	vldr	d6, [pc, #-156]	; 8009218 <G_q+0x6860>
 80092b6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80092ba:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 80092be:	ed93 7b02 	vldr	d7, [r3, #8]
 80092c2:	ed1f 5b2d 	vldr	d5, [pc, #-180]	; 8009210 <G_q+0x6858>
 80092c6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80092ca:	ee36 6b07 	vadd.f64	d6, d6, d7
 80092ce:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 80092d2:	ed93 7b00 	vldr	d7, [r3]
 80092d6:	ed1f 5b30 	vldr	d5, [pc, #-192]	; 8009218 <G_q+0x6860>
 80092da:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t65.im * 0.0);
 80092de:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 80092e2:	ed93 7b02 	vldr	d7, [r3, #8]
 80092e6:	ed1f 4b36 	vldr	d4, [pc, #-216]	; 8009210 <G_q+0x6858>
 80092ea:	ee27 7b04 	vmul.f64	d7, d7, d4
 80092ee:	ee35 7b07 	vadd.f64	d7, d5, d7
  t20_im = (t64.re * 3.061616997868383E-17 + t64.im * 0.0) - (t65.re *
 80092f2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80092f6:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80092fa:	ed83 7b00 	vstr	d7, [r3]
  t16_re += t34_re;
 80092fe:	f241 3368 	movw	r3, #4968	; 0x1368
 8009302:	443b      	add	r3, r7
 8009304:	ed93 6b00 	vldr	d6, [r3]
 8009308:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800930c:	443b      	add	r3, r7
 800930e:	ed93 7b00 	vldr	d7, [r3]
 8009312:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009316:	f241 3368 	movw	r3, #4968	; 0x1368
 800931a:	443b      	add	r3, r7
 800931c:	ed83 7b00 	vstr	d7, [r3]
  t16_im += t34_im;
 8009320:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8009324:	ed93 6b00 	vldr	d6, [r3]
 8009328:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800932c:	443b      	add	r3, r7
 800932e:	ed93 7b00 	vldr	d7, [r3]
 8009332:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009336:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800933a:	ed83 7b00 	vstr	d7, [r3]
  t34_re = t68.re * 3.061616997868383E-17 + t69.re * 3.061616997868383E-17;
 800933e:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8009342:	ed93 7b00 	vldr	d7, [r3]
 8009346:	ed1f 6b4c 	vldr	d6, [pc, #-304]	; 8009218 <G_q+0x6860>
 800934a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800934e:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8009352:	ed93 7b00 	vldr	d7, [r3]
 8009356:	ed1f 5b50 	vldr	d5, [pc, #-320]	; 8009218 <G_q+0x6860>
 800935a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800935e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009362:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009366:	443b      	add	r3, r7
 8009368:	ed83 7b00 	vstr	d7, [r3]
  t34_im = t68.im * 3.061616997868383E-17 + t69.im * 3.061616997868383E-17;
 800936c:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8009370:	ed93 7b02 	vldr	d7, [r3, #8]
 8009374:	ed1f 6b58 	vldr	d6, [pc, #-352]	; 8009218 <G_q+0x6860>
 8009378:	ee27 6b06 	vmul.f64	d6, d7, d6
 800937c:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8009380:	ed93 7b02 	vldr	d7, [r3, #8]
 8009384:	ed1f 5b5c 	vldr	d5, [pc, #-368]	; 8009218 <G_q+0x6860>
 8009388:	ee27 7b05 	vmul.f64	d7, d7, d5
 800938c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009390:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8009394:	443b      	add	r3, r7
 8009396:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t66.re * 0.0 - t66.im * 0.5) - (t67.re * 0.0 - t67.im * 0.5);
 800939a:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 800939e:	ed93 7b00 	vldr	d7, [r3]
 80093a2:	ed1f 6b65 	vldr	d6, [pc, #-404]	; 8009210 <G_q+0x6858>
 80093a6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80093aa:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80093ae:	ed93 7b02 	vldr	d7, [r3, #8]
 80093b2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80093b6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80093ba:	ee36 6b47 	vsub.f64	d6, d6, d7
 80093be:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 80093c2:	ed93 7b00 	vldr	d7, [r3]
 80093c6:	ed1f 5b6e 	vldr	d5, [pc, #-440]	; 8009210 <G_q+0x6858>
 80093ca:	ee27 5b05 	vmul.f64	d5, d7, d5
 80093ce:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 80093d2:	ed93 7b02 	vldr	d7, [r3, #8]
 80093d6:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80093da:	ee27 7b04 	vmul.f64	d7, d7, d4
 80093de:	ee35 7b47 	vsub.f64	d7, d5, d7
 80093e2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80093e6:	f241 3378 	movw	r3, #4984	; 0x1378
 80093ea:	443b      	add	r3, r7
 80093ec:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t66.re * 0.5 + t66.im * 0.0) - (t67.re * 0.5 + t67.im * 0.0);
 80093f0:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80093f4:	ed93 7b00 	vldr	d7, [r3]
 80093f8:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80093fc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8009400:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8009404:	ed93 7b02 	vldr	d7, [r3, #8]
 8009408:	ed1f 5b7f 	vldr	d5, [pc, #-508]	; 8009210 <G_q+0x6858>
 800940c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009410:	ee36 6b07 	vadd.f64	d6, d6, d7
 8009414:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8009418:	ed93 7b00 	vldr	d7, [r3]
 800941c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009420:	ee27 5b05 	vmul.f64	d5, d7, d5
 8009424:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8009428:	ed93 7b02 	vldr	d7, [r3, #8]
 800942c:	ed1f 4b88 	vldr	d4, [pc, #-544]	; 8009210 <G_q+0x6858>
 8009430:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009434:	ee35 7b07 	vadd.f64	d7, d5, d7
 8009438:	ee36 7b47 	vsub.f64	d7, d6, d7
 800943c:	f241 3370 	movw	r3, #4976	; 0x1370
 8009440:	443b      	add	r3, r7
 8009442:	ed83 7b00 	vstr	d7, [r3]
  t23_re = t58.re * 3.061616997868383E-17 + t59.re * 3.061616997868383E-17;
 8009446:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800944a:	ed93 7b00 	vldr	d7, [r3]
 800944e:	ed1f 6b8e 	vldr	d6, [pc, #-568]	; 8009218 <G_q+0x6860>
 8009452:	ee27 6b06 	vmul.f64	d6, d7, d6
 8009456:	4bca      	ldr	r3, [pc, #808]	; (8009780 <G_q+0x6dc8>)
 8009458:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800945c:	443a      	add	r2, r7
 800945e:	4413      	add	r3, r2
 8009460:	ed93 7b00 	vldr	d7, [r3]
 8009464:	ed9f 5bc0 	vldr	d5, [pc, #768]	; 8009768 <G_q+0x6db0>
 8009468:	ee27 7b05 	vmul.f64	d7, d7, d5
 800946c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009470:	f241 3330 	movw	r3, #4912	; 0x1330
 8009474:	443b      	add	r3, r7
 8009476:	ed83 7b00 	vstr	d7, [r3]
  t58_im = t58.im * 3.061616997868383E-17 + t59.im * 3.061616997868383E-17;
 800947a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800947e:	ed93 7b02 	vldr	d7, [r3, #8]
 8009482:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8009768 <G_q+0x6db0>
 8009486:	ee27 6b06 	vmul.f64	d6, d7, d6
 800948a:	4bbd      	ldr	r3, [pc, #756]	; (8009780 <G_q+0x6dc8>)
 800948c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8009490:	443a      	add	r2, r7
 8009492:	4413      	add	r3, r2
 8009494:	ed93 7b02 	vldr	d7, [r3, #8]
 8009498:	ed9f 5bb3 	vldr	d5, [pc, #716]	; 8009768 <G_q+0x6db0>
 800949c:	ee27 7b05 	vmul.f64	d7, d7, d5
 80094a0:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 80094a4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80094a8:	ed83 7b00 	vstr	d7, [r3]
  t60_re = (((t60.re * 0.0 - t60.im * 6.123233995736766E-17) - (t61.re * 0.0 -
 80094ac:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 80094b0:	ed93 7b00 	vldr	d7, [r3]
 80094b4:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8009770 <G_q+0x6db8>
 80094b8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80094bc:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 80094c0:	ed93 7b02 	vldr	d7, [r3, #8]
 80094c4:	ed9f 5bac 	vldr	d5, [pc, #688]	; 8009778 <G_q+0x6dc0>
 80094c8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80094cc:	ee36 6b47 	vsub.f64	d6, d6, d7
 80094d0:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80094d4:	ed93 7b00 	vldr	d7, [r3]
 80094d8:	ed9f 5ba5 	vldr	d5, [pc, #660]	; 8009770 <G_q+0x6db8>
 80094dc:	ee27 5b05 	vmul.f64	d5, d7, d5
              t61.im * 6.123233995736766E-17)) - (t20_re * t16_re - t20_im *
 80094e0:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80094e4:	ed93 7b02 	vldr	d7, [r3, #8]
 80094e8:	ed9f 4ba3 	vldr	d4, [pc, #652]	; 8009778 <G_q+0x6dc0>
 80094ec:	ee27 7b04 	vmul.f64	d7, d7, d4
  t60_re = (((t60.re * 0.0 - t60.im * 6.123233995736766E-17) - (t61.re * 0.0 -
 80094f0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80094f4:	ee36 6b47 	vsub.f64	d6, d6, d7
              t61.im * 6.123233995736766E-17)) - (t20_re * t16_re - t20_im *
 80094f8:	f241 3348 	movw	r3, #4936	; 0x1348
 80094fc:	443b      	add	r3, r7
 80094fe:	ed93 5b00 	vldr	d5, [r3]
 8009502:	f241 3368 	movw	r3, #4968	; 0x1368
 8009506:	443b      	add	r3, r7
 8009508:	ed93 7b00 	vldr	d7, [r3]
 800950c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8009510:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8009514:	ed93 4b00 	vldr	d4, [r3]
 8009518:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800951c:	ed93 7b00 	vldr	d7, [r3]
 8009520:	ee24 7b07 	vmul.f64	d7, d4, d7
 8009524:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009528:	ee36 6b47 	vsub.f64	d6, d6, d7
             t16_im)) + (t34_re * t13_re - t34_im * t13_im);
 800952c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009530:	443b      	add	r3, r7
 8009532:	ed93 5b00 	vldr	d5, [r3]
 8009536:	f241 3378 	movw	r3, #4984	; 0x1378
 800953a:	443b      	add	r3, r7
 800953c:	ed93 7b00 	vldr	d7, [r3]
 8009540:	ee25 5b07 	vmul.f64	d5, d5, d7
 8009544:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8009548:	443b      	add	r3, r7
 800954a:	ed93 4b00 	vldr	d4, [r3]
 800954e:	f241 3370 	movw	r3, #4976	; 0x1370
 8009552:	443b      	add	r3, r7
 8009554:	ed93 7b00 	vldr	d7, [r3]
 8009558:	ee24 7b07 	vmul.f64	d7, d4, d7
 800955c:	ee35 7b47 	vsub.f64	d7, d5, d7
  t60_re = (((t60.re * 0.0 - t60.im * 6.123233995736766E-17) - (t61.re * 0.0 -
 8009560:	f241 2350 	movw	r3, #4688	; 0x1250
 8009564:	443b      	add	r3, r7
 8009566:	ee36 7b07 	vadd.f64	d7, d6, d7
 800956a:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (((t60.re * 6.123233995736766E-17 + t60.im * 0.0) - (t61.re *
 800956e:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 8009572:	ed93 7b00 	vldr	d7, [r3]
 8009576:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8009778 <G_q+0x6dc0>
 800957a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800957e:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 8009582:	ed93 7b02 	vldr	d7, [r3, #8]
 8009586:	ed9f 5b7a 	vldr	d5, [pc, #488]	; 8009770 <G_q+0x6db8>
 800958a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800958e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8009592:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8009596:	ed93 7b00 	vldr	d7, [r3]
 800959a:	ed9f 5b77 	vldr	d5, [pc, #476]	; 8009778 <G_q+0x6dc0>
 800959e:	ee27 5b05 	vmul.f64	d5, d7, d5
              6.123233995736766E-17 + t61.im * 0.0)) - (t20_re * t16_im + t20_im
 80095a2:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80095a6:	ed93 7b02 	vldr	d7, [r3, #8]
 80095aa:	ed9f 4b71 	vldr	d4, [pc, #452]	; 8009770 <G_q+0x6db8>
 80095ae:	ee27 7b04 	vmul.f64	d7, d7, d4
 80095b2:	ee35 7b07 	vadd.f64	d7, d5, d7
  t20_im = (((t60.re * 6.123233995736766E-17 + t60.im * 0.0) - (t61.re *
 80095b6:	ee36 6b47 	vsub.f64	d6, d6, d7
              6.123233995736766E-17 + t61.im * 0.0)) - (t20_re * t16_im + t20_im
 80095ba:	f241 3348 	movw	r3, #4936	; 0x1348
 80095be:	443b      	add	r3, r7
 80095c0:	ed93 5b00 	vldr	d5, [r3]
 80095c4:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80095c8:	ed93 7b00 	vldr	d7, [r3]
 80095cc:	ee25 5b07 	vmul.f64	d5, d5, d7
             * t16_re)) + (t34_re * t13_im + t34_im * t13_re);
 80095d0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80095d4:	ed93 4b00 	vldr	d4, [r3]
 80095d8:	f241 3368 	movw	r3, #4968	; 0x1368
 80095dc:	443b      	add	r3, r7
 80095de:	ed93 7b00 	vldr	d7, [r3]
 80095e2:	ee24 7b07 	vmul.f64	d7, d4, d7
              6.123233995736766E-17 + t61.im * 0.0)) - (t20_re * t16_im + t20_im
 80095e6:	ee35 7b07 	vadd.f64	d7, d5, d7
 80095ea:	ee36 6b47 	vsub.f64	d6, d6, d7
             * t16_re)) + (t34_re * t13_im + t34_im * t13_re);
 80095ee:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80095f2:	443b      	add	r3, r7
 80095f4:	ed93 5b00 	vldr	d5, [r3]
 80095f8:	f241 3370 	movw	r3, #4976	; 0x1370
 80095fc:	443b      	add	r3, r7
 80095fe:	ed93 7b00 	vldr	d7, [r3]
 8009602:	ee25 5b07 	vmul.f64	d5, d5, d7
 8009606:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800960a:	443b      	add	r3, r7
 800960c:	ed93 4b00 	vldr	d4, [r3]
 8009610:	f241 3378 	movw	r3, #4984	; 0x1378
 8009614:	443b      	add	r3, r7
 8009616:	ed93 7b00 	vldr	d7, [r3]
 800961a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800961e:	ee35 7b07 	vadd.f64	d7, d5, d7
  t20_im = (((t60.re * 6.123233995736766E-17 + t60.im * 0.0) - (t61.re *
 8009622:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009626:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800962a:	ed83 7b00 	vstr	d7, [r3]
  if (t78.im == 0.0) {
 800962e:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8009632:	ed93 7b02 	vldr	d7, [r3, #8]
 8009636:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800963a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800963e:	d116      	bne.n	800966e <G_q+0x6cb6>
    t16_re = t78.re / 2.0;
 8009640:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8009644:	ed93 6b00 	vldr	d6, [r3]
 8009648:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800964c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009650:	f241 3368 	movw	r3, #4968	; 0x1368
 8009654:	443b      	add	r3, r7
 8009656:	ed83 7b00 	vstr	d7, [r3]
    t12_re = 0.0;
 800965a:	f04f 0300 	mov.w	r3, #0
 800965e:	f04f 0400 	mov.w	r4, #0
 8009662:	f241 3288 	movw	r2, #5000	; 0x1388
 8009666:	443a      	add	r2, r7
 8009668:	e9c2 3400 	strd	r3, r4, [r2]
 800966c:	e039      	b.n	80096e2 <G_q+0x6d2a>
  } else if (t78.re == 0.0) {
 800966e:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8009672:	ed93 7b00 	vldr	d7, [r3]
 8009676:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800967a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800967e:	d116      	bne.n	80096ae <G_q+0x6cf6>
    t16_re = 0.0;
 8009680:	f04f 0300 	mov.w	r3, #0
 8009684:	f04f 0400 	mov.w	r4, #0
 8009688:	f241 3268 	movw	r2, #4968	; 0x1368
 800968c:	443a      	add	r2, r7
 800968e:	e9c2 3400 	strd	r3, r4, [r2]
    t12_re = t78.im / 2.0;
 8009692:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8009696:	ed93 6b02 	vldr	d6, [r3, #8]
 800969a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800969e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80096a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80096a6:	443b      	add	r3, r7
 80096a8:	ed83 7b00 	vstr	d7, [r3]
 80096ac:	e019      	b.n	80096e2 <G_q+0x6d2a>
  } else {
    t16_re = t78.re / 2.0;
 80096ae:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 80096b2:	ed93 6b00 	vldr	d6, [r3]
 80096b6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80096ba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80096be:	f241 3368 	movw	r3, #4968	; 0x1368
 80096c2:	443b      	add	r3, r7
 80096c4:	ed83 7b00 	vstr	d7, [r3]
    t12_re = t78.im / 2.0;
 80096c8:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 80096cc:	ed93 6b02 	vldr	d6, [r3, #8]
 80096d0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80096d4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80096d8:	f241 3388 	movw	r3, #5000	; 0x1388
 80096dc:	443b      	add	r3, r7
 80096de:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t79.im == 0.0) {
 80096e2:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 80096e6:	ed93 7b02 	vldr	d7, [r3, #8]
 80096ea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80096ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096f2:	d116      	bne.n	8009722 <G_q+0x6d6a>
    t34_re = t79.re / 2.0;
 80096f4:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 80096f8:	ed93 6b00 	vldr	d6, [r3]
 80096fc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009700:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009704:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009708:	443b      	add	r3, r7
 800970a:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800970e:	f04f 0300 	mov.w	r3, #0
 8009712:	f04f 0400 	mov.w	r4, #0
 8009716:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800971a:	443a      	add	r2, r7
 800971c:	e9c2 3400 	strd	r3, r4, [r2]
 8009720:	e04a      	b.n	80097b8 <G_q+0x6e00>
  } else if (t79.re == 0.0) {
 8009722:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 8009726:	ed93 7b00 	vldr	d7, [r3]
 800972a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800972e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009732:	d127      	bne.n	8009784 <G_q+0x6dcc>
    t34_re = 0.0;
 8009734:	f04f 0300 	mov.w	r3, #0
 8009738:	f04f 0400 	mov.w	r4, #0
 800973c:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8009740:	443a      	add	r2, r7
 8009742:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t79.im / 2.0;
 8009746:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 800974a:	ed93 6b02 	vldr	d6, [r3, #8]
 800974e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009752:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009756:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800975a:	443b      	add	r3, r7
 800975c:	ed83 7b00 	vstr	d7, [r3]
 8009760:	e02a      	b.n	80097b8 <G_q+0x6e00>
 8009762:	bf00      	nop
 8009764:	f3af 8000 	nop.w
 8009768:	33145c07 	.word	0x33145c07
 800976c:	3c81a626 	.word	0x3c81a626
	...
 8009778:	33145c07 	.word	0x33145c07
 800977c:	3c91a626 	.word	0x3c91a626
 8009780:	ffffedb0 	.word	0xffffedb0
  } else {
    t34_re = t79.re / 2.0;
 8009784:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 8009788:	ed93 6b00 	vldr	d6, [r3]
 800978c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009790:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009794:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009798:	443b      	add	r3, r7
 800979a:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t79.im / 2.0;
 800979e:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 80097a2:	ed93 6b02 	vldr	d6, [r3, #8]
 80097a6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80097aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80097ae:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80097b2:	443b      	add	r3, r7
 80097b4:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t80.im == 0.0) {
 80097b8:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 80097bc:	ed93 7b02 	vldr	d7, [r3, #8]
 80097c0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80097c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097c8:	d115      	bne.n	80097f6 <G_q+0x6e3e>
    t16_im = t80.re / 2.0;
 80097ca:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 80097ce:	ed93 6b00 	vldr	d6, [r3]
 80097d2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80097d6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80097da:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80097de:	ed83 7b00 	vstr	d7, [r3]
    t20_re = 0.0;
 80097e2:	f04f 0300 	mov.w	r3, #0
 80097e6:	f04f 0400 	mov.w	r4, #0
 80097ea:	f241 3248 	movw	r2, #4936	; 0x1348
 80097ee:	443a      	add	r2, r7
 80097f0:	e9c2 3400 	strd	r3, r4, [r2]
 80097f4:	e037      	b.n	8009866 <G_q+0x6eae>
  } else if (t80.re == 0.0) {
 80097f6:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 80097fa:	ed93 7b00 	vldr	d7, [r3]
 80097fe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009806:	d115      	bne.n	8009834 <G_q+0x6e7c>
    t16_im = 0.0;
 8009808:	f04f 0300 	mov.w	r3, #0
 800980c:	f04f 0400 	mov.w	r4, #0
 8009810:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8009814:	e9c2 3400 	strd	r3, r4, [r2]
    t20_re = t80.im / 2.0;
 8009818:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800981c:	ed93 6b02 	vldr	d6, [r3, #8]
 8009820:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009824:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009828:	f241 3348 	movw	r3, #4936	; 0x1348
 800982c:	443b      	add	r3, r7
 800982e:	ed83 7b00 	vstr	d7, [r3]
 8009832:	e018      	b.n	8009866 <G_q+0x6eae>
  } else {
    t16_im = t80.re / 2.0;
 8009834:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8009838:	ed93 6b00 	vldr	d6, [r3]
 800983c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009840:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009844:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8009848:	ed83 7b00 	vstr	d7, [r3]
    t20_re = t80.im / 2.0;
 800984c:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8009850:	ed93 6b02 	vldr	d6, [r3, #8]
 8009854:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009858:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800985c:	f241 3348 	movw	r3, #4936	; 0x1348
 8009860:	443b      	add	r3, r7
 8009862:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t81.im == 0.0) {
 8009866:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800986a:	ed93 7b02 	vldr	d7, [r3, #8]
 800986e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009876:	d116      	bne.n	80098a6 <G_q+0x6eee>
    t13_re = t81.re / 2.0;
 8009878:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800987c:	ed93 6b00 	vldr	d6, [r3]
 8009880:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009884:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009888:	f241 3378 	movw	r3, #4984	; 0x1378
 800988c:	443b      	add	r3, r7
 800988e:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 8009892:	f04f 0300 	mov.w	r3, #0
 8009896:	f04f 0400 	mov.w	r4, #0
 800989a:	f241 3270 	movw	r2, #4976	; 0x1370
 800989e:	443a      	add	r2, r7
 80098a0:	e9c2 3400 	strd	r3, r4, [r2]
 80098a4:	e039      	b.n	800991a <G_q+0x6f62>
  } else if (t81.re == 0.0) {
 80098a6:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80098aa:	ed93 7b00 	vldr	d7, [r3]
 80098ae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80098b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098b6:	d116      	bne.n	80098e6 <G_q+0x6f2e>
    t13_re = 0.0;
 80098b8:	f04f 0300 	mov.w	r3, #0
 80098bc:	f04f 0400 	mov.w	r4, #0
 80098c0:	f241 3278 	movw	r2, #4984	; 0x1378
 80098c4:	443a      	add	r2, r7
 80098c6:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t81.im / 2.0;
 80098ca:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80098ce:	ed93 6b02 	vldr	d6, [r3, #8]
 80098d2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80098d6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80098da:	f241 3370 	movw	r3, #4976	; 0x1370
 80098de:	443b      	add	r3, r7
 80098e0:	ed83 7b00 	vstr	d7, [r3]
 80098e4:	e019      	b.n	800991a <G_q+0x6f62>
  } else {
    t13_re = t81.re / 2.0;
 80098e6:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80098ea:	ed93 6b00 	vldr	d6, [r3]
 80098ee:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80098f2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80098f6:	f241 3378 	movw	r3, #4984	; 0x1378
 80098fa:	443b      	add	r3, r7
 80098fc:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t81.im / 2.0;
 8009900:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8009904:	ed93 6b02 	vldr	d6, [r3, #8]
 8009908:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800990c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009910:	f241 3370 	movw	r3, #4976	; 0x1370
 8009914:	443b      	add	r3, r7
 8009916:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re += t34_re;
 800991a:	f241 3368 	movw	r3, #4968	; 0x1368
 800991e:	443b      	add	r3, r7
 8009920:	ed93 6b00 	vldr	d6, [r3]
 8009924:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009928:	443b      	add	r3, r7
 800992a:	ed93 7b00 	vldr	d7, [r3]
 800992e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009932:	f241 3368 	movw	r3, #4968	; 0x1368
 8009936:	443b      	add	r3, r7
 8009938:	ed83 7b00 	vstr	d7, [r3]
  t12_re += t34_im;
 800993c:	f241 3388 	movw	r3, #5000	; 0x1388
 8009940:	443b      	add	r3, r7
 8009942:	ed93 6b00 	vldr	d6, [r3]
 8009946:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800994a:	443b      	add	r3, r7
 800994c:	ed93 7b00 	vldr	d7, [r3]
 8009950:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009954:	f241 3388 	movw	r3, #5000	; 0x1388
 8009958:	443b      	add	r3, r7
 800995a:	ed83 7b00 	vstr	d7, [r3]
  t16_im += t13_re;
 800995e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8009962:	ed93 6b00 	vldr	d6, [r3]
 8009966:	f241 3378 	movw	r3, #4984	; 0x1378
 800996a:	443b      	add	r3, r7
 800996c:	ed93 7b00 	vldr	d7, [r3]
 8009970:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009974:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8009978:	ed83 7b00 	vstr	d7, [r3]
  t20_re += t13_im;
 800997c:	f241 3348 	movw	r3, #4936	; 0x1348
 8009980:	443b      	add	r3, r7
 8009982:	ed93 6b00 	vldr	d6, [r3]
 8009986:	f241 3370 	movw	r3, #4976	; 0x1370
 800998a:	443b      	add	r3, r7
 800998c:	ed93 7b00 	vldr	d7, [r3]
 8009990:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009994:	f241 3348 	movw	r3, #4936	; 0x1348
 8009998:	443b      	add	r3, r7
 800999a:	ed83 7b00 	vstr	d7, [r3]
  t34_re = (t83.re * 0.0 - t83.im * 0.5) - (t82.re * 0.0 - t82.im * 0.5);
 800999e:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 80099a2:	ed93 7b00 	vldr	d7, [r3]
 80099a6:	ed9f 6bec 	vldr	d6, [pc, #944]	; 8009d58 <G_q+0x73a0>
 80099aa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80099ae:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 80099b2:	ed93 7b02 	vldr	d7, [r3, #8]
 80099b6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80099ba:	ee27 7b05 	vmul.f64	d7, d7, d5
 80099be:	ee36 6b47 	vsub.f64	d6, d6, d7
 80099c2:	f507 634b 	add.w	r3, r7, #3248	; 0xcb0
 80099c6:	ed93 7b00 	vldr	d7, [r3]
 80099ca:	ed9f 5be3 	vldr	d5, [pc, #908]	; 8009d58 <G_q+0x73a0>
 80099ce:	ee27 5b05 	vmul.f64	d5, d7, d5
 80099d2:	f507 634b 	add.w	r3, r7, #3248	; 0xcb0
 80099d6:	ed93 7b02 	vldr	d7, [r3, #8]
 80099da:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80099de:	ee27 7b04 	vmul.f64	d7, d7, d4
 80099e2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80099e6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80099ea:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80099ee:	443b      	add	r3, r7
 80099f0:	ed83 7b00 	vstr	d7, [r3]
  t34_im = (t83.re * 0.5 + t83.im * 0.0) - (t82.re * 0.5 + t82.im * 0.0);
 80099f4:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 80099f8:	ed93 7b00 	vldr	d7, [r3]
 80099fc:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8009a00:	ee27 6b06 	vmul.f64	d6, d7, d6
 8009a04:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8009a08:	ed93 7b02 	vldr	d7, [r3, #8]
 8009a0c:	ed9f 5bd2 	vldr	d5, [pc, #840]	; 8009d58 <G_q+0x73a0>
 8009a10:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009a14:	ee36 6b07 	vadd.f64	d6, d6, d7
 8009a18:	f507 634b 	add.w	r3, r7, #3248	; 0xcb0
 8009a1c:	ed93 7b00 	vldr	d7, [r3]
 8009a20:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009a24:	ee27 5b05 	vmul.f64	d5, d7, d5
 8009a28:	f507 634b 	add.w	r3, r7, #3248	; 0xcb0
 8009a2c:	ed93 7b02 	vldr	d7, [r3, #8]
 8009a30:	ed9f 4bc9 	vldr	d4, [pc, #804]	; 8009d58 <G_q+0x73a0>
 8009a34:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009a38:	ee35 7b07 	vadd.f64	d7, d5, d7
 8009a3c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009a40:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8009a44:	443b      	add	r3, r7
 8009a46:	ed83 7b00 	vstr	d7, [r3]
  t12_im = (t85.re * 0.0 - t85.im * 0.5) - (t84.re * 0.0 - t84.im * 0.5);
 8009a4a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8009a4e:	ed93 7b00 	vldr	d7, [r3]
 8009a52:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8009d58 <G_q+0x73a0>
 8009a56:	ee27 6b06 	vmul.f64	d6, d7, d6
 8009a5a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8009a5e:	ed93 7b02 	vldr	d7, [r3, #8]
 8009a62:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009a66:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009a6a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009a6e:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8009a72:	ed93 7b00 	vldr	d7, [r3]
 8009a76:	ed9f 5bb8 	vldr	d5, [pc, #736]	; 8009d58 <G_q+0x73a0>
 8009a7a:	ee27 5b05 	vmul.f64	d5, d7, d5
 8009a7e:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8009a82:	ed93 7b02 	vldr	d7, [r3, #8]
 8009a86:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8009a8a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009a8e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009a92:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009a96:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8009a9a:	ed83 7b00 	vstr	d7, [r3]
  t85_im = (t85.re * 0.5 + t85.im * 0.0) - (t84.re * 0.5 + t84.im * 0.0);
 8009a9e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8009aa2:	ed93 7b00 	vldr	d7, [r3]
 8009aa6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8009aaa:	ee27 6b06 	vmul.f64	d6, d7, d6
 8009aae:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8009ab2:	ed93 7b02 	vldr	d7, [r3, #8]
 8009ab6:	ed9f 5ba8 	vldr	d5, [pc, #672]	; 8009d58 <G_q+0x73a0>
 8009aba:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009abe:	ee36 6b07 	vadd.f64	d6, d6, d7
 8009ac2:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8009ac6:	ed93 7b00 	vldr	d7, [r3]
 8009aca:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009ace:	ee27 5b05 	vmul.f64	d5, d7, d5
 8009ad2:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8009ad6:	ed93 7b02 	vldr	d7, [r3, #8]
 8009ada:	ed9f 4b9f 	vldr	d4, [pc, #636]	; 8009d58 <G_q+0x73a0>
 8009ade:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009ae2:	ee35 7b07 	vadd.f64	d7, d5, d7
 8009ae6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009aea:	f241 3318 	movw	r3, #4888	; 0x1318
 8009aee:	443b      	add	r3, r7
 8009af0:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t16_re * t16_im - t12_re * t20_re) + (t34_re * t12_im - t34_im *
 8009af4:	f241 3368 	movw	r3, #4968	; 0x1368
 8009af8:	443b      	add	r3, r7
 8009afa:	ed93 6b00 	vldr	d6, [r3]
 8009afe:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8009b02:	ed93 7b00 	vldr	d7, [r3]
 8009b06:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009b0a:	f241 3388 	movw	r3, #5000	; 0x1388
 8009b0e:	443b      	add	r3, r7
 8009b10:	ed93 5b00 	vldr	d5, [r3]
 8009b14:	f241 3348 	movw	r3, #4936	; 0x1348
 8009b18:	443b      	add	r3, r7
 8009b1a:	ed93 7b00 	vldr	d7, [r3]
 8009b1e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009b22:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009b26:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009b2a:	443b      	add	r3, r7
 8009b2c:	ed93 5b00 	vldr	d5, [r3]
 8009b30:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8009b34:	ed93 7b00 	vldr	d7, [r3]
 8009b38:	ee25 5b07 	vmul.f64	d5, d5, d7
 8009b3c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8009b40:	443b      	add	r3, r7
 8009b42:	ed93 4b00 	vldr	d4, [r3]
 8009b46:	f241 3318 	movw	r3, #4888	; 0x1318
 8009b4a:	443b      	add	r3, r7
 8009b4c:	ed93 7b00 	vldr	d7, [r3]
 8009b50:	ee24 7b07 	vmul.f64	d7, d4, d7
 8009b54:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009b58:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009b5c:	f241 3370 	movw	r3, #4976	; 0x1370
 8009b60:	443b      	add	r3, r7
 8009b62:	ed83 7b00 	vstr	d7, [r3]
    t85_im);
  t12_re = (t16_re * t20_re + t12_re * t16_im) + (t34_re * t85_im + t34_im *
 8009b66:	f241 3368 	movw	r3, #4968	; 0x1368
 8009b6a:	443b      	add	r3, r7
 8009b6c:	ed93 6b00 	vldr	d6, [r3]
 8009b70:	f241 3348 	movw	r3, #4936	; 0x1348
 8009b74:	443b      	add	r3, r7
 8009b76:	ed93 7b00 	vldr	d7, [r3]
 8009b7a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009b7e:	f241 3388 	movw	r3, #5000	; 0x1388
 8009b82:	443b      	add	r3, r7
 8009b84:	ed93 5b00 	vldr	d5, [r3]
 8009b88:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8009b8c:	ed93 7b00 	vldr	d7, [r3]
 8009b90:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009b94:	ee36 6b07 	vadd.f64	d6, d6, d7
 8009b98:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009b9c:	443b      	add	r3, r7
 8009b9e:	ed93 5b00 	vldr	d5, [r3]
 8009ba2:	f241 3318 	movw	r3, #4888	; 0x1318
 8009ba6:	443b      	add	r3, r7
 8009ba8:	ed93 7b00 	vldr	d7, [r3]
 8009bac:	ee25 5b07 	vmul.f64	d5, d5, d7
 8009bb0:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8009bb4:	443b      	add	r3, r7
 8009bb6:	ed93 4b00 	vldr	d4, [r3]
 8009bba:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8009bbe:	ed93 7b00 	vldr	d7, [r3]
 8009bc2:	ee24 7b07 	vmul.f64	d7, d4, d7
 8009bc6:	ee35 7b07 	vadd.f64	d7, d5, d7
 8009bca:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009bce:	f241 3388 	movw	r3, #5000	; 0x1388
 8009bd2:	443b      	add	r3, r7
 8009bd4:	ed83 7b00 	vstr	d7, [r3]
    t12_im);
  t13_re = (t19_re_tmp - t87.im * 3.061616997868383E-17) - (t86.re * 0.0 -
 8009bd8:	4b65      	ldr	r3, [pc, #404]	; (8009d70 <G_q+0x73b8>)
 8009bda:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8009bde:	443a      	add	r2, r7
 8009be0:	4413      	add	r3, r2
 8009be2:	ed93 7b02 	vldr	d7, [r3, #8]
 8009be6:	ed9f 6b5e 	vldr	d6, [pc, #376]	; 8009d60 <G_q+0x73a8>
 8009bea:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009bee:	f241 2370 	movw	r3, #4720	; 0x1270
 8009bf2:	443b      	add	r3, r7
 8009bf4:	ed93 6b00 	vldr	d6, [r3]
 8009bf8:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009bfc:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8009c00:	ed93 7b00 	vldr	d7, [r3]
 8009c04:	ed9f 5b54 	vldr	d5, [pc, #336]	; 8009d58 <G_q+0x73a0>
 8009c08:	ee27 5b05 	vmul.f64	d5, d7, d5
    t86.im * 3.061616997868383E-17);
 8009c0c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8009c10:	ed93 7b02 	vldr	d7, [r3, #8]
 8009c14:	ed9f 4b52 	vldr	d4, [pc, #328]	; 8009d60 <G_q+0x73a8>
 8009c18:	ee27 7b04 	vmul.f64	d7, d7, d4
  t13_re = (t19_re_tmp - t87.im * 3.061616997868383E-17) - (t86.re * 0.0 -
 8009c1c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009c20:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009c24:	f241 3378 	movw	r3, #4984	; 0x1378
 8009c28:	443b      	add	r3, r7
 8009c2a:	ed83 7b00 	vstr	d7, [r3]
  t34_re = (t87.re * 3.061616997868383E-17 + t19_im_tmp) - (t86.re *
 8009c2e:	4b50      	ldr	r3, [pc, #320]	; (8009d70 <G_q+0x73b8>)
 8009c30:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8009c34:	443a      	add	r2, r7
 8009c36:	4413      	add	r3, r2
 8009c38:	ed93 7b00 	vldr	d7, [r3]
 8009c3c:	ed9f 6b48 	vldr	d6, [pc, #288]	; 8009d60 <G_q+0x73a8>
 8009c40:	ee27 6b06 	vmul.f64	d6, d7, d6
 8009c44:	f241 2368 	movw	r3, #4712	; 0x1268
 8009c48:	443b      	add	r3, r7
 8009c4a:	ed93 7b00 	vldr	d7, [r3]
 8009c4e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8009c52:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8009c56:	ed93 7b00 	vldr	d7, [r3]
 8009c5a:	ed9f 5b41 	vldr	d5, [pc, #260]	; 8009d60 <G_q+0x73a8>
 8009c5e:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t86.im * 0.0);
 8009c62:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8009c66:	ed93 7b02 	vldr	d7, [r3, #8]
 8009c6a:	ed9f 4b3b 	vldr	d4, [pc, #236]	; 8009d58 <G_q+0x73a0>
 8009c6e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009c72:	ee35 7b07 	vadd.f64	d7, d5, d7
  t34_re = (t87.re * 3.061616997868383E-17 + t19_im_tmp) - (t86.re *
 8009c76:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009c7a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009c7e:	443b      	add	r3, r7
 8009c80:	ed83 7b00 	vstr	d7, [r3]
  b_t54_re += t55_re;
 8009c84:	f241 23f0 	movw	r3, #4848	; 0x12f0
 8009c88:	443b      	add	r3, r7
 8009c8a:	ed93 6b00 	vldr	d6, [r3]
 8009c8e:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8009c92:	ed93 7b00 	vldr	d7, [r3]
 8009c96:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009c9a:	f241 23f0 	movw	r3, #4848	; 0x12f0
 8009c9e:	443b      	add	r3, r7
 8009ca0:	ed83 7b00 	vstr	d7, [r3]
  b_t54_im += t55_im;
 8009ca4:	f241 23e8 	movw	r3, #4840	; 0x12e8
 8009ca8:	443b      	add	r3, r7
 8009caa:	ed93 6b00 	vldr	d6, [r3]
 8009cae:	f241 23d8 	movw	r3, #4824	; 0x12d8
 8009cb2:	443b      	add	r3, r7
 8009cb4:	ed93 7b00 	vldr	d7, [r3]
 8009cb8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009cbc:	f241 23e8 	movw	r3, #4840	; 0x12e8
 8009cc0:	443b      	add	r3, r7
 8009cc2:	ed83 7b00 	vstr	d7, [r3]
  t34_im = (((((t56.re * 0.0 - t56.im * 3.749399456654644E-33) - (t57.re * 0.0 -
 8009cc6:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8009cca:	ed93 7b00 	vldr	d7, [r3]
 8009cce:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8009d58 <G_q+0x73a0>
 8009cd2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8009cd6:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8009cda:	ed93 7b02 	vldr	d7, [r3, #8]
 8009cde:	ed9f 5b22 	vldr	d5, [pc, #136]	; 8009d68 <G_q+0x73b0>
 8009ce2:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009ce6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009cea:	f507 633e 	add.w	r3, r7, #3040	; 0xbe0
 8009cee:	ed93 7b00 	vldr	d7, [r3]
 8009cf2:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8009d58 <G_q+0x73a0>
 8009cf6:	ee27 5b05 	vmul.f64	d5, d7, d5
    t57.im * 3.749399456654644E-33)) + (t70_re * t72_re - t70_im * b_t10_re)) -
 8009cfa:	f507 633e 	add.w	r3, r7, #3040	; 0xbe0
 8009cfe:	ed93 7b02 	vldr	d7, [r3, #8]
 8009d02:	ed9f 4b19 	vldr	d4, [pc, #100]	; 8009d68 <G_q+0x73b0>
 8009d06:	ee27 7b04 	vmul.f64	d7, d7, d4
  t34_im = (((((t56.re * 0.0 - t56.im * 3.749399456654644E-33) - (t57.re * 0.0 -
 8009d0a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009d0e:	ee36 6b47 	vsub.f64	d6, d6, d7
    t57.im * 3.749399456654644E-33)) + (t70_re * t72_re - t70_im * b_t10_re)) -
 8009d12:	f241 22d0 	movw	r2, #4816	; 0x12d0
 8009d16:	443a      	add	r2, r7
 8009d18:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8009d1c:	ed92 5b00 	vldr	d5, [r2]
 8009d20:	ed93 7b00 	vldr	d7, [r3]
 8009d24:	ee25 5b07 	vmul.f64	d5, d5, d7
 8009d28:	f241 23c8 	movw	r3, #4808	; 0x12c8
 8009d2c:	443b      	add	r3, r7
 8009d2e:	ed93 4b00 	vldr	d4, [r3]
 8009d32:	f241 3338 	movw	r3, #4920	; 0x1338
 8009d36:	443b      	add	r3, r7
 8009d38:	ed93 7b00 	vldr	d7, [r3]
 8009d3c:	ee24 7b07 	vmul.f64	d7, d4, d7
 8009d40:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009d44:	ee36 6b07 	vadd.f64	d6, d6, d7
             (t74_re * t76_re - t74_im * t3_im)) + (t23_re * t60_re - t58_im *
 8009d48:	f241 22b8 	movw	r2, #4792	; 0x12b8
 8009d4c:	443a      	add	r2, r7
 8009d4e:	f241 23a8 	movw	r3, #4776	; 0x12a8
 8009d52:	443b      	add	r3, r7
 8009d54:	e00e      	b.n	8009d74 <G_q+0x73bc>
 8009d56:	bf00      	nop
	...
 8009d60:	33145c07 	.word	0x33145c07
 8009d64:	3c81a626 	.word	0x3c81a626
 8009d68:	858a5d48 	.word	0x858a5d48
 8009d6c:	393377ce 	.word	0x393377ce
 8009d70:	ffffedd0 	.word	0xffffedd0
 8009d74:	ed92 5b00 	vldr	d5, [r2]
 8009d78:	ed93 7b00 	vldr	d7, [r3]
 8009d7c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8009d80:	f241 23b0 	movw	r3, #4784	; 0x12b0
 8009d84:	443b      	add	r3, r7
 8009d86:	ed93 4b00 	vldr	d4, [r3]
 8009d8a:	f241 3310 	movw	r3, #4880	; 0x1310
 8009d8e:	443b      	add	r3, r7
 8009d90:	ed93 7b00 	vldr	d7, [r3]
 8009d94:	ee24 7b07 	vmul.f64	d7, d4, d7
 8009d98:	ee35 7b47 	vsub.f64	d7, d5, d7
    t57.im * 3.749399456654644E-33)) + (t70_re * t72_re - t70_im * b_t10_re)) -
 8009d9c:	ee36 6b47 	vsub.f64	d6, d6, d7
             (t74_re * t76_re - t74_im * t3_im)) + (t23_re * t60_re - t58_im *
 8009da0:	f241 2350 	movw	r3, #4688	; 0x1250
 8009da4:	443b      	add	r3, r7
 8009da6:	f241 3230 	movw	r2, #4912	; 0x1330
 8009daa:	443a      	add	r2, r7
 8009dac:	ed92 5b00 	vldr	d5, [r2]
 8009db0:	ed93 7b00 	vldr	d7, [r3]
 8009db4:	ee25 5b07 	vmul.f64	d5, d5, d7
 8009db8:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8009dbc:	ed93 4b00 	vldr	d4, [r3]
 8009dc0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8009dc4:	ed93 7b00 	vldr	d7, [r3]
 8009dc8:	ee24 7b07 	vmul.f64	d7, d4, d7
 8009dcc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009dd0:	ee36 6b07 	vadd.f64	d6, d6, d7
             t20_im)) + (t13_im * t13_re - t12_re * t34_re);
 8009dd4:	f241 3370 	movw	r3, #4976	; 0x1370
 8009dd8:	443b      	add	r3, r7
 8009dda:	ed93 5b00 	vldr	d5, [r3]
 8009dde:	f241 3378 	movw	r3, #4984	; 0x1378
 8009de2:	443b      	add	r3, r7
 8009de4:	ed93 7b00 	vldr	d7, [r3]
 8009de8:	ee25 5b07 	vmul.f64	d5, d5, d7
 8009dec:	f241 3388 	movw	r3, #5000	; 0x1388
 8009df0:	443b      	add	r3, r7
 8009df2:	ed93 4b00 	vldr	d4, [r3]
 8009df6:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009dfa:	443b      	add	r3, r7
 8009dfc:	ed93 7b00 	vldr	d7, [r3]
 8009e00:	ee24 7b07 	vmul.f64	d7, d4, d7
 8009e04:	ee35 7b47 	vsub.f64	d7, d5, d7
  t34_im = (((((t56.re * 0.0 - t56.im * 3.749399456654644E-33) - (t57.re * 0.0 -
 8009e08:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009e0c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8009e10:	443b      	add	r3, r7
 8009e12:	ed83 7b00 	vstr	d7, [r3]
  t34_re = (((((t56.re * 3.749399456654644E-33 + t56.im * 0.0) - (t57.re *
 8009e16:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8009e1a:	ed93 7b00 	vldr	d7, [r3]
 8009e1e:	ed9f 6be8 	vldr	d6, [pc, #928]	; 800a1c0 <G_q+0x7808>
 8009e22:	ee27 6b06 	vmul.f64	d6, d7, d6
 8009e26:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8009e2a:	ed93 7b02 	vldr	d7, [r3, #8]
 8009e2e:	ed9f 5be6 	vldr	d5, [pc, #920]	; 800a1c8 <G_q+0x7810>
 8009e32:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009e36:	ee36 6b07 	vadd.f64	d6, d6, d7
 8009e3a:	f507 633e 	add.w	r3, r7, #3040	; 0xbe0
 8009e3e:	ed93 7b00 	vldr	d7, [r3]
 8009e42:	ed9f 5bdf 	vldr	d5, [pc, #892]	; 800a1c0 <G_q+0x7808>
 8009e46:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.749399456654644E-33 + t57.im * 0.0)) + (t70_re * b_t10_re + t70_im *
 8009e4a:	f507 633e 	add.w	r3, r7, #3040	; 0xbe0
 8009e4e:	ed93 7b02 	vldr	d7, [r3, #8]
 8009e52:	ed9f 4bdd 	vldr	d4, [pc, #884]	; 800a1c8 <G_q+0x7810>
 8009e56:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009e5a:	ee35 7b07 	vadd.f64	d7, d5, d7
  t34_re = (((((t56.re * 3.749399456654644E-33 + t56.im * 0.0) - (t57.re *
 8009e5e:	ee36 6b47 	vsub.f64	d6, d6, d7
    3.749399456654644E-33 + t57.im * 0.0)) + (t70_re * b_t10_re + t70_im *
 8009e62:	f241 23d0 	movw	r3, #4816	; 0x12d0
 8009e66:	443b      	add	r3, r7
 8009e68:	ed93 5b00 	vldr	d5, [r3]
 8009e6c:	f241 3338 	movw	r3, #4920	; 0x1338
 8009e70:	443b      	add	r3, r7
 8009e72:	ed93 7b00 	vldr	d7, [r3]
 8009e76:	ee25 5b07 	vmul.f64	d5, d5, d7
 8009e7a:	f241 22c8 	movw	r2, #4808	; 0x12c8
 8009e7e:	443a      	add	r2, r7
 8009e80:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8009e84:	ed92 4b00 	vldr	d4, [r2]
 8009e88:	ed93 7b00 	vldr	d7, [r3]
 8009e8c:	ee24 7b07 	vmul.f64	d7, d4, d7
 8009e90:	ee35 7b07 	vadd.f64	d7, d5, d7
 8009e94:	ee36 6b07 	vadd.f64	d6, d6, d7
    t72_re)) - (t74_re * t3_im + t74_im * t76_re)) + (t23_re * t20_im + t58_im *
 8009e98:	f241 23b8 	movw	r3, #4792	; 0x12b8
 8009e9c:	443b      	add	r3, r7
 8009e9e:	ed93 5b00 	vldr	d5, [r3]
 8009ea2:	f241 3310 	movw	r3, #4880	; 0x1310
 8009ea6:	443b      	add	r3, r7
 8009ea8:	ed93 7b00 	vldr	d7, [r3]
 8009eac:	ee25 5b07 	vmul.f64	d5, d5, d7
 8009eb0:	f241 22b0 	movw	r2, #4784	; 0x12b0
 8009eb4:	443a      	add	r2, r7
 8009eb6:	f241 23a8 	movw	r3, #4776	; 0x12a8
 8009eba:	443b      	add	r3, r7
 8009ebc:	ed92 4b00 	vldr	d4, [r2]
 8009ec0:	ed93 7b00 	vldr	d7, [r3]
 8009ec4:	ee24 7b07 	vmul.f64	d7, d4, d7
 8009ec8:	ee35 7b07 	vadd.f64	d7, d5, d7
 8009ecc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009ed0:	f241 3330 	movw	r3, #4912	; 0x1330
 8009ed4:	443b      	add	r3, r7
 8009ed6:	ed93 5b00 	vldr	d5, [r3]
 8009eda:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8009ede:	ed93 7b00 	vldr	d7, [r3]
 8009ee2:	ee25 5b07 	vmul.f64	d5, d5, d7
 8009ee6:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8009eea:	f241 2350 	movw	r3, #4688	; 0x1250
 8009eee:	443b      	add	r3, r7
 8009ef0:	ed92 4b00 	vldr	d4, [r2]
 8009ef4:	ed93 7b00 	vldr	d7, [r3]
 8009ef8:	ee24 7b07 	vmul.f64	d7, d4, d7
 8009efc:	ee35 7b07 	vadd.f64	d7, d5, d7
 8009f00:	ee36 6b07 	vadd.f64	d6, d6, d7
             t60_re)) + (t13_im * t34_re + t12_re * t13_re);
 8009f04:	f241 3370 	movw	r3, #4976	; 0x1370
 8009f08:	443b      	add	r3, r7
 8009f0a:	ed93 5b00 	vldr	d5, [r3]
 8009f0e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009f12:	443b      	add	r3, r7
 8009f14:	ed93 7b00 	vldr	d7, [r3]
 8009f18:	ee25 5b07 	vmul.f64	d5, d5, d7
 8009f1c:	f241 3388 	movw	r3, #5000	; 0x1388
 8009f20:	443b      	add	r3, r7
 8009f22:	ed93 4b00 	vldr	d4, [r3]
 8009f26:	f241 3378 	movw	r3, #4984	; 0x1378
 8009f2a:	443b      	add	r3, r7
 8009f2c:	ed93 7b00 	vldr	d7, [r3]
 8009f30:	ee24 7b07 	vmul.f64	d7, d4, d7
 8009f34:	ee35 7b07 	vadd.f64	d7, d5, d7
  t34_re = (((((t56.re * 3.749399456654644E-33 + t56.im * 0.0) - (t57.re *
 8009f38:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009f3c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009f40:	443b      	add	r3, r7
 8009f42:	ed83 7b00 	vstr	d7, [r3]
  b_G_q[1].re = -g * ((((((((t3.re * 0.1335 - t3.im * 4.7990846441586913E-18) +
 8009f46:	4bae      	ldr	r3, [pc, #696]	; (800a200 <G_q+0x7848>)
 8009f48:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8009f4c:	443a      	add	r2, r7
 8009f4e:	4413      	add	r3, r2
 8009f50:	ed93 7b00 	vldr	d7, [r3]
 8009f54:	eeb1 6b47 	vneg.f64	d6, d7
 8009f58:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8009f5c:	ed93 7b00 	vldr	d7, [r3]
 8009f60:	ed9f 5b9b 	vldr	d5, [pc, #620]	; 800a1d0 <G_q+0x7818>
 8009f64:	ee27 5b05 	vmul.f64	d5, d7, d5
 8009f68:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8009f6c:	ed93 7b02 	vldr	d7, [r3, #8]
 8009f70:	ed9f 4b99 	vldr	d4, [pc, #612]	; 800a1d8 <G_q+0x7820>
 8009f74:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009f78:	ee35 5b47 	vsub.f64	d5, d5, d7
    (t83.re * 0.1335 - t83.im * -4.7990846441586913E-18)) + (t33_re * t35_re -
 8009f7c:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8009f80:	ed93 7b00 	vldr	d7, [r3]
 8009f84:	ed9f 4b92 	vldr	d4, [pc, #584]	; 800a1d0 <G_q+0x7818>
 8009f88:	ee27 4b04 	vmul.f64	d4, d7, d4
 8009f8c:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8009f90:	ed93 7b02 	vldr	d7, [r3, #8]
 8009f94:	ed9f 3b90 	vldr	d3, [pc, #576]	; 800a1d8 <G_q+0x7820>
 8009f98:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009f9c:	ee34 7b07 	vadd.f64	d7, d4, d7
  b_G_q[1].re = -g * ((((((((t3.re * 0.1335 - t3.im * 4.7990846441586913E-18) +
 8009fa0:	ee35 5b07 	vadd.f64	d5, d5, d7
    (t83.re * 0.1335 - t83.im * -4.7990846441586913E-18)) + (t33_re * t35_re -
 8009fa4:	f241 2398 	movw	r3, #4760	; 0x1298
 8009fa8:	443b      	add	r3, r7
 8009faa:	f241 32c8 	movw	r2, #5064	; 0x13c8
 8009fae:	443a      	add	r2, r7
 8009fb0:	ed92 4b00 	vldr	d4, [r2]
 8009fb4:	ed93 7b00 	vldr	d7, [r3]
 8009fb8:	ee24 4b07 	vmul.f64	d4, d4, d7
    t33_im * t35_im) * 0.1376) - (t37_re * t39_re - t37_im * t39_im) * 0.1376) -
 8009fbc:	f241 2390 	movw	r3, #4752	; 0x1290
 8009fc0:	443b      	add	r3, r7
 8009fc2:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 8009fc6:	ed92 3b00 	vldr	d3, [r2]
 8009fca:	ed93 7b00 	vldr	d7, [r3]
 8009fce:	ee23 7b07 	vmul.f64	d7, d3, d7
    (t83.re * 0.1335 - t83.im * -4.7990846441586913E-18)) + (t33_re * t35_re -
 8009fd2:	ee34 7b47 	vsub.f64	d7, d4, d7
    t33_im * t35_im) * 0.1376) - (t37_re * t39_re - t37_im * t39_im) * 0.1376) -
 8009fd6:	ed9f 4b82 	vldr	d4, [pc, #520]	; 800a1e0 <G_q+0x7828>
 8009fda:	ee27 7b04 	vmul.f64	d7, d7, d4
    (t83.re * 0.1335 - t83.im * -4.7990846441586913E-18)) + (t33_re * t35_re -
 8009fde:	ee35 5b07 	vadd.f64	d5, d5, d7
    t33_im * t35_im) * 0.1376) - (t37_re * t39_re - t37_im * t39_im) * 0.1376) -
 8009fe2:	f241 2388 	movw	r3, #4744	; 0x1288
 8009fe6:	443b      	add	r3, r7
 8009fe8:	f241 32a8 	movw	r2, #5032	; 0x13a8
 8009fec:	443a      	add	r2, r7
 8009fee:	ed92 4b00 	vldr	d4, [r2]
 8009ff2:	ed93 7b00 	vldr	d7, [r3]
 8009ff6:	ee24 4b07 	vmul.f64	d4, d4, d7
 8009ffa:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8009ffe:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 800a002:	ed92 3b00 	vldr	d3, [r2]
 800a006:	ed93 7b00 	vldr	d7, [r3]
 800a00a:	ee23 7b07 	vmul.f64	d7, d3, d7
 800a00e:	ee34 7b47 	vsub.f64	d7, d4, d7
 800a012:	ed9f 4b73 	vldr	d4, [pc, #460]	; 800a1e0 <G_q+0x7828>
 800a016:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a01a:	ee35 5b47 	vsub.f64	d5, d5, d7
    (t54_re * t10_re - t54_im * t10_im) * 0.0215) + (t19_re * t8_re - t19_im *
 800a01e:	f241 3328 	movw	r3, #4904	; 0x1328
 800a022:	443b      	add	r3, r7
 800a024:	ed93 4b00 	vldr	d4, [r3]
 800a028:	f241 3398 	movw	r3, #5016	; 0x1398
 800a02c:	443b      	add	r3, r7
 800a02e:	ed93 7b00 	vldr	d7, [r3]
 800a032:	ee24 4b07 	vmul.f64	d4, d4, d7
 800a036:	f241 2378 	movw	r3, #4728	; 0x1278
 800a03a:	443b      	add	r3, r7
 800a03c:	ed93 3b00 	vldr	d3, [r3]
 800a040:	f241 3390 	movw	r3, #5008	; 0x1390
 800a044:	443b      	add	r3, r7
 800a046:	ed93 7b00 	vldr	d7, [r3]
 800a04a:	ee23 7b07 	vmul.f64	d7, d3, d7
 800a04e:	ee34 7b47 	vsub.f64	d7, d4, d7
 800a052:	ed9f 4b65 	vldr	d4, [pc, #404]	; 800a1e8 <G_q+0x7830>
 800a056:	ee27 7b04 	vmul.f64	d7, d7, d4
    t33_im * t35_im) * 0.1376) - (t37_re * t39_re - t37_im * t39_im) * 0.1376) -
 800a05a:	ee35 5b47 	vsub.f64	d5, d5, d7
    (t54_re * t10_re - t54_im * t10_im) * 0.0215) + (t19_re * t8_re - t19_im *
 800a05e:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800a062:	f241 3258 	movw	r2, #4952	; 0x1358
 800a066:	443a      	add	r2, r7
 800a068:	ed92 4b00 	vldr	d4, [r2]
 800a06c:	ed93 7b00 	vldr	d7, [r3]
 800a070:	ee24 4b07 	vmul.f64	d4, d4, d7
 800a074:	f241 3350 	movw	r3, #4944	; 0x1350
 800a078:	443b      	add	r3, r7
 800a07a:	ed93 3b00 	vldr	d3, [r3]
 800a07e:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 800a082:	ed93 7b00 	vldr	d7, [r3]
 800a086:	ee23 7b07 	vmul.f64	d7, d3, d7
 800a08a:	ee34 7b47 	vsub.f64	d7, d4, d7
    t8_im) * 1.3164953090834051E-18) - (t41_re * t43_re - t41_im * t43_im) *
 800a08e:	ed9f 4b58 	vldr	d4, [pc, #352]	; 800a1f0 <G_q+0x7838>
 800a092:	ee27 7b04 	vmul.f64	d7, d7, d4
    (t54_re * t10_re - t54_im * t10_im) * 0.0215) + (t19_re * t8_re - t19_im *
 800a096:	ee35 5b07 	vadd.f64	d5, d5, d7
    t8_im) * 1.3164953090834051E-18) - (t41_re * t43_re - t41_im * t43_im) *
 800a09a:	f241 2358 	movw	r3, #4696	; 0x1258
 800a09e:	443b      	add	r3, r7
 800a0a0:	f241 3208 	movw	r2, #4872	; 0x1308
 800a0a4:	443a      	add	r2, r7
 800a0a6:	ed92 4b00 	vldr	d4, [r2]
 800a0aa:	ed93 7b00 	vldr	d7, [r3]
 800a0ae:	ee24 4b07 	vmul.f64	d4, d4, d7
 800a0b2:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800a0b6:	ed93 3b00 	vldr	d3, [r3]
 800a0ba:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800a0be:	443b      	add	r3, r7
 800a0c0:	ed93 7b00 	vldr	d7, [r3]
 800a0c4:	ee23 7b07 	vmul.f64	d7, d3, d7
 800a0c8:	ee34 7b47 	vsub.f64	d7, d4, d7
 800a0cc:	ed9f 4b48 	vldr	d4, [pc, #288]	; 800a1f0 <G_q+0x7838>
 800a0d0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a0d4:	ee35 5b47 	vsub.f64	d5, d5, d7
                       1.3164953090834051E-18) + (b_t54_re * t34_im - b_t54_im *
 800a0d8:	f241 23f0 	movw	r3, #4848	; 0x12f0
 800a0dc:	443b      	add	r3, r7
 800a0de:	ed93 4b00 	vldr	d4, [r3]
 800a0e2:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800a0e6:	443b      	add	r3, r7
 800a0e8:	ed93 7b00 	vldr	d7, [r3]
 800a0ec:	ee24 4b07 	vmul.f64	d4, d4, d7
 800a0f0:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800a0f4:	443b      	add	r3, r7
 800a0f6:	ed93 3b00 	vldr	d3, [r3]
 800a0fa:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800a0fe:	443b      	add	r3, r7
 800a100:	ed93 7b00 	vldr	d7, [r3]
 800a104:	ee23 7b07 	vmul.f64	d7, d3, d7
 800a108:	ee34 7b47 	vsub.f64	d7, d4, d7
    t34_re) * 0.0215);
 800a10c:	ed9f 4b36 	vldr	d4, [pc, #216]	; 800a1e8 <G_q+0x7830>
 800a110:	ee27 7b04 	vmul.f64	d7, d7, d4
                       1.3164953090834051E-18) + (b_t54_re * t34_im - b_t54_im *
 800a114:	ee35 7b07 	vadd.f64	d7, d5, d7
  b_G_q[1].re = -g * ((((((((t3.re * 0.1335 - t3.im * 4.7990846441586913E-18) +
 800a118:	4b3a      	ldr	r3, [pc, #232]	; (800a204 <G_q+0x784c>)
 800a11a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800a11e:	443a      	add	r2, r7
 800a120:	4413      	add	r3, r2
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	3310      	adds	r3, #16
 800a126:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a12a:	ed83 7b00 	vstr	d7, [r3]
  b_G_q[1].im = -g * ((((((((t3.re * 4.7990846441586913E-18 + t3.im * 0.1335) +
 800a12e:	4b34      	ldr	r3, [pc, #208]	; (800a200 <G_q+0x7848>)
 800a130:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800a134:	443a      	add	r2, r7
 800a136:	4413      	add	r3, r2
 800a138:	ed93 7b00 	vldr	d7, [r3]
 800a13c:	eeb1 6b47 	vneg.f64	d6, d7
 800a140:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 800a144:	ed93 7b00 	vldr	d7, [r3]
 800a148:	ed9f 5b23 	vldr	d5, [pc, #140]	; 800a1d8 <G_q+0x7820>
 800a14c:	ee27 5b05 	vmul.f64	d5, d7, d5
 800a150:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 800a154:	ed93 7b02 	vldr	d7, [r3, #8]
 800a158:	ed9f 4b1d 	vldr	d4, [pc, #116]	; 800a1d0 <G_q+0x7818>
 800a15c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a160:	ee35 5b07 	vadd.f64	d5, d5, d7
    (t83.re * -4.7990846441586913E-18 + t83.im * 0.1335)) + (t33_re * t35_im +
 800a164:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 800a168:	ed93 7b00 	vldr	d7, [r3]
 800a16c:	ed9f 4b22 	vldr	d4, [pc, #136]	; 800a1f8 <G_q+0x7840>
 800a170:	ee27 4b04 	vmul.f64	d4, d7, d4
 800a174:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 800a178:	ed93 7b02 	vldr	d7, [r3, #8]
 800a17c:	ed9f 3b14 	vldr	d3, [pc, #80]	; 800a1d0 <G_q+0x7818>
 800a180:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a184:	ee34 7b07 	vadd.f64	d7, d4, d7
  b_G_q[1].im = -g * ((((((((t3.re * 4.7990846441586913E-18 + t3.im * 0.1335) +
 800a188:	ee35 5b07 	vadd.f64	d5, d5, d7
    (t83.re * -4.7990846441586913E-18 + t83.im * 0.1335)) + (t33_re * t35_im +
 800a18c:	f241 2390 	movw	r3, #4752	; 0x1290
 800a190:	443b      	add	r3, r7
 800a192:	f241 32c8 	movw	r2, #5064	; 0x13c8
 800a196:	443a      	add	r2, r7
 800a198:	ed92 4b00 	vldr	d4, [r2]
 800a19c:	ed93 7b00 	vldr	d7, [r3]
 800a1a0:	ee24 4b07 	vmul.f64	d4, d4, d7
    t33_im * t35_re) * 0.1376) - (t37_re * t39_im + t37_im * t39_re) * 0.1376) -
 800a1a4:	f241 2398 	movw	r3, #4760	; 0x1298
 800a1a8:	443b      	add	r3, r7
 800a1aa:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 800a1ae:	ed92 3b00 	vldr	d3, [r2]
 800a1b2:	ed93 7b00 	vldr	d7, [r3]
 800a1b6:	ee23 7b07 	vmul.f64	d7, d3, d7
    (t83.re * -4.7990846441586913E-18 + t83.im * 0.1335)) + (t33_re * t35_im +
 800a1ba:	ee34 7b07 	vadd.f64	d7, d4, d7
 800a1be:	e023      	b.n	800a208 <G_q+0x7850>
 800a1c0:	858a5d48 	.word	0x858a5d48
 800a1c4:	393377ce 	.word	0x393377ce
	...
 800a1d0:	2b020c4a 	.word	0x2b020c4a
 800a1d4:	3fc11687 	.word	0x3fc11687
 800a1d8:	558ec760 	.word	0x558ec760
 800a1dc:	3c5621c2 	.word	0x3c5621c2
 800a1e0:	75f6fd22 	.word	0x75f6fd22
 800a1e4:	3fc19ce0 	.word	0x3fc19ce0
 800a1e8:	9374bc6a 	.word	0x9374bc6a
 800a1ec:	3f960418 	.word	0x3f960418
 800a1f0:	2ba953a1 	.word	0x2ba953a1
 800a1f4:	3c3848f9 	.word	0x3c3848f9
 800a1f8:	558ec760 	.word	0x558ec760
 800a1fc:	bc5621c2 	.word	0xbc5621c2
 800a200:	ffffec58 	.word	0xffffec58
 800a204:	ffffec34 	.word	0xffffec34
    t33_im * t35_re) * 0.1376) - (t37_re * t39_im + t37_im * t39_re) * 0.1376) -
 800a208:	ed9f 4ba1 	vldr	d4, [pc, #644]	; 800a490 <G_q+0x7ad8>
 800a20c:	ee27 7b04 	vmul.f64	d7, d7, d4
    (t83.re * -4.7990846441586913E-18 + t83.im * 0.1335)) + (t33_re * t35_im +
 800a210:	ee35 5b07 	vadd.f64	d5, d5, d7
    t33_im * t35_re) * 0.1376) - (t37_re * t39_im + t37_im * t39_re) * 0.1376) -
 800a214:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 800a218:	f241 32a8 	movw	r2, #5032	; 0x13a8
 800a21c:	443a      	add	r2, r7
 800a21e:	ed92 4b00 	vldr	d4, [r2]
 800a222:	ed93 7b00 	vldr	d7, [r3]
 800a226:	ee24 4b07 	vmul.f64	d4, d4, d7
 800a22a:	f241 2388 	movw	r3, #4744	; 0x1288
 800a22e:	443b      	add	r3, r7
 800a230:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 800a234:	ed92 3b00 	vldr	d3, [r2]
 800a238:	ed93 7b00 	vldr	d7, [r3]
 800a23c:	ee23 7b07 	vmul.f64	d7, d3, d7
 800a240:	ee34 7b07 	vadd.f64	d7, d4, d7
 800a244:	ed9f 4b92 	vldr	d4, [pc, #584]	; 800a490 <G_q+0x7ad8>
 800a248:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a24c:	ee35 5b47 	vsub.f64	d5, d5, d7
    (t54_re * t10_im + t54_im * t10_re) * 0.0215) + (t19_re * t8_im + t19_im *
 800a250:	f241 3328 	movw	r3, #4904	; 0x1328
 800a254:	443b      	add	r3, r7
 800a256:	ed93 4b00 	vldr	d4, [r3]
 800a25a:	f241 3390 	movw	r3, #5008	; 0x1390
 800a25e:	443b      	add	r3, r7
 800a260:	ed93 7b00 	vldr	d7, [r3]
 800a264:	ee24 4b07 	vmul.f64	d4, d4, d7
 800a268:	f241 2378 	movw	r3, #4728	; 0x1278
 800a26c:	443b      	add	r3, r7
 800a26e:	ed93 3b00 	vldr	d3, [r3]
 800a272:	f241 3398 	movw	r3, #5016	; 0x1398
 800a276:	443b      	add	r3, r7
 800a278:	ed93 7b00 	vldr	d7, [r3]
 800a27c:	ee23 7b07 	vmul.f64	d7, d3, d7
 800a280:	ee34 7b07 	vadd.f64	d7, d4, d7
 800a284:	ed9f 4b84 	vldr	d4, [pc, #528]	; 800a498 <G_q+0x7ae0>
 800a288:	ee27 7b04 	vmul.f64	d7, d7, d4
    t33_im * t35_re) * 0.1376) - (t37_re * t39_im + t37_im * t39_re) * 0.1376) -
 800a28c:	ee35 5b47 	vsub.f64	d5, d5, d7
    (t54_re * t10_im + t54_im * t10_re) * 0.0215) + (t19_re * t8_im + t19_im *
 800a290:	f241 3358 	movw	r3, #4952	; 0x1358
 800a294:	443b      	add	r3, r7
 800a296:	ed93 4b00 	vldr	d4, [r3]
 800a29a:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 800a29e:	ed93 7b00 	vldr	d7, [r3]
 800a2a2:	ee24 4b07 	vmul.f64	d4, d4, d7
 800a2a6:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800a2aa:	f241 3250 	movw	r2, #4944	; 0x1350
 800a2ae:	443a      	add	r2, r7
 800a2b0:	ed92 3b00 	vldr	d3, [r2]
 800a2b4:	ed93 7b00 	vldr	d7, [r3]
 800a2b8:	ee23 7b07 	vmul.f64	d7, d3, d7
 800a2bc:	ee34 7b07 	vadd.f64	d7, d4, d7
    t8_re) * 1.3164953090834051E-18) - (t41_re * t43_im + t41_im * t43_re) *
 800a2c0:	ed9f 4b77 	vldr	d4, [pc, #476]	; 800a4a0 <G_q+0x7ae8>
 800a2c4:	ee27 7b04 	vmul.f64	d7, d7, d4
    (t54_re * t10_im + t54_im * t10_re) * 0.0215) + (t19_re * t8_im + t19_im *
 800a2c8:	ee35 5b07 	vadd.f64	d5, d5, d7
    t8_re) * 1.3164953090834051E-18) - (t41_re * t43_im + t41_im * t43_re) *
 800a2cc:	f241 3308 	movw	r3, #4872	; 0x1308
 800a2d0:	443b      	add	r3, r7
 800a2d2:	ed93 4b00 	vldr	d4, [r3]
 800a2d6:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800a2da:	443b      	add	r3, r7
 800a2dc:	ed93 7b00 	vldr	d7, [r3]
 800a2e0:	ee24 4b07 	vmul.f64	d4, d4, d7
 800a2e4:	f241 2358 	movw	r3, #4696	; 0x1258
 800a2e8:	443b      	add	r3, r7
 800a2ea:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 800a2ee:	ed92 3b00 	vldr	d3, [r2]
 800a2f2:	ed93 7b00 	vldr	d7, [r3]
 800a2f6:	ee23 7b07 	vmul.f64	d7, d3, d7
 800a2fa:	ee34 7b07 	vadd.f64	d7, d4, d7
 800a2fe:	ed9f 4b68 	vldr	d4, [pc, #416]	; 800a4a0 <G_q+0x7ae8>
 800a302:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a306:	ee35 5b47 	vsub.f64	d5, d5, d7
                       1.3164953090834051E-18) + (b_t54_re * t34_re + b_t54_im *
 800a30a:	f241 23f0 	movw	r3, #4848	; 0x12f0
 800a30e:	443b      	add	r3, r7
 800a310:	ed93 4b00 	vldr	d4, [r3]
 800a314:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800a318:	443b      	add	r3, r7
 800a31a:	ed93 7b00 	vldr	d7, [r3]
 800a31e:	ee24 4b07 	vmul.f64	d4, d4, d7
 800a322:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800a326:	443b      	add	r3, r7
 800a328:	ed93 3b00 	vldr	d3, [r3]
 800a32c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800a330:	443b      	add	r3, r7
 800a332:	ed93 7b00 	vldr	d7, [r3]
 800a336:	ee23 7b07 	vmul.f64	d7, d3, d7
 800a33a:	ee34 7b07 	vadd.f64	d7, d4, d7
    t34_im) * 0.0215);
 800a33e:	ed9f 4b56 	vldr	d4, [pc, #344]	; 800a498 <G_q+0x7ae0>
 800a342:	ee27 7b04 	vmul.f64	d7, d7, d4
                       1.3164953090834051E-18) + (b_t54_re * t34_re + b_t54_im *
 800a346:	ee35 7b07 	vadd.f64	d7, d5, d7
  b_G_q[1].im = -g * ((((((((t3.re * 4.7990846441586913E-18 + t3.im * 0.1335) +
 800a34a:	4b57      	ldr	r3, [pc, #348]	; (800a4a8 <G_q+0x7af0>)
 800a34c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800a350:	443a      	add	r2, r7
 800a352:	4413      	add	r3, r2
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	3310      	adds	r3, #16
 800a358:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a35c:	ed83 7b02 	vstr	d7, [r3, #8]
  if (t154.im == 0.0) {
 800a360:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800a364:	ed93 7b02 	vldr	d7, [r3, #8]
 800a368:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a36c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a370:	d115      	bne.n	800a39e <G_q+0x79e6>
    t8_im = t154.re / 2.0;
 800a372:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800a376:	ed93 6b00 	vldr	d6, [r3]
 800a37a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a37e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a382:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 800a386:	ed83 7b00 	vstr	d7, [r3]
    t54_re = 0.0;
 800a38a:	f04f 0300 	mov.w	r3, #0
 800a38e:	f04f 0400 	mov.w	r4, #0
 800a392:	f241 3228 	movw	r2, #4904	; 0x1328
 800a396:	443a      	add	r2, r7
 800a398:	e9c2 3400 	strd	r3, r4, [r2]
 800a39c:	e037      	b.n	800a40e <G_q+0x7a56>
  } else if (t154.re == 0.0) {
 800a39e:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800a3a2:	ed93 7b00 	vldr	d7, [r3]
 800a3a6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a3aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3ae:	d115      	bne.n	800a3dc <G_q+0x7a24>
    t8_im = 0.0;
 800a3b0:	f04f 0300 	mov.w	r3, #0
 800a3b4:	f04f 0400 	mov.w	r4, #0
 800a3b8:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 800a3bc:	e9c2 3400 	strd	r3, r4, [r2]
    t54_re = t154.im / 2.0;
 800a3c0:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800a3c4:	ed93 6b02 	vldr	d6, [r3, #8]
 800a3c8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a3cc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a3d0:	f241 3328 	movw	r3, #4904	; 0x1328
 800a3d4:	443b      	add	r3, r7
 800a3d6:	ed83 7b00 	vstr	d7, [r3]
 800a3da:	e018      	b.n	800a40e <G_q+0x7a56>
  } else {
    t8_im = t154.re / 2.0;
 800a3dc:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800a3e0:	ed93 6b00 	vldr	d6, [r3]
 800a3e4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a3e8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a3ec:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 800a3f0:	ed83 7b00 	vstr	d7, [r3]
    t54_re = t154.im / 2.0;
 800a3f4:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800a3f8:	ed93 6b02 	vldr	d6, [r3, #8]
 800a3fc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a400:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a404:	f241 3328 	movw	r3, #4904	; 0x1328
 800a408:	443b      	add	r3, r7
 800a40a:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t155.im == 0.0) {
 800a40e:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800a412:	ed93 7b02 	vldr	d7, [r3, #8]
 800a416:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a41a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a41e:	d116      	bne.n	800a44e <G_q+0x7a96>
    t34_re = t155.re / 2.0;
 800a420:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800a424:	ed93 6b00 	vldr	d6, [r3]
 800a428:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a42c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a430:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800a434:	443b      	add	r3, r7
 800a436:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800a43a:	f04f 0300 	mov.w	r3, #0
 800a43e:	f04f 0400 	mov.w	r4, #0
 800a442:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800a446:	443a      	add	r2, r7
 800a448:	e9c2 3400 	strd	r3, r4, [r2]
 800a44c:	e048      	b.n	800a4e0 <G_q+0x7b28>
  } else if (t155.re == 0.0) {
 800a44e:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800a452:	ed93 7b00 	vldr	d7, [r3]
 800a456:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a45a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a45e:	d125      	bne.n	800a4ac <G_q+0x7af4>
    t34_re = 0.0;
 800a460:	f04f 0300 	mov.w	r3, #0
 800a464:	f04f 0400 	mov.w	r4, #0
 800a468:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800a46c:	443a      	add	r2, r7
 800a46e:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t155.im / 2.0;
 800a472:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800a476:	ed93 6b02 	vldr	d6, [r3, #8]
 800a47a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a47e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a482:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800a486:	443b      	add	r3, r7
 800a488:	ed83 7b00 	vstr	d7, [r3]
 800a48c:	e028      	b.n	800a4e0 <G_q+0x7b28>
 800a48e:	bf00      	nop
 800a490:	75f6fd22 	.word	0x75f6fd22
 800a494:	3fc19ce0 	.word	0x3fc19ce0
 800a498:	9374bc6a 	.word	0x9374bc6a
 800a49c:	3f960418 	.word	0x3f960418
 800a4a0:	2ba953a1 	.word	0x2ba953a1
 800a4a4:	3c3848f9 	.word	0x3c3848f9
 800a4a8:	ffffec34 	.word	0xffffec34
  } else {
    t34_re = t155.re / 2.0;
 800a4ac:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800a4b0:	ed93 6b00 	vldr	d6, [r3]
 800a4b4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a4b8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a4bc:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800a4c0:	443b      	add	r3, r7
 800a4c2:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t155.im / 2.0;
 800a4c6:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800a4ca:	ed93 6b02 	vldr	d6, [r3, #8]
 800a4ce:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a4d2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a4d6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800a4da:	443b      	add	r3, r7
 800a4dc:	ed83 7b00 	vstr	d7, [r3]
  }

  t8_im += t34_re;
 800a4e0:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 800a4e4:	ed93 6b00 	vldr	d6, [r3]
 800a4e8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800a4ec:	443b      	add	r3, r7
 800a4ee:	ed93 7b00 	vldr	d7, [r3]
 800a4f2:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a4f6:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 800a4fa:	ed83 7b00 	vstr	d7, [r3]
  t54_re += t34_im;
 800a4fe:	f241 3328 	movw	r3, #4904	; 0x1328
 800a502:	443b      	add	r3, r7
 800a504:	ed93 6b00 	vldr	d6, [r3]
 800a508:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800a50c:	443b      	add	r3, r7
 800a50e:	ed93 7b00 	vldr	d7, [r3]
 800a512:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a516:	f241 3328 	movw	r3, #4904	; 0x1328
 800a51a:	443b      	add	r3, r7
 800a51c:	ed83 7b00 	vstr	d7, [r3]
  t19_re_tmp = (t156.re * 0.0 - t156.im * 0.5) - (t157.re * 0.0 - t157.im * 0.5);
 800a520:	f507 6365 	add.w	r3, r7, #3664	; 0xe50
 800a524:	ed93 7b00 	vldr	d7, [r3]
 800a528:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 800a810 <G_q+0x7e58>
 800a52c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a530:	f507 6365 	add.w	r3, r7, #3664	; 0xe50
 800a534:	ed93 7b02 	vldr	d7, [r3, #8]
 800a538:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a53c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a540:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a544:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800a548:	ed93 7b00 	vldr	d7, [r3]
 800a54c:	ed9f 5bb0 	vldr	d5, [pc, #704]	; 800a810 <G_q+0x7e58>
 800a550:	ee27 5b05 	vmul.f64	d5, d7, d5
 800a554:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800a558:	ed93 7b02 	vldr	d7, [r3, #8]
 800a55c:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800a560:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a564:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a568:	f241 2370 	movw	r3, #4720	; 0x1270
 800a56c:	443b      	add	r3, r7
 800a56e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a572:	ed83 7b00 	vstr	d7, [r3]
  t19_im_tmp = (t156.re * 0.5 + t156.im * 0.0) - (t157.re * 0.5 + t157.im * 0.0);
 800a576:	f507 6365 	add.w	r3, r7, #3664	; 0xe50
 800a57a:	ed93 7b00 	vldr	d7, [r3]
 800a57e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800a582:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a586:	f507 6365 	add.w	r3, r7, #3664	; 0xe50
 800a58a:	ed93 7b02 	vldr	d7, [r3, #8]
 800a58e:	ed9f 5ba0 	vldr	d5, [pc, #640]	; 800a810 <G_q+0x7e58>
 800a592:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a596:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a59a:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800a59e:	ed93 7b00 	vldr	d7, [r3]
 800a5a2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a5a6:	ee27 5b05 	vmul.f64	d5, d7, d5
 800a5aa:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800a5ae:	ed93 7b02 	vldr	d7, [r3, #8]
 800a5b2:	ed9f 4b97 	vldr	d4, [pc, #604]	; 800a810 <G_q+0x7e58>
 800a5b6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a5ba:	ee35 7b07 	vadd.f64	d7, d5, d7
 800a5be:	f241 2368 	movw	r3, #4712	; 0x1268
 800a5c2:	443b      	add	r3, r7
 800a5c4:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a5c8:	ed83 7b00 	vstr	d7, [r3]
  t41_im = t98.re * 3.061616997868383E-17 + t99.re * 3.061616997868383E-17;
 800a5cc:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 800a5d0:	ed93 7b00 	vldr	d7, [r3]
 800a5d4:	ed9f 6b8a 	vldr	d6, [pc, #552]	; 800a800 <G_q+0x7e48>
 800a5d8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a5dc:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 800a5e0:	ed93 7b00 	vldr	d7, [r3]
 800a5e4:	ed9f 5b86 	vldr	d5, [pc, #536]	; 800a800 <G_q+0x7e48>
 800a5e8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a5ec:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a5f0:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800a5f4:	ed83 7b00 	vstr	d7, [r3]
  t8_re = t98.im * 3.061616997868383E-17 + t99.im * 3.061616997868383E-17;
 800a5f8:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 800a5fc:	ed93 7b02 	vldr	d7, [r3, #8]
 800a600:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 800a800 <G_q+0x7e48>
 800a604:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a608:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 800a60c:	ed93 7b02 	vldr	d7, [r3, #8]
 800a610:	ed9f 5b7b 	vldr	d5, [pc, #492]	; 800a800 <G_q+0x7e48>
 800a614:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a618:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800a61c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a620:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t96.re * 0.0 - t96.im * 0.5) - (t97.re * 0.0 - t97.im * 0.5);
 800a624:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 800a628:	ed93 7b00 	vldr	d7, [r3]
 800a62c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800a810 <G_q+0x7e58>
 800a630:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a634:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 800a638:	ed93 7b02 	vldr	d7, [r3, #8]
 800a63c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a640:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a644:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a648:	f507 6350 	add.w	r3, r7, #3328	; 0xd00
 800a64c:	ed93 7b00 	vldr	d7, [r3]
 800a650:	ed9f 5b6f 	vldr	d5, [pc, #444]	; 800a810 <G_q+0x7e58>
 800a654:	ee27 5b05 	vmul.f64	d5, d7, d5
 800a658:	f507 6350 	add.w	r3, r7, #3328	; 0xd00
 800a65c:	ed93 7b02 	vldr	d7, [r3, #8]
 800a660:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800a664:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a668:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a66c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a670:	f241 3378 	movw	r3, #4984	; 0x1378
 800a674:	443b      	add	r3, r7
 800a676:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t96.re * 0.5 + t96.im * 0.0) - (t97.re * 0.5 + t97.im * 0.0);
 800a67a:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 800a67e:	ed93 7b00 	vldr	d7, [r3]
 800a682:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800a686:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a68a:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 800a68e:	ed93 7b02 	vldr	d7, [r3, #8]
 800a692:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 800a810 <G_q+0x7e58>
 800a696:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a69a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a69e:	f507 6350 	add.w	r3, r7, #3328	; 0xd00
 800a6a2:	ed93 7b00 	vldr	d7, [r3]
 800a6a6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a6aa:	ee27 5b05 	vmul.f64	d5, d7, d5
 800a6ae:	f507 6350 	add.w	r3, r7, #3328	; 0xd00
 800a6b2:	ed93 7b02 	vldr	d7, [r3, #8]
 800a6b6:	ed9f 4b56 	vldr	d4, [pc, #344]	; 800a810 <G_q+0x7e58>
 800a6ba:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a6be:	ee35 7b07 	vadd.f64	d7, d5, d7
 800a6c2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a6c6:	f241 3370 	movw	r3, #4976	; 0x1370
 800a6ca:	443b      	add	r3, r7
 800a6cc:	ed83 7b00 	vstr	d7, [r3]
  if (t94.im == 0.0) {
 800a6d0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800a6d4:	ed93 7b02 	vldr	d7, [r3, #8]
 800a6d8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a6dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6e0:	d115      	bne.n	800a70e <G_q+0x7d56>
    t16_re = t94.re / 2.0;
 800a6e2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800a6e6:	ed93 6b00 	vldr	d6, [r3]
 800a6ea:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a6ee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a6f2:	f241 3368 	movw	r3, #4968	; 0x1368
 800a6f6:	443b      	add	r3, r7
 800a6f8:	ed83 7b00 	vstr	d7, [r3]
    t16_im = 0.0;
 800a6fc:	f04f 0300 	mov.w	r3, #0
 800a700:	f04f 0400 	mov.w	r4, #0
 800a704:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800a708:	e9c2 3400 	strd	r3, r4, [r2]
 800a70c:	e037      	b.n	800a77e <G_q+0x7dc6>
  } else if (t94.re == 0.0) {
 800a70e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800a712:	ed93 7b00 	vldr	d7, [r3]
 800a716:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a71a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a71e:	d115      	bne.n	800a74c <G_q+0x7d94>
    t16_re = 0.0;
 800a720:	f04f 0300 	mov.w	r3, #0
 800a724:	f04f 0400 	mov.w	r4, #0
 800a728:	f241 3268 	movw	r2, #4968	; 0x1368
 800a72c:	443a      	add	r2, r7
 800a72e:	e9c2 3400 	strd	r3, r4, [r2]
    t16_im = t94.im / 2.0;
 800a732:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800a736:	ed93 6b02 	vldr	d6, [r3, #8]
 800a73a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a73e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a742:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800a746:	ed83 7b00 	vstr	d7, [r3]
 800a74a:	e018      	b.n	800a77e <G_q+0x7dc6>
  } else {
    t16_re = t94.re / 2.0;
 800a74c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800a750:	ed93 6b00 	vldr	d6, [r3]
 800a754:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a758:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a75c:	f241 3368 	movw	r3, #4968	; 0x1368
 800a760:	443b      	add	r3, r7
 800a762:	ed83 7b00 	vstr	d7, [r3]
    t16_im = t94.im / 2.0;
 800a766:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800a76a:	ed93 6b02 	vldr	d6, [r3, #8]
 800a76e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a772:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a776:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800a77a:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t95.im == 0.0) {
 800a77e:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 800a782:	ed93 7b02 	vldr	d7, [r3, #8]
 800a786:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a78a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a78e:	d116      	bne.n	800a7be <G_q+0x7e06>
    t34_re = t95.re / 2.0;
 800a790:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 800a794:	ed93 6b00 	vldr	d6, [r3]
 800a798:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a79c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a7a0:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800a7a4:	443b      	add	r3, r7
 800a7a6:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800a7aa:	f04f 0300 	mov.w	r3, #0
 800a7ae:	f04f 0400 	mov.w	r4, #0
 800a7b2:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800a7b6:	443a      	add	r2, r7
 800a7b8:	e9c2 3400 	strd	r3, r4, [r2]
 800a7bc:	e046      	b.n	800a84c <G_q+0x7e94>
  } else if (t95.re == 0.0) {
 800a7be:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 800a7c2:	ed93 7b00 	vldr	d7, [r3]
 800a7c6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a7ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7ce:	d123      	bne.n	800a818 <G_q+0x7e60>
    t34_re = 0.0;
 800a7d0:	f04f 0300 	mov.w	r3, #0
 800a7d4:	f04f 0400 	mov.w	r4, #0
 800a7d8:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800a7dc:	443a      	add	r2, r7
 800a7de:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t95.im / 2.0;
 800a7e2:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 800a7e6:	ed93 6b02 	vldr	d6, [r3, #8]
 800a7ea:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a7ee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a7f2:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800a7f6:	443b      	add	r3, r7
 800a7f8:	ed83 7b00 	vstr	d7, [r3]
 800a7fc:	e026      	b.n	800a84c <G_q+0x7e94>
 800a7fe:	bf00      	nop
 800a800:	33145c07 	.word	0x33145c07
 800a804:	3c81a626 	.word	0x3c81a626
 800a808:	858a5d48 	.word	0x858a5d48
 800a80c:	394377ce 	.word	0x394377ce
	...
  } else {
    t34_re = t95.re / 2.0;
 800a818:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 800a81c:	ed93 6b00 	vldr	d6, [r3]
 800a820:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a824:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a828:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800a82c:	443b      	add	r3, r7
 800a82e:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t95.im / 2.0;
 800a832:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 800a836:	ed93 6b02 	vldr	d6, [r3, #8]
 800a83a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a83e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a842:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800a846:	443b      	add	r3, r7
 800a848:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_re = (t92.re * 0.0 - t92.im * 3.061616997868383E-17) - (t93.re * 0.0 -
 800a84c:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 800a850:	ed93 7b00 	vldr	d7, [r3]
 800a854:	ed1f 6b12 	vldr	d6, [pc, #-72]	; 800a810 <G_q+0x7e58>
 800a858:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a85c:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 800a860:	ed93 7b02 	vldr	d7, [r3, #8]
 800a864:	ed1f 5b1a 	vldr	d5, [pc, #-104]	; 800a800 <G_q+0x7e48>
 800a868:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a86c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a870:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 800a874:	ed93 7b00 	vldr	d7, [r3]
 800a878:	ed1f 5b1b 	vldr	d5, [pc, #-108]	; 800a810 <G_q+0x7e58>
 800a87c:	ee27 5b05 	vmul.f64	d5, d7, d5
    t93.im * 3.061616997868383E-17);
 800a880:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 800a884:	ed93 7b02 	vldr	d7, [r3, #8]
 800a888:	ed1f 4b23 	vldr	d4, [pc, #-140]	; 800a800 <G_q+0x7e48>
 800a88c:	ee27 7b04 	vmul.f64	d7, d7, d4
  t20_re = (t92.re * 0.0 - t92.im * 3.061616997868383E-17) - (t93.re * 0.0 -
 800a890:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a894:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a898:	f241 3348 	movw	r3, #4936	; 0x1348
 800a89c:	443b      	add	r3, r7
 800a89e:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t92.re * 3.061616997868383E-17 + t92.im * 0.0) - (t93.re *
 800a8a2:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 800a8a6:	ed93 7b00 	vldr	d7, [r3]
 800a8aa:	ed1f 6b2b 	vldr	d6, [pc, #-172]	; 800a800 <G_q+0x7e48>
 800a8ae:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a8b2:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 800a8b6:	ed93 7b02 	vldr	d7, [r3, #8]
 800a8ba:	ed1f 5b2b 	vldr	d5, [pc, #-172]	; 800a810 <G_q+0x7e58>
 800a8be:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a8c2:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a8c6:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 800a8ca:	ed93 7b00 	vldr	d7, [r3]
 800a8ce:	ed1f 5b34 	vldr	d5, [pc, #-208]	; 800a800 <G_q+0x7e48>
 800a8d2:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t93.im * 0.0);
 800a8d6:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 800a8da:	ed93 7b02 	vldr	d7, [r3, #8]
 800a8de:	ed1f 4b34 	vldr	d4, [pc, #-208]	; 800a810 <G_q+0x7e58>
 800a8e2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a8e6:	ee35 7b07 	vadd.f64	d7, d5, d7
  t20_im = (t92.re * 3.061616997868383E-17 + t92.im * 0.0) - (t93.re *
 800a8ea:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a8ee:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800a8f2:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t16_re + t34_re) + 7.498798913309288E-33;
 800a8f6:	f241 3368 	movw	r3, #4968	; 0x1368
 800a8fa:	443b      	add	r3, r7
 800a8fc:	ed93 6b00 	vldr	d6, [r3]
 800a900:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800a904:	443b      	add	r3, r7
 800a906:	ed93 7b00 	vldr	d7, [r3]
 800a90a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a90e:	ed1f 6b42 	vldr	d6, [pc, #-264]	; 800a808 <G_q+0x7e50>
 800a912:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a916:	f241 3368 	movw	r3, #4968	; 0x1368
 800a91a:	443b      	add	r3, r7
 800a91c:	ed83 7b00 	vstr	d7, [r3]
  t16_im += t34_im;
 800a920:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800a924:	ed93 6b00 	vldr	d6, [r3]
 800a928:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800a92c:	443b      	add	r3, r7
 800a92e:	ed93 7b00 	vldr	d7, [r3]
 800a932:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a936:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800a93a:	ed83 7b00 	vstr	d7, [r3]
  t72_re = (t41_im * t13_re - t8_re * t13_im) - (t20_re * t16_re - t20_im *
 800a93e:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800a942:	ed93 6b00 	vldr	d6, [r3]
 800a946:	f241 3378 	movw	r3, #4984	; 0x1378
 800a94a:	443b      	add	r3, r7
 800a94c:	ed93 7b00 	vldr	d7, [r3]
 800a950:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a954:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800a958:	ed93 5b00 	vldr	d5, [r3]
 800a95c:	f241 3370 	movw	r3, #4976	; 0x1370
 800a960:	443b      	add	r3, r7
 800a962:	ed93 7b00 	vldr	d7, [r3]
 800a966:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a96a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a96e:	f241 3348 	movw	r3, #4936	; 0x1348
 800a972:	443b      	add	r3, r7
 800a974:	ed93 5b00 	vldr	d5, [r3]
 800a978:	f241 3368 	movw	r3, #4968	; 0x1368
 800a97c:	443b      	add	r3, r7
 800a97e:	ed93 7b00 	vldr	d7, [r3]
 800a982:	ee25 5b07 	vmul.f64	d5, d5, d7
 800a986:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800a98a:	ed93 4b00 	vldr	d4, [r3]
 800a98e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800a992:	ed93 7b00 	vldr	d7, [r3]
 800a996:	ee24 7b07 	vmul.f64	d7, d4, d7
 800a99a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a99e:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800a9a2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a9a6:	ed83 7b00 	vstr	d7, [r3]
    t16_im);
  t8_re = (t41_im * t13_im + t8_re * t13_re) - (t20_re * t16_im + t20_im *
 800a9aa:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800a9ae:	ed93 6b00 	vldr	d6, [r3]
 800a9b2:	f241 3370 	movw	r3, #4976	; 0x1370
 800a9b6:	443b      	add	r3, r7
 800a9b8:	ed93 7b00 	vldr	d7, [r3]
 800a9bc:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a9c0:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800a9c4:	ed93 5b00 	vldr	d5, [r3]
 800a9c8:	f241 3378 	movw	r3, #4984	; 0x1378
 800a9cc:	443b      	add	r3, r7
 800a9ce:	ed93 7b00 	vldr	d7, [r3]
 800a9d2:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a9d6:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a9da:	f241 3348 	movw	r3, #4936	; 0x1348
 800a9de:	443b      	add	r3, r7
 800a9e0:	ed93 5b00 	vldr	d5, [r3]
 800a9e4:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800a9e8:	ed93 7b00 	vldr	d7, [r3]
 800a9ec:	ee25 5b07 	vmul.f64	d5, d5, d7
 800a9f0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800a9f4:	ed93 4b00 	vldr	d4, [r3]
 800a9f8:	f241 3368 	movw	r3, #4968	; 0x1368
 800a9fc:	443b      	add	r3, r7
 800a9fe:	ed93 7b00 	vldr	d7, [r3]
 800aa02:	ee24 7b07 	vmul.f64	d7, d4, d7
 800aa06:	ee35 7b07 	vadd.f64	d7, d5, d7
 800aa0a:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800aa0e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800aa12:	ed83 7b00 	vstr	d7, [r3]
    t16_re);
  t58_im = (t100.re * 0.0 - t100.im * 0.5) - (t101.re * 0.0 - t101.im * 0.5);
 800aa16:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800aa1a:	ed93 7b00 	vldr	d7, [r3]
 800aa1e:	ed1f 6b84 	vldr	d6, [pc, #-528]	; 800a810 <G_q+0x7e58>
 800aa22:	ee27 6b06 	vmul.f64	d6, d7, d6
 800aa26:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800aa2a:	ed93 7b02 	vldr	d7, [r3, #8]
 800aa2e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800aa32:	ee27 7b05 	vmul.f64	d7, d7, d5
 800aa36:	ee36 6b47 	vsub.f64	d6, d6, d7
 800aa3a:	4be7      	ldr	r3, [pc, #924]	; (800add8 <G_q+0x8420>)
 800aa3c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800aa40:	443a      	add	r2, r7
 800aa42:	4413      	add	r3, r2
 800aa44:	ed93 7b00 	vldr	d7, [r3]
 800aa48:	ed9f 5be1 	vldr	d5, [pc, #900]	; 800add0 <G_q+0x8418>
 800aa4c:	ee27 5b05 	vmul.f64	d5, d7, d5
 800aa50:	4be1      	ldr	r3, [pc, #900]	; (800add8 <G_q+0x8420>)
 800aa52:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800aa56:	443a      	add	r2, r7
 800aa58:	4413      	add	r3, r2
 800aa5a:	ed93 7b02 	vldr	d7, [r3, #8]
 800aa5e:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800aa62:	ee27 7b04 	vmul.f64	d7, d7, d4
 800aa66:	ee35 7b47 	vsub.f64	d7, d5, d7
 800aa6a:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800aa6e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800aa72:	ed83 7b00 	vstr	d7, [r3]
  t60_re = (t100.re * 0.5 + t100.im * 0.0) - (t101.re * 0.5 + t101.im * 0.0);
 800aa76:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800aa7a:	ed93 7b00 	vldr	d7, [r3]
 800aa7e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800aa82:	ee27 6b06 	vmul.f64	d6, d7, d6
 800aa86:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800aa8a:	ed93 7b02 	vldr	d7, [r3, #8]
 800aa8e:	ed9f 5bd0 	vldr	d5, [pc, #832]	; 800add0 <G_q+0x8418>
 800aa92:	ee27 7b05 	vmul.f64	d7, d7, d5
 800aa96:	ee36 6b07 	vadd.f64	d6, d6, d7
 800aa9a:	4bcf      	ldr	r3, [pc, #828]	; (800add8 <G_q+0x8420>)
 800aa9c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800aaa0:	443a      	add	r2, r7
 800aaa2:	4413      	add	r3, r2
 800aaa4:	ed93 7b00 	vldr	d7, [r3]
 800aaa8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800aaac:	ee27 5b05 	vmul.f64	d5, d7, d5
 800aab0:	4bc9      	ldr	r3, [pc, #804]	; (800add8 <G_q+0x8420>)
 800aab2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800aab6:	443a      	add	r2, r7
 800aab8:	4413      	add	r3, r2
 800aaba:	ed93 7b02 	vldr	d7, [r3, #8]
 800aabe:	ed9f 4bc4 	vldr	d4, [pc, #784]	; 800add0 <G_q+0x8418>
 800aac2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800aac6:	ee35 7b07 	vadd.f64	d7, d5, d7
 800aaca:	f241 2350 	movw	r3, #4688	; 0x1250
 800aace:	443b      	add	r3, r7
 800aad0:	ee36 7b47 	vsub.f64	d7, d6, d7
 800aad4:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t104.re * 0.0 - t104.im * 0.5) - (t105.re * 0.0 - t105.im * 0.5);
 800aad8:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 800aadc:	ed93 7b00 	vldr	d7, [r3]
 800aae0:	ed9f 6bbb 	vldr	d6, [pc, #748]	; 800add0 <G_q+0x8418>
 800aae4:	ee27 6b06 	vmul.f64	d6, d7, d6
 800aae8:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 800aaec:	ed93 7b02 	vldr	d7, [r3, #8]
 800aaf0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800aaf4:	ee27 7b05 	vmul.f64	d7, d7, d5
 800aaf8:	ee36 6b47 	vsub.f64	d6, d6, d7
 800aafc:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800ab00:	ed93 7b00 	vldr	d7, [r3]
 800ab04:	ed9f 5bb2 	vldr	d5, [pc, #712]	; 800add0 <G_q+0x8418>
 800ab08:	ee27 5b05 	vmul.f64	d5, d7, d5
 800ab0c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800ab10:	ed93 7b02 	vldr	d7, [r3, #8]
 800ab14:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800ab18:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ab1c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ab20:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ab24:	f241 3370 	movw	r3, #4976	; 0x1370
 800ab28:	443b      	add	r3, r7
 800ab2a:	ed83 7b00 	vstr	d7, [r3]
  t76_re = (t104.re * 0.5 + t104.im * 0.0) - (t105.re * 0.5 + t105.im * 0.0);
 800ab2e:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 800ab32:	ed93 7b00 	vldr	d7, [r3]
 800ab36:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800ab3a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ab3e:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 800ab42:	ed93 7b02 	vldr	d7, [r3, #8]
 800ab46:	ed9f 5ba2 	vldr	d5, [pc, #648]	; 800add0 <G_q+0x8418>
 800ab4a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ab4e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ab52:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800ab56:	ed93 7b00 	vldr	d7, [r3]
 800ab5a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ab5e:	ee27 5b05 	vmul.f64	d5, d7, d5
 800ab62:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800ab66:	ed93 7b02 	vldr	d7, [r3, #8]
 800ab6a:	ed9f 4b99 	vldr	d4, [pc, #612]	; 800add0 <G_q+0x8418>
 800ab6e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ab72:	ee35 7b07 	vadd.f64	d7, d5, d7
 800ab76:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800ab7a:	443b      	add	r3, r7
 800ab7c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ab80:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t106.re * 0.0 - t106.im * 0.5) - (t107.re * 0.0 - t107.im * 0.5);
 800ab84:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800ab88:	ed93 7b00 	vldr	d7, [r3]
 800ab8c:	ed9f 6b90 	vldr	d6, [pc, #576]	; 800add0 <G_q+0x8418>
 800ab90:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ab94:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800ab98:	ed93 7b02 	vldr	d7, [r3, #8]
 800ab9c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800aba0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800aba4:	ee36 6b47 	vsub.f64	d6, d6, d7
 800aba8:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 800abac:	ed93 7b00 	vldr	d7, [r3]
 800abb0:	ed9f 5b87 	vldr	d5, [pc, #540]	; 800add0 <G_q+0x8418>
 800abb4:	ee27 5b05 	vmul.f64	d5, d7, d5
 800abb8:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 800abbc:	ed93 7b02 	vldr	d7, [r3, #8]
 800abc0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800abc4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800abc8:	ee35 7b47 	vsub.f64	d7, d5, d7
 800abcc:	ee36 7b47 	vsub.f64	d7, d6, d7
 800abd0:	f241 3348 	movw	r3, #4936	; 0x1348
 800abd4:	443b      	add	r3, r7
 800abd6:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t106.re * 0.5 + t106.im * 0.0) - (t107.re * 0.5 + t107.im * 0.0);
 800abda:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800abde:	ed93 7b00 	vldr	d7, [r3]
 800abe2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800abe6:	ee27 6b06 	vmul.f64	d6, d7, d6
 800abea:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800abee:	ed93 7b02 	vldr	d7, [r3, #8]
 800abf2:	ed9f 5b77 	vldr	d5, [pc, #476]	; 800add0 <G_q+0x8418>
 800abf6:	ee27 7b05 	vmul.f64	d7, d7, d5
 800abfa:	ee36 6b07 	vadd.f64	d6, d6, d7
 800abfe:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 800ac02:	ed93 7b00 	vldr	d7, [r3]
 800ac06:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ac0a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800ac0e:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 800ac12:	ed93 7b02 	vldr	d7, [r3, #8]
 800ac16:	ed9f 4b6e 	vldr	d4, [pc, #440]	; 800add0 <G_q+0x8418>
 800ac1a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ac1e:	ee35 7b07 	vadd.f64	d7, d5, d7
 800ac22:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ac26:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800ac2a:	ed83 7b00 	vstr	d7, [r3]
  if (t108.im == 0.0) {
 800ac2e:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 800ac32:	ed93 7b02 	vldr	d7, [r3, #8]
 800ac36:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ac3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac3e:	d115      	bne.n	800ac6c <G_q+0x82b4>
    t12_re = t108.re / 2.0;
 800ac40:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 800ac44:	ed93 6b00 	vldr	d6, [r3]
 800ac48:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ac4c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ac50:	f241 3388 	movw	r3, #5000	; 0x1388
 800ac54:	443b      	add	r3, r7
 800ac56:	ed83 7b00 	vstr	d7, [r3]
    t12_im = 0.0;
 800ac5a:	f04f 0300 	mov.w	r3, #0
 800ac5e:	f04f 0400 	mov.w	r4, #0
 800ac62:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800ac66:	e9c2 3400 	strd	r3, r4, [r2]
 800ac6a:	e037      	b.n	800acdc <G_q+0x8324>
  } else if (t108.re == 0.0) {
 800ac6c:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 800ac70:	ed93 7b00 	vldr	d7, [r3]
 800ac74:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ac78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac7c:	d115      	bne.n	800acaa <G_q+0x82f2>
    t12_re = 0.0;
 800ac7e:	f04f 0300 	mov.w	r3, #0
 800ac82:	f04f 0400 	mov.w	r4, #0
 800ac86:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac8a:	443a      	add	r2, r7
 800ac8c:	e9c2 3400 	strd	r3, r4, [r2]
    t12_im = t108.im / 2.0;
 800ac90:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 800ac94:	ed93 6b02 	vldr	d6, [r3, #8]
 800ac98:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ac9c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800aca0:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800aca4:	ed83 7b00 	vstr	d7, [r3]
 800aca8:	e018      	b.n	800acdc <G_q+0x8324>
  } else {
    t12_re = t108.re / 2.0;
 800acaa:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 800acae:	ed93 6b00 	vldr	d6, [r3]
 800acb2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800acb6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800acba:	f241 3388 	movw	r3, #5000	; 0x1388
 800acbe:	443b      	add	r3, r7
 800acc0:	ed83 7b00 	vstr	d7, [r3]
    t12_im = t108.im / 2.0;
 800acc4:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 800acc8:	ed93 6b02 	vldr	d6, [r3, #8]
 800accc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800acd0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800acd4:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800acd8:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t109.im == 0.0) {
 800acdc:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800ace0:	ed93 7b02 	vldr	d7, [r3, #8]
 800ace4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ace8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acec:	d116      	bne.n	800ad1c <G_q+0x8364>
    t34_re = t109.re / 2.0;
 800acee:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800acf2:	ed93 6b00 	vldr	d6, [r3]
 800acf6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800acfa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800acfe:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800ad02:	443b      	add	r3, r7
 800ad04:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800ad08:	f04f 0300 	mov.w	r3, #0
 800ad0c:	f04f 0400 	mov.w	r4, #0
 800ad10:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800ad14:	443a      	add	r2, r7
 800ad16:	e9c2 3400 	strd	r3, r4, [r2]
 800ad1a:	e039      	b.n	800ad90 <G_q+0x83d8>
  } else if (t109.re == 0.0) {
 800ad1c:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800ad20:	ed93 7b00 	vldr	d7, [r3]
 800ad24:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ad28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad2c:	d116      	bne.n	800ad5c <G_q+0x83a4>
    t34_re = 0.0;
 800ad2e:	f04f 0300 	mov.w	r3, #0
 800ad32:	f04f 0400 	mov.w	r4, #0
 800ad36:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800ad3a:	443a      	add	r2, r7
 800ad3c:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t109.im / 2.0;
 800ad40:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800ad44:	ed93 6b02 	vldr	d6, [r3, #8]
 800ad48:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ad4c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ad50:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800ad54:	443b      	add	r3, r7
 800ad56:	ed83 7b00 	vstr	d7, [r3]
 800ad5a:	e019      	b.n	800ad90 <G_q+0x83d8>
  } else {
    t34_re = t109.re / 2.0;
 800ad5c:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800ad60:	ed93 6b00 	vldr	d6, [r3]
 800ad64:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ad68:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ad6c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800ad70:	443b      	add	r3, r7
 800ad72:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t109.im / 2.0;
 800ad76:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800ad7a:	ed93 6b02 	vldr	d6, [r3, #8]
 800ad7e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ad82:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ad86:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800ad8a:	443b      	add	r3, r7
 800ad8c:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t110.im == 0.0) {
 800ad90:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800ad94:	ed93 7b02 	vldr	d7, [r3, #8]
 800ad98:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ad9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ada0:	d11c      	bne.n	800addc <G_q+0x8424>
    b_t10_re = t110.re / 2.0;
 800ada2:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800ada6:	ed93 6b00 	vldr	d6, [r3]
 800adaa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800adae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800adb2:	f241 3338 	movw	r3, #4920	; 0x1338
 800adb6:	443b      	add	r3, r7
 800adb8:	ed83 7b00 	vstr	d7, [r3]
    t85_im = 0.0;
 800adbc:	f04f 0300 	mov.w	r3, #0
 800adc0:	f04f 0400 	mov.w	r4, #0
 800adc4:	f241 3218 	movw	r2, #4888	; 0x1318
 800adc8:	443a      	add	r2, r7
 800adca:	e9c2 3400 	strd	r3, r4, [r2]
 800adce:	e03f      	b.n	800ae50 <G_q+0x8498>
	...
 800add8:	ffffedf0 	.word	0xffffedf0
  } else if (t110.re == 0.0) {
 800addc:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800ade0:	ed93 7b00 	vldr	d7, [r3]
 800ade4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ade8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adec:	d116      	bne.n	800ae1c <G_q+0x8464>
    b_t10_re = 0.0;
 800adee:	f04f 0300 	mov.w	r3, #0
 800adf2:	f04f 0400 	mov.w	r4, #0
 800adf6:	f241 3238 	movw	r2, #4920	; 0x1338
 800adfa:	443a      	add	r2, r7
 800adfc:	e9c2 3400 	strd	r3, r4, [r2]
    t85_im = t110.im / 2.0;
 800ae00:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800ae04:	ed93 6b02 	vldr	d6, [r3, #8]
 800ae08:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ae0c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ae10:	f241 3318 	movw	r3, #4888	; 0x1318
 800ae14:	443b      	add	r3, r7
 800ae16:	ed83 7b00 	vstr	d7, [r3]
 800ae1a:	e019      	b.n	800ae50 <G_q+0x8498>
  } else {
    b_t10_re = t110.re / 2.0;
 800ae1c:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800ae20:	ed93 6b00 	vldr	d6, [r3]
 800ae24:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ae28:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ae2c:	f241 3338 	movw	r3, #4920	; 0x1338
 800ae30:	443b      	add	r3, r7
 800ae32:	ed83 7b00 	vstr	d7, [r3]
    t85_im = t110.im / 2.0;
 800ae36:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800ae3a:	ed93 6b02 	vldr	d6, [r3, #8]
 800ae3e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ae42:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ae46:	f241 3318 	movw	r3, #4888	; 0x1318
 800ae4a:	443b      	add	r3, r7
 800ae4c:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t111.im == 0.0) {
 800ae50:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 800ae54:	ed93 7b02 	vldr	d7, [r3, #8]
 800ae58:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ae5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae60:	d115      	bne.n	800ae8e <G_q+0x84d6>
    t16_re = t111.re / 2.0;
 800ae62:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 800ae66:	ed93 6b00 	vldr	d6, [r3]
 800ae6a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ae6e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ae72:	f241 3368 	movw	r3, #4968	; 0x1368
 800ae76:	443b      	add	r3, r7
 800ae78:	ed83 7b00 	vstr	d7, [r3]
    t16_im = 0.0;
 800ae7c:	f04f 0300 	mov.w	r3, #0
 800ae80:	f04f 0400 	mov.w	r4, #0
 800ae84:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800ae88:	e9c2 3400 	strd	r3, r4, [r2]
 800ae8c:	e037      	b.n	800aefe <G_q+0x8546>
  } else if (t111.re == 0.0) {
 800ae8e:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 800ae92:	ed93 7b00 	vldr	d7, [r3]
 800ae96:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ae9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae9e:	d115      	bne.n	800aecc <G_q+0x8514>
    t16_re = 0.0;
 800aea0:	f04f 0300 	mov.w	r3, #0
 800aea4:	f04f 0400 	mov.w	r4, #0
 800aea8:	f241 3268 	movw	r2, #4968	; 0x1368
 800aeac:	443a      	add	r2, r7
 800aeae:	e9c2 3400 	strd	r3, r4, [r2]
    t16_im = t111.im / 2.0;
 800aeb2:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 800aeb6:	ed93 6b02 	vldr	d6, [r3, #8]
 800aeba:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800aebe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800aec2:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800aec6:	ed83 7b00 	vstr	d7, [r3]
 800aeca:	e018      	b.n	800aefe <G_q+0x8546>
  } else {
    t16_re = t111.re / 2.0;
 800aecc:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 800aed0:	ed93 6b00 	vldr	d6, [r3]
 800aed4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800aed8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800aedc:	f241 3368 	movw	r3, #4968	; 0x1368
 800aee0:	443b      	add	r3, r7
 800aee2:	ed83 7b00 	vstr	d7, [r3]
    t16_im = t111.im / 2.0;
 800aee6:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 800aeea:	ed93 6b02 	vldr	d6, [r3, #8]
 800aeee:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800aef2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800aef6:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800aefa:	ed83 7b00 	vstr	d7, [r3]
  }

  t12_re += t34_re;
 800aefe:	f241 3388 	movw	r3, #5000	; 0x1388
 800af02:	443b      	add	r3, r7
 800af04:	ed93 6b00 	vldr	d6, [r3]
 800af08:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800af0c:	443b      	add	r3, r7
 800af0e:	ed93 7b00 	vldr	d7, [r3]
 800af12:	ee36 7b07 	vadd.f64	d7, d6, d7
 800af16:	f241 3388 	movw	r3, #5000	; 0x1388
 800af1a:	443b      	add	r3, r7
 800af1c:	ed83 7b00 	vstr	d7, [r3]
  t12_im += t34_im;
 800af20:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800af24:	ed93 6b00 	vldr	d6, [r3]
 800af28:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800af2c:	443b      	add	r3, r7
 800af2e:	ed93 7b00 	vldr	d7, [r3]
 800af32:	ee36 7b07 	vadd.f64	d7, d6, d7
 800af36:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800af3a:	ed83 7b00 	vstr	d7, [r3]
  b_t10_re = (b_t10_re + t16_re) + 7.498798913309288E-33;
 800af3e:	f241 3338 	movw	r3, #4920	; 0x1338
 800af42:	443b      	add	r3, r7
 800af44:	ed93 6b00 	vldr	d6, [r3]
 800af48:	f241 3368 	movw	r3, #4968	; 0x1368
 800af4c:	443b      	add	r3, r7
 800af4e:	ed93 7b00 	vldr	d7, [r3]
 800af52:	ee36 7b07 	vadd.f64	d7, d6, d7
 800af56:	ed9f 6b60 	vldr	d6, [pc, #384]	; 800b0d8 <G_q+0x8720>
 800af5a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800af5e:	f241 3338 	movw	r3, #4920	; 0x1338
 800af62:	443b      	add	r3, r7
 800af64:	ed83 7b00 	vstr	d7, [r3]
  t85_im += t16_im;
 800af68:	f241 3318 	movw	r3, #4888	; 0x1318
 800af6c:	443b      	add	r3, r7
 800af6e:	ed93 6b00 	vldr	d6, [r3]
 800af72:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800af76:	ed93 7b00 	vldr	d7, [r3]
 800af7a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800af7e:	f241 3318 	movw	r3, #4888	; 0x1318
 800af82:	443b      	add	r3, r7
 800af84:	ed83 7b00 	vstr	d7, [r3]
  if (t102.im == 0.0) {
 800af88:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800af8c:	ed93 7b02 	vldr	d7, [r3, #8]
 800af90:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800af94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af98:	d116      	bne.n	800afc8 <G_q+0x8610>
    t23_re = t102.re / 2.0;
 800af9a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800af9e:	ed93 6b00 	vldr	d6, [r3]
 800afa2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800afa6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800afaa:	f241 3330 	movw	r3, #4912	; 0x1330
 800afae:	443b      	add	r3, r7
 800afb0:	ed83 7b00 	vstr	d7, [r3]
    t3_im = 0.0;
 800afb4:	f04f 0300 	mov.w	r3, #0
 800afb8:	f04f 0400 	mov.w	r4, #0
 800afbc:	f241 3210 	movw	r2, #4880	; 0x1310
 800afc0:	443a      	add	r2, r7
 800afc2:	e9c2 3400 	strd	r3, r4, [r2]
 800afc6:	e039      	b.n	800b03c <G_q+0x8684>
  } else if (t102.re == 0.0) {
 800afc8:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800afcc:	ed93 7b00 	vldr	d7, [r3]
 800afd0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800afd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afd8:	d116      	bne.n	800b008 <G_q+0x8650>
    t23_re = 0.0;
 800afda:	f04f 0300 	mov.w	r3, #0
 800afde:	f04f 0400 	mov.w	r4, #0
 800afe2:	f241 3230 	movw	r2, #4912	; 0x1330
 800afe6:	443a      	add	r2, r7
 800afe8:	e9c2 3400 	strd	r3, r4, [r2]
    t3_im = t102.im / 2.0;
 800afec:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800aff0:	ed93 6b02 	vldr	d6, [r3, #8]
 800aff4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800aff8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800affc:	f241 3310 	movw	r3, #4880	; 0x1310
 800b000:	443b      	add	r3, r7
 800b002:	ed83 7b00 	vstr	d7, [r3]
 800b006:	e019      	b.n	800b03c <G_q+0x8684>
  } else {
    t23_re = t102.re / 2.0;
 800b008:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800b00c:	ed93 6b00 	vldr	d6, [r3]
 800b010:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b014:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b018:	f241 3330 	movw	r3, #4912	; 0x1330
 800b01c:	443b      	add	r3, r7
 800b01e:	ed83 7b00 	vstr	d7, [r3]
    t3_im = t102.im / 2.0;
 800b022:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800b026:	ed93 6b02 	vldr	d6, [r3, #8]
 800b02a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b02e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b032:	f241 3310 	movw	r3, #4880	; 0x1310
 800b036:	443b      	add	r3, r7
 800b038:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t103.im == 0.0) {
 800b03c:	4b28      	ldr	r3, [pc, #160]	; (800b0e0 <G_q+0x8728>)
 800b03e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b042:	443a      	add	r2, r7
 800b044:	4413      	add	r3, r2
 800b046:	ed93 7b02 	vldr	d7, [r3, #8]
 800b04a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b04e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b052:	d119      	bne.n	800b088 <G_q+0x86d0>
    t34_re = t103.re / 2.0;
 800b054:	4b22      	ldr	r3, [pc, #136]	; (800b0e0 <G_q+0x8728>)
 800b056:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b05a:	443a      	add	r2, r7
 800b05c:	4413      	add	r3, r2
 800b05e:	ed93 6b00 	vldr	d6, [r3]
 800b062:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b066:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b06a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800b06e:	443b      	add	r3, r7
 800b070:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800b074:	f04f 0300 	mov.w	r3, #0
 800b078:	f04f 0400 	mov.w	r4, #0
 800b07c:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800b080:	443a      	add	r2, r7
 800b082:	e9c2 3400 	strd	r3, r4, [r2]
 800b086:	e04d      	b.n	800b124 <G_q+0x876c>
  } else if (t103.re == 0.0) {
 800b088:	4b15      	ldr	r3, [pc, #84]	; (800b0e0 <G_q+0x8728>)
 800b08a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b08e:	443a      	add	r2, r7
 800b090:	4413      	add	r3, r2
 800b092:	ed93 7b00 	vldr	d7, [r3]
 800b096:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b09a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b09e:	d121      	bne.n	800b0e4 <G_q+0x872c>
    t34_re = 0.0;
 800b0a0:	f04f 0300 	mov.w	r3, #0
 800b0a4:	f04f 0400 	mov.w	r4, #0
 800b0a8:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800b0ac:	443a      	add	r2, r7
 800b0ae:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t103.im / 2.0;
 800b0b2:	4b0b      	ldr	r3, [pc, #44]	; (800b0e0 <G_q+0x8728>)
 800b0b4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b0b8:	443a      	add	r2, r7
 800b0ba:	4413      	add	r3, r2
 800b0bc:	ed93 6b02 	vldr	d6, [r3, #8]
 800b0c0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b0c4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b0c8:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800b0cc:	443b      	add	r3, r7
 800b0ce:	ed83 7b00 	vstr	d7, [r3]
 800b0d2:	e027      	b.n	800b124 <G_q+0x876c>
 800b0d4:	f3af 8000 	nop.w
 800b0d8:	858a5d48 	.word	0x858a5d48
 800b0dc:	394377ce 	.word	0x394377ce
 800b0e0:	ffffee10 	.word	0xffffee10
  } else {
    t34_re = t103.re / 2.0;
 800b0e4:	4bd4      	ldr	r3, [pc, #848]	; (800b438 <G_q+0x8a80>)
 800b0e6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b0ea:	443a      	add	r2, r7
 800b0ec:	4413      	add	r3, r2
 800b0ee:	ed93 6b00 	vldr	d6, [r3]
 800b0f2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b0f6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b0fa:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800b0fe:	443b      	add	r3, r7
 800b100:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t103.im / 2.0;
 800b104:	4bcc      	ldr	r3, [pc, #816]	; (800b438 <G_q+0x8a80>)
 800b106:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b10a:	443a      	add	r2, r7
 800b10c:	4413      	add	r3, r2
 800b10e:	ed93 6b02 	vldr	d6, [r3, #8]
 800b112:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b116:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b11a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800b11e:	443b      	add	r3, r7
 800b120:	ed83 7b00 	vstr	d7, [r3]
  }

  t13_re = (t13_im * t20_re - t76_re * t20_im) + (t12_re * b_t10_re - t12_im *
 800b124:	f241 3370 	movw	r3, #4976	; 0x1370
 800b128:	443b      	add	r3, r7
 800b12a:	ed93 6b00 	vldr	d6, [r3]
 800b12e:	f241 3348 	movw	r3, #4936	; 0x1348
 800b132:	443b      	add	r3, r7
 800b134:	ed93 7b00 	vldr	d7, [r3]
 800b138:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b13c:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800b140:	443b      	add	r3, r7
 800b142:	ed93 5b00 	vldr	d5, [r3]
 800b146:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800b14a:	ed93 7b00 	vldr	d7, [r3]
 800b14e:	ee25 7b07 	vmul.f64	d7, d5, d7
 800b152:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b156:	f241 3388 	movw	r3, #5000	; 0x1388
 800b15a:	443b      	add	r3, r7
 800b15c:	ed93 5b00 	vldr	d5, [r3]
 800b160:	f241 3338 	movw	r3, #4920	; 0x1338
 800b164:	443b      	add	r3, r7
 800b166:	ed93 7b00 	vldr	d7, [r3]
 800b16a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800b16e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800b172:	ed93 4b00 	vldr	d4, [r3]
 800b176:	f241 3318 	movw	r3, #4888	; 0x1318
 800b17a:	443b      	add	r3, r7
 800b17c:	ed93 7b00 	vldr	d7, [r3]
 800b180:	ee24 7b07 	vmul.f64	d7, d4, d7
 800b184:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b188:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b18c:	f241 3378 	movw	r3, #4984	; 0x1378
 800b190:	443b      	add	r3, r7
 800b192:	ed83 7b00 	vstr	d7, [r3]
    t85_im);
  t76_re = (t13_im * t20_im + t76_re * t20_re) + (t12_re * t85_im + t12_im *
 800b196:	f241 3370 	movw	r3, #4976	; 0x1370
 800b19a:	443b      	add	r3, r7
 800b19c:	ed93 6b00 	vldr	d6, [r3]
 800b1a0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800b1a4:	ed93 7b00 	vldr	d7, [r3]
 800b1a8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b1ac:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800b1b0:	443b      	add	r3, r7
 800b1b2:	ed93 5b00 	vldr	d5, [r3]
 800b1b6:	f241 3348 	movw	r3, #4936	; 0x1348
 800b1ba:	443b      	add	r3, r7
 800b1bc:	ed93 7b00 	vldr	d7, [r3]
 800b1c0:	ee25 7b07 	vmul.f64	d7, d5, d7
 800b1c4:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b1c8:	f241 3388 	movw	r3, #5000	; 0x1388
 800b1cc:	443b      	add	r3, r7
 800b1ce:	ed93 5b00 	vldr	d5, [r3]
 800b1d2:	f241 3318 	movw	r3, #4888	; 0x1318
 800b1d6:	443b      	add	r3, r7
 800b1d8:	ed93 7b00 	vldr	d7, [r3]
 800b1dc:	ee25 5b07 	vmul.f64	d5, d5, d7
 800b1e0:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800b1e4:	ed93 4b00 	vldr	d4, [r3]
 800b1e8:	f241 3338 	movw	r3, #4920	; 0x1338
 800b1ec:	443b      	add	r3, r7
 800b1ee:	ed93 7b00 	vldr	d7, [r3]
 800b1f2:	ee24 7b07 	vmul.f64	d7, d4, d7
 800b1f6:	ee35 7b07 	vadd.f64	d7, d5, d7
 800b1fa:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800b1fe:	443b      	add	r3, r7
 800b200:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b204:	ed83 7b00 	vstr	d7, [r3]
    b_t10_re);
  t23_re += t34_re;
 800b208:	f241 3330 	movw	r3, #4912	; 0x1330
 800b20c:	443b      	add	r3, r7
 800b20e:	ed93 6b00 	vldr	d6, [r3]
 800b212:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800b216:	443b      	add	r3, r7
 800b218:	ed93 7b00 	vldr	d7, [r3]
 800b21c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b220:	f241 3330 	movw	r3, #4912	; 0x1330
 800b224:	443b      	add	r3, r7
 800b226:	ed83 7b00 	vstr	d7, [r3]
  t3_im += t34_im;
 800b22a:	f241 3310 	movw	r3, #4880	; 0x1310
 800b22e:	443b      	add	r3, r7
 800b230:	ed93 6b00 	vldr	d6, [r3]
 800b234:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800b238:	443b      	add	r3, r7
 800b23a:	ed93 7b00 	vldr	d7, [r3]
 800b23e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b242:	f241 3310 	movw	r3, #4880	; 0x1310
 800b246:	443b      	add	r3, r7
 800b248:	ed83 7b00 	vstr	d7, [r3]
  t43_re = (t112.re * 0.0 - t112.im * 0.5) - (t113.re * 0.0 - t113.im * 0.5);
 800b24c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b250:	ed93 7b00 	vldr	d7, [r3]
 800b254:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800b430 <G_q+0x8a78>
 800b258:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b25c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b260:	ed93 7b02 	vldr	d7, [r3, #8]
 800b264:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b268:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b26c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b270:	4b72      	ldr	r3, [pc, #456]	; (800b43c <G_q+0x8a84>)
 800b272:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b276:	443a      	add	r2, r7
 800b278:	4413      	add	r3, r2
 800b27a:	ed93 7b00 	vldr	d7, [r3]
 800b27e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800b430 <G_q+0x8a78>
 800b282:	ee27 5b05 	vmul.f64	d5, d7, d5
 800b286:	4b6d      	ldr	r3, [pc, #436]	; (800b43c <G_q+0x8a84>)
 800b288:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b28c:	443a      	add	r2, r7
 800b28e:	4413      	add	r3, r2
 800b290:	ed93 7b02 	vldr	d7, [r3, #8]
 800b294:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800b298:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b29c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b2a0:	f241 2358 	movw	r3, #4696	; 0x1258
 800b2a4:	443b      	add	r3, r7
 800b2a6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b2aa:	ed83 7b00 	vstr	d7, [r3]
  t41_re = (t112.re * 0.5 + t112.im * 0.0) - (t113.re * 0.5 + t113.im * 0.0);
 800b2ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b2b2:	ed93 7b00 	vldr	d7, [r3]
 800b2b6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800b2ba:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b2be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b2c2:	ed93 7b02 	vldr	d7, [r3, #8]
 800b2c6:	ed9f 5b5a 	vldr	d5, [pc, #360]	; 800b430 <G_q+0x8a78>
 800b2ca:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b2ce:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b2d2:	4b5a      	ldr	r3, [pc, #360]	; (800b43c <G_q+0x8a84>)
 800b2d4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b2d8:	443a      	add	r2, r7
 800b2da:	4413      	add	r3, r2
 800b2dc:	ed93 7b00 	vldr	d7, [r3]
 800b2e0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b2e4:	ee27 5b05 	vmul.f64	d5, d7, d5
 800b2e8:	4b54      	ldr	r3, [pc, #336]	; (800b43c <G_q+0x8a84>)
 800b2ea:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b2ee:	443a      	add	r2, r7
 800b2f0:	4413      	add	r3, r2
 800b2f2:	ed93 7b02 	vldr	d7, [r3, #8]
 800b2f6:	ed9f 4b4e 	vldr	d4, [pc, #312]	; 800b430 <G_q+0x8a78>
 800b2fa:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b2fe:	ee35 7b07 	vadd.f64	d7, d5, d7
 800b302:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b306:	f241 3308 	movw	r3, #4872	; 0x1308
 800b30a:	443b      	add	r3, r7
 800b30c:	ed83 7b00 	vstr	d7, [r3]
  t41_im = (t72_re * t58_im - t8_re * t60_re) + (t13_re * t23_re - t76_re *
 800b310:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800b314:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800b318:	ed92 6b00 	vldr	d6, [r2]
 800b31c:	ed93 7b00 	vldr	d7, [r3]
 800b320:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b324:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800b328:	f241 2350 	movw	r3, #4688	; 0x1250
 800b32c:	443b      	add	r3, r7
 800b32e:	ed92 5b00 	vldr	d5, [r2]
 800b332:	ed93 7b00 	vldr	d7, [r3]
 800b336:	ee25 7b07 	vmul.f64	d7, d5, d7
 800b33a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b33e:	f241 3378 	movw	r3, #4984	; 0x1378
 800b342:	443b      	add	r3, r7
 800b344:	ed93 5b00 	vldr	d5, [r3]
 800b348:	f241 3330 	movw	r3, #4912	; 0x1330
 800b34c:	443b      	add	r3, r7
 800b34e:	ed93 7b00 	vldr	d7, [r3]
 800b352:	ee25 5b07 	vmul.f64	d5, d5, d7
 800b356:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800b35a:	443b      	add	r3, r7
 800b35c:	ed93 4b00 	vldr	d4, [r3]
 800b360:	f241 3310 	movw	r3, #4880	; 0x1310
 800b364:	443b      	add	r3, r7
 800b366:	ed93 7b00 	vldr	d7, [r3]
 800b36a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800b36e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b372:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b376:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800b37a:	ed83 7b00 	vstr	d7, [r3]
    t3_im);
  t8_re = (t72_re * t60_re + t8_re * t58_im) + (t13_re * t3_im + t76_re * t23_re);
 800b37e:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800b382:	f241 2350 	movw	r3, #4688	; 0x1250
 800b386:	443b      	add	r3, r7
 800b388:	ed92 6b00 	vldr	d6, [r2]
 800b38c:	ed93 7b00 	vldr	d7, [r3]
 800b390:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b394:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800b398:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800b39c:	ed92 5b00 	vldr	d5, [r2]
 800b3a0:	ed93 7b00 	vldr	d7, [r3]
 800b3a4:	ee25 7b07 	vmul.f64	d7, d5, d7
 800b3a8:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b3ac:	f241 3378 	movw	r3, #4984	; 0x1378
 800b3b0:	443b      	add	r3, r7
 800b3b2:	ed93 5b00 	vldr	d5, [r3]
 800b3b6:	f241 3310 	movw	r3, #4880	; 0x1310
 800b3ba:	443b      	add	r3, r7
 800b3bc:	ed93 7b00 	vldr	d7, [r3]
 800b3c0:	ee25 5b07 	vmul.f64	d5, d5, d7
 800b3c4:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800b3c8:	443b      	add	r3, r7
 800b3ca:	ed93 4b00 	vldr	d4, [r3]
 800b3ce:	f241 3330 	movw	r3, #4912	; 0x1330
 800b3d2:	443b      	add	r3, r7
 800b3d4:	ed93 7b00 	vldr	d7, [r3]
 800b3d8:	ee24 7b07 	vmul.f64	d7, d4, d7
 800b3dc:	ee35 7b07 	vadd.f64	d7, d5, d7
 800b3e0:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800b3e4:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b3e8:	ed83 7b00 	vstr	d7, [r3]
  if (t124.im == 0.0) {
 800b3ec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b3f0:	ed93 7b02 	vldr	d7, [r3, #8]
 800b3f4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b3f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3fc:	d120      	bne.n	800b440 <G_q+0x8a88>
    t43_im = t124.re / 2.0;
 800b3fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b402:	ed93 6b00 	vldr	d6, [r3]
 800b406:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b40a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b40e:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800b412:	443b      	add	r3, r7
 800b414:	ed83 7b00 	vstr	d7, [r3]
    b_t54_re = 0.0;
 800b418:	f04f 0300 	mov.w	r3, #0
 800b41c:	f04f 0400 	mov.w	r4, #0
 800b420:	f241 22f0 	movw	r2, #4848	; 0x12f0
 800b424:	443a      	add	r2, r7
 800b426:	e9c2 3400 	strd	r3, r4, [r2]
 800b42a:	e043      	b.n	800b4b4 <G_q+0x8afc>
 800b42c:	f3af 8000 	nop.w
	...
 800b438:	ffffee10 	.word	0xffffee10
 800b43c:	ffffec90 	.word	0xffffec90
  } else if (t124.re == 0.0) {
 800b440:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b444:	ed93 7b00 	vldr	d7, [r3]
 800b448:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b44c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b450:	d116      	bne.n	800b480 <G_q+0x8ac8>
    t43_im = 0.0;
 800b452:	f04f 0300 	mov.w	r3, #0
 800b456:	f04f 0400 	mov.w	r4, #0
 800b45a:	f241 22f8 	movw	r2, #4856	; 0x12f8
 800b45e:	443a      	add	r2, r7
 800b460:	e9c2 3400 	strd	r3, r4, [r2]
    b_t54_re = t124.im / 2.0;
 800b464:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b468:	ed93 6b02 	vldr	d6, [r3, #8]
 800b46c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b470:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b474:	f241 23f0 	movw	r3, #4848	; 0x12f0
 800b478:	443b      	add	r3, r7
 800b47a:	ed83 7b00 	vstr	d7, [r3]
 800b47e:	e019      	b.n	800b4b4 <G_q+0x8afc>
  } else {
    t43_im = t124.re / 2.0;
 800b480:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b484:	ed93 6b00 	vldr	d6, [r3]
 800b488:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b48c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b490:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800b494:	443b      	add	r3, r7
 800b496:	ed83 7b00 	vstr	d7, [r3]
    b_t54_re = t124.im / 2.0;
 800b49a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b49e:	ed93 6b02 	vldr	d6, [r3, #8]
 800b4a2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b4a6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b4aa:	f241 23f0 	movw	r3, #4848	; 0x12f0
 800b4ae:	443b      	add	r3, r7
 800b4b0:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t125.im == 0.0) {
 800b4b4:	4b82      	ldr	r3, [pc, #520]	; (800b6c0 <G_q+0x8d08>)
 800b4b6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b4ba:	443a      	add	r2, r7
 800b4bc:	4413      	add	r3, r2
 800b4be:	ed93 7b02 	vldr	d7, [r3, #8]
 800b4c2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b4c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4ca:	d119      	bne.n	800b500 <G_q+0x8b48>
    t55_im = t125.re / 2.0;
 800b4cc:	4b7c      	ldr	r3, [pc, #496]	; (800b6c0 <G_q+0x8d08>)
 800b4ce:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b4d2:	443a      	add	r2, r7
 800b4d4:	4413      	add	r3, r2
 800b4d6:	ed93 6b00 	vldr	d6, [r3]
 800b4da:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b4de:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b4e2:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800b4e6:	443b      	add	r3, r7
 800b4e8:	ed83 7b00 	vstr	d7, [r3]
    t70_re = 0.0;
 800b4ec:	f241 22d0 	movw	r2, #4816	; 0x12d0
 800b4f0:	443a      	add	r2, r7
 800b4f2:	f04f 0300 	mov.w	r3, #0
 800b4f6:	f04f 0400 	mov.w	r4, #0
 800b4fa:	e9c2 3400 	strd	r3, r4, [r2]
 800b4fe:	e045      	b.n	800b58c <G_q+0x8bd4>
  } else if (t125.re == 0.0) {
 800b500:	4b6f      	ldr	r3, [pc, #444]	; (800b6c0 <G_q+0x8d08>)
 800b502:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b506:	443a      	add	r2, r7
 800b508:	4413      	add	r3, r2
 800b50a:	ed93 7b00 	vldr	d7, [r3]
 800b50e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b516:	d119      	bne.n	800b54c <G_q+0x8b94>
    t55_im = 0.0;
 800b518:	f04f 0300 	mov.w	r3, #0
 800b51c:	f04f 0400 	mov.w	r4, #0
 800b520:	f241 22d8 	movw	r2, #4824	; 0x12d8
 800b524:	443a      	add	r2, r7
 800b526:	e9c2 3400 	strd	r3, r4, [r2]
    t70_re = t125.im / 2.0;
 800b52a:	4b65      	ldr	r3, [pc, #404]	; (800b6c0 <G_q+0x8d08>)
 800b52c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b530:	443a      	add	r2, r7
 800b532:	4413      	add	r3, r2
 800b534:	ed93 6b02 	vldr	d6, [r3, #8]
 800b538:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800b53c:	443b      	add	r3, r7
 800b53e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b542:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b546:	ed83 7b00 	vstr	d7, [r3]
 800b54a:	e01f      	b.n	800b58c <G_q+0x8bd4>
  } else {
    t55_im = t125.re / 2.0;
 800b54c:	4b5c      	ldr	r3, [pc, #368]	; (800b6c0 <G_q+0x8d08>)
 800b54e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b552:	443a      	add	r2, r7
 800b554:	4413      	add	r3, r2
 800b556:	ed93 6b00 	vldr	d6, [r3]
 800b55a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b55e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b562:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800b566:	443b      	add	r3, r7
 800b568:	ed83 7b00 	vstr	d7, [r3]
    t70_re = t125.im / 2.0;
 800b56c:	4b54      	ldr	r3, [pc, #336]	; (800b6c0 <G_q+0x8d08>)
 800b56e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b572:	443a      	add	r2, r7
 800b574:	4413      	add	r3, r2
 800b576:	ed93 6b02 	vldr	d6, [r3, #8]
 800b57a:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800b57e:	443b      	add	r3, r7
 800b580:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b584:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b588:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t136.im == 0.0) {
 800b58c:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800b590:	ed93 7b02 	vldr	d7, [r3, #8]
 800b594:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b59c:	d116      	bne.n	800b5cc <G_q+0x8c14>
    t70_im = t136.re / 2.0;
 800b59e:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800b5a2:	ed93 6b00 	vldr	d6, [r3]
 800b5a6:	f241 23c8 	movw	r3, #4808	; 0x12c8
 800b5aa:	443b      	add	r3, r7
 800b5ac:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b5b0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b5b4:	ed83 7b00 	vstr	d7, [r3]
    b_t54_im = 0.0;
 800b5b8:	f04f 0300 	mov.w	r3, #0
 800b5bc:	f04f 0400 	mov.w	r4, #0
 800b5c0:	f241 22e8 	movw	r2, #4840	; 0x12e8
 800b5c4:	443a      	add	r2, r7
 800b5c6:	e9c2 3400 	strd	r3, r4, [r2]
 800b5ca:	e039      	b.n	800b640 <G_q+0x8c88>
  } else if (t136.re == 0.0) {
 800b5cc:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800b5d0:	ed93 7b00 	vldr	d7, [r3]
 800b5d4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b5d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5dc:	d116      	bne.n	800b60c <G_q+0x8c54>
    t70_im = 0.0;
 800b5de:	f241 22c8 	movw	r2, #4808	; 0x12c8
 800b5e2:	443a      	add	r2, r7
 800b5e4:	f04f 0300 	mov.w	r3, #0
 800b5e8:	f04f 0400 	mov.w	r4, #0
 800b5ec:	e9c2 3400 	strd	r3, r4, [r2]
    b_t54_im = t136.im / 2.0;
 800b5f0:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800b5f4:	ed93 6b02 	vldr	d6, [r3, #8]
 800b5f8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b5fc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b600:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800b604:	443b      	add	r3, r7
 800b606:	ed83 7b00 	vstr	d7, [r3]
 800b60a:	e019      	b.n	800b640 <G_q+0x8c88>
  } else {
    t70_im = t136.re / 2.0;
 800b60c:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800b610:	ed93 6b00 	vldr	d6, [r3]
 800b614:	f241 23c8 	movw	r3, #4808	; 0x12c8
 800b618:	443b      	add	r3, r7
 800b61a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b61e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b622:	ed83 7b00 	vstr	d7, [r3]
    b_t54_im = t136.im / 2.0;
 800b626:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800b62a:	ed93 6b02 	vldr	d6, [r3, #8]
 800b62e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b632:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b636:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800b63a:	443b      	add	r3, r7
 800b63c:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t137.im == 0.0) {
 800b640:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800b644:	ed93 7b02 	vldr	d7, [r3, #8]
 800b648:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b64c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b650:	d116      	bne.n	800b680 <G_q+0x8cc8>
    t34_re = t137.re / 2.0;
 800b652:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800b656:	ed93 6b00 	vldr	d6, [r3]
 800b65a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b65e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b662:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800b666:	443b      	add	r3, r7
 800b668:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800b66c:	f04f 0300 	mov.w	r3, #0
 800b670:	f04f 0400 	mov.w	r4, #0
 800b674:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800b678:	443a      	add	r2, r7
 800b67a:	e9c2 3400 	strd	r3, r4, [r2]
 800b67e:	e03b      	b.n	800b6f8 <G_q+0x8d40>
  } else if (t137.re == 0.0) {
 800b680:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800b684:	ed93 7b00 	vldr	d7, [r3]
 800b688:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b68c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b690:	d118      	bne.n	800b6c4 <G_q+0x8d0c>
    t34_re = 0.0;
 800b692:	f04f 0300 	mov.w	r3, #0
 800b696:	f04f 0400 	mov.w	r4, #0
 800b69a:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800b69e:	443a      	add	r2, r7
 800b6a0:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t137.im / 2.0;
 800b6a4:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800b6a8:	ed93 6b02 	vldr	d6, [r3, #8]
 800b6ac:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b6b0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b6b4:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800b6b8:	443b      	add	r3, r7
 800b6ba:	ed83 7b00 	vstr	d7, [r3]
 800b6be:	e01b      	b.n	800b6f8 <G_q+0x8d40>
 800b6c0:	ffffecb0 	.word	0xffffecb0
  } else {
    t34_re = t137.re / 2.0;
 800b6c4:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800b6c8:	ed93 6b00 	vldr	d6, [r3]
 800b6cc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b6d0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b6d4:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800b6d8:	443b      	add	r3, r7
 800b6da:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t137.im / 2.0;
 800b6de:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800b6e2:	ed93 6b02 	vldr	d6, [r3, #8]
 800b6e6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b6ea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b6ee:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800b6f2:	443b      	add	r3, r7
 800b6f4:	ed83 7b00 	vstr	d7, [r3]
  }

  t70_im += t34_re;
 800b6f8:	f241 23c8 	movw	r3, #4808	; 0x12c8
 800b6fc:	443b      	add	r3, r7
 800b6fe:	f241 22c8 	movw	r2, #4808	; 0x12c8
 800b702:	443a      	add	r2, r7
 800b704:	ed92 6b00 	vldr	d6, [r2]
 800b708:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800b70c:	443a      	add	r2, r7
 800b70e:	ed92 7b00 	vldr	d7, [r2]
 800b712:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b716:	ed83 7b00 	vstr	d7, [r3]
  b_t54_im += t34_im;
 800b71a:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800b71e:	443b      	add	r3, r7
 800b720:	ed93 6b00 	vldr	d6, [r3]
 800b724:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800b728:	443b      	add	r3, r7
 800b72a:	ed93 7b00 	vldr	d7, [r3]
 800b72e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b732:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800b736:	443b      	add	r3, r7
 800b738:	ed83 7b00 	vstr	d7, [r3]
  t74_re = (t138.re * 0.0 - t138.im * 0.5) - (t139.re * 0.0 - t139.im * 0.5);
 800b73c:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 800b740:	ed93 7b00 	vldr	d7, [r3]
 800b744:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 800ba20 <G_q+0x9068>
 800b748:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b74c:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 800b750:	ed93 7b02 	vldr	d7, [r3, #8]
 800b754:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b758:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b75c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b760:	f507 635e 	add.w	r3, r7, #3552	; 0xde0
 800b764:	ed93 7b00 	vldr	d7, [r3]
 800b768:	ed9f 5bad 	vldr	d5, [pc, #692]	; 800ba20 <G_q+0x9068>
 800b76c:	ee27 5b05 	vmul.f64	d5, d7, d5
 800b770:	f507 635e 	add.w	r3, r7, #3552	; 0xde0
 800b774:	ed93 7b02 	vldr	d7, [r3, #8]
 800b778:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800b77c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b780:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b784:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800b788:	443b      	add	r3, r7
 800b78a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b78e:	ed83 7b00 	vstr	d7, [r3]
  t74_im = (t138.re * 0.5 + t138.im * 0.0) - (t139.re * 0.5 + t139.im * 0.0);
 800b792:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 800b796:	ed93 7b00 	vldr	d7, [r3]
 800b79a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800b79e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b7a2:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 800b7a6:	ed93 7b02 	vldr	d7, [r3, #8]
 800b7aa:	ed9f 5b9d 	vldr	d5, [pc, #628]	; 800ba20 <G_q+0x9068>
 800b7ae:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b7b2:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b7b6:	f507 635e 	add.w	r3, r7, #3552	; 0xde0
 800b7ba:	ed93 7b00 	vldr	d7, [r3]
 800b7be:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b7c2:	ee27 5b05 	vmul.f64	d5, d7, d5
 800b7c6:	f507 635e 	add.w	r3, r7, #3552	; 0xde0
 800b7ca:	ed93 7b02 	vldr	d7, [r3, #8]
 800b7ce:	ed9f 4b94 	vldr	d4, [pc, #592]	; 800ba20 <G_q+0x9068>
 800b7d2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b7d6:	ee35 7b07 	vadd.f64	d7, d5, d7
 800b7da:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800b7de:	443b      	add	r3, r7
 800b7e0:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b7e4:	ed83 7b00 	vstr	d7, [r3]
  t13_re = t150.re * 3.061616997868383E-17 + t151.re * 3.061616997868383E-17;
 800b7e8:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800b7ec:	ed93 7b00 	vldr	d7, [r3]
 800b7f0:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 800ba30 <G_q+0x9078>
 800b7f4:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b7f8:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 800b7fc:	ed93 7b00 	vldr	d7, [r3]
 800b800:	ed9f 5b8b 	vldr	d5, [pc, #556]	; 800ba30 <G_q+0x9078>
 800b804:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b808:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b80c:	f241 3378 	movw	r3, #4984	; 0x1378
 800b810:	443b      	add	r3, r7
 800b812:	ed83 7b00 	vstr	d7, [r3]
  t55_re = t150.im * 3.061616997868383E-17 + t151.im * 3.061616997868383E-17;
 800b816:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800b81a:	ed93 7b02 	vldr	d7, [r3, #8]
 800b81e:	ed9f 6b84 	vldr	d6, [pc, #528]	; 800ba30 <G_q+0x9078>
 800b822:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b826:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 800b82a:	ed93 7b02 	vldr	d7, [r3, #8]
 800b82e:	ed9f 5b80 	vldr	d5, [pc, #512]	; 800ba30 <G_q+0x9078>
 800b832:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b836:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b83a:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800b83e:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t148.re * 0.0 - t148.im * 0.5) - (t149.re * 0.0 - t149.im * 0.5);
 800b842:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 800b846:	ed93 7b00 	vldr	d7, [r3]
 800b84a:	ed9f 6b75 	vldr	d6, [pc, #468]	; 800ba20 <G_q+0x9068>
 800b84e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b852:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 800b856:	ed93 7b02 	vldr	d7, [r3, #8]
 800b85a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b85e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b862:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b866:	f507 6364 	add.w	r3, r7, #3648	; 0xe40
 800b86a:	ed93 7b00 	vldr	d7, [r3]
 800b86e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800ba20 <G_q+0x9068>
 800b872:	ee27 5b05 	vmul.f64	d5, d7, d5
 800b876:	f507 6364 	add.w	r3, r7, #3648	; 0xe40
 800b87a:	ed93 7b02 	vldr	d7, [r3, #8]
 800b87e:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800b882:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b886:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b88a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b88e:	f241 3370 	movw	r3, #4976	; 0x1370
 800b892:	443b      	add	r3, r7
 800b894:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t148.re * 0.5 + t148.im * 0.0) - (t149.re * 0.5 + t149.im * 0.0);
 800b898:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 800b89c:	ed93 7b00 	vldr	d7, [r3]
 800b8a0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800b8a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b8a8:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 800b8ac:	ed93 7b02 	vldr	d7, [r3, #8]
 800b8b0:	ed9f 5b5b 	vldr	d5, [pc, #364]	; 800ba20 <G_q+0x9068>
 800b8b4:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b8b8:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b8bc:	f507 6364 	add.w	r3, r7, #3648	; 0xe40
 800b8c0:	ed93 7b00 	vldr	d7, [r3]
 800b8c4:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b8c8:	ee27 5b05 	vmul.f64	d5, d7, d5
 800b8cc:	f507 6364 	add.w	r3, r7, #3648	; 0xe40
 800b8d0:	ed93 7b02 	vldr	d7, [r3, #8]
 800b8d4:	ed9f 4b52 	vldr	d4, [pc, #328]	; 800ba20 <G_q+0x9068>
 800b8d8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b8dc:	ee35 7b07 	vadd.f64	d7, d5, d7
 800b8e0:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b8e4:	f241 3368 	movw	r3, #4968	; 0x1368
 800b8e8:	443b      	add	r3, r7
 800b8ea:	ed83 7b00 	vstr	d7, [r3]
  if (t146.im == 0.0) {
 800b8ee:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 800b8f2:	ed93 7b02 	vldr	d7, [r3, #8]
 800b8f6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b8fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8fe:	d115      	bne.n	800b92c <G_q+0x8f74>
    t16_im = t146.re / 2.0;
 800b900:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 800b904:	ed93 6b00 	vldr	d6, [r3]
 800b908:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b90c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b910:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800b914:	ed83 7b00 	vstr	d7, [r3]
    t20_re = 0.0;
 800b918:	f04f 0300 	mov.w	r3, #0
 800b91c:	f04f 0400 	mov.w	r4, #0
 800b920:	f241 3248 	movw	r2, #4936	; 0x1348
 800b924:	443a      	add	r2, r7
 800b926:	e9c2 3400 	strd	r3, r4, [r2]
 800b92a:	e037      	b.n	800b99c <G_q+0x8fe4>
  } else if (t146.re == 0.0) {
 800b92c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 800b930:	ed93 7b00 	vldr	d7, [r3]
 800b934:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b93c:	d115      	bne.n	800b96a <G_q+0x8fb2>
    t16_im = 0.0;
 800b93e:	f04f 0300 	mov.w	r3, #0
 800b942:	f04f 0400 	mov.w	r4, #0
 800b946:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800b94a:	e9c2 3400 	strd	r3, r4, [r2]
    t20_re = t146.im / 2.0;
 800b94e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 800b952:	ed93 6b02 	vldr	d6, [r3, #8]
 800b956:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b95a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b95e:	f241 3348 	movw	r3, #4936	; 0x1348
 800b962:	443b      	add	r3, r7
 800b964:	ed83 7b00 	vstr	d7, [r3]
 800b968:	e018      	b.n	800b99c <G_q+0x8fe4>
  } else {
    t16_im = t146.re / 2.0;
 800b96a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 800b96e:	ed93 6b00 	vldr	d6, [r3]
 800b972:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b976:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b97a:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800b97e:	ed83 7b00 	vstr	d7, [r3]
    t20_re = t146.im / 2.0;
 800b982:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 800b986:	ed93 6b02 	vldr	d6, [r3, #8]
 800b98a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b98e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b992:	f241 3348 	movw	r3, #4936	; 0x1348
 800b996:	443b      	add	r3, r7
 800b998:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t147.im == 0.0) {
 800b99c:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 800b9a0:	ed93 7b02 	vldr	d7, [r3, #8]
 800b9a4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b9a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9ac:	d116      	bne.n	800b9dc <G_q+0x9024>
    t34_re = t147.re / 2.0;
 800b9ae:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 800b9b2:	ed93 6b00 	vldr	d6, [r3]
 800b9b6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b9ba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b9be:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800b9c2:	443b      	add	r3, r7
 800b9c4:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800b9c8:	f04f 0300 	mov.w	r3, #0
 800b9cc:	f04f 0400 	mov.w	r4, #0
 800b9d0:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800b9d4:	443a      	add	r2, r7
 800b9d6:	e9c2 3400 	strd	r3, r4, [r2]
 800b9da:	e047      	b.n	800ba6c <G_q+0x90b4>
  } else if (t147.re == 0.0) {
 800b9dc:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 800b9e0:	ed93 7b00 	vldr	d7, [r3]
 800b9e4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b9e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9ec:	d124      	bne.n	800ba38 <G_q+0x9080>
    t34_re = 0.0;
 800b9ee:	f04f 0300 	mov.w	r3, #0
 800b9f2:	f04f 0400 	mov.w	r4, #0
 800b9f6:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800b9fa:	443a      	add	r2, r7
 800b9fc:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t147.im / 2.0;
 800ba00:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 800ba04:	ed93 6b02 	vldr	d6, [r3, #8]
 800ba08:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ba0c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ba10:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800ba14:	443b      	add	r3, r7
 800ba16:	ed83 7b00 	vstr	d7, [r3]
 800ba1a:	e027      	b.n	800ba6c <G_q+0x90b4>
 800ba1c:	f3af 8000 	nop.w
	...
 800ba28:	858a5d48 	.word	0x858a5d48
 800ba2c:	394377ce 	.word	0x394377ce
 800ba30:	33145c07 	.word	0x33145c07
 800ba34:	3c81a626 	.word	0x3c81a626
  } else {
    t34_re = t147.re / 2.0;
 800ba38:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 800ba3c:	ed93 6b00 	vldr	d6, [r3]
 800ba40:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ba44:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ba48:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800ba4c:	443b      	add	r3, r7
 800ba4e:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t147.im / 2.0;
 800ba52:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 800ba56:	ed93 6b02 	vldr	d6, [r3, #8]
 800ba5a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ba5e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ba62:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800ba66:	443b      	add	r3, r7
 800ba68:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_im = (t144.re * 0.0 - t144.im * 3.061616997868383E-17) - (t145.re * 0.0 -
 800ba6c:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 800ba70:	ed93 7b00 	vldr	d7, [r3]
 800ba74:	ed1f 6b16 	vldr	d6, [pc, #-88]	; 800ba20 <G_q+0x9068>
 800ba78:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ba7c:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 800ba80:	ed93 7b02 	vldr	d7, [r3, #8]
 800ba84:	ed1f 5b16 	vldr	d5, [pc, #-88]	; 800ba30 <G_q+0x9078>
 800ba88:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ba8c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ba90:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 800ba94:	ed93 7b00 	vldr	d7, [r3]
 800ba98:	ed1f 5b1f 	vldr	d5, [pc, #-124]	; 800ba20 <G_q+0x9068>
 800ba9c:	ee27 5b05 	vmul.f64	d5, d7, d5
    t145.im * 3.061616997868383E-17);
 800baa0:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 800baa4:	ed93 7b02 	vldr	d7, [r3, #8]
 800baa8:	ed1f 4b1f 	vldr	d4, [pc, #-124]	; 800ba30 <G_q+0x9078>
 800baac:	ee27 7b04 	vmul.f64	d7, d7, d4
  t20_im = (t144.re * 0.0 - t144.im * 3.061616997868383E-17) - (t145.re * 0.0 -
 800bab0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bab4:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bab8:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800babc:	ed83 7b00 	vstr	d7, [r3]
  t12_re = (t144.re * 3.061616997868383E-17 + t144.im * 0.0) - (t145.re *
 800bac0:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 800bac4:	ed93 7b00 	vldr	d7, [r3]
 800bac8:	ed1f 6b27 	vldr	d6, [pc, #-156]	; 800ba30 <G_q+0x9078>
 800bacc:	ee27 6b06 	vmul.f64	d6, d7, d6
 800bad0:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 800bad4:	ed93 7b02 	vldr	d7, [r3, #8]
 800bad8:	ed1f 5b2f 	vldr	d5, [pc, #-188]	; 800ba20 <G_q+0x9068>
 800badc:	ee27 7b05 	vmul.f64	d7, d7, d5
 800bae0:	ee36 6b07 	vadd.f64	d6, d6, d7
 800bae4:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 800bae8:	ed93 7b00 	vldr	d7, [r3]
 800baec:	ed1f 5b30 	vldr	d5, [pc, #-192]	; 800ba30 <G_q+0x9078>
 800baf0:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t145.im * 0.0);
 800baf4:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 800baf8:	ed93 7b02 	vldr	d7, [r3, #8]
 800bafc:	ed1f 4b38 	vldr	d4, [pc, #-224]	; 800ba20 <G_q+0x9068>
 800bb00:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bb04:	ee35 7b07 	vadd.f64	d7, d5, d7
  t12_re = (t144.re * 3.061616997868383E-17 + t144.im * 0.0) - (t145.re *
 800bb08:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bb0c:	f241 3388 	movw	r3, #5000	; 0x1388
 800bb10:	443b      	add	r3, r7
 800bb12:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t16_im + t34_re) + 7.498798913309288E-33;
 800bb16:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800bb1a:	ed93 6b00 	vldr	d6, [r3]
 800bb1e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800bb22:	443b      	add	r3, r7
 800bb24:	ed93 7b00 	vldr	d7, [r3]
 800bb28:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bb2c:	ed1f 6b42 	vldr	d6, [pc, #-264]	; 800ba28 <G_q+0x9070>
 800bb30:	ee37 7b06 	vadd.f64	d7, d7, d6
 800bb34:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800bb38:	ed83 7b00 	vstr	d7, [r3]
  t20_re += t34_im;
 800bb3c:	f241 3348 	movw	r3, #4936	; 0x1348
 800bb40:	443b      	add	r3, r7
 800bb42:	ed93 6b00 	vldr	d6, [r3]
 800bb46:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800bb4a:	443b      	add	r3, r7
 800bb4c:	ed93 7b00 	vldr	d7, [r3]
 800bb50:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bb54:	f241 3348 	movw	r3, #4936	; 0x1348
 800bb58:	443b      	add	r3, r7
 800bb5a:	ed83 7b00 	vstr	d7, [r3]
  t76_re = t152.re * 3.061616997868383E-17 + t153.re * 3.061616997868383E-17;
 800bb5e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800bb62:	ed93 7b00 	vldr	d7, [r3]
 800bb66:	ed1f 6b4e 	vldr	d6, [pc, #-312]	; 800ba30 <G_q+0x9078>
 800bb6a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800bb6e:	4be2      	ldr	r3, [pc, #904]	; (800bef8 <G_q+0x9540>)
 800bb70:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800bb74:	443a      	add	r2, r7
 800bb76:	4413      	add	r3, r2
 800bb78:	ed93 7b00 	vldr	d7, [r3]
 800bb7c:	ed9f 5bda 	vldr	d5, [pc, #872]	; 800bee8 <G_q+0x9530>
 800bb80:	ee27 7b05 	vmul.f64	d7, d7, d5
 800bb84:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800bb88:	443b      	add	r3, r7
 800bb8a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bb8e:	ed83 7b00 	vstr	d7, [r3]
  t3_im = t152.im * 3.061616997868383E-17 + t153.im * 3.061616997868383E-17;
 800bb92:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800bb96:	ed93 7b02 	vldr	d7, [r3, #8]
 800bb9a:	ed9f 6bd3 	vldr	d6, [pc, #844]	; 800bee8 <G_q+0x9530>
 800bb9e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800bba2:	4bd5      	ldr	r3, [pc, #852]	; (800bef8 <G_q+0x9540>)
 800bba4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800bba8:	443a      	add	r2, r7
 800bbaa:	4413      	add	r3, r2
 800bbac:	ed93 7b02 	vldr	d7, [r3, #8]
 800bbb0:	ed9f 5bcd 	vldr	d5, [pc, #820]	; 800bee8 <G_q+0x9530>
 800bbb4:	ee27 7b05 	vmul.f64	d7, d7, d5
 800bbb8:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bbbc:	f241 3310 	movw	r3, #4880	; 0x1310
 800bbc0:	443b      	add	r3, r7
 800bbc2:	ed83 7b00 	vstr	d7, [r3]
  t72_re = (t13_re * t13_im - t55_re * t16_re) - (t20_im * t16_im - t12_re *
 800bbc6:	f241 3378 	movw	r3, #4984	; 0x1378
 800bbca:	443b      	add	r3, r7
 800bbcc:	ed93 6b00 	vldr	d6, [r3]
 800bbd0:	f241 3370 	movw	r3, #4976	; 0x1370
 800bbd4:	443b      	add	r3, r7
 800bbd6:	ed93 7b00 	vldr	d7, [r3]
 800bbda:	ee26 6b07 	vmul.f64	d6, d6, d7
 800bbde:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800bbe2:	ed93 5b00 	vldr	d5, [r3]
 800bbe6:	f241 3368 	movw	r3, #4968	; 0x1368
 800bbea:	443b      	add	r3, r7
 800bbec:	ed93 7b00 	vldr	d7, [r3]
 800bbf0:	ee25 7b07 	vmul.f64	d7, d5, d7
 800bbf4:	ee36 6b47 	vsub.f64	d6, d6, d7
 800bbf8:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800bbfc:	ed93 5b00 	vldr	d5, [r3]
 800bc00:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800bc04:	ed93 7b00 	vldr	d7, [r3]
 800bc08:	ee25 5b07 	vmul.f64	d5, d5, d7
 800bc0c:	f241 3388 	movw	r3, #5000	; 0x1388
 800bc10:	443b      	add	r3, r7
 800bc12:	ed93 4b00 	vldr	d4, [r3]
 800bc16:	f241 3348 	movw	r3, #4936	; 0x1348
 800bc1a:	443b      	add	r3, r7
 800bc1c:	ed93 7b00 	vldr	d7, [r3]
 800bc20:	ee24 7b07 	vmul.f64	d7, d4, d7
 800bc24:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bc28:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800bc2c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bc30:	ed83 7b00 	vstr	d7, [r3]
    t20_re);
  t55_re = (t13_re * t16_re + t55_re * t13_im) - (t20_im * t20_re + t12_re *
 800bc34:	f241 3378 	movw	r3, #4984	; 0x1378
 800bc38:	443b      	add	r3, r7
 800bc3a:	ed93 6b00 	vldr	d6, [r3]
 800bc3e:	f241 3368 	movw	r3, #4968	; 0x1368
 800bc42:	443b      	add	r3, r7
 800bc44:	ed93 7b00 	vldr	d7, [r3]
 800bc48:	ee26 6b07 	vmul.f64	d6, d6, d7
 800bc4c:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800bc50:	ed93 5b00 	vldr	d5, [r3]
 800bc54:	f241 3370 	movw	r3, #4976	; 0x1370
 800bc58:	443b      	add	r3, r7
 800bc5a:	ed93 7b00 	vldr	d7, [r3]
 800bc5e:	ee25 7b07 	vmul.f64	d7, d5, d7
 800bc62:	ee36 6b07 	vadd.f64	d6, d6, d7
 800bc66:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800bc6a:	ed93 5b00 	vldr	d5, [r3]
 800bc6e:	f241 3348 	movw	r3, #4936	; 0x1348
 800bc72:	443b      	add	r3, r7
 800bc74:	ed93 7b00 	vldr	d7, [r3]
 800bc78:	ee25 5b07 	vmul.f64	d5, d5, d7
 800bc7c:	f241 3388 	movw	r3, #5000	; 0x1388
 800bc80:	443b      	add	r3, r7
 800bc82:	ed93 4b00 	vldr	d4, [r3]
 800bc86:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800bc8a:	ed93 7b00 	vldr	d7, [r3]
 800bc8e:	ee24 7b07 	vmul.f64	d7, d4, d7
 800bc92:	ee35 7b07 	vadd.f64	d7, d5, d7
 800bc96:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bc9a:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800bc9e:	ed83 7b00 	vstr	d7, [r3]
    t16_im);
  t16_re = (t126.re * 0.0 - t126.im * 0.5) - (t127.re * 0.0 - t127.im * 0.5);
 800bca2:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 800bca6:	ed93 7b00 	vldr	d7, [r3]
 800bcaa:	ed9f 6b91 	vldr	d6, [pc, #580]	; 800bef0 <G_q+0x9538>
 800bcae:	ee27 6b06 	vmul.f64	d6, d7, d6
 800bcb2:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 800bcb6:	ed93 7b02 	vldr	d7, [r3, #8]
 800bcba:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800bcbe:	ee27 7b05 	vmul.f64	d7, d7, d5
 800bcc2:	ee36 6b47 	vsub.f64	d6, d6, d7
 800bcc6:	f507 635a 	add.w	r3, r7, #3488	; 0xda0
 800bcca:	ed93 7b00 	vldr	d7, [r3]
 800bcce:	ed9f 5b88 	vldr	d5, [pc, #544]	; 800bef0 <G_q+0x9538>
 800bcd2:	ee27 5b05 	vmul.f64	d5, d7, d5
 800bcd6:	f507 635a 	add.w	r3, r7, #3488	; 0xda0
 800bcda:	ed93 7b02 	vldr	d7, [r3, #8]
 800bcde:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800bce2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bce6:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bcea:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bcee:	f241 3368 	movw	r3, #4968	; 0x1368
 800bcf2:	443b      	add	r3, r7
 800bcf4:	ed83 7b00 	vstr	d7, [r3]
  t60_re = (t126.re * 0.5 + t126.im * 0.0) - (t127.re * 0.5 + t127.im * 0.0);
 800bcf8:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 800bcfc:	ed93 7b00 	vldr	d7, [r3]
 800bd00:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800bd04:	ee27 6b06 	vmul.f64	d6, d7, d6
 800bd08:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 800bd0c:	ed93 7b02 	vldr	d7, [r3, #8]
 800bd10:	ed9f 5b77 	vldr	d5, [pc, #476]	; 800bef0 <G_q+0x9538>
 800bd14:	ee27 7b05 	vmul.f64	d7, d7, d5
 800bd18:	ee36 6b07 	vadd.f64	d6, d6, d7
 800bd1c:	f507 635a 	add.w	r3, r7, #3488	; 0xda0
 800bd20:	ed93 7b00 	vldr	d7, [r3]
 800bd24:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800bd28:	ee27 5b05 	vmul.f64	d5, d7, d5
 800bd2c:	f507 635a 	add.w	r3, r7, #3488	; 0xda0
 800bd30:	ed93 7b02 	vldr	d7, [r3, #8]
 800bd34:	ed9f 4b6e 	vldr	d4, [pc, #440]	; 800bef0 <G_q+0x9538>
 800bd38:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bd3c:	ee35 7b07 	vadd.f64	d7, d5, d7
 800bd40:	f241 2350 	movw	r3, #4688	; 0x1250
 800bd44:	443b      	add	r3, r7
 800bd46:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bd4a:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t128.re * 0.0 - t128.im * 0.5) - (t129.re * 0.0 - t129.im * 0.5);
 800bd4e:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800bd52:	ed93 7b00 	vldr	d7, [r3]
 800bd56:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800bef0 <G_q+0x9538>
 800bd5a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800bd5e:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800bd62:	ed93 7b02 	vldr	d7, [r3, #8]
 800bd66:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800bd6a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800bd6e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800bd72:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 800bd76:	ed93 7b00 	vldr	d7, [r3]
 800bd7a:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 800bef0 <G_q+0x9538>
 800bd7e:	ee27 5b05 	vmul.f64	d5, d7, d5
 800bd82:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 800bd86:	ed93 7b02 	vldr	d7, [r3, #8]
 800bd8a:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800bd8e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bd92:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bd96:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bd9a:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800bd9e:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t128.re * 0.5 + t128.im * 0.0) - (t129.re * 0.5 + t129.im * 0.0);
 800bda2:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800bda6:	ed93 7b00 	vldr	d7, [r3]
 800bdaa:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800bdae:	ee27 6b06 	vmul.f64	d6, d7, d6
 800bdb2:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800bdb6:	ed93 7b02 	vldr	d7, [r3, #8]
 800bdba:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 800bef0 <G_q+0x9538>
 800bdbe:	ee27 7b05 	vmul.f64	d7, d7, d5
 800bdc2:	ee36 6b07 	vadd.f64	d6, d6, d7
 800bdc6:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 800bdca:	ed93 7b00 	vldr	d7, [r3]
 800bdce:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800bdd2:	ee27 5b05 	vmul.f64	d5, d7, d5
 800bdd6:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 800bdda:	ed93 7b02 	vldr	d7, [r3, #8]
 800bdde:	ed9f 4b44 	vldr	d4, [pc, #272]	; 800bef0 <G_q+0x9538>
 800bde2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bde6:	ee35 7b07 	vadd.f64	d7, d5, d7
 800bdea:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bdee:	f241 3348 	movw	r3, #4936	; 0x1348
 800bdf2:	443b      	add	r3, r7
 800bdf4:	ed83 7b00 	vstr	d7, [r3]
  if (t130.im == 0.0) {
 800bdf8:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800bdfc:	ed93 7b02 	vldr	d7, [r3, #8]
 800be00:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800be04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be08:	d115      	bne.n	800be36 <G_q+0x947e>
    t20_im = t130.re / 2.0;
 800be0a:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800be0e:	ed93 6b00 	vldr	d6, [r3]
 800be12:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800be16:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800be1a:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800be1e:	ed83 7b00 	vstr	d7, [r3]
    t12_re = 0.0;
 800be22:	f04f 0300 	mov.w	r3, #0
 800be26:	f04f 0400 	mov.w	r4, #0
 800be2a:	f241 3288 	movw	r2, #5000	; 0x1388
 800be2e:	443a      	add	r2, r7
 800be30:	e9c2 3400 	strd	r3, r4, [r2]
 800be34:	e037      	b.n	800bea6 <G_q+0x94ee>
  } else if (t130.re == 0.0) {
 800be36:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800be3a:	ed93 7b00 	vldr	d7, [r3]
 800be3e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800be42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be46:	d115      	bne.n	800be74 <G_q+0x94bc>
    t20_im = 0.0;
 800be48:	f04f 0300 	mov.w	r3, #0
 800be4c:	f04f 0400 	mov.w	r4, #0
 800be50:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 800be54:	e9c2 3400 	strd	r3, r4, [r2]
    t12_re = t130.im / 2.0;
 800be58:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800be5c:	ed93 6b02 	vldr	d6, [r3, #8]
 800be60:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800be64:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800be68:	f241 3388 	movw	r3, #5000	; 0x1388
 800be6c:	443b      	add	r3, r7
 800be6e:	ed83 7b00 	vstr	d7, [r3]
 800be72:	e018      	b.n	800bea6 <G_q+0x94ee>
  } else {
    t20_im = t130.re / 2.0;
 800be74:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800be78:	ed93 6b00 	vldr	d6, [r3]
 800be7c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800be80:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800be84:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800be88:	ed83 7b00 	vstr	d7, [r3]
    t12_re = t130.im / 2.0;
 800be8c:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800be90:	ed93 6b02 	vldr	d6, [r3, #8]
 800be94:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800be98:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800be9c:	f241 3388 	movw	r3, #5000	; 0x1388
 800bea0:	443b      	add	r3, r7
 800bea2:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t131.im == 0.0) {
 800bea6:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 800beaa:	ed93 7b02 	vldr	d7, [r3, #8]
 800beae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800beb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beb6:	d121      	bne.n	800befc <G_q+0x9544>
    t34_re = t131.re / 2.0;
 800beb8:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 800bebc:	ed93 6b00 	vldr	d6, [r3]
 800bec0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bec4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bec8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800becc:	443b      	add	r3, r7
 800bece:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800bed2:	f04f 0300 	mov.w	r3, #0
 800bed6:	f04f 0400 	mov.w	r4, #0
 800beda:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800bede:	443a      	add	r2, r7
 800bee0:	e9c2 3400 	strd	r3, r4, [r2]
 800bee4:	e044      	b.n	800bf70 <G_q+0x95b8>
 800bee6:	bf00      	nop
 800bee8:	33145c07 	.word	0x33145c07
 800beec:	3c81a626 	.word	0x3c81a626
	...
 800bef8:	ffffee70 	.word	0xffffee70
  } else if (t131.re == 0.0) {
 800befc:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 800bf00:	ed93 7b00 	vldr	d7, [r3]
 800bf04:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bf08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf0c:	d116      	bne.n	800bf3c <G_q+0x9584>
    t34_re = 0.0;
 800bf0e:	f04f 0300 	mov.w	r3, #0
 800bf12:	f04f 0400 	mov.w	r4, #0
 800bf16:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800bf1a:	443a      	add	r2, r7
 800bf1c:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t131.im / 2.0;
 800bf20:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 800bf24:	ed93 6b02 	vldr	d6, [r3, #8]
 800bf28:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bf2c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bf30:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800bf34:	443b      	add	r3, r7
 800bf36:	ed83 7b00 	vstr	d7, [r3]
 800bf3a:	e019      	b.n	800bf70 <G_q+0x95b8>
  } else {
    t34_re = t131.re / 2.0;
 800bf3c:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 800bf40:	ed93 6b00 	vldr	d6, [r3]
 800bf44:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bf48:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bf4c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800bf50:	443b      	add	r3, r7
 800bf52:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t131.im / 2.0;
 800bf56:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 800bf5a:	ed93 6b02 	vldr	d6, [r3, #8]
 800bf5e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bf62:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bf66:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800bf6a:	443b      	add	r3, r7
 800bf6c:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t132.im == 0.0) {
 800bf70:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 800bf74:	ed93 7b02 	vldr	d7, [r3, #8]
 800bf78:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bf7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf80:	d115      	bne.n	800bfae <G_q+0x95f6>
    t12_im = t132.re / 2.0;
 800bf82:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 800bf86:	ed93 6b00 	vldr	d6, [r3]
 800bf8a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bf8e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bf92:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800bf96:	ed83 7b00 	vstr	d7, [r3]
    b_t10_re = 0.0;
 800bf9a:	f04f 0300 	mov.w	r3, #0
 800bf9e:	f04f 0400 	mov.w	r4, #0
 800bfa2:	f241 3238 	movw	r2, #4920	; 0x1338
 800bfa6:	443a      	add	r2, r7
 800bfa8:	e9c2 3400 	strd	r3, r4, [r2]
 800bfac:	e037      	b.n	800c01e <G_q+0x9666>
  } else if (t132.re == 0.0) {
 800bfae:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 800bfb2:	ed93 7b00 	vldr	d7, [r3]
 800bfb6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bfba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfbe:	d115      	bne.n	800bfec <G_q+0x9634>
    t12_im = 0.0;
 800bfc0:	f04f 0300 	mov.w	r3, #0
 800bfc4:	f04f 0400 	mov.w	r4, #0
 800bfc8:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800bfcc:	e9c2 3400 	strd	r3, r4, [r2]
    b_t10_re = t132.im / 2.0;
 800bfd0:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 800bfd4:	ed93 6b02 	vldr	d6, [r3, #8]
 800bfd8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bfdc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bfe0:	f241 3338 	movw	r3, #4920	; 0x1338
 800bfe4:	443b      	add	r3, r7
 800bfe6:	ed83 7b00 	vstr	d7, [r3]
 800bfea:	e018      	b.n	800c01e <G_q+0x9666>
  } else {
    t12_im = t132.re / 2.0;
 800bfec:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 800bff0:	ed93 6b00 	vldr	d6, [r3]
 800bff4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bff8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bffc:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800c000:	ed83 7b00 	vstr	d7, [r3]
    b_t10_re = t132.im / 2.0;
 800c004:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 800c008:	ed93 6b02 	vldr	d6, [r3, #8]
 800c00c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c010:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c014:	f241 3338 	movw	r3, #4920	; 0x1338
 800c018:	443b      	add	r3, r7
 800c01a:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t133.im == 0.0) {
 800c01e:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 800c022:	ed93 7b02 	vldr	d7, [r3, #8]
 800c026:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c02a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c02e:	d116      	bne.n	800c05e <G_q+0x96a6>
    t13_re = t133.re / 2.0;
 800c030:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 800c034:	ed93 6b00 	vldr	d6, [r3]
 800c038:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c03c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c040:	f241 3378 	movw	r3, #4984	; 0x1378
 800c044:	443b      	add	r3, r7
 800c046:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 800c04a:	f04f 0300 	mov.w	r3, #0
 800c04e:	f04f 0400 	mov.w	r4, #0
 800c052:	f241 3270 	movw	r2, #4976	; 0x1370
 800c056:	443a      	add	r2, r7
 800c058:	e9c2 3400 	strd	r3, r4, [r2]
 800c05c:	e039      	b.n	800c0d2 <G_q+0x971a>
  } else if (t133.re == 0.0) {
 800c05e:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 800c062:	ed93 7b00 	vldr	d7, [r3]
 800c066:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c06a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c06e:	d116      	bne.n	800c09e <G_q+0x96e6>
    t13_re = 0.0;
 800c070:	f04f 0300 	mov.w	r3, #0
 800c074:	f04f 0400 	mov.w	r4, #0
 800c078:	f241 3278 	movw	r2, #4984	; 0x1378
 800c07c:	443a      	add	r2, r7
 800c07e:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t133.im / 2.0;
 800c082:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 800c086:	ed93 6b02 	vldr	d6, [r3, #8]
 800c08a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c08e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c092:	f241 3370 	movw	r3, #4976	; 0x1370
 800c096:	443b      	add	r3, r7
 800c098:	ed83 7b00 	vstr	d7, [r3]
 800c09c:	e019      	b.n	800c0d2 <G_q+0x971a>
  } else {
    t13_re = t133.re / 2.0;
 800c09e:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 800c0a2:	ed93 6b00 	vldr	d6, [r3]
 800c0a6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c0aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c0ae:	f241 3378 	movw	r3, #4984	; 0x1378
 800c0b2:	443b      	add	r3, r7
 800c0b4:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t133.im / 2.0;
 800c0b8:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 800c0bc:	ed93 6b02 	vldr	d6, [r3, #8]
 800c0c0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c0c4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c0c8:	f241 3370 	movw	r3, #4976	; 0x1370
 800c0cc:	443b      	add	r3, r7
 800c0ce:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_im += t34_re;
 800c0d2:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800c0d6:	ed93 6b00 	vldr	d6, [r3]
 800c0da:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800c0de:	443b      	add	r3, r7
 800c0e0:	ed93 7b00 	vldr	d7, [r3]
 800c0e4:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c0e8:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800c0ec:	ed83 7b00 	vstr	d7, [r3]
  t12_re += t34_im;
 800c0f0:	f241 3388 	movw	r3, #5000	; 0x1388
 800c0f4:	443b      	add	r3, r7
 800c0f6:	ed93 6b00 	vldr	d6, [r3]
 800c0fa:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800c0fe:	443b      	add	r3, r7
 800c100:	ed93 7b00 	vldr	d7, [r3]
 800c104:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c108:	f241 3388 	movw	r3, #5000	; 0x1388
 800c10c:	443b      	add	r3, r7
 800c10e:	ed83 7b00 	vstr	d7, [r3]
  t12_im = (t12_im + t13_re) + 7.498798913309288E-33;
 800c112:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800c116:	ed93 6b00 	vldr	d6, [r3]
 800c11a:	f241 3378 	movw	r3, #4984	; 0x1378
 800c11e:	443b      	add	r3, r7
 800c120:	ed93 7b00 	vldr	d7, [r3]
 800c124:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c128:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 800c430 <G_q+0x9a78>
 800c12c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c130:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800c134:	ed83 7b00 	vstr	d7, [r3]
  b_t10_re += t13_im;
 800c138:	f241 3338 	movw	r3, #4920	; 0x1338
 800c13c:	443b      	add	r3, r7
 800c13e:	ed93 6b00 	vldr	d6, [r3]
 800c142:	f241 3370 	movw	r3, #4976	; 0x1370
 800c146:	443b      	add	r3, r7
 800c148:	ed93 7b00 	vldr	d7, [r3]
 800c14c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c150:	f241 3338 	movw	r3, #4920	; 0x1338
 800c154:	443b      	add	r3, r7
 800c156:	ed83 7b00 	vstr	d7, [r3]
  t85_im = (t134.re * 0.0 - t134.im * 3.061616997868383E-17) - (t135.re * 0.0 -
 800c15a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800c15e:	ed93 7b00 	vldr	d7, [r3]
 800c162:	ed9f 6bb5 	vldr	d6, [pc, #724]	; 800c438 <G_q+0x9a80>
 800c166:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c16a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800c16e:	ed93 7b02 	vldr	d7, [r3, #8]
 800c172:	ed9f 5bb3 	vldr	d5, [pc, #716]	; 800c440 <G_q+0x9a88>
 800c176:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c17a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c17e:	4bb2      	ldr	r3, [pc, #712]	; (800c448 <G_q+0x9a90>)
 800c180:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800c184:	443a      	add	r2, r7
 800c186:	4413      	add	r3, r2
 800c188:	ed93 7b00 	vldr	d7, [r3]
 800c18c:	ed9f 5baa 	vldr	d5, [pc, #680]	; 800c438 <G_q+0x9a80>
 800c190:	ee27 5b05 	vmul.f64	d5, d7, d5
    t135.im * 3.061616997868383E-17);
 800c194:	4bac      	ldr	r3, [pc, #688]	; (800c448 <G_q+0x9a90>)
 800c196:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800c19a:	443a      	add	r2, r7
 800c19c:	4413      	add	r3, r2
 800c19e:	ed93 7b02 	vldr	d7, [r3, #8]
 800c1a2:	ed9f 4ba7 	vldr	d4, [pc, #668]	; 800c440 <G_q+0x9a88>
 800c1a6:	ee27 7b04 	vmul.f64	d7, d7, d4
  t85_im = (t134.re * 0.0 - t134.im * 3.061616997868383E-17) - (t135.re * 0.0 -
 800c1aa:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c1ae:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c1b2:	f241 3318 	movw	r3, #4888	; 0x1318
 800c1b6:	443b      	add	r3, r7
 800c1b8:	ed83 7b00 	vstr	d7, [r3]
  t23_re = (t134.re * 3.061616997868383E-17 + t134.im * 0.0) - (t135.re *
 800c1bc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800c1c0:	ed93 7b00 	vldr	d7, [r3]
 800c1c4:	ed9f 6b9e 	vldr	d6, [pc, #632]	; 800c440 <G_q+0x9a88>
 800c1c8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c1cc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800c1d0:	ed93 7b02 	vldr	d7, [r3, #8]
 800c1d4:	ed9f 5b98 	vldr	d5, [pc, #608]	; 800c438 <G_q+0x9a80>
 800c1d8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c1dc:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c1e0:	4b99      	ldr	r3, [pc, #612]	; (800c448 <G_q+0x9a90>)
 800c1e2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800c1e6:	443a      	add	r2, r7
 800c1e8:	4413      	add	r3, r2
 800c1ea:	ed93 7b00 	vldr	d7, [r3]
 800c1ee:	ed9f 5b94 	vldr	d5, [pc, #592]	; 800c440 <G_q+0x9a88>
 800c1f2:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t135.im * 0.0);
 800c1f6:	4b94      	ldr	r3, [pc, #592]	; (800c448 <G_q+0x9a90>)
 800c1f8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800c1fc:	443a      	add	r2, r7
 800c1fe:	4413      	add	r3, r2
 800c200:	ed93 7b02 	vldr	d7, [r3, #8]
 800c204:	ed9f 4b8c 	vldr	d4, [pc, #560]	; 800c438 <G_q+0x9a80>
 800c208:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c20c:	ee35 7b07 	vadd.f64	d7, d5, d7
  t23_re = (t134.re * 3.061616997868383E-17 + t134.im * 0.0) - (t135.re *
 800c210:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c214:	f241 3330 	movw	r3, #4912	; 0x1330
 800c218:	443b      	add	r3, r7
 800c21a:	ed83 7b00 	vstr	d7, [r3]
  t58_im = (t16_re * t16_im - t60_re * t20_re) + (t20_im * t12_im - t12_re *
 800c21e:	f241 3368 	movw	r3, #4968	; 0x1368
 800c222:	443b      	add	r3, r7
 800c224:	ed93 6b00 	vldr	d6, [r3]
 800c228:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800c22c:	ed93 7b00 	vldr	d7, [r3]
 800c230:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c234:	f241 2350 	movw	r3, #4688	; 0x1250
 800c238:	443b      	add	r3, r7
 800c23a:	ed93 5b00 	vldr	d5, [r3]
 800c23e:	f241 3348 	movw	r3, #4936	; 0x1348
 800c242:	443b      	add	r3, r7
 800c244:	ed93 7b00 	vldr	d7, [r3]
 800c248:	ee25 7b07 	vmul.f64	d7, d5, d7
 800c24c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c250:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800c254:	ed93 5b00 	vldr	d5, [r3]
 800c258:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800c25c:	ed93 7b00 	vldr	d7, [r3]
 800c260:	ee25 5b07 	vmul.f64	d5, d5, d7
 800c264:	f241 3388 	movw	r3, #5000	; 0x1388
 800c268:	443b      	add	r3, r7
 800c26a:	ed93 4b00 	vldr	d4, [r3]
 800c26e:	f241 3338 	movw	r3, #4920	; 0x1338
 800c272:	443b      	add	r3, r7
 800c274:	ed93 7b00 	vldr	d7, [r3]
 800c278:	ee24 7b07 	vmul.f64	d7, d4, d7
 800c27c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c280:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800c284:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c288:	ed83 7b00 	vstr	d7, [r3]
    b_t10_re);
  t60_re = (t16_re * t20_re + t60_re * t16_im) + (t20_im * b_t10_re + t12_re *
 800c28c:	f241 3368 	movw	r3, #4968	; 0x1368
 800c290:	443b      	add	r3, r7
 800c292:	ed93 6b00 	vldr	d6, [r3]
 800c296:	f241 3348 	movw	r3, #4936	; 0x1348
 800c29a:	443b      	add	r3, r7
 800c29c:	ed93 7b00 	vldr	d7, [r3]
 800c2a0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c2a4:	f241 2350 	movw	r3, #4688	; 0x1250
 800c2a8:	443b      	add	r3, r7
 800c2aa:	ed93 5b00 	vldr	d5, [r3]
 800c2ae:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800c2b2:	ed93 7b00 	vldr	d7, [r3]
 800c2b6:	ee25 7b07 	vmul.f64	d7, d5, d7
 800c2ba:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c2be:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800c2c2:	ed93 5b00 	vldr	d5, [r3]
 800c2c6:	f241 3338 	movw	r3, #4920	; 0x1338
 800c2ca:	443b      	add	r3, r7
 800c2cc:	ed93 7b00 	vldr	d7, [r3]
 800c2d0:	ee25 5b07 	vmul.f64	d5, d5, d7
 800c2d4:	f241 3388 	movw	r3, #5000	; 0x1388
 800c2d8:	443b      	add	r3, r7
 800c2da:	ed93 4b00 	vldr	d4, [r3]
 800c2de:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800c2e2:	ed93 7b00 	vldr	d7, [r3]
 800c2e6:	ee24 7b07 	vmul.f64	d7, d4, d7
 800c2ea:	ee35 7b07 	vadd.f64	d7, d5, d7
 800c2ee:	f241 2350 	movw	r3, #4688	; 0x1250
 800c2f2:	443b      	add	r3, r7
 800c2f4:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c2f8:	ed83 7b00 	vstr	d7, [r3]
    t12_im);
  if (t142.im == 0.0) {
 800c2fc:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 800c300:	ed93 7b02 	vldr	d7, [r3, #8]
 800c304:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c30c:	d116      	bne.n	800c33c <G_q+0x9984>
    t13_re = t142.re / 2.0;
 800c30e:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 800c312:	ed93 6b00 	vldr	d6, [r3]
 800c316:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c31a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c31e:	f241 3378 	movw	r3, #4984	; 0x1378
 800c322:	443b      	add	r3, r7
 800c324:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 800c328:	f04f 0300 	mov.w	r3, #0
 800c32c:	f04f 0400 	mov.w	r4, #0
 800c330:	f241 3270 	movw	r2, #4976	; 0x1370
 800c334:	443a      	add	r2, r7
 800c336:	e9c2 3400 	strd	r3, r4, [r2]
 800c33a:	e039      	b.n	800c3b0 <G_q+0x99f8>
  } else if (t142.re == 0.0) {
 800c33c:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 800c340:	ed93 7b00 	vldr	d7, [r3]
 800c344:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c34c:	d116      	bne.n	800c37c <G_q+0x99c4>
    t13_re = 0.0;
 800c34e:	f04f 0300 	mov.w	r3, #0
 800c352:	f04f 0400 	mov.w	r4, #0
 800c356:	f241 3278 	movw	r2, #4984	; 0x1378
 800c35a:	443a      	add	r2, r7
 800c35c:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t142.im / 2.0;
 800c360:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 800c364:	ed93 6b02 	vldr	d6, [r3, #8]
 800c368:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c36c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c370:	f241 3370 	movw	r3, #4976	; 0x1370
 800c374:	443b      	add	r3, r7
 800c376:	ed83 7b00 	vstr	d7, [r3]
 800c37a:	e019      	b.n	800c3b0 <G_q+0x99f8>
  } else {
    t13_re = t142.re / 2.0;
 800c37c:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 800c380:	ed93 6b00 	vldr	d6, [r3]
 800c384:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c388:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c38c:	f241 3378 	movw	r3, #4984	; 0x1378
 800c390:	443b      	add	r3, r7
 800c392:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t142.im / 2.0;
 800c396:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 800c39a:	ed93 6b02 	vldr	d6, [r3, #8]
 800c39e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c3a2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c3a6:	f241 3370 	movw	r3, #4976	; 0x1370
 800c3aa:	443b      	add	r3, r7
 800c3ac:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t143.im == 0.0) {
 800c3b0:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800c3b4:	ed93 7b02 	vldr	d7, [r3, #8]
 800c3b8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c3bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3c0:	d116      	bne.n	800c3f0 <G_q+0x9a38>
    t34_re = t143.re / 2.0;
 800c3c2:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800c3c6:	ed93 6b00 	vldr	d6, [r3]
 800c3ca:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c3ce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c3d2:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800c3d6:	443b      	add	r3, r7
 800c3d8:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800c3dc:	f04f 0300 	mov.w	r3, #0
 800c3e0:	f04f 0400 	mov.w	r4, #0
 800c3e4:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800c3e8:	443a      	add	r2, r7
 800c3ea:	e9c2 3400 	strd	r3, r4, [r2]
 800c3ee:	e047      	b.n	800c480 <G_q+0x9ac8>
  } else if (t143.re == 0.0) {
 800c3f0:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800c3f4:	ed93 7b00 	vldr	d7, [r3]
 800c3f8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c3fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c400:	d124      	bne.n	800c44c <G_q+0x9a94>
    t34_re = 0.0;
 800c402:	f04f 0300 	mov.w	r3, #0
 800c406:	f04f 0400 	mov.w	r4, #0
 800c40a:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800c40e:	443a      	add	r2, r7
 800c410:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t143.im / 2.0;
 800c414:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800c418:	ed93 6b02 	vldr	d6, [r3, #8]
 800c41c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c420:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c424:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800c428:	443b      	add	r3, r7
 800c42a:	ed83 7b00 	vstr	d7, [r3]
 800c42e:	e027      	b.n	800c480 <G_q+0x9ac8>
 800c430:	858a5d48 	.word	0x858a5d48
 800c434:	394377ce 	.word	0x394377ce
	...
 800c440:	33145c07 	.word	0x33145c07
 800c444:	3c81a626 	.word	0x3c81a626
 800c448:	ffffee50 	.word	0xffffee50
  } else {
    t34_re = t143.re / 2.0;
 800c44c:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800c450:	ed93 6b00 	vldr	d6, [r3]
 800c454:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c458:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c45c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800c460:	443b      	add	r3, r7
 800c462:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t143.im / 2.0;
 800c466:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800c46a:	ed93 6b02 	vldr	d6, [r3, #8]
 800c46e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c472:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c476:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800c47a:	443b      	add	r3, r7
 800c47c:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re = (t140.re * 0.0 - t140.im * 0.5) - (t141.re * 0.0 - t141.im * 0.5);
 800c480:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 800c484:	ed93 7b00 	vldr	d7, [r3]
 800c488:	ed9f 6bdf 	vldr	d6, [pc, #892]	; 800c808 <G_q+0x9e50>
 800c48c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c490:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 800c494:	ed93 7b02 	vldr	d7, [r3, #8]
 800c498:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c49c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c4a0:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c4a4:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800c4a8:	ed93 7b00 	vldr	d7, [r3]
 800c4ac:	ed9f 5bd6 	vldr	d5, [pc, #856]	; 800c808 <G_q+0x9e50>
 800c4b0:	ee27 5b05 	vmul.f64	d5, d7, d5
 800c4b4:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800c4b8:	ed93 7b02 	vldr	d7, [r3, #8]
 800c4bc:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800c4c0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c4c4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c4c8:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c4cc:	f241 3368 	movw	r3, #4968	; 0x1368
 800c4d0:	443b      	add	r3, r7
 800c4d2:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t140.re * 0.5 + t140.im * 0.0) - (t141.re * 0.5 + t141.im * 0.0);
 800c4d6:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 800c4da:	ed93 7b00 	vldr	d7, [r3]
 800c4de:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800c4e2:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c4e6:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 800c4ea:	ed93 7b02 	vldr	d7, [r3, #8]
 800c4ee:	ed9f 5bc6 	vldr	d5, [pc, #792]	; 800c808 <G_q+0x9e50>
 800c4f2:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c4f6:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c4fa:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800c4fe:	ed93 7b00 	vldr	d7, [r3]
 800c502:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c506:	ee27 5b05 	vmul.f64	d5, d7, d5
 800c50a:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800c50e:	ed93 7b02 	vldr	d7, [r3, #8]
 800c512:	ed9f 4bbd 	vldr	d4, [pc, #756]	; 800c808 <G_q+0x9e50>
 800c516:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c51a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800c51e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c522:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800c526:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t13_re + t34_re) + 7.498798913309288E-33;
 800c52a:	f241 3378 	movw	r3, #4984	; 0x1378
 800c52e:	443b      	add	r3, r7
 800c530:	ed93 6b00 	vldr	d6, [r3]
 800c534:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800c538:	443b      	add	r3, r7
 800c53a:	ed93 7b00 	vldr	d7, [r3]
 800c53e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c542:	ed9f 6bad 	vldr	d6, [pc, #692]	; 800c7f8 <G_q+0x9e40>
 800c546:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c54a:	f241 3378 	movw	r3, #4984	; 0x1378
 800c54e:	443b      	add	r3, r7
 800c550:	ed83 7b00 	vstr	d7, [r3]
  t13_im += t34_im;
 800c554:	f241 3370 	movw	r3, #4976	; 0x1370
 800c558:	443b      	add	r3, r7
 800c55a:	ed93 6b00 	vldr	d6, [r3]
 800c55e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800c562:	443b      	add	r3, r7
 800c564:	ed93 7b00 	vldr	d7, [r3]
 800c568:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c56c:	f241 3370 	movw	r3, #4976	; 0x1370
 800c570:	443b      	add	r3, r7
 800c572:	ed83 7b00 	vstr	d7, [r3]
  t43_im += t55_im;
 800c576:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800c57a:	443b      	add	r3, r7
 800c57c:	ed93 6b00 	vldr	d6, [r3]
 800c580:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800c584:	443b      	add	r3, r7
 800c586:	ed93 7b00 	vldr	d7, [r3]
 800c58a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c58e:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800c592:	443b      	add	r3, r7
 800c594:	ed83 7b00 	vstr	d7, [r3]
  b_t54_re += t70_re;
 800c598:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800c59c:	443b      	add	r3, r7
 800c59e:	f241 22f0 	movw	r2, #4848	; 0x12f0
 800c5a2:	443a      	add	r2, r7
 800c5a4:	ed92 6b00 	vldr	d6, [r2]
 800c5a8:	ed93 7b00 	vldr	d7, [r3]
 800c5ac:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c5b0:	f241 23f0 	movw	r3, #4848	; 0x12f0
 800c5b4:	443b      	add	r3, r7
 800c5b6:	ed83 7b00 	vstr	d7, [r3]
  t55_im = (((t70_im * t74_re - b_t54_im * t74_im) - (t76_re * t72_re - t3_im *
 800c5ba:	f241 22c8 	movw	r2, #4808	; 0x12c8
 800c5be:	443a      	add	r2, r7
 800c5c0:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800c5c4:	443b      	add	r3, r7
 800c5c6:	ed92 6b00 	vldr	d6, [r2]
 800c5ca:	ed93 7b00 	vldr	d7, [r3]
 800c5ce:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c5d2:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800c5d6:	443b      	add	r3, r7
 800c5d8:	f241 22e8 	movw	r2, #4840	; 0x12e8
 800c5dc:	443a      	add	r2, r7
 800c5de:	ed92 5b00 	vldr	d5, [r2]
 800c5e2:	ed93 7b00 	vldr	d7, [r3]
 800c5e6:	ee25 7b07 	vmul.f64	d7, d5, d7
 800c5ea:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c5ee:	f241 22a8 	movw	r2, #4776	; 0x12a8
 800c5f2:	443a      	add	r2, r7
 800c5f4:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800c5f8:	ed92 5b00 	vldr	d5, [r2]
 800c5fc:	ed93 7b00 	vldr	d7, [r3]
 800c600:	ee25 5b07 	vmul.f64	d5, d5, d7
 800c604:	f241 3310 	movw	r3, #4880	; 0x1310
 800c608:	443b      	add	r3, r7
 800c60a:	ed93 4b00 	vldr	d4, [r3]
 800c60e:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800c612:	ed93 7b00 	vldr	d7, [r3]
 800c616:	ee24 7b07 	vmul.f64	d7, d4, d7
 800c61a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c61e:	ee36 6b47 	vsub.f64	d6, d6, d7
              t55_re)) + (t85_im * t58_im - t23_re * t60_re)) - (t16_re * t13_re
 800c622:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800c626:	f241 3218 	movw	r2, #4888	; 0x1318
 800c62a:	443a      	add	r2, r7
 800c62c:	ed92 5b00 	vldr	d5, [r2]
 800c630:	ed93 7b00 	vldr	d7, [r3]
 800c634:	ee25 5b07 	vmul.f64	d5, d5, d7
 800c638:	f241 2350 	movw	r3, #4688	; 0x1250
 800c63c:	443b      	add	r3, r7
 800c63e:	f241 3230 	movw	r2, #4912	; 0x1330
 800c642:	443a      	add	r2, r7
 800c644:	ed92 4b00 	vldr	d4, [r2]
 800c648:	ed93 7b00 	vldr	d7, [r3]
 800c64c:	ee24 7b07 	vmul.f64	d7, d4, d7
 800c650:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c654:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c658:	f241 3368 	movw	r3, #4968	; 0x1368
 800c65c:	443b      	add	r3, r7
 800c65e:	ed93 5b00 	vldr	d5, [r3]
 800c662:	f241 3378 	movw	r3, #4984	; 0x1378
 800c666:	443b      	add	r3, r7
 800c668:	ed93 7b00 	vldr	d7, [r3]
 800c66c:	ee25 5b07 	vmul.f64	d5, d5, d7
    - t16_im * t13_im);
 800c670:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800c674:	ed93 4b00 	vldr	d4, [r3]
 800c678:	f241 3370 	movw	r3, #4976	; 0x1370
 800c67c:	443b      	add	r3, r7
 800c67e:	ed93 7b00 	vldr	d7, [r3]
 800c682:	ee24 7b07 	vmul.f64	d7, d4, d7
 800c686:	ee35 7b47 	vsub.f64	d7, d5, d7
  t55_im = (((t70_im * t74_re - b_t54_im * t74_im) - (t76_re * t72_re - t3_im *
 800c68a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c68e:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800c692:	443b      	add	r3, r7
 800c694:	ed83 7b00 	vstr	d7, [r3]
  b_t54_im = (((t70_im * t74_im + b_t54_im * t74_re) - (t76_re * t55_re + t3_im *
 800c698:	f241 22c8 	movw	r2, #4808	; 0x12c8
 800c69c:	443a      	add	r2, r7
 800c69e:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800c6a2:	443b      	add	r3, r7
 800c6a4:	ed92 6b00 	vldr	d6, [r2]
 800c6a8:	ed93 7b00 	vldr	d7, [r3]
 800c6ac:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c6b0:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800c6b4:	443b      	add	r3, r7
 800c6b6:	f241 22e8 	movw	r2, #4840	; 0x12e8
 800c6ba:	443a      	add	r2, r7
 800c6bc:	ed92 5b00 	vldr	d5, [r2]
 800c6c0:	ed93 7b00 	vldr	d7, [r3]
 800c6c4:	ee25 7b07 	vmul.f64	d7, d5, d7
 800c6c8:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c6cc:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800c6d0:	443b      	add	r3, r7
 800c6d2:	ed93 5b00 	vldr	d5, [r3]
 800c6d6:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800c6da:	ed93 7b00 	vldr	d7, [r3]
 800c6de:	ee25 5b07 	vmul.f64	d5, d5, d7
 800c6e2:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800c6e6:	f241 3210 	movw	r2, #4880	; 0x1310
 800c6ea:	443a      	add	r2, r7
 800c6ec:	ed92 4b00 	vldr	d4, [r2]
 800c6f0:	ed93 7b00 	vldr	d7, [r3]
 800c6f4:	ee24 7b07 	vmul.f64	d7, d4, d7
 800c6f8:	ee35 7b07 	vadd.f64	d7, d5, d7
 800c6fc:	ee36 6b47 	vsub.f64	d6, d6, d7
    t72_re)) + (t85_im * t60_re + t23_re * t58_im)) - (t16_re * t13_im + t16_im *
 800c700:	f241 2350 	movw	r3, #4688	; 0x1250
 800c704:	443b      	add	r3, r7
 800c706:	f241 3218 	movw	r2, #4888	; 0x1318
 800c70a:	443a      	add	r2, r7
 800c70c:	ed92 5b00 	vldr	d5, [r2]
 800c710:	ed93 7b00 	vldr	d7, [r3]
 800c714:	ee25 5b07 	vmul.f64	d5, d5, d7
 800c718:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800c71c:	f241 3230 	movw	r2, #4912	; 0x1330
 800c720:	443a      	add	r2, r7
 800c722:	ed92 4b00 	vldr	d4, [r2]
 800c726:	ed93 7b00 	vldr	d7, [r3]
 800c72a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800c72e:	ee35 7b07 	vadd.f64	d7, d5, d7
 800c732:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c736:	f241 3368 	movw	r3, #4968	; 0x1368
 800c73a:	443b      	add	r3, r7
 800c73c:	ed93 5b00 	vldr	d5, [r3]
 800c740:	f241 3370 	movw	r3, #4976	; 0x1370
 800c744:	443b      	add	r3, r7
 800c746:	ed93 7b00 	vldr	d7, [r3]
 800c74a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800c74e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800c752:	ed93 4b00 	vldr	d4, [r3]
 800c756:	f241 3378 	movw	r3, #4984	; 0x1378
 800c75a:	443b      	add	r3, r7
 800c75c:	ed93 7b00 	vldr	d7, [r3]
 800c760:	ee24 7b07 	vmul.f64	d7, d4, d7
 800c764:	ee35 7b07 	vadd.f64	d7, d5, d7
  b_t54_im = (((t70_im * t74_im + b_t54_im * t74_re) - (t76_re * t55_re + t3_im *
 800c768:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c76c:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800c770:	443b      	add	r3, r7
 800c772:	ed83 7b00 	vstr	d7, [r3]
    t13_re);
  if (t170.im == 0.0) {
 800c776:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 800c77a:	ed93 7b02 	vldr	d7, [r3, #8]
 800c77e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c786:	d115      	bne.n	800c7b4 <G_q+0x9dfc>
    t3_im = t170.re / 2.0;
 800c788:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 800c78c:	ed93 6b00 	vldr	d6, [r3]
 800c790:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c794:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c798:	f241 3310 	movw	r3, #4880	; 0x1310
 800c79c:	443b      	add	r3, r7
 800c79e:	ed83 7b00 	vstr	d7, [r3]
    t72_re = 0.0;
 800c7a2:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800c7a6:	f04f 0300 	mov.w	r3, #0
 800c7aa:	f04f 0400 	mov.w	r4, #0
 800c7ae:	e9c2 3400 	strd	r3, r4, [r2]
 800c7b2:	e046      	b.n	800c842 <G_q+0x9e8a>
  } else if (t170.re == 0.0) {
 800c7b4:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 800c7b8:	ed93 7b00 	vldr	d7, [r3]
 800c7bc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c7c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7c4:	d124      	bne.n	800c810 <G_q+0x9e58>
    t3_im = 0.0;
 800c7c6:	f04f 0300 	mov.w	r3, #0
 800c7ca:	f04f 0400 	mov.w	r4, #0
 800c7ce:	f241 3210 	movw	r2, #4880	; 0x1310
 800c7d2:	443a      	add	r2, r7
 800c7d4:	e9c2 3400 	strd	r3, r4, [r2]
    t72_re = t170.im / 2.0;
 800c7d8:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 800c7dc:	ed93 6b02 	vldr	d6, [r3, #8]
 800c7e0:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800c7e4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c7e8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c7ec:	ed83 7b00 	vstr	d7, [r3]
 800c7f0:	e027      	b.n	800c842 <G_q+0x9e8a>
 800c7f2:	bf00      	nop
 800c7f4:	f3af 8000 	nop.w
 800c7f8:	858a5d48 	.word	0x858a5d48
 800c7fc:	394377ce 	.word	0x394377ce
 800c800:	33145c07 	.word	0x33145c07
 800c804:	3c81a626 	.word	0x3c81a626
	...
  } else {
    t3_im = t170.re / 2.0;
 800c810:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 800c814:	ed93 6b00 	vldr	d6, [r3]
 800c818:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c81c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c820:	f241 3310 	movw	r3, #4880	; 0x1310
 800c824:	443b      	add	r3, r7
 800c826:	ed83 7b00 	vstr	d7, [r3]
    t72_re = t170.im / 2.0;
 800c82a:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 800c82e:	ed93 6b02 	vldr	d6, [r3, #8]
 800c832:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800c836:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c83a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c83e:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t171.im == 0.0) {
 800c842:	f507 636c 	add.w	r3, r7, #3776	; 0xec0
 800c846:	ed93 7b02 	vldr	d7, [r3, #8]
 800c84a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c84e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c852:	d116      	bne.n	800c882 <G_q+0x9eca>
    t34_re = t171.re / 2.0;
 800c854:	f507 636c 	add.w	r3, r7, #3776	; 0xec0
 800c858:	ed93 6b00 	vldr	d6, [r3]
 800c85c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c860:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c864:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800c868:	443b      	add	r3, r7
 800c86a:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800c86e:	f04f 0300 	mov.w	r3, #0
 800c872:	f04f 0400 	mov.w	r4, #0
 800c876:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800c87a:	443a      	add	r2, r7
 800c87c:	e9c2 3400 	strd	r3, r4, [r2]
 800c880:	e039      	b.n	800c8f6 <G_q+0x9f3e>
  } else if (t171.re == 0.0) {
 800c882:	f507 636c 	add.w	r3, r7, #3776	; 0xec0
 800c886:	ed93 7b00 	vldr	d7, [r3]
 800c88a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c88e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c892:	d116      	bne.n	800c8c2 <G_q+0x9f0a>
    t34_re = 0.0;
 800c894:	f04f 0300 	mov.w	r3, #0
 800c898:	f04f 0400 	mov.w	r4, #0
 800c89c:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800c8a0:	443a      	add	r2, r7
 800c8a2:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t171.im / 2.0;
 800c8a6:	f507 636c 	add.w	r3, r7, #3776	; 0xec0
 800c8aa:	ed93 6b02 	vldr	d6, [r3, #8]
 800c8ae:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c8b2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c8b6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800c8ba:	443b      	add	r3, r7
 800c8bc:	ed83 7b00 	vstr	d7, [r3]
 800c8c0:	e019      	b.n	800c8f6 <G_q+0x9f3e>
  } else {
    t34_re = t171.re / 2.0;
 800c8c2:	f507 636c 	add.w	r3, r7, #3776	; 0xec0
 800c8c6:	ed93 6b00 	vldr	d6, [r3]
 800c8ca:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c8ce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c8d2:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800c8d6:	443b      	add	r3, r7
 800c8d8:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t171.im / 2.0;
 800c8dc:	f507 636c 	add.w	r3, r7, #3776	; 0xec0
 800c8e0:	ed93 6b02 	vldr	d6, [r3, #8]
 800c8e4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c8e8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c8ec:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800c8f0:	443b      	add	r3, r7
 800c8f2:	ed83 7b00 	vstr	d7, [r3]
  }

  t74_re = (t168.re * 0.0 - t168.im * 0.5) - (t169.re * 0.0 - t169.im * 0.5);
 800c8f6:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 800c8fa:	ed93 7b00 	vldr	d7, [r3]
 800c8fe:	ed1f 6b3e 	vldr	d6, [pc, #-248]	; 800c808 <G_q+0x9e50>
 800c902:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c906:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 800c90a:	ed93 7b02 	vldr	d7, [r3, #8]
 800c90e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c912:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c916:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c91a:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800c91e:	ed93 7b00 	vldr	d7, [r3]
 800c922:	ed1f 5b47 	vldr	d5, [pc, #-284]	; 800c808 <G_q+0x9e50>
 800c926:	ee27 5b05 	vmul.f64	d5, d7, d5
 800c92a:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800c92e:	ed93 7b02 	vldr	d7, [r3, #8]
 800c932:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800c936:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c93a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c93e:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800c942:	443b      	add	r3, r7
 800c944:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c948:	ed83 7b00 	vstr	d7, [r3]
  t74_im = (t168.re * 0.5 + t168.im * 0.0) - (t169.re * 0.5 + t169.im * 0.0);
 800c94c:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 800c950:	ed93 7b00 	vldr	d7, [r3]
 800c954:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800c958:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c95c:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 800c960:	ed93 7b02 	vldr	d7, [r3, #8]
 800c964:	ed1f 5b58 	vldr	d5, [pc, #-352]	; 800c808 <G_q+0x9e50>
 800c968:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c96c:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c970:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800c974:	ed93 7b00 	vldr	d7, [r3]
 800c978:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c97c:	ee27 5b05 	vmul.f64	d5, d7, d5
 800c980:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800c984:	ed93 7b02 	vldr	d7, [r3, #8]
 800c988:	ed1f 4b61 	vldr	d4, [pc, #-388]	; 800c808 <G_q+0x9e50>
 800c98c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c990:	ee35 7b07 	vadd.f64	d7, d5, d7
 800c994:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800c998:	443b      	add	r3, r7
 800c99a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c99e:	ed83 7b00 	vstr	d7, [r3]
  t3_im = (t3_im + t34_re) + 7.498798913309288E-33;
 800c9a2:	f241 3310 	movw	r3, #4880	; 0x1310
 800c9a6:	443b      	add	r3, r7
 800c9a8:	ed93 6b00 	vldr	d6, [r3]
 800c9ac:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800c9b0:	443b      	add	r3, r7
 800c9b2:	ed93 7b00 	vldr	d7, [r3]
 800c9b6:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c9ba:	ed1f 6b71 	vldr	d6, [pc, #-452]	; 800c7f8 <G_q+0x9e40>
 800c9be:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c9c2:	f241 3310 	movw	r3, #4880	; 0x1310
 800c9c6:	443b      	add	r3, r7
 800c9c8:	ed83 7b00 	vstr	d7, [r3]
  t72_re += t34_im;
 800c9cc:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800c9d0:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800c9d4:	ed92 6b00 	vldr	d6, [r2]
 800c9d8:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800c9dc:	443a      	add	r2, r7
 800c9de:	ed92 7b00 	vldr	d7, [r2]
 800c9e2:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c9e6:	ed83 7b00 	vstr	d7, [r3]
  t13_re = t120.re * 3.061616997868383E-17 + t121.re * 3.061616997868383E-17;
 800c9ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9ee:	ed93 7b00 	vldr	d7, [r3]
 800c9f2:	ed1f 6b7d 	vldr	d6, [pc, #-500]	; 800c800 <G_q+0x9e48>
 800c9f6:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c9fa:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800c9fe:	ed93 7b00 	vldr	d7, [r3]
 800ca02:	ed1f 5b81 	vldr	d5, [pc, #-516]	; 800c800 <G_q+0x9e48>
 800ca06:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ca0a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ca0e:	f241 3378 	movw	r3, #4984	; 0x1378
 800ca12:	443b      	add	r3, r7
 800ca14:	ed83 7b00 	vstr	d7, [r3]
  t76_re = t120.im * 3.061616997868383E-17 + t121.im * 3.061616997868383E-17;
 800ca18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca1c:	ed93 7b02 	vldr	d7, [r3, #8]
 800ca20:	ed1f 6b89 	vldr	d6, [pc, #-548]	; 800c800 <G_q+0x9e48>
 800ca24:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ca28:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800ca2c:	ed93 7b02 	vldr	d7, [r3, #8]
 800ca30:	ed1f 5b8d 	vldr	d5, [pc, #-564]	; 800c800 <G_q+0x9e48>
 800ca34:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ca38:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800ca3c:	443b      	add	r3, r7
 800ca3e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ca42:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t118.re * 0.0 - t118.im * 0.5) - (t119.re * 0.0 - t119.im * 0.5);
 800ca46:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 800ca4a:	ed93 7b00 	vldr	d7, [r3]
 800ca4e:	ed1f 6b92 	vldr	d6, [pc, #-584]	; 800c808 <G_q+0x9e50>
 800ca52:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ca56:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 800ca5a:	ed93 7b02 	vldr	d7, [r3, #8]
 800ca5e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ca62:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ca66:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ca6a:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 800ca6e:	ed93 7b00 	vldr	d7, [r3]
 800ca72:	ed1f 5b9b 	vldr	d5, [pc, #-620]	; 800c808 <G_q+0x9e50>
 800ca76:	ee27 5b05 	vmul.f64	d5, d7, d5
 800ca7a:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 800ca7e:	ed93 7b02 	vldr	d7, [r3, #8]
 800ca82:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800ca86:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ca8a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ca8e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ca92:	f241 3370 	movw	r3, #4976	; 0x1370
 800ca96:	443b      	add	r3, r7
 800ca98:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t118.re * 0.5 + t118.im * 0.0) - (t119.re * 0.5 + t119.im * 0.0);
 800ca9c:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 800caa0:	ed93 7b00 	vldr	d7, [r3]
 800caa4:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800caa8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800caac:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 800cab0:	ed93 7b02 	vldr	d7, [r3, #8]
 800cab4:	ed1f 5bac 	vldr	d5, [pc, #-688]	; 800c808 <G_q+0x9e50>
 800cab8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800cabc:	ee36 6b07 	vadd.f64	d6, d6, d7
 800cac0:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 800cac4:	ed93 7b00 	vldr	d7, [r3]
 800cac8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800cacc:	ee27 5b05 	vmul.f64	d5, d7, d5
 800cad0:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 800cad4:	ed93 7b02 	vldr	d7, [r3, #8]
 800cad8:	ed1f 4bb5 	vldr	d4, [pc, #-724]	; 800c808 <G_q+0x9e50>
 800cadc:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cae0:	ee35 7b07 	vadd.f64	d7, d5, d7
 800cae4:	ee36 7b47 	vsub.f64	d7, d6, d7
 800cae8:	f241 3368 	movw	r3, #4968	; 0x1368
 800caec:	443b      	add	r3, r7
 800caee:	ed83 7b00 	vstr	d7, [r3]
  if (t116.im == 0.0) {
 800caf2:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 800caf6:	ed93 7b02 	vldr	d7, [r3, #8]
 800cafa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cafe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb02:	d115      	bne.n	800cb30 <G_q+0xa178>
    t16_im = t116.re / 2.0;
 800cb04:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 800cb08:	ed93 6b00 	vldr	d6, [r3]
 800cb0c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cb10:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cb14:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800cb18:	ed83 7b00 	vstr	d7, [r3]
    t20_re = 0.0;
 800cb1c:	f04f 0300 	mov.w	r3, #0
 800cb20:	f04f 0400 	mov.w	r4, #0
 800cb24:	f241 3248 	movw	r2, #4936	; 0x1348
 800cb28:	443a      	add	r2, r7
 800cb2a:	e9c2 3400 	strd	r3, r4, [r2]
 800cb2e:	e037      	b.n	800cba0 <G_q+0xa1e8>
  } else if (t116.re == 0.0) {
 800cb30:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 800cb34:	ed93 7b00 	vldr	d7, [r3]
 800cb38:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cb3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb40:	d115      	bne.n	800cb6e <G_q+0xa1b6>
    t16_im = 0.0;
 800cb42:	f04f 0300 	mov.w	r3, #0
 800cb46:	f04f 0400 	mov.w	r4, #0
 800cb4a:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800cb4e:	e9c2 3400 	strd	r3, r4, [r2]
    t20_re = t116.im / 2.0;
 800cb52:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 800cb56:	ed93 6b02 	vldr	d6, [r3, #8]
 800cb5a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cb5e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cb62:	f241 3348 	movw	r3, #4936	; 0x1348
 800cb66:	443b      	add	r3, r7
 800cb68:	ed83 7b00 	vstr	d7, [r3]
 800cb6c:	e018      	b.n	800cba0 <G_q+0xa1e8>
  } else {
    t16_im = t116.re / 2.0;
 800cb6e:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 800cb72:	ed93 6b00 	vldr	d6, [r3]
 800cb76:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cb7a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cb7e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800cb82:	ed83 7b00 	vstr	d7, [r3]
    t20_re = t116.im / 2.0;
 800cb86:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 800cb8a:	ed93 6b02 	vldr	d6, [r3, #8]
 800cb8e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cb92:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cb96:	f241 3348 	movw	r3, #4936	; 0x1348
 800cb9a:	443b      	add	r3, r7
 800cb9c:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t117.im == 0.0) {
 800cba0:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 800cba4:	ed93 7b02 	vldr	d7, [r3, #8]
 800cba8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cbac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbb0:	d116      	bne.n	800cbe0 <G_q+0xa228>
    t34_re = t117.re / 2.0;
 800cbb2:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 800cbb6:	ed93 6b00 	vldr	d6, [r3]
 800cbba:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cbbe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cbc2:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800cbc6:	443b      	add	r3, r7
 800cbc8:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800cbcc:	f04f 0300 	mov.w	r3, #0
 800cbd0:	f04f 0400 	mov.w	r4, #0
 800cbd4:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800cbd8:	443a      	add	r2, r7
 800cbda:	e9c2 3400 	strd	r3, r4, [r2]
 800cbde:	e039      	b.n	800cc54 <G_q+0xa29c>
  } else if (t117.re == 0.0) {
 800cbe0:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 800cbe4:	ed93 7b00 	vldr	d7, [r3]
 800cbe8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cbec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbf0:	d116      	bne.n	800cc20 <G_q+0xa268>
    t34_re = 0.0;
 800cbf2:	f04f 0300 	mov.w	r3, #0
 800cbf6:	f04f 0400 	mov.w	r4, #0
 800cbfa:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800cbfe:	443a      	add	r2, r7
 800cc00:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t117.im / 2.0;
 800cc04:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 800cc08:	ed93 6b02 	vldr	d6, [r3, #8]
 800cc0c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cc10:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cc14:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800cc18:	443b      	add	r3, r7
 800cc1a:	ed83 7b00 	vstr	d7, [r3]
 800cc1e:	e019      	b.n	800cc54 <G_q+0xa29c>
  } else {
    t34_re = t117.re / 2.0;
 800cc20:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 800cc24:	ed93 6b00 	vldr	d6, [r3]
 800cc28:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cc2c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cc30:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800cc34:	443b      	add	r3, r7
 800cc36:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t117.im / 2.0;
 800cc3a:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 800cc3e:	ed93 6b02 	vldr	d6, [r3, #8]
 800cc42:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cc46:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cc4a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800cc4e:	443b      	add	r3, r7
 800cc50:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_im = (t114.re * 0.0 - t114.im * 3.061616997868383E-17) - (t115.re * 0.0 -
 800cc54:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 800cc58:	ed93 7b00 	vldr	d7, [r3]
 800cc5c:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 800ce90 <G_q+0xa4d8>
 800cc60:	ee27 6b06 	vmul.f64	d6, d7, d6
 800cc64:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 800cc68:	ed93 7b02 	vldr	d7, [r3, #8]
 800cc6c:	ed9f 5b8a 	vldr	d5, [pc, #552]	; 800ce98 <G_q+0xa4e0>
 800cc70:	ee27 7b05 	vmul.f64	d7, d7, d5
 800cc74:	ee36 6b47 	vsub.f64	d6, d6, d7
 800cc78:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800cc7c:	ed93 7b00 	vldr	d7, [r3]
 800cc80:	ed9f 5b83 	vldr	d5, [pc, #524]	; 800ce90 <G_q+0xa4d8>
 800cc84:	ee27 5b05 	vmul.f64	d5, d7, d5
    t115.im * 3.061616997868383E-17);
 800cc88:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800cc8c:	ed93 7b02 	vldr	d7, [r3, #8]
 800cc90:	ed9f 4b81 	vldr	d4, [pc, #516]	; 800ce98 <G_q+0xa4e0>
 800cc94:	ee27 7b04 	vmul.f64	d7, d7, d4
  t20_im = (t114.re * 0.0 - t114.im * 3.061616997868383E-17) - (t115.re * 0.0 -
 800cc98:	ee35 7b47 	vsub.f64	d7, d5, d7
 800cc9c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800cca0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800cca4:	ed83 7b00 	vstr	d7, [r3]
  t12_re = (t114.re * 3.061616997868383E-17 + t114.im * 0.0) - (t115.re *
 800cca8:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 800ccac:	ed93 7b00 	vldr	d7, [r3]
 800ccb0:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800ce98 <G_q+0xa4e0>
 800ccb4:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ccb8:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 800ccbc:	ed93 7b02 	vldr	d7, [r3, #8]
 800ccc0:	ed9f 5b73 	vldr	d5, [pc, #460]	; 800ce90 <G_q+0xa4d8>
 800ccc4:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ccc8:	ee36 6b07 	vadd.f64	d6, d6, d7
 800cccc:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800ccd0:	ed93 7b00 	vldr	d7, [r3]
 800ccd4:	ed9f 5b70 	vldr	d5, [pc, #448]	; 800ce98 <G_q+0xa4e0>
 800ccd8:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t115.im * 0.0);
 800ccdc:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800cce0:	ed93 7b02 	vldr	d7, [r3, #8]
 800cce4:	ed9f 4b6a 	vldr	d4, [pc, #424]	; 800ce90 <G_q+0xa4d8>
 800cce8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ccec:	ee35 7b07 	vadd.f64	d7, d5, d7
  t12_re = (t114.re * 3.061616997868383E-17 + t114.im * 0.0) - (t115.re *
 800ccf0:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ccf4:	f241 3388 	movw	r3, #5000	; 0x1388
 800ccf8:	443b      	add	r3, r7
 800ccfa:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t16_im + t34_re) + 7.498798913309288E-33;
 800ccfe:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800cd02:	ed93 6b00 	vldr	d6, [r3]
 800cd06:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800cd0a:	443b      	add	r3, r7
 800cd0c:	ed93 7b00 	vldr	d7, [r3]
 800cd10:	ee36 7b07 	vadd.f64	d7, d6, d7
 800cd14:	ed9f 6b62 	vldr	d6, [pc, #392]	; 800cea0 <G_q+0xa4e8>
 800cd18:	ee37 7b06 	vadd.f64	d7, d7, d6
 800cd1c:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800cd20:	ed83 7b00 	vstr	d7, [r3]
  t20_re += t34_im;
 800cd24:	f241 3348 	movw	r3, #4936	; 0x1348
 800cd28:	443b      	add	r3, r7
 800cd2a:	ed93 6b00 	vldr	d6, [r3]
 800cd2e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800cd32:	443b      	add	r3, r7
 800cd34:	ed93 7b00 	vldr	d7, [r3]
 800cd38:	ee36 7b07 	vadd.f64	d7, d6, d7
 800cd3c:	f241 3348 	movw	r3, #4936	; 0x1348
 800cd40:	443b      	add	r3, r7
 800cd42:	ed83 7b00 	vstr	d7, [r3]
  if (t122.im == 0.0) {
 800cd46:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800cd4a:	ed93 7b02 	vldr	d7, [r3, #8]
 800cd4e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cd52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd56:	d115      	bne.n	800cd84 <G_q+0xa3cc>
    t23_re = t122.re / 2.0;
 800cd58:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800cd5c:	ed93 6b00 	vldr	d6, [r3]
 800cd60:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cd64:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cd68:	f241 3330 	movw	r3, #4912	; 0x1330
 800cd6c:	443b      	add	r3, r7
 800cd6e:	ed83 7b00 	vstr	d7, [r3]
    t58_im = 0.0;
 800cd72:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800cd76:	f04f 0300 	mov.w	r3, #0
 800cd7a:	f04f 0400 	mov.w	r4, #0
 800cd7e:	e9c2 3400 	strd	r3, r4, [r2]
 800cd82:	e037      	b.n	800cdf4 <G_q+0xa43c>
  } else if (t122.re == 0.0) {
 800cd84:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800cd88:	ed93 7b00 	vldr	d7, [r3]
 800cd8c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cd90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd94:	d115      	bne.n	800cdc2 <G_q+0xa40a>
    t23_re = 0.0;
 800cd96:	f04f 0300 	mov.w	r3, #0
 800cd9a:	f04f 0400 	mov.w	r4, #0
 800cd9e:	f241 3230 	movw	r2, #4912	; 0x1330
 800cda2:	443a      	add	r2, r7
 800cda4:	e9c2 3400 	strd	r3, r4, [r2]
    t58_im = t122.im / 2.0;
 800cda8:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800cdac:	ed93 6b02 	vldr	d6, [r3, #8]
 800cdb0:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800cdb4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cdb8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cdbc:	ed83 7b00 	vstr	d7, [r3]
 800cdc0:	e018      	b.n	800cdf4 <G_q+0xa43c>
  } else {
    t23_re = t122.re / 2.0;
 800cdc2:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800cdc6:	ed93 6b00 	vldr	d6, [r3]
 800cdca:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cdce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cdd2:	f241 3330 	movw	r3, #4912	; 0x1330
 800cdd6:	443b      	add	r3, r7
 800cdd8:	ed83 7b00 	vstr	d7, [r3]
    t58_im = t122.im / 2.0;
 800cddc:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800cde0:	ed93 6b02 	vldr	d6, [r3, #8]
 800cde4:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800cde8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cdec:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cdf0:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t123.im == 0.0) {
 800cdf4:	4b2c      	ldr	r3, [pc, #176]	; (800cea8 <G_q+0xa4f0>)
 800cdf6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800cdfa:	443a      	add	r2, r7
 800cdfc:	4413      	add	r3, r2
 800cdfe:	ed93 7b02 	vldr	d7, [r3, #8]
 800ce02:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ce06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce0a:	d119      	bne.n	800ce40 <G_q+0xa488>
    t34_re = t123.re / 2.0;
 800ce0c:	4b26      	ldr	r3, [pc, #152]	; (800cea8 <G_q+0xa4f0>)
 800ce0e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ce12:	443a      	add	r2, r7
 800ce14:	4413      	add	r3, r2
 800ce16:	ed93 6b00 	vldr	d6, [r3]
 800ce1a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ce1e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ce22:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800ce26:	443b      	add	r3, r7
 800ce28:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800ce2c:	f04f 0300 	mov.w	r3, #0
 800ce30:	f04f 0400 	mov.w	r4, #0
 800ce34:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800ce38:	443a      	add	r2, r7
 800ce3a:	e9c2 3400 	strd	r3, r4, [r2]
 800ce3e:	e055      	b.n	800ceec <G_q+0xa534>
  } else if (t123.re == 0.0) {
 800ce40:	4b19      	ldr	r3, [pc, #100]	; (800cea8 <G_q+0xa4f0>)
 800ce42:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ce46:	443a      	add	r2, r7
 800ce48:	4413      	add	r3, r2
 800ce4a:	ed93 7b00 	vldr	d7, [r3]
 800ce4e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ce52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce56:	d129      	bne.n	800ceac <G_q+0xa4f4>
    t34_re = 0.0;
 800ce58:	f04f 0300 	mov.w	r3, #0
 800ce5c:	f04f 0400 	mov.w	r4, #0
 800ce60:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800ce64:	443a      	add	r2, r7
 800ce66:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t123.im / 2.0;
 800ce6a:	4b0f      	ldr	r3, [pc, #60]	; (800cea8 <G_q+0xa4f0>)
 800ce6c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ce70:	443a      	add	r2, r7
 800ce72:	4413      	add	r3, r2
 800ce74:	ed93 6b02 	vldr	d6, [r3, #8]
 800ce78:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ce7c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ce80:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800ce84:	443b      	add	r3, r7
 800ce86:	ed83 7b00 	vstr	d7, [r3]
 800ce8a:	e02f      	b.n	800ceec <G_q+0xa534>
 800ce8c:	f3af 8000 	nop.w
	...
 800ce98:	33145c07 	.word	0x33145c07
 800ce9c:	3c81a626 	.word	0x3c81a626
 800cea0:	858a5d48 	.word	0x858a5d48
 800cea4:	394377ce 	.word	0x394377ce
 800cea8:	ffffee30 	.word	0xffffee30
  } else {
    t34_re = t123.re / 2.0;
 800ceac:	4bd0      	ldr	r3, [pc, #832]	; (800d1f0 <G_q+0xa838>)
 800ceae:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ceb2:	443a      	add	r2, r7
 800ceb4:	4413      	add	r3, r2
 800ceb6:	ed93 6b00 	vldr	d6, [r3]
 800ceba:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cebe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cec2:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800cec6:	443b      	add	r3, r7
 800cec8:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t123.im / 2.0;
 800cecc:	4bc8      	ldr	r3, [pc, #800]	; (800d1f0 <G_q+0xa838>)
 800cece:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ced2:	443a      	add	r2, r7
 800ced4:	4413      	add	r3, r2
 800ced6:	ed93 6b02 	vldr	d6, [r3, #8]
 800ceda:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cede:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cee2:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800cee6:	443b      	add	r3, r7
 800cee8:	ed83 7b00 	vstr	d7, [r3]
  }

  t60_re = (t13_re * t13_im - t76_re * t16_re) - (t20_im * t16_im - t12_re *
 800ceec:	f241 3378 	movw	r3, #4984	; 0x1378
 800cef0:	443b      	add	r3, r7
 800cef2:	ed93 6b00 	vldr	d6, [r3]
 800cef6:	f241 3370 	movw	r3, #4976	; 0x1370
 800cefa:	443b      	add	r3, r7
 800cefc:	ed93 7b00 	vldr	d7, [r3]
 800cf00:	ee26 6b07 	vmul.f64	d6, d6, d7
 800cf04:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800cf08:	443b      	add	r3, r7
 800cf0a:	ed93 5b00 	vldr	d5, [r3]
 800cf0e:	f241 3368 	movw	r3, #4968	; 0x1368
 800cf12:	443b      	add	r3, r7
 800cf14:	ed93 7b00 	vldr	d7, [r3]
 800cf18:	ee25 7b07 	vmul.f64	d7, d5, d7
 800cf1c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800cf20:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800cf24:	ed93 5b00 	vldr	d5, [r3]
 800cf28:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800cf2c:	ed93 7b00 	vldr	d7, [r3]
 800cf30:	ee25 5b07 	vmul.f64	d5, d5, d7
 800cf34:	f241 3388 	movw	r3, #5000	; 0x1388
 800cf38:	443b      	add	r3, r7
 800cf3a:	ed93 4b00 	vldr	d4, [r3]
 800cf3e:	f241 3348 	movw	r3, #4936	; 0x1348
 800cf42:	443b      	add	r3, r7
 800cf44:	ed93 7b00 	vldr	d7, [r3]
 800cf48:	ee24 7b07 	vmul.f64	d7, d4, d7
 800cf4c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800cf50:	f241 2350 	movw	r3, #4688	; 0x1250
 800cf54:	443b      	add	r3, r7
 800cf56:	ee36 7b47 	vsub.f64	d7, d6, d7
 800cf5a:	ed83 7b00 	vstr	d7, [r3]
    t20_re);
  t76_re = (t13_re * t16_re + t76_re * t13_im) - (t20_im * t20_re + t12_re *
 800cf5e:	f241 3378 	movw	r3, #4984	; 0x1378
 800cf62:	443b      	add	r3, r7
 800cf64:	ed93 6b00 	vldr	d6, [r3]
 800cf68:	f241 3368 	movw	r3, #4968	; 0x1368
 800cf6c:	443b      	add	r3, r7
 800cf6e:	ed93 7b00 	vldr	d7, [r3]
 800cf72:	ee26 6b07 	vmul.f64	d6, d6, d7
 800cf76:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800cf7a:	443b      	add	r3, r7
 800cf7c:	ed93 5b00 	vldr	d5, [r3]
 800cf80:	f241 3370 	movw	r3, #4976	; 0x1370
 800cf84:	443b      	add	r3, r7
 800cf86:	ed93 7b00 	vldr	d7, [r3]
 800cf8a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800cf8e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800cf92:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800cf96:	ed93 5b00 	vldr	d5, [r3]
 800cf9a:	f241 3348 	movw	r3, #4936	; 0x1348
 800cf9e:	443b      	add	r3, r7
 800cfa0:	ed93 7b00 	vldr	d7, [r3]
 800cfa4:	ee25 5b07 	vmul.f64	d5, d5, d7
 800cfa8:	f241 3388 	movw	r3, #5000	; 0x1388
 800cfac:	443b      	add	r3, r7
 800cfae:	ed93 4b00 	vldr	d4, [r3]
 800cfb2:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800cfb6:	ed93 7b00 	vldr	d7, [r3]
 800cfba:	ee24 7b07 	vmul.f64	d7, d4, d7
 800cfbe:	ee35 7b07 	vadd.f64	d7, d5, d7
 800cfc2:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800cfc6:	443b      	add	r3, r7
 800cfc8:	ee36 7b47 	vsub.f64	d7, d6, d7
 800cfcc:	ed83 7b00 	vstr	d7, [r3]
    t16_im);
  t23_re += t34_re;
 800cfd0:	f241 3330 	movw	r3, #4912	; 0x1330
 800cfd4:	443b      	add	r3, r7
 800cfd6:	ed93 6b00 	vldr	d6, [r3]
 800cfda:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800cfde:	443b      	add	r3, r7
 800cfe0:	ed93 7b00 	vldr	d7, [r3]
 800cfe4:	ee36 7b07 	vadd.f64	d7, d6, d7
 800cfe8:	f241 3330 	movw	r3, #4912	; 0x1330
 800cfec:	443b      	add	r3, r7
 800cfee:	ed83 7b00 	vstr	d7, [r3]
  t58_im += t34_im;
 800cff2:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800cff6:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800cffa:	ed92 6b00 	vldr	d6, [r2]
 800cffe:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800d002:	443a      	add	r2, r7
 800d004:	ed92 7b00 	vldr	d7, [r2]
 800d008:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d00c:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t160.re * 0.0 - t160.im * 0.5) - (t161.re * 0.0 - t161.im * 0.5);
 800d010:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 800d014:	ed93 7b00 	vldr	d7, [r3]
 800d018:	ed9f 6b73 	vldr	d6, [pc, #460]	; 800d1e8 <G_q+0xa830>
 800d01c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d020:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 800d024:	ed93 7b02 	vldr	d7, [r3, #8]
 800d028:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d02c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d030:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d034:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 800d038:	ed93 7b00 	vldr	d7, [r3]
 800d03c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800d1e8 <G_q+0xa830>
 800d040:	ee27 5b05 	vmul.f64	d5, d7, d5
 800d044:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 800d048:	ed93 7b02 	vldr	d7, [r3, #8]
 800d04c:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800d050:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d054:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d058:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d05c:	f241 3368 	movw	r3, #4968	; 0x1368
 800d060:	443b      	add	r3, r7
 800d062:	ed83 7b00 	vstr	d7, [r3]
  t85_im = (t160.re * 0.5 + t160.im * 0.0) - (t161.re * 0.5 + t161.im * 0.0);
 800d066:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 800d06a:	ed93 7b00 	vldr	d7, [r3]
 800d06e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800d072:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d076:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 800d07a:	ed93 7b02 	vldr	d7, [r3, #8]
 800d07e:	ed9f 5b5a 	vldr	d5, [pc, #360]	; 800d1e8 <G_q+0xa830>
 800d082:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d086:	ee36 6b07 	vadd.f64	d6, d6, d7
 800d08a:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 800d08e:	ed93 7b00 	vldr	d7, [r3]
 800d092:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d096:	ee27 5b05 	vmul.f64	d5, d7, d5
 800d09a:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 800d09e:	ed93 7b02 	vldr	d7, [r3, #8]
 800d0a2:	ed9f 4b51 	vldr	d4, [pc, #324]	; 800d1e8 <G_q+0xa830>
 800d0a6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d0aa:	ee35 7b07 	vadd.f64	d7, d5, d7
 800d0ae:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d0b2:	f241 3318 	movw	r3, #4888	; 0x1318
 800d0b6:	443b      	add	r3, r7
 800d0b8:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t162.re * 0.0 - t162.im * 0.5) - (t163.re * 0.0 - t163.im * 0.5);
 800d0bc:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800d0c0:	ed93 7b00 	vldr	d7, [r3]
 800d0c4:	ed9f 6b48 	vldr	d6, [pc, #288]	; 800d1e8 <G_q+0xa830>
 800d0c8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d0cc:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800d0d0:	ed93 7b02 	vldr	d7, [r3, #8]
 800d0d4:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d0d8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d0dc:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d0e0:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800d0e4:	ed93 7b00 	vldr	d7, [r3]
 800d0e8:	ed9f 5b3f 	vldr	d5, [pc, #252]	; 800d1e8 <G_q+0xa830>
 800d0ec:	ee27 5b05 	vmul.f64	d5, d7, d5
 800d0f0:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800d0f4:	ed93 7b02 	vldr	d7, [r3, #8]
 800d0f8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800d0fc:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d100:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d104:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d108:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800d10c:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t162.re * 0.5 + t162.im * 0.0) - (t163.re * 0.5 + t163.im * 0.0);
 800d110:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800d114:	ed93 7b00 	vldr	d7, [r3]
 800d118:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800d11c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d120:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800d124:	ed93 7b02 	vldr	d7, [r3, #8]
 800d128:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 800d1e8 <G_q+0xa830>
 800d12c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d130:	ee36 6b07 	vadd.f64	d6, d6, d7
 800d134:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800d138:	ed93 7b00 	vldr	d7, [r3]
 800d13c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d140:	ee27 5b05 	vmul.f64	d5, d7, d5
 800d144:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800d148:	ed93 7b02 	vldr	d7, [r3, #8]
 800d14c:	ed9f 4b26 	vldr	d4, [pc, #152]	; 800d1e8 <G_q+0xa830>
 800d150:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d154:	ee35 7b07 	vadd.f64	d7, d5, d7
 800d158:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d15c:	f241 3348 	movw	r3, #4936	; 0x1348
 800d160:	443b      	add	r3, r7
 800d162:	ed83 7b00 	vstr	d7, [r3]
  if (t164.im == 0.0) {
 800d166:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800d16a:	ed93 7b02 	vldr	d7, [r3, #8]
 800d16e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d176:	d115      	bne.n	800d1a4 <G_q+0xa7ec>
    t20_im = t164.re / 2.0;
 800d178:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800d17c:	ed93 6b00 	vldr	d6, [r3]
 800d180:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d184:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d188:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800d18c:	ed83 7b00 	vstr	d7, [r3]
    t12_re = 0.0;
 800d190:	f04f 0300 	mov.w	r3, #0
 800d194:	f04f 0400 	mov.w	r4, #0
 800d198:	f241 3288 	movw	r2, #5000	; 0x1388
 800d19c:	443a      	add	r2, r7
 800d19e:	e9c2 3400 	strd	r3, r4, [r2]
 800d1a2:	e040      	b.n	800d226 <G_q+0xa86e>
  } else if (t164.re == 0.0) {
 800d1a4:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800d1a8:	ed93 7b00 	vldr	d7, [r3]
 800d1ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d1b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1b4:	d11e      	bne.n	800d1f4 <G_q+0xa83c>
    t20_im = 0.0;
 800d1b6:	f04f 0300 	mov.w	r3, #0
 800d1ba:	f04f 0400 	mov.w	r4, #0
 800d1be:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 800d1c2:	e9c2 3400 	strd	r3, r4, [r2]
    t12_re = t164.im / 2.0;
 800d1c6:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800d1ca:	ed93 6b02 	vldr	d6, [r3, #8]
 800d1ce:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d1d2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d1d6:	f241 3388 	movw	r3, #5000	; 0x1388
 800d1da:	443b      	add	r3, r7
 800d1dc:	ed83 7b00 	vstr	d7, [r3]
 800d1e0:	e021      	b.n	800d226 <G_q+0xa86e>
 800d1e2:	bf00      	nop
 800d1e4:	f3af 8000 	nop.w
	...
 800d1f0:	ffffee30 	.word	0xffffee30
  } else {
    t20_im = t164.re / 2.0;
 800d1f4:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800d1f8:	ed93 6b00 	vldr	d6, [r3]
 800d1fc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d200:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d204:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800d208:	ed83 7b00 	vstr	d7, [r3]
    t12_re = t164.im / 2.0;
 800d20c:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800d210:	ed93 6b02 	vldr	d6, [r3, #8]
 800d214:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d218:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d21c:	f241 3388 	movw	r3, #5000	; 0x1388
 800d220:	443b      	add	r3, r7
 800d222:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t165.im == 0.0) {
 800d226:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800d22a:	ed93 7b02 	vldr	d7, [r3, #8]
 800d22e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d236:	d116      	bne.n	800d266 <G_q+0xa8ae>
    t34_re = t165.re / 2.0;
 800d238:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800d23c:	ed93 6b00 	vldr	d6, [r3]
 800d240:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d244:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d248:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800d24c:	443b      	add	r3, r7
 800d24e:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800d252:	f04f 0300 	mov.w	r3, #0
 800d256:	f04f 0400 	mov.w	r4, #0
 800d25a:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800d25e:	443a      	add	r2, r7
 800d260:	e9c2 3400 	strd	r3, r4, [r2]
 800d264:	e039      	b.n	800d2da <G_q+0xa922>
  } else if (t165.re == 0.0) {
 800d266:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800d26a:	ed93 7b00 	vldr	d7, [r3]
 800d26e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d276:	d116      	bne.n	800d2a6 <G_q+0xa8ee>
    t34_re = 0.0;
 800d278:	f04f 0300 	mov.w	r3, #0
 800d27c:	f04f 0400 	mov.w	r4, #0
 800d280:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800d284:	443a      	add	r2, r7
 800d286:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t165.im / 2.0;
 800d28a:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800d28e:	ed93 6b02 	vldr	d6, [r3, #8]
 800d292:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d296:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d29a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800d29e:	443b      	add	r3, r7
 800d2a0:	ed83 7b00 	vstr	d7, [r3]
 800d2a4:	e019      	b.n	800d2da <G_q+0xa922>
  } else {
    t34_re = t165.re / 2.0;
 800d2a6:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800d2aa:	ed93 6b00 	vldr	d6, [r3]
 800d2ae:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d2b2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d2b6:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800d2ba:	443b      	add	r3, r7
 800d2bc:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t165.im / 2.0;
 800d2c0:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800d2c4:	ed93 6b02 	vldr	d6, [r3, #8]
 800d2c8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d2cc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d2d0:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800d2d4:	443b      	add	r3, r7
 800d2d6:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t166.im == 0.0) {
 800d2da:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 800d2de:	ed93 7b02 	vldr	d7, [r3, #8]
 800d2e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d2e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2ea:	d115      	bne.n	800d318 <G_q+0xa960>
    t12_im = t166.re / 2.0;
 800d2ec:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 800d2f0:	ed93 6b00 	vldr	d6, [r3]
 800d2f4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d2f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d2fc:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800d300:	ed83 7b00 	vstr	d7, [r3]
    b_t10_re = 0.0;
 800d304:	f04f 0300 	mov.w	r3, #0
 800d308:	f04f 0400 	mov.w	r4, #0
 800d30c:	f241 3238 	movw	r2, #4920	; 0x1338
 800d310:	443a      	add	r2, r7
 800d312:	e9c2 3400 	strd	r3, r4, [r2]
 800d316:	e037      	b.n	800d388 <G_q+0xa9d0>
  } else if (t166.re == 0.0) {
 800d318:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 800d31c:	ed93 7b00 	vldr	d7, [r3]
 800d320:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d328:	d115      	bne.n	800d356 <G_q+0xa99e>
    t12_im = 0.0;
 800d32a:	f04f 0300 	mov.w	r3, #0
 800d32e:	f04f 0400 	mov.w	r4, #0
 800d332:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800d336:	e9c2 3400 	strd	r3, r4, [r2]
    b_t10_re = t166.im / 2.0;
 800d33a:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 800d33e:	ed93 6b02 	vldr	d6, [r3, #8]
 800d342:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d346:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d34a:	f241 3338 	movw	r3, #4920	; 0x1338
 800d34e:	443b      	add	r3, r7
 800d350:	ed83 7b00 	vstr	d7, [r3]
 800d354:	e018      	b.n	800d388 <G_q+0xa9d0>
  } else {
    t12_im = t166.re / 2.0;
 800d356:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 800d35a:	ed93 6b00 	vldr	d6, [r3]
 800d35e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d362:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d366:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800d36a:	ed83 7b00 	vstr	d7, [r3]
    b_t10_re = t166.im / 2.0;
 800d36e:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 800d372:	ed93 6b02 	vldr	d6, [r3, #8]
 800d376:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d37a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d37e:	f241 3338 	movw	r3, #4920	; 0x1338
 800d382:	443b      	add	r3, r7
 800d384:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t167.im == 0.0) {
 800d388:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 800d38c:	ed93 7b02 	vldr	d7, [r3, #8]
 800d390:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d398:	d116      	bne.n	800d3c8 <G_q+0xaa10>
    t13_re = t167.re / 2.0;
 800d39a:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 800d39e:	ed93 6b00 	vldr	d6, [r3]
 800d3a2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d3a6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d3aa:	f241 3378 	movw	r3, #4984	; 0x1378
 800d3ae:	443b      	add	r3, r7
 800d3b0:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 800d3b4:	f04f 0300 	mov.w	r3, #0
 800d3b8:	f04f 0400 	mov.w	r4, #0
 800d3bc:	f241 3270 	movw	r2, #4976	; 0x1370
 800d3c0:	443a      	add	r2, r7
 800d3c2:	e9c2 3400 	strd	r3, r4, [r2]
 800d3c6:	e039      	b.n	800d43c <G_q+0xaa84>
  } else if (t167.re == 0.0) {
 800d3c8:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 800d3cc:	ed93 7b00 	vldr	d7, [r3]
 800d3d0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d3d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3d8:	d116      	bne.n	800d408 <G_q+0xaa50>
    t13_re = 0.0;
 800d3da:	f04f 0300 	mov.w	r3, #0
 800d3de:	f04f 0400 	mov.w	r4, #0
 800d3e2:	f241 3278 	movw	r2, #4984	; 0x1378
 800d3e6:	443a      	add	r2, r7
 800d3e8:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t167.im / 2.0;
 800d3ec:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 800d3f0:	ed93 6b02 	vldr	d6, [r3, #8]
 800d3f4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d3f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d3fc:	f241 3370 	movw	r3, #4976	; 0x1370
 800d400:	443b      	add	r3, r7
 800d402:	ed83 7b00 	vstr	d7, [r3]
 800d406:	e019      	b.n	800d43c <G_q+0xaa84>
  } else {
    t13_re = t167.re / 2.0;
 800d408:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 800d40c:	ed93 6b00 	vldr	d6, [r3]
 800d410:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d414:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d418:	f241 3378 	movw	r3, #4984	; 0x1378
 800d41c:	443b      	add	r3, r7
 800d41e:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t167.im / 2.0;
 800d422:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 800d426:	ed93 6b02 	vldr	d6, [r3, #8]
 800d42a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d42e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d432:	f241 3370 	movw	r3, #4976	; 0x1370
 800d436:	443b      	add	r3, r7
 800d438:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_im += t34_re;
 800d43c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800d440:	ed93 6b00 	vldr	d6, [r3]
 800d444:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800d448:	443b      	add	r3, r7
 800d44a:	ed93 7b00 	vldr	d7, [r3]
 800d44e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d452:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800d456:	ed83 7b00 	vstr	d7, [r3]
  t12_re += t34_im;
 800d45a:	f241 3388 	movw	r3, #5000	; 0x1388
 800d45e:	443b      	add	r3, r7
 800d460:	ed93 6b00 	vldr	d6, [r3]
 800d464:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800d468:	443b      	add	r3, r7
 800d46a:	ed93 7b00 	vldr	d7, [r3]
 800d46e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d472:	f241 3388 	movw	r3, #5000	; 0x1388
 800d476:	443b      	add	r3, r7
 800d478:	ed83 7b00 	vstr	d7, [r3]
  t12_im = (t12_im + t13_re) + 7.498798913309288E-33;
 800d47c:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800d480:	ed93 6b00 	vldr	d6, [r3]
 800d484:	f241 3378 	movw	r3, #4984	; 0x1378
 800d488:	443b      	add	r3, r7
 800d48a:	ed93 7b00 	vldr	d7, [r3]
 800d48e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d492:	ed9f 6be3 	vldr	d6, [pc, #908]	; 800d820 <G_q+0xae68>
 800d496:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d49a:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800d49e:	ed83 7b00 	vstr	d7, [r3]
  b_t10_re += t13_im;
 800d4a2:	f241 3338 	movw	r3, #4920	; 0x1338
 800d4a6:	443b      	add	r3, r7
 800d4a8:	ed93 6b00 	vldr	d6, [r3]
 800d4ac:	f241 3370 	movw	r3, #4976	; 0x1370
 800d4b0:	443b      	add	r3, r7
 800d4b2:	ed93 7b00 	vldr	d7, [r3]
 800d4b6:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d4ba:	f241 3338 	movw	r3, #4920	; 0x1338
 800d4be:	443b      	add	r3, r7
 800d4c0:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t16_re * t16_im - t85_im * t20_re) + (t20_im * t12_im - t12_re *
 800d4c4:	f241 3368 	movw	r3, #4968	; 0x1368
 800d4c8:	443b      	add	r3, r7
 800d4ca:	ed93 6b00 	vldr	d6, [r3]
 800d4ce:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800d4d2:	ed93 7b00 	vldr	d7, [r3]
 800d4d6:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d4da:	f241 3318 	movw	r3, #4888	; 0x1318
 800d4de:	443b      	add	r3, r7
 800d4e0:	ed93 5b00 	vldr	d5, [r3]
 800d4e4:	f241 3348 	movw	r3, #4936	; 0x1348
 800d4e8:	443b      	add	r3, r7
 800d4ea:	ed93 7b00 	vldr	d7, [r3]
 800d4ee:	ee25 7b07 	vmul.f64	d7, d5, d7
 800d4f2:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d4f6:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800d4fa:	ed93 5b00 	vldr	d5, [r3]
 800d4fe:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800d502:	ed93 7b00 	vldr	d7, [r3]
 800d506:	ee25 5b07 	vmul.f64	d5, d5, d7
 800d50a:	f241 3388 	movw	r3, #5000	; 0x1388
 800d50e:	443b      	add	r3, r7
 800d510:	ed93 4b00 	vldr	d4, [r3]
 800d514:	f241 3338 	movw	r3, #4920	; 0x1338
 800d518:	443b      	add	r3, r7
 800d51a:	ed93 7b00 	vldr	d7, [r3]
 800d51e:	ee24 7b07 	vmul.f64	d7, d4, d7
 800d522:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d526:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d52a:	f241 3378 	movw	r3, #4984	; 0x1378
 800d52e:	443b      	add	r3, r7
 800d530:	ed83 7b00 	vstr	d7, [r3]
    b_t10_re);
  t85_im = (t16_re * t20_re + t85_im * t16_im) + (t20_im * b_t10_re + t12_re *
 800d534:	f241 3368 	movw	r3, #4968	; 0x1368
 800d538:	443b      	add	r3, r7
 800d53a:	ed93 6b00 	vldr	d6, [r3]
 800d53e:	f241 3348 	movw	r3, #4936	; 0x1348
 800d542:	443b      	add	r3, r7
 800d544:	ed93 7b00 	vldr	d7, [r3]
 800d548:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d54c:	f241 3318 	movw	r3, #4888	; 0x1318
 800d550:	443b      	add	r3, r7
 800d552:	ed93 5b00 	vldr	d5, [r3]
 800d556:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800d55a:	ed93 7b00 	vldr	d7, [r3]
 800d55e:	ee25 7b07 	vmul.f64	d7, d5, d7
 800d562:	ee36 6b07 	vadd.f64	d6, d6, d7
 800d566:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800d56a:	ed93 5b00 	vldr	d5, [r3]
 800d56e:	f241 3338 	movw	r3, #4920	; 0x1338
 800d572:	443b      	add	r3, r7
 800d574:	ed93 7b00 	vldr	d7, [r3]
 800d578:	ee25 5b07 	vmul.f64	d5, d5, d7
 800d57c:	f241 3388 	movw	r3, #5000	; 0x1388
 800d580:	443b      	add	r3, r7
 800d582:	ed93 4b00 	vldr	d4, [r3]
 800d586:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800d58a:	ed93 7b00 	vldr	d7, [r3]
 800d58e:	ee24 7b07 	vmul.f64	d7, d4, d7
 800d592:	ee35 7b07 	vadd.f64	d7, d5, d7
 800d596:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d59a:	f241 3318 	movw	r3, #4888	; 0x1318
 800d59e:	443b      	add	r3, r7
 800d5a0:	ed83 7b00 	vstr	d7, [r3]
    t12_im);
  t34_re = (t158.re * 0.0 - t158.im * 0.5) - (t159.re * 0.0 - t159.im * 0.5);
 800d5a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800d5a8:	ed93 7b00 	vldr	d7, [r3]
 800d5ac:	ed9f 6b9e 	vldr	d6, [pc, #632]	; 800d828 <G_q+0xae70>
 800d5b0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d5b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800d5b8:	ed93 7b02 	vldr	d7, [r3, #8]
 800d5bc:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d5c0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d5c4:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d5c8:	4b9f      	ldr	r3, [pc, #636]	; (800d848 <G_q+0xae90>)
 800d5ca:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d5ce:	443a      	add	r2, r7
 800d5d0:	4413      	add	r3, r2
 800d5d2:	ed93 7b00 	vldr	d7, [r3]
 800d5d6:	ed9f 5b94 	vldr	d5, [pc, #592]	; 800d828 <G_q+0xae70>
 800d5da:	ee27 5b05 	vmul.f64	d5, d7, d5
 800d5de:	4b9a      	ldr	r3, [pc, #616]	; (800d848 <G_q+0xae90>)
 800d5e0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d5e4:	443a      	add	r2, r7
 800d5e6:	4413      	add	r3, r2
 800d5e8:	ed93 7b02 	vldr	d7, [r3, #8]
 800d5ec:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800d5f0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d5f4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d5f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d5fc:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800d600:	443b      	add	r3, r7
 800d602:	ed83 7b00 	vstr	d7, [r3]
  t34_im = (t158.re * 0.5 + t158.im * 0.0) - (t159.re * 0.5 + t159.im * 0.0);
 800d606:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800d60a:	ed93 7b00 	vldr	d7, [r3]
 800d60e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800d612:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d616:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800d61a:	ed93 7b02 	vldr	d7, [r3, #8]
 800d61e:	ed9f 5b82 	vldr	d5, [pc, #520]	; 800d828 <G_q+0xae70>
 800d622:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d626:	ee36 6b07 	vadd.f64	d6, d6, d7
 800d62a:	4b87      	ldr	r3, [pc, #540]	; (800d848 <G_q+0xae90>)
 800d62c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d630:	443a      	add	r2, r7
 800d632:	4413      	add	r3, r2
 800d634:	ed93 7b00 	vldr	d7, [r3]
 800d638:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d63c:	ee27 5b05 	vmul.f64	d5, d7, d5
 800d640:	4b81      	ldr	r3, [pc, #516]	; (800d848 <G_q+0xae90>)
 800d642:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d646:	443a      	add	r2, r7
 800d648:	4413      	add	r3, r2
 800d64a:	ed93 7b02 	vldr	d7, [r3, #8]
 800d64e:	ed9f 4b76 	vldr	d4, [pc, #472]	; 800d828 <G_q+0xae70>
 800d652:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d656:	ee35 7b07 	vadd.f64	d7, d5, d7
 800d65a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d65e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800d662:	443b      	add	r3, r7
 800d664:	ed83 7b00 	vstr	d7, [r3]
  b_G_q[2].re = -g * ((((((t8_im * t19_re_tmp - t54_re * t19_im_tmp) * 0.1376 +
 800d668:	4b78      	ldr	r3, [pc, #480]	; (800d84c <G_q+0xae94>)
 800d66a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d66e:	443a      	add	r2, r7
 800d670:	4413      	add	r3, r2
 800d672:	ed93 7b00 	vldr	d7, [r3]
 800d676:	eeb1 6b47 	vneg.f64	d6, d7
 800d67a:	f241 2370 	movw	r3, #4720	; 0x1270
 800d67e:	443b      	add	r3, r7
 800d680:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 800d684:	ed92 5b00 	vldr	d5, [r2]
 800d688:	ed93 7b00 	vldr	d7, [r3]
 800d68c:	ee25 5b07 	vmul.f64	d5, d5, d7
 800d690:	f241 2368 	movw	r3, #4712	; 0x1268
 800d694:	443b      	add	r3, r7
 800d696:	f241 3228 	movw	r2, #4904	; 0x1328
 800d69a:	443a      	add	r2, r7
 800d69c:	ed92 4b00 	vldr	d4, [r2]
 800d6a0:	ed93 7b00 	vldr	d7, [r3]
 800d6a4:	ee24 7b07 	vmul.f64	d7, d4, d7
 800d6a8:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d6ac:	ed9f 5b60 	vldr	d5, [pc, #384]	; 800d830 <G_q+0xae78>
 800d6b0:	ee27 5b05 	vmul.f64	d5, d7, d5
    (t43_re * t41_im - t41_re * t8_re) * 0.0215) + (t43_im * t55_im - b_t54_re *
 800d6b4:	f241 2358 	movw	r3, #4696	; 0x1258
 800d6b8:	443b      	add	r3, r7
 800d6ba:	ed93 4b00 	vldr	d4, [r3]
 800d6be:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800d6c2:	ed93 7b00 	vldr	d7, [r3]
 800d6c6:	ee24 4b07 	vmul.f64	d4, d4, d7
 800d6ca:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800d6ce:	f241 3208 	movw	r2, #4872	; 0x1308
 800d6d2:	443a      	add	r2, r7
 800d6d4:	ed92 3b00 	vldr	d3, [r2]
 800d6d8:	ed93 7b00 	vldr	d7, [r3]
 800d6dc:	ee23 7b07 	vmul.f64	d7, d3, d7
 800d6e0:	ee34 7b47 	vsub.f64	d7, d4, d7
 800d6e4:	ed9f 4b54 	vldr	d4, [pc, #336]	; 800d838 <G_q+0xae80>
 800d6e8:	ee27 7b04 	vmul.f64	d7, d7, d4
  b_G_q[2].re = -g * ((((((t8_im * t19_re_tmp - t54_re * t19_im_tmp) * 0.1376 +
 800d6ec:	ee35 5b07 	vadd.f64	d5, d5, d7
    (t43_re * t41_im - t41_re * t8_re) * 0.0215) + (t43_im * t55_im - b_t54_re *
 800d6f0:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800d6f4:	443b      	add	r3, r7
 800d6f6:	ed93 4b00 	vldr	d4, [r3]
 800d6fa:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800d6fe:	443b      	add	r3, r7
 800d700:	ed93 7b00 	vldr	d7, [r3]
 800d704:	ee24 4b07 	vmul.f64	d4, d4, d7
 800d708:	f241 23f0 	movw	r3, #4848	; 0x12f0
 800d70c:	443b      	add	r3, r7
 800d70e:	ed93 3b00 	vldr	d3, [r3]
 800d712:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800d716:	443b      	add	r3, r7
 800d718:	ed93 7b00 	vldr	d7, [r3]
 800d71c:	ee23 7b07 	vmul.f64	d7, d3, d7
 800d720:	ee34 7b47 	vsub.f64	d7, d4, d7
    b_t54_im) * 0.0215) - (t74_re * t3_im - t74_im * t72_re) * 0.1376) + (t60_re
 800d724:	ed9f 4b44 	vldr	d4, [pc, #272]	; 800d838 <G_q+0xae80>
 800d728:	ee27 7b04 	vmul.f64	d7, d7, d4
    (t43_re * t41_im - t41_re * t8_re) * 0.0215) + (t43_im * t55_im - b_t54_re *
 800d72c:	ee35 5b07 	vadd.f64	d5, d5, d7
    b_t54_im) * 0.0215) - (t74_re * t3_im - t74_im * t72_re) * 0.1376) + (t60_re
 800d730:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800d734:	443b      	add	r3, r7
 800d736:	ed93 4b00 	vldr	d4, [r3]
 800d73a:	f241 3310 	movw	r3, #4880	; 0x1310
 800d73e:	443b      	add	r3, r7
 800d740:	ed93 7b00 	vldr	d7, [r3]
 800d744:	ee24 4b07 	vmul.f64	d4, d4, d7
 800d748:	f241 22b0 	movw	r2, #4784	; 0x12b0
 800d74c:	443a      	add	r2, r7
 800d74e:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800d752:	ed92 3b00 	vldr	d3, [r2]
 800d756:	ed93 7b00 	vldr	d7, [r3]
 800d75a:	ee23 7b07 	vmul.f64	d7, d3, d7
 800d75e:	ee34 7b47 	vsub.f64	d7, d4, d7
 800d762:	ed9f 4b33 	vldr	d4, [pc, #204]	; 800d830 <G_q+0xae78>
 800d766:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d76a:	ee35 5b47 	vsub.f64	d5, d5, d7
    * t23_re - t76_re * t58_im) * 1.3164953090834051E-18) - (t13_re * t34_re -
 800d76e:	f241 2350 	movw	r3, #4688	; 0x1250
 800d772:	443b      	add	r3, r7
 800d774:	ed93 4b00 	vldr	d4, [r3]
 800d778:	f241 3330 	movw	r3, #4912	; 0x1330
 800d77c:	443b      	add	r3, r7
 800d77e:	ed93 7b00 	vldr	d7, [r3]
 800d782:	ee24 4b07 	vmul.f64	d4, d4, d7
 800d786:	f241 22a8 	movw	r2, #4776	; 0x12a8
 800d78a:	443a      	add	r2, r7
 800d78c:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800d790:	ed92 3b00 	vldr	d3, [r2]
 800d794:	ed93 7b00 	vldr	d7, [r3]
 800d798:	ee23 7b07 	vmul.f64	d7, d3, d7
 800d79c:	ee34 7b47 	vsub.f64	d7, d4, d7
 800d7a0:	ed9f 4b27 	vldr	d4, [pc, #156]	; 800d840 <G_q+0xae88>
 800d7a4:	ee27 7b04 	vmul.f64	d7, d7, d4
    b_t54_im) * 0.0215) - (t74_re * t3_im - t74_im * t72_re) * 0.1376) + (t60_re
 800d7a8:	ee35 5b07 	vadd.f64	d5, d5, d7
    * t23_re - t76_re * t58_im) * 1.3164953090834051E-18) - (t13_re * t34_re -
 800d7ac:	f241 3378 	movw	r3, #4984	; 0x1378
 800d7b0:	443b      	add	r3, r7
 800d7b2:	ed93 4b00 	vldr	d4, [r3]
 800d7b6:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800d7ba:	443b      	add	r3, r7
 800d7bc:	ed93 7b00 	vldr	d7, [r3]
 800d7c0:	ee24 4b07 	vmul.f64	d4, d4, d7
    t85_im * t34_im) * 1.3164953090834051E-18);
 800d7c4:	f241 3318 	movw	r3, #4888	; 0x1318
 800d7c8:	443b      	add	r3, r7
 800d7ca:	ed93 3b00 	vldr	d3, [r3]
 800d7ce:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800d7d2:	443b      	add	r3, r7
 800d7d4:	ed93 7b00 	vldr	d7, [r3]
 800d7d8:	ee23 7b07 	vmul.f64	d7, d3, d7
    * t23_re - t76_re * t58_im) * 1.3164953090834051E-18) - (t13_re * t34_re -
 800d7dc:	ee34 7b47 	vsub.f64	d7, d4, d7
    t85_im * t34_im) * 1.3164953090834051E-18);
 800d7e0:	ed9f 4b17 	vldr	d4, [pc, #92]	; 800d840 <G_q+0xae88>
 800d7e4:	ee27 7b04 	vmul.f64	d7, d7, d4
    * t23_re - t76_re * t58_im) * 1.3164953090834051E-18) - (t13_re * t34_re -
 800d7e8:	ee35 7b47 	vsub.f64	d7, d5, d7
  b_G_q[2].re = -g * ((((((t8_im * t19_re_tmp - t54_re * t19_im_tmp) * 0.1376 +
 800d7ec:	4b18      	ldr	r3, [pc, #96]	; (800d850 <G_q+0xae98>)
 800d7ee:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d7f2:	443a      	add	r2, r7
 800d7f4:	4413      	add	r3, r2
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	3320      	adds	r3, #32
 800d7fa:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d7fe:	ed83 7b00 	vstr	d7, [r3]
  b_G_q[2].im = -g * ((((((t8_im * t19_im_tmp + t54_re * t19_re_tmp) * 0.1376 +
 800d802:	4b12      	ldr	r3, [pc, #72]	; (800d84c <G_q+0xae94>)
 800d804:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d808:	443a      	add	r2, r7
 800d80a:	4413      	add	r3, r2
 800d80c:	ed93 7b00 	vldr	d7, [r3]
 800d810:	eeb1 6b47 	vneg.f64	d6, d7
 800d814:	f241 2368 	movw	r3, #4712	; 0x1268
 800d818:	443b      	add	r3, r7
 800d81a:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 800d81e:	e019      	b.n	800d854 <G_q+0xae9c>
 800d820:	858a5d48 	.word	0x858a5d48
 800d824:	394377ce 	.word	0x394377ce
	...
 800d830:	75f6fd22 	.word	0x75f6fd22
 800d834:	3fc19ce0 	.word	0x3fc19ce0
 800d838:	9374bc6a 	.word	0x9374bc6a
 800d83c:	3f960418 	.word	0x3f960418
 800d840:	2ba953a1 	.word	0x2ba953a1
 800d844:	3c3848f9 	.word	0x3c3848f9
 800d848:	ffffee90 	.word	0xffffee90
 800d84c:	ffffec58 	.word	0xffffec58
 800d850:	ffffec34 	.word	0xffffec34
 800d854:	ed92 5b00 	vldr	d5, [r2]
 800d858:	ed93 7b00 	vldr	d7, [r3]
 800d85c:	ee25 5b07 	vmul.f64	d5, d5, d7
 800d860:	f241 2370 	movw	r3, #4720	; 0x1270
 800d864:	443b      	add	r3, r7
 800d866:	f241 3228 	movw	r2, #4904	; 0x1328
 800d86a:	443a      	add	r2, r7
 800d86c:	ed92 4b00 	vldr	d4, [r2]
 800d870:	ed93 7b00 	vldr	d7, [r3]
 800d874:	ee24 7b07 	vmul.f64	d7, d4, d7
 800d878:	ee35 7b07 	vadd.f64	d7, d5, d7
 800d87c:	ed9f 5ba6 	vldr	d5, [pc, #664]	; 800db18 <G_q+0xb160>
 800d880:	ee27 5b05 	vmul.f64	d5, d7, d5
    (t43_re * t8_re + t41_re * t41_im) * 0.0215) + (t43_im * b_t54_im + b_t54_re
 800d884:	f241 2258 	movw	r2, #4696	; 0x1258
 800d888:	443a      	add	r2, r7
 800d88a:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800d88e:	ed92 4b00 	vldr	d4, [r2]
 800d892:	ed93 7b00 	vldr	d7, [r3]
 800d896:	ee24 4b07 	vmul.f64	d4, d4, d7
 800d89a:	f241 3308 	movw	r3, #4872	; 0x1308
 800d89e:	443b      	add	r3, r7
 800d8a0:	ed93 3b00 	vldr	d3, [r3]
 800d8a4:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800d8a8:	ed93 7b00 	vldr	d7, [r3]
 800d8ac:	ee23 7b07 	vmul.f64	d7, d3, d7
 800d8b0:	ee34 7b07 	vadd.f64	d7, d4, d7
 800d8b4:	ed9f 4b9a 	vldr	d4, [pc, #616]	; 800db20 <G_q+0xb168>
 800d8b8:	ee27 7b04 	vmul.f64	d7, d7, d4
  b_G_q[2].im = -g * ((((((t8_im * t19_im_tmp + t54_re * t19_re_tmp) * 0.1376 +
 800d8bc:	ee35 5b07 	vadd.f64	d5, d5, d7
    (t43_re * t8_re + t41_re * t41_im) * 0.0215) + (t43_im * b_t54_im + b_t54_re
 800d8c0:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800d8c4:	443b      	add	r3, r7
 800d8c6:	ed93 4b00 	vldr	d4, [r3]
 800d8ca:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800d8ce:	443b      	add	r3, r7
 800d8d0:	ed93 7b00 	vldr	d7, [r3]
 800d8d4:	ee24 4b07 	vmul.f64	d4, d4, d7
    * t55_im) * 0.0215) - (t74_re * t72_re + t74_im * t3_im) * 0.1376) + (t60_re
 800d8d8:	f241 23f0 	movw	r3, #4848	; 0x12f0
 800d8dc:	443b      	add	r3, r7
 800d8de:	ed93 3b00 	vldr	d3, [r3]
 800d8e2:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800d8e6:	443b      	add	r3, r7
 800d8e8:	ed93 7b00 	vldr	d7, [r3]
 800d8ec:	ee23 7b07 	vmul.f64	d7, d3, d7
    (t43_re * t8_re + t41_re * t41_im) * 0.0215) + (t43_im * b_t54_im + b_t54_re
 800d8f0:	ee34 7b07 	vadd.f64	d7, d4, d7
    * t55_im) * 0.0215) - (t74_re * t72_re + t74_im * t3_im) * 0.1376) + (t60_re
 800d8f4:	ed9f 4b8a 	vldr	d4, [pc, #552]	; 800db20 <G_q+0xb168>
 800d8f8:	ee27 7b04 	vmul.f64	d7, d7, d4
    (t43_re * t8_re + t41_re * t41_im) * 0.0215) + (t43_im * b_t54_im + b_t54_re
 800d8fc:	ee35 5b07 	vadd.f64	d5, d5, d7
    * t55_im) * 0.0215) - (t74_re * t72_re + t74_im * t3_im) * 0.1376) + (t60_re
 800d900:	f241 22b8 	movw	r2, #4792	; 0x12b8
 800d904:	443a      	add	r2, r7
 800d906:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800d90a:	ed92 4b00 	vldr	d4, [r2]
 800d90e:	ed93 7b00 	vldr	d7, [r3]
 800d912:	ee24 4b07 	vmul.f64	d4, d4, d7
 800d916:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800d91a:	443b      	add	r3, r7
 800d91c:	ed93 3b00 	vldr	d3, [r3]
 800d920:	f241 3310 	movw	r3, #4880	; 0x1310
 800d924:	443b      	add	r3, r7
 800d926:	ed93 7b00 	vldr	d7, [r3]
 800d92a:	ee23 7b07 	vmul.f64	d7, d3, d7
 800d92e:	ee34 7b07 	vadd.f64	d7, d4, d7
 800d932:	ed9f 4b79 	vldr	d4, [pc, #484]	; 800db18 <G_q+0xb160>
 800d936:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d93a:	ee35 5b47 	vsub.f64	d5, d5, d7
    * t58_im + t76_re * t23_re) * 1.3164953090834051E-18) - (t13_re * t34_im +
 800d93e:	f241 2250 	movw	r2, #4688	; 0x1250
 800d942:	443a      	add	r2, r7
 800d944:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800d948:	ed92 4b00 	vldr	d4, [r2]
 800d94c:	ed93 7b00 	vldr	d7, [r3]
 800d950:	ee24 4b07 	vmul.f64	d4, d4, d7
 800d954:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800d958:	443b      	add	r3, r7
 800d95a:	ed93 3b00 	vldr	d3, [r3]
 800d95e:	f241 3330 	movw	r3, #4912	; 0x1330
 800d962:	443b      	add	r3, r7
 800d964:	ed93 7b00 	vldr	d7, [r3]
 800d968:	ee23 7b07 	vmul.f64	d7, d3, d7
 800d96c:	ee34 7b07 	vadd.f64	d7, d4, d7
 800d970:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 800db28 <G_q+0xb170>
 800d974:	ee27 7b04 	vmul.f64	d7, d7, d4
    * t55_im) * 0.0215) - (t74_re * t72_re + t74_im * t3_im) * 0.1376) + (t60_re
 800d978:	ee35 5b07 	vadd.f64	d5, d5, d7
    * t58_im + t76_re * t23_re) * 1.3164953090834051E-18) - (t13_re * t34_im +
 800d97c:	f241 3378 	movw	r3, #4984	; 0x1378
 800d980:	443b      	add	r3, r7
 800d982:	ed93 4b00 	vldr	d4, [r3]
 800d986:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800d98a:	443b      	add	r3, r7
 800d98c:	ed93 7b00 	vldr	d7, [r3]
 800d990:	ee24 4b07 	vmul.f64	d4, d4, d7
    t85_im * t34_re) * 1.3164953090834051E-18);
 800d994:	f241 3318 	movw	r3, #4888	; 0x1318
 800d998:	443b      	add	r3, r7
 800d99a:	ed93 3b00 	vldr	d3, [r3]
 800d99e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800d9a2:	443b      	add	r3, r7
 800d9a4:	ed93 7b00 	vldr	d7, [r3]
 800d9a8:	ee23 7b07 	vmul.f64	d7, d3, d7
    * t58_im + t76_re * t23_re) * 1.3164953090834051E-18) - (t13_re * t34_im +
 800d9ac:	ee34 7b07 	vadd.f64	d7, d4, d7
    t85_im * t34_re) * 1.3164953090834051E-18);
 800d9b0:	ed9f 4b5d 	vldr	d4, [pc, #372]	; 800db28 <G_q+0xb170>
 800d9b4:	ee27 7b04 	vmul.f64	d7, d7, d4
    * t58_im + t76_re * t23_re) * 1.3164953090834051E-18) - (t13_re * t34_im +
 800d9b8:	ee35 7b47 	vsub.f64	d7, d5, d7
  b_G_q[2].im = -g * ((((((t8_im * t19_im_tmp + t54_re * t19_re_tmp) * 0.1376 +
 800d9bc:	4b5c      	ldr	r3, [pc, #368]	; (800db30 <G_q+0xb178>)
 800d9be:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d9c2:	443a      	add	r2, r7
 800d9c4:	4413      	add	r3, r2
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	3320      	adds	r3, #32
 800d9ca:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d9ce:	ed83 7b02 	vstr	d7, [r3, #8]
  if (t172.im == 0.0) {
 800d9d2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800d9d6:	ed93 7b02 	vldr	d7, [r3, #8]
 800d9da:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d9de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9e2:	d115      	bne.n	800da10 <G_q+0xb058>
    t85_im = t172.re / 2.0;
 800d9e4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800d9e8:	ed93 6b00 	vldr	d6, [r3]
 800d9ec:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d9f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d9f4:	f241 3318 	movw	r3, #4888	; 0x1318
 800d9f8:	443b      	add	r3, r7
 800d9fa:	ed83 7b00 	vstr	d7, [r3]
    t41_im = 0.0;
 800d9fe:	f04f 0300 	mov.w	r3, #0
 800da02:	f04f 0400 	mov.w	r4, #0
 800da06:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 800da0a:	e9c2 3400 	strd	r3, r4, [r2]
 800da0e:	e037      	b.n	800da80 <G_q+0xb0c8>
  } else if (t172.re == 0.0) {
 800da10:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800da14:	ed93 7b00 	vldr	d7, [r3]
 800da18:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800da1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da20:	d115      	bne.n	800da4e <G_q+0xb096>
    t85_im = 0.0;
 800da22:	f04f 0300 	mov.w	r3, #0
 800da26:	f04f 0400 	mov.w	r4, #0
 800da2a:	f241 3218 	movw	r2, #4888	; 0x1318
 800da2e:	443a      	add	r2, r7
 800da30:	e9c2 3400 	strd	r3, r4, [r2]
    t41_im = t172.im / 2.0;
 800da34:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800da38:	ed93 6b02 	vldr	d6, [r3, #8]
 800da3c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800da40:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800da44:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800da48:	ed83 7b00 	vstr	d7, [r3]
 800da4c:	e018      	b.n	800da80 <G_q+0xb0c8>
  } else {
    t85_im = t172.re / 2.0;
 800da4e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800da52:	ed93 6b00 	vldr	d6, [r3]
 800da56:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800da5a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800da5e:	f241 3318 	movw	r3, #4888	; 0x1318
 800da62:	443b      	add	r3, r7
 800da64:	ed83 7b00 	vstr	d7, [r3]
    t41_im = t172.im / 2.0;
 800da68:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800da6c:	ed93 6b02 	vldr	d6, [r3, #8]
 800da70:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800da74:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800da78:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800da7c:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t173.im == 0.0) {
 800da80:	4b2c      	ldr	r3, [pc, #176]	; (800db34 <G_q+0xb17c>)
 800da82:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800da86:	443a      	add	r2, r7
 800da88:	4413      	add	r3, r2
 800da8a:	ed93 7b02 	vldr	d7, [r3, #8]
 800da8e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800da92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da96:	d119      	bne.n	800dacc <G_q+0xb114>
    t34_re = t173.re / 2.0;
 800da98:	4b26      	ldr	r3, [pc, #152]	; (800db34 <G_q+0xb17c>)
 800da9a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800da9e:	443a      	add	r2, r7
 800daa0:	4413      	add	r3, r2
 800daa2:	ed93 6b00 	vldr	d6, [r3]
 800daa6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800daaa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800daae:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800dab2:	443b      	add	r3, r7
 800dab4:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800dab8:	f04f 0300 	mov.w	r3, #0
 800dabc:	f04f 0400 	mov.w	r4, #0
 800dac0:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800dac4:	443a      	add	r2, r7
 800dac6:	e9c2 3400 	strd	r3, r4, [r2]
 800daca:	e055      	b.n	800db78 <G_q+0xb1c0>
  } else if (t173.re == 0.0) {
 800dacc:	4b19      	ldr	r3, [pc, #100]	; (800db34 <G_q+0xb17c>)
 800dace:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800dad2:	443a      	add	r2, r7
 800dad4:	4413      	add	r3, r2
 800dad6:	ed93 7b00 	vldr	d7, [r3]
 800dada:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dae2:	d129      	bne.n	800db38 <G_q+0xb180>
    t34_re = 0.0;
 800dae4:	f04f 0300 	mov.w	r3, #0
 800dae8:	f04f 0400 	mov.w	r4, #0
 800daec:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800daf0:	443a      	add	r2, r7
 800daf2:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t173.im / 2.0;
 800daf6:	4b0f      	ldr	r3, [pc, #60]	; (800db34 <G_q+0xb17c>)
 800daf8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800dafc:	443a      	add	r2, r7
 800dafe:	4413      	add	r3, r2
 800db00:	ed93 6b02 	vldr	d6, [r3, #8]
 800db04:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800db08:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800db0c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800db10:	443b      	add	r3, r7
 800db12:	ed83 7b00 	vstr	d7, [r3]
 800db16:	e02f      	b.n	800db78 <G_q+0xb1c0>
 800db18:	75f6fd22 	.word	0x75f6fd22
 800db1c:	3fc19ce0 	.word	0x3fc19ce0
 800db20:	9374bc6a 	.word	0x9374bc6a
 800db24:	3f960418 	.word	0x3f960418
 800db28:	2ba953a1 	.word	0x2ba953a1
 800db2c:	3c3848f9 	.word	0x3c3848f9
 800db30:	ffffec34 	.word	0xffffec34
 800db34:	ffffeeb0 	.word	0xffffeeb0
  } else {
    t34_re = t173.re / 2.0;
 800db38:	4bb5      	ldr	r3, [pc, #724]	; (800de10 <G_q+0xb458>)
 800db3a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800db3e:	443a      	add	r2, r7
 800db40:	4413      	add	r3, r2
 800db42:	ed93 6b00 	vldr	d6, [r3]
 800db46:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800db4a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800db4e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800db52:	443b      	add	r3, r7
 800db54:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t173.im / 2.0;
 800db58:	4bad      	ldr	r3, [pc, #692]	; (800de10 <G_q+0xb458>)
 800db5a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800db5e:	443a      	add	r2, r7
 800db60:	4413      	add	r3, r2
 800db62:	ed93 6b02 	vldr	d6, [r3, #8]
 800db66:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800db6a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800db6e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800db72:	443b      	add	r3, r7
 800db74:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re = (t182.re * 0.0 - t182.im * 3.061616997868383E-17) - (t183.re * 0.0 -
 800db78:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 800db7c:	ed93 7b00 	vldr	d7, [r3]
 800db80:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 800de00 <G_q+0xb448>
 800db84:	ee27 6b06 	vmul.f64	d6, d7, d6
 800db88:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 800db8c:	ed93 7b02 	vldr	d7, [r3, #8]
 800db90:	ed9f 5b9d 	vldr	d5, [pc, #628]	; 800de08 <G_q+0xb450>
 800db94:	ee27 7b05 	vmul.f64	d7, d7, d5
 800db98:	ee36 6b47 	vsub.f64	d6, d6, d7
 800db9c:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 800dba0:	ed93 7b00 	vldr	d7, [r3]
 800dba4:	ed9f 5b96 	vldr	d5, [pc, #600]	; 800de00 <G_q+0xb448>
 800dba8:	ee27 5b05 	vmul.f64	d5, d7, d5
    t183.im * 3.061616997868383E-17);
 800dbac:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 800dbb0:	ed93 7b02 	vldr	d7, [r3, #8]
 800dbb4:	ed9f 4b94 	vldr	d4, [pc, #592]	; 800de08 <G_q+0xb450>
 800dbb8:	ee27 7b04 	vmul.f64	d7, d7, d4
  t16_re = (t182.re * 0.0 - t182.im * 3.061616997868383E-17) - (t183.re * 0.0 -
 800dbbc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800dbc0:	ee36 7b47 	vsub.f64	d7, d6, d7
 800dbc4:	f241 3368 	movw	r3, #4968	; 0x1368
 800dbc8:	443b      	add	r3, r7
 800dbca:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t182.re * 3.061616997868383E-17 + t182.im * 0.0) - (t183.re *
 800dbce:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 800dbd2:	ed93 7b00 	vldr	d7, [r3]
 800dbd6:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 800de08 <G_q+0xb450>
 800dbda:	ee27 6b06 	vmul.f64	d6, d7, d6
 800dbde:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 800dbe2:	ed93 7b02 	vldr	d7, [r3, #8]
 800dbe6:	ed9f 5b86 	vldr	d5, [pc, #536]	; 800de00 <G_q+0xb448>
 800dbea:	ee27 7b05 	vmul.f64	d7, d7, d5
 800dbee:	ee36 6b07 	vadd.f64	d6, d6, d7
 800dbf2:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 800dbf6:	ed93 7b00 	vldr	d7, [r3]
 800dbfa:	ed9f 5b83 	vldr	d5, [pc, #524]	; 800de08 <G_q+0xb450>
 800dbfe:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t183.im * 0.0);
 800dc02:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 800dc06:	ed93 7b02 	vldr	d7, [r3, #8]
 800dc0a:	ed9f 4b7d 	vldr	d4, [pc, #500]	; 800de00 <G_q+0xb448>
 800dc0e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800dc12:	ee35 7b07 	vadd.f64	d7, d5, d7
  t16_im = (t182.re * 3.061616997868383E-17 + t182.im * 0.0) - (t183.re *
 800dc16:	ee36 7b47 	vsub.f64	d7, d6, d7
 800dc1a:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800dc1e:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t180.re * 0.0 - t180.im * 0.5) - (t181.re * 0.0 - t181.im * 0.5);
 800dc22:	f507 6371 	add.w	r3, r7, #3856	; 0xf10
 800dc26:	ed93 7b00 	vldr	d7, [r3]
 800dc2a:	ed9f 6b75 	vldr	d6, [pc, #468]	; 800de00 <G_q+0xb448>
 800dc2e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800dc32:	f507 6371 	add.w	r3, r7, #3856	; 0xf10
 800dc36:	ed93 7b02 	vldr	d7, [r3, #8]
 800dc3a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800dc3e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800dc42:	ee36 6b47 	vsub.f64	d6, d6, d7
 800dc46:	f507 6372 	add.w	r3, r7, #3872	; 0xf20
 800dc4a:	ed93 7b00 	vldr	d7, [r3]
 800dc4e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800de00 <G_q+0xb448>
 800dc52:	ee27 5b05 	vmul.f64	d5, d7, d5
 800dc56:	f507 6372 	add.w	r3, r7, #3872	; 0xf20
 800dc5a:	ed93 7b02 	vldr	d7, [r3, #8]
 800dc5e:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800dc62:	ee27 7b04 	vmul.f64	d7, d7, d4
 800dc66:	ee35 7b47 	vsub.f64	d7, d5, d7
 800dc6a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800dc6e:	f241 3348 	movw	r3, #4936	; 0x1348
 800dc72:	443b      	add	r3, r7
 800dc74:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t180.re * 0.5 + t180.im * 0.0) - (t181.re * 0.5 + t181.im * 0.0);
 800dc78:	f507 6371 	add.w	r3, r7, #3856	; 0xf10
 800dc7c:	ed93 7b00 	vldr	d7, [r3]
 800dc80:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800dc84:	ee27 6b06 	vmul.f64	d6, d7, d6
 800dc88:	f507 6371 	add.w	r3, r7, #3856	; 0xf10
 800dc8c:	ed93 7b02 	vldr	d7, [r3, #8]
 800dc90:	ed9f 5b5b 	vldr	d5, [pc, #364]	; 800de00 <G_q+0xb448>
 800dc94:	ee27 7b05 	vmul.f64	d7, d7, d5
 800dc98:	ee36 6b07 	vadd.f64	d6, d6, d7
 800dc9c:	f507 6372 	add.w	r3, r7, #3872	; 0xf20
 800dca0:	ed93 7b00 	vldr	d7, [r3]
 800dca4:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800dca8:	ee27 5b05 	vmul.f64	d5, d7, d5
 800dcac:	f507 6372 	add.w	r3, r7, #3872	; 0xf20
 800dcb0:	ed93 7b02 	vldr	d7, [r3, #8]
 800dcb4:	ed9f 4b52 	vldr	d4, [pc, #328]	; 800de00 <G_q+0xb448>
 800dcb8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800dcbc:	ee35 7b07 	vadd.f64	d7, d5, d7
 800dcc0:	ee36 7b47 	vsub.f64	d7, d6, d7
 800dcc4:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800dcc8:	ed83 7b00 	vstr	d7, [r3]
  if (t178.im == 0.0) {
 800dccc:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 800dcd0:	ed93 7b02 	vldr	d7, [r3, #8]
 800dcd4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dcd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcdc:	d115      	bne.n	800dd0a <G_q+0xb352>
    t12_re = t178.re / 2.0;
 800dcde:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 800dce2:	ed93 6b00 	vldr	d6, [r3]
 800dce6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800dcea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800dcee:	f241 3388 	movw	r3, #5000	; 0x1388
 800dcf2:	443b      	add	r3, r7
 800dcf4:	ed83 7b00 	vstr	d7, [r3]
    t12_im = 0.0;
 800dcf8:	f04f 0300 	mov.w	r3, #0
 800dcfc:	f04f 0400 	mov.w	r4, #0
 800dd00:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800dd04:	e9c2 3400 	strd	r3, r4, [r2]
 800dd08:	e037      	b.n	800dd7a <G_q+0xb3c2>
  } else if (t178.re == 0.0) {
 800dd0a:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 800dd0e:	ed93 7b00 	vldr	d7, [r3]
 800dd12:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dd16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd1a:	d115      	bne.n	800dd48 <G_q+0xb390>
    t12_re = 0.0;
 800dd1c:	f04f 0300 	mov.w	r3, #0
 800dd20:	f04f 0400 	mov.w	r4, #0
 800dd24:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd28:	443a      	add	r2, r7
 800dd2a:	e9c2 3400 	strd	r3, r4, [r2]
    t12_im = t178.im / 2.0;
 800dd2e:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 800dd32:	ed93 6b02 	vldr	d6, [r3, #8]
 800dd36:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800dd3a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800dd3e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800dd42:	ed83 7b00 	vstr	d7, [r3]
 800dd46:	e018      	b.n	800dd7a <G_q+0xb3c2>
  } else {
    t12_re = t178.re / 2.0;
 800dd48:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 800dd4c:	ed93 6b00 	vldr	d6, [r3]
 800dd50:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800dd54:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800dd58:	f241 3388 	movw	r3, #5000	; 0x1388
 800dd5c:	443b      	add	r3, r7
 800dd5e:	ed83 7b00 	vstr	d7, [r3]
    t12_im = t178.im / 2.0;
 800dd62:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 800dd66:	ed93 6b02 	vldr	d6, [r3, #8]
 800dd6a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800dd6e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800dd72:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800dd76:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t179.im == 0.0) {
 800dd7a:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 800dd7e:	ed93 7b02 	vldr	d7, [r3, #8]
 800dd82:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dd86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd8a:	d116      	bne.n	800ddba <G_q+0xb402>
    t13_re = t179.re / 2.0;
 800dd8c:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 800dd90:	ed93 6b00 	vldr	d6, [r3]
 800dd94:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800dd98:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800dd9c:	f241 3378 	movw	r3, #4984	; 0x1378
 800dda0:	443b      	add	r3, r7
 800dda2:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 800dda6:	f04f 0300 	mov.w	r3, #0
 800ddaa:	f04f 0400 	mov.w	r4, #0
 800ddae:	f241 3270 	movw	r2, #4976	; 0x1370
 800ddb2:	443a      	add	r2, r7
 800ddb4:	e9c2 3400 	strd	r3, r4, [r2]
 800ddb8:	e046      	b.n	800de48 <G_q+0xb490>
  } else if (t179.re == 0.0) {
 800ddba:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 800ddbe:	ed93 7b00 	vldr	d7, [r3]
 800ddc2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ddc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddca:	d123      	bne.n	800de14 <G_q+0xb45c>
    t13_re = 0.0;
 800ddcc:	f04f 0300 	mov.w	r3, #0
 800ddd0:	f04f 0400 	mov.w	r4, #0
 800ddd4:	f241 3278 	movw	r2, #4984	; 0x1378
 800ddd8:	443a      	add	r2, r7
 800ddda:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t179.im / 2.0;
 800ddde:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 800dde2:	ed93 6b02 	vldr	d6, [r3, #8]
 800dde6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ddea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ddee:	f241 3370 	movw	r3, #4976	; 0x1370
 800ddf2:	443b      	add	r3, r7
 800ddf4:	ed83 7b00 	vstr	d7, [r3]
 800ddf8:	e026      	b.n	800de48 <G_q+0xb490>
 800ddfa:	bf00      	nop
 800ddfc:	f3af 8000 	nop.w
	...
 800de08:	33145c07 	.word	0x33145c07
 800de0c:	3c81a626 	.word	0x3c81a626
 800de10:	ffffeeb0 	.word	0xffffeeb0
  } else {
    t13_re = t179.re / 2.0;
 800de14:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 800de18:	ed93 6b00 	vldr	d6, [r3]
 800de1c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800de20:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800de24:	f241 3378 	movw	r3, #4984	; 0x1378
 800de28:	443b      	add	r3, r7
 800de2a:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t179.im / 2.0;
 800de2e:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 800de32:	ed93 6b02 	vldr	d6, [r3, #8]
 800de36:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800de3a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800de3e:	f241 3370 	movw	r3, #4976	; 0x1370
 800de42:	443b      	add	r3, r7
 800de44:	ed83 7b00 	vstr	d7, [r3]
  }

  t23_re = t176.re * 3.061616997868383E-17 + t177.re * 3.061616997868383E-17;
 800de48:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 800de4c:	ed93 7b00 	vldr	d7, [r3]
 800de50:	ed9f 6bd1 	vldr	d6, [pc, #836]	; 800e198 <G_q+0xb7e0>
 800de54:	ee27 6b06 	vmul.f64	d6, d7, d6
 800de58:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 800de5c:	ed93 7b00 	vldr	d7, [r3]
 800de60:	ed9f 5bcd 	vldr	d5, [pc, #820]	; 800e198 <G_q+0xb7e0>
 800de64:	ee27 7b05 	vmul.f64	d7, d7, d5
 800de68:	ee36 7b07 	vadd.f64	d7, d6, d7
 800de6c:	f241 3330 	movw	r3, #4912	; 0x1330
 800de70:	443b      	add	r3, r7
 800de72:	ed83 7b00 	vstr	d7, [r3]
  t3_im = t176.im * 3.061616997868383E-17 + t177.im * 3.061616997868383E-17;
 800de76:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 800de7a:	ed93 7b02 	vldr	d7, [r3, #8]
 800de7e:	ed9f 6bc6 	vldr	d6, [pc, #792]	; 800e198 <G_q+0xb7e0>
 800de82:	ee27 6b06 	vmul.f64	d6, d7, d6
 800de86:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 800de8a:	ed93 7b02 	vldr	d7, [r3, #8]
 800de8e:	ed9f 5bc2 	vldr	d5, [pc, #776]	; 800e198 <G_q+0xb7e0>
 800de92:	ee27 7b05 	vmul.f64	d7, d7, d5
 800de96:	ee36 7b07 	vadd.f64	d7, d6, d7
 800de9a:	f241 3310 	movw	r3, #4880	; 0x1310
 800de9e:	443b      	add	r3, r7
 800dea0:	ed83 7b00 	vstr	d7, [r3]
  t12_re = (t12_re + t13_re) + 7.498798913309288E-33;
 800dea4:	f241 3388 	movw	r3, #5000	; 0x1388
 800dea8:	443b      	add	r3, r7
 800deaa:	ed93 6b00 	vldr	d6, [r3]
 800deae:	f241 3378 	movw	r3, #4984	; 0x1378
 800deb2:	443b      	add	r3, r7
 800deb4:	ed93 7b00 	vldr	d7, [r3]
 800deb8:	ee36 7b07 	vadd.f64	d7, d6, d7
 800debc:	ed9f 6bbc 	vldr	d6, [pc, #752]	; 800e1b0 <G_q+0xb7f8>
 800dec0:	ee37 7b06 	vadd.f64	d7, d7, d6
 800dec4:	f241 3388 	movw	r3, #5000	; 0x1388
 800dec8:	443b      	add	r3, r7
 800deca:	ed83 7b00 	vstr	d7, [r3]
  t12_im += t13_im;
 800dece:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800ded2:	ed93 6b00 	vldr	d6, [r3]
 800ded6:	f241 3370 	movw	r3, #4976	; 0x1370
 800deda:	443b      	add	r3, r7
 800dedc:	ed93 7b00 	vldr	d7, [r3]
 800dee0:	ee36 7b07 	vadd.f64	d7, d6, d7
 800dee4:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800dee8:	ed83 7b00 	vstr	d7, [r3]
  t85_im += t34_re;
 800deec:	f241 3318 	movw	r3, #4888	; 0x1318
 800def0:	443b      	add	r3, r7
 800def2:	ed93 6b00 	vldr	d6, [r3]
 800def6:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800defa:	443b      	add	r3, r7
 800defc:	ed93 7b00 	vldr	d7, [r3]
 800df00:	ee36 7b07 	vadd.f64	d7, d6, d7
 800df04:	f241 3318 	movw	r3, #4888	; 0x1318
 800df08:	443b      	add	r3, r7
 800df0a:	ed83 7b00 	vstr	d7, [r3]
  t41_im += t34_im;
 800df0e:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800df12:	ed93 6b00 	vldr	d6, [r3]
 800df16:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800df1a:	443b      	add	r3, r7
 800df1c:	ed93 7b00 	vldr	d7, [r3]
 800df20:	ee36 7b07 	vadd.f64	d7, d6, d7
 800df24:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800df28:	ed83 7b00 	vstr	d7, [r3]
  b_t10_re = (((t174.re * 6.123233995736766E-17 + t175.re *
 800df2c:	f507 636d 	add.w	r3, r7, #3792	; 0xed0
 800df30:	ed93 7b00 	vldr	d7, [r3]
 800df34:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 800e1a0 <G_q+0xb7e8>
 800df38:	ee27 6b06 	vmul.f64	d6, d7, d6
 800df3c:	f507 636e 	add.w	r3, r7, #3808	; 0xee0
 800df40:	ed93 7b00 	vldr	d7, [r3]
 800df44:	ed9f 5b96 	vldr	d5, [pc, #600]	; 800e1a0 <G_q+0xb7e8>
 800df48:	ee27 7b05 	vmul.f64	d7, d7, d5
 800df4c:	ee36 6b07 	vadd.f64	d6, d6, d7
                6.123233995736766E-17) + (t16_re * t20_re - t16_im * t20_im)) +
 800df50:	f241 3368 	movw	r3, #4968	; 0x1368
 800df54:	443b      	add	r3, r7
 800df56:	ed93 5b00 	vldr	d5, [r3]
 800df5a:	f241 3348 	movw	r3, #4936	; 0x1348
 800df5e:	443b      	add	r3, r7
 800df60:	ed93 7b00 	vldr	d7, [r3]
 800df64:	ee25 5b07 	vmul.f64	d5, d5, d7
 800df68:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800df6c:	ed93 4b00 	vldr	d4, [r3]
 800df70:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800df74:	ed93 7b00 	vldr	d7, [r3]
 800df78:	ee24 7b07 	vmul.f64	d7, d4, d7
 800df7c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800df80:	ee36 6b07 	vadd.f64	d6, d6, d7
              (t23_re * t12_re - t3_im * t12_im)) - 6.123233995736766E-17;
 800df84:	f241 3330 	movw	r3, #4912	; 0x1330
 800df88:	443b      	add	r3, r7
 800df8a:	ed93 5b00 	vldr	d5, [r3]
 800df8e:	f241 3388 	movw	r3, #5000	; 0x1388
 800df92:	443b      	add	r3, r7
 800df94:	ed93 7b00 	vldr	d7, [r3]
 800df98:	ee25 5b07 	vmul.f64	d5, d5, d7
 800df9c:	f241 3310 	movw	r3, #4880	; 0x1310
 800dfa0:	443b      	add	r3, r7
 800dfa2:	ed93 4b00 	vldr	d4, [r3]
 800dfa6:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800dfaa:	ed93 7b00 	vldr	d7, [r3]
 800dfae:	ee24 7b07 	vmul.f64	d7, d4, d7
 800dfb2:	ee35 7b47 	vsub.f64	d7, d5, d7
                6.123233995736766E-17) + (t16_re * t20_re - t16_im * t20_im)) +
 800dfb6:	ee36 7b07 	vadd.f64	d7, d6, d7
  b_t10_re = (((t174.re * 6.123233995736766E-17 + t175.re *
 800dfba:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800e1a0 <G_q+0xb7e8>
 800dfbe:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dfc2:	f241 3338 	movw	r3, #4920	; 0x1338
 800dfc6:	443b      	add	r3, r7
 800dfc8:	ed83 7b00 	vstr	d7, [r3]
  t23_re = ((t174.im * 6.123233995736766E-17 + t175.im * 6.123233995736766E-17)
 800dfcc:	f507 636d 	add.w	r3, r7, #3792	; 0xed0
 800dfd0:	ed93 7b02 	vldr	d7, [r3, #8]
 800dfd4:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800e1a0 <G_q+0xb7e8>
 800dfd8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800dfdc:	f507 636e 	add.w	r3, r7, #3808	; 0xee0
 800dfe0:	ed93 7b02 	vldr	d7, [r3, #8]
 800dfe4:	ed9f 5b6e 	vldr	d5, [pc, #440]	; 800e1a0 <G_q+0xb7e8>
 800dfe8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800dfec:	ee36 6b07 	vadd.f64	d6, d6, d7
            + (t16_re * t20_im + t16_im * t20_re)) + (t23_re * t12_im + t3_im *
 800dff0:	f241 3368 	movw	r3, #4968	; 0x1368
 800dff4:	443b      	add	r3, r7
 800dff6:	ed93 5b00 	vldr	d5, [r3]
 800dffa:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800dffe:	ed93 7b00 	vldr	d7, [r3]
 800e002:	ee25 5b07 	vmul.f64	d5, d5, d7
 800e006:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800e00a:	ed93 4b00 	vldr	d4, [r3]
 800e00e:	f241 3348 	movw	r3, #4936	; 0x1348
 800e012:	443b      	add	r3, r7
 800e014:	ed93 7b00 	vldr	d7, [r3]
 800e018:	ee24 7b07 	vmul.f64	d7, d4, d7
 800e01c:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e020:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e024:	f241 3330 	movw	r3, #4912	; 0x1330
 800e028:	443b      	add	r3, r7
 800e02a:	ed93 5b00 	vldr	d5, [r3]
 800e02e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800e032:	ed93 7b00 	vldr	d7, [r3]
 800e036:	ee25 5b07 	vmul.f64	d5, d5, d7
 800e03a:	f241 3310 	movw	r3, #4880	; 0x1310
 800e03e:	443b      	add	r3, r7
 800e040:	ed93 4b00 	vldr	d4, [r3]
 800e044:	f241 3388 	movw	r3, #5000	; 0x1388
 800e048:	443b      	add	r3, r7
 800e04a:	ed93 7b00 	vldr	d7, [r3]
 800e04e:	ee24 7b07 	vmul.f64	d7, d4, d7
 800e052:	ee35 7b07 	vadd.f64	d7, d5, d7
  t23_re = ((t174.im * 6.123233995736766E-17 + t175.im * 6.123233995736766E-17)
 800e056:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e05a:	f241 3330 	movw	r3, #4912	; 0x1330
 800e05e:	443b      	add	r3, r7
 800e060:	ed83 7b00 	vstr	d7, [r3]
    t12_re);
  if (t186.im == 0.0) {
 800e064:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800e068:	ed93 7b02 	vldr	d7, [r3, #8]
 800e06c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e074:	d116      	bne.n	800e0a4 <G_q+0xb6ec>
    t12_re = t186.re / 2.0;
 800e076:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800e07a:	ed93 6b00 	vldr	d6, [r3]
 800e07e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e082:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e086:	f241 3388 	movw	r3, #5000	; 0x1388
 800e08a:	443b      	add	r3, r7
 800e08c:	ed83 7b00 	vstr	d7, [r3]
    t3_im = 0.0;
 800e090:	f04f 0300 	mov.w	r3, #0
 800e094:	f04f 0400 	mov.w	r4, #0
 800e098:	f241 3210 	movw	r2, #4880	; 0x1310
 800e09c:	443a      	add	r2, r7
 800e09e:	e9c2 3400 	strd	r3, r4, [r2]
 800e0a2:	e039      	b.n	800e118 <G_q+0xb760>
  } else if (t186.re == 0.0) {
 800e0a4:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800e0a8:	ed93 7b00 	vldr	d7, [r3]
 800e0ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e0b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0b4:	d116      	bne.n	800e0e4 <G_q+0xb72c>
    t12_re = 0.0;
 800e0b6:	f04f 0300 	mov.w	r3, #0
 800e0ba:	f04f 0400 	mov.w	r4, #0
 800e0be:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0c2:	443a      	add	r2, r7
 800e0c4:	e9c2 3400 	strd	r3, r4, [r2]
    t3_im = t186.im / 2.0;
 800e0c8:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800e0cc:	ed93 6b02 	vldr	d6, [r3, #8]
 800e0d0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e0d4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e0d8:	f241 3310 	movw	r3, #4880	; 0x1310
 800e0dc:	443b      	add	r3, r7
 800e0de:	ed83 7b00 	vstr	d7, [r3]
 800e0e2:	e019      	b.n	800e118 <G_q+0xb760>
  } else {
    t12_re = t186.re / 2.0;
 800e0e4:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800e0e8:	ed93 6b00 	vldr	d6, [r3]
 800e0ec:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e0f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e0f4:	f241 3388 	movw	r3, #5000	; 0x1388
 800e0f8:	443b      	add	r3, r7
 800e0fa:	ed83 7b00 	vstr	d7, [r3]
    t3_im = t186.im / 2.0;
 800e0fe:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800e102:	ed93 6b02 	vldr	d6, [r3, #8]
 800e106:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e10a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e10e:	f241 3310 	movw	r3, #4880	; 0x1310
 800e112:	443b      	add	r3, r7
 800e114:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t187.im == 0.0) {
 800e118:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800e11c:	ed93 7b02 	vldr	d7, [r3, #8]
 800e120:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e128:	d116      	bne.n	800e158 <G_q+0xb7a0>
    t34_re = t187.re / 2.0;
 800e12a:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800e12e:	ed93 6b00 	vldr	d6, [r3]
 800e132:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e136:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e13a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e13e:	443b      	add	r3, r7
 800e140:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800e144:	f04f 0300 	mov.w	r3, #0
 800e148:	f04f 0400 	mov.w	r4, #0
 800e14c:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800e150:	443a      	add	r2, r7
 800e152:	e9c2 3400 	strd	r3, r4, [r2]
 800e156:	e049      	b.n	800e1ec <G_q+0xb834>
  } else if (t187.re == 0.0) {
 800e158:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800e15c:	ed93 7b00 	vldr	d7, [r3]
 800e160:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e168:	d126      	bne.n	800e1b8 <G_q+0xb800>
    t34_re = 0.0;
 800e16a:	f04f 0300 	mov.w	r3, #0
 800e16e:	f04f 0400 	mov.w	r4, #0
 800e172:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800e176:	443a      	add	r2, r7
 800e178:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t187.im / 2.0;
 800e17c:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800e180:	ed93 6b02 	vldr	d6, [r3, #8]
 800e184:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e188:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e18c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e190:	443b      	add	r3, r7
 800e192:	ed83 7b00 	vstr	d7, [r3]
 800e196:	e029      	b.n	800e1ec <G_q+0xb834>
 800e198:	33145c07 	.word	0x33145c07
 800e19c:	3c81a626 	.word	0x3c81a626
 800e1a0:	33145c07 	.word	0x33145c07
 800e1a4:	3c91a626 	.word	0x3c91a626
	...
 800e1b0:	858a5d48 	.word	0x858a5d48
 800e1b4:	394377ce 	.word	0x394377ce
  } else {
    t34_re = t187.re / 2.0;
 800e1b8:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800e1bc:	ed93 6b00 	vldr	d6, [r3]
 800e1c0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e1c4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e1c8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e1cc:	443b      	add	r3, r7
 800e1ce:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t187.im / 2.0;
 800e1d2:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800e1d6:	ed93 6b02 	vldr	d6, [r3, #8]
 800e1da:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e1de:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e1e2:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e1e6:	443b      	add	r3, r7
 800e1e8:	ed83 7b00 	vstr	d7, [r3]
  }

  t12_re += t34_re;
 800e1ec:	f241 3388 	movw	r3, #5000	; 0x1388
 800e1f0:	443b      	add	r3, r7
 800e1f2:	ed93 6b00 	vldr	d6, [r3]
 800e1f6:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e1fa:	443b      	add	r3, r7
 800e1fc:	ed93 7b00 	vldr	d7, [r3]
 800e200:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e204:	f241 3388 	movw	r3, #5000	; 0x1388
 800e208:	443b      	add	r3, r7
 800e20a:	ed83 7b00 	vstr	d7, [r3]
  t3_im += t34_im;
 800e20e:	f241 3310 	movw	r3, #4880	; 0x1310
 800e212:	443b      	add	r3, r7
 800e214:	ed93 6b00 	vldr	d6, [r3]
 800e218:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e21c:	443b      	add	r3, r7
 800e21e:	ed93 7b00 	vldr	d7, [r3]
 800e222:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e226:	f241 3310 	movw	r3, #4880	; 0x1310
 800e22a:	443b      	add	r3, r7
 800e22c:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t188.re * 0.0 - t188.im * 0.5) - (t189.re * 0.0 - t189.im * 0.5);
 800e230:	f507 6373 	add.w	r3, r7, #3888	; 0xf30
 800e234:	ed93 7b00 	vldr	d7, [r3]
 800e238:	ed1f 6b25 	vldr	d6, [pc, #-148]	; 800e1a8 <G_q+0xb7f0>
 800e23c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e240:	f507 6373 	add.w	r3, r7, #3888	; 0xf30
 800e244:	ed93 7b02 	vldr	d7, [r3, #8]
 800e248:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e24c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e250:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e254:	f507 6374 	add.w	r3, r7, #3904	; 0xf40
 800e258:	ed93 7b00 	vldr	d7, [r3]
 800e25c:	ed1f 5b2e 	vldr	d5, [pc, #-184]	; 800e1a8 <G_q+0xb7f0>
 800e260:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e264:	f507 6374 	add.w	r3, r7, #3904	; 0xf40
 800e268:	ed93 7b02 	vldr	d7, [r3, #8]
 800e26c:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800e270:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e274:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e278:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e27c:	f241 3378 	movw	r3, #4984	; 0x1378
 800e280:	443b      	add	r3, r7
 800e282:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t188.re * 0.5 + t188.im * 0.0) - (t189.re * 0.5 + t189.im * 0.0);
 800e286:	f507 6373 	add.w	r3, r7, #3888	; 0xf30
 800e28a:	ed93 7b00 	vldr	d7, [r3]
 800e28e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800e292:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e296:	f507 6373 	add.w	r3, r7, #3888	; 0xf30
 800e29a:	ed93 7b02 	vldr	d7, [r3, #8]
 800e29e:	ed1f 5b3e 	vldr	d5, [pc, #-248]	; 800e1a8 <G_q+0xb7f0>
 800e2a2:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e2a6:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e2aa:	f507 6374 	add.w	r3, r7, #3904	; 0xf40
 800e2ae:	ed93 7b00 	vldr	d7, [r3]
 800e2b2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e2b6:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e2ba:	f507 6374 	add.w	r3, r7, #3904	; 0xf40
 800e2be:	ed93 7b02 	vldr	d7, [r3, #8]
 800e2c2:	ed1f 4b47 	vldr	d4, [pc, #-284]	; 800e1a8 <G_q+0xb7f0>
 800e2c6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e2ca:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e2ce:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e2d2:	f241 3370 	movw	r3, #4976	; 0x1370
 800e2d6:	443b      	add	r3, r7
 800e2d8:	ed83 7b00 	vstr	d7, [r3]
  if (t192.im == 0.0) {
 800e2dc:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800e2e0:	ed93 7b02 	vldr	d7, [r3, #8]
 800e2e4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e2e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2ec:	d115      	bne.n	800e31a <G_q+0xb962>
    t16_re = t192.re / 2.0;
 800e2ee:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800e2f2:	ed93 6b00 	vldr	d6, [r3]
 800e2f6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e2fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e2fe:	f241 3368 	movw	r3, #4968	; 0x1368
 800e302:	443b      	add	r3, r7
 800e304:	ed83 7b00 	vstr	d7, [r3]
    t16_im = 0.0;
 800e308:	f04f 0300 	mov.w	r3, #0
 800e30c:	f04f 0400 	mov.w	r4, #0
 800e310:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800e314:	e9c2 3400 	strd	r3, r4, [r2]
 800e318:	e037      	b.n	800e38a <G_q+0xb9d2>
  } else if (t192.re == 0.0) {
 800e31a:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800e31e:	ed93 7b00 	vldr	d7, [r3]
 800e322:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e32a:	d115      	bne.n	800e358 <G_q+0xb9a0>
    t16_re = 0.0;
 800e32c:	f04f 0300 	mov.w	r3, #0
 800e330:	f04f 0400 	mov.w	r4, #0
 800e334:	f241 3268 	movw	r2, #4968	; 0x1368
 800e338:	443a      	add	r2, r7
 800e33a:	e9c2 3400 	strd	r3, r4, [r2]
    t16_im = t192.im / 2.0;
 800e33e:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800e342:	ed93 6b02 	vldr	d6, [r3, #8]
 800e346:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e34a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e34e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800e352:	ed83 7b00 	vstr	d7, [r3]
 800e356:	e018      	b.n	800e38a <G_q+0xb9d2>
  } else {
    t16_re = t192.re / 2.0;
 800e358:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800e35c:	ed93 6b00 	vldr	d6, [r3]
 800e360:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e364:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e368:	f241 3368 	movw	r3, #4968	; 0x1368
 800e36c:	443b      	add	r3, r7
 800e36e:	ed83 7b00 	vstr	d7, [r3]
    t16_im = t192.im / 2.0;
 800e372:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800e376:	ed93 6b02 	vldr	d6, [r3, #8]
 800e37a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e37e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e382:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800e386:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t193.im == 0.0) {
 800e38a:	f507 6376 	add.w	r3, r7, #3936	; 0xf60
 800e38e:	ed93 7b02 	vldr	d7, [r3, #8]
 800e392:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e39a:	d116      	bne.n	800e3ca <G_q+0xba12>
    t34_re = t193.re / 2.0;
 800e39c:	f507 6376 	add.w	r3, r7, #3936	; 0xf60
 800e3a0:	ed93 6b00 	vldr	d6, [r3]
 800e3a4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e3a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e3ac:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e3b0:	443b      	add	r3, r7
 800e3b2:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800e3b6:	f04f 0300 	mov.w	r3, #0
 800e3ba:	f04f 0400 	mov.w	r4, #0
 800e3be:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800e3c2:	443a      	add	r2, r7
 800e3c4:	e9c2 3400 	strd	r3, r4, [r2]
 800e3c8:	e039      	b.n	800e43e <G_q+0xba86>
  } else if (t193.re == 0.0) {
 800e3ca:	f507 6376 	add.w	r3, r7, #3936	; 0xf60
 800e3ce:	ed93 7b00 	vldr	d7, [r3]
 800e3d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e3d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3da:	d116      	bne.n	800e40a <G_q+0xba52>
    t34_re = 0.0;
 800e3dc:	f04f 0300 	mov.w	r3, #0
 800e3e0:	f04f 0400 	mov.w	r4, #0
 800e3e4:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800e3e8:	443a      	add	r2, r7
 800e3ea:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t193.im / 2.0;
 800e3ee:	f507 6376 	add.w	r3, r7, #3936	; 0xf60
 800e3f2:	ed93 6b02 	vldr	d6, [r3, #8]
 800e3f6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e3fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e3fe:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e402:	443b      	add	r3, r7
 800e404:	ed83 7b00 	vstr	d7, [r3]
 800e408:	e019      	b.n	800e43e <G_q+0xba86>
  } else {
    t34_re = t193.re / 2.0;
 800e40a:	f507 6376 	add.w	r3, r7, #3936	; 0xf60
 800e40e:	ed93 6b00 	vldr	d6, [r3]
 800e412:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e416:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e41a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e41e:	443b      	add	r3, r7
 800e420:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t193.im / 2.0;
 800e424:	f507 6376 	add.w	r3, r7, #3936	; 0xf60
 800e428:	ed93 6b02 	vldr	d6, [r3, #8]
 800e42c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e430:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e434:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e438:	443b      	add	r3, r7
 800e43a:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_re = (t190.re * 0.0 - t190.im * 0.5) - (t191.re * 0.0 - t191.im * 0.5);
 800e43e:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800e442:	ed93 7b00 	vldr	d7, [r3]
 800e446:	ed1f 6ba8 	vldr	d6, [pc, #-672]	; 800e1a8 <G_q+0xb7f0>
 800e44a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e44e:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800e452:	ed93 7b02 	vldr	d7, [r3, #8]
 800e456:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e45a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e45e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e462:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800e466:	ed93 7b00 	vldr	d7, [r3]
 800e46a:	ed1f 5bb1 	vldr	d5, [pc, #-708]	; 800e1a8 <G_q+0xb7f0>
 800e46e:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e472:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800e476:	ed93 7b02 	vldr	d7, [r3, #8]
 800e47a:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800e47e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e482:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e486:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e48a:	f241 3348 	movw	r3, #4936	; 0x1348
 800e48e:	443b      	add	r3, r7
 800e490:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t190.re * 0.5 + t190.im * 0.0) - (t191.re * 0.5 + t191.im * 0.0);
 800e494:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800e498:	ed93 7b00 	vldr	d7, [r3]
 800e49c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800e4a0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e4a4:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800e4a8:	ed93 7b02 	vldr	d7, [r3, #8]
 800e4ac:	ed1f 5bc2 	vldr	d5, [pc, #-776]	; 800e1a8 <G_q+0xb7f0>
 800e4b0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e4b4:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e4b8:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800e4bc:	ed93 7b00 	vldr	d7, [r3]
 800e4c0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e4c4:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e4c8:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800e4cc:	ed93 7b02 	vldr	d7, [r3, #8]
 800e4d0:	ed1f 4bcb 	vldr	d4, [pc, #-812]	; 800e1a8 <G_q+0xb7f0>
 800e4d4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e4d8:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e4dc:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e4e0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800e4e4:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t16_re + t34_re) + 7.498798913309288E-33;
 800e4e8:	f241 3368 	movw	r3, #4968	; 0x1368
 800e4ec:	443b      	add	r3, r7
 800e4ee:	ed93 6b00 	vldr	d6, [r3]
 800e4f2:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e4f6:	443b      	add	r3, r7
 800e4f8:	ed93 7b00 	vldr	d7, [r3]
 800e4fc:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e500:	ed1f 6bd5 	vldr	d6, [pc, #-852]	; 800e1b0 <G_q+0xb7f8>
 800e504:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e508:	f241 3368 	movw	r3, #4968	; 0x1368
 800e50c:	443b      	add	r3, r7
 800e50e:	ed83 7b00 	vstr	d7, [r3]
  t16_im += t34_im;
 800e512:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800e516:	ed93 6b00 	vldr	d6, [r3]
 800e51a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e51e:	443b      	add	r3, r7
 800e520:	ed93 7b00 	vldr	d7, [r3]
 800e524:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e528:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800e52c:	ed83 7b00 	vstr	d7, [r3]
  t12_im = (t12_re * t13_re - t3_im * t13_im) - (t20_re * t16_re - t20_im *
 800e530:	f241 3388 	movw	r3, #5000	; 0x1388
 800e534:	443b      	add	r3, r7
 800e536:	ed93 6b00 	vldr	d6, [r3]
 800e53a:	f241 3378 	movw	r3, #4984	; 0x1378
 800e53e:	443b      	add	r3, r7
 800e540:	ed93 7b00 	vldr	d7, [r3]
 800e544:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e548:	f241 3310 	movw	r3, #4880	; 0x1310
 800e54c:	443b      	add	r3, r7
 800e54e:	ed93 5b00 	vldr	d5, [r3]
 800e552:	f241 3370 	movw	r3, #4976	; 0x1370
 800e556:	443b      	add	r3, r7
 800e558:	ed93 7b00 	vldr	d7, [r3]
 800e55c:	ee25 7b07 	vmul.f64	d7, d5, d7
 800e560:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e564:	f241 3348 	movw	r3, #4936	; 0x1348
 800e568:	443b      	add	r3, r7
 800e56a:	ed93 5b00 	vldr	d5, [r3]
 800e56e:	f241 3368 	movw	r3, #4968	; 0x1368
 800e572:	443b      	add	r3, r7
 800e574:	ed93 7b00 	vldr	d7, [r3]
 800e578:	ee25 5b07 	vmul.f64	d5, d5, d7
 800e57c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800e580:	ed93 4b00 	vldr	d4, [r3]
 800e584:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800e588:	ed93 7b00 	vldr	d7, [r3]
 800e58c:	ee24 7b07 	vmul.f64	d7, d4, d7
 800e590:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e594:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e598:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800e59c:	ed83 7b00 	vstr	d7, [r3]
    t16_im);
  t3_im = (t12_re * t13_im + t3_im * t13_re) - (t20_re * t16_im + t20_im *
 800e5a0:	f241 3388 	movw	r3, #5000	; 0x1388
 800e5a4:	443b      	add	r3, r7
 800e5a6:	ed93 6b00 	vldr	d6, [r3]
 800e5aa:	f241 3370 	movw	r3, #4976	; 0x1370
 800e5ae:	443b      	add	r3, r7
 800e5b0:	ed93 7b00 	vldr	d7, [r3]
 800e5b4:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e5b8:	f241 3310 	movw	r3, #4880	; 0x1310
 800e5bc:	443b      	add	r3, r7
 800e5be:	ed93 5b00 	vldr	d5, [r3]
 800e5c2:	f241 3378 	movw	r3, #4984	; 0x1378
 800e5c6:	443b      	add	r3, r7
 800e5c8:	ed93 7b00 	vldr	d7, [r3]
 800e5cc:	ee25 7b07 	vmul.f64	d7, d5, d7
 800e5d0:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e5d4:	f241 3348 	movw	r3, #4936	; 0x1348
 800e5d8:	443b      	add	r3, r7
 800e5da:	ed93 5b00 	vldr	d5, [r3]
 800e5de:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800e5e2:	ed93 7b00 	vldr	d7, [r3]
 800e5e6:	ee25 5b07 	vmul.f64	d5, d5, d7
 800e5ea:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800e5ee:	ed93 4b00 	vldr	d4, [r3]
 800e5f2:	f241 3368 	movw	r3, #4968	; 0x1368
 800e5f6:	443b      	add	r3, r7
 800e5f8:	ed93 7b00 	vldr	d7, [r3]
 800e5fc:	ee24 7b07 	vmul.f64	d7, d4, d7
 800e600:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e604:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e608:	f241 3310 	movw	r3, #4880	; 0x1310
 800e60c:	443b      	add	r3, r7
 800e60e:	ed83 7b00 	vstr	d7, [r3]
    t16_re);
  t34_re = (t184.re * 0.0 - t184.im * 0.5) - (t185.re * 0.0 - t185.im * 0.5);
 800e612:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800e616:	ed93 7b00 	vldr	d7, [r3]
 800e61a:	ed9f 6bed 	vldr	d6, [pc, #948]	; 800e9d0 <G_q+0xc018>
 800e61e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e622:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800e626:	ed93 7b02 	vldr	d7, [r3, #8]
 800e62a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e62e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e632:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e636:	4bea      	ldr	r3, [pc, #936]	; (800e9e0 <G_q+0xc028>)
 800e638:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e63c:	443a      	add	r2, r7
 800e63e:	4413      	add	r3, r2
 800e640:	ed93 7b00 	vldr	d7, [r3]
 800e644:	ed9f 5be2 	vldr	d5, [pc, #904]	; 800e9d0 <G_q+0xc018>
 800e648:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e64c:	4be4      	ldr	r3, [pc, #912]	; (800e9e0 <G_q+0xc028>)
 800e64e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e652:	443a      	add	r2, r7
 800e654:	4413      	add	r3, r2
 800e656:	ed93 7b02 	vldr	d7, [r3, #8]
 800e65a:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800e65e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e662:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e666:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e66a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e66e:	443b      	add	r3, r7
 800e670:	ed83 7b00 	vstr	d7, [r3]
  t34_im = (t184.re * 0.5 + t184.im * 0.0) - (t185.re * 0.5 + t185.im * 0.0);
 800e674:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800e678:	ed93 7b00 	vldr	d7, [r3]
 800e67c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800e680:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e684:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800e688:	ed93 7b02 	vldr	d7, [r3, #8]
 800e68c:	ed9f 5bd0 	vldr	d5, [pc, #832]	; 800e9d0 <G_q+0xc018>
 800e690:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e694:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e698:	4bd1      	ldr	r3, [pc, #836]	; (800e9e0 <G_q+0xc028>)
 800e69a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e69e:	443a      	add	r2, r7
 800e6a0:	4413      	add	r3, r2
 800e6a2:	ed93 7b00 	vldr	d7, [r3]
 800e6a6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e6aa:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e6ae:	4bcc      	ldr	r3, [pc, #816]	; (800e9e0 <G_q+0xc028>)
 800e6b0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e6b4:	443a      	add	r2, r7
 800e6b6:	4413      	add	r3, r2
 800e6b8:	ed93 7b02 	vldr	d7, [r3, #8]
 800e6bc:	ed9f 4bc4 	vldr	d4, [pc, #784]	; 800e9d0 <G_q+0xc018>
 800e6c0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e6c4:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e6c8:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e6cc:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e6d0:	443b      	add	r3, r7
 800e6d2:	ed83 7b00 	vstr	d7, [r3]
  b_t54_im = (t194.re * 0.0 - t194.im * 0.5) - (t195.re * 0.0 - t195.im * 0.5);
 800e6d6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800e6da:	ed93 7b00 	vldr	d7, [r3]
 800e6de:	ed9f 6bbc 	vldr	d6, [pc, #752]	; 800e9d0 <G_q+0xc018>
 800e6e2:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e6e6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800e6ea:	ed93 7b02 	vldr	d7, [r3, #8]
 800e6ee:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e6f2:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e6f6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e6fa:	4bba      	ldr	r3, [pc, #744]	; (800e9e4 <G_q+0xc02c>)
 800e6fc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e700:	443a      	add	r2, r7
 800e702:	4413      	add	r3, r2
 800e704:	ed93 7b00 	vldr	d7, [r3]
 800e708:	ed9f 5bb1 	vldr	d5, [pc, #708]	; 800e9d0 <G_q+0xc018>
 800e70c:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e710:	4bb4      	ldr	r3, [pc, #720]	; (800e9e4 <G_q+0xc02c>)
 800e712:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e716:	443a      	add	r2, r7
 800e718:	4413      	add	r3, r2
 800e71a:	ed93 7b02 	vldr	d7, [r3, #8]
 800e71e:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800e722:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e726:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e72a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e72e:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800e732:	443b      	add	r3, r7
 800e734:	ed83 7b00 	vstr	d7, [r3]
  t43_re = (t194.re * 0.5 + t194.im * 0.0) - (t195.re * 0.5 + t195.im * 0.0);
 800e738:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800e73c:	ed93 7b00 	vldr	d7, [r3]
 800e740:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800e744:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e748:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800e74c:	ed93 7b02 	vldr	d7, [r3, #8]
 800e750:	ed9f 5b9f 	vldr	d5, [pc, #636]	; 800e9d0 <G_q+0xc018>
 800e754:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e758:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e75c:	4ba1      	ldr	r3, [pc, #644]	; (800e9e4 <G_q+0xc02c>)
 800e75e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e762:	443a      	add	r2, r7
 800e764:	4413      	add	r3, r2
 800e766:	ed93 7b00 	vldr	d7, [r3]
 800e76a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e76e:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e772:	4b9c      	ldr	r3, [pc, #624]	; (800e9e4 <G_q+0xc02c>)
 800e774:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e778:	443a      	add	r2, r7
 800e77a:	4413      	add	r3, r2
 800e77c:	ed93 7b02 	vldr	d7, [r3, #8]
 800e780:	ed9f 4b93 	vldr	d4, [pc, #588]	; 800e9d0 <G_q+0xc018>
 800e784:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e788:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e78c:	f241 2358 	movw	r3, #4696	; 0x1258
 800e790:	443b      	add	r3, r7
 800e792:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e796:	ed83 7b00 	vstr	d7, [r3]
  t41_re = (t85_im * b_t10_re - t41_im * t23_re) + (t12_im * t34_re - t3_im *
 800e79a:	f241 3318 	movw	r3, #4888	; 0x1318
 800e79e:	443b      	add	r3, r7
 800e7a0:	ed93 6b00 	vldr	d6, [r3]
 800e7a4:	f241 3338 	movw	r3, #4920	; 0x1338
 800e7a8:	443b      	add	r3, r7
 800e7aa:	ed93 7b00 	vldr	d7, [r3]
 800e7ae:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e7b2:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800e7b6:	ed93 5b00 	vldr	d5, [r3]
 800e7ba:	f241 3330 	movw	r3, #4912	; 0x1330
 800e7be:	443b      	add	r3, r7
 800e7c0:	ed93 7b00 	vldr	d7, [r3]
 800e7c4:	ee25 7b07 	vmul.f64	d7, d5, d7
 800e7c8:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e7cc:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800e7d0:	ed93 5b00 	vldr	d5, [r3]
 800e7d4:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e7d8:	443b      	add	r3, r7
 800e7da:	ed93 7b00 	vldr	d7, [r3]
 800e7de:	ee25 5b07 	vmul.f64	d5, d5, d7
 800e7e2:	f241 3310 	movw	r3, #4880	; 0x1310
 800e7e6:	443b      	add	r3, r7
 800e7e8:	ed93 4b00 	vldr	d4, [r3]
 800e7ec:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e7f0:	443b      	add	r3, r7
 800e7f2:	ed93 7b00 	vldr	d7, [r3]
 800e7f6:	ee24 7b07 	vmul.f64	d7, d4, d7
 800e7fa:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e7fe:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e802:	f241 3308 	movw	r3, #4872	; 0x1308
 800e806:	443b      	add	r3, r7
 800e808:	ed83 7b00 	vstr	d7, [r3]
    t34_im);
  t41_im = (t85_im * t23_re + t41_im * b_t10_re) + (t12_im * t34_im + t3_im *
 800e80c:	f241 3318 	movw	r3, #4888	; 0x1318
 800e810:	443b      	add	r3, r7
 800e812:	ed93 6b00 	vldr	d6, [r3]
 800e816:	f241 3330 	movw	r3, #4912	; 0x1330
 800e81a:	443b      	add	r3, r7
 800e81c:	ed93 7b00 	vldr	d7, [r3]
 800e820:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e824:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800e828:	ed93 5b00 	vldr	d5, [r3]
 800e82c:	f241 3338 	movw	r3, #4920	; 0x1338
 800e830:	443b      	add	r3, r7
 800e832:	ed93 7b00 	vldr	d7, [r3]
 800e836:	ee25 7b07 	vmul.f64	d7, d5, d7
 800e83a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e83e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800e842:	ed93 5b00 	vldr	d5, [r3]
 800e846:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e84a:	443b      	add	r3, r7
 800e84c:	ed93 7b00 	vldr	d7, [r3]
 800e850:	ee25 5b07 	vmul.f64	d5, d5, d7
 800e854:	f241 3310 	movw	r3, #4880	; 0x1310
 800e858:	443b      	add	r3, r7
 800e85a:	ed93 4b00 	vldr	d4, [r3]
 800e85e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e862:	443b      	add	r3, r7
 800e864:	ed93 7b00 	vldr	d7, [r3]
 800e868:	ee24 7b07 	vmul.f64	d7, d4, d7
 800e86c:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e870:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e874:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800e878:	ed83 7b00 	vstr	d7, [r3]
    t34_re);
  t16_re = (t206.re * 0.0 - t206.im * 3.061616997868383E-17) - (t207.re * 0.0 -
 800e87c:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 800e880:	ed93 7b00 	vldr	d7, [r3]
 800e884:	ed9f 6b52 	vldr	d6, [pc, #328]	; 800e9d0 <G_q+0xc018>
 800e888:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e88c:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 800e890:	ed93 7b02 	vldr	d7, [r3, #8]
 800e894:	ed9f 5b50 	vldr	d5, [pc, #320]	; 800e9d8 <G_q+0xc020>
 800e898:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e89c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e8a0:	f507 6304 	add.w	r3, r7, #2112	; 0x840
 800e8a4:	ed93 7b00 	vldr	d7, [r3]
 800e8a8:	ed9f 5b49 	vldr	d5, [pc, #292]	; 800e9d0 <G_q+0xc018>
 800e8ac:	ee27 5b05 	vmul.f64	d5, d7, d5
    t207.im * 3.061616997868383E-17);
 800e8b0:	f507 6304 	add.w	r3, r7, #2112	; 0x840
 800e8b4:	ed93 7b02 	vldr	d7, [r3, #8]
 800e8b8:	ed9f 4b47 	vldr	d4, [pc, #284]	; 800e9d8 <G_q+0xc020>
 800e8bc:	ee27 7b04 	vmul.f64	d7, d7, d4
  t16_re = (t206.re * 0.0 - t206.im * 3.061616997868383E-17) - (t207.re * 0.0 -
 800e8c0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e8c4:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e8c8:	f241 3368 	movw	r3, #4968	; 0x1368
 800e8cc:	443b      	add	r3, r7
 800e8ce:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t206.re * 3.061616997868383E-17 + t206.im * 0.0) - (t207.re *
 800e8d2:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 800e8d6:	ed93 7b00 	vldr	d7, [r3]
 800e8da:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 800e9d8 <G_q+0xc020>
 800e8de:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e8e2:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 800e8e6:	ed93 7b02 	vldr	d7, [r3, #8]
 800e8ea:	ed9f 5b39 	vldr	d5, [pc, #228]	; 800e9d0 <G_q+0xc018>
 800e8ee:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e8f2:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e8f6:	f507 6304 	add.w	r3, r7, #2112	; 0x840
 800e8fa:	ed93 7b00 	vldr	d7, [r3]
 800e8fe:	ed9f 5b36 	vldr	d5, [pc, #216]	; 800e9d8 <G_q+0xc020>
 800e902:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t207.im * 0.0);
 800e906:	f507 6304 	add.w	r3, r7, #2112	; 0x840
 800e90a:	ed93 7b02 	vldr	d7, [r3, #8]
 800e90e:	ed9f 4b30 	vldr	d4, [pc, #192]	; 800e9d0 <G_q+0xc018>
 800e912:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e916:	ee35 7b07 	vadd.f64	d7, d5, d7
  t16_im = (t206.re * 3.061616997868383E-17 + t206.im * 0.0) - (t207.re *
 800e91a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e91e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800e922:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t204.re * 0.0 - t204.im * 0.5) - (t205.re * 0.0 - t205.im * 0.5);
 800e926:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 800e92a:	ed93 7b00 	vldr	d7, [r3]
 800e92e:	ed9f 6b28 	vldr	d6, [pc, #160]	; 800e9d0 <G_q+0xc018>
 800e932:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e936:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 800e93a:	ed93 7b02 	vldr	d7, [r3, #8]
 800e93e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e942:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e946:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e94a:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 800e94e:	ed93 7b00 	vldr	d7, [r3]
 800e952:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 800e9d0 <G_q+0xc018>
 800e956:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e95a:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 800e95e:	ed93 7b02 	vldr	d7, [r3, #8]
 800e962:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800e966:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e96a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e96e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e972:	f241 3348 	movw	r3, #4936	; 0x1348
 800e976:	443b      	add	r3, r7
 800e978:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t204.re * 0.5 + t204.im * 0.0) - (t205.re * 0.5 + t205.im * 0.0);
 800e97c:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 800e980:	ed93 7b00 	vldr	d7, [r3]
 800e984:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800e988:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e98c:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 800e990:	ed93 7b02 	vldr	d7, [r3, #8]
 800e994:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 800e9d0 <G_q+0xc018>
 800e998:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e99c:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e9a0:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 800e9a4:	ed93 7b00 	vldr	d7, [r3]
 800e9a8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e9ac:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e9b0:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 800e9b4:	ed93 7b02 	vldr	d7, [r3, #8]
 800e9b8:	ed9f 4b05 	vldr	d4, [pc, #20]	; 800e9d0 <G_q+0xc018>
 800e9bc:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e9c0:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e9c4:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e9c8:	e00e      	b.n	800e9e8 <G_q+0xc030>
 800e9ca:	bf00      	nop
 800e9cc:	f3af 8000 	nop.w
	...
 800e9d8:	33145c07 	.word	0x33145c07
 800e9dc:	3c81a626 	.word	0x3c81a626
 800e9e0:	ffffeed0 	.word	0xffffeed0
 800e9e4:	ffffecd0 	.word	0xffffecd0
 800e9e8:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800e9ec:	ed83 7b00 	vstr	d7, [r3]
  if (t202.im == 0.0) {
 800e9f0:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 800e9f4:	ed93 7b02 	vldr	d7, [r3, #8]
 800e9f8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e9fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea00:	d115      	bne.n	800ea2e <G_q+0xc076>
    t12_re = t202.re / 2.0;
 800ea02:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 800ea06:	ed93 6b00 	vldr	d6, [r3]
 800ea0a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ea0e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ea12:	f241 3388 	movw	r3, #5000	; 0x1388
 800ea16:	443b      	add	r3, r7
 800ea18:	ed83 7b00 	vstr	d7, [r3]
    t12_im = 0.0;
 800ea1c:	f04f 0300 	mov.w	r3, #0
 800ea20:	f04f 0400 	mov.w	r4, #0
 800ea24:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800ea28:	e9c2 3400 	strd	r3, r4, [r2]
 800ea2c:	e037      	b.n	800ea9e <G_q+0xc0e6>
  } else if (t202.re == 0.0) {
 800ea2e:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 800ea32:	ed93 7b00 	vldr	d7, [r3]
 800ea36:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ea3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea3e:	d115      	bne.n	800ea6c <G_q+0xc0b4>
    t12_re = 0.0;
 800ea40:	f04f 0300 	mov.w	r3, #0
 800ea44:	f04f 0400 	mov.w	r4, #0
 800ea48:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea4c:	443a      	add	r2, r7
 800ea4e:	e9c2 3400 	strd	r3, r4, [r2]
    t12_im = t202.im / 2.0;
 800ea52:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 800ea56:	ed93 6b02 	vldr	d6, [r3, #8]
 800ea5a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ea5e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ea62:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800ea66:	ed83 7b00 	vstr	d7, [r3]
 800ea6a:	e018      	b.n	800ea9e <G_q+0xc0e6>
  } else {
    t12_re = t202.re / 2.0;
 800ea6c:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 800ea70:	ed93 6b00 	vldr	d6, [r3]
 800ea74:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ea78:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ea7c:	f241 3388 	movw	r3, #5000	; 0x1388
 800ea80:	443b      	add	r3, r7
 800ea82:	ed83 7b00 	vstr	d7, [r3]
    t12_im = t202.im / 2.0;
 800ea86:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 800ea8a:	ed93 6b02 	vldr	d6, [r3, #8]
 800ea8e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ea92:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ea96:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800ea9a:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t203.im == 0.0) {
 800ea9e:	f507 637a 	add.w	r3, r7, #4000	; 0xfa0
 800eaa2:	ed93 7b02 	vldr	d7, [r3, #8]
 800eaa6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800eaaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaae:	d116      	bne.n	800eade <G_q+0xc126>
    t34_re = t203.re / 2.0;
 800eab0:	f507 637a 	add.w	r3, r7, #4000	; 0xfa0
 800eab4:	ed93 6b00 	vldr	d6, [r3]
 800eab8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800eabc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800eac0:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800eac4:	443b      	add	r3, r7
 800eac6:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800eaca:	f04f 0300 	mov.w	r3, #0
 800eace:	f04f 0400 	mov.w	r4, #0
 800ead2:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800ead6:	443a      	add	r2, r7
 800ead8:	e9c2 3400 	strd	r3, r4, [r2]
 800eadc:	e039      	b.n	800eb52 <G_q+0xc19a>
  } else if (t203.re == 0.0) {
 800eade:	f507 637a 	add.w	r3, r7, #4000	; 0xfa0
 800eae2:	ed93 7b00 	vldr	d7, [r3]
 800eae6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800eaea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaee:	d116      	bne.n	800eb1e <G_q+0xc166>
    t34_re = 0.0;
 800eaf0:	f04f 0300 	mov.w	r3, #0
 800eaf4:	f04f 0400 	mov.w	r4, #0
 800eaf8:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800eafc:	443a      	add	r2, r7
 800eafe:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t203.im / 2.0;
 800eb02:	f507 637a 	add.w	r3, r7, #4000	; 0xfa0
 800eb06:	ed93 6b02 	vldr	d6, [r3, #8]
 800eb0a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800eb0e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800eb12:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800eb16:	443b      	add	r3, r7
 800eb18:	ed83 7b00 	vstr	d7, [r3]
 800eb1c:	e019      	b.n	800eb52 <G_q+0xc19a>
  } else {
    t34_re = t203.re / 2.0;
 800eb1e:	f507 637a 	add.w	r3, r7, #4000	; 0xfa0
 800eb22:	ed93 6b00 	vldr	d6, [r3]
 800eb26:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800eb2a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800eb2e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800eb32:	443b      	add	r3, r7
 800eb34:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t203.im / 2.0;
 800eb38:	f507 637a 	add.w	r3, r7, #4000	; 0xfa0
 800eb3c:	ed93 6b02 	vldr	d6, [r3, #8]
 800eb40:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800eb44:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800eb48:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800eb4c:	443b      	add	r3, r7
 800eb4e:	ed83 7b00 	vstr	d7, [r3]
  }

  t23_re = t200.re * 3.061616997868383E-17 + t201.re * 3.061616997868383E-17;
 800eb52:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800eb56:	ed93 7b00 	vldr	d7, [r3]
 800eb5a:	ed9f 6be3 	vldr	d6, [pc, #908]	; 800eee8 <G_q+0xc530>
 800eb5e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800eb62:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800eb66:	ed93 7b00 	vldr	d7, [r3]
 800eb6a:	ed9f 5bdf 	vldr	d5, [pc, #892]	; 800eee8 <G_q+0xc530>
 800eb6e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800eb72:	ee36 7b07 	vadd.f64	d7, d6, d7
 800eb76:	f241 3330 	movw	r3, #4912	; 0x1330
 800eb7a:	443b      	add	r3, r7
 800eb7c:	ed83 7b00 	vstr	d7, [r3]
  t3_im = t200.im * 3.061616997868383E-17 + t201.im * 3.061616997868383E-17;
 800eb80:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800eb84:	ed93 7b02 	vldr	d7, [r3, #8]
 800eb88:	ed9f 6bd7 	vldr	d6, [pc, #860]	; 800eee8 <G_q+0xc530>
 800eb8c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800eb90:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800eb94:	ed93 7b02 	vldr	d7, [r3, #8]
 800eb98:	ed9f 5bd3 	vldr	d5, [pc, #844]	; 800eee8 <G_q+0xc530>
 800eb9c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800eba0:	ee36 7b07 	vadd.f64	d7, d6, d7
 800eba4:	f241 3310 	movw	r3, #4880	; 0x1310
 800eba8:	443b      	add	r3, r7
 800ebaa:	ed83 7b00 	vstr	d7, [r3]
  t12_re = (t12_re + t34_re) + 7.498798913309288E-33;
 800ebae:	f241 3388 	movw	r3, #5000	; 0x1388
 800ebb2:	443b      	add	r3, r7
 800ebb4:	ed93 6b00 	vldr	d6, [r3]
 800ebb8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800ebbc:	443b      	add	r3, r7
 800ebbe:	ed93 7b00 	vldr	d7, [r3]
 800ebc2:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ebc6:	ed9f 6bca 	vldr	d6, [pc, #808]	; 800eef0 <G_q+0xc538>
 800ebca:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ebce:	f241 3388 	movw	r3, #5000	; 0x1388
 800ebd2:	443b      	add	r3, r7
 800ebd4:	ed83 7b00 	vstr	d7, [r3]
  t12_im += t34_im;
 800ebd8:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800ebdc:	ed93 6b00 	vldr	d6, [r3]
 800ebe0:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800ebe4:	443b      	add	r3, r7
 800ebe6:	ed93 7b00 	vldr	d7, [r3]
 800ebea:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ebee:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800ebf2:	ed83 7b00 	vstr	d7, [r3]
  t70_im = (t196.re * 0.0 - t196.im * 0.5) - (t197.re * 0.0 - t197.im * 0.5);
 800ebf6:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800ebfa:	ed93 7b00 	vldr	d7, [r3]
 800ebfe:	ed9f 6bbe 	vldr	d6, [pc, #760]	; 800eef8 <G_q+0xc540>
 800ec02:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ec06:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800ec0a:	ed93 7b02 	vldr	d7, [r3, #8]
 800ec0e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ec12:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ec16:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ec1a:	4bbb      	ldr	r3, [pc, #748]	; (800ef08 <G_q+0xc550>)
 800ec1c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ec20:	443a      	add	r2, r7
 800ec22:	4413      	add	r3, r2
 800ec24:	ed93 7b00 	vldr	d7, [r3]
 800ec28:	ed9f 5bb3 	vldr	d5, [pc, #716]	; 800eef8 <G_q+0xc540>
 800ec2c:	ee27 5b05 	vmul.f64	d5, d7, d5
 800ec30:	4bb5      	ldr	r3, [pc, #724]	; (800ef08 <G_q+0xc550>)
 800ec32:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ec36:	443a      	add	r2, r7
 800ec38:	4413      	add	r3, r2
 800ec3a:	ed93 7b02 	vldr	d7, [r3, #8]
 800ec3e:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800ec42:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ec46:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ec4a:	f241 23c8 	movw	r3, #4808	; 0x12c8
 800ec4e:	443b      	add	r3, r7
 800ec50:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ec54:	ed83 7b00 	vstr	d7, [r3]
  t43_im = (t196.re * 0.5 + t196.im * 0.0) - (t197.re * 0.5 + t197.im * 0.0);
 800ec58:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800ec5c:	ed93 7b00 	vldr	d7, [r3]
 800ec60:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800ec64:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ec68:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800ec6c:	ed93 7b02 	vldr	d7, [r3, #8]
 800ec70:	ed9f 5ba1 	vldr	d5, [pc, #644]	; 800eef8 <G_q+0xc540>
 800ec74:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ec78:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ec7c:	4ba2      	ldr	r3, [pc, #648]	; (800ef08 <G_q+0xc550>)
 800ec7e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ec82:	443a      	add	r2, r7
 800ec84:	4413      	add	r3, r2
 800ec86:	ed93 7b00 	vldr	d7, [r3]
 800ec8a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ec8e:	ee27 5b05 	vmul.f64	d5, d7, d5
 800ec92:	4b9d      	ldr	r3, [pc, #628]	; (800ef08 <G_q+0xc550>)
 800ec94:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ec98:	443a      	add	r2, r7
 800ec9a:	4413      	add	r3, r2
 800ec9c:	ed93 7b02 	vldr	d7, [r3, #8]
 800eca0:	ed9f 4b95 	vldr	d4, [pc, #596]	; 800eef8 <G_q+0xc540>
 800eca4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800eca8:	ee35 7b07 	vadd.f64	d7, d5, d7
 800ecac:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ecb0:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800ecb4:	443b      	add	r3, r7
 800ecb6:	ed83 7b00 	vstr	d7, [r3]
  b_t54_re = (((t198.re * 6.123233995736766E-17 + t199.re *
 800ecba:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800ecbe:	ed93 7b00 	vldr	d7, [r3]
 800ecc2:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 800ef00 <G_q+0xc548>
 800ecc6:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ecca:	f507 6378 	add.w	r3, r7, #3968	; 0xf80
 800ecce:	ed93 7b00 	vldr	d7, [r3]
 800ecd2:	ed9f 5b8b 	vldr	d5, [pc, #556]	; 800ef00 <G_q+0xc548>
 800ecd6:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ecda:	ee36 6b07 	vadd.f64	d6, d6, d7
                6.123233995736766E-17) + (t16_re * t20_re - t16_im * t20_im)) +
 800ecde:	f241 3368 	movw	r3, #4968	; 0x1368
 800ece2:	443b      	add	r3, r7
 800ece4:	ed93 5b00 	vldr	d5, [r3]
 800ece8:	f241 3348 	movw	r3, #4936	; 0x1348
 800ecec:	443b      	add	r3, r7
 800ecee:	ed93 7b00 	vldr	d7, [r3]
 800ecf2:	ee25 5b07 	vmul.f64	d5, d5, d7
 800ecf6:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800ecfa:	ed93 4b00 	vldr	d4, [r3]
 800ecfe:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800ed02:	ed93 7b00 	vldr	d7, [r3]
 800ed06:	ee24 7b07 	vmul.f64	d7, d4, d7
 800ed0a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ed0e:	ee36 6b07 	vadd.f64	d6, d6, d7
              (t23_re * t12_re - t3_im * t12_im)) - 6.123233995736766E-17;
 800ed12:	f241 3330 	movw	r3, #4912	; 0x1330
 800ed16:	443b      	add	r3, r7
 800ed18:	ed93 5b00 	vldr	d5, [r3]
 800ed1c:	f241 3388 	movw	r3, #5000	; 0x1388
 800ed20:	443b      	add	r3, r7
 800ed22:	ed93 7b00 	vldr	d7, [r3]
 800ed26:	ee25 5b07 	vmul.f64	d5, d5, d7
 800ed2a:	f241 3310 	movw	r3, #4880	; 0x1310
 800ed2e:	443b      	add	r3, r7
 800ed30:	ed93 4b00 	vldr	d4, [r3]
 800ed34:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800ed38:	ed93 7b00 	vldr	d7, [r3]
 800ed3c:	ee24 7b07 	vmul.f64	d7, d4, d7
 800ed40:	ee35 7b47 	vsub.f64	d7, d5, d7
                6.123233995736766E-17) + (t16_re * t20_re - t16_im * t20_im)) +
 800ed44:	ee36 7b07 	vadd.f64	d7, d6, d7
  b_t54_re = (((t198.re * 6.123233995736766E-17 + t199.re *
 800ed48:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 800ef00 <G_q+0xc548>
 800ed4c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ed50:	f241 23f0 	movw	r3, #4848	; 0x12f0
 800ed54:	443b      	add	r3, r7
 800ed56:	ed83 7b00 	vstr	d7, [r3]
  t55_im = ((t198.im * 6.123233995736766E-17 + t199.im * 6.123233995736766E-17)
 800ed5a:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800ed5e:	ed93 7b02 	vldr	d7, [r3, #8]
 800ed62:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800ef00 <G_q+0xc548>
 800ed66:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ed6a:	f507 6378 	add.w	r3, r7, #3968	; 0xf80
 800ed6e:	ed93 7b02 	vldr	d7, [r3, #8]
 800ed72:	ed9f 5b63 	vldr	d5, [pc, #396]	; 800ef00 <G_q+0xc548>
 800ed76:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ed7a:	ee36 6b07 	vadd.f64	d6, d6, d7
            + (t16_re * t20_im + t16_im * t20_re)) + (t23_re * t12_im + t3_im *
 800ed7e:	f241 3368 	movw	r3, #4968	; 0x1368
 800ed82:	443b      	add	r3, r7
 800ed84:	ed93 5b00 	vldr	d5, [r3]
 800ed88:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800ed8c:	ed93 7b00 	vldr	d7, [r3]
 800ed90:	ee25 5b07 	vmul.f64	d5, d5, d7
 800ed94:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800ed98:	ed93 4b00 	vldr	d4, [r3]
 800ed9c:	f241 3348 	movw	r3, #4936	; 0x1348
 800eda0:	443b      	add	r3, r7
 800eda2:	ed93 7b00 	vldr	d7, [r3]
 800eda6:	ee24 7b07 	vmul.f64	d7, d4, d7
 800edaa:	ee35 7b07 	vadd.f64	d7, d5, d7
 800edae:	ee36 6b07 	vadd.f64	d6, d6, d7
 800edb2:	f241 3330 	movw	r3, #4912	; 0x1330
 800edb6:	443b      	add	r3, r7
 800edb8:	ed93 5b00 	vldr	d5, [r3]
 800edbc:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800edc0:	ed93 7b00 	vldr	d7, [r3]
 800edc4:	ee25 5b07 	vmul.f64	d5, d5, d7
 800edc8:	f241 3310 	movw	r3, #4880	; 0x1310
 800edcc:	443b      	add	r3, r7
 800edce:	ed93 4b00 	vldr	d4, [r3]
 800edd2:	f241 3388 	movw	r3, #5000	; 0x1388
 800edd6:	443b      	add	r3, r7
 800edd8:	ed93 7b00 	vldr	d7, [r3]
 800eddc:	ee24 7b07 	vmul.f64	d7, d4, d7
 800ede0:	ee35 7b07 	vadd.f64	d7, d5, d7
  t55_im = ((t198.im * 6.123233995736766E-17 + t199.im * 6.123233995736766E-17)
 800ede4:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ede8:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800edec:	443b      	add	r3, r7
 800edee:	ed83 7b00 	vstr	d7, [r3]
    t12_re);
  if (t210.im == 0.0) {
 800edf2:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800edf6:	ed93 7b02 	vldr	d7, [r3, #8]
 800edfa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800edfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee02:	d116      	bne.n	800ee32 <G_q+0xc47a>
    t20_re = t210.re / 2.0;
 800ee04:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800ee08:	ed93 6b00 	vldr	d6, [r3]
 800ee0c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ee10:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ee14:	f241 3348 	movw	r3, #4936	; 0x1348
 800ee18:	443b      	add	r3, r7
 800ee1a:	ed83 7b00 	vstr	d7, [r3]
    t70_re = 0.0;
 800ee1e:	f241 22d0 	movw	r2, #4816	; 0x12d0
 800ee22:	443a      	add	r2, r7
 800ee24:	f04f 0300 	mov.w	r3, #0
 800ee28:	f04f 0400 	mov.w	r4, #0
 800ee2c:	e9c2 3400 	strd	r3, r4, [r2]
 800ee30:	e039      	b.n	800eea6 <G_q+0xc4ee>
  } else if (t210.re == 0.0) {
 800ee32:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800ee36:	ed93 7b00 	vldr	d7, [r3]
 800ee3a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ee3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee42:	d116      	bne.n	800ee72 <G_q+0xc4ba>
    t20_re = 0.0;
 800ee44:	f04f 0300 	mov.w	r3, #0
 800ee48:	f04f 0400 	mov.w	r4, #0
 800ee4c:	f241 3248 	movw	r2, #4936	; 0x1348
 800ee50:	443a      	add	r2, r7
 800ee52:	e9c2 3400 	strd	r3, r4, [r2]
    t70_re = t210.im / 2.0;
 800ee56:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800ee5a:	ed93 6b02 	vldr	d6, [r3, #8]
 800ee5e:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800ee62:	443b      	add	r3, r7
 800ee64:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ee68:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ee6c:	ed83 7b00 	vstr	d7, [r3]
 800ee70:	e019      	b.n	800eea6 <G_q+0xc4ee>
  } else {
    t20_re = t210.re / 2.0;
 800ee72:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800ee76:	ed93 6b00 	vldr	d6, [r3]
 800ee7a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ee7e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ee82:	f241 3348 	movw	r3, #4936	; 0x1348
 800ee86:	443b      	add	r3, r7
 800ee88:	ed83 7b00 	vstr	d7, [r3]
    t70_re = t210.im / 2.0;
 800ee8c:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800ee90:	ed93 6b02 	vldr	d6, [r3, #8]
 800ee94:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800ee98:	443b      	add	r3, r7
 800ee9a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ee9e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800eea2:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t211.im == 0.0) {
 800eea6:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800eeaa:	ed93 7b02 	vldr	d7, [r3, #8]
 800eeae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800eeb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeb6:	d129      	bne.n	800ef0c <G_q+0xc554>
    t34_re = t211.re / 2.0;
 800eeb8:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800eebc:	ed93 6b00 	vldr	d6, [r3]
 800eec0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800eec4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800eec8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800eecc:	443b      	add	r3, r7
 800eece:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800eed2:	f04f 0300 	mov.w	r3, #0
 800eed6:	f04f 0400 	mov.w	r4, #0
 800eeda:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800eede:	443a      	add	r2, r7
 800eee0:	e9c2 3400 	strd	r3, r4, [r2]
 800eee4:	e04c      	b.n	800ef80 <G_q+0xc5c8>
 800eee6:	bf00      	nop
 800eee8:	33145c07 	.word	0x33145c07
 800eeec:	3c81a626 	.word	0x3c81a626
 800eef0:	858a5d48 	.word	0x858a5d48
 800eef4:	394377ce 	.word	0x394377ce
	...
 800ef00:	33145c07 	.word	0x33145c07
 800ef04:	3c91a626 	.word	0x3c91a626
 800ef08:	ffffeef0 	.word	0xffffeef0
  } else if (t211.re == 0.0) {
 800ef0c:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800ef10:	ed93 7b00 	vldr	d7, [r3]
 800ef14:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ef18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef1c:	d116      	bne.n	800ef4c <G_q+0xc594>
    t34_re = 0.0;
 800ef1e:	f04f 0300 	mov.w	r3, #0
 800ef22:	f04f 0400 	mov.w	r4, #0
 800ef26:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800ef2a:	443a      	add	r2, r7
 800ef2c:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t211.im / 2.0;
 800ef30:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800ef34:	ed93 6b02 	vldr	d6, [r3, #8]
 800ef38:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ef3c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ef40:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800ef44:	443b      	add	r3, r7
 800ef46:	ed83 7b00 	vstr	d7, [r3]
 800ef4a:	e019      	b.n	800ef80 <G_q+0xc5c8>
  } else {
    t34_re = t211.re / 2.0;
 800ef4c:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800ef50:	ed93 6b00 	vldr	d6, [r3]
 800ef54:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ef58:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ef5c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800ef60:	443b      	add	r3, r7
 800ef62:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t211.im / 2.0;
 800ef66:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800ef6a:	ed93 6b02 	vldr	d6, [r3, #8]
 800ef6e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ef72:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ef76:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800ef7a:	443b      	add	r3, r7
 800ef7c:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_re += t34_re;
 800ef80:	f241 3348 	movw	r3, #4936	; 0x1348
 800ef84:	443b      	add	r3, r7
 800ef86:	ed93 6b00 	vldr	d6, [r3]
 800ef8a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800ef8e:	443b      	add	r3, r7
 800ef90:	ed93 7b00 	vldr	d7, [r3]
 800ef94:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ef98:	f241 3348 	movw	r3, #4936	; 0x1348
 800ef9c:	443b      	add	r3, r7
 800ef9e:	ed83 7b00 	vstr	d7, [r3]
  t70_re += t34_im;
 800efa2:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800efa6:	443b      	add	r3, r7
 800efa8:	f241 22d0 	movw	r2, #4816	; 0x12d0
 800efac:	443a      	add	r2, r7
 800efae:	ed92 6b00 	vldr	d6, [r2]
 800efb2:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800efb6:	443a      	add	r2, r7
 800efb8:	ed92 7b00 	vldr	d7, [r2]
 800efbc:	ee36 7b07 	vadd.f64	d7, d6, d7
 800efc0:	ed83 7b00 	vstr	d7, [r3]
  t23_re = (t212.re * 0.0 - t212.im * 0.5) - (t213.re * 0.0 - t213.im * 0.5);
 800efc4:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 800efc8:	ed93 7b00 	vldr	d7, [r3]
 800efcc:	ed9f 6be0 	vldr	d6, [pc, #896]	; 800f350 <G_q+0xc998>
 800efd0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800efd4:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 800efd8:	ed93 7b02 	vldr	d7, [r3, #8]
 800efdc:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800efe0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800efe4:	ee36 6b47 	vsub.f64	d6, d6, d7
 800efe8:	f507 637e 	add.w	r3, r7, #4064	; 0xfe0
 800efec:	ed93 7b00 	vldr	d7, [r3]
 800eff0:	ed9f 5bd7 	vldr	d5, [pc, #860]	; 800f350 <G_q+0xc998>
 800eff4:	ee27 5b05 	vmul.f64	d5, d7, d5
 800eff8:	f507 637e 	add.w	r3, r7, #4064	; 0xfe0
 800effc:	ed93 7b02 	vldr	d7, [r3, #8]
 800f000:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800f004:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f008:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f00c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f010:	f241 3330 	movw	r3, #4912	; 0x1330
 800f014:	443b      	add	r3, r7
 800f016:	ed83 7b00 	vstr	d7, [r3]
  t3_im = (t212.re * 0.5 + t212.im * 0.0) - (t213.re * 0.5 + t213.im * 0.0);
 800f01a:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 800f01e:	ed93 7b00 	vldr	d7, [r3]
 800f022:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800f026:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f02a:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 800f02e:	ed93 7b02 	vldr	d7, [r3, #8]
 800f032:	ed9f 5bc7 	vldr	d5, [pc, #796]	; 800f350 <G_q+0xc998>
 800f036:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f03a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f03e:	f507 637e 	add.w	r3, r7, #4064	; 0xfe0
 800f042:	ed93 7b00 	vldr	d7, [r3]
 800f046:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f04a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800f04e:	f507 637e 	add.w	r3, r7, #4064	; 0xfe0
 800f052:	ed93 7b02 	vldr	d7, [r3, #8]
 800f056:	ed9f 4bbe 	vldr	d4, [pc, #760]	; 800f350 <G_q+0xc998>
 800f05a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f05e:	ee35 7b07 	vadd.f64	d7, d5, d7
 800f062:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f066:	f241 3310 	movw	r3, #4880	; 0x1310
 800f06a:	443b      	add	r3, r7
 800f06c:	ed83 7b00 	vstr	d7, [r3]
  if (t216.im == 0.0) {
 800f070:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 800f074:	ed93 7b02 	vldr	d7, [r3, #8]
 800f078:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f07c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f080:	d116      	bne.n	800f0b0 <G_q+0xc6f8>
    t13_re = t216.re / 2.0;
 800f082:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 800f086:	ed93 6b00 	vldr	d6, [r3]
 800f08a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f08e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f092:	f241 3378 	movw	r3, #4984	; 0x1378
 800f096:	443b      	add	r3, r7
 800f098:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 800f09c:	f04f 0300 	mov.w	r3, #0
 800f0a0:	f04f 0400 	mov.w	r4, #0
 800f0a4:	f241 3270 	movw	r2, #4976	; 0x1370
 800f0a8:	443a      	add	r2, r7
 800f0aa:	e9c2 3400 	strd	r3, r4, [r2]
 800f0ae:	e039      	b.n	800f124 <G_q+0xc76c>
  } else if (t216.re == 0.0) {
 800f0b0:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 800f0b4:	ed93 7b00 	vldr	d7, [r3]
 800f0b8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f0bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0c0:	d116      	bne.n	800f0f0 <G_q+0xc738>
    t13_re = 0.0;
 800f0c2:	f04f 0300 	mov.w	r3, #0
 800f0c6:	f04f 0400 	mov.w	r4, #0
 800f0ca:	f241 3278 	movw	r2, #4984	; 0x1378
 800f0ce:	443a      	add	r2, r7
 800f0d0:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t216.im / 2.0;
 800f0d4:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 800f0d8:	ed93 6b02 	vldr	d6, [r3, #8]
 800f0dc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f0e0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f0e4:	f241 3370 	movw	r3, #4976	; 0x1370
 800f0e8:	443b      	add	r3, r7
 800f0ea:	ed83 7b00 	vstr	d7, [r3]
 800f0ee:	e019      	b.n	800f124 <G_q+0xc76c>
  } else {
    t13_re = t216.re / 2.0;
 800f0f0:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 800f0f4:	ed93 6b00 	vldr	d6, [r3]
 800f0f8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f0fc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f100:	f241 3378 	movw	r3, #4984	; 0x1378
 800f104:	443b      	add	r3, r7
 800f106:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t216.im / 2.0;
 800f10a:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 800f10e:	ed93 6b02 	vldr	d6, [r3, #8]
 800f112:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f116:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f11a:	f241 3370 	movw	r3, #4976	; 0x1370
 800f11e:	443b      	add	r3, r7
 800f120:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t217.im == 0.0) {
 800f124:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800f128:	ed93 7b02 	vldr	d7, [r3, #8]
 800f12c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f134:	d116      	bne.n	800f164 <G_q+0xc7ac>
    t34_re = t217.re / 2.0;
 800f136:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800f13a:	ed93 6b00 	vldr	d6, [r3]
 800f13e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f142:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f146:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800f14a:	443b      	add	r3, r7
 800f14c:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800f150:	f04f 0300 	mov.w	r3, #0
 800f154:	f04f 0400 	mov.w	r4, #0
 800f158:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800f15c:	443a      	add	r2, r7
 800f15e:	e9c2 3400 	strd	r3, r4, [r2]
 800f162:	e039      	b.n	800f1d8 <G_q+0xc820>
  } else if (t217.re == 0.0) {
 800f164:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800f168:	ed93 7b00 	vldr	d7, [r3]
 800f16c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f174:	d116      	bne.n	800f1a4 <G_q+0xc7ec>
    t34_re = 0.0;
 800f176:	f04f 0300 	mov.w	r3, #0
 800f17a:	f04f 0400 	mov.w	r4, #0
 800f17e:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800f182:	443a      	add	r2, r7
 800f184:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t217.im / 2.0;
 800f188:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800f18c:	ed93 6b02 	vldr	d6, [r3, #8]
 800f190:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f194:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f198:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800f19c:	443b      	add	r3, r7
 800f19e:	ed83 7b00 	vstr	d7, [r3]
 800f1a2:	e019      	b.n	800f1d8 <G_q+0xc820>
  } else {
    t34_re = t217.re / 2.0;
 800f1a4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800f1a8:	ed93 6b00 	vldr	d6, [r3]
 800f1ac:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f1b0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f1b4:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800f1b8:	443b      	add	r3, r7
 800f1ba:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t217.im / 2.0;
 800f1be:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800f1c2:	ed93 6b02 	vldr	d6, [r3, #8]
 800f1c6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f1ca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f1ce:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800f1d2:	443b      	add	r3, r7
 800f1d4:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re = (t214.re * 0.0 - t214.im * 0.5) - (t215.re * 0.0 - t215.im * 0.5);
 800f1d8:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800f1dc:	ed93 7b00 	vldr	d7, [r3]
 800f1e0:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 800f350 <G_q+0xc998>
 800f1e4:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f1e8:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800f1ec:	ed93 7b02 	vldr	d7, [r3, #8]
 800f1f0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f1f4:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f1f8:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f1fc:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800f200:	ed93 7b00 	vldr	d7, [r3]
 800f204:	ed9f 5b52 	vldr	d5, [pc, #328]	; 800f350 <G_q+0xc998>
 800f208:	ee27 5b05 	vmul.f64	d5, d7, d5
 800f20c:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800f210:	ed93 7b02 	vldr	d7, [r3, #8]
 800f214:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800f218:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f21c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f220:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f224:	f241 3368 	movw	r3, #4968	; 0x1368
 800f228:	443b      	add	r3, r7
 800f22a:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t214.re * 0.5 + t214.im * 0.0) - (t215.re * 0.5 + t215.im * 0.0);
 800f22e:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800f232:	ed93 7b00 	vldr	d7, [r3]
 800f236:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800f23a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f23e:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800f242:	ed93 7b02 	vldr	d7, [r3, #8]
 800f246:	ed9f 5b42 	vldr	d5, [pc, #264]	; 800f350 <G_q+0xc998>
 800f24a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f24e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f252:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800f256:	ed93 7b00 	vldr	d7, [r3]
 800f25a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f25e:	ee27 5b05 	vmul.f64	d5, d7, d5
 800f262:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800f266:	ed93 7b02 	vldr	d7, [r3, #8]
 800f26a:	ed9f 4b39 	vldr	d4, [pc, #228]	; 800f350 <G_q+0xc998>
 800f26e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f272:	ee35 7b07 	vadd.f64	d7, d5, d7
 800f276:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f27a:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800f27e:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t13_re + t34_re) + 7.498798913309288E-33;
 800f282:	f241 3378 	movw	r3, #4984	; 0x1378
 800f286:	443b      	add	r3, r7
 800f288:	ed93 6b00 	vldr	d6, [r3]
 800f28c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800f290:	443b      	add	r3, r7
 800f292:	ed93 7b00 	vldr	d7, [r3]
 800f296:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f29a:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 800f358 <G_q+0xc9a0>
 800f29e:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f2a2:	f241 3378 	movw	r3, #4984	; 0x1378
 800f2a6:	443b      	add	r3, r7
 800f2a8:	ed83 7b00 	vstr	d7, [r3]
  t13_im += t34_im;
 800f2ac:	f241 3370 	movw	r3, #4976	; 0x1370
 800f2b0:	443b      	add	r3, r7
 800f2b2:	ed93 6b00 	vldr	d6, [r3]
 800f2b6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800f2ba:	443b      	add	r3, r7
 800f2bc:	ed93 7b00 	vldr	d7, [r3]
 800f2c0:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f2c4:	f241 3370 	movw	r3, #4976	; 0x1370
 800f2c8:	443b      	add	r3, r7
 800f2ca:	ed83 7b00 	vstr	d7, [r3]
  if (t208.im == 0.0) {
 800f2ce:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800f2d2:	ed93 7b02 	vldr	d7, [r3, #8]
 800f2d6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f2da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2de:	d116      	bne.n	800f30e <G_q+0xc956>
    t74_re = t208.re / 2.0;
 800f2e0:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800f2e4:	ed93 6b00 	vldr	d6, [r3]
 800f2e8:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800f2ec:	443b      	add	r3, r7
 800f2ee:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f2f2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f2f6:	ed83 7b00 	vstr	d7, [r3]
    t74_im = 0.0;
 800f2fa:	f241 22b0 	movw	r2, #4784	; 0x12b0
 800f2fe:	443a      	add	r2, r7
 800f300:	f04f 0300 	mov.w	r3, #0
 800f304:	f04f 0400 	mov.w	r4, #0
 800f308:	e9c2 3400 	strd	r3, r4, [r2]
 800f30c:	e042      	b.n	800f394 <G_q+0xc9dc>
  } else if (t208.re == 0.0) {
 800f30e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800f312:	ed93 7b00 	vldr	d7, [r3]
 800f316:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f31a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f31e:	d11f      	bne.n	800f360 <G_q+0xc9a8>
    t74_re = 0.0;
 800f320:	f241 22b8 	movw	r2, #4792	; 0x12b8
 800f324:	443a      	add	r2, r7
 800f326:	f04f 0300 	mov.w	r3, #0
 800f32a:	f04f 0400 	mov.w	r4, #0
 800f32e:	e9c2 3400 	strd	r3, r4, [r2]
    t74_im = t208.im / 2.0;
 800f332:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800f336:	ed93 6b02 	vldr	d6, [r3, #8]
 800f33a:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800f33e:	443b      	add	r3, r7
 800f340:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f344:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f348:	ed83 7b00 	vstr	d7, [r3]
 800f34c:	e022      	b.n	800f394 <G_q+0xc9dc>
 800f34e:	bf00      	nop
	...
 800f358:	858a5d48 	.word	0x858a5d48
 800f35c:	394377ce 	.word	0x394377ce
  } else {
    t74_re = t208.re / 2.0;
 800f360:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800f364:	ed93 6b00 	vldr	d6, [r3]
 800f368:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800f36c:	443b      	add	r3, r7
 800f36e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f372:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f376:	ed83 7b00 	vstr	d7, [r3]
    t74_im = t208.im / 2.0;
 800f37a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800f37e:	ed93 6b02 	vldr	d6, [r3, #8]
 800f382:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800f386:	443b      	add	r3, r7
 800f388:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f38c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f390:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t209.im == 0.0) {
 800f394:	4b25      	ldr	r3, [pc, #148]	; (800f42c <G_q+0xca74>)
 800f396:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800f39a:	443a      	add	r2, r7
 800f39c:	4413      	add	r3, r2
 800f39e:	ed93 7b02 	vldr	d7, [r3, #8]
 800f3a2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f3a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3aa:	d119      	bne.n	800f3e0 <G_q+0xca28>
    t34_re = t209.re / 2.0;
 800f3ac:	4b1f      	ldr	r3, [pc, #124]	; (800f42c <G_q+0xca74>)
 800f3ae:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800f3b2:	443a      	add	r2, r7
 800f3b4:	4413      	add	r3, r2
 800f3b6:	ed93 6b00 	vldr	d6, [r3]
 800f3ba:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f3be:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f3c2:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800f3c6:	443b      	add	r3, r7
 800f3c8:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800f3cc:	f04f 0300 	mov.w	r3, #0
 800f3d0:	f04f 0400 	mov.w	r4, #0
 800f3d4:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800f3d8:	443a      	add	r2, r7
 800f3da:	e9c2 3400 	strd	r3, r4, [r2]
 800f3de:	e047      	b.n	800f470 <G_q+0xcab8>
  } else if (t209.re == 0.0) {
 800f3e0:	4b12      	ldr	r3, [pc, #72]	; (800f42c <G_q+0xca74>)
 800f3e2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800f3e6:	443a      	add	r2, r7
 800f3e8:	4413      	add	r3, r2
 800f3ea:	ed93 7b00 	vldr	d7, [r3]
 800f3ee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f3f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3f6:	d11b      	bne.n	800f430 <G_q+0xca78>
    t34_re = 0.0;
 800f3f8:	f04f 0300 	mov.w	r3, #0
 800f3fc:	f04f 0400 	mov.w	r4, #0
 800f400:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800f404:	443a      	add	r2, r7
 800f406:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t209.im / 2.0;
 800f40a:	4b08      	ldr	r3, [pc, #32]	; (800f42c <G_q+0xca74>)
 800f40c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800f410:	443a      	add	r2, r7
 800f412:	4413      	add	r3, r2
 800f414:	ed93 6b02 	vldr	d6, [r3, #8]
 800f418:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f41c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f420:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800f424:	443b      	add	r3, r7
 800f426:	ed83 7b00 	vstr	d7, [r3]
 800f42a:	e021      	b.n	800f470 <G_q+0xcab8>
 800f42c:	ffffef10 	.word	0xffffef10
  } else {
    t34_re = t209.re / 2.0;
 800f430:	4bd7      	ldr	r3, [pc, #860]	; (800f790 <G_q+0xcdd8>)
 800f432:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800f436:	443a      	add	r2, r7
 800f438:	4413      	add	r3, r2
 800f43a:	ed93 6b00 	vldr	d6, [r3]
 800f43e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f442:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f446:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800f44a:	443b      	add	r3, r7
 800f44c:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t209.im / 2.0;
 800f450:	4bcf      	ldr	r3, [pc, #828]	; (800f790 <G_q+0xcdd8>)
 800f452:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800f456:	443a      	add	r2, r7
 800f458:	4413      	add	r3, r2
 800f45a:	ed93 6b02 	vldr	d6, [r3, #8]
 800f45e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f462:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f466:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800f46a:	443b      	add	r3, r7
 800f46c:	ed83 7b00 	vstr	d7, [r3]
  }

  t55_re = (t20_re * t23_re - t70_re * t3_im) - (t16_re * t13_re - t16_im *
 800f470:	f241 3348 	movw	r3, #4936	; 0x1348
 800f474:	443b      	add	r3, r7
 800f476:	ed93 6b00 	vldr	d6, [r3]
 800f47a:	f241 3330 	movw	r3, #4912	; 0x1330
 800f47e:	443b      	add	r3, r7
 800f480:	ed93 7b00 	vldr	d7, [r3]
 800f484:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f488:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800f48c:	443b      	add	r3, r7
 800f48e:	ed93 5b00 	vldr	d5, [r3]
 800f492:	f241 3310 	movw	r3, #4880	; 0x1310
 800f496:	443b      	add	r3, r7
 800f498:	ed93 7b00 	vldr	d7, [r3]
 800f49c:	ee25 7b07 	vmul.f64	d7, d5, d7
 800f4a0:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f4a4:	f241 3368 	movw	r3, #4968	; 0x1368
 800f4a8:	443b      	add	r3, r7
 800f4aa:	ed93 5b00 	vldr	d5, [r3]
 800f4ae:	f241 3378 	movw	r3, #4984	; 0x1378
 800f4b2:	443b      	add	r3, r7
 800f4b4:	ed93 7b00 	vldr	d7, [r3]
 800f4b8:	ee25 5b07 	vmul.f64	d5, d5, d7
 800f4bc:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800f4c0:	ed93 4b00 	vldr	d4, [r3]
 800f4c4:	f241 3370 	movw	r3, #4976	; 0x1370
 800f4c8:	443b      	add	r3, r7
 800f4ca:	ed93 7b00 	vldr	d7, [r3]
 800f4ce:	ee24 7b07 	vmul.f64	d7, d4, d7
 800f4d2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f4d6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f4da:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800f4de:	ed83 7b00 	vstr	d7, [r3]
    t13_im);
  t70_re = (t20_re * t3_im + t70_re * t23_re) - (t16_re * t13_im + t16_im *
 800f4e2:	f241 3348 	movw	r3, #4936	; 0x1348
 800f4e6:	443b      	add	r3, r7
 800f4e8:	ed93 6b00 	vldr	d6, [r3]
 800f4ec:	f241 3310 	movw	r3, #4880	; 0x1310
 800f4f0:	443b      	add	r3, r7
 800f4f2:	ed93 7b00 	vldr	d7, [r3]
 800f4f6:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f4fa:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800f4fe:	443b      	add	r3, r7
 800f500:	ed93 5b00 	vldr	d5, [r3]
 800f504:	f241 3330 	movw	r3, #4912	; 0x1330
 800f508:	443b      	add	r3, r7
 800f50a:	ed93 7b00 	vldr	d7, [r3]
 800f50e:	ee25 7b07 	vmul.f64	d7, d5, d7
 800f512:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f516:	f241 3368 	movw	r3, #4968	; 0x1368
 800f51a:	443b      	add	r3, r7
 800f51c:	ed93 5b00 	vldr	d5, [r3]
 800f520:	f241 3370 	movw	r3, #4976	; 0x1370
 800f524:	443b      	add	r3, r7
 800f526:	ed93 7b00 	vldr	d7, [r3]
 800f52a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800f52e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800f532:	ed93 4b00 	vldr	d4, [r3]
 800f536:	f241 3378 	movw	r3, #4984	; 0x1378
 800f53a:	443b      	add	r3, r7
 800f53c:	ed93 7b00 	vldr	d7, [r3]
 800f540:	ee24 7b07 	vmul.f64	d7, d4, d7
 800f544:	ee35 7b07 	vadd.f64	d7, d5, d7
 800f548:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800f54c:	443b      	add	r3, r7
 800f54e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f552:	ed83 7b00 	vstr	d7, [r3]
    t13_re);
  t74_re += t34_re;
 800f556:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800f55a:	443b      	add	r3, r7
 800f55c:	f241 22b8 	movw	r2, #4792	; 0x12b8
 800f560:	443a      	add	r2, r7
 800f562:	ed92 6b00 	vldr	d6, [r2]
 800f566:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800f56a:	443a      	add	r2, r7
 800f56c:	ed92 7b00 	vldr	d7, [r2]
 800f570:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f574:	ed83 7b00 	vstr	d7, [r3]
  t74_im += t34_im;
 800f578:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800f57c:	443b      	add	r3, r7
 800f57e:	f241 22b0 	movw	r2, #4784	; 0x12b0
 800f582:	443a      	add	r2, r7
 800f584:	ed92 6b00 	vldr	d6, [r2]
 800f588:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800f58c:	443a      	add	r2, r7
 800f58e:	ed92 7b00 	vldr	d7, [r2]
 800f592:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f596:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t240.re * 0.0 - t240.im * 3.061616997868383E-17) - (t241.re * 0.0 -
 800f59a:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800f59e:	ed93 7b00 	vldr	d7, [r3]
 800f5a2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800f780 <G_q+0xcdc8>
 800f5a6:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f5aa:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800f5ae:	ed93 7b02 	vldr	d7, [r3, #8]
 800f5b2:	ed9f 5b75 	vldr	d5, [pc, #468]	; 800f788 <G_q+0xcdd0>
 800f5b6:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f5ba:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f5be:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 800f5c2:	ed93 7b00 	vldr	d7, [r3]
 800f5c6:	ed9f 5b6e 	vldr	d5, [pc, #440]	; 800f780 <G_q+0xcdc8>
 800f5ca:	ee27 5b05 	vmul.f64	d5, d7, d5
    t241.im * 3.061616997868383E-17);
 800f5ce:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 800f5d2:	ed93 7b02 	vldr	d7, [r3, #8]
 800f5d6:	ed9f 4b6c 	vldr	d4, [pc, #432]	; 800f788 <G_q+0xcdd0>
 800f5da:	ee27 7b04 	vmul.f64	d7, d7, d4
  t13_re = (t240.re * 0.0 - t240.im * 3.061616997868383E-17) - (t241.re * 0.0 -
 800f5de:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f5e2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f5e6:	f241 3378 	movw	r3, #4984	; 0x1378
 800f5ea:	443b      	add	r3, r7
 800f5ec:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t240.re * 3.061616997868383E-17 + t240.im * 0.0) - (t241.re *
 800f5f0:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800f5f4:	ed93 7b00 	vldr	d7, [r3]
 800f5f8:	ed9f 6b63 	vldr	d6, [pc, #396]	; 800f788 <G_q+0xcdd0>
 800f5fc:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f600:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800f604:	ed93 7b02 	vldr	d7, [r3, #8]
 800f608:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 800f780 <G_q+0xcdc8>
 800f60c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f610:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f614:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 800f618:	ed93 7b00 	vldr	d7, [r3]
 800f61c:	ed9f 5b5a 	vldr	d5, [pc, #360]	; 800f788 <G_q+0xcdd0>
 800f620:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t241.im * 0.0);
 800f624:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 800f628:	ed93 7b02 	vldr	d7, [r3, #8]
 800f62c:	ed9f 4b54 	vldr	d4, [pc, #336]	; 800f780 <G_q+0xcdc8>
 800f630:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f634:	ee35 7b07 	vadd.f64	d7, d5, d7
  t13_im = (t240.re * 3.061616997868383E-17 + t240.im * 0.0) - (t241.re *
 800f638:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f63c:	f241 3370 	movw	r3, #4976	; 0x1370
 800f640:	443b      	add	r3, r7
 800f642:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t238.re * 0.0 - t238.im * 0.5) - (t239.re * 0.0 - t239.im * 0.5);
 800f646:	f241 0390 	movw	r3, #4240	; 0x1090
 800f64a:	443b      	add	r3, r7
 800f64c:	ed93 7b00 	vldr	d7, [r3]
 800f650:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 800f780 <G_q+0xcdc8>
 800f654:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f658:	f241 0390 	movw	r3, #4240	; 0x1090
 800f65c:	443b      	add	r3, r7
 800f65e:	ed93 7b02 	vldr	d7, [r3, #8]
 800f662:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f666:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f66a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f66e:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800f672:	ed93 7b00 	vldr	d7, [r3]
 800f676:	ed9f 5b42 	vldr	d5, [pc, #264]	; 800f780 <G_q+0xcdc8>
 800f67a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800f67e:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800f682:	ed93 7b02 	vldr	d7, [r3, #8]
 800f686:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800f68a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f68e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f692:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f696:	f241 3368 	movw	r3, #4968	; 0x1368
 800f69a:	443b      	add	r3, r7
 800f69c:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t238.re * 0.5 + t238.im * 0.0) - (t239.re * 0.5 + t239.im * 0.0);
 800f6a0:	f241 0390 	movw	r3, #4240	; 0x1090
 800f6a4:	443b      	add	r3, r7
 800f6a6:	ed93 7b00 	vldr	d7, [r3]
 800f6aa:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800f6ae:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f6b2:	f241 0390 	movw	r3, #4240	; 0x1090
 800f6b6:	443b      	add	r3, r7
 800f6b8:	ed93 7b02 	vldr	d7, [r3, #8]
 800f6bc:	ed9f 5b30 	vldr	d5, [pc, #192]	; 800f780 <G_q+0xcdc8>
 800f6c0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f6c4:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f6c8:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800f6cc:	ed93 7b00 	vldr	d7, [r3]
 800f6d0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f6d4:	ee27 5b05 	vmul.f64	d5, d7, d5
 800f6d8:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800f6dc:	ed93 7b02 	vldr	d7, [r3, #8]
 800f6e0:	ed9f 4b27 	vldr	d4, [pc, #156]	; 800f780 <G_q+0xcdc8>
 800f6e4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f6e8:	ee35 7b07 	vadd.f64	d7, d5, d7
 800f6ec:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f6f0:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800f6f4:	ed83 7b00 	vstr	d7, [r3]
  if (t236.im == 0.0) {
 800f6f8:	f241 0370 	movw	r3, #4208	; 0x1070
 800f6fc:	443b      	add	r3, r7
 800f6fe:	ed93 7b02 	vldr	d7, [r3, #8]
 800f702:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f70a:	d116      	bne.n	800f73a <G_q+0xcd82>
    t20_re = t236.re / 2.0;
 800f70c:	f241 0370 	movw	r3, #4208	; 0x1070
 800f710:	443b      	add	r3, r7
 800f712:	ed93 6b00 	vldr	d6, [r3]
 800f716:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f71a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f71e:	f241 3348 	movw	r3, #4936	; 0x1348
 800f722:	443b      	add	r3, r7
 800f724:	ed83 7b00 	vstr	d7, [r3]
    t20_im = 0.0;
 800f728:	f04f 0300 	mov.w	r3, #0
 800f72c:	f04f 0400 	mov.w	r4, #0
 800f730:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 800f734:	e9c2 3400 	strd	r3, r4, [r2]
 800f738:	e047      	b.n	800f7ca <G_q+0xce12>
  } else if (t236.re == 0.0) {
 800f73a:	f241 0370 	movw	r3, #4208	; 0x1070
 800f73e:	443b      	add	r3, r7
 800f740:	ed93 7b00 	vldr	d7, [r3]
 800f744:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f74c:	d122      	bne.n	800f794 <G_q+0xcddc>
    t20_re = 0.0;
 800f74e:	f04f 0300 	mov.w	r3, #0
 800f752:	f04f 0400 	mov.w	r4, #0
 800f756:	f241 3248 	movw	r2, #4936	; 0x1348
 800f75a:	443a      	add	r2, r7
 800f75c:	e9c2 3400 	strd	r3, r4, [r2]
    t20_im = t236.im / 2.0;
 800f760:	f241 0370 	movw	r3, #4208	; 0x1070
 800f764:	443b      	add	r3, r7
 800f766:	ed93 6b02 	vldr	d6, [r3, #8]
 800f76a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f76e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f772:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800f776:	ed83 7b00 	vstr	d7, [r3]
 800f77a:	e026      	b.n	800f7ca <G_q+0xce12>
 800f77c:	f3af 8000 	nop.w
	...
 800f788:	33145c07 	.word	0x33145c07
 800f78c:	3c81a626 	.word	0x3c81a626
 800f790:	ffffef10 	.word	0xffffef10
  } else {
    t20_re = t236.re / 2.0;
 800f794:	f241 0370 	movw	r3, #4208	; 0x1070
 800f798:	443b      	add	r3, r7
 800f79a:	ed93 6b00 	vldr	d6, [r3]
 800f79e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f7a2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f7a6:	f241 3348 	movw	r3, #4936	; 0x1348
 800f7aa:	443b      	add	r3, r7
 800f7ac:	ed83 7b00 	vstr	d7, [r3]
    t20_im = t236.im / 2.0;
 800f7b0:	f241 0370 	movw	r3, #4208	; 0x1070
 800f7b4:	443b      	add	r3, r7
 800f7b6:	ed93 6b02 	vldr	d6, [r3, #8]
 800f7ba:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f7be:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f7c2:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800f7c6:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t237.im == 0.0) {
 800f7ca:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800f7ce:	ed93 7b02 	vldr	d7, [r3, #8]
 800f7d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f7d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7da:	d116      	bne.n	800f80a <G_q+0xce52>
    t34_re = t237.re / 2.0;
 800f7dc:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800f7e0:	ed93 6b00 	vldr	d6, [r3]
 800f7e4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f7e8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f7ec:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800f7f0:	443b      	add	r3, r7
 800f7f2:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800f7f6:	f04f 0300 	mov.w	r3, #0
 800f7fa:	f04f 0400 	mov.w	r4, #0
 800f7fe:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800f802:	443a      	add	r2, r7
 800f804:	e9c2 3400 	strd	r3, r4, [r2]
 800f808:	e039      	b.n	800f87e <G_q+0xcec6>
  } else if (t237.re == 0.0) {
 800f80a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800f80e:	ed93 7b00 	vldr	d7, [r3]
 800f812:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f81a:	d116      	bne.n	800f84a <G_q+0xce92>
    t34_re = 0.0;
 800f81c:	f04f 0300 	mov.w	r3, #0
 800f820:	f04f 0400 	mov.w	r4, #0
 800f824:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800f828:	443a      	add	r2, r7
 800f82a:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t237.im / 2.0;
 800f82e:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800f832:	ed93 6b02 	vldr	d6, [r3, #8]
 800f836:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f83a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f83e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800f842:	443b      	add	r3, r7
 800f844:	ed83 7b00 	vstr	d7, [r3]
 800f848:	e019      	b.n	800f87e <G_q+0xcec6>
  } else {
    t34_re = t237.re / 2.0;
 800f84a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800f84e:	ed93 6b00 	vldr	d6, [r3]
 800f852:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f856:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f85a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800f85e:	443b      	add	r3, r7
 800f860:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t237.im / 2.0;
 800f864:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800f868:	ed93 6b02 	vldr	d6, [r3, #8]
 800f86c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f870:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f874:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800f878:	443b      	add	r3, r7
 800f87a:	ed83 7b00 	vstr	d7, [r3]
  }

  t23_re = t234.re * 3.061616997868383E-17 + t235.re * 3.061616997868383E-17;
 800f87e:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 800f882:	ed93 7b00 	vldr	d7, [r3]
 800f886:	ed9f 6be4 	vldr	d6, [pc, #912]	; 800fc18 <G_q+0xd260>
 800f88a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f88e:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 800f892:	ed93 7b00 	vldr	d7, [r3]
 800f896:	ed9f 5be0 	vldr	d5, [pc, #896]	; 800fc18 <G_q+0xd260>
 800f89a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f89e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f8a2:	f241 3330 	movw	r3, #4912	; 0x1330
 800f8a6:	443b      	add	r3, r7
 800f8a8:	ed83 7b00 	vstr	d7, [r3]
  t3_im = t234.im * 3.061616997868383E-17 + t235.im * 3.061616997868383E-17;
 800f8ac:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 800f8b0:	ed93 7b02 	vldr	d7, [r3, #8]
 800f8b4:	ed9f 6bd8 	vldr	d6, [pc, #864]	; 800fc18 <G_q+0xd260>
 800f8b8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f8bc:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 800f8c0:	ed93 7b02 	vldr	d7, [r3, #8]
 800f8c4:	ed9f 5bd4 	vldr	d5, [pc, #848]	; 800fc18 <G_q+0xd260>
 800f8c8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f8cc:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f8d0:	f241 3310 	movw	r3, #4880	; 0x1310
 800f8d4:	443b      	add	r3, r7
 800f8d6:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t20_re + t34_re) + 7.498798913309288E-33;
 800f8da:	f241 3348 	movw	r3, #4936	; 0x1348
 800f8de:	443b      	add	r3, r7
 800f8e0:	ed93 6b00 	vldr	d6, [r3]
 800f8e4:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800f8e8:	443b      	add	r3, r7
 800f8ea:	ed93 7b00 	vldr	d7, [r3]
 800f8ee:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f8f2:	ed9f 6bcb 	vldr	d6, [pc, #812]	; 800fc20 <G_q+0xd268>
 800f8f6:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f8fa:	f241 3348 	movw	r3, #4936	; 0x1348
 800f8fe:	443b      	add	r3, r7
 800f900:	ed83 7b00 	vstr	d7, [r3]
  t20_im += t34_im;
 800f904:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800f908:	ed93 6b00 	vldr	d6, [r3]
 800f90c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800f910:	443b      	add	r3, r7
 800f912:	ed93 7b00 	vldr	d7, [r3]
 800f916:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f91a:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800f91e:	ed83 7b00 	vstr	d7, [r3]
  t60_re = (t230.re * 0.0 - t230.im * 3.061616997868383E-17) - (t231.re * 0.0 -
 800f922:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800f926:	ed93 7b00 	vldr	d7, [r3]
 800f92a:	ed9f 6bbf 	vldr	d6, [pc, #764]	; 800fc28 <G_q+0xd270>
 800f92e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f932:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800f936:	ed93 7b02 	vldr	d7, [r3, #8]
 800f93a:	ed9f 5bb7 	vldr	d5, [pc, #732]	; 800fc18 <G_q+0xd260>
 800f93e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f942:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f946:	4bbc      	ldr	r3, [pc, #752]	; (800fc38 <G_q+0xd280>)
 800f948:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800f94c:	443a      	add	r2, r7
 800f94e:	4413      	add	r3, r2
 800f950:	ed93 7b00 	vldr	d7, [r3]
 800f954:	ed9f 5bb4 	vldr	d5, [pc, #720]	; 800fc28 <G_q+0xd270>
 800f958:	ee27 5b05 	vmul.f64	d5, d7, d5
    t231.im * 3.061616997868383E-17);
 800f95c:	4bb6      	ldr	r3, [pc, #728]	; (800fc38 <G_q+0xd280>)
 800f95e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800f962:	443a      	add	r2, r7
 800f964:	4413      	add	r3, r2
 800f966:	ed93 7b02 	vldr	d7, [r3, #8]
 800f96a:	ed9f 4bab 	vldr	d4, [pc, #684]	; 800fc18 <G_q+0xd260>
 800f96e:	ee27 7b04 	vmul.f64	d7, d7, d4
  t60_re = (t230.re * 0.0 - t230.im * 3.061616997868383E-17) - (t231.re * 0.0 -
 800f972:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f976:	f241 2350 	movw	r3, #4688	; 0x1250
 800f97a:	443b      	add	r3, r7
 800f97c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f980:	ed83 7b00 	vstr	d7, [r3]
  t76_re = (t230.re * 3.061616997868383E-17 + t230.im * 0.0) - (t231.re *
 800f984:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800f988:	ed93 7b00 	vldr	d7, [r3]
 800f98c:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 800fc18 <G_q+0xd260>
 800f990:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f994:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800f998:	ed93 7b02 	vldr	d7, [r3, #8]
 800f99c:	ed9f 5ba2 	vldr	d5, [pc, #648]	; 800fc28 <G_q+0xd270>
 800f9a0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f9a4:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f9a8:	4ba3      	ldr	r3, [pc, #652]	; (800fc38 <G_q+0xd280>)
 800f9aa:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800f9ae:	443a      	add	r2, r7
 800f9b0:	4413      	add	r3, r2
 800f9b2:	ed93 7b00 	vldr	d7, [r3]
 800f9b6:	ed9f 5b98 	vldr	d5, [pc, #608]	; 800fc18 <G_q+0xd260>
 800f9ba:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t231.im * 0.0);
 800f9be:	4b9e      	ldr	r3, [pc, #632]	; (800fc38 <G_q+0xd280>)
 800f9c0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800f9c4:	443a      	add	r2, r7
 800f9c6:	4413      	add	r3, r2
 800f9c8:	ed93 7b02 	vldr	d7, [r3, #8]
 800f9cc:	ed9f 4b96 	vldr	d4, [pc, #600]	; 800fc28 <G_q+0xd270>
 800f9d0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f9d4:	ee35 7b07 	vadd.f64	d7, d5, d7
  t76_re = (t230.re * 3.061616997868383E-17 + t230.im * 0.0) - (t231.re *
 800f9d8:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800f9dc:	443b      	add	r3, r7
 800f9de:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f9e2:	ed83 7b00 	vstr	d7, [r3]
  t72_re = (((t232.re * 6.123233995736766E-17 + t233.re * 6.123233995736766E-17)
 800f9e6:	f241 0350 	movw	r3, #4176	; 0x1050
 800f9ea:	443b      	add	r3, r7
 800f9ec:	ed93 7b00 	vldr	d7, [r3]
 800f9f0:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 800fc30 <G_q+0xd278>
 800f9f4:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f9f8:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800f9fc:	ed93 7b00 	vldr	d7, [r3]
 800fa00:	ed9f 5b8b 	vldr	d5, [pc, #556]	; 800fc30 <G_q+0xd278>
 800fa04:	ee27 7b05 	vmul.f64	d7, d7, d5
 800fa08:	ee36 6b07 	vadd.f64	d6, d6, d7
             + (t13_re * t16_re - t13_im * t16_im)) + (t23_re * t20_re - t3_im *
 800fa0c:	f241 3378 	movw	r3, #4984	; 0x1378
 800fa10:	443b      	add	r3, r7
 800fa12:	ed93 5b00 	vldr	d5, [r3]
 800fa16:	f241 3368 	movw	r3, #4968	; 0x1368
 800fa1a:	443b      	add	r3, r7
 800fa1c:	ed93 7b00 	vldr	d7, [r3]
 800fa20:	ee25 5b07 	vmul.f64	d5, d5, d7
 800fa24:	f241 3370 	movw	r3, #4976	; 0x1370
 800fa28:	443b      	add	r3, r7
 800fa2a:	ed93 4b00 	vldr	d4, [r3]
 800fa2e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800fa32:	ed93 7b00 	vldr	d7, [r3]
 800fa36:	ee24 7b07 	vmul.f64	d7, d4, d7
 800fa3a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800fa3e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800fa42:	f241 3330 	movw	r3, #4912	; 0x1330
 800fa46:	443b      	add	r3, r7
 800fa48:	ed93 5b00 	vldr	d5, [r3]
 800fa4c:	f241 3348 	movw	r3, #4936	; 0x1348
 800fa50:	443b      	add	r3, r7
 800fa52:	ed93 7b00 	vldr	d7, [r3]
 800fa56:	ee25 5b07 	vmul.f64	d5, d5, d7
 800fa5a:	f241 3310 	movw	r3, #4880	; 0x1310
 800fa5e:	443b      	add	r3, r7
 800fa60:	ed93 4b00 	vldr	d4, [r3]
 800fa64:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800fa68:	ed93 7b00 	vldr	d7, [r3]
 800fa6c:	ee24 7b07 	vmul.f64	d7, d4, d7
 800fa70:	ee35 7b47 	vsub.f64	d7, d5, d7
 800fa74:	ee36 7b07 	vadd.f64	d7, d6, d7
  t72_re = (((t232.re * 6.123233995736766E-17 + t233.re * 6.123233995736766E-17)
 800fa78:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800fa7c:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800fc30 <G_q+0xd278>
 800fa80:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fa84:	ed83 7b00 	vstr	d7, [r3]
             t20_im)) - 6.123233995736766E-17;
  t23_re = ((t232.im * 6.123233995736766E-17 + t233.im * 6.123233995736766E-17)
 800fa88:	f241 0350 	movw	r3, #4176	; 0x1050
 800fa8c:	443b      	add	r3, r7
 800fa8e:	ed93 7b02 	vldr	d7, [r3, #8]
 800fa92:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800fc30 <G_q+0xd278>
 800fa96:	ee27 6b06 	vmul.f64	d6, d7, d6
 800fa9a:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800fa9e:	ed93 7b02 	vldr	d7, [r3, #8]
 800faa2:	ed9f 5b63 	vldr	d5, [pc, #396]	; 800fc30 <G_q+0xd278>
 800faa6:	ee27 7b05 	vmul.f64	d7, d7, d5
 800faaa:	ee36 6b07 	vadd.f64	d6, d6, d7
            + (t13_re * t16_im + t13_im * t16_re)) + (t23_re * t20_im + t3_im *
 800faae:	f241 3378 	movw	r3, #4984	; 0x1378
 800fab2:	443b      	add	r3, r7
 800fab4:	ed93 5b00 	vldr	d5, [r3]
 800fab8:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800fabc:	ed93 7b00 	vldr	d7, [r3]
 800fac0:	ee25 5b07 	vmul.f64	d5, d5, d7
 800fac4:	f241 3370 	movw	r3, #4976	; 0x1370
 800fac8:	443b      	add	r3, r7
 800faca:	ed93 4b00 	vldr	d4, [r3]
 800face:	f241 3368 	movw	r3, #4968	; 0x1368
 800fad2:	443b      	add	r3, r7
 800fad4:	ed93 7b00 	vldr	d7, [r3]
 800fad8:	ee24 7b07 	vmul.f64	d7, d4, d7
 800fadc:	ee35 7b07 	vadd.f64	d7, d5, d7
 800fae0:	ee36 6b07 	vadd.f64	d6, d6, d7
 800fae4:	f241 3330 	movw	r3, #4912	; 0x1330
 800fae8:	443b      	add	r3, r7
 800faea:	ed93 5b00 	vldr	d5, [r3]
 800faee:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800faf2:	ed93 7b00 	vldr	d7, [r3]
 800faf6:	ee25 5b07 	vmul.f64	d5, d5, d7
 800fafa:	f241 3310 	movw	r3, #4880	; 0x1310
 800fafe:	443b      	add	r3, r7
 800fb00:	ed93 4b00 	vldr	d4, [r3]
 800fb04:	f241 3348 	movw	r3, #4936	; 0x1348
 800fb08:	443b      	add	r3, r7
 800fb0a:	ed93 7b00 	vldr	d7, [r3]
 800fb0e:	ee24 7b07 	vmul.f64	d7, d4, d7
 800fb12:	ee35 7b07 	vadd.f64	d7, d5, d7
  t23_re = ((t232.im * 6.123233995736766E-17 + t233.im * 6.123233995736766E-17)
 800fb16:	ee36 7b07 	vadd.f64	d7, d6, d7
 800fb1a:	f241 3330 	movw	r3, #4912	; 0x1330
 800fb1e:	443b      	add	r3, r7
 800fb20:	ed83 7b00 	vstr	d7, [r3]
    t20_re);
  if (t220.im == 0.0) {
 800fb24:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800fb28:	ed93 7b02 	vldr	d7, [r3, #8]
 800fb2c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fb30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb34:	d115      	bne.n	800fb62 <G_q+0xd1aa>
    t12_re = t220.re / 2.0;
 800fb36:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800fb3a:	ed93 6b00 	vldr	d6, [r3]
 800fb3e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fb42:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fb46:	f241 3388 	movw	r3, #5000	; 0x1388
 800fb4a:	443b      	add	r3, r7
 800fb4c:	ed83 7b00 	vstr	d7, [r3]
    t58_im = 0.0;
 800fb50:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800fb54:	f04f 0300 	mov.w	r3, #0
 800fb58:	f04f 0400 	mov.w	r4, #0
 800fb5c:	e9c2 3400 	strd	r3, r4, [r2]
 800fb60:	e037      	b.n	800fbd2 <G_q+0xd21a>
  } else if (t220.re == 0.0) {
 800fb62:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800fb66:	ed93 7b00 	vldr	d7, [r3]
 800fb6a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fb6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb72:	d115      	bne.n	800fba0 <G_q+0xd1e8>
    t12_re = 0.0;
 800fb74:	f04f 0300 	mov.w	r3, #0
 800fb78:	f04f 0400 	mov.w	r4, #0
 800fb7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800fb80:	443a      	add	r2, r7
 800fb82:	e9c2 3400 	strd	r3, r4, [r2]
    t58_im = t220.im / 2.0;
 800fb86:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800fb8a:	ed93 6b02 	vldr	d6, [r3, #8]
 800fb8e:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800fb92:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fb96:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fb9a:	ed83 7b00 	vstr	d7, [r3]
 800fb9e:	e018      	b.n	800fbd2 <G_q+0xd21a>
  } else {
    t12_re = t220.re / 2.0;
 800fba0:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800fba4:	ed93 6b00 	vldr	d6, [r3]
 800fba8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fbac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fbb0:	f241 3388 	movw	r3, #5000	; 0x1388
 800fbb4:	443b      	add	r3, r7
 800fbb6:	ed83 7b00 	vstr	d7, [r3]
    t58_im = t220.im / 2.0;
 800fbba:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800fbbe:	ed93 6b02 	vldr	d6, [r3, #8]
 800fbc2:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800fbc6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fbca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fbce:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t221.im == 0.0) {
 800fbd2:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800fbd6:	ed93 7b02 	vldr	d7, [r3, #8]
 800fbda:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fbde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbe2:	d12b      	bne.n	800fc3c <G_q+0xd284>
    t34_re = t221.re / 2.0;
 800fbe4:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800fbe8:	ed93 6b00 	vldr	d6, [r3]
 800fbec:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fbf0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fbf4:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800fbf8:	443b      	add	r3, r7
 800fbfa:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800fbfe:	f04f 0300 	mov.w	r3, #0
 800fc02:	f04f 0400 	mov.w	r4, #0
 800fc06:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800fc0a:	443a      	add	r2, r7
 800fc0c:	e9c2 3400 	strd	r3, r4, [r2]
 800fc10:	e04e      	b.n	800fcb0 <G_q+0xd2f8>
 800fc12:	bf00      	nop
 800fc14:	f3af 8000 	nop.w
 800fc18:	33145c07 	.word	0x33145c07
 800fc1c:	3c81a626 	.word	0x3c81a626
 800fc20:	858a5d48 	.word	0x858a5d48
 800fc24:	394377ce 	.word	0x394377ce
	...
 800fc30:	33145c07 	.word	0x33145c07
 800fc34:	3c91a626 	.word	0x3c91a626
 800fc38:	ffffef50 	.word	0xffffef50
  } else if (t221.re == 0.0) {
 800fc3c:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800fc40:	ed93 7b00 	vldr	d7, [r3]
 800fc44:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fc48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc4c:	d116      	bne.n	800fc7c <G_q+0xd2c4>
    t34_re = 0.0;
 800fc4e:	f04f 0300 	mov.w	r3, #0
 800fc52:	f04f 0400 	mov.w	r4, #0
 800fc56:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800fc5a:	443a      	add	r2, r7
 800fc5c:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t221.im / 2.0;
 800fc60:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800fc64:	ed93 6b02 	vldr	d6, [r3, #8]
 800fc68:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fc6c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fc70:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800fc74:	443b      	add	r3, r7
 800fc76:	ed83 7b00 	vstr	d7, [r3]
 800fc7a:	e019      	b.n	800fcb0 <G_q+0xd2f8>
  } else {
    t34_re = t221.re / 2.0;
 800fc7c:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800fc80:	ed93 6b00 	vldr	d6, [r3]
 800fc84:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fc88:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fc8c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800fc90:	443b      	add	r3, r7
 800fc92:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t221.im / 2.0;
 800fc96:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800fc9a:	ed93 6b02 	vldr	d6, [r3, #8]
 800fc9e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fca2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fca6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800fcaa:	443b      	add	r3, r7
 800fcac:	ed83 7b00 	vstr	d7, [r3]
  }

  t12_re += t34_re;
 800fcb0:	f241 3388 	movw	r3, #5000	; 0x1388
 800fcb4:	443b      	add	r3, r7
 800fcb6:	ed93 6b00 	vldr	d6, [r3]
 800fcba:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800fcbe:	443b      	add	r3, r7
 800fcc0:	ed93 7b00 	vldr	d7, [r3]
 800fcc4:	ee36 7b07 	vadd.f64	d7, d6, d7
 800fcc8:	f241 3388 	movw	r3, #5000	; 0x1388
 800fccc:	443b      	add	r3, r7
 800fcce:	ed83 7b00 	vstr	d7, [r3]
  t58_im += t34_im;
 800fcd2:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800fcd6:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800fcda:	ed92 6b00 	vldr	d6, [r2]
 800fcde:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800fce2:	443a      	add	r2, r7
 800fce4:	ed92 7b00 	vldr	d7, [r2]
 800fce8:	ee36 7b07 	vadd.f64	d7, d6, d7
 800fcec:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t222.re * 0.0 - t222.im * 0.5) - (t223.re * 0.0 - t223.im * 0.5);
 800fcf0:	f241 0310 	movw	r3, #4112	; 0x1010
 800fcf4:	443b      	add	r3, r7
 800fcf6:	ed93 7b00 	vldr	d7, [r3]
 800fcfa:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800fee0 <G_q+0xd528>
 800fcfe:	ee27 6b06 	vmul.f64	d6, d7, d6
 800fd02:	f241 0310 	movw	r3, #4112	; 0x1010
 800fd06:	443b      	add	r3, r7
 800fd08:	ed93 7b02 	vldr	d7, [r3, #8]
 800fd0c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800fd10:	ee27 7b05 	vmul.f64	d7, d7, d5
 800fd14:	ee36 6b47 	vsub.f64	d6, d6, d7
 800fd18:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800fd1c:	ed93 7b00 	vldr	d7, [r3]
 800fd20:	ed9f 5b6f 	vldr	d5, [pc, #444]	; 800fee0 <G_q+0xd528>
 800fd24:	ee27 5b05 	vmul.f64	d5, d7, d5
 800fd28:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800fd2c:	ed93 7b02 	vldr	d7, [r3, #8]
 800fd30:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800fd34:	ee27 7b04 	vmul.f64	d7, d7, d4
 800fd38:	ee35 7b47 	vsub.f64	d7, d5, d7
 800fd3c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800fd40:	f241 3378 	movw	r3, #4984	; 0x1378
 800fd44:	443b      	add	r3, r7
 800fd46:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t222.re * 0.5 + t222.im * 0.0) - (t223.re * 0.5 + t223.im * 0.0);
 800fd4a:	f241 0310 	movw	r3, #4112	; 0x1010
 800fd4e:	443b      	add	r3, r7
 800fd50:	ed93 7b00 	vldr	d7, [r3]
 800fd54:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800fd58:	ee27 6b06 	vmul.f64	d6, d7, d6
 800fd5c:	f241 0310 	movw	r3, #4112	; 0x1010
 800fd60:	443b      	add	r3, r7
 800fd62:	ed93 7b02 	vldr	d7, [r3, #8]
 800fd66:	ed9f 5b5e 	vldr	d5, [pc, #376]	; 800fee0 <G_q+0xd528>
 800fd6a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800fd6e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800fd72:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800fd76:	ed93 7b00 	vldr	d7, [r3]
 800fd7a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800fd7e:	ee27 5b05 	vmul.f64	d5, d7, d5
 800fd82:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800fd86:	ed93 7b02 	vldr	d7, [r3, #8]
 800fd8a:	ed9f 4b55 	vldr	d4, [pc, #340]	; 800fee0 <G_q+0xd528>
 800fd8e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800fd92:	ee35 7b07 	vadd.f64	d7, d5, d7
 800fd96:	ee36 7b47 	vsub.f64	d7, d6, d7
 800fd9a:	f241 3370 	movw	r3, #4976	; 0x1370
 800fd9e:	443b      	add	r3, r7
 800fda0:	ed83 7b00 	vstr	d7, [r3]
  if (t226.im == 0.0) {
 800fda4:	f241 0330 	movw	r3, #4144	; 0x1030
 800fda8:	443b      	add	r3, r7
 800fdaa:	ed93 7b02 	vldr	d7, [r3, #8]
 800fdae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fdb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdb6:	d116      	bne.n	800fde6 <G_q+0xd42e>
    t16_re = t226.re / 2.0;
 800fdb8:	f241 0330 	movw	r3, #4144	; 0x1030
 800fdbc:	443b      	add	r3, r7
 800fdbe:	ed93 6b00 	vldr	d6, [r3]
 800fdc2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fdc6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fdca:	f241 3368 	movw	r3, #4968	; 0x1368
 800fdce:	443b      	add	r3, r7
 800fdd0:	ed83 7b00 	vstr	d7, [r3]
    t16_im = 0.0;
 800fdd4:	f04f 0300 	mov.w	r3, #0
 800fdd8:	f04f 0400 	mov.w	r4, #0
 800fddc:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800fde0:	e9c2 3400 	strd	r3, r4, [r2]
 800fde4:	e03b      	b.n	800fe5e <G_q+0xd4a6>
  } else if (t226.re == 0.0) {
 800fde6:	f241 0330 	movw	r3, #4144	; 0x1030
 800fdea:	443b      	add	r3, r7
 800fdec:	ed93 7b00 	vldr	d7, [r3]
 800fdf0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fdf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdf8:	d116      	bne.n	800fe28 <G_q+0xd470>
    t16_re = 0.0;
 800fdfa:	f04f 0300 	mov.w	r3, #0
 800fdfe:	f04f 0400 	mov.w	r4, #0
 800fe02:	f241 3268 	movw	r2, #4968	; 0x1368
 800fe06:	443a      	add	r2, r7
 800fe08:	e9c2 3400 	strd	r3, r4, [r2]
    t16_im = t226.im / 2.0;
 800fe0c:	f241 0330 	movw	r3, #4144	; 0x1030
 800fe10:	443b      	add	r3, r7
 800fe12:	ed93 6b02 	vldr	d6, [r3, #8]
 800fe16:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fe1a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fe1e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800fe22:	ed83 7b00 	vstr	d7, [r3]
 800fe26:	e01a      	b.n	800fe5e <G_q+0xd4a6>
  } else {
    t16_re = t226.re / 2.0;
 800fe28:	f241 0330 	movw	r3, #4144	; 0x1030
 800fe2c:	443b      	add	r3, r7
 800fe2e:	ed93 6b00 	vldr	d6, [r3]
 800fe32:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fe36:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fe3a:	f241 3368 	movw	r3, #4968	; 0x1368
 800fe3e:	443b      	add	r3, r7
 800fe40:	ed83 7b00 	vstr	d7, [r3]
    t16_im = t226.im / 2.0;
 800fe44:	f241 0330 	movw	r3, #4144	; 0x1030
 800fe48:	443b      	add	r3, r7
 800fe4a:	ed93 6b02 	vldr	d6, [r3, #8]
 800fe4e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fe52:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fe56:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800fe5a:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t227.im == 0.0) {
 800fe5e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800fe62:	ed93 7b02 	vldr	d7, [r3, #8]
 800fe66:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fe6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe6e:	d116      	bne.n	800fe9e <G_q+0xd4e6>
    t34_re = t227.re / 2.0;
 800fe70:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800fe74:	ed93 6b00 	vldr	d6, [r3]
 800fe78:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fe7c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fe80:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800fe84:	443b      	add	r3, r7
 800fe86:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800fe8a:	f04f 0300 	mov.w	r3, #0
 800fe8e:	f04f 0400 	mov.w	r4, #0
 800fe92:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800fe96:	443a      	add	r2, r7
 800fe98:	e9c2 3400 	strd	r3, r4, [r2]
 800fe9c:	e03e      	b.n	800ff1c <G_q+0xd564>
  } else if (t227.re == 0.0) {
 800fe9e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800fea2:	ed93 7b00 	vldr	d7, [r3]
 800fea6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800feaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feae:	d11b      	bne.n	800fee8 <G_q+0xd530>
    t34_re = 0.0;
 800feb0:	f04f 0300 	mov.w	r3, #0
 800feb4:	f04f 0400 	mov.w	r4, #0
 800feb8:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800febc:	443a      	add	r2, r7
 800febe:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t227.im / 2.0;
 800fec2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800fec6:	ed93 6b02 	vldr	d6, [r3, #8]
 800feca:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fece:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fed2:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800fed6:	443b      	add	r3, r7
 800fed8:	ed83 7b00 	vstr	d7, [r3]
 800fedc:	e01e      	b.n	800ff1c <G_q+0xd564>
 800fede:	bf00      	nop
	...
  } else {
    t34_re = t227.re / 2.0;
 800fee8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800feec:	ed93 6b00 	vldr	d6, [r3]
 800fef0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fef4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fef8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800fefc:	443b      	add	r3, r7
 800fefe:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t227.im / 2.0;
 800ff02:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ff06:	ed93 6b02 	vldr	d6, [r3, #8]
 800ff0a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ff0e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ff12:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800ff16:	443b      	add	r3, r7
 800ff18:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_re = (t224.re * 0.0 - t224.im * 0.5) - (t225.re * 0.0 - t225.im * 0.5);
 800ff1c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800ff20:	ed93 7b00 	vldr	d7, [r3]
 800ff24:	ed9f 6bde 	vldr	d6, [pc, #888]	; 80102a0 <G_q+0xd8e8>
 800ff28:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ff2c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800ff30:	ed93 7b02 	vldr	d7, [r3, #8]
 800ff34:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ff38:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ff3c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ff40:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 800ff44:	ed93 7b00 	vldr	d7, [r3]
 800ff48:	ed9f 5bd5 	vldr	d5, [pc, #852]	; 80102a0 <G_q+0xd8e8>
 800ff4c:	ee27 5b05 	vmul.f64	d5, d7, d5
 800ff50:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 800ff54:	ed93 7b02 	vldr	d7, [r3, #8]
 800ff58:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800ff5c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ff60:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ff64:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ff68:	f241 3348 	movw	r3, #4936	; 0x1348
 800ff6c:	443b      	add	r3, r7
 800ff6e:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t224.re * 0.5 + t224.im * 0.0) - (t225.re * 0.5 + t225.im * 0.0);
 800ff72:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800ff76:	ed93 7b00 	vldr	d7, [r3]
 800ff7a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800ff7e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ff82:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800ff86:	ed93 7b02 	vldr	d7, [r3, #8]
 800ff8a:	ed9f 5bc5 	vldr	d5, [pc, #788]	; 80102a0 <G_q+0xd8e8>
 800ff8e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ff92:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ff96:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 800ff9a:	ed93 7b00 	vldr	d7, [r3]
 800ff9e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ffa2:	ee27 5b05 	vmul.f64	d5, d7, d5
 800ffa6:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 800ffaa:	ed93 7b02 	vldr	d7, [r3, #8]
 800ffae:	ed9f 4bbc 	vldr	d4, [pc, #752]	; 80102a0 <G_q+0xd8e8>
 800ffb2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ffb6:	ee35 7b07 	vadd.f64	d7, d5, d7
 800ffba:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ffbe:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800ffc2:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t16_re + t34_re) + 7.498798913309288E-33;
 800ffc6:	f241 3368 	movw	r3, #4968	; 0x1368
 800ffca:	443b      	add	r3, r7
 800ffcc:	ed93 6b00 	vldr	d6, [r3]
 800ffd0:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800ffd4:	443b      	add	r3, r7
 800ffd6:	ed93 7b00 	vldr	d7, [r3]
 800ffda:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ffde:	ed9f 6bb2 	vldr	d6, [pc, #712]	; 80102a8 <G_q+0xd8f0>
 800ffe2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ffe6:	f241 3368 	movw	r3, #4968	; 0x1368
 800ffea:	443b      	add	r3, r7
 800ffec:	ed83 7b00 	vstr	d7, [r3]
  t16_im += t34_im;
 800fff0:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800fff4:	ed93 6b00 	vldr	d6, [r3]
 800fff8:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800fffc:	443b      	add	r3, r7
 800fffe:	ed93 7b00 	vldr	d7, [r3]
 8010002:	ee36 7b07 	vadd.f64	d7, d6, d7
 8010006:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 801000a:	ed83 7b00 	vstr	d7, [r3]
  t12_im = t228.re * 3.061616997868383E-17 + t229.re * 3.061616997868383E-17;
 801000e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8010012:	ed93 7b00 	vldr	d7, [r3]
 8010016:	ed9f 6ba6 	vldr	d6, [pc, #664]	; 80102b0 <G_q+0xd8f8>
 801001a:	ee27 6b06 	vmul.f64	d6, d7, d6
 801001e:	4ba6      	ldr	r3, [pc, #664]	; (80102b8 <G_q+0xd900>)
 8010020:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010024:	443a      	add	r2, r7
 8010026:	4413      	add	r3, r2
 8010028:	ed93 7b00 	vldr	d7, [r3]
 801002c:	ed9f 5ba0 	vldr	d5, [pc, #640]	; 80102b0 <G_q+0xd8f8>
 8010030:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010034:	ee36 7b07 	vadd.f64	d7, d6, d7
 8010038:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 801003c:	ed83 7b00 	vstr	d7, [r3]
  b_t10_re = t228.im * 3.061616997868383E-17 + t229.im * 3.061616997868383E-17;
 8010040:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8010044:	ed93 7b02 	vldr	d7, [r3, #8]
 8010048:	ed9f 6b99 	vldr	d6, [pc, #612]	; 80102b0 <G_q+0xd8f8>
 801004c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010050:	4b99      	ldr	r3, [pc, #612]	; (80102b8 <G_q+0xd900>)
 8010052:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010056:	443a      	add	r2, r7
 8010058:	4413      	add	r3, r2
 801005a:	ed93 7b02 	vldr	d7, [r3, #8]
 801005e:	ed9f 5b94 	vldr	d5, [pc, #592]	; 80102b0 <G_q+0xd8f8>
 8010062:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010066:	ee36 7b07 	vadd.f64	d7, d6, d7
 801006a:	f241 3338 	movw	r3, #4920	; 0x1338
 801006e:	443b      	add	r3, r7
 8010070:	ed83 7b00 	vstr	d7, [r3]
  t85_im = (t12_re * t13_re - t58_im * t13_im) - (t20_re * t16_re - t20_im *
 8010074:	f241 3388 	movw	r3, #5000	; 0x1388
 8010078:	443b      	add	r3, r7
 801007a:	ed93 6b00 	vldr	d6, [r3]
 801007e:	f241 3378 	movw	r3, #4984	; 0x1378
 8010082:	443b      	add	r3, r7
 8010084:	ed93 7b00 	vldr	d7, [r3]
 8010088:	ee26 6b07 	vmul.f64	d6, d6, d7
 801008c:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8010090:	ed93 5b00 	vldr	d5, [r3]
 8010094:	f241 3370 	movw	r3, #4976	; 0x1370
 8010098:	443b      	add	r3, r7
 801009a:	ed93 7b00 	vldr	d7, [r3]
 801009e:	ee25 7b07 	vmul.f64	d7, d5, d7
 80100a2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80100a6:	f241 3348 	movw	r3, #4936	; 0x1348
 80100aa:	443b      	add	r3, r7
 80100ac:	ed93 5b00 	vldr	d5, [r3]
 80100b0:	f241 3368 	movw	r3, #4968	; 0x1368
 80100b4:	443b      	add	r3, r7
 80100b6:	ed93 7b00 	vldr	d7, [r3]
 80100ba:	ee25 5b07 	vmul.f64	d5, d5, d7
 80100be:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80100c2:	ed93 4b00 	vldr	d4, [r3]
 80100c6:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80100ca:	ed93 7b00 	vldr	d7, [r3]
 80100ce:	ee24 7b07 	vmul.f64	d7, d4, d7
 80100d2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80100d6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80100da:	f241 3318 	movw	r3, #4888	; 0x1318
 80100de:	443b      	add	r3, r7
 80100e0:	ed83 7b00 	vstr	d7, [r3]
    t16_im);
  t58_im = (t12_re * t13_im + t58_im * t13_re) - (t20_re * t16_im + t20_im *
 80100e4:	f241 3388 	movw	r3, #5000	; 0x1388
 80100e8:	443b      	add	r3, r7
 80100ea:	ed93 6b00 	vldr	d6, [r3]
 80100ee:	f241 3370 	movw	r3, #4976	; 0x1370
 80100f2:	443b      	add	r3, r7
 80100f4:	ed93 7b00 	vldr	d7, [r3]
 80100f8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80100fc:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8010100:	ed93 5b00 	vldr	d5, [r3]
 8010104:	f241 3378 	movw	r3, #4984	; 0x1378
 8010108:	443b      	add	r3, r7
 801010a:	ed93 7b00 	vldr	d7, [r3]
 801010e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8010112:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010116:	f241 3348 	movw	r3, #4936	; 0x1348
 801011a:	443b      	add	r3, r7
 801011c:	ed93 5b00 	vldr	d5, [r3]
 8010120:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8010124:	ed93 7b00 	vldr	d7, [r3]
 8010128:	ee25 5b07 	vmul.f64	d5, d5, d7
 801012c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8010130:	ed93 4b00 	vldr	d4, [r3]
 8010134:	f241 3368 	movw	r3, #4968	; 0x1368
 8010138:	443b      	add	r3, r7
 801013a:	ed93 7b00 	vldr	d7, [r3]
 801013e:	ee24 7b07 	vmul.f64	d7, d4, d7
 8010142:	ee35 7b07 	vadd.f64	d7, d5, d7
 8010146:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 801014a:	ee36 7b47 	vsub.f64	d7, d6, d7
 801014e:	ed83 7b00 	vstr	d7, [r3]
    t16_re);
  if (t218.im == 0.0) {
 8010152:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010156:	ed93 7b02 	vldr	d7, [r3, #8]
 801015a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801015e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010162:	d116      	bne.n	8010192 <G_q+0xd7da>
    t34_re = t218.re / 2.0;
 8010164:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010168:	ed93 6b00 	vldr	d6, [r3]
 801016c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010170:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010174:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8010178:	443b      	add	r3, r7
 801017a:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 801017e:	f04f 0300 	mov.w	r3, #0
 8010182:	f04f 0400 	mov.w	r4, #0
 8010186:	f241 32b0 	movw	r2, #5040	; 0x13b0
 801018a:	443a      	add	r2, r7
 801018c:	e9c2 3400 	strd	r3, r4, [r2]
 8010190:	e039      	b.n	8010206 <G_q+0xd84e>
  } else if (t218.re == 0.0) {
 8010192:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010196:	ed93 7b00 	vldr	d7, [r3]
 801019a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801019e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101a2:	d116      	bne.n	80101d2 <G_q+0xd81a>
    t34_re = 0.0;
 80101a4:	f04f 0300 	mov.w	r3, #0
 80101a8:	f04f 0400 	mov.w	r4, #0
 80101ac:	f241 32b8 	movw	r2, #5048	; 0x13b8
 80101b0:	443a      	add	r2, r7
 80101b2:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t218.im / 2.0;
 80101b6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80101ba:	ed93 6b02 	vldr	d6, [r3, #8]
 80101be:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80101c2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80101c6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80101ca:	443b      	add	r3, r7
 80101cc:	ed83 7b00 	vstr	d7, [r3]
 80101d0:	e019      	b.n	8010206 <G_q+0xd84e>
  } else {
    t34_re = t218.re / 2.0;
 80101d2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80101d6:	ed93 6b00 	vldr	d6, [r3]
 80101da:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80101de:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80101e2:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80101e6:	443b      	add	r3, r7
 80101e8:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t218.im / 2.0;
 80101ec:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80101f0:	ed93 6b02 	vldr	d6, [r3, #8]
 80101f4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80101f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80101fc:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8010200:	443b      	add	r3, r7
 8010202:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t219.im == 0.0) {
 8010206:	4b2d      	ldr	r3, [pc, #180]	; (80102bc <G_q+0xd904>)
 8010208:	f241 32d0 	movw	r2, #5072	; 0x13d0
 801020c:	443a      	add	r2, r7
 801020e:	4413      	add	r3, r2
 8010210:	ed93 7b02 	vldr	d7, [r3, #8]
 8010214:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801021c:	d119      	bne.n	8010252 <G_q+0xd89a>
    t13_re = t219.re / 2.0;
 801021e:	4b27      	ldr	r3, [pc, #156]	; (80102bc <G_q+0xd904>)
 8010220:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010224:	443a      	add	r2, r7
 8010226:	4413      	add	r3, r2
 8010228:	ed93 6b00 	vldr	d6, [r3]
 801022c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010230:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010234:	f241 3378 	movw	r3, #4984	; 0x1378
 8010238:	443b      	add	r3, r7
 801023a:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 801023e:	f04f 0300 	mov.w	r3, #0
 8010242:	f04f 0400 	mov.w	r4, #0
 8010246:	f241 3270 	movw	r2, #4976	; 0x1370
 801024a:	443a      	add	r2, r7
 801024c:	e9c2 3400 	strd	r3, r4, [r2]
 8010250:	e056      	b.n	8010300 <G_q+0xd948>
  } else if (t219.re == 0.0) {
 8010252:	4b1a      	ldr	r3, [pc, #104]	; (80102bc <G_q+0xd904>)
 8010254:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010258:	443a      	add	r2, r7
 801025a:	4413      	add	r3, r2
 801025c:	ed93 7b00 	vldr	d7, [r3]
 8010260:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010268:	d12a      	bne.n	80102c0 <G_q+0xd908>
    t13_re = 0.0;
 801026a:	f04f 0300 	mov.w	r3, #0
 801026e:	f04f 0400 	mov.w	r4, #0
 8010272:	f241 3278 	movw	r2, #4984	; 0x1378
 8010276:	443a      	add	r2, r7
 8010278:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t219.im / 2.0;
 801027c:	4b0f      	ldr	r3, [pc, #60]	; (80102bc <G_q+0xd904>)
 801027e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010282:	443a      	add	r2, r7
 8010284:	4413      	add	r3, r2
 8010286:	ed93 6b02 	vldr	d6, [r3, #8]
 801028a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801028e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010292:	f241 3370 	movw	r3, #4976	; 0x1370
 8010296:	443b      	add	r3, r7
 8010298:	ed83 7b00 	vstr	d7, [r3]
 801029c:	e030      	b.n	8010300 <G_q+0xd948>
 801029e:	bf00      	nop
	...
 80102a8:	858a5d48 	.word	0x858a5d48
 80102ac:	394377ce 	.word	0x394377ce
 80102b0:	33145c07 	.word	0x33145c07
 80102b4:	3c81a626 	.word	0x3c81a626
 80102b8:	ffffef30 	.word	0xffffef30
 80102bc:	ffffecf0 	.word	0xffffecf0
  } else {
    t13_re = t219.re / 2.0;
 80102c0:	4be1      	ldr	r3, [pc, #900]	; (8010648 <G_q+0xdc90>)
 80102c2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80102c6:	443a      	add	r2, r7
 80102c8:	4413      	add	r3, r2
 80102ca:	ed93 6b00 	vldr	d6, [r3]
 80102ce:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80102d2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80102d6:	f241 3378 	movw	r3, #4984	; 0x1378
 80102da:	443b      	add	r3, r7
 80102dc:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t219.im / 2.0;
 80102e0:	4bd9      	ldr	r3, [pc, #868]	; (8010648 <G_q+0xdc90>)
 80102e2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80102e6:	443a      	add	r2, r7
 80102e8:	4413      	add	r3, r2
 80102ea:	ed93 6b02 	vldr	d6, [r3, #8]
 80102ee:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80102f2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80102f6:	f241 3370 	movw	r3, #4976	; 0x1370
 80102fa:	443b      	add	r3, r7
 80102fc:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re = (t60_re * t72_re - t76_re * t23_re) - (t12_im * t85_im - b_t10_re *
 8010300:	f241 2250 	movw	r2, #4688	; 0x1250
 8010304:	443a      	add	r2, r7
 8010306:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 801030a:	ed92 6b00 	vldr	d6, [r2]
 801030e:	ed93 7b00 	vldr	d7, [r3]
 8010312:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010316:	f241 23a8 	movw	r3, #4776	; 0x12a8
 801031a:	443b      	add	r3, r7
 801031c:	ed93 5b00 	vldr	d5, [r3]
 8010320:	f241 3330 	movw	r3, #4912	; 0x1330
 8010324:	443b      	add	r3, r7
 8010326:	ed93 7b00 	vldr	d7, [r3]
 801032a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801032e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010332:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8010336:	ed93 5b00 	vldr	d5, [r3]
 801033a:	f241 3318 	movw	r3, #4888	; 0x1318
 801033e:	443b      	add	r3, r7
 8010340:	ed93 7b00 	vldr	d7, [r3]
 8010344:	ee25 5b07 	vmul.f64	d5, d5, d7
 8010348:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 801034c:	f241 3238 	movw	r2, #4920	; 0x1338
 8010350:	443a      	add	r2, r7
 8010352:	ed92 4b00 	vldr	d4, [r2]
 8010356:	ed93 7b00 	vldr	d7, [r3]
 801035a:	ee24 7b07 	vmul.f64	d7, d4, d7
 801035e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010362:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010366:	f241 3368 	movw	r3, #4968	; 0x1368
 801036a:	443b      	add	r3, r7
 801036c:	ed83 7b00 	vstr	d7, [r3]
    t58_im);
  t76_re = (t60_re * t23_re + t76_re * t72_re) - (t12_im * t58_im + b_t10_re *
 8010370:	f241 2350 	movw	r3, #4688	; 0x1250
 8010374:	443b      	add	r3, r7
 8010376:	ed93 6b00 	vldr	d6, [r3]
 801037a:	f241 3330 	movw	r3, #4912	; 0x1330
 801037e:	443b      	add	r3, r7
 8010380:	ed93 7b00 	vldr	d7, [r3]
 8010384:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010388:	f241 22a8 	movw	r2, #4776	; 0x12a8
 801038c:	443a      	add	r2, r7
 801038e:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8010392:	ed92 5b00 	vldr	d5, [r2]
 8010396:	ed93 7b00 	vldr	d7, [r3]
 801039a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801039e:	ee36 6b07 	vadd.f64	d6, d6, d7
 80103a2:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 80103a6:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80103aa:	ed92 5b00 	vldr	d5, [r2]
 80103ae:	ed93 7b00 	vldr	d7, [r3]
 80103b2:	ee25 5b07 	vmul.f64	d5, d5, d7
 80103b6:	f241 3338 	movw	r3, #4920	; 0x1338
 80103ba:	443b      	add	r3, r7
 80103bc:	ed93 4b00 	vldr	d4, [r3]
 80103c0:	f241 3318 	movw	r3, #4888	; 0x1318
 80103c4:	443b      	add	r3, r7
 80103c6:	ed93 7b00 	vldr	d7, [r3]
 80103ca:	ee24 7b07 	vmul.f64	d7, d4, d7
 80103ce:	ee35 7b07 	vadd.f64	d7, d5, d7
 80103d2:	f241 23a8 	movw	r3, #4776	; 0x12a8
 80103d6:	443b      	add	r3, r7
 80103d8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80103dc:	ed83 7b00 	vstr	d7, [r3]
    t85_im);
  t34_re += t13_re;
 80103e0:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80103e4:	443b      	add	r3, r7
 80103e6:	ed93 6b00 	vldr	d6, [r3]
 80103ea:	f241 3378 	movw	r3, #4984	; 0x1378
 80103ee:	443b      	add	r3, r7
 80103f0:	ed93 7b00 	vldr	d7, [r3]
 80103f4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80103f8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80103fc:	443b      	add	r3, r7
 80103fe:	ed83 7b00 	vstr	d7, [r3]
  t34_im += t13_im;
 8010402:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8010406:	443b      	add	r3, r7
 8010408:	ed93 6b00 	vldr	d6, [r3]
 801040c:	f241 3370 	movw	r3, #4976	; 0x1370
 8010410:	443b      	add	r3, r7
 8010412:	ed93 7b00 	vldr	d7, [r3]
 8010416:	ee36 7b07 	vadd.f64	d7, d6, d7
 801041a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 801041e:	443b      	add	r3, r7
 8010420:	ed83 7b00 	vstr	d7, [r3]
  b_G_q[3].re = -g * ((((b_t54_im * t41_re - t43_re * t41_im) * 0.0215 - (t70_im
 8010424:	4b89      	ldr	r3, [pc, #548]	; (801064c <G_q+0xdc94>)
 8010426:	f241 32d0 	movw	r2, #5072	; 0x13d0
 801042a:	443a      	add	r2, r7
 801042c:	4413      	add	r3, r2
 801042e:	ed93 7b00 	vldr	d7, [r3]
 8010432:	eeb1 6b47 	vneg.f64	d6, d7
 8010436:	f241 23e8 	movw	r3, #4840	; 0x12e8
 801043a:	443b      	add	r3, r7
 801043c:	ed93 5b00 	vldr	d5, [r3]
 8010440:	f241 3308 	movw	r3, #4872	; 0x1308
 8010444:	443b      	add	r3, r7
 8010446:	ed93 7b00 	vldr	d7, [r3]
 801044a:	ee25 5b07 	vmul.f64	d5, d5, d7
 801044e:	f241 2358 	movw	r3, #4696	; 0x1258
 8010452:	443b      	add	r3, r7
 8010454:	ed93 4b00 	vldr	d4, [r3]
 8010458:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 801045c:	ed93 7b00 	vldr	d7, [r3]
 8010460:	ee24 7b07 	vmul.f64	d7, d4, d7
 8010464:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010468:	ed9f 5b73 	vldr	d5, [pc, #460]	; 8010638 <G_q+0xdc80>
 801046c:	ee27 5b05 	vmul.f64	d5, d7, d5
    * b_t54_re - t43_im * t55_im) * 1.3164953090834051E-18) + (t55_re * t74_re -
 8010470:	f241 23c8 	movw	r3, #4808	; 0x12c8
 8010474:	443b      	add	r3, r7
 8010476:	ed93 4b00 	vldr	d4, [r3]
 801047a:	f241 23f0 	movw	r3, #4848	; 0x12f0
 801047e:	443b      	add	r3, r7
 8010480:	ed93 7b00 	vldr	d7, [r3]
 8010484:	ee24 4b07 	vmul.f64	d4, d4, d7
 8010488:	f241 23f8 	movw	r3, #4856	; 0x12f8
 801048c:	443b      	add	r3, r7
 801048e:	ed93 3b00 	vldr	d3, [r3]
 8010492:	f241 23d8 	movw	r3, #4824	; 0x12d8
 8010496:	443b      	add	r3, r7
 8010498:	ed93 7b00 	vldr	d7, [r3]
 801049c:	ee23 7b07 	vmul.f64	d7, d3, d7
 80104a0:	ee34 7b47 	vsub.f64	d7, d4, d7
 80104a4:	ed9f 4b66 	vldr	d4, [pc, #408]	; 8010640 <G_q+0xdc88>
 80104a8:	ee27 7b04 	vmul.f64	d7, d7, d4
  b_G_q[3].re = -g * ((((b_t54_im * t41_re - t43_re * t41_im) * 0.0215 - (t70_im
 80104ac:	ee35 5b47 	vsub.f64	d5, d5, d7
    * b_t54_re - t43_im * t55_im) * 1.3164953090834051E-18) + (t55_re * t74_re -
 80104b0:	f241 23b8 	movw	r3, #4792	; 0x12b8
 80104b4:	443b      	add	r3, r7
 80104b6:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 80104ba:	ed92 4b00 	vldr	d4, [r2]
 80104be:	ed93 7b00 	vldr	d7, [r3]
 80104c2:	ee24 4b07 	vmul.f64	d4, d4, d7
    t70_re * t74_im) * 1.3164953090834051E-18) + (t16_re * t34_re - t76_re *
 80104c6:	f241 22d0 	movw	r2, #4816	; 0x12d0
 80104ca:	443a      	add	r2, r7
 80104cc:	f241 23b0 	movw	r3, #4784	; 0x12b0
 80104d0:	443b      	add	r3, r7
 80104d2:	ed92 3b00 	vldr	d3, [r2]
 80104d6:	ed93 7b00 	vldr	d7, [r3]
 80104da:	ee23 7b07 	vmul.f64	d7, d3, d7
    * b_t54_re - t43_im * t55_im) * 1.3164953090834051E-18) + (t55_re * t74_re -
 80104de:	ee34 7b47 	vsub.f64	d7, d4, d7
    t70_re * t74_im) * 1.3164953090834051E-18) + (t16_re * t34_re - t76_re *
 80104e2:	ed9f 4b57 	vldr	d4, [pc, #348]	; 8010640 <G_q+0xdc88>
 80104e6:	ee27 7b04 	vmul.f64	d7, d7, d4
    * b_t54_re - t43_im * t55_im) * 1.3164953090834051E-18) + (t55_re * t74_re -
 80104ea:	ee35 5b07 	vadd.f64	d5, d5, d7
    t70_re * t74_im) * 1.3164953090834051E-18) + (t16_re * t34_re - t76_re *
 80104ee:	f241 3368 	movw	r3, #4968	; 0x1368
 80104f2:	443b      	add	r3, r7
 80104f4:	ed93 4b00 	vldr	d4, [r3]
 80104f8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80104fc:	443b      	add	r3, r7
 80104fe:	ed93 7b00 	vldr	d7, [r3]
 8010502:	ee24 4b07 	vmul.f64	d4, d4, d7
 8010506:	f241 23a8 	movw	r3, #4776	; 0x12a8
 801050a:	443b      	add	r3, r7
 801050c:	ed93 3b00 	vldr	d3, [r3]
 8010510:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8010514:	443b      	add	r3, r7
 8010516:	ed93 7b00 	vldr	d7, [r3]
 801051a:	ee23 7b07 	vmul.f64	d7, d3, d7
 801051e:	ee34 7b47 	vsub.f64	d7, d4, d7
    t34_im) * 0.0215);
 8010522:	ed9f 4b45 	vldr	d4, [pc, #276]	; 8010638 <G_q+0xdc80>
 8010526:	ee27 7b04 	vmul.f64	d7, d7, d4
    t70_re * t74_im) * 1.3164953090834051E-18) + (t16_re * t34_re - t76_re *
 801052a:	ee35 7b07 	vadd.f64	d7, d5, d7
  b_G_q[3].re = -g * ((((b_t54_im * t41_re - t43_re * t41_im) * 0.0215 - (t70_im
 801052e:	4b48      	ldr	r3, [pc, #288]	; (8010650 <G_q+0xdc98>)
 8010530:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010534:	443a      	add	r2, r7
 8010536:	4413      	add	r3, r2
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	3330      	adds	r3, #48	; 0x30
 801053c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010540:	ed83 7b00 	vstr	d7, [r3]
  b_G_q[3].im = -g * ((((b_t54_im * t41_im + t43_re * t41_re) * 0.0215 - (t70_im
 8010544:	4b41      	ldr	r3, [pc, #260]	; (801064c <G_q+0xdc94>)
 8010546:	f241 32d0 	movw	r2, #5072	; 0x13d0
 801054a:	443a      	add	r2, r7
 801054c:	4413      	add	r3, r2
 801054e:	ed93 7b00 	vldr	d7, [r3]
 8010552:	eeb1 6b47 	vneg.f64	d6, d7
 8010556:	f241 23e8 	movw	r3, #4840	; 0x12e8
 801055a:	443b      	add	r3, r7
 801055c:	ed93 5b00 	vldr	d5, [r3]
 8010560:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8010564:	ed93 7b00 	vldr	d7, [r3]
 8010568:	ee25 5b07 	vmul.f64	d5, d5, d7
 801056c:	f241 2358 	movw	r3, #4696	; 0x1258
 8010570:	443b      	add	r3, r7
 8010572:	ed93 4b00 	vldr	d4, [r3]
 8010576:	f241 3308 	movw	r3, #4872	; 0x1308
 801057a:	443b      	add	r3, r7
 801057c:	ed93 7b00 	vldr	d7, [r3]
 8010580:	ee24 7b07 	vmul.f64	d7, d4, d7
 8010584:	ee35 7b07 	vadd.f64	d7, d5, d7
 8010588:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8010638 <G_q+0xdc80>
 801058c:	ee27 5b05 	vmul.f64	d5, d7, d5
    * t55_im + t43_im * b_t54_re) * 1.3164953090834051E-18) + (t55_re * t74_im +
 8010590:	f241 23c8 	movw	r3, #4808	; 0x12c8
 8010594:	443b      	add	r3, r7
 8010596:	ed93 4b00 	vldr	d4, [r3]
 801059a:	f241 23d8 	movw	r3, #4824	; 0x12d8
 801059e:	443b      	add	r3, r7
 80105a0:	ed93 7b00 	vldr	d7, [r3]
 80105a4:	ee24 4b07 	vmul.f64	d4, d4, d7
 80105a8:	f241 23f8 	movw	r3, #4856	; 0x12f8
 80105ac:	443b      	add	r3, r7
 80105ae:	ed93 3b00 	vldr	d3, [r3]
 80105b2:	f241 23f0 	movw	r3, #4848	; 0x12f0
 80105b6:	443b      	add	r3, r7
 80105b8:	ed93 7b00 	vldr	d7, [r3]
 80105bc:	ee23 7b07 	vmul.f64	d7, d3, d7
 80105c0:	ee34 7b07 	vadd.f64	d7, d4, d7
 80105c4:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 8010640 <G_q+0xdc88>
 80105c8:	ee27 7b04 	vmul.f64	d7, d7, d4
  b_G_q[3].im = -g * ((((b_t54_im * t41_im + t43_re * t41_re) * 0.0215 - (t70_im
 80105cc:	ee35 5b47 	vsub.f64	d5, d5, d7
    * t55_im + t43_im * b_t54_re) * 1.3164953090834051E-18) + (t55_re * t74_im +
 80105d0:	f241 23b0 	movw	r3, #4784	; 0x12b0
 80105d4:	443b      	add	r3, r7
 80105d6:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 80105da:	ed92 4b00 	vldr	d4, [r2]
 80105de:	ed93 7b00 	vldr	d7, [r3]
 80105e2:	ee24 4b07 	vmul.f64	d4, d4, d7
    t70_re * t74_re) * 1.3164953090834051E-18) + (t16_re * t34_im + t76_re *
 80105e6:	f241 22d0 	movw	r2, #4816	; 0x12d0
 80105ea:	443a      	add	r2, r7
 80105ec:	f241 23b8 	movw	r3, #4792	; 0x12b8
 80105f0:	443b      	add	r3, r7
 80105f2:	ed92 3b00 	vldr	d3, [r2]
 80105f6:	ed93 7b00 	vldr	d7, [r3]
 80105fa:	ee23 7b07 	vmul.f64	d7, d3, d7
    * t55_im + t43_im * b_t54_re) * 1.3164953090834051E-18) + (t55_re * t74_im +
 80105fe:	ee34 7b07 	vadd.f64	d7, d4, d7
    t70_re * t74_re) * 1.3164953090834051E-18) + (t16_re * t34_im + t76_re *
 8010602:	ed9f 4b0f 	vldr	d4, [pc, #60]	; 8010640 <G_q+0xdc88>
 8010606:	ee27 7b04 	vmul.f64	d7, d7, d4
    * t55_im + t43_im * b_t54_re) * 1.3164953090834051E-18) + (t55_re * t74_im +
 801060a:	ee35 5b07 	vadd.f64	d5, d5, d7
    t70_re * t74_re) * 1.3164953090834051E-18) + (t16_re * t34_im + t76_re *
 801060e:	f241 3368 	movw	r3, #4968	; 0x1368
 8010612:	443b      	add	r3, r7
 8010614:	ed93 4b00 	vldr	d4, [r3]
 8010618:	f241 33b0 	movw	r3, #5040	; 0x13b0
 801061c:	443b      	add	r3, r7
 801061e:	ed93 7b00 	vldr	d7, [r3]
 8010622:	ee24 4b07 	vmul.f64	d4, d4, d7
 8010626:	f241 23a8 	movw	r3, #4776	; 0x12a8
 801062a:	443b      	add	r3, r7
 801062c:	ed93 3b00 	vldr	d3, [r3]
 8010630:	e010      	b.n	8010654 <G_q+0xdc9c>
 8010632:	bf00      	nop
 8010634:	f3af 8000 	nop.w
 8010638:	9374bc6a 	.word	0x9374bc6a
 801063c:	3f960418 	.word	0x3f960418
 8010640:	2ba953a1 	.word	0x2ba953a1
 8010644:	3c3848f9 	.word	0x3c3848f9
 8010648:	ffffecf0 	.word	0xffffecf0
 801064c:	ffffec58 	.word	0xffffec58
 8010650:	ffffec34 	.word	0xffffec34
 8010654:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8010658:	443b      	add	r3, r7
 801065a:	ed93 7b00 	vldr	d7, [r3]
 801065e:	ee23 7b07 	vmul.f64	d7, d3, d7
 8010662:	ee34 7b07 	vadd.f64	d7, d4, d7
    t34_re) * 0.0215);
 8010666:	ed9f 4bd2 	vldr	d4, [pc, #840]	; 80109b0 <G_q+0xdff8>
 801066a:	ee27 7b04 	vmul.f64	d7, d7, d4
    t70_re * t74_re) * 1.3164953090834051E-18) + (t16_re * t34_im + t76_re *
 801066e:	ee35 7b07 	vadd.f64	d7, d5, d7
  b_G_q[3].im = -g * ((((b_t54_im * t41_im + t43_re * t41_re) * 0.0215 - (t70_im
 8010672:	4bd5      	ldr	r3, [pc, #852]	; (80109c8 <G_q+0xe010>)
 8010674:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010678:	443a      	add	r2, r7
 801067a:	4413      	add	r3, r2
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	3330      	adds	r3, #48	; 0x30
 8010680:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010684:	ed83 7b02 	vstr	d7, [r3, #8]
  if (t264.im == 0.0) {
 8010688:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801068c:	ed93 7b02 	vldr	d7, [r3, #8]
 8010690:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010698:	d116      	bne.n	80106c8 <G_q+0xdd10>
    t70_im = t264.re / 2.0;
 801069a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801069e:	ed93 6b00 	vldr	d6, [r3]
 80106a2:	f241 23c8 	movw	r3, #4808	; 0x12c8
 80106a6:	443b      	add	r3, r7
 80106a8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80106ac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80106b0:	ed83 7b00 	vstr	d7, [r3]
    t43_im = 0.0;
 80106b4:	f04f 0300 	mov.w	r3, #0
 80106b8:	f04f 0400 	mov.w	r4, #0
 80106bc:	f241 22f8 	movw	r2, #4856	; 0x12f8
 80106c0:	443a      	add	r2, r7
 80106c2:	e9c2 3400 	strd	r3, r4, [r2]
 80106c6:	e039      	b.n	801073c <G_q+0xdd84>
  } else if (t264.re == 0.0) {
 80106c8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80106cc:	ed93 7b00 	vldr	d7, [r3]
 80106d0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80106d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106d8:	d116      	bne.n	8010708 <G_q+0xdd50>
    t70_im = 0.0;
 80106da:	f241 22c8 	movw	r2, #4808	; 0x12c8
 80106de:	443a      	add	r2, r7
 80106e0:	f04f 0300 	mov.w	r3, #0
 80106e4:	f04f 0400 	mov.w	r4, #0
 80106e8:	e9c2 3400 	strd	r3, r4, [r2]
    t43_im = t264.im / 2.0;
 80106ec:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80106f0:	ed93 6b02 	vldr	d6, [r3, #8]
 80106f4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80106f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80106fc:	f241 23f8 	movw	r3, #4856	; 0x12f8
 8010700:	443b      	add	r3, r7
 8010702:	ed83 7b00 	vstr	d7, [r3]
 8010706:	e019      	b.n	801073c <G_q+0xdd84>
  } else {
    t70_im = t264.re / 2.0;
 8010708:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801070c:	ed93 6b00 	vldr	d6, [r3]
 8010710:	f241 23c8 	movw	r3, #4808	; 0x12c8
 8010714:	443b      	add	r3, r7
 8010716:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801071a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801071e:	ed83 7b00 	vstr	d7, [r3]
    t43_im = t264.im / 2.0;
 8010722:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8010726:	ed93 6b02 	vldr	d6, [r3, #8]
 801072a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801072e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010732:	f241 23f8 	movw	r3, #4856	; 0x12f8
 8010736:	443b      	add	r3, r7
 8010738:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t265.im == 0.0) {
 801073c:	4ba3      	ldr	r3, [pc, #652]	; (80109cc <G_q+0xe014>)
 801073e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010742:	443a      	add	r2, r7
 8010744:	4413      	add	r3, r2
 8010746:	ed93 7b02 	vldr	d7, [r3, #8]
 801074a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801074e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010752:	d118      	bne.n	8010786 <G_q+0xddce>
    t76_re = t265.re / 2.0;
 8010754:	4b9d      	ldr	r3, [pc, #628]	; (80109cc <G_q+0xe014>)
 8010756:	f241 32d0 	movw	r2, #5072	; 0x13d0
 801075a:	443a      	add	r2, r7
 801075c:	4413      	add	r3, r2
 801075e:	ed93 6b00 	vldr	d6, [r3]
 8010762:	f241 23a8 	movw	r3, #4776	; 0x12a8
 8010766:	443b      	add	r3, r7
 8010768:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801076c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010770:	ed83 7b00 	vstr	d7, [r3]
    t72_re = 0.0;
 8010774:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 8010778:	f04f 0300 	mov.w	r3, #0
 801077c:	f04f 0400 	mov.w	r4, #0
 8010780:	e9c2 3400 	strd	r3, r4, [r2]
 8010784:	e043      	b.n	801080e <G_q+0xde56>
  } else if (t265.re == 0.0) {
 8010786:	4b91      	ldr	r3, [pc, #580]	; (80109cc <G_q+0xe014>)
 8010788:	f241 32d0 	movw	r2, #5072	; 0x13d0
 801078c:	443a      	add	r2, r7
 801078e:	4413      	add	r3, r2
 8010790:	ed93 7b00 	vldr	d7, [r3]
 8010794:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801079c:	d118      	bne.n	80107d0 <G_q+0xde18>
    t76_re = 0.0;
 801079e:	f241 22a8 	movw	r2, #4776	; 0x12a8
 80107a2:	443a      	add	r2, r7
 80107a4:	f04f 0300 	mov.w	r3, #0
 80107a8:	f04f 0400 	mov.w	r4, #0
 80107ac:	e9c2 3400 	strd	r3, r4, [r2]
    t72_re = t265.im / 2.0;
 80107b0:	4b86      	ldr	r3, [pc, #536]	; (80109cc <G_q+0xe014>)
 80107b2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80107b6:	443a      	add	r2, r7
 80107b8:	4413      	add	r3, r2
 80107ba:	ed93 6b02 	vldr	d6, [r3, #8]
 80107be:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 80107c2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80107c6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80107ca:	ed83 7b00 	vstr	d7, [r3]
 80107ce:	e01e      	b.n	801080e <G_q+0xde56>
  } else {
    t76_re = t265.re / 2.0;
 80107d0:	4b7e      	ldr	r3, [pc, #504]	; (80109cc <G_q+0xe014>)
 80107d2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80107d6:	443a      	add	r2, r7
 80107d8:	4413      	add	r3, r2
 80107da:	ed93 6b00 	vldr	d6, [r3]
 80107de:	f241 23a8 	movw	r3, #4776	; 0x12a8
 80107e2:	443b      	add	r3, r7
 80107e4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80107e8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80107ec:	ed83 7b00 	vstr	d7, [r3]
    t72_re = t265.im / 2.0;
 80107f0:	4b76      	ldr	r3, [pc, #472]	; (80109cc <G_q+0xe014>)
 80107f2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80107f6:	443a      	add	r2, r7
 80107f8:	4413      	add	r3, r2
 80107fa:	ed93 6b02 	vldr	d6, [r3, #8]
 80107fe:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8010802:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010806:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801080a:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re = (t252.re * 0.0 - t252.im * 3.061616997868383E-17) - (t253.re * 0.0 -
 801080e:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8010812:	ed93 7b00 	vldr	d7, [r3]
 8010816:	ed9f 6b68 	vldr	d6, [pc, #416]	; 80109b8 <G_q+0xe000>
 801081a:	ee27 6b06 	vmul.f64	d6, d7, d6
 801081e:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8010822:	ed93 7b02 	vldr	d7, [r3, #8]
 8010826:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80109c0 <G_q+0xe008>
 801082a:	ee27 7b05 	vmul.f64	d7, d7, d5
 801082e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010832:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8010836:	ed93 7b00 	vldr	d7, [r3]
 801083a:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 80109b8 <G_q+0xe000>
 801083e:	ee27 5b05 	vmul.f64	d5, d7, d5
    t253.im * 3.061616997868383E-17);
 8010842:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8010846:	ed93 7b02 	vldr	d7, [r3, #8]
 801084a:	ed9f 4b5d 	vldr	d4, [pc, #372]	; 80109c0 <G_q+0xe008>
 801084e:	ee27 7b04 	vmul.f64	d7, d7, d4
  t16_re = (t252.re * 0.0 - t252.im * 3.061616997868383E-17) - (t253.re * 0.0 -
 8010852:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010856:	ee36 7b47 	vsub.f64	d7, d6, d7
 801085a:	f241 3368 	movw	r3, #4968	; 0x1368
 801085e:	443b      	add	r3, r7
 8010860:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t252.re * 3.061616997868383E-17 + t252.im * 0.0) - (t253.re *
 8010864:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8010868:	ed93 7b00 	vldr	d7, [r3]
 801086c:	ed9f 6b54 	vldr	d6, [pc, #336]	; 80109c0 <G_q+0xe008>
 8010870:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010874:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8010878:	ed93 7b02 	vldr	d7, [r3, #8]
 801087c:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 80109b8 <G_q+0xe000>
 8010880:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010884:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010888:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 801088c:	ed93 7b00 	vldr	d7, [r3]
 8010890:	ed9f 5b4b 	vldr	d5, [pc, #300]	; 80109c0 <G_q+0xe008>
 8010894:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t253.im * 0.0);
 8010898:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 801089c:	ed93 7b02 	vldr	d7, [r3, #8]
 80108a0:	ed9f 4b45 	vldr	d4, [pc, #276]	; 80109b8 <G_q+0xe000>
 80108a4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80108a8:	ee35 7b07 	vadd.f64	d7, d5, d7
  t16_im = (t252.re * 3.061616997868383E-17 + t252.im * 0.0) - (t253.re *
 80108ac:	ee36 7b47 	vsub.f64	d7, d6, d7
 80108b0:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80108b4:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t250.re * 0.0 - t250.im * 0.5) - (t251.re * 0.0 - t251.im * 0.5);
 80108b8:	f241 03f0 	movw	r3, #4336	; 0x10f0
 80108bc:	443b      	add	r3, r7
 80108be:	ed93 7b00 	vldr	d7, [r3]
 80108c2:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 80109b8 <G_q+0xe000>
 80108c6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80108ca:	f241 03f0 	movw	r3, #4336	; 0x10f0
 80108ce:	443b      	add	r3, r7
 80108d0:	ed93 7b02 	vldr	d7, [r3, #8]
 80108d4:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80108d8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80108dc:	ee36 6b47 	vsub.f64	d6, d6, d7
 80108e0:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80108e4:	ed93 7b00 	vldr	d7, [r3]
 80108e8:	ed9f 5b33 	vldr	d5, [pc, #204]	; 80109b8 <G_q+0xe000>
 80108ec:	ee27 5b05 	vmul.f64	d5, d7, d5
 80108f0:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80108f4:	ed93 7b02 	vldr	d7, [r3, #8]
 80108f8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80108fc:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010900:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010904:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010908:	f241 3348 	movw	r3, #4936	; 0x1348
 801090c:	443b      	add	r3, r7
 801090e:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t250.re * 0.5 + t250.im * 0.0) - (t251.re * 0.5 + t251.im * 0.0);
 8010912:	f241 03f0 	movw	r3, #4336	; 0x10f0
 8010916:	443b      	add	r3, r7
 8010918:	ed93 7b00 	vldr	d7, [r3]
 801091c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8010920:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010924:	f241 03f0 	movw	r3, #4336	; 0x10f0
 8010928:	443b      	add	r3, r7
 801092a:	ed93 7b02 	vldr	d7, [r3, #8]
 801092e:	ed9f 5b22 	vldr	d5, [pc, #136]	; 80109b8 <G_q+0xe000>
 8010932:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010936:	ee36 6b07 	vadd.f64	d6, d6, d7
 801093a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 801093e:	ed93 7b00 	vldr	d7, [r3]
 8010942:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010946:	ee27 5b05 	vmul.f64	d5, d7, d5
 801094a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 801094e:	ed93 7b02 	vldr	d7, [r3, #8]
 8010952:	ed9f 4b19 	vldr	d4, [pc, #100]	; 80109b8 <G_q+0xe000>
 8010956:	ee27 7b04 	vmul.f64	d7, d7, d4
 801095a:	ee35 7b07 	vadd.f64	d7, d5, d7
 801095e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010962:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8010966:	ed83 7b00 	vstr	d7, [r3]
  if (t248.im == 0.0) {
 801096a:	f241 03d0 	movw	r3, #4304	; 0x10d0
 801096e:	443b      	add	r3, r7
 8010970:	ed93 7b02 	vldr	d7, [r3, #8]
 8010974:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801097c:	d128      	bne.n	80109d0 <G_q+0xe018>
    t12_re = t248.re / 2.0;
 801097e:	f241 03d0 	movw	r3, #4304	; 0x10d0
 8010982:	443b      	add	r3, r7
 8010984:	ed93 6b00 	vldr	d6, [r3]
 8010988:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801098c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010990:	f241 3388 	movw	r3, #5000	; 0x1388
 8010994:	443b      	add	r3, r7
 8010996:	ed83 7b00 	vstr	d7, [r3]
    t12_im = 0.0;
 801099a:	f04f 0300 	mov.w	r3, #0
 801099e:	f04f 0400 	mov.w	r4, #0
 80109a2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80109a6:	e9c2 3400 	strd	r3, r4, [r2]
 80109aa:	e04d      	b.n	8010a48 <G_q+0xe090>
 80109ac:	f3af 8000 	nop.w
 80109b0:	9374bc6a 	.word	0x9374bc6a
 80109b4:	3f960418 	.word	0x3f960418
	...
 80109c0:	33145c07 	.word	0x33145c07
 80109c4:	3c81a626 	.word	0x3c81a626
 80109c8:	ffffec34 	.word	0xffffec34
 80109cc:	ffffed10 	.word	0xffffed10
  } else if (t248.re == 0.0) {
 80109d0:	f241 03d0 	movw	r3, #4304	; 0x10d0
 80109d4:	443b      	add	r3, r7
 80109d6:	ed93 7b00 	vldr	d7, [r3]
 80109da:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80109de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109e2:	d116      	bne.n	8010a12 <G_q+0xe05a>
    t12_re = 0.0;
 80109e4:	f04f 0300 	mov.w	r3, #0
 80109e8:	f04f 0400 	mov.w	r4, #0
 80109ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80109f0:	443a      	add	r2, r7
 80109f2:	e9c2 3400 	strd	r3, r4, [r2]
    t12_im = t248.im / 2.0;
 80109f6:	f241 03d0 	movw	r3, #4304	; 0x10d0
 80109fa:	443b      	add	r3, r7
 80109fc:	ed93 6b02 	vldr	d6, [r3, #8]
 8010a00:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010a04:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010a08:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8010a0c:	ed83 7b00 	vstr	d7, [r3]
 8010a10:	e01a      	b.n	8010a48 <G_q+0xe090>
  } else {
    t12_re = t248.re / 2.0;
 8010a12:	f241 03d0 	movw	r3, #4304	; 0x10d0
 8010a16:	443b      	add	r3, r7
 8010a18:	ed93 6b00 	vldr	d6, [r3]
 8010a1c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010a20:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010a24:	f241 3388 	movw	r3, #5000	; 0x1388
 8010a28:	443b      	add	r3, r7
 8010a2a:	ed83 7b00 	vstr	d7, [r3]
    t12_im = t248.im / 2.0;
 8010a2e:	f241 03d0 	movw	r3, #4304	; 0x10d0
 8010a32:	443b      	add	r3, r7
 8010a34:	ed93 6b02 	vldr	d6, [r3, #8]
 8010a38:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010a3c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010a40:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8010a44:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t249.im == 0.0) {
 8010a48:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8010a4c:	ed93 7b02 	vldr	d7, [r3, #8]
 8010a50:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a58:	d116      	bne.n	8010a88 <G_q+0xe0d0>
    t34_re = t249.re / 2.0;
 8010a5a:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8010a5e:	ed93 6b00 	vldr	d6, [r3]
 8010a62:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010a66:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010a6a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8010a6e:	443b      	add	r3, r7
 8010a70:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8010a74:	f04f 0300 	mov.w	r3, #0
 8010a78:	f04f 0400 	mov.w	r4, #0
 8010a7c:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8010a80:	443a      	add	r2, r7
 8010a82:	e9c2 3400 	strd	r3, r4, [r2]
 8010a86:	e039      	b.n	8010afc <G_q+0xe144>
  } else if (t249.re == 0.0) {
 8010a88:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8010a8c:	ed93 7b00 	vldr	d7, [r3]
 8010a90:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a98:	d116      	bne.n	8010ac8 <G_q+0xe110>
    t34_re = 0.0;
 8010a9a:	f04f 0300 	mov.w	r3, #0
 8010a9e:	f04f 0400 	mov.w	r4, #0
 8010aa2:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8010aa6:	443a      	add	r2, r7
 8010aa8:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t249.im / 2.0;
 8010aac:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8010ab0:	ed93 6b02 	vldr	d6, [r3, #8]
 8010ab4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010ab8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010abc:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8010ac0:	443b      	add	r3, r7
 8010ac2:	ed83 7b00 	vstr	d7, [r3]
 8010ac6:	e019      	b.n	8010afc <G_q+0xe144>
  } else {
    t34_re = t249.re / 2.0;
 8010ac8:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8010acc:	ed93 6b00 	vldr	d6, [r3]
 8010ad0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010ad4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010ad8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8010adc:	443b      	add	r3, r7
 8010ade:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t249.im / 2.0;
 8010ae2:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8010ae6:	ed93 6b02 	vldr	d6, [r3, #8]
 8010aea:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010aee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010af2:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8010af6:	443b      	add	r3, r7
 8010af8:	ed83 7b00 	vstr	d7, [r3]
  }

  t23_re = t246.re * 3.061616997868383E-17 + t247.re * 3.061616997868383E-17;
 8010afc:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8010b00:	ed93 7b00 	vldr	d7, [r3]
 8010b04:	ed9f 6be2 	vldr	d6, [pc, #904]	; 8010e90 <G_q+0xe4d8>
 8010b08:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010b0c:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8010b10:	ed93 7b00 	vldr	d7, [r3]
 8010b14:	ed9f 5bde 	vldr	d5, [pc, #888]	; 8010e90 <G_q+0xe4d8>
 8010b18:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010b1c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8010b20:	f241 3330 	movw	r3, #4912	; 0x1330
 8010b24:	443b      	add	r3, r7
 8010b26:	ed83 7b00 	vstr	d7, [r3]
  t3_im = t246.im * 3.061616997868383E-17 + t247.im * 3.061616997868383E-17;
 8010b2a:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8010b2e:	ed93 7b02 	vldr	d7, [r3, #8]
 8010b32:	ed9f 6bd7 	vldr	d6, [pc, #860]	; 8010e90 <G_q+0xe4d8>
 8010b36:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010b3a:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8010b3e:	ed93 7b02 	vldr	d7, [r3, #8]
 8010b42:	ed9f 5bd3 	vldr	d5, [pc, #844]	; 8010e90 <G_q+0xe4d8>
 8010b46:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010b4a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8010b4e:	f241 3310 	movw	r3, #4880	; 0x1310
 8010b52:	443b      	add	r3, r7
 8010b54:	ed83 7b00 	vstr	d7, [r3]
  t12_re = (t12_re + t34_re) + 7.498798913309288E-33;
 8010b58:	f241 3388 	movw	r3, #5000	; 0x1388
 8010b5c:	443b      	add	r3, r7
 8010b5e:	ed93 6b00 	vldr	d6, [r3]
 8010b62:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8010b66:	443b      	add	r3, r7
 8010b68:	ed93 7b00 	vldr	d7, [r3]
 8010b6c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8010b70:	ed9f 6bc9 	vldr	d6, [pc, #804]	; 8010e98 <G_q+0xe4e0>
 8010b74:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010b78:	f241 3388 	movw	r3, #5000	; 0x1388
 8010b7c:	443b      	add	r3, r7
 8010b7e:	ed83 7b00 	vstr	d7, [r3]
  t12_im += t34_im;
 8010b82:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8010b86:	ed93 6b00 	vldr	d6, [r3]
 8010b8a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8010b8e:	443b      	add	r3, r7
 8010b90:	ed93 7b00 	vldr	d7, [r3]
 8010b94:	ee36 7b07 	vadd.f64	d7, d6, d7
 8010b98:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8010b9c:	ed83 7b00 	vstr	d7, [r3]
  t58_im = (t242.re * 0.0 - t242.im * 0.5) - (t243.re * 0.0 - t243.im * 0.5);
 8010ba0:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8010ba4:	ed93 7b00 	vldr	d7, [r3]
 8010ba8:	ed9f 6bbd 	vldr	d6, [pc, #756]	; 8010ea0 <G_q+0xe4e8>
 8010bac:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010bb0:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8010bb4:	ed93 7b02 	vldr	d7, [r3, #8]
 8010bb8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010bbc:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010bc0:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010bc4:	4bba      	ldr	r3, [pc, #744]	; (8010eb0 <G_q+0xe4f8>)
 8010bc6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010bca:	443a      	add	r2, r7
 8010bcc:	4413      	add	r3, r2
 8010bce:	ed93 7b00 	vldr	d7, [r3]
 8010bd2:	ed9f 5bb3 	vldr	d5, [pc, #716]	; 8010ea0 <G_q+0xe4e8>
 8010bd6:	ee27 5b05 	vmul.f64	d5, d7, d5
 8010bda:	4bb5      	ldr	r3, [pc, #724]	; (8010eb0 <G_q+0xe4f8>)
 8010bdc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010be0:	443a      	add	r2, r7
 8010be2:	4413      	add	r3, r2
 8010be4:	ed93 7b02 	vldr	d7, [r3, #8]
 8010be8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8010bec:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010bf0:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010bf4:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8010bf8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010bfc:	ed83 7b00 	vstr	d7, [r3]
  t70_re = (t242.re * 0.5 + t242.im * 0.0) - (t243.re * 0.5 + t243.im * 0.0);
 8010c00:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8010c04:	ed93 7b00 	vldr	d7, [r3]
 8010c08:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8010c0c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010c10:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8010c14:	ed93 7b02 	vldr	d7, [r3, #8]
 8010c18:	ed9f 5ba1 	vldr	d5, [pc, #644]	; 8010ea0 <G_q+0xe4e8>
 8010c1c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010c20:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010c24:	4ba2      	ldr	r3, [pc, #648]	; (8010eb0 <G_q+0xe4f8>)
 8010c26:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010c2a:	443a      	add	r2, r7
 8010c2c:	4413      	add	r3, r2
 8010c2e:	ed93 7b00 	vldr	d7, [r3]
 8010c32:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010c36:	ee27 5b05 	vmul.f64	d5, d7, d5
 8010c3a:	4b9d      	ldr	r3, [pc, #628]	; (8010eb0 <G_q+0xe4f8>)
 8010c3c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010c40:	443a      	add	r2, r7
 8010c42:	4413      	add	r3, r2
 8010c44:	ed93 7b02 	vldr	d7, [r3, #8]
 8010c48:	ed9f 4b95 	vldr	d4, [pc, #596]	; 8010ea0 <G_q+0xe4e8>
 8010c4c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010c50:	ee35 7b07 	vadd.f64	d7, d5, d7
 8010c54:	f241 23d0 	movw	r3, #4816	; 0x12d0
 8010c58:	443b      	add	r3, r7
 8010c5a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010c5e:	ed83 7b00 	vstr	d7, [r3]
  t60_re = (((t244.re * 6.123233995736766E-17 + t245.re * 6.123233995736766E-17)
 8010c62:	f241 03b0 	movw	r3, #4272	; 0x10b0
 8010c66:	443b      	add	r3, r7
 8010c68:	ed93 7b00 	vldr	d7, [r3]
 8010c6c:	ed9f 6b8e 	vldr	d6, [pc, #568]	; 8010ea8 <G_q+0xe4f0>
 8010c70:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010c74:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 8010c78:	ed93 7b00 	vldr	d7, [r3]
 8010c7c:	ed9f 5b8a 	vldr	d5, [pc, #552]	; 8010ea8 <G_q+0xe4f0>
 8010c80:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010c84:	ee36 6b07 	vadd.f64	d6, d6, d7
             + (t16_re * t20_re - t16_im * t20_im)) + (t23_re * t12_re - t3_im *
 8010c88:	f241 3368 	movw	r3, #4968	; 0x1368
 8010c8c:	443b      	add	r3, r7
 8010c8e:	ed93 5b00 	vldr	d5, [r3]
 8010c92:	f241 3348 	movw	r3, #4936	; 0x1348
 8010c96:	443b      	add	r3, r7
 8010c98:	ed93 7b00 	vldr	d7, [r3]
 8010c9c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8010ca0:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8010ca4:	ed93 4b00 	vldr	d4, [r3]
 8010ca8:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8010cac:	ed93 7b00 	vldr	d7, [r3]
 8010cb0:	ee24 7b07 	vmul.f64	d7, d4, d7
 8010cb4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010cb8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010cbc:	f241 3330 	movw	r3, #4912	; 0x1330
 8010cc0:	443b      	add	r3, r7
 8010cc2:	ed93 5b00 	vldr	d5, [r3]
 8010cc6:	f241 3388 	movw	r3, #5000	; 0x1388
 8010cca:	443b      	add	r3, r7
 8010ccc:	ed93 7b00 	vldr	d7, [r3]
 8010cd0:	ee25 5b07 	vmul.f64	d5, d5, d7
 8010cd4:	f241 3310 	movw	r3, #4880	; 0x1310
 8010cd8:	443b      	add	r3, r7
 8010cda:	ed93 4b00 	vldr	d4, [r3]
 8010cde:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8010ce2:	ed93 7b00 	vldr	d7, [r3]
 8010ce6:	ee24 7b07 	vmul.f64	d7, d4, d7
 8010cea:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010cee:	ee36 7b07 	vadd.f64	d7, d6, d7
  t60_re = (((t244.re * 6.123233995736766E-17 + t245.re * 6.123233995736766E-17)
 8010cf2:	f241 2350 	movw	r3, #4688	; 0x1250
 8010cf6:	443b      	add	r3, r7
 8010cf8:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8010ea8 <G_q+0xe4f0>
 8010cfc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010d00:	ed83 7b00 	vstr	d7, [r3]
             t12_im)) - 6.123233995736766E-17;
  b_t10_re = ((t244.im * 6.123233995736766E-17 + t245.im * 6.123233995736766E-17)
 8010d04:	f241 03b0 	movw	r3, #4272	; 0x10b0
 8010d08:	443b      	add	r3, r7
 8010d0a:	ed93 7b02 	vldr	d7, [r3, #8]
 8010d0e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8010ea8 <G_q+0xe4f0>
 8010d12:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010d16:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 8010d1a:	ed93 7b02 	vldr	d7, [r3, #8]
 8010d1e:	ed9f 5b62 	vldr	d5, [pc, #392]	; 8010ea8 <G_q+0xe4f0>
 8010d22:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010d26:	ee36 6b07 	vadd.f64	d6, d6, d7
              + (t16_re * t20_im + t16_im * t20_re)) + (t23_re * t12_im + t3_im *
 8010d2a:	f241 3368 	movw	r3, #4968	; 0x1368
 8010d2e:	443b      	add	r3, r7
 8010d30:	ed93 5b00 	vldr	d5, [r3]
 8010d34:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8010d38:	ed93 7b00 	vldr	d7, [r3]
 8010d3c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8010d40:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8010d44:	ed93 4b00 	vldr	d4, [r3]
 8010d48:	f241 3348 	movw	r3, #4936	; 0x1348
 8010d4c:	443b      	add	r3, r7
 8010d4e:	ed93 7b00 	vldr	d7, [r3]
 8010d52:	ee24 7b07 	vmul.f64	d7, d4, d7
 8010d56:	ee35 7b07 	vadd.f64	d7, d5, d7
 8010d5a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010d5e:	f241 3330 	movw	r3, #4912	; 0x1330
 8010d62:	443b      	add	r3, r7
 8010d64:	ed93 5b00 	vldr	d5, [r3]
 8010d68:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8010d6c:	ed93 7b00 	vldr	d7, [r3]
 8010d70:	ee25 5b07 	vmul.f64	d5, d5, d7
 8010d74:	f241 3310 	movw	r3, #4880	; 0x1310
 8010d78:	443b      	add	r3, r7
 8010d7a:	ed93 4b00 	vldr	d4, [r3]
 8010d7e:	f241 3388 	movw	r3, #5000	; 0x1388
 8010d82:	443b      	add	r3, r7
 8010d84:	ed93 7b00 	vldr	d7, [r3]
 8010d88:	ee24 7b07 	vmul.f64	d7, d4, d7
 8010d8c:	ee35 7b07 	vadd.f64	d7, d5, d7
  b_t10_re = ((t244.im * 6.123233995736766E-17 + t245.im * 6.123233995736766E-17)
 8010d90:	ee36 7b07 	vadd.f64	d7, d6, d7
 8010d94:	f241 3338 	movw	r3, #4920	; 0x1338
 8010d98:	443b      	add	r3, r7
 8010d9a:	ed83 7b00 	vstr	d7, [r3]
    t12_re);
  if (t256.im == 0.0) {
 8010d9e:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8010da2:	ed93 7b02 	vldr	d7, [r3, #8]
 8010da6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dae:	d115      	bne.n	8010ddc <G_q+0xe424>
    t20_im = t256.re / 2.0;
 8010db0:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8010db4:	ed93 6b00 	vldr	d6, [r3]
 8010db8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010dbc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010dc0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8010dc4:	ed83 7b00 	vstr	d7, [r3]
    t85_im = 0.0;
 8010dc8:	f04f 0300 	mov.w	r3, #0
 8010dcc:	f04f 0400 	mov.w	r4, #0
 8010dd0:	f241 3218 	movw	r2, #4888	; 0x1318
 8010dd4:	443a      	add	r2, r7
 8010dd6:	e9c2 3400 	strd	r3, r4, [r2]
 8010dda:	e037      	b.n	8010e4c <G_q+0xe494>
  } else if (t256.re == 0.0) {
 8010ddc:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8010de0:	ed93 7b00 	vldr	d7, [r3]
 8010de4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dec:	d115      	bne.n	8010e1a <G_q+0xe462>
    t20_im = 0.0;
 8010dee:	f04f 0300 	mov.w	r3, #0
 8010df2:	f04f 0400 	mov.w	r4, #0
 8010df6:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8010dfa:	e9c2 3400 	strd	r3, r4, [r2]
    t85_im = t256.im / 2.0;
 8010dfe:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8010e02:	ed93 6b02 	vldr	d6, [r3, #8]
 8010e06:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010e0a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010e0e:	f241 3318 	movw	r3, #4888	; 0x1318
 8010e12:	443b      	add	r3, r7
 8010e14:	ed83 7b00 	vstr	d7, [r3]
 8010e18:	e018      	b.n	8010e4c <G_q+0xe494>
  } else {
    t20_im = t256.re / 2.0;
 8010e1a:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8010e1e:	ed93 6b00 	vldr	d6, [r3]
 8010e22:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010e26:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010e2a:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8010e2e:	ed83 7b00 	vstr	d7, [r3]
    t85_im = t256.im / 2.0;
 8010e32:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8010e36:	ed93 6b02 	vldr	d6, [r3, #8]
 8010e3a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010e3e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010e42:	f241 3318 	movw	r3, #4888	; 0x1318
 8010e46:	443b      	add	r3, r7
 8010e48:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t257.im == 0.0) {
 8010e4c:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8010e50:	ed93 7b02 	vldr	d7, [r3, #8]
 8010e54:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e5c:	d12a      	bne.n	8010eb4 <G_q+0xe4fc>
    t34_re = t257.re / 2.0;
 8010e5e:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8010e62:	ed93 6b00 	vldr	d6, [r3]
 8010e66:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010e6a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010e6e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8010e72:	443b      	add	r3, r7
 8010e74:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8010e78:	f04f 0300 	mov.w	r3, #0
 8010e7c:	f04f 0400 	mov.w	r4, #0
 8010e80:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8010e84:	443a      	add	r2, r7
 8010e86:	e9c2 3400 	strd	r3, r4, [r2]
 8010e8a:	e04d      	b.n	8010f28 <G_q+0xe570>
 8010e8c:	f3af 8000 	nop.w
 8010e90:	33145c07 	.word	0x33145c07
 8010e94:	3c81a626 	.word	0x3c81a626
 8010e98:	858a5d48 	.word	0x858a5d48
 8010e9c:	394377ce 	.word	0x394377ce
	...
 8010ea8:	33145c07 	.word	0x33145c07
 8010eac:	3c91a626 	.word	0x3c91a626
 8010eb0:	ffffef70 	.word	0xffffef70
  } else if (t257.re == 0.0) {
 8010eb4:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8010eb8:	ed93 7b00 	vldr	d7, [r3]
 8010ebc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ec4:	d116      	bne.n	8010ef4 <G_q+0xe53c>
    t34_re = 0.0;
 8010ec6:	f04f 0300 	mov.w	r3, #0
 8010eca:	f04f 0400 	mov.w	r4, #0
 8010ece:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8010ed2:	443a      	add	r2, r7
 8010ed4:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t257.im / 2.0;
 8010ed8:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8010edc:	ed93 6b02 	vldr	d6, [r3, #8]
 8010ee0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010ee4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010ee8:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8010eec:	443b      	add	r3, r7
 8010eee:	ed83 7b00 	vstr	d7, [r3]
 8010ef2:	e019      	b.n	8010f28 <G_q+0xe570>
  } else {
    t34_re = t257.re / 2.0;
 8010ef4:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8010ef8:	ed93 6b00 	vldr	d6, [r3]
 8010efc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010f00:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010f04:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8010f08:	443b      	add	r3, r7
 8010f0a:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t257.im / 2.0;
 8010f0e:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8010f12:	ed93 6b02 	vldr	d6, [r3, #8]
 8010f16:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010f1a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010f1e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8010f22:	443b      	add	r3, r7
 8010f24:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_im += t34_re;
 8010f28:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8010f2c:	ed93 6b00 	vldr	d6, [r3]
 8010f30:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8010f34:	443b      	add	r3, r7
 8010f36:	ed93 7b00 	vldr	d7, [r3]
 8010f3a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8010f3e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8010f42:	ed83 7b00 	vstr	d7, [r3]
  t85_im += t34_im;
 8010f46:	f241 3318 	movw	r3, #4888	; 0x1318
 8010f4a:	443b      	add	r3, r7
 8010f4c:	ed93 6b00 	vldr	d6, [r3]
 8010f50:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8010f54:	443b      	add	r3, r7
 8010f56:	ed93 7b00 	vldr	d7, [r3]
 8010f5a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8010f5e:	f241 3318 	movw	r3, #4888	; 0x1318
 8010f62:	443b      	add	r3, r7
 8010f64:	ed83 7b00 	vstr	d7, [r3]
  t3_im = (t258.re * 0.0 - t258.im * 0.5) - (t259.re * 0.0 - t259.im * 0.5);
 8010f68:	f241 1310 	movw	r3, #4368	; 0x1110
 8010f6c:	443b      	add	r3, r7
 8010f6e:	ed93 7b00 	vldr	d7, [r3]
 8010f72:	ed9f 6bd5 	vldr	d6, [pc, #852]	; 80112c8 <G_q+0xe910>
 8010f76:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010f7a:	f241 1310 	movw	r3, #4368	; 0x1110
 8010f7e:	443b      	add	r3, r7
 8010f80:	ed93 7b02 	vldr	d7, [r3, #8]
 8010f84:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010f88:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010f8c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010f90:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8010f94:	ed93 7b00 	vldr	d7, [r3]
 8010f98:	ed9f 5bcb 	vldr	d5, [pc, #812]	; 80112c8 <G_q+0xe910>
 8010f9c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8010fa0:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8010fa4:	ed93 7b02 	vldr	d7, [r3, #8]
 8010fa8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8010fac:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010fb0:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010fb4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010fb8:	f241 3310 	movw	r3, #4880	; 0x1310
 8010fbc:	443b      	add	r3, r7
 8010fbe:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t258.re * 0.5 + t258.im * 0.0) - (t259.re * 0.5 + t259.im * 0.0);
 8010fc2:	f241 1310 	movw	r3, #4368	; 0x1110
 8010fc6:	443b      	add	r3, r7
 8010fc8:	ed93 7b00 	vldr	d7, [r3]
 8010fcc:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8010fd0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010fd4:	f241 1310 	movw	r3, #4368	; 0x1110
 8010fd8:	443b      	add	r3, r7
 8010fda:	ed93 7b02 	vldr	d7, [r3, #8]
 8010fde:	ed9f 5bba 	vldr	d5, [pc, #744]	; 80112c8 <G_q+0xe910>
 8010fe2:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010fe6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010fea:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8010fee:	ed93 7b00 	vldr	d7, [r3]
 8010ff2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010ff6:	ee27 5b05 	vmul.f64	d5, d7, d5
 8010ffa:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8010ffe:	ed93 7b02 	vldr	d7, [r3, #8]
 8011002:	ed9f 4bb1 	vldr	d4, [pc, #708]	; 80112c8 <G_q+0xe910>
 8011006:	ee27 7b04 	vmul.f64	d7, d7, d4
 801100a:	ee35 7b07 	vadd.f64	d7, d5, d7
 801100e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011012:	f241 3378 	movw	r3, #4984	; 0x1378
 8011016:	443b      	add	r3, r7
 8011018:	ed83 7b00 	vstr	d7, [r3]
  if (t262.im == 0.0) {
 801101c:	f241 1330 	movw	r3, #4400	; 0x1130
 8011020:	443b      	add	r3, r7
 8011022:	ed93 7b02 	vldr	d7, [r3, #8]
 8011026:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801102a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801102e:	d117      	bne.n	8011060 <G_q+0xe6a8>
    t13_im = t262.re / 2.0;
 8011030:	f241 1330 	movw	r3, #4400	; 0x1130
 8011034:	443b      	add	r3, r7
 8011036:	ed93 6b00 	vldr	d6, [r3]
 801103a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801103e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011042:	f241 3370 	movw	r3, #4976	; 0x1370
 8011046:	443b      	add	r3, r7
 8011048:	ed83 7b00 	vstr	d7, [r3]
    t16_re = 0.0;
 801104c:	f04f 0300 	mov.w	r3, #0
 8011050:	f04f 0400 	mov.w	r4, #0
 8011054:	f241 3268 	movw	r2, #4968	; 0x1368
 8011058:	443a      	add	r2, r7
 801105a:	e9c2 3400 	strd	r3, r4, [r2]
 801105e:	e03d      	b.n	80110dc <G_q+0xe724>
  } else if (t262.re == 0.0) {
 8011060:	f241 1330 	movw	r3, #4400	; 0x1130
 8011064:	443b      	add	r3, r7
 8011066:	ed93 7b00 	vldr	d7, [r3]
 801106a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801106e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011072:	d117      	bne.n	80110a4 <G_q+0xe6ec>
    t13_im = 0.0;
 8011074:	f04f 0300 	mov.w	r3, #0
 8011078:	f04f 0400 	mov.w	r4, #0
 801107c:	f241 3270 	movw	r2, #4976	; 0x1370
 8011080:	443a      	add	r2, r7
 8011082:	e9c2 3400 	strd	r3, r4, [r2]
    t16_re = t262.im / 2.0;
 8011086:	f241 1330 	movw	r3, #4400	; 0x1130
 801108a:	443b      	add	r3, r7
 801108c:	ed93 6b02 	vldr	d6, [r3, #8]
 8011090:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011094:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011098:	f241 3368 	movw	r3, #4968	; 0x1368
 801109c:	443b      	add	r3, r7
 801109e:	ed83 7b00 	vstr	d7, [r3]
 80110a2:	e01b      	b.n	80110dc <G_q+0xe724>
  } else {
    t13_im = t262.re / 2.0;
 80110a4:	f241 1330 	movw	r3, #4400	; 0x1130
 80110a8:	443b      	add	r3, r7
 80110aa:	ed93 6b00 	vldr	d6, [r3]
 80110ae:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80110b2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80110b6:	f241 3370 	movw	r3, #4976	; 0x1370
 80110ba:	443b      	add	r3, r7
 80110bc:	ed83 7b00 	vstr	d7, [r3]
    t16_re = t262.im / 2.0;
 80110c0:	f241 1330 	movw	r3, #4400	; 0x1130
 80110c4:	443b      	add	r3, r7
 80110c6:	ed93 6b02 	vldr	d6, [r3, #8]
 80110ca:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80110ce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80110d2:	f241 3368 	movw	r3, #4968	; 0x1368
 80110d6:	443b      	add	r3, r7
 80110d8:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t263.im == 0.0) {
 80110dc:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80110e0:	ed93 7b02 	vldr	d7, [r3, #8]
 80110e4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80110e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110ec:	d116      	bne.n	801111c <G_q+0xe764>
    t34_re = t263.re / 2.0;
 80110ee:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80110f2:	ed93 6b00 	vldr	d6, [r3]
 80110f6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80110fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80110fe:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8011102:	443b      	add	r3, r7
 8011104:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8011108:	f04f 0300 	mov.w	r3, #0
 801110c:	f04f 0400 	mov.w	r4, #0
 8011110:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8011114:	443a      	add	r2, r7
 8011116:	e9c2 3400 	strd	r3, r4, [r2]
 801111a:	e039      	b.n	8011190 <G_q+0xe7d8>
  } else if (t263.re == 0.0) {
 801111c:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8011120:	ed93 7b00 	vldr	d7, [r3]
 8011124:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801112c:	d116      	bne.n	801115c <G_q+0xe7a4>
    t34_re = 0.0;
 801112e:	f04f 0300 	mov.w	r3, #0
 8011132:	f04f 0400 	mov.w	r4, #0
 8011136:	f241 32b8 	movw	r2, #5048	; 0x13b8
 801113a:	443a      	add	r2, r7
 801113c:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t263.im / 2.0;
 8011140:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8011144:	ed93 6b02 	vldr	d6, [r3, #8]
 8011148:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801114c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011150:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8011154:	443b      	add	r3, r7
 8011156:	ed83 7b00 	vstr	d7, [r3]
 801115a:	e019      	b.n	8011190 <G_q+0xe7d8>
  } else {
    t34_re = t263.re / 2.0;
 801115c:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8011160:	ed93 6b00 	vldr	d6, [r3]
 8011164:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011168:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801116c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8011170:	443b      	add	r3, r7
 8011172:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t263.im / 2.0;
 8011176:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 801117a:	ed93 6b02 	vldr	d6, [r3, #8]
 801117e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011182:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011186:	f241 33b0 	movw	r3, #5040	; 0x13b0
 801118a:	443b      	add	r3, r7
 801118c:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_im = (t260.re * 0.0 - t260.im * 0.5) - (t261.re * 0.0 - t261.im * 0.5);
 8011190:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 8011194:	ed93 7b00 	vldr	d7, [r3]
 8011198:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 80112c8 <G_q+0xe910>
 801119c:	ee27 6b06 	vmul.f64	d6, d7, d6
 80111a0:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 80111a4:	ed93 7b02 	vldr	d7, [r3, #8]
 80111a8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80111ac:	ee27 7b05 	vmul.f64	d7, d7, d5
 80111b0:	ee36 6b47 	vsub.f64	d6, d6, d7
 80111b4:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 80111b8:	ed93 7b00 	vldr	d7, [r3]
 80111bc:	ed9f 5b42 	vldr	d5, [pc, #264]	; 80112c8 <G_q+0xe910>
 80111c0:	ee27 5b05 	vmul.f64	d5, d7, d5
 80111c4:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 80111c8:	ed93 7b02 	vldr	d7, [r3, #8]
 80111cc:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80111d0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80111d4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80111d8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80111dc:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80111e0:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t260.re * 0.5 + t260.im * 0.0) - (t261.re * 0.5 + t261.im * 0.0);
 80111e4:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 80111e8:	ed93 7b00 	vldr	d7, [r3]
 80111ec:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80111f0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80111f4:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 80111f8:	ed93 7b02 	vldr	d7, [r3, #8]
 80111fc:	ed9f 5b32 	vldr	d5, [pc, #200]	; 80112c8 <G_q+0xe910>
 8011200:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011204:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011208:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 801120c:	ed93 7b00 	vldr	d7, [r3]
 8011210:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8011214:	ee27 5b05 	vmul.f64	d5, d7, d5
 8011218:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 801121c:	ed93 7b02 	vldr	d7, [r3, #8]
 8011220:	ed9f 4b29 	vldr	d4, [pc, #164]	; 80112c8 <G_q+0xe910>
 8011224:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011228:	ee35 7b07 	vadd.f64	d7, d5, d7
 801122c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011230:	f241 3348 	movw	r3, #4936	; 0x1348
 8011234:	443b      	add	r3, r7
 8011236:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t13_im + t34_re) + 7.498798913309288E-33;
 801123a:	f241 3370 	movw	r3, #4976	; 0x1370
 801123e:	443b      	add	r3, r7
 8011240:	ed93 6b00 	vldr	d6, [r3]
 8011244:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8011248:	443b      	add	r3, r7
 801124a:	ed93 7b00 	vldr	d7, [r3]
 801124e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011252:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80112d0 <G_q+0xe918>
 8011256:	ee37 7b06 	vadd.f64	d7, d7, d6
 801125a:	f241 3370 	movw	r3, #4976	; 0x1370
 801125e:	443b      	add	r3, r7
 8011260:	ed83 7b00 	vstr	d7, [r3]
  t16_re += t34_im;
 8011264:	f241 3368 	movw	r3, #4968	; 0x1368
 8011268:	443b      	add	r3, r7
 801126a:	ed93 6b00 	vldr	d6, [r3]
 801126e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8011272:	443b      	add	r3, r7
 8011274:	ed93 7b00 	vldr	d7, [r3]
 8011278:	ee36 7b07 	vadd.f64	d7, d6, d7
 801127c:	f241 3368 	movw	r3, #4968	; 0x1368
 8011280:	443b      	add	r3, r7
 8011282:	ed83 7b00 	vstr	d7, [r3]
  if (t254.im == 0.0) {
 8011286:	f507 7354 	add.w	r3, r7, #848	; 0x350
 801128a:	ed93 7b02 	vldr	d7, [r3, #8]
 801128e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011296:	d11f      	bne.n	80112d8 <G_q+0xe920>
    t12_re = t254.re / 2.0;
 8011298:	f507 7354 	add.w	r3, r7, #848	; 0x350
 801129c:	ed93 6b00 	vldr	d6, [r3]
 80112a0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80112a4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80112a8:	f241 3388 	movw	r3, #5000	; 0x1388
 80112ac:	443b      	add	r3, r7
 80112ae:	ed83 7b00 	vstr	d7, [r3]
    t12_im = 0.0;
 80112b2:	f04f 0300 	mov.w	r3, #0
 80112b6:	f04f 0400 	mov.w	r4, #0
 80112ba:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80112be:	e9c2 3400 	strd	r3, r4, [r2]
 80112c2:	e041      	b.n	8011348 <G_q+0xe990>
 80112c4:	f3af 8000 	nop.w
	...
 80112d0:	858a5d48 	.word	0x858a5d48
 80112d4:	394377ce 	.word	0x394377ce
  } else if (t254.re == 0.0) {
 80112d8:	f507 7354 	add.w	r3, r7, #848	; 0x350
 80112dc:	ed93 7b00 	vldr	d7, [r3]
 80112e0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80112e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112e8:	d115      	bne.n	8011316 <G_q+0xe95e>
    t12_re = 0.0;
 80112ea:	f04f 0300 	mov.w	r3, #0
 80112ee:	f04f 0400 	mov.w	r4, #0
 80112f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80112f6:	443a      	add	r2, r7
 80112f8:	e9c2 3400 	strd	r3, r4, [r2]
    t12_im = t254.im / 2.0;
 80112fc:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8011300:	ed93 6b02 	vldr	d6, [r3, #8]
 8011304:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011308:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801130c:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8011310:	ed83 7b00 	vstr	d7, [r3]
 8011314:	e018      	b.n	8011348 <G_q+0xe990>
  } else {
    t12_re = t254.re / 2.0;
 8011316:	f507 7354 	add.w	r3, r7, #848	; 0x350
 801131a:	ed93 6b00 	vldr	d6, [r3]
 801131e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011322:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011326:	f241 3388 	movw	r3, #5000	; 0x1388
 801132a:	443b      	add	r3, r7
 801132c:	ed83 7b00 	vstr	d7, [r3]
    t12_im = t254.im / 2.0;
 8011330:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8011334:	ed93 6b02 	vldr	d6, [r3, #8]
 8011338:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801133c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011340:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8011344:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t255.im == 0.0) {
 8011348:	4b25      	ldr	r3, [pc, #148]	; (80113e0 <G_q+0xea28>)
 801134a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 801134e:	443a      	add	r2, r7
 8011350:	4413      	add	r3, r2
 8011352:	ed93 7b02 	vldr	d7, [r3, #8]
 8011356:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801135a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801135e:	d119      	bne.n	8011394 <G_q+0xe9dc>
    t34_re = t255.re / 2.0;
 8011360:	4b1f      	ldr	r3, [pc, #124]	; (80113e0 <G_q+0xea28>)
 8011362:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8011366:	443a      	add	r2, r7
 8011368:	4413      	add	r3, r2
 801136a:	ed93 6b00 	vldr	d6, [r3]
 801136e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011372:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011376:	f241 33b8 	movw	r3, #5048	; 0x13b8
 801137a:	443b      	add	r3, r7
 801137c:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8011380:	f04f 0300 	mov.w	r3, #0
 8011384:	f04f 0400 	mov.w	r4, #0
 8011388:	f241 32b0 	movw	r2, #5040	; 0x13b0
 801138c:	443a      	add	r2, r7
 801138e:	e9c2 3400 	strd	r3, r4, [r2]
 8011392:	e047      	b.n	8011424 <G_q+0xea6c>
  } else if (t255.re == 0.0) {
 8011394:	4b12      	ldr	r3, [pc, #72]	; (80113e0 <G_q+0xea28>)
 8011396:	f241 32d0 	movw	r2, #5072	; 0x13d0
 801139a:	443a      	add	r2, r7
 801139c:	4413      	add	r3, r2
 801139e:	ed93 7b00 	vldr	d7, [r3]
 80113a2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80113a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113aa:	d11b      	bne.n	80113e4 <G_q+0xea2c>
    t34_re = 0.0;
 80113ac:	f04f 0300 	mov.w	r3, #0
 80113b0:	f04f 0400 	mov.w	r4, #0
 80113b4:	f241 32b8 	movw	r2, #5048	; 0x13b8
 80113b8:	443a      	add	r2, r7
 80113ba:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t255.im / 2.0;
 80113be:	4b08      	ldr	r3, [pc, #32]	; (80113e0 <G_q+0xea28>)
 80113c0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80113c4:	443a      	add	r2, r7
 80113c6:	4413      	add	r3, r2
 80113c8:	ed93 6b02 	vldr	d6, [r3, #8]
 80113cc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80113d0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80113d4:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80113d8:	443b      	add	r3, r7
 80113da:	ed83 7b00 	vstr	d7, [r3]
 80113de:	e021      	b.n	8011424 <G_q+0xea6c>
 80113e0:	ffffef90 	.word	0xffffef90
  } else {
    t34_re = t255.re / 2.0;
 80113e4:	4be4      	ldr	r3, [pc, #912]	; (8011778 <G_q+0xedc0>)
 80113e6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80113ea:	443a      	add	r2, r7
 80113ec:	4413      	add	r3, r2
 80113ee:	ed93 6b00 	vldr	d6, [r3]
 80113f2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80113f6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80113fa:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80113fe:	443b      	add	r3, r7
 8011400:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t255.im / 2.0;
 8011404:	4bdc      	ldr	r3, [pc, #880]	; (8011778 <G_q+0xedc0>)
 8011406:	f241 32d0 	movw	r2, #5072	; 0x13d0
 801140a:	443a      	add	r2, r7
 801140c:	4413      	add	r3, r2
 801140e:	ed93 6b02 	vldr	d6, [r3, #8]
 8011412:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011416:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801141a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 801141e:	443b      	add	r3, r7
 8011420:	ed83 7b00 	vstr	d7, [r3]
  }

  t23_re = (t20_im * t3_im - t85_im * t13_re) - (t16_im * t13_im - t20_re *
 8011424:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8011428:	ed93 6b00 	vldr	d6, [r3]
 801142c:	f241 3310 	movw	r3, #4880	; 0x1310
 8011430:	443b      	add	r3, r7
 8011432:	ed93 7b00 	vldr	d7, [r3]
 8011436:	ee26 6b07 	vmul.f64	d6, d6, d7
 801143a:	f241 3318 	movw	r3, #4888	; 0x1318
 801143e:	443b      	add	r3, r7
 8011440:	ed93 5b00 	vldr	d5, [r3]
 8011444:	f241 3378 	movw	r3, #4984	; 0x1378
 8011448:	443b      	add	r3, r7
 801144a:	ed93 7b00 	vldr	d7, [r3]
 801144e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8011452:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011456:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 801145a:	ed93 5b00 	vldr	d5, [r3]
 801145e:	f241 3370 	movw	r3, #4976	; 0x1370
 8011462:	443b      	add	r3, r7
 8011464:	ed93 7b00 	vldr	d7, [r3]
 8011468:	ee25 5b07 	vmul.f64	d5, d5, d7
 801146c:	f241 3348 	movw	r3, #4936	; 0x1348
 8011470:	443b      	add	r3, r7
 8011472:	ed93 4b00 	vldr	d4, [r3]
 8011476:	f241 3368 	movw	r3, #4968	; 0x1368
 801147a:	443b      	add	r3, r7
 801147c:	ed93 7b00 	vldr	d7, [r3]
 8011480:	ee24 7b07 	vmul.f64	d7, d4, d7
 8011484:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011488:	ee36 7b47 	vsub.f64	d7, d6, d7
 801148c:	f241 3330 	movw	r3, #4912	; 0x1330
 8011490:	443b      	add	r3, r7
 8011492:	ed83 7b00 	vstr	d7, [r3]
    t16_re);
  t85_im = (t20_im * t13_re + t85_im * t3_im) - (t16_im * t16_re + t20_re *
 8011496:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 801149a:	ed93 6b00 	vldr	d6, [r3]
 801149e:	f241 3378 	movw	r3, #4984	; 0x1378
 80114a2:	443b      	add	r3, r7
 80114a4:	ed93 7b00 	vldr	d7, [r3]
 80114a8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80114ac:	f241 3318 	movw	r3, #4888	; 0x1318
 80114b0:	443b      	add	r3, r7
 80114b2:	ed93 5b00 	vldr	d5, [r3]
 80114b6:	f241 3310 	movw	r3, #4880	; 0x1310
 80114ba:	443b      	add	r3, r7
 80114bc:	ed93 7b00 	vldr	d7, [r3]
 80114c0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80114c4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80114c8:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80114cc:	ed93 5b00 	vldr	d5, [r3]
 80114d0:	f241 3368 	movw	r3, #4968	; 0x1368
 80114d4:	443b      	add	r3, r7
 80114d6:	ed93 7b00 	vldr	d7, [r3]
 80114da:	ee25 5b07 	vmul.f64	d5, d5, d7
 80114de:	f241 3348 	movw	r3, #4936	; 0x1348
 80114e2:	443b      	add	r3, r7
 80114e4:	ed93 4b00 	vldr	d4, [r3]
 80114e8:	f241 3370 	movw	r3, #4976	; 0x1370
 80114ec:	443b      	add	r3, r7
 80114ee:	ed93 7b00 	vldr	d7, [r3]
 80114f2:	ee24 7b07 	vmul.f64	d7, d4, d7
 80114f6:	ee35 7b07 	vadd.f64	d7, d5, d7
 80114fa:	ee36 7b47 	vsub.f64	d7, d6, d7
 80114fe:	f241 3318 	movw	r3, #4888	; 0x1318
 8011502:	443b      	add	r3, r7
 8011504:	ed83 7b00 	vstr	d7, [r3]
    t13_im);
  t12_re += t34_re;
 8011508:	f241 3388 	movw	r3, #5000	; 0x1388
 801150c:	443b      	add	r3, r7
 801150e:	ed93 6b00 	vldr	d6, [r3]
 8011512:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8011516:	443b      	add	r3, r7
 8011518:	ed93 7b00 	vldr	d7, [r3]
 801151c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011520:	f241 3388 	movw	r3, #5000	; 0x1388
 8011524:	443b      	add	r3, r7
 8011526:	ed83 7b00 	vstr	d7, [r3]
  t12_im += t34_im;
 801152a:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 801152e:	ed93 6b00 	vldr	d6, [r3]
 8011532:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8011536:	443b      	add	r3, r7
 8011538:	ed93 7b00 	vldr	d7, [r3]
 801153c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011540:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8011544:	ed83 7b00 	vstr	d7, [r3]
  t70_im += t76_re;
 8011548:	f241 23c8 	movw	r3, #4808	; 0x12c8
 801154c:	443b      	add	r3, r7
 801154e:	f241 21c8 	movw	r1, #4808	; 0x12c8
 8011552:	4439      	add	r1, r7
 8011554:	f241 22a8 	movw	r2, #4776	; 0x12a8
 8011558:	443a      	add	r2, r7
 801155a:	ed91 6b00 	vldr	d6, [r1]
 801155e:	ed92 7b00 	vldr	d7, [r2]
 8011562:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011566:	ed83 7b00 	vstr	d7, [r3]
  t43_im += t72_re;
 801156a:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 801156e:	f241 22f8 	movw	r2, #4856	; 0x12f8
 8011572:	443a      	add	r2, r7
 8011574:	ed92 6b00 	vldr	d6, [r2]
 8011578:	ed93 7b00 	vldr	d7, [r3]
 801157c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011580:	f241 23f8 	movw	r3, #4856	; 0x12f8
 8011584:	443b      	add	r3, r7
 8011586:	ed83 7b00 	vstr	d7, [r3]
  t55_im = (t58_im * t60_re - t70_re * b_t10_re) - (t23_re * t12_re - t85_im *
 801158a:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 801158e:	f241 2350 	movw	r3, #4688	; 0x1250
 8011592:	443b      	add	r3, r7
 8011594:	ed92 6b00 	vldr	d6, [r2]
 8011598:	ed93 7b00 	vldr	d7, [r3]
 801159c:	ee26 6b07 	vmul.f64	d6, d6, d7
 80115a0:	f241 23d0 	movw	r3, #4816	; 0x12d0
 80115a4:	443b      	add	r3, r7
 80115a6:	ed93 5b00 	vldr	d5, [r3]
 80115aa:	f241 3338 	movw	r3, #4920	; 0x1338
 80115ae:	443b      	add	r3, r7
 80115b0:	ed93 7b00 	vldr	d7, [r3]
 80115b4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80115b8:	ee36 6b47 	vsub.f64	d6, d6, d7
 80115bc:	f241 3330 	movw	r3, #4912	; 0x1330
 80115c0:	443b      	add	r3, r7
 80115c2:	ed93 5b00 	vldr	d5, [r3]
 80115c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80115ca:	443b      	add	r3, r7
 80115cc:	ed93 7b00 	vldr	d7, [r3]
 80115d0:	ee25 5b07 	vmul.f64	d5, d5, d7
 80115d4:	f241 3318 	movw	r3, #4888	; 0x1318
 80115d8:	443b      	add	r3, r7
 80115da:	ed93 4b00 	vldr	d4, [r3]
 80115de:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80115e2:	ed93 7b00 	vldr	d7, [r3]
 80115e6:	ee24 7b07 	vmul.f64	d7, d4, d7
 80115ea:	ee35 7b47 	vsub.f64	d7, d5, d7
 80115ee:	ee36 7b47 	vsub.f64	d7, d6, d7
 80115f2:	f241 23d8 	movw	r3, #4824	; 0x12d8
 80115f6:	443b      	add	r3, r7
 80115f8:	ed83 7b00 	vstr	d7, [r3]
    t12_im);
  t70_re = (t58_im * b_t10_re + t70_re * t60_re) - (t23_re * t12_im + t85_im *
 80115fc:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8011600:	ed93 6b00 	vldr	d6, [r3]
 8011604:	f241 3338 	movw	r3, #4920	; 0x1338
 8011608:	443b      	add	r3, r7
 801160a:	ed93 7b00 	vldr	d7, [r3]
 801160e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011612:	f241 22d0 	movw	r2, #4816	; 0x12d0
 8011616:	443a      	add	r2, r7
 8011618:	f241 2350 	movw	r3, #4688	; 0x1250
 801161c:	443b      	add	r3, r7
 801161e:	ed92 5b00 	vldr	d5, [r2]
 8011622:	ed93 7b00 	vldr	d7, [r3]
 8011626:	ee25 7b07 	vmul.f64	d7, d5, d7
 801162a:	ee36 6b07 	vadd.f64	d6, d6, d7
 801162e:	f241 3330 	movw	r3, #4912	; 0x1330
 8011632:	443b      	add	r3, r7
 8011634:	ed93 5b00 	vldr	d5, [r3]
 8011638:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 801163c:	ed93 7b00 	vldr	d7, [r3]
 8011640:	ee25 5b07 	vmul.f64	d5, d5, d7
 8011644:	f241 3318 	movw	r3, #4888	; 0x1318
 8011648:	443b      	add	r3, r7
 801164a:	ed93 4b00 	vldr	d4, [r3]
 801164e:	f241 3388 	movw	r3, #5000	; 0x1388
 8011652:	443b      	add	r3, r7
 8011654:	ed93 7b00 	vldr	d7, [r3]
 8011658:	ee24 7b07 	vmul.f64	d7, d4, d7
 801165c:	ee35 7b07 	vadd.f64	d7, d5, d7
 8011660:	f241 23d0 	movw	r3, #4816	; 0x12d0
 8011664:	443b      	add	r3, r7
 8011666:	ee36 7b47 	vsub.f64	d7, d6, d7
 801166a:	ed83 7b00 	vstr	d7, [r3]
    t12_re);
  t72_re = (t280.re * 0.0 - t280.im * 0.5) - (t281.re * 0.0 - t281.im * 0.5);
 801166e:	f241 13b0 	movw	r3, #4528	; 0x11b0
 8011672:	443b      	add	r3, r7
 8011674:	ed93 7b00 	vldr	d7, [r3]
 8011678:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8011770 <G_q+0xedb8>
 801167c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011680:	f241 13b0 	movw	r3, #4528	; 0x11b0
 8011684:	443b      	add	r3, r7
 8011686:	ed93 7b02 	vldr	d7, [r3, #8]
 801168a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801168e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011692:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011696:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 801169a:	ed93 7b00 	vldr	d7, [r3]
 801169e:	ed9f 5b34 	vldr	d5, [pc, #208]	; 8011770 <G_q+0xedb8>
 80116a2:	ee27 5b05 	vmul.f64	d5, d7, d5
 80116a6:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 80116aa:	ed93 7b02 	vldr	d7, [r3, #8]
 80116ae:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80116b2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80116b6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80116ba:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 80116be:	ee36 7b47 	vsub.f64	d7, d6, d7
 80116c2:	ed83 7b00 	vstr	d7, [r3]
  t74_re = (t280.re * 0.5 + t280.im * 0.0) - (t281.re * 0.5 + t281.im * 0.0);
 80116c6:	f241 13b0 	movw	r3, #4528	; 0x11b0
 80116ca:	443b      	add	r3, r7
 80116cc:	ed93 7b00 	vldr	d7, [r3]
 80116d0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80116d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80116d8:	f241 13b0 	movw	r3, #4528	; 0x11b0
 80116dc:	443b      	add	r3, r7
 80116de:	ed93 7b02 	vldr	d7, [r3, #8]
 80116e2:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8011770 <G_q+0xedb8>
 80116e6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80116ea:	ee36 6b07 	vadd.f64	d6, d6, d7
 80116ee:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 80116f2:	ed93 7b00 	vldr	d7, [r3]
 80116f6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80116fa:	ee27 5b05 	vmul.f64	d5, d7, d5
 80116fe:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8011702:	ed93 7b02 	vldr	d7, [r3, #8]
 8011706:	ed9f 4b1a 	vldr	d4, [pc, #104]	; 8011770 <G_q+0xedb8>
 801170a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801170e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8011712:	f241 23b8 	movw	r3, #4792	; 0x12b8
 8011716:	443b      	add	r3, r7
 8011718:	ee36 7b47 	vsub.f64	d7, d6, d7
 801171c:	ed83 7b00 	vstr	d7, [r3]
  t74_im = (t282.re * 0.0 - t282.im * 0.5) - (t283.re * 0.0 - t283.im * 0.5);
 8011720:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8011724:	ed93 7b00 	vldr	d7, [r3]
 8011728:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8011770 <G_q+0xedb8>
 801172c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011730:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8011734:	ed93 7b02 	vldr	d7, [r3, #8]
 8011738:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801173c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011740:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011744:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011748:	ed93 7b00 	vldr	d7, [r3]
 801174c:	ed9f 5b08 	vldr	d5, [pc, #32]	; 8011770 <G_q+0xedb8>
 8011750:	ee27 5b05 	vmul.f64	d5, d7, d5
 8011754:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011758:	ed93 7b02 	vldr	d7, [r3, #8]
 801175c:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8011760:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011764:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011768:	f241 23b0 	movw	r3, #4784	; 0x12b0
 801176c:	443b      	add	r3, r7
 801176e:	e005      	b.n	801177c <G_q+0xedc4>
	...
 8011778:	ffffef90 	.word	0xffffef90
 801177c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011780:	ed83 7b00 	vstr	d7, [r3]
  t55_re = (t282.re * 0.5 + t282.im * 0.0) - (t283.re * 0.5 + t283.im * 0.0);
 8011784:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8011788:	ed93 7b00 	vldr	d7, [r3]
 801178c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8011790:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011794:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8011798:	ed93 7b02 	vldr	d7, [r3, #8]
 801179c:	ed9f 5bb6 	vldr	d5, [pc, #728]	; 8011a78 <G_q+0xf0c0>
 80117a0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80117a4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80117a8:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80117ac:	ed93 7b00 	vldr	d7, [r3]
 80117b0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80117b4:	ee27 5b05 	vmul.f64	d5, d7, d5
 80117b8:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80117bc:	ed93 7b02 	vldr	d7, [r3, #8]
 80117c0:	ed9f 4bad 	vldr	d4, [pc, #692]	; 8011a78 <G_q+0xf0c0>
 80117c4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80117c8:	ee35 7b07 	vadd.f64	d7, d5, d7
 80117cc:	ee36 7b47 	vsub.f64	d7, d6, d7
 80117d0:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 80117d4:	ed83 7b00 	vstr	d7, [r3]
  t12_re = (t294.re * 0.0 - t294.im * 3.061616997868383E-17) - (t295.re * 0.0 -
 80117d8:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80117dc:	ed93 7b00 	vldr	d7, [r3]
 80117e0:	ed9f 6ba5 	vldr	d6, [pc, #660]	; 8011a78 <G_q+0xf0c0>
 80117e4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80117e8:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80117ec:	ed93 7b02 	vldr	d7, [r3, #8]
 80117f0:	ed9f 5ba5 	vldr	d5, [pc, #660]	; 8011a88 <G_q+0xf0d0>
 80117f4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80117f8:	ee36 6b47 	vsub.f64	d6, d6, d7
 80117fc:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 8011800:	ed93 7b00 	vldr	d7, [r3]
 8011804:	ed9f 5b9c 	vldr	d5, [pc, #624]	; 8011a78 <G_q+0xf0c0>
 8011808:	ee27 5b05 	vmul.f64	d5, d7, d5
    t295.im * 3.061616997868383E-17);
 801180c:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 8011810:	ed93 7b02 	vldr	d7, [r3, #8]
 8011814:	ed9f 4b9c 	vldr	d4, [pc, #624]	; 8011a88 <G_q+0xf0d0>
 8011818:	ee27 7b04 	vmul.f64	d7, d7, d4
  t12_re = (t294.re * 0.0 - t294.im * 3.061616997868383E-17) - (t295.re * 0.0 -
 801181c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011820:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011824:	f241 3388 	movw	r3, #5000	; 0x1388
 8011828:	443b      	add	r3, r7
 801182a:	ed83 7b00 	vstr	d7, [r3]
  t12_im = (t294.re * 3.061616997868383E-17 + t294.im * 0.0) - (t295.re *
 801182e:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8011832:	ed93 7b00 	vldr	d7, [r3]
 8011836:	ed9f 6b94 	vldr	d6, [pc, #592]	; 8011a88 <G_q+0xf0d0>
 801183a:	ee27 6b06 	vmul.f64	d6, d7, d6
 801183e:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8011842:	ed93 7b02 	vldr	d7, [r3, #8]
 8011846:	ed9f 5b8c 	vldr	d5, [pc, #560]	; 8011a78 <G_q+0xf0c0>
 801184a:	ee27 7b05 	vmul.f64	d7, d7, d5
 801184e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011852:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 8011856:	ed93 7b00 	vldr	d7, [r3]
 801185a:	ed9f 5b8b 	vldr	d5, [pc, #556]	; 8011a88 <G_q+0xf0d0>
 801185e:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t295.im * 0.0);
 8011862:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 8011866:	ed93 7b02 	vldr	d7, [r3, #8]
 801186a:	ed9f 4b83 	vldr	d4, [pc, #524]	; 8011a78 <G_q+0xf0c0>
 801186e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011872:	ee35 7b07 	vadd.f64	d7, d5, d7
  t12_im = (t294.re * 3.061616997868383E-17 + t294.im * 0.0) - (t295.re *
 8011876:	ee36 7b47 	vsub.f64	d7, d6, d7
 801187a:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 801187e:	ed83 7b00 	vstr	d7, [r3]
  t23_re = (t292.re * 0.0 - t292.im * 0.5) - (t293.re * 0.0 - t293.im * 0.5);
 8011882:	f241 2310 	movw	r3, #4624	; 0x1210
 8011886:	443b      	add	r3, r7
 8011888:	ed93 7b00 	vldr	d7, [r3]
 801188c:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8011a78 <G_q+0xf0c0>
 8011890:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011894:	f241 2310 	movw	r3, #4624	; 0x1210
 8011898:	443b      	add	r3, r7
 801189a:	ed93 7b02 	vldr	d7, [r3, #8]
 801189e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80118a2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80118a6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80118aa:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 80118ae:	ed93 7b00 	vldr	d7, [r3]
 80118b2:	ed9f 5b71 	vldr	d5, [pc, #452]	; 8011a78 <G_q+0xf0c0>
 80118b6:	ee27 5b05 	vmul.f64	d5, d7, d5
 80118ba:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 80118be:	ed93 7b02 	vldr	d7, [r3, #8]
 80118c2:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80118c6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80118ca:	ee35 7b47 	vsub.f64	d7, d5, d7
 80118ce:	ee36 7b47 	vsub.f64	d7, d6, d7
 80118d2:	f241 3330 	movw	r3, #4912	; 0x1330
 80118d6:	443b      	add	r3, r7
 80118d8:	ed83 7b00 	vstr	d7, [r3]
  t3_im = (t292.re * 0.5 + t292.im * 0.0) - (t293.re * 0.5 + t293.im * 0.0);
 80118dc:	f241 2310 	movw	r3, #4624	; 0x1210
 80118e0:	443b      	add	r3, r7
 80118e2:	ed93 7b00 	vldr	d7, [r3]
 80118e6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80118ea:	ee27 6b06 	vmul.f64	d6, d7, d6
 80118ee:	f241 2310 	movw	r3, #4624	; 0x1210
 80118f2:	443b      	add	r3, r7
 80118f4:	ed93 7b02 	vldr	d7, [r3, #8]
 80118f8:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 8011a78 <G_q+0xf0c0>
 80118fc:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011900:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011904:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8011908:	ed93 7b00 	vldr	d7, [r3]
 801190c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8011910:	ee27 5b05 	vmul.f64	d5, d7, d5
 8011914:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8011918:	ed93 7b02 	vldr	d7, [r3, #8]
 801191c:	ed9f 4b56 	vldr	d4, [pc, #344]	; 8011a78 <G_q+0xf0c0>
 8011920:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011924:	ee35 7b07 	vadd.f64	d7, d5, d7
 8011928:	ee36 7b47 	vsub.f64	d7, d6, d7
 801192c:	f241 3310 	movw	r3, #4880	; 0x1310
 8011930:	443b      	add	r3, r7
 8011932:	ed83 7b00 	vstr	d7, [r3]
  if (t290.im == 0.0) {
 8011936:	f241 13f0 	movw	r3, #4592	; 0x11f0
 801193a:	443b      	add	r3, r7
 801193c:	ed93 7b02 	vldr	d7, [r3, #8]
 8011940:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011948:	d117      	bne.n	801197a <G_q+0xefc2>
    t13_re = t290.re / 2.0;
 801194a:	f241 13f0 	movw	r3, #4592	; 0x11f0
 801194e:	443b      	add	r3, r7
 8011950:	ed93 6b00 	vldr	d6, [r3]
 8011954:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011958:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801195c:	f241 3378 	movw	r3, #4984	; 0x1378
 8011960:	443b      	add	r3, r7
 8011962:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 8011966:	f04f 0300 	mov.w	r3, #0
 801196a:	f04f 0400 	mov.w	r4, #0
 801196e:	f241 3270 	movw	r2, #4976	; 0x1370
 8011972:	443a      	add	r2, r7
 8011974:	e9c2 3400 	strd	r3, r4, [r2]
 8011978:	e03d      	b.n	80119f6 <G_q+0xf03e>
  } else if (t290.re == 0.0) {
 801197a:	f241 13f0 	movw	r3, #4592	; 0x11f0
 801197e:	443b      	add	r3, r7
 8011980:	ed93 7b00 	vldr	d7, [r3]
 8011984:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801198c:	d117      	bne.n	80119be <G_q+0xf006>
    t13_re = 0.0;
 801198e:	f04f 0300 	mov.w	r3, #0
 8011992:	f04f 0400 	mov.w	r4, #0
 8011996:	f241 3278 	movw	r2, #4984	; 0x1378
 801199a:	443a      	add	r2, r7
 801199c:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t290.im / 2.0;
 80119a0:	f241 13f0 	movw	r3, #4592	; 0x11f0
 80119a4:	443b      	add	r3, r7
 80119a6:	ed93 6b02 	vldr	d6, [r3, #8]
 80119aa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80119ae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80119b2:	f241 3370 	movw	r3, #4976	; 0x1370
 80119b6:	443b      	add	r3, r7
 80119b8:	ed83 7b00 	vstr	d7, [r3]
 80119bc:	e01b      	b.n	80119f6 <G_q+0xf03e>
  } else {
    t13_re = t290.re / 2.0;
 80119be:	f241 13f0 	movw	r3, #4592	; 0x11f0
 80119c2:	443b      	add	r3, r7
 80119c4:	ed93 6b00 	vldr	d6, [r3]
 80119c8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80119cc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80119d0:	f241 3378 	movw	r3, #4984	; 0x1378
 80119d4:	443b      	add	r3, r7
 80119d6:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t290.im / 2.0;
 80119da:	f241 13f0 	movw	r3, #4592	; 0x11f0
 80119de:	443b      	add	r3, r7
 80119e0:	ed93 6b02 	vldr	d6, [r3, #8]
 80119e4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80119e8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80119ec:	f241 3370 	movw	r3, #4976	; 0x1370
 80119f0:	443b      	add	r3, r7
 80119f2:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t291.im == 0.0) {
 80119f6:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 80119fa:	ed93 7b02 	vldr	d7, [r3, #8]
 80119fe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a06:	d116      	bne.n	8011a36 <G_q+0xf07e>
    t34_re = t291.re / 2.0;
 8011a08:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8011a0c:	ed93 6b00 	vldr	d6, [r3]
 8011a10:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011a14:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011a18:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8011a1c:	443b      	add	r3, r7
 8011a1e:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8011a22:	f04f 0300 	mov.w	r3, #0
 8011a26:	f04f 0400 	mov.w	r4, #0
 8011a2a:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8011a2e:	443a      	add	r2, r7
 8011a30:	e9c2 3400 	strd	r3, r4, [r2]
 8011a34:	e046      	b.n	8011ac4 <G_q+0xf10c>
  } else if (t291.re == 0.0) {
 8011a36:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8011a3a:	ed93 7b00 	vldr	d7, [r3]
 8011a3e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a46:	d123      	bne.n	8011a90 <G_q+0xf0d8>
    t34_re = 0.0;
 8011a48:	f04f 0300 	mov.w	r3, #0
 8011a4c:	f04f 0400 	mov.w	r4, #0
 8011a50:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8011a54:	443a      	add	r2, r7
 8011a56:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t291.im / 2.0;
 8011a5a:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8011a5e:	ed93 6b02 	vldr	d6, [r3, #8]
 8011a62:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011a66:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011a6a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8011a6e:	443b      	add	r3, r7
 8011a70:	ed83 7b00 	vstr	d7, [r3]
 8011a74:	e026      	b.n	8011ac4 <G_q+0xf10c>
 8011a76:	bf00      	nop
	...
 8011a80:	858a5d48 	.word	0x858a5d48
 8011a84:	394377ce 	.word	0x394377ce
 8011a88:	33145c07 	.word	0x33145c07
 8011a8c:	3c81a626 	.word	0x3c81a626
  } else {
    t34_re = t291.re / 2.0;
 8011a90:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8011a94:	ed93 6b00 	vldr	d6, [r3]
 8011a98:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011a9c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011aa0:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8011aa4:	443b      	add	r3, r7
 8011aa6:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t291.im / 2.0;
 8011aaa:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8011aae:	ed93 6b02 	vldr	d6, [r3, #8]
 8011ab2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011ab6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011aba:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8011abe:	443b      	add	r3, r7
 8011ac0:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re = t288.re * 3.061616997868383E-17 + t289.re * 3.061616997868383E-17;
 8011ac4:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8011ac8:	ed93 7b00 	vldr	d7, [r3]
 8011acc:	ed1f 6b12 	vldr	d6, [pc, #-72]	; 8011a88 <G_q+0xf0d0>
 8011ad0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011ad4:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8011ad8:	ed93 7b00 	vldr	d7, [r3]
 8011adc:	ed1f 5b16 	vldr	d5, [pc, #-88]	; 8011a88 <G_q+0xf0d0>
 8011ae0:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011ae4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011ae8:	f241 3368 	movw	r3, #4968	; 0x1368
 8011aec:	443b      	add	r3, r7
 8011aee:	ed83 7b00 	vstr	d7, [r3]
  t16_im = t288.im * 3.061616997868383E-17 + t289.im * 3.061616997868383E-17;
 8011af2:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8011af6:	ed93 7b02 	vldr	d7, [r3, #8]
 8011afa:	ed1f 6b1d 	vldr	d6, [pc, #-116]	; 8011a88 <G_q+0xf0d0>
 8011afe:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011b02:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8011b06:	ed93 7b02 	vldr	d7, [r3, #8]
 8011b0a:	ed1f 5b21 	vldr	d5, [pc, #-132]	; 8011a88 <G_q+0xf0d0>
 8011b0e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011b12:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011b16:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8011b1a:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t13_re + t34_re) + 7.498798913309288E-33;
 8011b1e:	f241 3378 	movw	r3, #4984	; 0x1378
 8011b22:	443b      	add	r3, r7
 8011b24:	ed93 6b00 	vldr	d6, [r3]
 8011b28:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8011b2c:	443b      	add	r3, r7
 8011b2e:	ed93 7b00 	vldr	d7, [r3]
 8011b32:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011b36:	ed1f 6b2e 	vldr	d6, [pc, #-184]	; 8011a80 <G_q+0xf0c8>
 8011b3a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011b3e:	f241 3378 	movw	r3, #4984	; 0x1378
 8011b42:	443b      	add	r3, r7
 8011b44:	ed83 7b00 	vstr	d7, [r3]
  t13_im += t34_im;
 8011b48:	f241 3370 	movw	r3, #4976	; 0x1370
 8011b4c:	443b      	add	r3, r7
 8011b4e:	ed93 6b00 	vldr	d6, [r3]
 8011b52:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8011b56:	443b      	add	r3, r7
 8011b58:	ed93 7b00 	vldr	d7, [r3]
 8011b5c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011b60:	f241 3370 	movw	r3, #4976	; 0x1370
 8011b64:	443b      	add	r3, r7
 8011b66:	ed83 7b00 	vstr	d7, [r3]
  t58_im = t284.re * 3.061616997868383E-17 + t285.re * 3.061616997868383E-17;
 8011b6a:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8011b6e:	ed93 7b00 	vldr	d7, [r3]
 8011b72:	ed1f 6b3b 	vldr	d6, [pc, #-236]	; 8011a88 <G_q+0xf0d0>
 8011b76:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011b7a:	4bb7      	ldr	r3, [pc, #732]	; (8011e58 <G_q+0xf4a0>)
 8011b7c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8011b80:	443a      	add	r2, r7
 8011b82:	4413      	add	r3, r2
 8011b84:	ed93 7b00 	vldr	d7, [r3]
 8011b88:	ed9f 5baf 	vldr	d5, [pc, #700]	; 8011e48 <G_q+0xf490>
 8011b8c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011b90:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8011b94:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011b98:	ed83 7b00 	vstr	d7, [r3]
  t60_re = t284.im * 3.061616997868383E-17 + t285.im * 3.061616997868383E-17;
 8011b9c:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8011ba0:	ed93 7b02 	vldr	d7, [r3, #8]
 8011ba4:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8011e48 <G_q+0xf490>
 8011ba8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011bac:	4baa      	ldr	r3, [pc, #680]	; (8011e58 <G_q+0xf4a0>)
 8011bae:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8011bb2:	443a      	add	r2, r7
 8011bb4:	4413      	add	r3, r2
 8011bb6:	ed93 7b02 	vldr	d7, [r3, #8]
 8011bba:	ed9f 5ba3 	vldr	d5, [pc, #652]	; 8011e48 <G_q+0xf490>
 8011bbe:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011bc2:	f241 2350 	movw	r3, #4688	; 0x1250
 8011bc6:	443b      	add	r3, r7
 8011bc8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011bcc:	ed83 7b00 	vstr	d7, [r3]
  t76_re = (((t286.re * 6.123233995736766E-17 + t287.re * 6.123233995736766E-17)
 8011bd0:	f241 13d0 	movw	r3, #4560	; 0x11d0
 8011bd4:	443b      	add	r3, r7
 8011bd6:	ed93 7b00 	vldr	d7, [r3]
 8011bda:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 8011e50 <G_q+0xf498>
 8011bde:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011be2:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8011be6:	ed93 7b00 	vldr	d7, [r3]
 8011bea:	ed9f 5b99 	vldr	d5, [pc, #612]	; 8011e50 <G_q+0xf498>
 8011bee:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011bf2:	ee36 6b07 	vadd.f64	d6, d6, d7
             + (t12_re * t23_re - t12_im * t3_im)) + (t16_re * t13_re - t16_im *
 8011bf6:	f241 3388 	movw	r3, #5000	; 0x1388
 8011bfa:	443b      	add	r3, r7
 8011bfc:	ed93 5b00 	vldr	d5, [r3]
 8011c00:	f241 3330 	movw	r3, #4912	; 0x1330
 8011c04:	443b      	add	r3, r7
 8011c06:	ed93 7b00 	vldr	d7, [r3]
 8011c0a:	ee25 5b07 	vmul.f64	d5, d5, d7
 8011c0e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8011c12:	ed93 4b00 	vldr	d4, [r3]
 8011c16:	f241 3310 	movw	r3, #4880	; 0x1310
 8011c1a:	443b      	add	r3, r7
 8011c1c:	ed93 7b00 	vldr	d7, [r3]
 8011c20:	ee24 7b07 	vmul.f64	d7, d4, d7
 8011c24:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011c28:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011c2c:	f241 3368 	movw	r3, #4968	; 0x1368
 8011c30:	443b      	add	r3, r7
 8011c32:	ed93 5b00 	vldr	d5, [r3]
 8011c36:	f241 3378 	movw	r3, #4984	; 0x1378
 8011c3a:	443b      	add	r3, r7
 8011c3c:	ed93 7b00 	vldr	d7, [r3]
 8011c40:	ee25 5b07 	vmul.f64	d5, d5, d7
 8011c44:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8011c48:	ed93 4b00 	vldr	d4, [r3]
 8011c4c:	f241 3370 	movw	r3, #4976	; 0x1370
 8011c50:	443b      	add	r3, r7
 8011c52:	ed93 7b00 	vldr	d7, [r3]
 8011c56:	ee24 7b07 	vmul.f64	d7, d4, d7
 8011c5a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011c5e:	ee36 7b07 	vadd.f64	d7, d6, d7
  t76_re = (((t286.re * 6.123233995736766E-17 + t287.re * 6.123233995736766E-17)
 8011c62:	f241 23a8 	movw	r3, #4776	; 0x12a8
 8011c66:	443b      	add	r3, r7
 8011c68:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8011e50 <G_q+0xf498>
 8011c6c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011c70:	ed83 7b00 	vstr	d7, [r3]
             t13_im)) - 6.123233995736766E-17;
  t85_im = ((t286.im * 6.123233995736766E-17 + t287.im * 6.123233995736766E-17)
 8011c74:	f241 13d0 	movw	r3, #4560	; 0x11d0
 8011c78:	443b      	add	r3, r7
 8011c7a:	ed93 7b02 	vldr	d7, [r3, #8]
 8011c7e:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8011e50 <G_q+0xf498>
 8011c82:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011c86:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8011c8a:	ed93 7b02 	vldr	d7, [r3, #8]
 8011c8e:	ed9f 5b70 	vldr	d5, [pc, #448]	; 8011e50 <G_q+0xf498>
 8011c92:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011c96:	ee36 6b07 	vadd.f64	d6, d6, d7
            + (t12_re * t3_im + t12_im * t23_re)) + (t16_re * t13_im + t16_im *
 8011c9a:	f241 3388 	movw	r3, #5000	; 0x1388
 8011c9e:	443b      	add	r3, r7
 8011ca0:	ed93 5b00 	vldr	d5, [r3]
 8011ca4:	f241 3310 	movw	r3, #4880	; 0x1310
 8011ca8:	443b      	add	r3, r7
 8011caa:	ed93 7b00 	vldr	d7, [r3]
 8011cae:	ee25 5b07 	vmul.f64	d5, d5, d7
 8011cb2:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8011cb6:	ed93 4b00 	vldr	d4, [r3]
 8011cba:	f241 3330 	movw	r3, #4912	; 0x1330
 8011cbe:	443b      	add	r3, r7
 8011cc0:	ed93 7b00 	vldr	d7, [r3]
 8011cc4:	ee24 7b07 	vmul.f64	d7, d4, d7
 8011cc8:	ee35 7b07 	vadd.f64	d7, d5, d7
 8011ccc:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011cd0:	f241 3368 	movw	r3, #4968	; 0x1368
 8011cd4:	443b      	add	r3, r7
 8011cd6:	ed93 5b00 	vldr	d5, [r3]
 8011cda:	f241 3370 	movw	r3, #4976	; 0x1370
 8011cde:	443b      	add	r3, r7
 8011ce0:	ed93 7b00 	vldr	d7, [r3]
 8011ce4:	ee25 5b07 	vmul.f64	d5, d5, d7
 8011ce8:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8011cec:	ed93 4b00 	vldr	d4, [r3]
 8011cf0:	f241 3378 	movw	r3, #4984	; 0x1378
 8011cf4:	443b      	add	r3, r7
 8011cf6:	ed93 7b00 	vldr	d7, [r3]
 8011cfa:	ee24 7b07 	vmul.f64	d7, d4, d7
 8011cfe:	ee35 7b07 	vadd.f64	d7, d5, d7
  t85_im = ((t286.im * 6.123233995736766E-17 + t287.im * 6.123233995736766E-17)
 8011d02:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011d06:	f241 3318 	movw	r3, #4888	; 0x1318
 8011d0a:	443b      	add	r3, r7
 8011d0c:	ed83 7b00 	vstr	d7, [r3]
    t13_re);
  if (t270.im == 0.0) {
 8011d10:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 8011d14:	ed93 7b02 	vldr	d7, [r3, #8]
 8011d18:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d20:	d116      	bne.n	8011d50 <G_q+0xf398>
    t3_im = t270.re / 2.0;
 8011d22:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 8011d26:	ed93 6b00 	vldr	d6, [r3]
 8011d2a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011d2e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011d32:	f241 3310 	movw	r3, #4880	; 0x1310
 8011d36:	443b      	add	r3, r7
 8011d38:	ed83 7b00 	vstr	d7, [r3]
    t23_re = 0.0;
 8011d3c:	f04f 0300 	mov.w	r3, #0
 8011d40:	f04f 0400 	mov.w	r4, #0
 8011d44:	f241 3230 	movw	r2, #4912	; 0x1330
 8011d48:	443a      	add	r2, r7
 8011d4a:	e9c2 3400 	strd	r3, r4, [r2]
 8011d4e:	e039      	b.n	8011dc4 <G_q+0xf40c>
  } else if (t270.re == 0.0) {
 8011d50:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 8011d54:	ed93 7b00 	vldr	d7, [r3]
 8011d58:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d60:	d116      	bne.n	8011d90 <G_q+0xf3d8>
    t3_im = 0.0;
 8011d62:	f04f 0300 	mov.w	r3, #0
 8011d66:	f04f 0400 	mov.w	r4, #0
 8011d6a:	f241 3210 	movw	r2, #4880	; 0x1310
 8011d6e:	443a      	add	r2, r7
 8011d70:	e9c2 3400 	strd	r3, r4, [r2]
    t23_re = t270.im / 2.0;
 8011d74:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 8011d78:	ed93 6b02 	vldr	d6, [r3, #8]
 8011d7c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011d80:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011d84:	f241 3330 	movw	r3, #4912	; 0x1330
 8011d88:	443b      	add	r3, r7
 8011d8a:	ed83 7b00 	vstr	d7, [r3]
 8011d8e:	e019      	b.n	8011dc4 <G_q+0xf40c>
  } else {
    t3_im = t270.re / 2.0;
 8011d90:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 8011d94:	ed93 6b00 	vldr	d6, [r3]
 8011d98:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011d9c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011da0:	f241 3310 	movw	r3, #4880	; 0x1310
 8011da4:	443b      	add	r3, r7
 8011da6:	ed83 7b00 	vstr	d7, [r3]
    t23_re = t270.im / 2.0;
 8011daa:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 8011dae:	ed93 6b02 	vldr	d6, [r3, #8]
 8011db2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011db6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011dba:	f241 3330 	movw	r3, #4912	; 0x1330
 8011dbe:	443b      	add	r3, r7
 8011dc0:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t271.im == 0.0) {
 8011dc4:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 8011dc8:	ed93 7b02 	vldr	d7, [r3, #8]
 8011dcc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dd4:	d116      	bne.n	8011e04 <G_q+0xf44c>
    t34_re = t271.re / 2.0;
 8011dd6:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 8011dda:	ed93 6b00 	vldr	d6, [r3]
 8011dde:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011de2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011de6:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8011dea:	443b      	add	r3, r7
 8011dec:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8011df0:	f04f 0300 	mov.w	r3, #0
 8011df4:	f04f 0400 	mov.w	r4, #0
 8011df8:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8011dfc:	443a      	add	r2, r7
 8011dfe:	e9c2 3400 	strd	r3, r4, [r2]
 8011e02:	e045      	b.n	8011e90 <G_q+0xf4d8>
  } else if (t271.re == 0.0) {
 8011e04:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 8011e08:	ed93 7b00 	vldr	d7, [r3]
 8011e0c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e14:	d122      	bne.n	8011e5c <G_q+0xf4a4>
    t34_re = 0.0;
 8011e16:	f04f 0300 	mov.w	r3, #0
 8011e1a:	f04f 0400 	mov.w	r4, #0
 8011e1e:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8011e22:	443a      	add	r2, r7
 8011e24:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t271.im / 2.0;
 8011e28:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 8011e2c:	ed93 6b02 	vldr	d6, [r3, #8]
 8011e30:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011e34:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011e38:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8011e3c:	443b      	add	r3, r7
 8011e3e:	ed83 7b00 	vstr	d7, [r3]
 8011e42:	e025      	b.n	8011e90 <G_q+0xf4d8>
 8011e44:	f3af 8000 	nop.w
 8011e48:	33145c07 	.word	0x33145c07
 8011e4c:	3c81a626 	.word	0x3c81a626
 8011e50:	33145c07 	.word	0x33145c07
 8011e54:	3c91a626 	.word	0x3c91a626
 8011e58:	ffffefd0 	.word	0xffffefd0
  } else {
    t34_re = t271.re / 2.0;
 8011e5c:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 8011e60:	ed93 6b00 	vldr	d6, [r3]
 8011e64:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011e68:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011e6c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8011e70:	443b      	add	r3, r7
 8011e72:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t271.im / 2.0;
 8011e76:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 8011e7a:	ed93 6b02 	vldr	d6, [r3, #8]
 8011e7e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011e82:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011e86:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8011e8a:	443b      	add	r3, r7
 8011e8c:	ed83 7b00 	vstr	d7, [r3]
  }

  t3_im += t34_re;
 8011e90:	f241 3310 	movw	r3, #4880	; 0x1310
 8011e94:	443b      	add	r3, r7
 8011e96:	ed93 6b00 	vldr	d6, [r3]
 8011e9a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8011e9e:	443b      	add	r3, r7
 8011ea0:	ed93 7b00 	vldr	d7, [r3]
 8011ea4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011ea8:	f241 3310 	movw	r3, #4880	; 0x1310
 8011eac:	443b      	add	r3, r7
 8011eae:	ed83 7b00 	vstr	d7, [r3]
  t23_re += t34_im;
 8011eb2:	f241 3330 	movw	r3, #4912	; 0x1330
 8011eb6:	443b      	add	r3, r7
 8011eb8:	ed93 6b00 	vldr	d6, [r3]
 8011ebc:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8011ec0:	443b      	add	r3, r7
 8011ec2:	ed93 7b00 	vldr	d7, [r3]
 8011ec6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011eca:	f241 3330 	movw	r3, #4912	; 0x1330
 8011ece:	443b      	add	r3, r7
 8011ed0:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t272.re * 0.0 - t272.im * 0.5) - (t273.re * 0.0 - t273.im * 0.5);
 8011ed4:	f241 1370 	movw	r3, #4464	; 0x1170
 8011ed8:	443b      	add	r3, r7
 8011eda:	ed93 7b00 	vldr	d7, [r3]
 8011ede:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80120c8 <G_q+0xf710>
 8011ee2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011ee6:	f241 1370 	movw	r3, #4464	; 0x1170
 8011eea:	443b      	add	r3, r7
 8011eec:	ed93 7b02 	vldr	d7, [r3, #8]
 8011ef0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8011ef4:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011ef8:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011efc:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8011f00:	ed93 7b00 	vldr	d7, [r3]
 8011f04:	ed9f 5b70 	vldr	d5, [pc, #448]	; 80120c8 <G_q+0xf710>
 8011f08:	ee27 5b05 	vmul.f64	d5, d7, d5
 8011f0c:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8011f10:	ed93 7b02 	vldr	d7, [r3, #8]
 8011f14:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8011f18:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011f1c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011f20:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011f24:	f241 3378 	movw	r3, #4984	; 0x1378
 8011f28:	443b      	add	r3, r7
 8011f2a:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t272.re * 0.5 + t272.im * 0.0) - (t273.re * 0.5 + t273.im * 0.0);
 8011f2e:	f241 1370 	movw	r3, #4464	; 0x1170
 8011f32:	443b      	add	r3, r7
 8011f34:	ed93 7b00 	vldr	d7, [r3]
 8011f38:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8011f3c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011f40:	f241 1370 	movw	r3, #4464	; 0x1170
 8011f44:	443b      	add	r3, r7
 8011f46:	ed93 7b02 	vldr	d7, [r3, #8]
 8011f4a:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 80120c8 <G_q+0xf710>
 8011f4e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011f52:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011f56:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8011f5a:	ed93 7b00 	vldr	d7, [r3]
 8011f5e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8011f62:	ee27 5b05 	vmul.f64	d5, d7, d5
 8011f66:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8011f6a:	ed93 7b02 	vldr	d7, [r3, #8]
 8011f6e:	ed9f 4b56 	vldr	d4, [pc, #344]	; 80120c8 <G_q+0xf710>
 8011f72:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011f76:	ee35 7b07 	vadd.f64	d7, d5, d7
 8011f7a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011f7e:	f241 3370 	movw	r3, #4976	; 0x1370
 8011f82:	443b      	add	r3, r7
 8011f84:	ed83 7b00 	vstr	d7, [r3]
  if (t276.im == 0.0) {
 8011f88:	f241 1390 	movw	r3, #4496	; 0x1190
 8011f8c:	443b      	add	r3, r7
 8011f8e:	ed93 7b02 	vldr	d7, [r3, #8]
 8011f92:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f9a:	d116      	bne.n	8011fca <G_q+0xf612>
    t16_re = t276.re / 2.0;
 8011f9c:	f241 1390 	movw	r3, #4496	; 0x1190
 8011fa0:	443b      	add	r3, r7
 8011fa2:	ed93 6b00 	vldr	d6, [r3]
 8011fa6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011faa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011fae:	f241 3368 	movw	r3, #4968	; 0x1368
 8011fb2:	443b      	add	r3, r7
 8011fb4:	ed83 7b00 	vstr	d7, [r3]
    t16_im = 0.0;
 8011fb8:	f04f 0300 	mov.w	r3, #0
 8011fbc:	f04f 0400 	mov.w	r4, #0
 8011fc0:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8011fc4:	e9c2 3400 	strd	r3, r4, [r2]
 8011fc8:	e03b      	b.n	8012042 <G_q+0xf68a>
  } else if (t276.re == 0.0) {
 8011fca:	f241 1390 	movw	r3, #4496	; 0x1190
 8011fce:	443b      	add	r3, r7
 8011fd0:	ed93 7b00 	vldr	d7, [r3]
 8011fd4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fdc:	d116      	bne.n	801200c <G_q+0xf654>
    t16_re = 0.0;
 8011fde:	f04f 0300 	mov.w	r3, #0
 8011fe2:	f04f 0400 	mov.w	r4, #0
 8011fe6:	f241 3268 	movw	r2, #4968	; 0x1368
 8011fea:	443a      	add	r2, r7
 8011fec:	e9c2 3400 	strd	r3, r4, [r2]
    t16_im = t276.im / 2.0;
 8011ff0:	f241 1390 	movw	r3, #4496	; 0x1190
 8011ff4:	443b      	add	r3, r7
 8011ff6:	ed93 6b02 	vldr	d6, [r3, #8]
 8011ffa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011ffe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8012002:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8012006:	ed83 7b00 	vstr	d7, [r3]
 801200a:	e01a      	b.n	8012042 <G_q+0xf68a>
  } else {
    t16_re = t276.re / 2.0;
 801200c:	f241 1390 	movw	r3, #4496	; 0x1190
 8012010:	443b      	add	r3, r7
 8012012:	ed93 6b00 	vldr	d6, [r3]
 8012016:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801201a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801201e:	f241 3368 	movw	r3, #4968	; 0x1368
 8012022:	443b      	add	r3, r7
 8012024:	ed83 7b00 	vstr	d7, [r3]
    t16_im = t276.im / 2.0;
 8012028:	f241 1390 	movw	r3, #4496	; 0x1190
 801202c:	443b      	add	r3, r7
 801202e:	ed93 6b02 	vldr	d6, [r3, #8]
 8012032:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8012036:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801203a:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 801203e:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t277.im == 0.0) {
 8012042:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8012046:	ed93 7b02 	vldr	d7, [r3, #8]
 801204a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801204e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012052:	d116      	bne.n	8012082 <G_q+0xf6ca>
    t34_re = t277.re / 2.0;
 8012054:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8012058:	ed93 6b00 	vldr	d6, [r3]
 801205c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8012060:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8012064:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8012068:	443b      	add	r3, r7
 801206a:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 801206e:	f04f 0300 	mov.w	r3, #0
 8012072:	f04f 0400 	mov.w	r4, #0
 8012076:	f241 32b0 	movw	r2, #5040	; 0x13b0
 801207a:	443a      	add	r2, r7
 801207c:	e9c2 3400 	strd	r3, r4, [r2]
 8012080:	e040      	b.n	8012104 <G_q+0xf74c>
  } else if (t277.re == 0.0) {
 8012082:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8012086:	ed93 7b00 	vldr	d7, [r3]
 801208a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801208e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012092:	d11d      	bne.n	80120d0 <G_q+0xf718>
    t34_re = 0.0;
 8012094:	f04f 0300 	mov.w	r3, #0
 8012098:	f04f 0400 	mov.w	r4, #0
 801209c:	f241 32b8 	movw	r2, #5048	; 0x13b8
 80120a0:	443a      	add	r2, r7
 80120a2:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t277.im / 2.0;
 80120a6:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 80120aa:	ed93 6b02 	vldr	d6, [r3, #8]
 80120ae:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80120b2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80120b6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80120ba:	443b      	add	r3, r7
 80120bc:	ed83 7b00 	vstr	d7, [r3]
 80120c0:	e020      	b.n	8012104 <G_q+0xf74c>
 80120c2:	bf00      	nop
 80120c4:	f3af 8000 	nop.w
	...
  } else {
    t34_re = t277.re / 2.0;
 80120d0:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 80120d4:	ed93 6b00 	vldr	d6, [r3]
 80120d8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80120dc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80120e0:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80120e4:	443b      	add	r3, r7
 80120e6:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t277.im / 2.0;
 80120ea:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 80120ee:	ed93 6b02 	vldr	d6, [r3, #8]
 80120f2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80120f6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80120fa:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80120fe:	443b      	add	r3, r7
 8012100:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_re = (t274.re * 0.0 - t274.im * 0.5) - (t275.re * 0.0 - t275.im * 0.5);
 8012104:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8012108:	ed93 7b00 	vldr	d7, [r3]
 801210c:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8012490 <G_q+0xfad8>
 8012110:	ee27 6b06 	vmul.f64	d6, d7, d6
 8012114:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8012118:	ed93 7b02 	vldr	d7, [r3, #8]
 801211c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8012120:	ee27 7b05 	vmul.f64	d7, d7, d5
 8012124:	ee36 6b47 	vsub.f64	d6, d6, d7
 8012128:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 801212c:	ed93 7b00 	vldr	d7, [r3]
 8012130:	ed9f 5bd7 	vldr	d5, [pc, #860]	; 8012490 <G_q+0xfad8>
 8012134:	ee27 5b05 	vmul.f64	d5, d7, d5
 8012138:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 801213c:	ed93 7b02 	vldr	d7, [r3, #8]
 8012140:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8012144:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012148:	ee35 7b47 	vsub.f64	d7, d5, d7
 801214c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012150:	f241 3348 	movw	r3, #4936	; 0x1348
 8012154:	443b      	add	r3, r7
 8012156:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t274.re * 0.5 + t274.im * 0.0) - (t275.re * 0.5 + t275.im * 0.0);
 801215a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 801215e:	ed93 7b00 	vldr	d7, [r3]
 8012162:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8012166:	ee27 6b06 	vmul.f64	d6, d7, d6
 801216a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 801216e:	ed93 7b02 	vldr	d7, [r3, #8]
 8012172:	ed9f 5bc7 	vldr	d5, [pc, #796]	; 8012490 <G_q+0xfad8>
 8012176:	ee27 7b05 	vmul.f64	d7, d7, d5
 801217a:	ee36 6b07 	vadd.f64	d6, d6, d7
 801217e:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8012182:	ed93 7b00 	vldr	d7, [r3]
 8012186:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801218a:	ee27 5b05 	vmul.f64	d5, d7, d5
 801218e:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8012192:	ed93 7b02 	vldr	d7, [r3, #8]
 8012196:	ed9f 4bbe 	vldr	d4, [pc, #760]	; 8012490 <G_q+0xfad8>
 801219a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801219e:	ee35 7b07 	vadd.f64	d7, d5, d7
 80121a2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80121a6:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80121aa:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t16_re + t34_re) + 7.498798913309288E-33;
 80121ae:	f241 3368 	movw	r3, #4968	; 0x1368
 80121b2:	443b      	add	r3, r7
 80121b4:	ed93 6b00 	vldr	d6, [r3]
 80121b8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80121bc:	443b      	add	r3, r7
 80121be:	ed93 7b00 	vldr	d7, [r3]
 80121c2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80121c6:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 8012498 <G_q+0xfae0>
 80121ca:	ee37 7b06 	vadd.f64	d7, d7, d6
 80121ce:	f241 3368 	movw	r3, #4968	; 0x1368
 80121d2:	443b      	add	r3, r7
 80121d4:	ed83 7b00 	vstr	d7, [r3]
  t16_im += t34_im;
 80121d8:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80121dc:	ed93 6b00 	vldr	d6, [r3]
 80121e0:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80121e4:	443b      	add	r3, r7
 80121e6:	ed93 7b00 	vldr	d7, [r3]
 80121ea:	ee36 7b07 	vadd.f64	d7, d6, d7
 80121ee:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80121f2:	ed83 7b00 	vstr	d7, [r3]
  t12_re = (t278.re * 0.0 - t278.im * 3.061616997868383E-17) - (t279.re * 0.0 -
 80121f6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80121fa:	ed93 7b00 	vldr	d7, [r3]
 80121fe:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8012490 <G_q+0xfad8>
 8012202:	ee27 6b06 	vmul.f64	d6, d7, d6
 8012206:	f507 735c 	add.w	r3, r7, #880	; 0x370
 801220a:	ed93 7b02 	vldr	d7, [r3, #8]
 801220e:	ed9f 5ba4 	vldr	d5, [pc, #656]	; 80124a0 <G_q+0xfae8>
 8012212:	ee27 7b05 	vmul.f64	d7, d7, d5
 8012216:	ee36 6b47 	vsub.f64	d6, d6, d7
 801221a:	4ba3      	ldr	r3, [pc, #652]	; (80124a8 <G_q+0xfaf0>)
 801221c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8012220:	443a      	add	r2, r7
 8012222:	4413      	add	r3, r2
 8012224:	ed93 7b00 	vldr	d7, [r3]
 8012228:	ed9f 5b99 	vldr	d5, [pc, #612]	; 8012490 <G_q+0xfad8>
 801222c:	ee27 5b05 	vmul.f64	d5, d7, d5
    t279.im * 3.061616997868383E-17);
 8012230:	4b9d      	ldr	r3, [pc, #628]	; (80124a8 <G_q+0xfaf0>)
 8012232:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8012236:	443a      	add	r2, r7
 8012238:	4413      	add	r3, r2
 801223a:	ed93 7b02 	vldr	d7, [r3, #8]
 801223e:	ed9f 4b98 	vldr	d4, [pc, #608]	; 80124a0 <G_q+0xfae8>
 8012242:	ee27 7b04 	vmul.f64	d7, d7, d4
  t12_re = (t278.re * 0.0 - t278.im * 3.061616997868383E-17) - (t279.re * 0.0 -
 8012246:	ee35 7b47 	vsub.f64	d7, d5, d7
 801224a:	ee36 7b47 	vsub.f64	d7, d6, d7
 801224e:	f241 3388 	movw	r3, #5000	; 0x1388
 8012252:	443b      	add	r3, r7
 8012254:	ed83 7b00 	vstr	d7, [r3]
  t12_im = (t278.re * 3.061616997868383E-17 + t278.im * 0.0) - (t279.re *
 8012258:	f507 735c 	add.w	r3, r7, #880	; 0x370
 801225c:	ed93 7b00 	vldr	d7, [r3]
 8012260:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 80124a0 <G_q+0xfae8>
 8012264:	ee27 6b06 	vmul.f64	d6, d7, d6
 8012268:	f507 735c 	add.w	r3, r7, #880	; 0x370
 801226c:	ed93 7b02 	vldr	d7, [r3, #8]
 8012270:	ed9f 5b87 	vldr	d5, [pc, #540]	; 8012490 <G_q+0xfad8>
 8012274:	ee27 7b05 	vmul.f64	d7, d7, d5
 8012278:	ee36 6b07 	vadd.f64	d6, d6, d7
 801227c:	4b8a      	ldr	r3, [pc, #552]	; (80124a8 <G_q+0xfaf0>)
 801227e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8012282:	443a      	add	r2, r7
 8012284:	4413      	add	r3, r2
 8012286:	ed93 7b00 	vldr	d7, [r3]
 801228a:	ed9f 5b85 	vldr	d5, [pc, #532]	; 80124a0 <G_q+0xfae8>
 801228e:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t279.im * 0.0);
 8012292:	4b85      	ldr	r3, [pc, #532]	; (80124a8 <G_q+0xfaf0>)
 8012294:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8012298:	443a      	add	r2, r7
 801229a:	4413      	add	r3, r2
 801229c:	ed93 7b02 	vldr	d7, [r3, #8]
 80122a0:	ed9f 4b7b 	vldr	d4, [pc, #492]	; 8012490 <G_q+0xfad8>
 80122a4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80122a8:	ee35 7b07 	vadd.f64	d7, d5, d7
  t12_im = (t278.re * 3.061616997868383E-17 + t278.im * 0.0) - (t279.re *
 80122ac:	ee36 7b47 	vsub.f64	d7, d6, d7
 80122b0:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80122b4:	ed83 7b00 	vstr	d7, [r3]
  b_t10_re = (t3_im * t13_re - t23_re * t13_im) - (t20_re * t16_re - t20_im *
 80122b8:	f241 3310 	movw	r3, #4880	; 0x1310
 80122bc:	443b      	add	r3, r7
 80122be:	ed93 6b00 	vldr	d6, [r3]
 80122c2:	f241 3378 	movw	r3, #4984	; 0x1378
 80122c6:	443b      	add	r3, r7
 80122c8:	ed93 7b00 	vldr	d7, [r3]
 80122cc:	ee26 6b07 	vmul.f64	d6, d6, d7
 80122d0:	f241 3330 	movw	r3, #4912	; 0x1330
 80122d4:	443b      	add	r3, r7
 80122d6:	ed93 5b00 	vldr	d5, [r3]
 80122da:	f241 3370 	movw	r3, #4976	; 0x1370
 80122de:	443b      	add	r3, r7
 80122e0:	ed93 7b00 	vldr	d7, [r3]
 80122e4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80122e8:	ee36 6b47 	vsub.f64	d6, d6, d7
 80122ec:	f241 3348 	movw	r3, #4936	; 0x1348
 80122f0:	443b      	add	r3, r7
 80122f2:	ed93 5b00 	vldr	d5, [r3]
 80122f6:	f241 3368 	movw	r3, #4968	; 0x1368
 80122fa:	443b      	add	r3, r7
 80122fc:	ed93 7b00 	vldr	d7, [r3]
 8012300:	ee25 5b07 	vmul.f64	d5, d5, d7
 8012304:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8012308:	ed93 4b00 	vldr	d4, [r3]
 801230c:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8012310:	ed93 7b00 	vldr	d7, [r3]
 8012314:	ee24 7b07 	vmul.f64	d7, d4, d7
 8012318:	ee35 7b47 	vsub.f64	d7, d5, d7
 801231c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012320:	f241 3338 	movw	r3, #4920	; 0x1338
 8012324:	443b      	add	r3, r7
 8012326:	ed83 7b00 	vstr	d7, [r3]
    t16_im);
  t23_re = (t3_im * t13_im + t23_re * t13_re) - (t20_re * t16_im + t20_im *
 801232a:	f241 3310 	movw	r3, #4880	; 0x1310
 801232e:	443b      	add	r3, r7
 8012330:	ed93 6b00 	vldr	d6, [r3]
 8012334:	f241 3370 	movw	r3, #4976	; 0x1370
 8012338:	443b      	add	r3, r7
 801233a:	ed93 7b00 	vldr	d7, [r3]
 801233e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012342:	f241 3330 	movw	r3, #4912	; 0x1330
 8012346:	443b      	add	r3, r7
 8012348:	ed93 5b00 	vldr	d5, [r3]
 801234c:	f241 3378 	movw	r3, #4984	; 0x1378
 8012350:	443b      	add	r3, r7
 8012352:	ed93 7b00 	vldr	d7, [r3]
 8012356:	ee25 7b07 	vmul.f64	d7, d5, d7
 801235a:	ee36 6b07 	vadd.f64	d6, d6, d7
 801235e:	f241 3348 	movw	r3, #4936	; 0x1348
 8012362:	443b      	add	r3, r7
 8012364:	ed93 5b00 	vldr	d5, [r3]
 8012368:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 801236c:	ed93 7b00 	vldr	d7, [r3]
 8012370:	ee25 5b07 	vmul.f64	d5, d5, d7
 8012374:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8012378:	ed93 4b00 	vldr	d4, [r3]
 801237c:	f241 3368 	movw	r3, #4968	; 0x1368
 8012380:	443b      	add	r3, r7
 8012382:	ed93 7b00 	vldr	d7, [r3]
 8012386:	ee24 7b07 	vmul.f64	d7, d4, d7
 801238a:	ee35 7b07 	vadd.f64	d7, d5, d7
 801238e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012392:	f241 3330 	movw	r3, #4912	; 0x1330
 8012396:	443b      	add	r3, r7
 8012398:	ed83 7b00 	vstr	d7, [r3]
    t16_re);
  if (t296.im == 0.0) {
 801239c:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 80123a0:	ed93 7b02 	vldr	d7, [r3, #8]
 80123a4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80123a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123ac:	d115      	bne.n	80123da <G_q+0xfa22>
    t16_re = t296.re / 2.0;
 80123ae:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 80123b2:	ed93 6b00 	vldr	d6, [r3]
 80123b6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80123ba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80123be:	f241 3368 	movw	r3, #4968	; 0x1368
 80123c2:	443b      	add	r3, r7
 80123c4:	ed83 7b00 	vstr	d7, [r3]
    t16_im = 0.0;
 80123c8:	f04f 0300 	mov.w	r3, #0
 80123cc:	f04f 0400 	mov.w	r4, #0
 80123d0:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 80123d4:	e9c2 3400 	strd	r3, r4, [r2]
 80123d8:	e037      	b.n	801244a <G_q+0xfa92>
  } else if (t296.re == 0.0) {
 80123da:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 80123de:	ed93 7b00 	vldr	d7, [r3]
 80123e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80123e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123ea:	d115      	bne.n	8012418 <G_q+0xfa60>
    t16_re = 0.0;
 80123ec:	f04f 0300 	mov.w	r3, #0
 80123f0:	f04f 0400 	mov.w	r4, #0
 80123f4:	f241 3268 	movw	r2, #4968	; 0x1368
 80123f8:	443a      	add	r2, r7
 80123fa:	e9c2 3400 	strd	r3, r4, [r2]
    t16_im = t296.im / 2.0;
 80123fe:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8012402:	ed93 6b02 	vldr	d6, [r3, #8]
 8012406:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801240a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801240e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8012412:	ed83 7b00 	vstr	d7, [r3]
 8012416:	e018      	b.n	801244a <G_q+0xfa92>
  } else {
    t16_re = t296.re / 2.0;
 8012418:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 801241c:	ed93 6b00 	vldr	d6, [r3]
 8012420:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8012424:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8012428:	f241 3368 	movw	r3, #4968	; 0x1368
 801242c:	443b      	add	r3, r7
 801242e:	ed83 7b00 	vstr	d7, [r3]
    t16_im = t296.im / 2.0;
 8012432:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8012436:	ed93 6b02 	vldr	d6, [r3, #8]
 801243a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801243e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8012442:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8012446:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t297.im == 0.0) {
 801244a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 801244e:	ed93 7b02 	vldr	d7, [r3, #8]
 8012452:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801245a:	d127      	bne.n	80124ac <G_q+0xfaf4>
    t34_re = t297.re / 2.0;
 801245c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8012460:	ed93 6b00 	vldr	d6, [r3]
 8012464:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8012468:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801246c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8012470:	443b      	add	r3, r7
 8012472:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8012476:	f04f 0300 	mov.w	r3, #0
 801247a:	f04f 0400 	mov.w	r4, #0
 801247e:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8012482:	443a      	add	r2, r7
 8012484:	e9c2 3400 	strd	r3, r4, [r2]
 8012488:	e04a      	b.n	8012520 <G_q+0xfb68>
 801248a:	bf00      	nop
 801248c:	f3af 8000 	nop.w
	...
 8012498:	858a5d48 	.word	0x858a5d48
 801249c:	394377ce 	.word	0x394377ce
 80124a0:	33145c07 	.word	0x33145c07
 80124a4:	3c81a626 	.word	0x3c81a626
 80124a8:	ffffefb0 	.word	0xffffefb0
  } else if (t297.re == 0.0) {
 80124ac:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80124b0:	ed93 7b00 	vldr	d7, [r3]
 80124b4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80124b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124bc:	d116      	bne.n	80124ec <G_q+0xfb34>
    t34_re = 0.0;
 80124be:	f04f 0300 	mov.w	r3, #0
 80124c2:	f04f 0400 	mov.w	r4, #0
 80124c6:	f241 32b8 	movw	r2, #5048	; 0x13b8
 80124ca:	443a      	add	r2, r7
 80124cc:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t297.im / 2.0;
 80124d0:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80124d4:	ed93 6b02 	vldr	d6, [r3, #8]
 80124d8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80124dc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80124e0:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80124e4:	443b      	add	r3, r7
 80124e6:	ed83 7b00 	vstr	d7, [r3]
 80124ea:	e019      	b.n	8012520 <G_q+0xfb68>
  } else {
    t34_re = t297.re / 2.0;
 80124ec:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80124f0:	ed93 6b00 	vldr	d6, [r3]
 80124f4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80124f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80124fc:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8012500:	443b      	add	r3, r7
 8012502:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t297.im / 2.0;
 8012506:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 801250a:	ed93 6b02 	vldr	d6, [r3, #8]
 801250e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8012512:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8012516:	f241 33b0 	movw	r3, #5040	; 0x13b0
 801251a:	443b      	add	r3, r7
 801251c:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t298.im == 0.0) {
 8012520:	f241 2330 	movw	r3, #4656	; 0x1230
 8012524:	443b      	add	r3, r7
 8012526:	ed93 7b02 	vldr	d7, [r3, #8]
 801252a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801252e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012532:	d116      	bne.n	8012562 <G_q+0xfbaa>
    t20_re = t298.re / 2.0;
 8012534:	f241 2330 	movw	r3, #4656	; 0x1230
 8012538:	443b      	add	r3, r7
 801253a:	ed93 6b00 	vldr	d6, [r3]
 801253e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8012542:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8012546:	f241 3348 	movw	r3, #4936	; 0x1348
 801254a:	443b      	add	r3, r7
 801254c:	ed83 7b00 	vstr	d7, [r3]
    t20_im = 0.0;
 8012550:	f04f 0300 	mov.w	r3, #0
 8012554:	f04f 0400 	mov.w	r4, #0
 8012558:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 801255c:	e9c2 3400 	strd	r3, r4, [r2]
 8012560:	e03b      	b.n	80125da <G_q+0xfc22>
  } else if (t298.re == 0.0) {
 8012562:	f241 2330 	movw	r3, #4656	; 0x1230
 8012566:	443b      	add	r3, r7
 8012568:	ed93 7b00 	vldr	d7, [r3]
 801256c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012574:	d116      	bne.n	80125a4 <G_q+0xfbec>
    t20_re = 0.0;
 8012576:	f04f 0300 	mov.w	r3, #0
 801257a:	f04f 0400 	mov.w	r4, #0
 801257e:	f241 3248 	movw	r2, #4936	; 0x1348
 8012582:	443a      	add	r2, r7
 8012584:	e9c2 3400 	strd	r3, r4, [r2]
    t20_im = t298.im / 2.0;
 8012588:	f241 2330 	movw	r3, #4656	; 0x1230
 801258c:	443b      	add	r3, r7
 801258e:	ed93 6b02 	vldr	d6, [r3, #8]
 8012592:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8012596:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801259a:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 801259e:	ed83 7b00 	vstr	d7, [r3]
 80125a2:	e01a      	b.n	80125da <G_q+0xfc22>
  } else {
    t20_re = t298.re / 2.0;
 80125a4:	f241 2330 	movw	r3, #4656	; 0x1230
 80125a8:	443b      	add	r3, r7
 80125aa:	ed93 6b00 	vldr	d6, [r3]
 80125ae:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80125b2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80125b6:	f241 3348 	movw	r3, #4936	; 0x1348
 80125ba:	443b      	add	r3, r7
 80125bc:	ed83 7b00 	vstr	d7, [r3]
    t20_im = t298.im / 2.0;
 80125c0:	f241 2330 	movw	r3, #4656	; 0x1230
 80125c4:	443b      	add	r3, r7
 80125c6:	ed93 6b02 	vldr	d6, [r3, #8]
 80125ca:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80125ce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80125d2:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80125d6:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t299.im == 0.0) {
 80125da:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80125de:	ed93 7b02 	vldr	d7, [r3, #8]
 80125e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80125e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125ea:	d116      	bne.n	801261a <G_q+0xfc62>
    t13_re = t299.re / 2.0;
 80125ec:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80125f0:	ed93 6b00 	vldr	d6, [r3]
 80125f4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80125f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80125fc:	f241 3378 	movw	r3, #4984	; 0x1378
 8012600:	443b      	add	r3, r7
 8012602:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 8012606:	f04f 0300 	mov.w	r3, #0
 801260a:	f04f 0400 	mov.w	r4, #0
 801260e:	f241 3270 	movw	r2, #4976	; 0x1370
 8012612:	443a      	add	r2, r7
 8012614:	e9c2 3400 	strd	r3, r4, [r2]
 8012618:	e039      	b.n	801268e <G_q+0xfcd6>
  } else if (t299.re == 0.0) {
 801261a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 801261e:	ed93 7b00 	vldr	d7, [r3]
 8012622:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801262a:	d116      	bne.n	801265a <G_q+0xfca2>
    t13_re = 0.0;
 801262c:	f04f 0300 	mov.w	r3, #0
 8012630:	f04f 0400 	mov.w	r4, #0
 8012634:	f241 3278 	movw	r2, #4984	; 0x1378
 8012638:	443a      	add	r2, r7
 801263a:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t299.im / 2.0;
 801263e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8012642:	ed93 6b02 	vldr	d6, [r3, #8]
 8012646:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801264a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801264e:	f241 3370 	movw	r3, #4976	; 0x1370
 8012652:	443b      	add	r3, r7
 8012654:	ed83 7b00 	vstr	d7, [r3]
 8012658:	e019      	b.n	801268e <G_q+0xfcd6>
  } else {
    t13_re = t299.re / 2.0;
 801265a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 801265e:	ed93 6b00 	vldr	d6, [r3]
 8012662:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8012666:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801266a:	f241 3378 	movw	r3, #4984	; 0x1378
 801266e:	443b      	add	r3, r7
 8012670:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t299.im / 2.0;
 8012674:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8012678:	ed93 6b02 	vldr	d6, [r3, #8]
 801267c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8012680:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8012684:	f241 3370 	movw	r3, #4976	; 0x1370
 8012688:	443b      	add	r3, r7
 801268a:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re += t34_re;
 801268e:	f241 3368 	movw	r3, #4968	; 0x1368
 8012692:	443b      	add	r3, r7
 8012694:	ed93 6b00 	vldr	d6, [r3]
 8012698:	f241 33b8 	movw	r3, #5048	; 0x13b8
 801269c:	443b      	add	r3, r7
 801269e:	ed93 7b00 	vldr	d7, [r3]
 80126a2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80126a6:	f241 3368 	movw	r3, #4968	; 0x1368
 80126aa:	443b      	add	r3, r7
 80126ac:	ed83 7b00 	vstr	d7, [r3]
  t16_im += t34_im;
 80126b0:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80126b4:	ed93 6b00 	vldr	d6, [r3]
 80126b8:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80126bc:	443b      	add	r3, r7
 80126be:	ed93 7b00 	vldr	d7, [r3]
 80126c2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80126c6:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80126ca:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t20_re + t13_re) + 7.498798913309288E-33;
 80126ce:	f241 3348 	movw	r3, #4936	; 0x1348
 80126d2:	443b      	add	r3, r7
 80126d4:	ed93 6b00 	vldr	d6, [r3]
 80126d8:	f241 3378 	movw	r3, #4984	; 0x1378
 80126dc:	443b      	add	r3, r7
 80126de:	ed93 7b00 	vldr	d7, [r3]
 80126e2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80126e6:	ed9f 6be6 	vldr	d6, [pc, #920]	; 8012a80 <G_q+0x100c8>
 80126ea:	ee37 7b06 	vadd.f64	d7, d7, d6
 80126ee:	f241 3348 	movw	r3, #4936	; 0x1348
 80126f2:	443b      	add	r3, r7
 80126f4:	ed83 7b00 	vstr	d7, [r3]
  t20_im += t13_im;
 80126f8:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80126fc:	ed93 6b00 	vldr	d6, [r3]
 8012700:	f241 3370 	movw	r3, #4976	; 0x1370
 8012704:	443b      	add	r3, r7
 8012706:	ed93 7b00 	vldr	d7, [r3]
 801270a:	ee36 7b07 	vadd.f64	d7, d6, d7
 801270e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8012712:	ed83 7b00 	vstr	d7, [r3]
  t34_im = (t266.re * 0.0 - t266.im * 0.5) - (t267.re * 0.0 - t267.im * 0.5);
 8012716:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801271a:	ed93 7b00 	vldr	d7, [r3]
 801271e:	ed9f 6bda 	vldr	d6, [pc, #872]	; 8012a88 <G_q+0x100d0>
 8012722:	ee27 6b06 	vmul.f64	d6, d7, d6
 8012726:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801272a:	ed93 7b02 	vldr	d7, [r3, #8]
 801272e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8012732:	ee27 7b05 	vmul.f64	d7, d7, d5
 8012736:	ee36 6b47 	vsub.f64	d6, d6, d7
 801273a:	4bd9      	ldr	r3, [pc, #868]	; (8012aa0 <G_q+0x100e8>)
 801273c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8012740:	443a      	add	r2, r7
 8012742:	4413      	add	r3, r2
 8012744:	ed93 7b00 	vldr	d7, [r3]
 8012748:	ed9f 5bcf 	vldr	d5, [pc, #828]	; 8012a88 <G_q+0x100d0>
 801274c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8012750:	4bd3      	ldr	r3, [pc, #844]	; (8012aa0 <G_q+0x100e8>)
 8012752:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8012756:	443a      	add	r2, r7
 8012758:	4413      	add	r3, r2
 801275a:	ed93 7b02 	vldr	d7, [r3, #8]
 801275e:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8012762:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012766:	ee35 7b47 	vsub.f64	d7, d5, d7
 801276a:	ee36 7b47 	vsub.f64	d7, d6, d7
 801276e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8012772:	443b      	add	r3, r7
 8012774:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t266.re * 0.5 + t266.im * 0.0) - (t267.re * 0.5 + t267.im * 0.0);
 8012778:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801277c:	ed93 7b00 	vldr	d7, [r3]
 8012780:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8012784:	ee27 6b06 	vmul.f64	d6, d7, d6
 8012788:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801278c:	ed93 7b02 	vldr	d7, [r3, #8]
 8012790:	ed9f 5bbd 	vldr	d5, [pc, #756]	; 8012a88 <G_q+0x100d0>
 8012794:	ee27 7b05 	vmul.f64	d7, d7, d5
 8012798:	ee36 6b07 	vadd.f64	d6, d6, d7
 801279c:	4bc0      	ldr	r3, [pc, #768]	; (8012aa0 <G_q+0x100e8>)
 801279e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80127a2:	443a      	add	r2, r7
 80127a4:	4413      	add	r3, r2
 80127a6:	ed93 7b00 	vldr	d7, [r3]
 80127aa:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80127ae:	ee27 5b05 	vmul.f64	d5, d7, d5
 80127b2:	4bbb      	ldr	r3, [pc, #748]	; (8012aa0 <G_q+0x100e8>)
 80127b4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80127b8:	443a      	add	r2, r7
 80127ba:	4413      	add	r3, r2
 80127bc:	ed93 7b02 	vldr	d7, [r3, #8]
 80127c0:	ed9f 4bb1 	vldr	d4, [pc, #708]	; 8012a88 <G_q+0x100d0>
 80127c4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80127c8:	ee35 7b07 	vadd.f64	d7, d5, d7
 80127cc:	ee36 7b47 	vsub.f64	d7, d6, d7
 80127d0:	f241 3378 	movw	r3, #4984	; 0x1378
 80127d4:	443b      	add	r3, r7
 80127d6:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (((((t268.re * 3.749399456654644E-33 + t269.re *
 80127da:	f241 1350 	movw	r3, #4432	; 0x1150
 80127de:	443b      	add	r3, r7
 80127e0:	ed93 7b00 	vldr	d7, [r3]
 80127e4:	ed9f 6baa 	vldr	d6, [pc, #680]	; 8012a90 <G_q+0x100d8>
 80127e8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80127ec:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 80127f0:	ed93 7b00 	vldr	d7, [r3]
 80127f4:	ed9f 5ba6 	vldr	d5, [pc, #664]	; 8012a90 <G_q+0x100d8>
 80127f8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80127fc:	ee36 6b07 	vadd.f64	d6, d6, d7
                3.749399456654644E-33) - (t72_re * t74_im - t74_re * t55_re)) +
 8012800:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 8012804:	f241 23b0 	movw	r3, #4784	; 0x12b0
 8012808:	443b      	add	r3, r7
 801280a:	ed92 5b00 	vldr	d5, [r2]
 801280e:	ed93 7b00 	vldr	d7, [r3]
 8012812:	ee25 5b07 	vmul.f64	d5, d5, d7
 8012816:	f241 23b8 	movw	r3, #4792	; 0x12b8
 801281a:	443b      	add	r3, r7
 801281c:	ed93 4b00 	vldr	d4, [r3]
 8012820:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8012824:	ed93 7b00 	vldr	d7, [r3]
 8012828:	ee24 7b07 	vmul.f64	d7, d4, d7
 801282c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012830:	ee36 6b47 	vsub.f64	d6, d6, d7
              (t58_im * t76_re - t60_re * t85_im)) + (t12_re * b_t10_re - t12_im
 8012834:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8012838:	f241 23a8 	movw	r3, #4776	; 0x12a8
 801283c:	443b      	add	r3, r7
 801283e:	ed92 5b00 	vldr	d5, [r2]
 8012842:	ed93 7b00 	vldr	d7, [r3]
 8012846:	ee25 5b07 	vmul.f64	d5, d5, d7
 801284a:	f241 2350 	movw	r3, #4688	; 0x1250
 801284e:	443b      	add	r3, r7
 8012850:	ed93 4b00 	vldr	d4, [r3]
 8012854:	f241 3318 	movw	r3, #4888	; 0x1318
 8012858:	443b      	add	r3, r7
 801285a:	ed93 7b00 	vldr	d7, [r3]
 801285e:	ee24 7b07 	vmul.f64	d7, d4, d7
 8012862:	ee35 7b47 	vsub.f64	d7, d5, d7
                3.749399456654644E-33) - (t72_re * t74_im - t74_re * t55_re)) +
 8012866:	ee36 6b07 	vadd.f64	d6, d6, d7
              (t58_im * t76_re - t60_re * t85_im)) + (t12_re * b_t10_re - t12_im
 801286a:	f241 3388 	movw	r3, #5000	; 0x1388
 801286e:	443b      	add	r3, r7
 8012870:	ed93 5b00 	vldr	d5, [r3]
 8012874:	f241 3338 	movw	r3, #4920	; 0x1338
 8012878:	443b      	add	r3, r7
 801287a:	ed93 7b00 	vldr	d7, [r3]
 801287e:	ee25 5b07 	vmul.f64	d5, d5, d7
              * t23_re)) - (t16_re * t20_re - t16_im * t20_im)) -
 8012882:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8012886:	ed93 4b00 	vldr	d4, [r3]
 801288a:	f241 3330 	movw	r3, #4912	; 0x1330
 801288e:	443b      	add	r3, r7
 8012890:	ed93 7b00 	vldr	d7, [r3]
 8012894:	ee24 7b07 	vmul.f64	d7, d4, d7
              (t58_im * t76_re - t60_re * t85_im)) + (t12_re * b_t10_re - t12_im
 8012898:	ee35 7b47 	vsub.f64	d7, d5, d7
 801289c:	ee36 6b07 	vadd.f64	d6, d6, d7
              * t23_re)) - (t16_re * t20_re - t16_im * t20_im)) -
 80128a0:	f241 3368 	movw	r3, #4968	; 0x1368
 80128a4:	443b      	add	r3, r7
 80128a6:	ed93 5b00 	vldr	d5, [r3]
 80128aa:	f241 3348 	movw	r3, #4936	; 0x1348
 80128ae:	443b      	add	r3, r7
 80128b0:	ed93 7b00 	vldr	d7, [r3]
 80128b4:	ee25 5b07 	vmul.f64	d5, d5, d7
 80128b8:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80128bc:	ed93 4b00 	vldr	d4, [r3]
 80128c0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80128c4:	ed93 7b00 	vldr	d7, [r3]
 80128c8:	ee24 7b07 	vmul.f64	d7, d4, d7
 80128cc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80128d0:	ee36 7b47 	vsub.f64	d7, d6, d7
  t13_im = (((((t268.re * 3.749399456654644E-33 + t269.re *
 80128d4:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8012a90 <G_q+0x100d8>
 80128d8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80128dc:	f241 3370 	movw	r3, #4976	; 0x1370
 80128e0:	443b      	add	r3, r7
 80128e2:	ed83 7b00 	vstr	d7, [r3]
    3.749399456654644E-33;
  t34_re = ((((t268.im * 3.749399456654644E-33 + t269.im * 3.749399456654644E-33)
 80128e6:	f241 1350 	movw	r3, #4432	; 0x1150
 80128ea:	443b      	add	r3, r7
 80128ec:	ed93 7b02 	vldr	d7, [r3, #8]
 80128f0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8012a90 <G_q+0x100d8>
 80128f4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80128f8:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 80128fc:	ed93 7b02 	vldr	d7, [r3, #8]
 8012900:	ed9f 5b63 	vldr	d5, [pc, #396]	; 8012a90 <G_q+0x100d8>
 8012904:	ee27 7b05 	vmul.f64	d7, d7, d5
 8012908:	ee36 6b07 	vadd.f64	d6, d6, d7
              - (t72_re * t55_re + t74_re * t74_im)) + (t58_im * t85_im + t60_re
 801290c:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8012910:	ed93 5b00 	vldr	d5, [r3]
 8012914:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8012918:	ed93 7b00 	vldr	d7, [r3]
 801291c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8012920:	f241 22b8 	movw	r2, #4792	; 0x12b8
 8012924:	443a      	add	r2, r7
 8012926:	f241 23b0 	movw	r3, #4784	; 0x12b0
 801292a:	443b      	add	r3, r7
 801292c:	ed92 4b00 	vldr	d4, [r2]
 8012930:	ed93 7b00 	vldr	d7, [r3]
 8012934:	ee24 7b07 	vmul.f64	d7, d4, d7
 8012938:	ee35 7b07 	vadd.f64	d7, d5, d7
 801293c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8012940:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8012944:	ed93 5b00 	vldr	d5, [r3]
 8012948:	f241 3318 	movw	r3, #4888	; 0x1318
 801294c:	443b      	add	r3, r7
 801294e:	ed93 7b00 	vldr	d7, [r3]
 8012952:	ee25 5b07 	vmul.f64	d5, d5, d7
              * t76_re)) + (t12_re * t23_re + t12_im * b_t10_re)) - (t16_re *
 8012956:	f241 2250 	movw	r2, #4688	; 0x1250
 801295a:	443a      	add	r2, r7
 801295c:	f241 23a8 	movw	r3, #4776	; 0x12a8
 8012960:	443b      	add	r3, r7
 8012962:	ed92 4b00 	vldr	d4, [r2]
 8012966:	ed93 7b00 	vldr	d7, [r3]
 801296a:	ee24 7b07 	vmul.f64	d7, d4, d7
              - (t72_re * t55_re + t74_re * t74_im)) + (t58_im * t85_im + t60_re
 801296e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8012972:	ee36 6b07 	vadd.f64	d6, d6, d7
              * t76_re)) + (t12_re * t23_re + t12_im * b_t10_re)) - (t16_re *
 8012976:	f241 3388 	movw	r3, #5000	; 0x1388
 801297a:	443b      	add	r3, r7
 801297c:	ed93 5b00 	vldr	d5, [r3]
 8012980:	f241 3330 	movw	r3, #4912	; 0x1330
 8012984:	443b      	add	r3, r7
 8012986:	ed93 7b00 	vldr	d7, [r3]
 801298a:	ee25 5b07 	vmul.f64	d5, d5, d7
 801298e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8012992:	ed93 4b00 	vldr	d4, [r3]
 8012996:	f241 3338 	movw	r3, #4920	; 0x1338
 801299a:	443b      	add	r3, r7
 801299c:	ed93 7b00 	vldr	d7, [r3]
 80129a0:	ee24 7b07 	vmul.f64	d7, d4, d7
 80129a4:	ee35 7b07 	vadd.f64	d7, d5, d7
 80129a8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80129ac:	f241 3368 	movw	r3, #4968	; 0x1368
 80129b0:	443b      	add	r3, r7
 80129b2:	ed93 5b00 	vldr	d5, [r3]
 80129b6:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80129ba:	ed93 7b00 	vldr	d7, [r3]
 80129be:	ee25 5b07 	vmul.f64	d5, d5, d7
    t20_im + t16_im * t20_re);
 80129c2:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80129c6:	ed93 4b00 	vldr	d4, [r3]
 80129ca:	f241 3348 	movw	r3, #4936	; 0x1348
 80129ce:	443b      	add	r3, r7
 80129d0:	ed93 7b00 	vldr	d7, [r3]
 80129d4:	ee24 7b07 	vmul.f64	d7, d4, d7
 80129d8:	ee35 7b07 	vadd.f64	d7, d5, d7
  t34_re = ((((t268.im * 3.749399456654644E-33 + t269.im * 3.749399456654644E-33)
 80129dc:	ee36 7b47 	vsub.f64	d7, d6, d7
 80129e0:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80129e4:	443b      	add	r3, r7
 80129e6:	ed83 7b00 	vstr	d7, [r3]
  b_G_q[4].re = -g * ((t70_im * t55_im - t43_im * t70_re) * 0.0215 + (t34_im *
 80129ea:	4b2e      	ldr	r3, [pc, #184]	; (8012aa4 <G_q+0x100ec>)
 80129ec:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80129f0:	443a      	add	r2, r7
 80129f2:	4413      	add	r3, r2
 80129f4:	ed93 7b00 	vldr	d7, [r3]
 80129f8:	eeb1 6b47 	vneg.f64	d6, d7
 80129fc:	f241 23c8 	movw	r3, #4808	; 0x12c8
 8012a00:	443b      	add	r3, r7
 8012a02:	ed93 5b00 	vldr	d5, [r3]
 8012a06:	f241 23d8 	movw	r3, #4824	; 0x12d8
 8012a0a:	443b      	add	r3, r7
 8012a0c:	ed93 7b00 	vldr	d7, [r3]
 8012a10:	ee25 5b07 	vmul.f64	d5, d5, d7
 8012a14:	f241 23d0 	movw	r3, #4816	; 0x12d0
 8012a18:	443b      	add	r3, r7
 8012a1a:	f241 22f8 	movw	r2, #4856	; 0x12f8
 8012a1e:	443a      	add	r2, r7
 8012a20:	ed92 4b00 	vldr	d4, [r2]
 8012a24:	ed93 7b00 	vldr	d7, [r3]
 8012a28:	ee24 7b07 	vmul.f64	d7, d4, d7
 8012a2c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012a30:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8012a98 <G_q+0x100e0>
 8012a34:	ee27 5b05 	vmul.f64	d5, d7, d5
 8012a38:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8012a3c:	443b      	add	r3, r7
 8012a3e:	ed93 4b00 	vldr	d4, [r3]
 8012a42:	f241 3370 	movw	r3, #4976	; 0x1370
 8012a46:	443b      	add	r3, r7
 8012a48:	ed93 7b00 	vldr	d7, [r3]
 8012a4c:	ee24 4b07 	vmul.f64	d4, d4, d7
    t13_im - t13_re * t34_re) * 0.0215);
 8012a50:	f241 3378 	movw	r3, #4984	; 0x1378
 8012a54:	443b      	add	r3, r7
 8012a56:	ed93 3b00 	vldr	d3, [r3]
 8012a5a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8012a5e:	443b      	add	r3, r7
 8012a60:	ed93 7b00 	vldr	d7, [r3]
 8012a64:	ee23 7b07 	vmul.f64	d7, d3, d7
 8012a68:	ee34 7b47 	vsub.f64	d7, d4, d7
 8012a6c:	ed9f 4b0a 	vldr	d4, [pc, #40]	; 8012a98 <G_q+0x100e0>
 8012a70:	ee27 7b04 	vmul.f64	d7, d7, d4
  b_G_q[4].re = -g * ((t70_im * t55_im - t43_im * t70_re) * 0.0215 + (t34_im *
 8012a74:	ee35 7b07 	vadd.f64	d7, d5, d7
 8012a78:	e016      	b.n	8012aa8 <G_q+0x100f0>
 8012a7a:	bf00      	nop
 8012a7c:	f3af 8000 	nop.w
 8012a80:	858a5d48 	.word	0x858a5d48
 8012a84:	394377ce 	.word	0x394377ce
	...
 8012a90:	858a5d48 	.word	0x858a5d48
 8012a94:	393377ce 	.word	0x393377ce
 8012a98:	9374bc6a 	.word	0x9374bc6a
 8012a9c:	3f960418 	.word	0x3f960418
 8012aa0:	ffffed30 	.word	0xffffed30
 8012aa4:	ffffec58 	.word	0xffffec58
 8012aa8:	4b41      	ldr	r3, [pc, #260]	; (8012bb0 <G_q+0x101f8>)
 8012aaa:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8012aae:	443a      	add	r2, r7
 8012ab0:	4413      	add	r3, r2
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	3340      	adds	r3, #64	; 0x40
 8012ab6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012aba:	ed83 7b00 	vstr	d7, [r3]
  b_G_q[4].im = -g * ((t70_im * t70_re + t43_im * t55_im) * 0.0215 + (t34_im *
 8012abe:	4b3d      	ldr	r3, [pc, #244]	; (8012bb4 <G_q+0x101fc>)
 8012ac0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8012ac4:	443a      	add	r2, r7
 8012ac6:	4413      	add	r3, r2
 8012ac8:	ed93 7b00 	vldr	d7, [r3]
 8012acc:	eeb1 6b47 	vneg.f64	d6, d7
 8012ad0:	f241 22c8 	movw	r2, #4808	; 0x12c8
 8012ad4:	443a      	add	r2, r7
 8012ad6:	f241 23d0 	movw	r3, #4816	; 0x12d0
 8012ada:	443b      	add	r3, r7
 8012adc:	ed92 5b00 	vldr	d5, [r2]
 8012ae0:	ed93 7b00 	vldr	d7, [r3]
 8012ae4:	ee25 5b07 	vmul.f64	d5, d5, d7
 8012ae8:	f241 23f8 	movw	r3, #4856	; 0x12f8
 8012aec:	443b      	add	r3, r7
 8012aee:	ed93 4b00 	vldr	d4, [r3]
 8012af2:	f241 23d8 	movw	r3, #4824	; 0x12d8
 8012af6:	443b      	add	r3, r7
 8012af8:	ed93 7b00 	vldr	d7, [r3]
 8012afc:	ee24 7b07 	vmul.f64	d7, d4, d7
 8012b00:	ee35 7b07 	vadd.f64	d7, d5, d7
 8012b04:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8012ba8 <G_q+0x101f0>
 8012b08:	ee27 5b05 	vmul.f64	d5, d7, d5
 8012b0c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8012b10:	443b      	add	r3, r7
 8012b12:	ed93 4b00 	vldr	d4, [r3]
 8012b16:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8012b1a:	443b      	add	r3, r7
 8012b1c:	ed93 7b00 	vldr	d7, [r3]
 8012b20:	ee24 4b07 	vmul.f64	d4, d4, d7
    t34_re + t13_re * t13_im) * 0.0215);
 8012b24:	f241 3378 	movw	r3, #4984	; 0x1378
 8012b28:	443b      	add	r3, r7
 8012b2a:	ed93 3b00 	vldr	d3, [r3]
 8012b2e:	f241 3370 	movw	r3, #4976	; 0x1370
 8012b32:	443b      	add	r3, r7
 8012b34:	ed93 7b00 	vldr	d7, [r3]
 8012b38:	ee23 7b07 	vmul.f64	d7, d3, d7
 8012b3c:	ee34 7b07 	vadd.f64	d7, d4, d7
 8012b40:	ed9f 4b19 	vldr	d4, [pc, #100]	; 8012ba8 <G_q+0x101f0>
 8012b44:	ee27 7b04 	vmul.f64	d7, d7, d4
  b_G_q[4].im = -g * ((t70_im * t70_re + t43_im * t55_im) * 0.0215 + (t34_im *
 8012b48:	ee35 7b07 	vadd.f64	d7, d5, d7
 8012b4c:	4b18      	ldr	r3, [pc, #96]	; (8012bb0 <G_q+0x101f8>)
 8012b4e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8012b52:	443a      	add	r2, r7
 8012b54:	4413      	add	r3, r2
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	3340      	adds	r3, #64	; 0x40
 8012b5a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012b5e:	ed83 7b02 	vstr	d7, [r3, #8]
  b_G_q[5].re = 0.0;
 8012b62:	4b13      	ldr	r3, [pc, #76]	; (8012bb0 <G_q+0x101f8>)
 8012b64:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8012b68:	443a      	add	r2, r7
 8012b6a:	4413      	add	r3, r2
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8012b72:	f04f 0300 	mov.w	r3, #0
 8012b76:	f04f 0400 	mov.w	r4, #0
 8012b7a:	e9c2 3400 	strd	r3, r4, [r2]
  b_G_q[5].im = 0.0;
 8012b7e:	4b0c      	ldr	r3, [pc, #48]	; (8012bb0 <G_q+0x101f8>)
 8012b80:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8012b84:	443a      	add	r2, r7
 8012b86:	4413      	add	r3, r2
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8012b8e:	f04f 0300 	mov.w	r3, #0
 8012b92:	f04f 0400 	mov.w	r4, #0
 8012b96:	e9c2 3402 	strd	r3, r4, [r2, #8]
}
 8012b9a:	bf00      	nop
 8012b9c:	f507 579e 	add.w	r7, r7, #5056	; 0x13c0
 8012ba0:	3714      	adds	r7, #20
 8012ba2:	46bd      	mov	sp, r7
 8012ba4:	bd90      	pop	{r4, r7, pc}
 8012ba6:	bf00      	nop
 8012ba8:	9374bc6a 	.word	0x9374bc6a
 8012bac:	3f960418 	.word	0x3f960418
 8012bb0:	ffffec34 	.word	0xffffec34
 8012bb4:	ffffec58 	.word	0xffffec58

08012bb8 <G_q_initialize>:
/*
 * Arguments    : void
 * Return Type  : void
 */
void G_q_initialize(void)
{
 8012bb8:	b580      	push	{r7, lr}
 8012bba:	af00      	add	r7, sp, #0
  rt_InitInfAndNaN();
 8012bbc:	f000 f89a 	bl	8012cf4 <rt_InitInfAndNaN>
  isInitialized_G_q = true;
 8012bc0:	4b02      	ldr	r3, [pc, #8]	; (8012bcc <G_q_initialize+0x14>)
 8012bc2:	2201      	movs	r2, #1
 8012bc4:	701a      	strb	r2, [r3, #0]
}
 8012bc6:	bf00      	nop
 8012bc8:	bd80      	pop	{r7, pc}
 8012bca:	bf00      	nop
 8012bcc:	24000314 	.word	0x24000314

08012bd0 <G_q_terminate>:
/*
 * Arguments    : void
 * Return Type  : void
 */
void G_q_terminate(void)
{
 8012bd0:	b480      	push	{r7}
 8012bd2:	af00      	add	r7, sp, #0
  /* (no terminate code required) */
  isInitialized_G_q = false;
 8012bd4:	4b03      	ldr	r3, [pc, #12]	; (8012be4 <G_q_terminate+0x14>)
 8012bd6:	2200      	movs	r2, #0
 8012bd8:	701a      	strb	r2, [r3, #0]
}
 8012bda:	bf00      	nop
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be2:	4770      	bx	lr
 8012be4:	24000314 	.word	0x24000314

08012be8 <b_exp>:
/*
 * Arguments    : creal_T *x
 * Return Type  : void
 */
void b_exp(creal_T *x)
{
 8012be8:	b590      	push	{r4, r7, lr}
 8012bea:	b087      	sub	sp, #28
 8012bec:	af00      	add	r7, sp, #0
 8012bee:	6078      	str	r0, [r7, #4]
  double r;
  double d;
  if (x->im == 0.0) {
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	ed93 7b02 	vldr	d7, [r3, #8]
 8012bf6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bfe:	d113      	bne.n	8012c28 <b_exp+0x40>
    x->re = exp(x->re);
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	ed93 7b00 	vldr	d7, [r3]
 8012c06:	eeb0 0b47 	vmov.f64	d0, d7
 8012c0a:	f00b ff15 	bl	801ea38 <exp>
 8012c0e:	eeb0 7b40 	vmov.f64	d7, d0
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	ed83 7b00 	vstr	d7, [r3]
    x->im = 0.0;
 8012c18:	687a      	ldr	r2, [r7, #4]
 8012c1a:	f04f 0300 	mov.w	r3, #0
 8012c1e:	f04f 0400 	mov.w	r4, #0
 8012c22:	e9c2 3402 	strd	r3, r4, [r2, #8]
    r = exp(x->re / 2.0);
    d = x->im;
    x->re = r * (r * cos(x->im));
    x->im = r * (r * sin(d));
  }
}
 8012c26:	e061      	b.n	8012cec <b_exp+0x104>
  } else if (rtIsInf(x->im) && rtIsInf(x->re) && (x->re < 0.0)) {
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	ed93 7b02 	vldr	d7, [r3, #8]
 8012c2e:	eeb0 0b47 	vmov.f64	d0, d7
 8012c32:	f000 f899 	bl	8012d68 <rtIsInf>
 8012c36:	4603      	mov	r3, r0
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d020      	beq.n	8012c7e <b_exp+0x96>
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	ed93 7b00 	vldr	d7, [r3]
 8012c42:	eeb0 0b47 	vmov.f64	d0, d7
 8012c46:	f000 f88f 	bl	8012d68 <rtIsInf>
 8012c4a:	4603      	mov	r3, r0
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d016      	beq.n	8012c7e <b_exp+0x96>
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	ed93 7b00 	vldr	d7, [r3]
 8012c56:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c5e:	d50e      	bpl.n	8012c7e <b_exp+0x96>
    x->re = 0.0;
 8012c60:	687a      	ldr	r2, [r7, #4]
 8012c62:	f04f 0300 	mov.w	r3, #0
 8012c66:	f04f 0400 	mov.w	r4, #0
 8012c6a:	e9c2 3400 	strd	r3, r4, [r2]
    x->im = 0.0;
 8012c6e:	687a      	ldr	r2, [r7, #4]
 8012c70:	f04f 0300 	mov.w	r3, #0
 8012c74:	f04f 0400 	mov.w	r4, #0
 8012c78:	e9c2 3402 	strd	r3, r4, [r2, #8]
}
 8012c7c:	e036      	b.n	8012cec <b_exp+0x104>
    r = exp(x->re / 2.0);
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	ed93 7b00 	vldr	d7, [r3]
 8012c84:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8012c88:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012c8c:	eeb0 0b45 	vmov.f64	d0, d5
 8012c90:	f00b fed2 	bl	801ea38 <exp>
 8012c94:	ed87 0b04 	vstr	d0, [r7, #16]
    d = x->im;
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8012c9e:	e9c7 3402 	strd	r3, r4, [r7, #8]
    x->re = r * (r * cos(x->im));
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	ed93 7b02 	vldr	d7, [r3, #8]
 8012ca8:	eeb0 0b47 	vmov.f64	d0, d7
 8012cac:	f00b fe4c 	bl	801e948 <cos>
 8012cb0:	eeb0 6b40 	vmov.f64	d6, d0
 8012cb4:	ed97 7b04 	vldr	d7, [r7, #16]
 8012cb8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012cbc:	ed97 7b04 	vldr	d7, [r7, #16]
 8012cc0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	ed83 7b00 	vstr	d7, [r3]
    x->im = r * (r * sin(d));
 8012cca:	ed97 0b02 	vldr	d0, [r7, #8]
 8012cce:	f00b fe77 	bl	801e9c0 <sin>
 8012cd2:	eeb0 6b40 	vmov.f64	d6, d0
 8012cd6:	ed97 7b04 	vldr	d7, [r7, #16]
 8012cda:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012cde:	ed97 7b04 	vldr	d7, [r7, #16]
 8012ce2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	ed83 7b02 	vstr	d7, [r3, #8]
}
 8012cec:	bf00      	nop
 8012cee:	371c      	adds	r7, #28
 8012cf0:	46bd      	mov	sp, r7
 8012cf2:	bd90      	pop	{r4, r7, pc}

08012cf4 <rt_InitInfAndNaN>:
#pragma warning(disable: 4756 56)

#endif

void rt_InitInfAndNaN()
{
 8012cf4:	b490      	push	{r4, r7}
 8012cf6:	af00      	add	r7, sp, #0
  rtNaN = nan("");
 8012cf8:	4a0f      	ldr	r2, [pc, #60]	; (8012d38 <rt_InitInfAndNaN+0x44>)
 8012cfa:	f04f 0300 	mov.w	r3, #0
 8012cfe:	4c0f      	ldr	r4, [pc, #60]	; (8012d3c <rt_InitInfAndNaN+0x48>)
 8012d00:	e9c2 3400 	strd	r3, r4, [r2]
  rtNaNF = nanf("");
 8012d04:	4b0e      	ldr	r3, [pc, #56]	; (8012d40 <rt_InitInfAndNaN+0x4c>)
 8012d06:	4a0f      	ldr	r2, [pc, #60]	; (8012d44 <rt_InitInfAndNaN+0x50>)
 8012d08:	601a      	str	r2, [r3, #0]
  rtInf = (real_T)INFINITY;
 8012d0a:	4a0f      	ldr	r2, [pc, #60]	; (8012d48 <rt_InitInfAndNaN+0x54>)
 8012d0c:	f04f 0300 	mov.w	r3, #0
 8012d10:	4c0e      	ldr	r4, [pc, #56]	; (8012d4c <rt_InitInfAndNaN+0x58>)
 8012d12:	e9c2 3400 	strd	r3, r4, [r2]
  rtInfF = (real32_T)INFINITY;
 8012d16:	4b0e      	ldr	r3, [pc, #56]	; (8012d50 <rt_InitInfAndNaN+0x5c>)
 8012d18:	f04f 42ff 	mov.w	r2, #2139095040	; 0x7f800000
 8012d1c:	601a      	str	r2, [r3, #0]
  rtMinusInf = -(real_T)INFINITY;
 8012d1e:	4a0d      	ldr	r2, [pc, #52]	; (8012d54 <rt_InitInfAndNaN+0x60>)
 8012d20:	f04f 0300 	mov.w	r3, #0
 8012d24:	4c0c      	ldr	r4, [pc, #48]	; (8012d58 <rt_InitInfAndNaN+0x64>)
 8012d26:	e9c2 3400 	strd	r3, r4, [r2]
  rtMinusInfF = -(real32_T)INFINITY;
 8012d2a:	4b0c      	ldr	r3, [pc, #48]	; (8012d5c <rt_InitInfAndNaN+0x68>)
 8012d2c:	4a0c      	ldr	r2, [pc, #48]	; (8012d60 <rt_InitInfAndNaN+0x6c>)
 8012d2e:	601a      	str	r2, [r3, #0]

#pragma warning(default: 4756 56)

#endif

}
 8012d30:	bf00      	nop
 8012d32:	46bd      	mov	sp, r7
 8012d34:	bc90      	pop	{r4, r7}
 8012d36:	4770      	bx	lr
 8012d38:	240006c8 	.word	0x240006c8
 8012d3c:	7ff80000 	.word	0x7ff80000
 8012d40:	240006b8 	.word	0x240006b8
 8012d44:	7fc00000 	.word	0x7fc00000
 8012d48:	240006c0 	.word	0x240006c0
 8012d4c:	7ff00000 	.word	0x7ff00000
 8012d50:	240006bc 	.word	0x240006bc
 8012d54:	240006d0 	.word	0x240006d0
 8012d58:	fff00000 	.word	0xfff00000
 8012d5c:	240006d8 	.word	0x240006d8
 8012d60:	ff800000 	.word	0xff800000
 8012d64:	00000000 	.word	0x00000000

08012d68 <rtIsInf>:
/* Function: rtIsInf ==================================================
 * Abstract:
 * Test if value is infinite
 */
boolean_T rtIsInf(real_T value)
{
 8012d68:	b480      	push	{r7}
 8012d6a:	b083      	sub	sp, #12
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	ed87 0b00 	vstr	d0, [r7]
  return (isinf(value) ? 1U : 0U);
 8012d72:	ed97 7b00 	vldr	d7, [r7]
 8012d76:	eeb0 7bc7 	vabs.f64	d7, d7
 8012d7a:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8012da8 <rtIsInf+0x40>
 8012d7e:	eeb4 7b46 	vcmp.f64	d7, d6
 8012d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d86:	bfd4      	ite	le
 8012d88:	2301      	movle	r3, #1
 8012d8a:	2300      	movgt	r3, #0
 8012d8c:	b2db      	uxtb	r3, r3
 8012d8e:	f083 0301 	eor.w	r3, r3, #1
 8012d92:	b2db      	uxtb	r3, r3
 8012d94:	b2db      	uxtb	r3, r3
}
 8012d96:	4618      	mov	r0, r3
 8012d98:	370c      	adds	r7, #12
 8012d9a:	46bd      	mov	sp, r7
 8012d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da0:	4770      	bx	lr
 8012da2:	bf00      	nop
 8012da4:	f3af 8000 	nop.w
 8012da8:	ffffffff 	.word	0xffffffff
 8012dac:	7fefffff 	.word	0x7fefffff

08012db0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8012db0:	b580      	push	{r7, lr}
 8012db2:	b082      	sub	sp, #8
 8012db4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8012db6:	2003      	movs	r0, #3
 8012db8:	f000 f98a 	bl	80130d0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8012dbc:	f002 fdba 	bl	8015934 <HAL_RCC_GetSysClockFreq>
 8012dc0:	4601      	mov	r1, r0
 8012dc2:	4b15      	ldr	r3, [pc, #84]	; (8012e18 <HAL_Init+0x68>)
 8012dc4:	699b      	ldr	r3, [r3, #24]
 8012dc6:	0a1b      	lsrs	r3, r3, #8
 8012dc8:	f003 030f 	and.w	r3, r3, #15
 8012dcc:	4a13      	ldr	r2, [pc, #76]	; (8012e1c <HAL_Init+0x6c>)
 8012dce:	5cd3      	ldrb	r3, [r2, r3]
 8012dd0:	f003 031f 	and.w	r3, r3, #31
 8012dd4:	fa21 f303 	lsr.w	r3, r1, r3
 8012dd8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8012dda:	4b0f      	ldr	r3, [pc, #60]	; (8012e18 <HAL_Init+0x68>)
 8012ddc:	699b      	ldr	r3, [r3, #24]
 8012dde:	f003 030f 	and.w	r3, r3, #15
 8012de2:	4a0e      	ldr	r2, [pc, #56]	; (8012e1c <HAL_Init+0x6c>)
 8012de4:	5cd3      	ldrb	r3, [r2, r3]
 8012de6:	f003 031f 	and.w	r3, r3, #31
 8012dea:	687a      	ldr	r2, [r7, #4]
 8012dec:	fa22 f303 	lsr.w	r3, r2, r3
 8012df0:	4a0b      	ldr	r2, [pc, #44]	; (8012e20 <HAL_Init+0x70>)
 8012df2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8012df4:	4a0b      	ldr	r2, [pc, #44]	; (8012e24 <HAL_Init+0x74>)
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8012dfa:	2000      	movs	r0, #0
 8012dfc:	f000 f814 	bl	8012e28 <HAL_InitTick>
 8012e00:	4603      	mov	r3, r0
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d001      	beq.n	8012e0a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8012e06:	2301      	movs	r3, #1
 8012e08:	e002      	b.n	8012e10 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8012e0a:	f7ef fa83 	bl	8002314 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8012e0e:	2300      	movs	r3, #0
}
 8012e10:	4618      	mov	r0, r3
 8012e12:	3708      	adds	r7, #8
 8012e14:	46bd      	mov	sp, r7
 8012e16:	bd80      	pop	{r7, pc}
 8012e18:	58024400 	.word	0x58024400
 8012e1c:	0801fa40 	.word	0x0801fa40
 8012e20:	24000010 	.word	0x24000010
 8012e24:	2400000c 	.word	0x2400000c

08012e28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012e28:	b580      	push	{r7, lr}
 8012e2a:	b082      	sub	sp, #8
 8012e2c:	af00      	add	r7, sp, #0
 8012e2e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8012e30:	4b15      	ldr	r3, [pc, #84]	; (8012e88 <HAL_InitTick+0x60>)
 8012e32:	781b      	ldrb	r3, [r3, #0]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d101      	bne.n	8012e3c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8012e38:	2301      	movs	r3, #1
 8012e3a:	e021      	b.n	8012e80 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8012e3c:	4b13      	ldr	r3, [pc, #76]	; (8012e8c <HAL_InitTick+0x64>)
 8012e3e:	681a      	ldr	r2, [r3, #0]
 8012e40:	4b11      	ldr	r3, [pc, #68]	; (8012e88 <HAL_InitTick+0x60>)
 8012e42:	781b      	ldrb	r3, [r3, #0]
 8012e44:	4619      	mov	r1, r3
 8012e46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012e4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8012e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012e52:	4618      	mov	r0, r3
 8012e54:	f000 f96f 	bl	8013136 <HAL_SYSTICK_Config>
 8012e58:	4603      	mov	r3, r0
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d001      	beq.n	8012e62 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8012e5e:	2301      	movs	r3, #1
 8012e60:	e00e      	b.n	8012e80 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	2b0f      	cmp	r3, #15
 8012e66:	d80a      	bhi.n	8012e7e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8012e68:	2200      	movs	r2, #0
 8012e6a:	6879      	ldr	r1, [r7, #4]
 8012e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8012e70:	f000 f939 	bl	80130e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8012e74:	4a06      	ldr	r2, [pc, #24]	; (8012e90 <HAL_InitTick+0x68>)
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8012e7a:	2300      	movs	r3, #0
 8012e7c:	e000      	b.n	8012e80 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8012e7e:	2301      	movs	r3, #1
}
 8012e80:	4618      	mov	r0, r3
 8012e82:	3708      	adds	r7, #8
 8012e84:	46bd      	mov	sp, r7
 8012e86:	bd80      	pop	{r7, pc}
 8012e88:	24000018 	.word	0x24000018
 8012e8c:	2400000c 	.word	0x2400000c
 8012e90:	24000014 	.word	0x24000014

08012e94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8012e94:	b480      	push	{r7}
 8012e96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8012e98:	4b06      	ldr	r3, [pc, #24]	; (8012eb4 <HAL_IncTick+0x20>)
 8012e9a:	781b      	ldrb	r3, [r3, #0]
 8012e9c:	461a      	mov	r2, r3
 8012e9e:	4b06      	ldr	r3, [pc, #24]	; (8012eb8 <HAL_IncTick+0x24>)
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	4413      	add	r3, r2
 8012ea4:	4a04      	ldr	r2, [pc, #16]	; (8012eb8 <HAL_IncTick+0x24>)
 8012ea6:	6013      	str	r3, [r2, #0]
}
 8012ea8:	bf00      	nop
 8012eaa:	46bd      	mov	sp, r7
 8012eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb0:	4770      	bx	lr
 8012eb2:	bf00      	nop
 8012eb4:	24000018 	.word	0x24000018
 8012eb8:	240006dc 	.word	0x240006dc

08012ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8012ebc:	b480      	push	{r7}
 8012ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8012ec0:	4b03      	ldr	r3, [pc, #12]	; (8012ed0 <HAL_GetTick+0x14>)
 8012ec2:	681b      	ldr	r3, [r3, #0]
}
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	46bd      	mov	sp, r7
 8012ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ecc:	4770      	bx	lr
 8012ece:	bf00      	nop
 8012ed0:	240006dc 	.word	0x240006dc

08012ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8012ed4:	b580      	push	{r7, lr}
 8012ed6:	b084      	sub	sp, #16
 8012ed8:	af00      	add	r7, sp, #0
 8012eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8012edc:	f7ff ffee 	bl	8012ebc <HAL_GetTick>
 8012ee0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012eec:	d005      	beq.n	8012efa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8012eee:	4b09      	ldr	r3, [pc, #36]	; (8012f14 <HAL_Delay+0x40>)
 8012ef0:	781b      	ldrb	r3, [r3, #0]
 8012ef2:	461a      	mov	r2, r3
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	4413      	add	r3, r2
 8012ef8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8012efa:	bf00      	nop
 8012efc:	f7ff ffde 	bl	8012ebc <HAL_GetTick>
 8012f00:	4602      	mov	r2, r0
 8012f02:	68bb      	ldr	r3, [r7, #8]
 8012f04:	1ad3      	subs	r3, r2, r3
 8012f06:	68fa      	ldr	r2, [r7, #12]
 8012f08:	429a      	cmp	r2, r3
 8012f0a:	d8f7      	bhi.n	8012efc <HAL_Delay+0x28>
  {
  }
}
 8012f0c:	bf00      	nop
 8012f0e:	3710      	adds	r7, #16
 8012f10:	46bd      	mov	sp, r7
 8012f12:	bd80      	pop	{r7, pc}
 8012f14:	24000018 	.word	0x24000018

08012f18 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8012f18:	b480      	push	{r7}
 8012f1a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8012f1c:	4b03      	ldr	r3, [pc, #12]	; (8012f2c <HAL_GetREVID+0x14>)
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	0c1b      	lsrs	r3, r3, #16
}
 8012f22:	4618      	mov	r0, r3
 8012f24:	46bd      	mov	sp, r7
 8012f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f2a:	4770      	bx	lr
 8012f2c:	5c001000 	.word	0x5c001000

08012f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012f30:	b480      	push	{r7}
 8012f32:	b085      	sub	sp, #20
 8012f34:	af00      	add	r7, sp, #0
 8012f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	f003 0307 	and.w	r3, r3, #7
 8012f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8012f40:	4b0b      	ldr	r3, [pc, #44]	; (8012f70 <__NVIC_SetPriorityGrouping+0x40>)
 8012f42:	68db      	ldr	r3, [r3, #12]
 8012f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8012f46:	68ba      	ldr	r2, [r7, #8]
 8012f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8012f4c:	4013      	ands	r3, r2
 8012f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8012f54:	68bb      	ldr	r3, [r7, #8]
 8012f56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8012f58:	4b06      	ldr	r3, [pc, #24]	; (8012f74 <__NVIC_SetPriorityGrouping+0x44>)
 8012f5a:	4313      	orrs	r3, r2
 8012f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8012f5e:	4a04      	ldr	r2, [pc, #16]	; (8012f70 <__NVIC_SetPriorityGrouping+0x40>)
 8012f60:	68bb      	ldr	r3, [r7, #8]
 8012f62:	60d3      	str	r3, [r2, #12]
}
 8012f64:	bf00      	nop
 8012f66:	3714      	adds	r7, #20
 8012f68:	46bd      	mov	sp, r7
 8012f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f6e:	4770      	bx	lr
 8012f70:	e000ed00 	.word	0xe000ed00
 8012f74:	05fa0000 	.word	0x05fa0000

08012f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8012f78:	b480      	push	{r7}
 8012f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8012f7c:	4b04      	ldr	r3, [pc, #16]	; (8012f90 <__NVIC_GetPriorityGrouping+0x18>)
 8012f7e:	68db      	ldr	r3, [r3, #12]
 8012f80:	0a1b      	lsrs	r3, r3, #8
 8012f82:	f003 0307 	and.w	r3, r3, #7
}
 8012f86:	4618      	mov	r0, r3
 8012f88:	46bd      	mov	sp, r7
 8012f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f8e:	4770      	bx	lr
 8012f90:	e000ed00 	.word	0xe000ed00

08012f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012f94:	b480      	push	{r7}
 8012f96:	b083      	sub	sp, #12
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	4603      	mov	r3, r0
 8012f9c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012f9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	db0b      	blt.n	8012fbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012fa6:	88fb      	ldrh	r3, [r7, #6]
 8012fa8:	f003 021f 	and.w	r2, r3, #31
 8012fac:	4907      	ldr	r1, [pc, #28]	; (8012fcc <__NVIC_EnableIRQ+0x38>)
 8012fae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012fb2:	095b      	lsrs	r3, r3, #5
 8012fb4:	2001      	movs	r0, #1
 8012fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8012fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8012fbe:	bf00      	nop
 8012fc0:	370c      	adds	r7, #12
 8012fc2:	46bd      	mov	sp, r7
 8012fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc8:	4770      	bx	lr
 8012fca:	bf00      	nop
 8012fcc:	e000e100 	.word	0xe000e100

08012fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8012fd0:	b480      	push	{r7}
 8012fd2:	b083      	sub	sp, #12
 8012fd4:	af00      	add	r7, sp, #0
 8012fd6:	4603      	mov	r3, r0
 8012fd8:	6039      	str	r1, [r7, #0]
 8012fda:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012fdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	db0a      	blt.n	8012ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012fe4:	683b      	ldr	r3, [r7, #0]
 8012fe6:	b2da      	uxtb	r2, r3
 8012fe8:	490c      	ldr	r1, [pc, #48]	; (801301c <__NVIC_SetPriority+0x4c>)
 8012fea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012fee:	0112      	lsls	r2, r2, #4
 8012ff0:	b2d2      	uxtb	r2, r2
 8012ff2:	440b      	add	r3, r1
 8012ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8012ff8:	e00a      	b.n	8013010 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012ffa:	683b      	ldr	r3, [r7, #0]
 8012ffc:	b2da      	uxtb	r2, r3
 8012ffe:	4908      	ldr	r1, [pc, #32]	; (8013020 <__NVIC_SetPriority+0x50>)
 8013000:	88fb      	ldrh	r3, [r7, #6]
 8013002:	f003 030f 	and.w	r3, r3, #15
 8013006:	3b04      	subs	r3, #4
 8013008:	0112      	lsls	r2, r2, #4
 801300a:	b2d2      	uxtb	r2, r2
 801300c:	440b      	add	r3, r1
 801300e:	761a      	strb	r2, [r3, #24]
}
 8013010:	bf00      	nop
 8013012:	370c      	adds	r7, #12
 8013014:	46bd      	mov	sp, r7
 8013016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801301a:	4770      	bx	lr
 801301c:	e000e100 	.word	0xe000e100
 8013020:	e000ed00 	.word	0xe000ed00

08013024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8013024:	b480      	push	{r7}
 8013026:	b089      	sub	sp, #36	; 0x24
 8013028:	af00      	add	r7, sp, #0
 801302a:	60f8      	str	r0, [r7, #12]
 801302c:	60b9      	str	r1, [r7, #8]
 801302e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	f003 0307 	and.w	r3, r3, #7
 8013036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8013038:	69fb      	ldr	r3, [r7, #28]
 801303a:	f1c3 0307 	rsb	r3, r3, #7
 801303e:	2b04      	cmp	r3, #4
 8013040:	bf28      	it	cs
 8013042:	2304      	movcs	r3, #4
 8013044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8013046:	69fb      	ldr	r3, [r7, #28]
 8013048:	3304      	adds	r3, #4
 801304a:	2b06      	cmp	r3, #6
 801304c:	d902      	bls.n	8013054 <NVIC_EncodePriority+0x30>
 801304e:	69fb      	ldr	r3, [r7, #28]
 8013050:	3b03      	subs	r3, #3
 8013052:	e000      	b.n	8013056 <NVIC_EncodePriority+0x32>
 8013054:	2300      	movs	r3, #0
 8013056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8013058:	f04f 32ff 	mov.w	r2, #4294967295
 801305c:	69bb      	ldr	r3, [r7, #24]
 801305e:	fa02 f303 	lsl.w	r3, r2, r3
 8013062:	43da      	mvns	r2, r3
 8013064:	68bb      	ldr	r3, [r7, #8]
 8013066:	401a      	ands	r2, r3
 8013068:	697b      	ldr	r3, [r7, #20]
 801306a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801306c:	f04f 31ff 	mov.w	r1, #4294967295
 8013070:	697b      	ldr	r3, [r7, #20]
 8013072:	fa01 f303 	lsl.w	r3, r1, r3
 8013076:	43d9      	mvns	r1, r3
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801307c:	4313      	orrs	r3, r2
         );
}
 801307e:	4618      	mov	r0, r3
 8013080:	3724      	adds	r7, #36	; 0x24
 8013082:	46bd      	mov	sp, r7
 8013084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013088:	4770      	bx	lr
	...

0801308c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801308c:	b580      	push	{r7, lr}
 801308e:	b082      	sub	sp, #8
 8013090:	af00      	add	r7, sp, #0
 8013092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	3b01      	subs	r3, #1
 8013098:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801309c:	d301      	bcc.n	80130a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801309e:	2301      	movs	r3, #1
 80130a0:	e00f      	b.n	80130c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80130a2:	4a0a      	ldr	r2, [pc, #40]	; (80130cc <SysTick_Config+0x40>)
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	3b01      	subs	r3, #1
 80130a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80130aa:	210f      	movs	r1, #15
 80130ac:	f04f 30ff 	mov.w	r0, #4294967295
 80130b0:	f7ff ff8e 	bl	8012fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80130b4:	4b05      	ldr	r3, [pc, #20]	; (80130cc <SysTick_Config+0x40>)
 80130b6:	2200      	movs	r2, #0
 80130b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80130ba:	4b04      	ldr	r3, [pc, #16]	; (80130cc <SysTick_Config+0x40>)
 80130bc:	2207      	movs	r2, #7
 80130be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80130c0:	2300      	movs	r3, #0
}
 80130c2:	4618      	mov	r0, r3
 80130c4:	3708      	adds	r7, #8
 80130c6:	46bd      	mov	sp, r7
 80130c8:	bd80      	pop	{r7, pc}
 80130ca:	bf00      	nop
 80130cc:	e000e010 	.word	0xe000e010

080130d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80130d0:	b580      	push	{r7, lr}
 80130d2:	b082      	sub	sp, #8
 80130d4:	af00      	add	r7, sp, #0
 80130d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80130d8:	6878      	ldr	r0, [r7, #4]
 80130da:	f7ff ff29 	bl	8012f30 <__NVIC_SetPriorityGrouping>
}
 80130de:	bf00      	nop
 80130e0:	3708      	adds	r7, #8
 80130e2:	46bd      	mov	sp, r7
 80130e4:	bd80      	pop	{r7, pc}

080130e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80130e6:	b580      	push	{r7, lr}
 80130e8:	b086      	sub	sp, #24
 80130ea:	af00      	add	r7, sp, #0
 80130ec:	4603      	mov	r3, r0
 80130ee:	60b9      	str	r1, [r7, #8]
 80130f0:	607a      	str	r2, [r7, #4]
 80130f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80130f4:	f7ff ff40 	bl	8012f78 <__NVIC_GetPriorityGrouping>
 80130f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80130fa:	687a      	ldr	r2, [r7, #4]
 80130fc:	68b9      	ldr	r1, [r7, #8]
 80130fe:	6978      	ldr	r0, [r7, #20]
 8013100:	f7ff ff90 	bl	8013024 <NVIC_EncodePriority>
 8013104:	4602      	mov	r2, r0
 8013106:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801310a:	4611      	mov	r1, r2
 801310c:	4618      	mov	r0, r3
 801310e:	f7ff ff5f 	bl	8012fd0 <__NVIC_SetPriority>
}
 8013112:	bf00      	nop
 8013114:	3718      	adds	r7, #24
 8013116:	46bd      	mov	sp, r7
 8013118:	bd80      	pop	{r7, pc}

0801311a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801311a:	b580      	push	{r7, lr}
 801311c:	b082      	sub	sp, #8
 801311e:	af00      	add	r7, sp, #0
 8013120:	4603      	mov	r3, r0
 8013122:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8013124:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013128:	4618      	mov	r0, r3
 801312a:	f7ff ff33 	bl	8012f94 <__NVIC_EnableIRQ>
}
 801312e:	bf00      	nop
 8013130:	3708      	adds	r7, #8
 8013132:	46bd      	mov	sp, r7
 8013134:	bd80      	pop	{r7, pc}

08013136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8013136:	b580      	push	{r7, lr}
 8013138:	b082      	sub	sp, #8
 801313a:	af00      	add	r7, sp, #0
 801313c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801313e:	6878      	ldr	r0, [r7, #4]
 8013140:	f7ff ffa4 	bl	801308c <SysTick_Config>
 8013144:	4603      	mov	r3, r0
}
 8013146:	4618      	mov	r0, r3
 8013148:	3708      	adds	r7, #8
 801314a:	46bd      	mov	sp, r7
 801314c:	bd80      	pop	{r7, pc}
	...

08013150 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8013150:	b580      	push	{r7, lr}
 8013152:	b084      	sub	sp, #16
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	2b00      	cmp	r3, #0
 801315c:	d101      	bne.n	8013162 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 801315e:	2301      	movs	r3, #1
 8013160:	e205      	b.n	801356e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8013168:	b2db      	uxtb	r3, r3
 801316a:	2b02      	cmp	r3, #2
 801316c:	d004      	beq.n	8013178 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	2280      	movs	r2, #128	; 0x80
 8013172:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8013174:	2301      	movs	r3, #1
 8013176:	e1fa      	b.n	801356e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	4a8c      	ldr	r2, [pc, #560]	; (80133b0 <HAL_DMA_Abort_IT+0x260>)
 801317e:	4293      	cmp	r3, r2
 8013180:	d04a      	beq.n	8013218 <HAL_DMA_Abort_IT+0xc8>
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	4a8b      	ldr	r2, [pc, #556]	; (80133b4 <HAL_DMA_Abort_IT+0x264>)
 8013188:	4293      	cmp	r3, r2
 801318a:	d045      	beq.n	8013218 <HAL_DMA_Abort_IT+0xc8>
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	4a89      	ldr	r2, [pc, #548]	; (80133b8 <HAL_DMA_Abort_IT+0x268>)
 8013192:	4293      	cmp	r3, r2
 8013194:	d040      	beq.n	8013218 <HAL_DMA_Abort_IT+0xc8>
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	4a88      	ldr	r2, [pc, #544]	; (80133bc <HAL_DMA_Abort_IT+0x26c>)
 801319c:	4293      	cmp	r3, r2
 801319e:	d03b      	beq.n	8013218 <HAL_DMA_Abort_IT+0xc8>
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	4a86      	ldr	r2, [pc, #536]	; (80133c0 <HAL_DMA_Abort_IT+0x270>)
 80131a6:	4293      	cmp	r3, r2
 80131a8:	d036      	beq.n	8013218 <HAL_DMA_Abort_IT+0xc8>
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	4a85      	ldr	r2, [pc, #532]	; (80133c4 <HAL_DMA_Abort_IT+0x274>)
 80131b0:	4293      	cmp	r3, r2
 80131b2:	d031      	beq.n	8013218 <HAL_DMA_Abort_IT+0xc8>
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	4a83      	ldr	r2, [pc, #524]	; (80133c8 <HAL_DMA_Abort_IT+0x278>)
 80131ba:	4293      	cmp	r3, r2
 80131bc:	d02c      	beq.n	8013218 <HAL_DMA_Abort_IT+0xc8>
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	4a82      	ldr	r2, [pc, #520]	; (80133cc <HAL_DMA_Abort_IT+0x27c>)
 80131c4:	4293      	cmp	r3, r2
 80131c6:	d027      	beq.n	8013218 <HAL_DMA_Abort_IT+0xc8>
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	4a80      	ldr	r2, [pc, #512]	; (80133d0 <HAL_DMA_Abort_IT+0x280>)
 80131ce:	4293      	cmp	r3, r2
 80131d0:	d022      	beq.n	8013218 <HAL_DMA_Abort_IT+0xc8>
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	4a7f      	ldr	r2, [pc, #508]	; (80133d4 <HAL_DMA_Abort_IT+0x284>)
 80131d8:	4293      	cmp	r3, r2
 80131da:	d01d      	beq.n	8013218 <HAL_DMA_Abort_IT+0xc8>
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	4a7d      	ldr	r2, [pc, #500]	; (80133d8 <HAL_DMA_Abort_IT+0x288>)
 80131e2:	4293      	cmp	r3, r2
 80131e4:	d018      	beq.n	8013218 <HAL_DMA_Abort_IT+0xc8>
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	4a7c      	ldr	r2, [pc, #496]	; (80133dc <HAL_DMA_Abort_IT+0x28c>)
 80131ec:	4293      	cmp	r3, r2
 80131ee:	d013      	beq.n	8013218 <HAL_DMA_Abort_IT+0xc8>
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	4a7a      	ldr	r2, [pc, #488]	; (80133e0 <HAL_DMA_Abort_IT+0x290>)
 80131f6:	4293      	cmp	r3, r2
 80131f8:	d00e      	beq.n	8013218 <HAL_DMA_Abort_IT+0xc8>
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	4a79      	ldr	r2, [pc, #484]	; (80133e4 <HAL_DMA_Abort_IT+0x294>)
 8013200:	4293      	cmp	r3, r2
 8013202:	d009      	beq.n	8013218 <HAL_DMA_Abort_IT+0xc8>
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	4a77      	ldr	r2, [pc, #476]	; (80133e8 <HAL_DMA_Abort_IT+0x298>)
 801320a:	4293      	cmp	r3, r2
 801320c:	d004      	beq.n	8013218 <HAL_DMA_Abort_IT+0xc8>
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	4a76      	ldr	r2, [pc, #472]	; (80133ec <HAL_DMA_Abort_IT+0x29c>)
 8013214:	4293      	cmp	r3, r2
 8013216:	d101      	bne.n	801321c <HAL_DMA_Abort_IT+0xcc>
 8013218:	2301      	movs	r3, #1
 801321a:	e000      	b.n	801321e <HAL_DMA_Abort_IT+0xce>
 801321c:	2300      	movs	r3, #0
 801321e:	2b00      	cmp	r3, #0
 8013220:	d065      	beq.n	80132ee <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	2204      	movs	r2, #4
 8013226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	4a60      	ldr	r2, [pc, #384]	; (80133b0 <HAL_DMA_Abort_IT+0x260>)
 8013230:	4293      	cmp	r3, r2
 8013232:	d04a      	beq.n	80132ca <HAL_DMA_Abort_IT+0x17a>
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	4a5e      	ldr	r2, [pc, #376]	; (80133b4 <HAL_DMA_Abort_IT+0x264>)
 801323a:	4293      	cmp	r3, r2
 801323c:	d045      	beq.n	80132ca <HAL_DMA_Abort_IT+0x17a>
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	4a5d      	ldr	r2, [pc, #372]	; (80133b8 <HAL_DMA_Abort_IT+0x268>)
 8013244:	4293      	cmp	r3, r2
 8013246:	d040      	beq.n	80132ca <HAL_DMA_Abort_IT+0x17a>
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	4a5b      	ldr	r2, [pc, #364]	; (80133bc <HAL_DMA_Abort_IT+0x26c>)
 801324e:	4293      	cmp	r3, r2
 8013250:	d03b      	beq.n	80132ca <HAL_DMA_Abort_IT+0x17a>
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	4a5a      	ldr	r2, [pc, #360]	; (80133c0 <HAL_DMA_Abort_IT+0x270>)
 8013258:	4293      	cmp	r3, r2
 801325a:	d036      	beq.n	80132ca <HAL_DMA_Abort_IT+0x17a>
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	4a58      	ldr	r2, [pc, #352]	; (80133c4 <HAL_DMA_Abort_IT+0x274>)
 8013262:	4293      	cmp	r3, r2
 8013264:	d031      	beq.n	80132ca <HAL_DMA_Abort_IT+0x17a>
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	4a57      	ldr	r2, [pc, #348]	; (80133c8 <HAL_DMA_Abort_IT+0x278>)
 801326c:	4293      	cmp	r3, r2
 801326e:	d02c      	beq.n	80132ca <HAL_DMA_Abort_IT+0x17a>
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	4a55      	ldr	r2, [pc, #340]	; (80133cc <HAL_DMA_Abort_IT+0x27c>)
 8013276:	4293      	cmp	r3, r2
 8013278:	d027      	beq.n	80132ca <HAL_DMA_Abort_IT+0x17a>
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	4a54      	ldr	r2, [pc, #336]	; (80133d0 <HAL_DMA_Abort_IT+0x280>)
 8013280:	4293      	cmp	r3, r2
 8013282:	d022      	beq.n	80132ca <HAL_DMA_Abort_IT+0x17a>
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	4a52      	ldr	r2, [pc, #328]	; (80133d4 <HAL_DMA_Abort_IT+0x284>)
 801328a:	4293      	cmp	r3, r2
 801328c:	d01d      	beq.n	80132ca <HAL_DMA_Abort_IT+0x17a>
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	4a51      	ldr	r2, [pc, #324]	; (80133d8 <HAL_DMA_Abort_IT+0x288>)
 8013294:	4293      	cmp	r3, r2
 8013296:	d018      	beq.n	80132ca <HAL_DMA_Abort_IT+0x17a>
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	4a4f      	ldr	r2, [pc, #316]	; (80133dc <HAL_DMA_Abort_IT+0x28c>)
 801329e:	4293      	cmp	r3, r2
 80132a0:	d013      	beq.n	80132ca <HAL_DMA_Abort_IT+0x17a>
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	4a4e      	ldr	r2, [pc, #312]	; (80133e0 <HAL_DMA_Abort_IT+0x290>)
 80132a8:	4293      	cmp	r3, r2
 80132aa:	d00e      	beq.n	80132ca <HAL_DMA_Abort_IT+0x17a>
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	4a4c      	ldr	r2, [pc, #304]	; (80133e4 <HAL_DMA_Abort_IT+0x294>)
 80132b2:	4293      	cmp	r3, r2
 80132b4:	d009      	beq.n	80132ca <HAL_DMA_Abort_IT+0x17a>
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	4a4b      	ldr	r2, [pc, #300]	; (80133e8 <HAL_DMA_Abort_IT+0x298>)
 80132bc:	4293      	cmp	r3, r2
 80132be:	d004      	beq.n	80132ca <HAL_DMA_Abort_IT+0x17a>
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	4a49      	ldr	r2, [pc, #292]	; (80133ec <HAL_DMA_Abort_IT+0x29c>)
 80132c6:	4293      	cmp	r3, r2
 80132c8:	d108      	bne.n	80132dc <HAL_DMA_Abort_IT+0x18c>
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	681a      	ldr	r2, [r3, #0]
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	f022 0201 	bic.w	r2, r2, #1
 80132d8:	601a      	str	r2, [r3, #0]
 80132da:	e147      	b.n	801356c <HAL_DMA_Abort_IT+0x41c>
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	681a      	ldr	r2, [r3, #0]
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	f022 0201 	bic.w	r2, r2, #1
 80132ea:	601a      	str	r2, [r3, #0]
 80132ec:	e13e      	b.n	801356c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	681a      	ldr	r2, [r3, #0]
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	f022 020e 	bic.w	r2, r2, #14
 80132fc:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	4a2b      	ldr	r2, [pc, #172]	; (80133b0 <HAL_DMA_Abort_IT+0x260>)
 8013304:	4293      	cmp	r3, r2
 8013306:	d04a      	beq.n	801339e <HAL_DMA_Abort_IT+0x24e>
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	4a29      	ldr	r2, [pc, #164]	; (80133b4 <HAL_DMA_Abort_IT+0x264>)
 801330e:	4293      	cmp	r3, r2
 8013310:	d045      	beq.n	801339e <HAL_DMA_Abort_IT+0x24e>
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	4a28      	ldr	r2, [pc, #160]	; (80133b8 <HAL_DMA_Abort_IT+0x268>)
 8013318:	4293      	cmp	r3, r2
 801331a:	d040      	beq.n	801339e <HAL_DMA_Abort_IT+0x24e>
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	4a26      	ldr	r2, [pc, #152]	; (80133bc <HAL_DMA_Abort_IT+0x26c>)
 8013322:	4293      	cmp	r3, r2
 8013324:	d03b      	beq.n	801339e <HAL_DMA_Abort_IT+0x24e>
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	4a25      	ldr	r2, [pc, #148]	; (80133c0 <HAL_DMA_Abort_IT+0x270>)
 801332c:	4293      	cmp	r3, r2
 801332e:	d036      	beq.n	801339e <HAL_DMA_Abort_IT+0x24e>
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	4a23      	ldr	r2, [pc, #140]	; (80133c4 <HAL_DMA_Abort_IT+0x274>)
 8013336:	4293      	cmp	r3, r2
 8013338:	d031      	beq.n	801339e <HAL_DMA_Abort_IT+0x24e>
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	4a22      	ldr	r2, [pc, #136]	; (80133c8 <HAL_DMA_Abort_IT+0x278>)
 8013340:	4293      	cmp	r3, r2
 8013342:	d02c      	beq.n	801339e <HAL_DMA_Abort_IT+0x24e>
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	4a20      	ldr	r2, [pc, #128]	; (80133cc <HAL_DMA_Abort_IT+0x27c>)
 801334a:	4293      	cmp	r3, r2
 801334c:	d027      	beq.n	801339e <HAL_DMA_Abort_IT+0x24e>
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	4a1f      	ldr	r2, [pc, #124]	; (80133d0 <HAL_DMA_Abort_IT+0x280>)
 8013354:	4293      	cmp	r3, r2
 8013356:	d022      	beq.n	801339e <HAL_DMA_Abort_IT+0x24e>
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	4a1d      	ldr	r2, [pc, #116]	; (80133d4 <HAL_DMA_Abort_IT+0x284>)
 801335e:	4293      	cmp	r3, r2
 8013360:	d01d      	beq.n	801339e <HAL_DMA_Abort_IT+0x24e>
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	4a1c      	ldr	r2, [pc, #112]	; (80133d8 <HAL_DMA_Abort_IT+0x288>)
 8013368:	4293      	cmp	r3, r2
 801336a:	d018      	beq.n	801339e <HAL_DMA_Abort_IT+0x24e>
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	4a1a      	ldr	r2, [pc, #104]	; (80133dc <HAL_DMA_Abort_IT+0x28c>)
 8013372:	4293      	cmp	r3, r2
 8013374:	d013      	beq.n	801339e <HAL_DMA_Abort_IT+0x24e>
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	4a19      	ldr	r2, [pc, #100]	; (80133e0 <HAL_DMA_Abort_IT+0x290>)
 801337c:	4293      	cmp	r3, r2
 801337e:	d00e      	beq.n	801339e <HAL_DMA_Abort_IT+0x24e>
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	4a17      	ldr	r2, [pc, #92]	; (80133e4 <HAL_DMA_Abort_IT+0x294>)
 8013386:	4293      	cmp	r3, r2
 8013388:	d009      	beq.n	801339e <HAL_DMA_Abort_IT+0x24e>
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	4a16      	ldr	r2, [pc, #88]	; (80133e8 <HAL_DMA_Abort_IT+0x298>)
 8013390:	4293      	cmp	r3, r2
 8013392:	d004      	beq.n	801339e <HAL_DMA_Abort_IT+0x24e>
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	4a14      	ldr	r2, [pc, #80]	; (80133ec <HAL_DMA_Abort_IT+0x29c>)
 801339a:	4293      	cmp	r3, r2
 801339c:	d128      	bne.n	80133f0 <HAL_DMA_Abort_IT+0x2a0>
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	681a      	ldr	r2, [r3, #0]
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	f022 0201 	bic.w	r2, r2, #1
 80133ac:	601a      	str	r2, [r3, #0]
 80133ae:	e027      	b.n	8013400 <HAL_DMA_Abort_IT+0x2b0>
 80133b0:	40020010 	.word	0x40020010
 80133b4:	40020028 	.word	0x40020028
 80133b8:	40020040 	.word	0x40020040
 80133bc:	40020058 	.word	0x40020058
 80133c0:	40020070 	.word	0x40020070
 80133c4:	40020088 	.word	0x40020088
 80133c8:	400200a0 	.word	0x400200a0
 80133cc:	400200b8 	.word	0x400200b8
 80133d0:	40020410 	.word	0x40020410
 80133d4:	40020428 	.word	0x40020428
 80133d8:	40020440 	.word	0x40020440
 80133dc:	40020458 	.word	0x40020458
 80133e0:	40020470 	.word	0x40020470
 80133e4:	40020488 	.word	0x40020488
 80133e8:	400204a0 	.word	0x400204a0
 80133ec:	400204b8 	.word	0x400204b8
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	681a      	ldr	r2, [r3, #0]
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	f022 0201 	bic.w	r2, r2, #1
 80133fe:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	4a5c      	ldr	r2, [pc, #368]	; (8013578 <HAL_DMA_Abort_IT+0x428>)
 8013406:	4293      	cmp	r3, r2
 8013408:	d072      	beq.n	80134f0 <HAL_DMA_Abort_IT+0x3a0>
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	4a5b      	ldr	r2, [pc, #364]	; (801357c <HAL_DMA_Abort_IT+0x42c>)
 8013410:	4293      	cmp	r3, r2
 8013412:	d06d      	beq.n	80134f0 <HAL_DMA_Abort_IT+0x3a0>
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	4a59      	ldr	r2, [pc, #356]	; (8013580 <HAL_DMA_Abort_IT+0x430>)
 801341a:	4293      	cmp	r3, r2
 801341c:	d068      	beq.n	80134f0 <HAL_DMA_Abort_IT+0x3a0>
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	4a58      	ldr	r2, [pc, #352]	; (8013584 <HAL_DMA_Abort_IT+0x434>)
 8013424:	4293      	cmp	r3, r2
 8013426:	d063      	beq.n	80134f0 <HAL_DMA_Abort_IT+0x3a0>
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	4a56      	ldr	r2, [pc, #344]	; (8013588 <HAL_DMA_Abort_IT+0x438>)
 801342e:	4293      	cmp	r3, r2
 8013430:	d05e      	beq.n	80134f0 <HAL_DMA_Abort_IT+0x3a0>
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	4a55      	ldr	r2, [pc, #340]	; (801358c <HAL_DMA_Abort_IT+0x43c>)
 8013438:	4293      	cmp	r3, r2
 801343a:	d059      	beq.n	80134f0 <HAL_DMA_Abort_IT+0x3a0>
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	4a53      	ldr	r2, [pc, #332]	; (8013590 <HAL_DMA_Abort_IT+0x440>)
 8013442:	4293      	cmp	r3, r2
 8013444:	d054      	beq.n	80134f0 <HAL_DMA_Abort_IT+0x3a0>
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	4a52      	ldr	r2, [pc, #328]	; (8013594 <HAL_DMA_Abort_IT+0x444>)
 801344c:	4293      	cmp	r3, r2
 801344e:	d04f      	beq.n	80134f0 <HAL_DMA_Abort_IT+0x3a0>
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	4a50      	ldr	r2, [pc, #320]	; (8013598 <HAL_DMA_Abort_IT+0x448>)
 8013456:	4293      	cmp	r3, r2
 8013458:	d04a      	beq.n	80134f0 <HAL_DMA_Abort_IT+0x3a0>
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	4a4f      	ldr	r2, [pc, #316]	; (801359c <HAL_DMA_Abort_IT+0x44c>)
 8013460:	4293      	cmp	r3, r2
 8013462:	d045      	beq.n	80134f0 <HAL_DMA_Abort_IT+0x3a0>
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	4a4d      	ldr	r2, [pc, #308]	; (80135a0 <HAL_DMA_Abort_IT+0x450>)
 801346a:	4293      	cmp	r3, r2
 801346c:	d040      	beq.n	80134f0 <HAL_DMA_Abort_IT+0x3a0>
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	4a4c      	ldr	r2, [pc, #304]	; (80135a4 <HAL_DMA_Abort_IT+0x454>)
 8013474:	4293      	cmp	r3, r2
 8013476:	d03b      	beq.n	80134f0 <HAL_DMA_Abort_IT+0x3a0>
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	4a4a      	ldr	r2, [pc, #296]	; (80135a8 <HAL_DMA_Abort_IT+0x458>)
 801347e:	4293      	cmp	r3, r2
 8013480:	d036      	beq.n	80134f0 <HAL_DMA_Abort_IT+0x3a0>
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	4a49      	ldr	r2, [pc, #292]	; (80135ac <HAL_DMA_Abort_IT+0x45c>)
 8013488:	4293      	cmp	r3, r2
 801348a:	d031      	beq.n	80134f0 <HAL_DMA_Abort_IT+0x3a0>
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	4a47      	ldr	r2, [pc, #284]	; (80135b0 <HAL_DMA_Abort_IT+0x460>)
 8013492:	4293      	cmp	r3, r2
 8013494:	d02c      	beq.n	80134f0 <HAL_DMA_Abort_IT+0x3a0>
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	4a46      	ldr	r2, [pc, #280]	; (80135b4 <HAL_DMA_Abort_IT+0x464>)
 801349c:	4293      	cmp	r3, r2
 801349e:	d027      	beq.n	80134f0 <HAL_DMA_Abort_IT+0x3a0>
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	4a44      	ldr	r2, [pc, #272]	; (80135b8 <HAL_DMA_Abort_IT+0x468>)
 80134a6:	4293      	cmp	r3, r2
 80134a8:	d022      	beq.n	80134f0 <HAL_DMA_Abort_IT+0x3a0>
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	4a43      	ldr	r2, [pc, #268]	; (80135bc <HAL_DMA_Abort_IT+0x46c>)
 80134b0:	4293      	cmp	r3, r2
 80134b2:	d01d      	beq.n	80134f0 <HAL_DMA_Abort_IT+0x3a0>
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	4a41      	ldr	r2, [pc, #260]	; (80135c0 <HAL_DMA_Abort_IT+0x470>)
 80134ba:	4293      	cmp	r3, r2
 80134bc:	d018      	beq.n	80134f0 <HAL_DMA_Abort_IT+0x3a0>
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	4a40      	ldr	r2, [pc, #256]	; (80135c4 <HAL_DMA_Abort_IT+0x474>)
 80134c4:	4293      	cmp	r3, r2
 80134c6:	d013      	beq.n	80134f0 <HAL_DMA_Abort_IT+0x3a0>
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	4a3e      	ldr	r2, [pc, #248]	; (80135c8 <HAL_DMA_Abort_IT+0x478>)
 80134ce:	4293      	cmp	r3, r2
 80134d0:	d00e      	beq.n	80134f0 <HAL_DMA_Abort_IT+0x3a0>
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	4a3d      	ldr	r2, [pc, #244]	; (80135cc <HAL_DMA_Abort_IT+0x47c>)
 80134d8:	4293      	cmp	r3, r2
 80134da:	d009      	beq.n	80134f0 <HAL_DMA_Abort_IT+0x3a0>
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	4a3b      	ldr	r2, [pc, #236]	; (80135d0 <HAL_DMA_Abort_IT+0x480>)
 80134e2:	4293      	cmp	r3, r2
 80134e4:	d004      	beq.n	80134f0 <HAL_DMA_Abort_IT+0x3a0>
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	4a3a      	ldr	r2, [pc, #232]	; (80135d4 <HAL_DMA_Abort_IT+0x484>)
 80134ec:	4293      	cmp	r3, r2
 80134ee:	d101      	bne.n	80134f4 <HAL_DMA_Abort_IT+0x3a4>
 80134f0:	2301      	movs	r3, #1
 80134f2:	e000      	b.n	80134f6 <HAL_DMA_Abort_IT+0x3a6>
 80134f4:	2300      	movs	r3, #0
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d028      	beq.n	801354c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80134fe:	681a      	ldr	r2, [r3, #0]
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013504:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8013508:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801350e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013514:	f003 031f 	and.w	r3, r3, #31
 8013518:	2201      	movs	r2, #1
 801351a:	409a      	lsls	r2, r3
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013524:	687a      	ldr	r2, [r7, #4]
 8013526:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8013528:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801352e:	2b00      	cmp	r3, #0
 8013530:	d00c      	beq.n	801354c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013536:	681a      	ldr	r2, [r3, #0]
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801353c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8013540:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013546:	687a      	ldr	r2, [r7, #4]
 8013548:	6f52      	ldr	r2, [r2, #116]	; 0x74
 801354a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	2200      	movs	r2, #0
 8013550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	2201      	movs	r2, #1
 8013558:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013560:	2b00      	cmp	r3, #0
 8013562:	d003      	beq.n	801356c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013568:	6878      	ldr	r0, [r7, #4]
 801356a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 801356c:	2300      	movs	r3, #0
}
 801356e:	4618      	mov	r0, r3
 8013570:	3710      	adds	r7, #16
 8013572:	46bd      	mov	sp, r7
 8013574:	bd80      	pop	{r7, pc}
 8013576:	bf00      	nop
 8013578:	40020010 	.word	0x40020010
 801357c:	40020028 	.word	0x40020028
 8013580:	40020040 	.word	0x40020040
 8013584:	40020058 	.word	0x40020058
 8013588:	40020070 	.word	0x40020070
 801358c:	40020088 	.word	0x40020088
 8013590:	400200a0 	.word	0x400200a0
 8013594:	400200b8 	.word	0x400200b8
 8013598:	40020410 	.word	0x40020410
 801359c:	40020428 	.word	0x40020428
 80135a0:	40020440 	.word	0x40020440
 80135a4:	40020458 	.word	0x40020458
 80135a8:	40020470 	.word	0x40020470
 80135ac:	40020488 	.word	0x40020488
 80135b0:	400204a0 	.word	0x400204a0
 80135b4:	400204b8 	.word	0x400204b8
 80135b8:	58025408 	.word	0x58025408
 80135bc:	5802541c 	.word	0x5802541c
 80135c0:	58025430 	.word	0x58025430
 80135c4:	58025444 	.word	0x58025444
 80135c8:	58025458 	.word	0x58025458
 80135cc:	5802546c 	.word	0x5802546c
 80135d0:	58025480 	.word	0x58025480
 80135d4:	58025494 	.word	0x58025494

080135d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80135d8:	b480      	push	{r7}
 80135da:	b089      	sub	sp, #36	; 0x24
 80135dc:	af00      	add	r7, sp, #0
 80135de:	6078      	str	r0, [r7, #4]
 80135e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80135e2:	2300      	movs	r3, #0
 80135e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80135e6:	4b89      	ldr	r3, [pc, #548]	; (801380c <HAL_GPIO_Init+0x234>)
 80135e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80135ea:	e194      	b.n	8013916 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80135ec:	683b      	ldr	r3, [r7, #0]
 80135ee:	681a      	ldr	r2, [r3, #0]
 80135f0:	2101      	movs	r1, #1
 80135f2:	69fb      	ldr	r3, [r7, #28]
 80135f4:	fa01 f303 	lsl.w	r3, r1, r3
 80135f8:	4013      	ands	r3, r2
 80135fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80135fc:	693b      	ldr	r3, [r7, #16]
 80135fe:	2b00      	cmp	r3, #0
 8013600:	f000 8186 	beq.w	8013910 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8013604:	683b      	ldr	r3, [r7, #0]
 8013606:	685b      	ldr	r3, [r3, #4]
 8013608:	2b01      	cmp	r3, #1
 801360a:	d00b      	beq.n	8013624 <HAL_GPIO_Init+0x4c>
 801360c:	683b      	ldr	r3, [r7, #0]
 801360e:	685b      	ldr	r3, [r3, #4]
 8013610:	2b02      	cmp	r3, #2
 8013612:	d007      	beq.n	8013624 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8013614:	683b      	ldr	r3, [r7, #0]
 8013616:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8013618:	2b11      	cmp	r3, #17
 801361a:	d003      	beq.n	8013624 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801361c:	683b      	ldr	r3, [r7, #0]
 801361e:	685b      	ldr	r3, [r3, #4]
 8013620:	2b12      	cmp	r3, #18
 8013622:	d130      	bne.n	8013686 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	689b      	ldr	r3, [r3, #8]
 8013628:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801362a:	69fb      	ldr	r3, [r7, #28]
 801362c:	005b      	lsls	r3, r3, #1
 801362e:	2203      	movs	r2, #3
 8013630:	fa02 f303 	lsl.w	r3, r2, r3
 8013634:	43db      	mvns	r3, r3
 8013636:	69ba      	ldr	r2, [r7, #24]
 8013638:	4013      	ands	r3, r2
 801363a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801363c:	683b      	ldr	r3, [r7, #0]
 801363e:	68da      	ldr	r2, [r3, #12]
 8013640:	69fb      	ldr	r3, [r7, #28]
 8013642:	005b      	lsls	r3, r3, #1
 8013644:	fa02 f303 	lsl.w	r3, r2, r3
 8013648:	69ba      	ldr	r2, [r7, #24]
 801364a:	4313      	orrs	r3, r2
 801364c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	69ba      	ldr	r2, [r7, #24]
 8013652:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	685b      	ldr	r3, [r3, #4]
 8013658:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801365a:	2201      	movs	r2, #1
 801365c:	69fb      	ldr	r3, [r7, #28]
 801365e:	fa02 f303 	lsl.w	r3, r2, r3
 8013662:	43db      	mvns	r3, r3
 8013664:	69ba      	ldr	r2, [r7, #24]
 8013666:	4013      	ands	r3, r2
 8013668:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 801366a:	683b      	ldr	r3, [r7, #0]
 801366c:	685b      	ldr	r3, [r3, #4]
 801366e:	091b      	lsrs	r3, r3, #4
 8013670:	f003 0201 	and.w	r2, r3, #1
 8013674:	69fb      	ldr	r3, [r7, #28]
 8013676:	fa02 f303 	lsl.w	r3, r2, r3
 801367a:	69ba      	ldr	r2, [r7, #24]
 801367c:	4313      	orrs	r3, r2
 801367e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	69ba      	ldr	r2, [r7, #24]
 8013684:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	68db      	ldr	r3, [r3, #12]
 801368a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801368c:	69fb      	ldr	r3, [r7, #28]
 801368e:	005b      	lsls	r3, r3, #1
 8013690:	2203      	movs	r2, #3
 8013692:	fa02 f303 	lsl.w	r3, r2, r3
 8013696:	43db      	mvns	r3, r3
 8013698:	69ba      	ldr	r2, [r7, #24]
 801369a:	4013      	ands	r3, r2
 801369c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801369e:	683b      	ldr	r3, [r7, #0]
 80136a0:	689a      	ldr	r2, [r3, #8]
 80136a2:	69fb      	ldr	r3, [r7, #28]
 80136a4:	005b      	lsls	r3, r3, #1
 80136a6:	fa02 f303 	lsl.w	r3, r2, r3
 80136aa:	69ba      	ldr	r2, [r7, #24]
 80136ac:	4313      	orrs	r3, r2
 80136ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	69ba      	ldr	r2, [r7, #24]
 80136b4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80136b6:	683b      	ldr	r3, [r7, #0]
 80136b8:	685b      	ldr	r3, [r3, #4]
 80136ba:	2b02      	cmp	r3, #2
 80136bc:	d003      	beq.n	80136c6 <HAL_GPIO_Init+0xee>
 80136be:	683b      	ldr	r3, [r7, #0]
 80136c0:	685b      	ldr	r3, [r3, #4]
 80136c2:	2b12      	cmp	r3, #18
 80136c4:	d123      	bne.n	801370e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80136c6:	69fb      	ldr	r3, [r7, #28]
 80136c8:	08da      	lsrs	r2, r3, #3
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	3208      	adds	r2, #8
 80136ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80136d4:	69fb      	ldr	r3, [r7, #28]
 80136d6:	f003 0307 	and.w	r3, r3, #7
 80136da:	009b      	lsls	r3, r3, #2
 80136dc:	220f      	movs	r2, #15
 80136de:	fa02 f303 	lsl.w	r3, r2, r3
 80136e2:	43db      	mvns	r3, r3
 80136e4:	69ba      	ldr	r2, [r7, #24]
 80136e6:	4013      	ands	r3, r2
 80136e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80136ea:	683b      	ldr	r3, [r7, #0]
 80136ec:	691a      	ldr	r2, [r3, #16]
 80136ee:	69fb      	ldr	r3, [r7, #28]
 80136f0:	f003 0307 	and.w	r3, r3, #7
 80136f4:	009b      	lsls	r3, r3, #2
 80136f6:	fa02 f303 	lsl.w	r3, r2, r3
 80136fa:	69ba      	ldr	r2, [r7, #24]
 80136fc:	4313      	orrs	r3, r2
 80136fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8013700:	69fb      	ldr	r3, [r7, #28]
 8013702:	08da      	lsrs	r2, r3, #3
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	3208      	adds	r2, #8
 8013708:	69b9      	ldr	r1, [r7, #24]
 801370a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8013714:	69fb      	ldr	r3, [r7, #28]
 8013716:	005b      	lsls	r3, r3, #1
 8013718:	2203      	movs	r2, #3
 801371a:	fa02 f303 	lsl.w	r3, r2, r3
 801371e:	43db      	mvns	r3, r3
 8013720:	69ba      	ldr	r2, [r7, #24]
 8013722:	4013      	ands	r3, r2
 8013724:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8013726:	683b      	ldr	r3, [r7, #0]
 8013728:	685b      	ldr	r3, [r3, #4]
 801372a:	f003 0203 	and.w	r2, r3, #3
 801372e:	69fb      	ldr	r3, [r7, #28]
 8013730:	005b      	lsls	r3, r3, #1
 8013732:	fa02 f303 	lsl.w	r3, r2, r3
 8013736:	69ba      	ldr	r2, [r7, #24]
 8013738:	4313      	orrs	r3, r2
 801373a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	69ba      	ldr	r2, [r7, #24]
 8013740:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8013742:	683b      	ldr	r3, [r7, #0]
 8013744:	685b      	ldr	r3, [r3, #4]
 8013746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801374a:	2b00      	cmp	r3, #0
 801374c:	f000 80e0 	beq.w	8013910 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013750:	4b2f      	ldr	r3, [pc, #188]	; (8013810 <HAL_GPIO_Init+0x238>)
 8013752:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8013756:	4a2e      	ldr	r2, [pc, #184]	; (8013810 <HAL_GPIO_Init+0x238>)
 8013758:	f043 0302 	orr.w	r3, r3, #2
 801375c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8013760:	4b2b      	ldr	r3, [pc, #172]	; (8013810 <HAL_GPIO_Init+0x238>)
 8013762:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8013766:	f003 0302 	and.w	r3, r3, #2
 801376a:	60fb      	str	r3, [r7, #12]
 801376c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801376e:	4a29      	ldr	r2, [pc, #164]	; (8013814 <HAL_GPIO_Init+0x23c>)
 8013770:	69fb      	ldr	r3, [r7, #28]
 8013772:	089b      	lsrs	r3, r3, #2
 8013774:	3302      	adds	r3, #2
 8013776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801377a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801377c:	69fb      	ldr	r3, [r7, #28]
 801377e:	f003 0303 	and.w	r3, r3, #3
 8013782:	009b      	lsls	r3, r3, #2
 8013784:	220f      	movs	r2, #15
 8013786:	fa02 f303 	lsl.w	r3, r2, r3
 801378a:	43db      	mvns	r3, r3
 801378c:	69ba      	ldr	r2, [r7, #24]
 801378e:	4013      	ands	r3, r2
 8013790:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	4a20      	ldr	r2, [pc, #128]	; (8013818 <HAL_GPIO_Init+0x240>)
 8013796:	4293      	cmp	r3, r2
 8013798:	d052      	beq.n	8013840 <HAL_GPIO_Init+0x268>
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	4a1f      	ldr	r2, [pc, #124]	; (801381c <HAL_GPIO_Init+0x244>)
 801379e:	4293      	cmp	r3, r2
 80137a0:	d031      	beq.n	8013806 <HAL_GPIO_Init+0x22e>
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	4a1e      	ldr	r2, [pc, #120]	; (8013820 <HAL_GPIO_Init+0x248>)
 80137a6:	4293      	cmp	r3, r2
 80137a8:	d02b      	beq.n	8013802 <HAL_GPIO_Init+0x22a>
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	4a1d      	ldr	r2, [pc, #116]	; (8013824 <HAL_GPIO_Init+0x24c>)
 80137ae:	4293      	cmp	r3, r2
 80137b0:	d025      	beq.n	80137fe <HAL_GPIO_Init+0x226>
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	4a1c      	ldr	r2, [pc, #112]	; (8013828 <HAL_GPIO_Init+0x250>)
 80137b6:	4293      	cmp	r3, r2
 80137b8:	d01f      	beq.n	80137fa <HAL_GPIO_Init+0x222>
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	4a1b      	ldr	r2, [pc, #108]	; (801382c <HAL_GPIO_Init+0x254>)
 80137be:	4293      	cmp	r3, r2
 80137c0:	d019      	beq.n	80137f6 <HAL_GPIO_Init+0x21e>
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	4a1a      	ldr	r2, [pc, #104]	; (8013830 <HAL_GPIO_Init+0x258>)
 80137c6:	4293      	cmp	r3, r2
 80137c8:	d013      	beq.n	80137f2 <HAL_GPIO_Init+0x21a>
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	4a19      	ldr	r2, [pc, #100]	; (8013834 <HAL_GPIO_Init+0x25c>)
 80137ce:	4293      	cmp	r3, r2
 80137d0:	d00d      	beq.n	80137ee <HAL_GPIO_Init+0x216>
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	4a18      	ldr	r2, [pc, #96]	; (8013838 <HAL_GPIO_Init+0x260>)
 80137d6:	4293      	cmp	r3, r2
 80137d8:	d007      	beq.n	80137ea <HAL_GPIO_Init+0x212>
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	4a17      	ldr	r2, [pc, #92]	; (801383c <HAL_GPIO_Init+0x264>)
 80137de:	4293      	cmp	r3, r2
 80137e0:	d101      	bne.n	80137e6 <HAL_GPIO_Init+0x20e>
 80137e2:	2309      	movs	r3, #9
 80137e4:	e02d      	b.n	8013842 <HAL_GPIO_Init+0x26a>
 80137e6:	230a      	movs	r3, #10
 80137e8:	e02b      	b.n	8013842 <HAL_GPIO_Init+0x26a>
 80137ea:	2308      	movs	r3, #8
 80137ec:	e029      	b.n	8013842 <HAL_GPIO_Init+0x26a>
 80137ee:	2307      	movs	r3, #7
 80137f0:	e027      	b.n	8013842 <HAL_GPIO_Init+0x26a>
 80137f2:	2306      	movs	r3, #6
 80137f4:	e025      	b.n	8013842 <HAL_GPIO_Init+0x26a>
 80137f6:	2305      	movs	r3, #5
 80137f8:	e023      	b.n	8013842 <HAL_GPIO_Init+0x26a>
 80137fa:	2304      	movs	r3, #4
 80137fc:	e021      	b.n	8013842 <HAL_GPIO_Init+0x26a>
 80137fe:	2303      	movs	r3, #3
 8013800:	e01f      	b.n	8013842 <HAL_GPIO_Init+0x26a>
 8013802:	2302      	movs	r3, #2
 8013804:	e01d      	b.n	8013842 <HAL_GPIO_Init+0x26a>
 8013806:	2301      	movs	r3, #1
 8013808:	e01b      	b.n	8013842 <HAL_GPIO_Init+0x26a>
 801380a:	bf00      	nop
 801380c:	58000080 	.word	0x58000080
 8013810:	58024400 	.word	0x58024400
 8013814:	58000400 	.word	0x58000400
 8013818:	58020000 	.word	0x58020000
 801381c:	58020400 	.word	0x58020400
 8013820:	58020800 	.word	0x58020800
 8013824:	58020c00 	.word	0x58020c00
 8013828:	58021000 	.word	0x58021000
 801382c:	58021400 	.word	0x58021400
 8013830:	58021800 	.word	0x58021800
 8013834:	58021c00 	.word	0x58021c00
 8013838:	58022000 	.word	0x58022000
 801383c:	58022400 	.word	0x58022400
 8013840:	2300      	movs	r3, #0
 8013842:	69fa      	ldr	r2, [r7, #28]
 8013844:	f002 0203 	and.w	r2, r2, #3
 8013848:	0092      	lsls	r2, r2, #2
 801384a:	4093      	lsls	r3, r2
 801384c:	69ba      	ldr	r2, [r7, #24]
 801384e:	4313      	orrs	r3, r2
 8013850:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8013852:	4938      	ldr	r1, [pc, #224]	; (8013934 <HAL_GPIO_Init+0x35c>)
 8013854:	69fb      	ldr	r3, [r7, #28]
 8013856:	089b      	lsrs	r3, r3, #2
 8013858:	3302      	adds	r3, #2
 801385a:	69ba      	ldr	r2, [r7, #24]
 801385c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8013860:	697b      	ldr	r3, [r7, #20]
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8013866:	693b      	ldr	r3, [r7, #16]
 8013868:	43db      	mvns	r3, r3
 801386a:	69ba      	ldr	r2, [r7, #24]
 801386c:	4013      	ands	r3, r2
 801386e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8013870:	683b      	ldr	r3, [r7, #0]
 8013872:	685b      	ldr	r3, [r3, #4]
 8013874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013878:	2b00      	cmp	r3, #0
 801387a:	d003      	beq.n	8013884 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 801387c:	69ba      	ldr	r2, [r7, #24]
 801387e:	693b      	ldr	r3, [r7, #16]
 8013880:	4313      	orrs	r3, r2
 8013882:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8013884:	697b      	ldr	r3, [r7, #20]
 8013886:	69ba      	ldr	r2, [r7, #24]
 8013888:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 801388a:	697b      	ldr	r3, [r7, #20]
 801388c:	685b      	ldr	r3, [r3, #4]
 801388e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8013890:	693b      	ldr	r3, [r7, #16]
 8013892:	43db      	mvns	r3, r3
 8013894:	69ba      	ldr	r2, [r7, #24]
 8013896:	4013      	ands	r3, r2
 8013898:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 801389a:	683b      	ldr	r3, [r7, #0]
 801389c:	685b      	ldr	r3, [r3, #4]
 801389e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d003      	beq.n	80138ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80138a6:	69ba      	ldr	r2, [r7, #24]
 80138a8:	693b      	ldr	r3, [r7, #16]
 80138aa:	4313      	orrs	r3, r2
 80138ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80138ae:	697b      	ldr	r3, [r7, #20]
 80138b0:	69ba      	ldr	r2, [r7, #24]
 80138b2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80138b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80138bc:	693b      	ldr	r3, [r7, #16]
 80138be:	43db      	mvns	r3, r3
 80138c0:	69ba      	ldr	r2, [r7, #24]
 80138c2:	4013      	ands	r3, r2
 80138c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80138c6:	683b      	ldr	r3, [r7, #0]
 80138c8:	685b      	ldr	r3, [r3, #4]
 80138ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d003      	beq.n	80138da <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80138d2:	69ba      	ldr	r2, [r7, #24]
 80138d4:	693b      	ldr	r3, [r7, #16]
 80138d6:	4313      	orrs	r3, r2
 80138d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80138da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80138de:	69bb      	ldr	r3, [r7, #24]
 80138e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80138e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80138e6:	685b      	ldr	r3, [r3, #4]
 80138e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80138ea:	693b      	ldr	r3, [r7, #16]
 80138ec:	43db      	mvns	r3, r3
 80138ee:	69ba      	ldr	r2, [r7, #24]
 80138f0:	4013      	ands	r3, r2
 80138f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80138f4:	683b      	ldr	r3, [r7, #0]
 80138f6:	685b      	ldr	r3, [r3, #4]
 80138f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d003      	beq.n	8013908 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8013900:	69ba      	ldr	r2, [r7, #24]
 8013902:	693b      	ldr	r3, [r7, #16]
 8013904:	4313      	orrs	r3, r2
 8013906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8013908:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801390c:	69bb      	ldr	r3, [r7, #24]
 801390e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8013910:	69fb      	ldr	r3, [r7, #28]
 8013912:	3301      	adds	r3, #1
 8013914:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8013916:	683b      	ldr	r3, [r7, #0]
 8013918:	681a      	ldr	r2, [r3, #0]
 801391a:	69fb      	ldr	r3, [r7, #28]
 801391c:	fa22 f303 	lsr.w	r3, r2, r3
 8013920:	2b00      	cmp	r3, #0
 8013922:	f47f ae63 	bne.w	80135ec <HAL_GPIO_Init+0x14>
  }
}
 8013926:	bf00      	nop
 8013928:	3724      	adds	r7, #36	; 0x24
 801392a:	46bd      	mov	sp, r7
 801392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013930:	4770      	bx	lr
 8013932:	bf00      	nop
 8013934:	58000400 	.word	0x58000400

08013938 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8013938:	b480      	push	{r7}
 801393a:	b085      	sub	sp, #20
 801393c:	af00      	add	r7, sp, #0
 801393e:	6078      	str	r0, [r7, #4]
 8013940:	460b      	mov	r3, r1
 8013942:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	691a      	ldr	r2, [r3, #16]
 8013948:	887b      	ldrh	r3, [r7, #2]
 801394a:	4013      	ands	r3, r2
 801394c:	2b00      	cmp	r3, #0
 801394e:	d002      	beq.n	8013956 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8013950:	2301      	movs	r3, #1
 8013952:	73fb      	strb	r3, [r7, #15]
 8013954:	e001      	b.n	801395a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8013956:	2300      	movs	r3, #0
 8013958:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801395a:	7bfb      	ldrb	r3, [r7, #15]
}
 801395c:	4618      	mov	r0, r3
 801395e:	3714      	adds	r7, #20
 8013960:	46bd      	mov	sp, r7
 8013962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013966:	4770      	bx	lr

08013968 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8013968:	b480      	push	{r7}
 801396a:	b083      	sub	sp, #12
 801396c:	af00      	add	r7, sp, #0
 801396e:	6078      	str	r0, [r7, #4]
 8013970:	460b      	mov	r3, r1
 8013972:	807b      	strh	r3, [r7, #2]
 8013974:	4613      	mov	r3, r2
 8013976:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8013978:	787b      	ldrb	r3, [r7, #1]
 801397a:	2b00      	cmp	r3, #0
 801397c:	d003      	beq.n	8013986 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801397e:	887a      	ldrh	r2, [r7, #2]
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8013984:	e003      	b.n	801398e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8013986:	887b      	ldrh	r3, [r7, #2]
 8013988:	041a      	lsls	r2, r3, #16
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	619a      	str	r2, [r3, #24]
}
 801398e:	bf00      	nop
 8013990:	370c      	adds	r7, #12
 8013992:	46bd      	mov	sp, r7
 8013994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013998:	4770      	bx	lr

0801399a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801399a:	b580      	push	{r7, lr}
 801399c:	b082      	sub	sp, #8
 801399e:	af00      	add	r7, sp, #0
 80139a0:	4603      	mov	r3, r0
 80139a2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80139a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80139a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80139ac:	88fb      	ldrh	r3, [r7, #6]
 80139ae:	4013      	ands	r3, r2
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d008      	beq.n	80139c6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80139b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80139b8:	88fb      	ldrh	r3, [r7, #6]
 80139ba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80139be:	88fb      	ldrh	r3, [r7, #6]
 80139c0:	4618      	mov	r0, r3
 80139c2:	f7ec fe11 	bl	80005e8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80139c6:	bf00      	nop
 80139c8:	3708      	adds	r7, #8
 80139ca:	46bd      	mov	sp, r7
 80139cc:	bd80      	pop	{r7, pc}

080139ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80139ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80139d0:	b08f      	sub	sp, #60	; 0x3c
 80139d2:	af0a      	add	r7, sp, #40	; 0x28
 80139d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d101      	bne.n	80139e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80139dc:	2301      	movs	r3, #1
 80139de:	e116      	b.n	8013c0e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	681b      	ldr	r3, [r3, #0]
 80139e4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80139ec:	b2db      	uxtb	r3, r3
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d106      	bne.n	8013a00 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	2200      	movs	r2, #0
 80139f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80139fa:	6878      	ldr	r0, [r7, #4]
 80139fc:	f00a fb36 	bl	801e06c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	2203      	movs	r2, #3
 8013a04:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8013a08:	68bb      	ldr	r3, [r7, #8]
 8013a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d102      	bne.n	8013a1a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	2200      	movs	r2, #0
 8013a18:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	4618      	mov	r0, r3
 8013a20:	f007 fba3 	bl	801b16a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	603b      	str	r3, [r7, #0]
 8013a2a:	687e      	ldr	r6, [r7, #4]
 8013a2c:	466d      	mov	r5, sp
 8013a2e:	f106 0410 	add.w	r4, r6, #16
 8013a32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013a34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013a36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013a38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013a3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013a3e:	e885 0003 	stmia.w	r5, {r0, r1}
 8013a42:	1d33      	adds	r3, r6, #4
 8013a44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013a46:	6838      	ldr	r0, [r7, #0]
 8013a48:	f007 fa7a 	bl	801af40 <USB_CoreInit>
 8013a4c:	4603      	mov	r3, r0
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d005      	beq.n	8013a5e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	2202      	movs	r2, #2
 8013a56:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8013a5a:	2301      	movs	r3, #1
 8013a5c:	e0d7      	b.n	8013c0e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	2100      	movs	r1, #0
 8013a64:	4618      	mov	r0, r3
 8013a66:	f007 fb91 	bl	801b18c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013a6a:	2300      	movs	r3, #0
 8013a6c:	73fb      	strb	r3, [r7, #15]
 8013a6e:	e04a      	b.n	8013b06 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8013a70:	7bfa      	ldrb	r2, [r7, #15]
 8013a72:	6879      	ldr	r1, [r7, #4]
 8013a74:	4613      	mov	r3, r2
 8013a76:	00db      	lsls	r3, r3, #3
 8013a78:	1a9b      	subs	r3, r3, r2
 8013a7a:	009b      	lsls	r3, r3, #2
 8013a7c:	440b      	add	r3, r1
 8013a7e:	333d      	adds	r3, #61	; 0x3d
 8013a80:	2201      	movs	r2, #1
 8013a82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8013a84:	7bfa      	ldrb	r2, [r7, #15]
 8013a86:	6879      	ldr	r1, [r7, #4]
 8013a88:	4613      	mov	r3, r2
 8013a8a:	00db      	lsls	r3, r3, #3
 8013a8c:	1a9b      	subs	r3, r3, r2
 8013a8e:	009b      	lsls	r3, r3, #2
 8013a90:	440b      	add	r3, r1
 8013a92:	333c      	adds	r3, #60	; 0x3c
 8013a94:	7bfa      	ldrb	r2, [r7, #15]
 8013a96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8013a98:	7bfa      	ldrb	r2, [r7, #15]
 8013a9a:	7bfb      	ldrb	r3, [r7, #15]
 8013a9c:	b298      	uxth	r0, r3
 8013a9e:	6879      	ldr	r1, [r7, #4]
 8013aa0:	4613      	mov	r3, r2
 8013aa2:	00db      	lsls	r3, r3, #3
 8013aa4:	1a9b      	subs	r3, r3, r2
 8013aa6:	009b      	lsls	r3, r3, #2
 8013aa8:	440b      	add	r3, r1
 8013aaa:	3342      	adds	r3, #66	; 0x42
 8013aac:	4602      	mov	r2, r0
 8013aae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8013ab0:	7bfa      	ldrb	r2, [r7, #15]
 8013ab2:	6879      	ldr	r1, [r7, #4]
 8013ab4:	4613      	mov	r3, r2
 8013ab6:	00db      	lsls	r3, r3, #3
 8013ab8:	1a9b      	subs	r3, r3, r2
 8013aba:	009b      	lsls	r3, r3, #2
 8013abc:	440b      	add	r3, r1
 8013abe:	333f      	adds	r3, #63	; 0x3f
 8013ac0:	2200      	movs	r2, #0
 8013ac2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8013ac4:	7bfa      	ldrb	r2, [r7, #15]
 8013ac6:	6879      	ldr	r1, [r7, #4]
 8013ac8:	4613      	mov	r3, r2
 8013aca:	00db      	lsls	r3, r3, #3
 8013acc:	1a9b      	subs	r3, r3, r2
 8013ace:	009b      	lsls	r3, r3, #2
 8013ad0:	440b      	add	r3, r1
 8013ad2:	3344      	adds	r3, #68	; 0x44
 8013ad4:	2200      	movs	r2, #0
 8013ad6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8013ad8:	7bfa      	ldrb	r2, [r7, #15]
 8013ada:	6879      	ldr	r1, [r7, #4]
 8013adc:	4613      	mov	r3, r2
 8013ade:	00db      	lsls	r3, r3, #3
 8013ae0:	1a9b      	subs	r3, r3, r2
 8013ae2:	009b      	lsls	r3, r3, #2
 8013ae4:	440b      	add	r3, r1
 8013ae6:	3348      	adds	r3, #72	; 0x48
 8013ae8:	2200      	movs	r2, #0
 8013aea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8013aec:	7bfa      	ldrb	r2, [r7, #15]
 8013aee:	6879      	ldr	r1, [r7, #4]
 8013af0:	4613      	mov	r3, r2
 8013af2:	00db      	lsls	r3, r3, #3
 8013af4:	1a9b      	subs	r3, r3, r2
 8013af6:	009b      	lsls	r3, r3, #2
 8013af8:	440b      	add	r3, r1
 8013afa:	3350      	adds	r3, #80	; 0x50
 8013afc:	2200      	movs	r2, #0
 8013afe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013b00:	7bfb      	ldrb	r3, [r7, #15]
 8013b02:	3301      	adds	r3, #1
 8013b04:	73fb      	strb	r3, [r7, #15]
 8013b06:	7bfa      	ldrb	r2, [r7, #15]
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	685b      	ldr	r3, [r3, #4]
 8013b0c:	429a      	cmp	r2, r3
 8013b0e:	d3af      	bcc.n	8013a70 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013b10:	2300      	movs	r3, #0
 8013b12:	73fb      	strb	r3, [r7, #15]
 8013b14:	e044      	b.n	8013ba0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8013b16:	7bfa      	ldrb	r2, [r7, #15]
 8013b18:	6879      	ldr	r1, [r7, #4]
 8013b1a:	4613      	mov	r3, r2
 8013b1c:	00db      	lsls	r3, r3, #3
 8013b1e:	1a9b      	subs	r3, r3, r2
 8013b20:	009b      	lsls	r3, r3, #2
 8013b22:	440b      	add	r3, r1
 8013b24:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8013b28:	2200      	movs	r2, #0
 8013b2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8013b2c:	7bfa      	ldrb	r2, [r7, #15]
 8013b2e:	6879      	ldr	r1, [r7, #4]
 8013b30:	4613      	mov	r3, r2
 8013b32:	00db      	lsls	r3, r3, #3
 8013b34:	1a9b      	subs	r3, r3, r2
 8013b36:	009b      	lsls	r3, r3, #2
 8013b38:	440b      	add	r3, r1
 8013b3a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8013b3e:	7bfa      	ldrb	r2, [r7, #15]
 8013b40:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8013b42:	7bfa      	ldrb	r2, [r7, #15]
 8013b44:	6879      	ldr	r1, [r7, #4]
 8013b46:	4613      	mov	r3, r2
 8013b48:	00db      	lsls	r3, r3, #3
 8013b4a:	1a9b      	subs	r3, r3, r2
 8013b4c:	009b      	lsls	r3, r3, #2
 8013b4e:	440b      	add	r3, r1
 8013b50:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8013b54:	2200      	movs	r2, #0
 8013b56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8013b58:	7bfa      	ldrb	r2, [r7, #15]
 8013b5a:	6879      	ldr	r1, [r7, #4]
 8013b5c:	4613      	mov	r3, r2
 8013b5e:	00db      	lsls	r3, r3, #3
 8013b60:	1a9b      	subs	r3, r3, r2
 8013b62:	009b      	lsls	r3, r3, #2
 8013b64:	440b      	add	r3, r1
 8013b66:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8013b6a:	2200      	movs	r2, #0
 8013b6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8013b6e:	7bfa      	ldrb	r2, [r7, #15]
 8013b70:	6879      	ldr	r1, [r7, #4]
 8013b72:	4613      	mov	r3, r2
 8013b74:	00db      	lsls	r3, r3, #3
 8013b76:	1a9b      	subs	r3, r3, r2
 8013b78:	009b      	lsls	r3, r3, #2
 8013b7a:	440b      	add	r3, r1
 8013b7c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8013b80:	2200      	movs	r2, #0
 8013b82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8013b84:	7bfa      	ldrb	r2, [r7, #15]
 8013b86:	6879      	ldr	r1, [r7, #4]
 8013b88:	4613      	mov	r3, r2
 8013b8a:	00db      	lsls	r3, r3, #3
 8013b8c:	1a9b      	subs	r3, r3, r2
 8013b8e:	009b      	lsls	r3, r3, #2
 8013b90:	440b      	add	r3, r1
 8013b92:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8013b96:	2200      	movs	r2, #0
 8013b98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013b9a:	7bfb      	ldrb	r3, [r7, #15]
 8013b9c:	3301      	adds	r3, #1
 8013b9e:	73fb      	strb	r3, [r7, #15]
 8013ba0:	7bfa      	ldrb	r2, [r7, #15]
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	685b      	ldr	r3, [r3, #4]
 8013ba6:	429a      	cmp	r2, r3
 8013ba8:	d3b5      	bcc.n	8013b16 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	681b      	ldr	r3, [r3, #0]
 8013bae:	603b      	str	r3, [r7, #0]
 8013bb0:	687e      	ldr	r6, [r7, #4]
 8013bb2:	466d      	mov	r5, sp
 8013bb4:	f106 0410 	add.w	r4, r6, #16
 8013bb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013bba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013bbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013bbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013bc0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013bc4:	e885 0003 	stmia.w	r5, {r0, r1}
 8013bc8:	1d33      	adds	r3, r6, #4
 8013bca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013bcc:	6838      	ldr	r0, [r7, #0]
 8013bce:	f007 fb07 	bl	801b1e0 <USB_DevInit>
 8013bd2:	4603      	mov	r3, r0
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d005      	beq.n	8013be4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	2202      	movs	r2, #2
 8013bdc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8013be0:	2301      	movs	r3, #1
 8013be2:	e014      	b.n	8013c0e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	2200      	movs	r2, #0
 8013be8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	2201      	movs	r2, #1
 8013bf0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bf8:	2b01      	cmp	r3, #1
 8013bfa:	d102      	bne.n	8013c02 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8013bfc:	6878      	ldr	r0, [r7, #4]
 8013bfe:	f001 f891 	bl	8014d24 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	4618      	mov	r0, r3
 8013c08:	f008 faee 	bl	801c1e8 <USB_DevDisconnect>

  return HAL_OK;
 8013c0c:	2300      	movs	r3, #0
}
 8013c0e:	4618      	mov	r0, r3
 8013c10:	3714      	adds	r7, #20
 8013c12:	46bd      	mov	sp, r7
 8013c14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013c16 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8013c16:	b580      	push	{r7, lr}
 8013c18:	b084      	sub	sp, #16
 8013c1a:	af00      	add	r7, sp, #0
 8013c1c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8013c2a:	2b01      	cmp	r3, #1
 8013c2c:	d101      	bne.n	8013c32 <HAL_PCD_Start+0x1c>
 8013c2e:	2302      	movs	r3, #2
 8013c30:	e020      	b.n	8013c74 <HAL_PCD_Start+0x5e>
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	2201      	movs	r2, #1
 8013c36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c3e:	2b01      	cmp	r3, #1
 8013c40:	d109      	bne.n	8013c56 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8013c46:	2b01      	cmp	r3, #1
 8013c48:	d005      	beq.n	8013c56 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8013c4a:	68fb      	ldr	r3, [r7, #12]
 8013c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c4e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	f008 faac 	bl	801c1b8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	4618      	mov	r0, r3
 8013c66:	f007 fa6f 	bl	801b148 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	2200      	movs	r2, #0
 8013c6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8013c72:	2300      	movs	r3, #0
}
 8013c74:	4618      	mov	r0, r3
 8013c76:	3710      	adds	r7, #16
 8013c78:	46bd      	mov	sp, r7
 8013c7a:	bd80      	pop	{r7, pc}

08013c7c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8013c7c:	b590      	push	{r4, r7, lr}
 8013c7e:	b08d      	sub	sp, #52	; 0x34
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c8a:	6a3b      	ldr	r3, [r7, #32]
 8013c8c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	4618      	mov	r0, r3
 8013c94:	f008 fb53 	bl	801c33e <USB_GetMode>
 8013c98:	4603      	mov	r3, r0
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	f040 83ca 	bne.w	8014434 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	f008 fab7 	bl	801c218 <USB_ReadInterrupts>
 8013caa:	4603      	mov	r3, r0
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	f000 83c0 	beq.w	8014432 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	f008 faae 	bl	801c218 <USB_ReadInterrupts>
 8013cbc:	4603      	mov	r3, r0
 8013cbe:	f003 0302 	and.w	r3, r3, #2
 8013cc2:	2b02      	cmp	r3, #2
 8013cc4:	d107      	bne.n	8013cd6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	695a      	ldr	r2, [r3, #20]
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	f002 0202 	and.w	r2, r2, #2
 8013cd4:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	4618      	mov	r0, r3
 8013cdc:	f008 fa9c 	bl	801c218 <USB_ReadInterrupts>
 8013ce0:	4603      	mov	r3, r0
 8013ce2:	f003 0310 	and.w	r3, r3, #16
 8013ce6:	2b10      	cmp	r3, #16
 8013ce8:	d161      	bne.n	8013dae <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	699a      	ldr	r2, [r3, #24]
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	681b      	ldr	r3, [r3, #0]
 8013cf4:	f022 0210 	bic.w	r2, r2, #16
 8013cf8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8013cfa:	6a3b      	ldr	r3, [r7, #32]
 8013cfc:	6a1b      	ldr	r3, [r3, #32]
 8013cfe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8013d00:	69bb      	ldr	r3, [r7, #24]
 8013d02:	f003 020f 	and.w	r2, r3, #15
 8013d06:	4613      	mov	r3, r2
 8013d08:	00db      	lsls	r3, r3, #3
 8013d0a:	1a9b      	subs	r3, r3, r2
 8013d0c:	009b      	lsls	r3, r3, #2
 8013d0e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8013d12:	687a      	ldr	r2, [r7, #4]
 8013d14:	4413      	add	r3, r2
 8013d16:	3304      	adds	r3, #4
 8013d18:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8013d1a:	69bb      	ldr	r3, [r7, #24]
 8013d1c:	0c5b      	lsrs	r3, r3, #17
 8013d1e:	f003 030f 	and.w	r3, r3, #15
 8013d22:	2b02      	cmp	r3, #2
 8013d24:	d124      	bne.n	8013d70 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8013d26:	69ba      	ldr	r2, [r7, #24]
 8013d28:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8013d2c:	4013      	ands	r3, r2
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d035      	beq.n	8013d9e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8013d32:	697b      	ldr	r3, [r7, #20]
 8013d34:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8013d36:	69bb      	ldr	r3, [r7, #24]
 8013d38:	091b      	lsrs	r3, r3, #4
 8013d3a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8013d3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013d40:	b29b      	uxth	r3, r3
 8013d42:	461a      	mov	r2, r3
 8013d44:	6a38      	ldr	r0, [r7, #32]
 8013d46:	f008 f914 	bl	801bf72 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8013d4a:	697b      	ldr	r3, [r7, #20]
 8013d4c:	68da      	ldr	r2, [r3, #12]
 8013d4e:	69bb      	ldr	r3, [r7, #24]
 8013d50:	091b      	lsrs	r3, r3, #4
 8013d52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013d56:	441a      	add	r2, r3
 8013d58:	697b      	ldr	r3, [r7, #20]
 8013d5a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8013d5c:	697b      	ldr	r3, [r7, #20]
 8013d5e:	699a      	ldr	r2, [r3, #24]
 8013d60:	69bb      	ldr	r3, [r7, #24]
 8013d62:	091b      	lsrs	r3, r3, #4
 8013d64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013d68:	441a      	add	r2, r3
 8013d6a:	697b      	ldr	r3, [r7, #20]
 8013d6c:	619a      	str	r2, [r3, #24]
 8013d6e:	e016      	b.n	8013d9e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8013d70:	69bb      	ldr	r3, [r7, #24]
 8013d72:	0c5b      	lsrs	r3, r3, #17
 8013d74:	f003 030f 	and.w	r3, r3, #15
 8013d78:	2b06      	cmp	r3, #6
 8013d7a:	d110      	bne.n	8013d9e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8013d82:	2208      	movs	r2, #8
 8013d84:	4619      	mov	r1, r3
 8013d86:	6a38      	ldr	r0, [r7, #32]
 8013d88:	f008 f8f3 	bl	801bf72 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8013d8c:	697b      	ldr	r3, [r7, #20]
 8013d8e:	699a      	ldr	r2, [r3, #24]
 8013d90:	69bb      	ldr	r3, [r7, #24]
 8013d92:	091b      	lsrs	r3, r3, #4
 8013d94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013d98:	441a      	add	r2, r3
 8013d9a:	697b      	ldr	r3, [r7, #20]
 8013d9c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	699a      	ldr	r2, [r3, #24]
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	f042 0210 	orr.w	r2, r2, #16
 8013dac:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	4618      	mov	r0, r3
 8013db4:	f008 fa30 	bl	801c218 <USB_ReadInterrupts>
 8013db8:	4603      	mov	r3, r0
 8013dba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8013dbe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8013dc2:	d16e      	bne.n	8013ea2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8013dc4:	2300      	movs	r3, #0
 8013dc6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	4618      	mov	r0, r3
 8013dce:	f008 fa36 	bl	801c23e <USB_ReadDevAllOutEpInterrupt>
 8013dd2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8013dd4:	e062      	b.n	8013e9c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8013dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dd8:	f003 0301 	and.w	r3, r3, #1
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d057      	beq.n	8013e90 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013de6:	b2d2      	uxtb	r2, r2
 8013de8:	4611      	mov	r1, r2
 8013dea:	4618      	mov	r0, r3
 8013dec:	f008 fa5b 	bl	801c2a6 <USB_ReadDevOutEPInterrupt>
 8013df0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8013df2:	693b      	ldr	r3, [r7, #16]
 8013df4:	f003 0301 	and.w	r3, r3, #1
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d00c      	beq.n	8013e16 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8013dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dfe:	015a      	lsls	r2, r3, #5
 8013e00:	69fb      	ldr	r3, [r7, #28]
 8013e02:	4413      	add	r3, r2
 8013e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e08:	461a      	mov	r2, r3
 8013e0a:	2301      	movs	r3, #1
 8013e0c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8013e0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013e10:	6878      	ldr	r0, [r7, #4]
 8013e12:	f000 fddd 	bl	80149d0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8013e16:	693b      	ldr	r3, [r7, #16]
 8013e18:	f003 0308 	and.w	r3, r3, #8
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d00c      	beq.n	8013e3a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8013e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e22:	015a      	lsls	r2, r3, #5
 8013e24:	69fb      	ldr	r3, [r7, #28]
 8013e26:	4413      	add	r3, r2
 8013e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e2c:	461a      	mov	r2, r3
 8013e2e:	2308      	movs	r3, #8
 8013e30:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8013e32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013e34:	6878      	ldr	r0, [r7, #4]
 8013e36:	f000 fed7 	bl	8014be8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8013e3a:	693b      	ldr	r3, [r7, #16]
 8013e3c:	f003 0310 	and.w	r3, r3, #16
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d008      	beq.n	8013e56 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8013e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e46:	015a      	lsls	r2, r3, #5
 8013e48:	69fb      	ldr	r3, [r7, #28]
 8013e4a:	4413      	add	r3, r2
 8013e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e50:	461a      	mov	r2, r3
 8013e52:	2310      	movs	r3, #16
 8013e54:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8013e56:	693b      	ldr	r3, [r7, #16]
 8013e58:	f003 0320 	and.w	r3, r3, #32
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d008      	beq.n	8013e72 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8013e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e62:	015a      	lsls	r2, r3, #5
 8013e64:	69fb      	ldr	r3, [r7, #28]
 8013e66:	4413      	add	r3, r2
 8013e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e6c:	461a      	mov	r2, r3
 8013e6e:	2320      	movs	r3, #32
 8013e70:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8013e72:	693b      	ldr	r3, [r7, #16]
 8013e74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d009      	beq.n	8013e90 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8013e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e7e:	015a      	lsls	r2, r3, #5
 8013e80:	69fb      	ldr	r3, [r7, #28]
 8013e82:	4413      	add	r3, r2
 8013e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e88:	461a      	mov	r2, r3
 8013e8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013e8e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8013e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e92:	3301      	adds	r3, #1
 8013e94:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8013e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e98:	085b      	lsrs	r3, r3, #1
 8013e9a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8013e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d199      	bne.n	8013dd6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	f008 f9b6 	bl	801c218 <USB_ReadInterrupts>
 8013eac:	4603      	mov	r3, r0
 8013eae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8013eb2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8013eb6:	f040 80c0 	bne.w	801403a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	4618      	mov	r0, r3
 8013ec0:	f008 f9d7 	bl	801c272 <USB_ReadDevAllInEpInterrupt>
 8013ec4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8013eca:	e0b2      	b.n	8014032 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8013ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ece:	f003 0301 	and.w	r3, r3, #1
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	f000 80a7 	beq.w	8014026 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ede:	b2d2      	uxtb	r2, r2
 8013ee0:	4611      	mov	r1, r2
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	f008 f9fd 	bl	801c2e2 <USB_ReadDevInEPInterrupt>
 8013ee8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8013eea:	693b      	ldr	r3, [r7, #16]
 8013eec:	f003 0301 	and.w	r3, r3, #1
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d057      	beq.n	8013fa4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8013ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ef6:	f003 030f 	and.w	r3, r3, #15
 8013efa:	2201      	movs	r2, #1
 8013efc:	fa02 f303 	lsl.w	r3, r2, r3
 8013f00:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8013f02:	69fb      	ldr	r3, [r7, #28]
 8013f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	43db      	mvns	r3, r3
 8013f0e:	69f9      	ldr	r1, [r7, #28]
 8013f10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013f14:	4013      	ands	r3, r2
 8013f16:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8013f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f1a:	015a      	lsls	r2, r3, #5
 8013f1c:	69fb      	ldr	r3, [r7, #28]
 8013f1e:	4413      	add	r3, r2
 8013f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f24:	461a      	mov	r2, r3
 8013f26:	2301      	movs	r3, #1
 8013f28:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	691b      	ldr	r3, [r3, #16]
 8013f2e:	2b01      	cmp	r3, #1
 8013f30:	d132      	bne.n	8013f98 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8013f32:	6879      	ldr	r1, [r7, #4]
 8013f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f36:	4613      	mov	r3, r2
 8013f38:	00db      	lsls	r3, r3, #3
 8013f3a:	1a9b      	subs	r3, r3, r2
 8013f3c:	009b      	lsls	r3, r3, #2
 8013f3e:	440b      	add	r3, r1
 8013f40:	3348      	adds	r3, #72	; 0x48
 8013f42:	6819      	ldr	r1, [r3, #0]
 8013f44:	6878      	ldr	r0, [r7, #4]
 8013f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f48:	4613      	mov	r3, r2
 8013f4a:	00db      	lsls	r3, r3, #3
 8013f4c:	1a9b      	subs	r3, r3, r2
 8013f4e:	009b      	lsls	r3, r3, #2
 8013f50:	4403      	add	r3, r0
 8013f52:	3344      	adds	r3, #68	; 0x44
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	4419      	add	r1, r3
 8013f58:	6878      	ldr	r0, [r7, #4]
 8013f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f5c:	4613      	mov	r3, r2
 8013f5e:	00db      	lsls	r3, r3, #3
 8013f60:	1a9b      	subs	r3, r3, r2
 8013f62:	009b      	lsls	r3, r3, #2
 8013f64:	4403      	add	r3, r0
 8013f66:	3348      	adds	r3, #72	; 0x48
 8013f68:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8013f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d113      	bne.n	8013f98 <HAL_PCD_IRQHandler+0x31c>
 8013f70:	6879      	ldr	r1, [r7, #4]
 8013f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f74:	4613      	mov	r3, r2
 8013f76:	00db      	lsls	r3, r3, #3
 8013f78:	1a9b      	subs	r3, r3, r2
 8013f7a:	009b      	lsls	r3, r3, #2
 8013f7c:	440b      	add	r3, r1
 8013f7e:	3350      	adds	r3, #80	; 0x50
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d108      	bne.n	8013f98 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	6818      	ldr	r0, [r3, #0]
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8013f90:	461a      	mov	r2, r3
 8013f92:	2101      	movs	r1, #1
 8013f94:	f008 fa06 	bl	801c3a4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8013f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f9a:	b2db      	uxtb	r3, r3
 8013f9c:	4619      	mov	r1, r3
 8013f9e:	6878      	ldr	r0, [r7, #4]
 8013fa0:	f00a f8e3 	bl	801e16a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8013fa4:	693b      	ldr	r3, [r7, #16]
 8013fa6:	f003 0308 	and.w	r3, r3, #8
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d008      	beq.n	8013fc0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8013fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fb0:	015a      	lsls	r2, r3, #5
 8013fb2:	69fb      	ldr	r3, [r7, #28]
 8013fb4:	4413      	add	r3, r2
 8013fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fba:	461a      	mov	r2, r3
 8013fbc:	2308      	movs	r3, #8
 8013fbe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8013fc0:	693b      	ldr	r3, [r7, #16]
 8013fc2:	f003 0310 	and.w	r3, r3, #16
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d008      	beq.n	8013fdc <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8013fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fcc:	015a      	lsls	r2, r3, #5
 8013fce:	69fb      	ldr	r3, [r7, #28]
 8013fd0:	4413      	add	r3, r2
 8013fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fd6:	461a      	mov	r2, r3
 8013fd8:	2310      	movs	r3, #16
 8013fda:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8013fdc:	693b      	ldr	r3, [r7, #16]
 8013fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d008      	beq.n	8013ff8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8013fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fe8:	015a      	lsls	r2, r3, #5
 8013fea:	69fb      	ldr	r3, [r7, #28]
 8013fec:	4413      	add	r3, r2
 8013fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ff2:	461a      	mov	r2, r3
 8013ff4:	2340      	movs	r3, #64	; 0x40
 8013ff6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8013ff8:	693b      	ldr	r3, [r7, #16]
 8013ffa:	f003 0302 	and.w	r3, r3, #2
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d008      	beq.n	8014014 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8014002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014004:	015a      	lsls	r2, r3, #5
 8014006:	69fb      	ldr	r3, [r7, #28]
 8014008:	4413      	add	r3, r2
 801400a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801400e:	461a      	mov	r2, r3
 8014010:	2302      	movs	r3, #2
 8014012:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8014014:	693b      	ldr	r3, [r7, #16]
 8014016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801401a:	2b00      	cmp	r3, #0
 801401c:	d003      	beq.n	8014026 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 801401e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014020:	6878      	ldr	r0, [r7, #4]
 8014022:	f000 fc48 	bl	80148b6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8014026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014028:	3301      	adds	r3, #1
 801402a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 801402c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801402e:	085b      	lsrs	r3, r3, #1
 8014030:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8014032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014034:	2b00      	cmp	r3, #0
 8014036:	f47f af49 	bne.w	8013ecc <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	4618      	mov	r0, r3
 8014040:	f008 f8ea 	bl	801c218 <USB_ReadInterrupts>
 8014044:	4603      	mov	r3, r0
 8014046:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801404a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801404e:	d122      	bne.n	8014096 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8014050:	69fb      	ldr	r3, [r7, #28]
 8014052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014056:	685b      	ldr	r3, [r3, #4]
 8014058:	69fa      	ldr	r2, [r7, #28]
 801405a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801405e:	f023 0301 	bic.w	r3, r3, #1
 8014062:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 801406a:	2b01      	cmp	r3, #1
 801406c:	d108      	bne.n	8014080 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	2200      	movs	r2, #0
 8014072:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8014076:	2100      	movs	r1, #0
 8014078:	6878      	ldr	r0, [r7, #4]
 801407a:	f000 fe77 	bl	8014d6c <HAL_PCDEx_LPM_Callback>
 801407e:	e002      	b.n	8014086 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8014080:	6878      	ldr	r0, [r7, #4]
 8014082:	f00a f8e9 	bl	801e258 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	695a      	ldr	r2, [r3, #20]
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8014094:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	4618      	mov	r0, r3
 801409c:	f008 f8bc 	bl	801c218 <USB_ReadInterrupts>
 80140a0:	4603      	mov	r3, r0
 80140a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80140a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80140aa:	d112      	bne.n	80140d2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80140ac:	69fb      	ldr	r3, [r7, #28]
 80140ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80140b2:	689b      	ldr	r3, [r3, #8]
 80140b4:	f003 0301 	and.w	r3, r3, #1
 80140b8:	2b01      	cmp	r3, #1
 80140ba:	d102      	bne.n	80140c2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80140bc:	6878      	ldr	r0, [r7, #4]
 80140be:	f00a f8a5 	bl	801e20c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	695a      	ldr	r2, [r3, #20]
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80140d0:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	4618      	mov	r0, r3
 80140d8:	f008 f89e 	bl	801c218 <USB_ReadInterrupts>
 80140dc:	4603      	mov	r3, r0
 80140de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80140e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80140e6:	d121      	bne.n	801412c <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	681b      	ldr	r3, [r3, #0]
 80140ec:	695a      	ldr	r2, [r3, #20]
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80140f6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d111      	bne.n	8014126 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	2201      	movs	r2, #1
 8014106:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014110:	089b      	lsrs	r3, r3, #2
 8014112:	f003 020f 	and.w	r2, r3, #15
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 801411c:	2101      	movs	r1, #1
 801411e:	6878      	ldr	r0, [r7, #4]
 8014120:	f000 fe24 	bl	8014d6c <HAL_PCDEx_LPM_Callback>
 8014124:	e002      	b.n	801412c <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8014126:	6878      	ldr	r0, [r7, #4]
 8014128:	f00a f870 	bl	801e20c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	4618      	mov	r0, r3
 8014132:	f008 f871 	bl	801c218 <USB_ReadInterrupts>
 8014136:	4603      	mov	r3, r0
 8014138:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801413c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014140:	f040 80c7 	bne.w	80142d2 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8014144:	69fb      	ldr	r3, [r7, #28]
 8014146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801414a:	685b      	ldr	r3, [r3, #4]
 801414c:	69fa      	ldr	r2, [r7, #28]
 801414e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014152:	f023 0301 	bic.w	r3, r3, #1
 8014156:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	2110      	movs	r1, #16
 801415e:	4618      	mov	r0, r3
 8014160:	f007 f99c 	bl	801b49c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8014164:	2300      	movs	r3, #0
 8014166:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014168:	e056      	b.n	8014218 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 801416a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801416c:	015a      	lsls	r2, r3, #5
 801416e:	69fb      	ldr	r3, [r7, #28]
 8014170:	4413      	add	r3, r2
 8014172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014176:	461a      	mov	r2, r3
 8014178:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801417c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801417e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014180:	015a      	lsls	r2, r3, #5
 8014182:	69fb      	ldr	r3, [r7, #28]
 8014184:	4413      	add	r3, r2
 8014186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801418e:	0151      	lsls	r1, r2, #5
 8014190:	69fa      	ldr	r2, [r7, #28]
 8014192:	440a      	add	r2, r1
 8014194:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014198:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801419c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801419e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141a0:	015a      	lsls	r2, r3, #5
 80141a2:	69fb      	ldr	r3, [r7, #28]
 80141a4:	4413      	add	r3, r2
 80141a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80141ae:	0151      	lsls	r1, r2, #5
 80141b0:	69fa      	ldr	r2, [r7, #28]
 80141b2:	440a      	add	r2, r1
 80141b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80141b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80141bc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80141be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141c0:	015a      	lsls	r2, r3, #5
 80141c2:	69fb      	ldr	r3, [r7, #28]
 80141c4:	4413      	add	r3, r2
 80141c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141ca:	461a      	mov	r2, r3
 80141cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80141d0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80141d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141d4:	015a      	lsls	r2, r3, #5
 80141d6:	69fb      	ldr	r3, [r7, #28]
 80141d8:	4413      	add	r3, r2
 80141da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141de:	681b      	ldr	r3, [r3, #0]
 80141e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80141e2:	0151      	lsls	r1, r2, #5
 80141e4:	69fa      	ldr	r2, [r7, #28]
 80141e6:	440a      	add	r2, r1
 80141e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80141ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80141f0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80141f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141f4:	015a      	lsls	r2, r3, #5
 80141f6:	69fb      	ldr	r3, [r7, #28]
 80141f8:	4413      	add	r3, r2
 80141fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014202:	0151      	lsls	r1, r2, #5
 8014204:	69fa      	ldr	r2, [r7, #28]
 8014206:	440a      	add	r2, r1
 8014208:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801420c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014210:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8014212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014214:	3301      	adds	r3, #1
 8014216:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	685b      	ldr	r3, [r3, #4]
 801421c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801421e:	429a      	cmp	r2, r3
 8014220:	d3a3      	bcc.n	801416a <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8014222:	69fb      	ldr	r3, [r7, #28]
 8014224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014228:	69db      	ldr	r3, [r3, #28]
 801422a:	69fa      	ldr	r2, [r7, #28]
 801422c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014230:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8014234:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801423a:	2b00      	cmp	r3, #0
 801423c:	d016      	beq.n	801426c <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 801423e:	69fb      	ldr	r3, [r7, #28]
 8014240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014248:	69fa      	ldr	r2, [r7, #28]
 801424a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801424e:	f043 030b 	orr.w	r3, r3, #11
 8014252:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8014256:	69fb      	ldr	r3, [r7, #28]
 8014258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801425c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801425e:	69fa      	ldr	r2, [r7, #28]
 8014260:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014264:	f043 030b 	orr.w	r3, r3, #11
 8014268:	6453      	str	r3, [r2, #68]	; 0x44
 801426a:	e015      	b.n	8014298 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 801426c:	69fb      	ldr	r3, [r7, #28]
 801426e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014272:	695a      	ldr	r2, [r3, #20]
 8014274:	69fb      	ldr	r3, [r7, #28]
 8014276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801427a:	4619      	mov	r1, r3
 801427c:	f242 032b 	movw	r3, #8235	; 0x202b
 8014280:	4313      	orrs	r3, r2
 8014282:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8014284:	69fb      	ldr	r3, [r7, #28]
 8014286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801428a:	691b      	ldr	r3, [r3, #16]
 801428c:	69fa      	ldr	r2, [r7, #28]
 801428e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014292:	f043 030b 	orr.w	r3, r3, #11
 8014296:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8014298:	69fb      	ldr	r3, [r7, #28]
 801429a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	69fa      	ldr	r2, [r7, #28]
 80142a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80142a6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80142aa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	6818      	ldr	r0, [r3, #0]
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	691b      	ldr	r3, [r3, #16]
 80142b4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80142bc:	461a      	mov	r2, r3
 80142be:	f008 f871 	bl	801c3a4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	695a      	ldr	r2, [r3, #20]
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80142d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	4618      	mov	r0, r3
 80142d8:	f007 ff9e 	bl	801c218 <USB_ReadInterrupts>
 80142dc:	4603      	mov	r3, r0
 80142de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80142e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80142e6:	d124      	bne.n	8014332 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	4618      	mov	r0, r3
 80142ee:	f008 f835 	bl	801c35c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	681b      	ldr	r3, [r3, #0]
 80142f6:	4618      	mov	r0, r3
 80142f8:	f007 f931 	bl	801b55e <USB_GetDevSpeed>
 80142fc:	4603      	mov	r3, r0
 80142fe:	461a      	mov	r2, r3
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	681c      	ldr	r4, [r3, #0]
 8014308:	f001 fc86 	bl	8015c18 <HAL_RCC_GetHCLKFreq>
 801430c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8014312:	b2db      	uxtb	r3, r3
 8014314:	461a      	mov	r2, r3
 8014316:	4620      	mov	r0, r4
 8014318:	f006 fe74 	bl	801b004 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 801431c:	6878      	ldr	r0, [r7, #4]
 801431e:	f009 ff4c 	bl	801e1ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	695a      	ldr	r2, [r3, #20]
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8014330:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	681b      	ldr	r3, [r3, #0]
 8014336:	4618      	mov	r0, r3
 8014338:	f007 ff6e 	bl	801c218 <USB_ReadInterrupts>
 801433c:	4603      	mov	r3, r0
 801433e:	f003 0308 	and.w	r3, r3, #8
 8014342:	2b08      	cmp	r3, #8
 8014344:	d10a      	bne.n	801435c <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8014346:	6878      	ldr	r0, [r7, #4]
 8014348:	f009 ff29 	bl	801e19e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	695a      	ldr	r2, [r3, #20]
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	681b      	ldr	r3, [r3, #0]
 8014356:	f002 0208 	and.w	r2, r2, #8
 801435a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	4618      	mov	r0, r3
 8014362:	f007 ff59 	bl	801c218 <USB_ReadInterrupts>
 8014366:	4603      	mov	r3, r0
 8014368:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801436c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014370:	d10f      	bne.n	8014392 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8014372:	2300      	movs	r3, #0
 8014374:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8014376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014378:	b2db      	uxtb	r3, r3
 801437a:	4619      	mov	r1, r3
 801437c:	6878      	ldr	r0, [r7, #4]
 801437e:	f009 ff8b 	bl	801e298 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	695a      	ldr	r2, [r3, #20]
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8014390:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	4618      	mov	r0, r3
 8014398:	f007 ff3e 	bl	801c218 <USB_ReadInterrupts>
 801439c:	4603      	mov	r3, r0
 801439e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80143a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80143a6:	d10f      	bne.n	80143c8 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80143a8:	2300      	movs	r3, #0
 80143aa:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80143ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143ae:	b2db      	uxtb	r3, r3
 80143b0:	4619      	mov	r1, r3
 80143b2:	6878      	ldr	r0, [r7, #4]
 80143b4:	f009 ff5e 	bl	801e274 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	695a      	ldr	r2, [r3, #20]
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80143c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	4618      	mov	r0, r3
 80143ce:	f007 ff23 	bl	801c218 <USB_ReadInterrupts>
 80143d2:	4603      	mov	r3, r0
 80143d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80143d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80143dc:	d10a      	bne.n	80143f4 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80143de:	6878      	ldr	r0, [r7, #4]
 80143e0:	f009 ff6c 	bl	801e2bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	695a      	ldr	r2, [r3, #20]
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80143f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	4618      	mov	r0, r3
 80143fa:	f007 ff0d 	bl	801c218 <USB_ReadInterrupts>
 80143fe:	4603      	mov	r3, r0
 8014400:	f003 0304 	and.w	r3, r3, #4
 8014404:	2b04      	cmp	r3, #4
 8014406:	d115      	bne.n	8014434 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	681b      	ldr	r3, [r3, #0]
 801440c:	685b      	ldr	r3, [r3, #4]
 801440e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8014410:	69bb      	ldr	r3, [r7, #24]
 8014412:	f003 0304 	and.w	r3, r3, #4
 8014416:	2b00      	cmp	r3, #0
 8014418:	d002      	beq.n	8014420 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 801441a:	6878      	ldr	r0, [r7, #4]
 801441c:	f009 ff5c 	bl	801e2d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	6859      	ldr	r1, [r3, #4]
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	69ba      	ldr	r2, [r7, #24]
 801442c:	430a      	orrs	r2, r1
 801442e:	605a      	str	r2, [r3, #4]
 8014430:	e000      	b.n	8014434 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8014432:	bf00      	nop
    }
  }
}
 8014434:	3734      	adds	r7, #52	; 0x34
 8014436:	46bd      	mov	sp, r7
 8014438:	bd90      	pop	{r4, r7, pc}

0801443a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 801443a:	b580      	push	{r7, lr}
 801443c:	b082      	sub	sp, #8
 801443e:	af00      	add	r7, sp, #0
 8014440:	6078      	str	r0, [r7, #4]
 8014442:	460b      	mov	r3, r1
 8014444:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801444c:	2b01      	cmp	r3, #1
 801444e:	d101      	bne.n	8014454 <HAL_PCD_SetAddress+0x1a>
 8014450:	2302      	movs	r3, #2
 8014452:	e013      	b.n	801447c <HAL_PCD_SetAddress+0x42>
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	2201      	movs	r2, #1
 8014458:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	78fa      	ldrb	r2, [r7, #3]
 8014460:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	681b      	ldr	r3, [r3, #0]
 8014468:	78fa      	ldrb	r2, [r7, #3]
 801446a:	4611      	mov	r1, r2
 801446c:	4618      	mov	r0, r3
 801446e:	f007 fe7d 	bl	801c16c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	2200      	movs	r2, #0
 8014476:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 801447a:	2300      	movs	r3, #0
}
 801447c:	4618      	mov	r0, r3
 801447e:	3708      	adds	r7, #8
 8014480:	46bd      	mov	sp, r7
 8014482:	bd80      	pop	{r7, pc}

08014484 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8014484:	b580      	push	{r7, lr}
 8014486:	b084      	sub	sp, #16
 8014488:	af00      	add	r7, sp, #0
 801448a:	6078      	str	r0, [r7, #4]
 801448c:	4608      	mov	r0, r1
 801448e:	4611      	mov	r1, r2
 8014490:	461a      	mov	r2, r3
 8014492:	4603      	mov	r3, r0
 8014494:	70fb      	strb	r3, [r7, #3]
 8014496:	460b      	mov	r3, r1
 8014498:	803b      	strh	r3, [r7, #0]
 801449a:	4613      	mov	r3, r2
 801449c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 801449e:	2300      	movs	r3, #0
 80144a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80144a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	da0f      	bge.n	80144ca <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80144aa:	78fb      	ldrb	r3, [r7, #3]
 80144ac:	f003 020f 	and.w	r2, r3, #15
 80144b0:	4613      	mov	r3, r2
 80144b2:	00db      	lsls	r3, r3, #3
 80144b4:	1a9b      	subs	r3, r3, r2
 80144b6:	009b      	lsls	r3, r3, #2
 80144b8:	3338      	adds	r3, #56	; 0x38
 80144ba:	687a      	ldr	r2, [r7, #4]
 80144bc:	4413      	add	r3, r2
 80144be:	3304      	adds	r3, #4
 80144c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	2201      	movs	r2, #1
 80144c6:	705a      	strb	r2, [r3, #1]
 80144c8:	e00f      	b.n	80144ea <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80144ca:	78fb      	ldrb	r3, [r7, #3]
 80144cc:	f003 020f 	and.w	r2, r3, #15
 80144d0:	4613      	mov	r3, r2
 80144d2:	00db      	lsls	r3, r3, #3
 80144d4:	1a9b      	subs	r3, r3, r2
 80144d6:	009b      	lsls	r3, r3, #2
 80144d8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80144dc:	687a      	ldr	r2, [r7, #4]
 80144de:	4413      	add	r3, r2
 80144e0:	3304      	adds	r3, #4
 80144e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	2200      	movs	r2, #0
 80144e8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80144ea:	78fb      	ldrb	r3, [r7, #3]
 80144ec:	f003 030f 	and.w	r3, r3, #15
 80144f0:	b2da      	uxtb	r2, r3
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80144f6:	883a      	ldrh	r2, [r7, #0]
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	78ba      	ldrb	r2, [r7, #2]
 8014500:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	785b      	ldrb	r3, [r3, #1]
 8014506:	2b00      	cmp	r3, #0
 8014508:	d004      	beq.n	8014514 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	781b      	ldrb	r3, [r3, #0]
 801450e:	b29a      	uxth	r2, r3
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8014514:	78bb      	ldrb	r3, [r7, #2]
 8014516:	2b02      	cmp	r3, #2
 8014518:	d102      	bne.n	8014520 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	2200      	movs	r2, #0
 801451e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8014526:	2b01      	cmp	r3, #1
 8014528:	d101      	bne.n	801452e <HAL_PCD_EP_Open+0xaa>
 801452a:	2302      	movs	r3, #2
 801452c:	e00e      	b.n	801454c <HAL_PCD_EP_Open+0xc8>
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	2201      	movs	r2, #1
 8014532:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	68f9      	ldr	r1, [r7, #12]
 801453c:	4618      	mov	r0, r3
 801453e:	f007 f833 	bl	801b5a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	2200      	movs	r2, #0
 8014546:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 801454a:	7afb      	ldrb	r3, [r7, #11]
}
 801454c:	4618      	mov	r0, r3
 801454e:	3710      	adds	r7, #16
 8014550:	46bd      	mov	sp, r7
 8014552:	bd80      	pop	{r7, pc}

08014554 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8014554:	b580      	push	{r7, lr}
 8014556:	b084      	sub	sp, #16
 8014558:	af00      	add	r7, sp, #0
 801455a:	6078      	str	r0, [r7, #4]
 801455c:	460b      	mov	r3, r1
 801455e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8014560:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014564:	2b00      	cmp	r3, #0
 8014566:	da0f      	bge.n	8014588 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8014568:	78fb      	ldrb	r3, [r7, #3]
 801456a:	f003 020f 	and.w	r2, r3, #15
 801456e:	4613      	mov	r3, r2
 8014570:	00db      	lsls	r3, r3, #3
 8014572:	1a9b      	subs	r3, r3, r2
 8014574:	009b      	lsls	r3, r3, #2
 8014576:	3338      	adds	r3, #56	; 0x38
 8014578:	687a      	ldr	r2, [r7, #4]
 801457a:	4413      	add	r3, r2
 801457c:	3304      	adds	r3, #4
 801457e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	2201      	movs	r2, #1
 8014584:	705a      	strb	r2, [r3, #1]
 8014586:	e00f      	b.n	80145a8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8014588:	78fb      	ldrb	r3, [r7, #3]
 801458a:	f003 020f 	and.w	r2, r3, #15
 801458e:	4613      	mov	r3, r2
 8014590:	00db      	lsls	r3, r3, #3
 8014592:	1a9b      	subs	r3, r3, r2
 8014594:	009b      	lsls	r3, r3, #2
 8014596:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801459a:	687a      	ldr	r2, [r7, #4]
 801459c:	4413      	add	r3, r2
 801459e:	3304      	adds	r3, #4
 80145a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	2200      	movs	r2, #0
 80145a6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80145a8:	78fb      	ldrb	r3, [r7, #3]
 80145aa:	f003 030f 	and.w	r3, r3, #15
 80145ae:	b2da      	uxtb	r2, r3
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80145ba:	2b01      	cmp	r3, #1
 80145bc:	d101      	bne.n	80145c2 <HAL_PCD_EP_Close+0x6e>
 80145be:	2302      	movs	r3, #2
 80145c0:	e00e      	b.n	80145e0 <HAL_PCD_EP_Close+0x8c>
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	2201      	movs	r2, #1
 80145c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	68f9      	ldr	r1, [r7, #12]
 80145d0:	4618      	mov	r0, r3
 80145d2:	f007 f871 	bl	801b6b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	2200      	movs	r2, #0
 80145da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80145de:	2300      	movs	r3, #0
}
 80145e0:	4618      	mov	r0, r3
 80145e2:	3710      	adds	r7, #16
 80145e4:	46bd      	mov	sp, r7
 80145e6:	bd80      	pop	{r7, pc}

080145e8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80145e8:	b580      	push	{r7, lr}
 80145ea:	b086      	sub	sp, #24
 80145ec:	af00      	add	r7, sp, #0
 80145ee:	60f8      	str	r0, [r7, #12]
 80145f0:	607a      	str	r2, [r7, #4]
 80145f2:	603b      	str	r3, [r7, #0]
 80145f4:	460b      	mov	r3, r1
 80145f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80145f8:	7afb      	ldrb	r3, [r7, #11]
 80145fa:	f003 020f 	and.w	r2, r3, #15
 80145fe:	4613      	mov	r3, r2
 8014600:	00db      	lsls	r3, r3, #3
 8014602:	1a9b      	subs	r3, r3, r2
 8014604:	009b      	lsls	r3, r3, #2
 8014606:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801460a:	68fa      	ldr	r2, [r7, #12]
 801460c:	4413      	add	r3, r2
 801460e:	3304      	adds	r3, #4
 8014610:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8014612:	697b      	ldr	r3, [r7, #20]
 8014614:	687a      	ldr	r2, [r7, #4]
 8014616:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8014618:	697b      	ldr	r3, [r7, #20]
 801461a:	683a      	ldr	r2, [r7, #0]
 801461c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 801461e:	697b      	ldr	r3, [r7, #20]
 8014620:	2200      	movs	r2, #0
 8014622:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8014624:	697b      	ldr	r3, [r7, #20]
 8014626:	2200      	movs	r2, #0
 8014628:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801462a:	7afb      	ldrb	r3, [r7, #11]
 801462c:	f003 030f 	and.w	r3, r3, #15
 8014630:	b2da      	uxtb	r2, r3
 8014632:	697b      	ldr	r3, [r7, #20]
 8014634:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	691b      	ldr	r3, [r3, #16]
 801463a:	2b01      	cmp	r3, #1
 801463c:	d102      	bne.n	8014644 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801463e:	687a      	ldr	r2, [r7, #4]
 8014640:	697b      	ldr	r3, [r7, #20]
 8014642:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8014644:	7afb      	ldrb	r3, [r7, #11]
 8014646:	f003 030f 	and.w	r3, r3, #15
 801464a:	2b00      	cmp	r3, #0
 801464c:	d109      	bne.n	8014662 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	6818      	ldr	r0, [r3, #0]
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	691b      	ldr	r3, [r3, #16]
 8014656:	b2db      	uxtb	r3, r3
 8014658:	461a      	mov	r2, r3
 801465a:	6979      	ldr	r1, [r7, #20]
 801465c:	f007 fafc 	bl	801bc58 <USB_EP0StartXfer>
 8014660:	e008      	b.n	8014674 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8014662:	68fb      	ldr	r3, [r7, #12]
 8014664:	6818      	ldr	r0, [r3, #0]
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	691b      	ldr	r3, [r3, #16]
 801466a:	b2db      	uxtb	r3, r3
 801466c:	461a      	mov	r2, r3
 801466e:	6979      	ldr	r1, [r7, #20]
 8014670:	f007 f8a6 	bl	801b7c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8014674:	2300      	movs	r3, #0
}
 8014676:	4618      	mov	r0, r3
 8014678:	3718      	adds	r7, #24
 801467a:	46bd      	mov	sp, r7
 801467c:	bd80      	pop	{r7, pc}

0801467e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801467e:	b480      	push	{r7}
 8014680:	b083      	sub	sp, #12
 8014682:	af00      	add	r7, sp, #0
 8014684:	6078      	str	r0, [r7, #4]
 8014686:	460b      	mov	r3, r1
 8014688:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 801468a:	78fb      	ldrb	r3, [r7, #3]
 801468c:	f003 020f 	and.w	r2, r3, #15
 8014690:	6879      	ldr	r1, [r7, #4]
 8014692:	4613      	mov	r3, r2
 8014694:	00db      	lsls	r3, r3, #3
 8014696:	1a9b      	subs	r3, r3, r2
 8014698:	009b      	lsls	r3, r3, #2
 801469a:	440b      	add	r3, r1
 801469c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80146a0:	681b      	ldr	r3, [r3, #0]
}
 80146a2:	4618      	mov	r0, r3
 80146a4:	370c      	adds	r7, #12
 80146a6:	46bd      	mov	sp, r7
 80146a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ac:	4770      	bx	lr

080146ae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80146ae:	b580      	push	{r7, lr}
 80146b0:	b086      	sub	sp, #24
 80146b2:	af00      	add	r7, sp, #0
 80146b4:	60f8      	str	r0, [r7, #12]
 80146b6:	607a      	str	r2, [r7, #4]
 80146b8:	603b      	str	r3, [r7, #0]
 80146ba:	460b      	mov	r3, r1
 80146bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80146be:	7afb      	ldrb	r3, [r7, #11]
 80146c0:	f003 020f 	and.w	r2, r3, #15
 80146c4:	4613      	mov	r3, r2
 80146c6:	00db      	lsls	r3, r3, #3
 80146c8:	1a9b      	subs	r3, r3, r2
 80146ca:	009b      	lsls	r3, r3, #2
 80146cc:	3338      	adds	r3, #56	; 0x38
 80146ce:	68fa      	ldr	r2, [r7, #12]
 80146d0:	4413      	add	r3, r2
 80146d2:	3304      	adds	r3, #4
 80146d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80146d6:	697b      	ldr	r3, [r7, #20]
 80146d8:	687a      	ldr	r2, [r7, #4]
 80146da:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80146dc:	697b      	ldr	r3, [r7, #20]
 80146de:	683a      	ldr	r2, [r7, #0]
 80146e0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80146e2:	697b      	ldr	r3, [r7, #20]
 80146e4:	2200      	movs	r2, #0
 80146e6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80146e8:	697b      	ldr	r3, [r7, #20]
 80146ea:	2201      	movs	r2, #1
 80146ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80146ee:	7afb      	ldrb	r3, [r7, #11]
 80146f0:	f003 030f 	and.w	r3, r3, #15
 80146f4:	b2da      	uxtb	r2, r3
 80146f6:	697b      	ldr	r3, [r7, #20]
 80146f8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	691b      	ldr	r3, [r3, #16]
 80146fe:	2b01      	cmp	r3, #1
 8014700:	d102      	bne.n	8014708 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8014702:	687a      	ldr	r2, [r7, #4]
 8014704:	697b      	ldr	r3, [r7, #20]
 8014706:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8014708:	7afb      	ldrb	r3, [r7, #11]
 801470a:	f003 030f 	and.w	r3, r3, #15
 801470e:	2b00      	cmp	r3, #0
 8014710:	d109      	bne.n	8014726 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	6818      	ldr	r0, [r3, #0]
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	691b      	ldr	r3, [r3, #16]
 801471a:	b2db      	uxtb	r3, r3
 801471c:	461a      	mov	r2, r3
 801471e:	6979      	ldr	r1, [r7, #20]
 8014720:	f007 fa9a 	bl	801bc58 <USB_EP0StartXfer>
 8014724:	e008      	b.n	8014738 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8014726:	68fb      	ldr	r3, [r7, #12]
 8014728:	6818      	ldr	r0, [r3, #0]
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	691b      	ldr	r3, [r3, #16]
 801472e:	b2db      	uxtb	r3, r3
 8014730:	461a      	mov	r2, r3
 8014732:	6979      	ldr	r1, [r7, #20]
 8014734:	f007 f844 	bl	801b7c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8014738:	2300      	movs	r3, #0
}
 801473a:	4618      	mov	r0, r3
 801473c:	3718      	adds	r7, #24
 801473e:	46bd      	mov	sp, r7
 8014740:	bd80      	pop	{r7, pc}

08014742 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8014742:	b580      	push	{r7, lr}
 8014744:	b084      	sub	sp, #16
 8014746:	af00      	add	r7, sp, #0
 8014748:	6078      	str	r0, [r7, #4]
 801474a:	460b      	mov	r3, r1
 801474c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 801474e:	78fb      	ldrb	r3, [r7, #3]
 8014750:	f003 020f 	and.w	r2, r3, #15
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	685b      	ldr	r3, [r3, #4]
 8014758:	429a      	cmp	r2, r3
 801475a:	d901      	bls.n	8014760 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 801475c:	2301      	movs	r3, #1
 801475e:	e050      	b.n	8014802 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8014760:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014764:	2b00      	cmp	r3, #0
 8014766:	da0f      	bge.n	8014788 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8014768:	78fb      	ldrb	r3, [r7, #3]
 801476a:	f003 020f 	and.w	r2, r3, #15
 801476e:	4613      	mov	r3, r2
 8014770:	00db      	lsls	r3, r3, #3
 8014772:	1a9b      	subs	r3, r3, r2
 8014774:	009b      	lsls	r3, r3, #2
 8014776:	3338      	adds	r3, #56	; 0x38
 8014778:	687a      	ldr	r2, [r7, #4]
 801477a:	4413      	add	r3, r2
 801477c:	3304      	adds	r3, #4
 801477e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	2201      	movs	r2, #1
 8014784:	705a      	strb	r2, [r3, #1]
 8014786:	e00d      	b.n	80147a4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8014788:	78fa      	ldrb	r2, [r7, #3]
 801478a:	4613      	mov	r3, r2
 801478c:	00db      	lsls	r3, r3, #3
 801478e:	1a9b      	subs	r3, r3, r2
 8014790:	009b      	lsls	r3, r3, #2
 8014792:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8014796:	687a      	ldr	r2, [r7, #4]
 8014798:	4413      	add	r3, r2
 801479a:	3304      	adds	r3, #4
 801479c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	2200      	movs	r2, #0
 80147a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	2201      	movs	r2, #1
 80147a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80147aa:	78fb      	ldrb	r3, [r7, #3]
 80147ac:	f003 030f 	and.w	r3, r3, #15
 80147b0:	b2da      	uxtb	r2, r3
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80147bc:	2b01      	cmp	r3, #1
 80147be:	d101      	bne.n	80147c4 <HAL_PCD_EP_SetStall+0x82>
 80147c0:	2302      	movs	r3, #2
 80147c2:	e01e      	b.n	8014802 <HAL_PCD_EP_SetStall+0xc0>
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	2201      	movs	r2, #1
 80147c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	68f9      	ldr	r1, [r7, #12]
 80147d2:	4618      	mov	r0, r3
 80147d4:	f007 fbf6 	bl	801bfc4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80147d8:	78fb      	ldrb	r3, [r7, #3]
 80147da:	f003 030f 	and.w	r3, r3, #15
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d10a      	bne.n	80147f8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	6818      	ldr	r0, [r3, #0]
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	691b      	ldr	r3, [r3, #16]
 80147ea:	b2d9      	uxtb	r1, r3
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80147f2:	461a      	mov	r2, r3
 80147f4:	f007 fdd6 	bl	801c3a4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	2200      	movs	r2, #0
 80147fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8014800:	2300      	movs	r3, #0
}
 8014802:	4618      	mov	r0, r3
 8014804:	3710      	adds	r7, #16
 8014806:	46bd      	mov	sp, r7
 8014808:	bd80      	pop	{r7, pc}

0801480a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801480a:	b580      	push	{r7, lr}
 801480c:	b084      	sub	sp, #16
 801480e:	af00      	add	r7, sp, #0
 8014810:	6078      	str	r0, [r7, #4]
 8014812:	460b      	mov	r3, r1
 8014814:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8014816:	78fb      	ldrb	r3, [r7, #3]
 8014818:	f003 020f 	and.w	r2, r3, #15
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	685b      	ldr	r3, [r3, #4]
 8014820:	429a      	cmp	r2, r3
 8014822:	d901      	bls.n	8014828 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8014824:	2301      	movs	r3, #1
 8014826:	e042      	b.n	80148ae <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8014828:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801482c:	2b00      	cmp	r3, #0
 801482e:	da0f      	bge.n	8014850 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8014830:	78fb      	ldrb	r3, [r7, #3]
 8014832:	f003 020f 	and.w	r2, r3, #15
 8014836:	4613      	mov	r3, r2
 8014838:	00db      	lsls	r3, r3, #3
 801483a:	1a9b      	subs	r3, r3, r2
 801483c:	009b      	lsls	r3, r3, #2
 801483e:	3338      	adds	r3, #56	; 0x38
 8014840:	687a      	ldr	r2, [r7, #4]
 8014842:	4413      	add	r3, r2
 8014844:	3304      	adds	r3, #4
 8014846:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	2201      	movs	r2, #1
 801484c:	705a      	strb	r2, [r3, #1]
 801484e:	e00f      	b.n	8014870 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8014850:	78fb      	ldrb	r3, [r7, #3]
 8014852:	f003 020f 	and.w	r2, r3, #15
 8014856:	4613      	mov	r3, r2
 8014858:	00db      	lsls	r3, r3, #3
 801485a:	1a9b      	subs	r3, r3, r2
 801485c:	009b      	lsls	r3, r3, #2
 801485e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8014862:	687a      	ldr	r2, [r7, #4]
 8014864:	4413      	add	r3, r2
 8014866:	3304      	adds	r3, #4
 8014868:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	2200      	movs	r2, #0
 801486e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	2200      	movs	r2, #0
 8014874:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8014876:	78fb      	ldrb	r3, [r7, #3]
 8014878:	f003 030f 	and.w	r3, r3, #15
 801487c:	b2da      	uxtb	r2, r3
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8014888:	2b01      	cmp	r3, #1
 801488a:	d101      	bne.n	8014890 <HAL_PCD_EP_ClrStall+0x86>
 801488c:	2302      	movs	r3, #2
 801488e:	e00e      	b.n	80148ae <HAL_PCD_EP_ClrStall+0xa4>
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	2201      	movs	r2, #1
 8014894:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	68f9      	ldr	r1, [r7, #12]
 801489e:	4618      	mov	r0, r3
 80148a0:	f007 fbfe 	bl	801c0a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	2200      	movs	r2, #0
 80148a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80148ac:	2300      	movs	r3, #0
}
 80148ae:	4618      	mov	r0, r3
 80148b0:	3710      	adds	r7, #16
 80148b2:	46bd      	mov	sp, r7
 80148b4:	bd80      	pop	{r7, pc}

080148b6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80148b6:	b580      	push	{r7, lr}
 80148b8:	b08a      	sub	sp, #40	; 0x28
 80148ba:	af02      	add	r7, sp, #8
 80148bc:	6078      	str	r0, [r7, #4]
 80148be:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80148c6:	697b      	ldr	r3, [r7, #20]
 80148c8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80148ca:	683a      	ldr	r2, [r7, #0]
 80148cc:	4613      	mov	r3, r2
 80148ce:	00db      	lsls	r3, r3, #3
 80148d0:	1a9b      	subs	r3, r3, r2
 80148d2:	009b      	lsls	r3, r3, #2
 80148d4:	3338      	adds	r3, #56	; 0x38
 80148d6:	687a      	ldr	r2, [r7, #4]
 80148d8:	4413      	add	r3, r2
 80148da:	3304      	adds	r3, #4
 80148dc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	699a      	ldr	r2, [r3, #24]
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	695b      	ldr	r3, [r3, #20]
 80148e6:	429a      	cmp	r2, r3
 80148e8:	d901      	bls.n	80148ee <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80148ea:	2301      	movs	r3, #1
 80148ec:	e06c      	b.n	80149c8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	695a      	ldr	r2, [r3, #20]
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	699b      	ldr	r3, [r3, #24]
 80148f6:	1ad3      	subs	r3, r2, r3
 80148f8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	689b      	ldr	r3, [r3, #8]
 80148fe:	69fa      	ldr	r2, [r7, #28]
 8014900:	429a      	cmp	r2, r3
 8014902:	d902      	bls.n	801490a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	689b      	ldr	r3, [r3, #8]
 8014908:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 801490a:	69fb      	ldr	r3, [r7, #28]
 801490c:	3303      	adds	r3, #3
 801490e:	089b      	lsrs	r3, r3, #2
 8014910:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8014912:	e02b      	b.n	801496c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	695a      	ldr	r2, [r3, #20]
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	699b      	ldr	r3, [r3, #24]
 801491c:	1ad3      	subs	r3, r2, r3
 801491e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	689b      	ldr	r3, [r3, #8]
 8014924:	69fa      	ldr	r2, [r7, #28]
 8014926:	429a      	cmp	r2, r3
 8014928:	d902      	bls.n	8014930 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 801492a:	68fb      	ldr	r3, [r7, #12]
 801492c:	689b      	ldr	r3, [r3, #8]
 801492e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8014930:	69fb      	ldr	r3, [r7, #28]
 8014932:	3303      	adds	r3, #3
 8014934:	089b      	lsrs	r3, r3, #2
 8014936:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	68d9      	ldr	r1, [r3, #12]
 801493c:	683b      	ldr	r3, [r7, #0]
 801493e:	b2da      	uxtb	r2, r3
 8014940:	69fb      	ldr	r3, [r7, #28]
 8014942:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8014948:	b2db      	uxtb	r3, r3
 801494a:	9300      	str	r3, [sp, #0]
 801494c:	4603      	mov	r3, r0
 801494e:	6978      	ldr	r0, [r7, #20]
 8014950:	f007 fada 	bl	801bf08 <USB_WritePacket>

    ep->xfer_buff  += len;
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	68da      	ldr	r2, [r3, #12]
 8014958:	69fb      	ldr	r3, [r7, #28]
 801495a:	441a      	add	r2, r3
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	699a      	ldr	r2, [r3, #24]
 8014964:	69fb      	ldr	r3, [r7, #28]
 8014966:	441a      	add	r2, r3
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801496c:	683b      	ldr	r3, [r7, #0]
 801496e:	015a      	lsls	r2, r3, #5
 8014970:	693b      	ldr	r3, [r7, #16]
 8014972:	4413      	add	r3, r2
 8014974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014978:	699b      	ldr	r3, [r3, #24]
 801497a:	b29b      	uxth	r3, r3
 801497c:	69ba      	ldr	r2, [r7, #24]
 801497e:	429a      	cmp	r2, r3
 8014980:	d809      	bhi.n	8014996 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	699a      	ldr	r2, [r3, #24]
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801498a:	429a      	cmp	r2, r3
 801498c:	d203      	bcs.n	8014996 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	695b      	ldr	r3, [r3, #20]
 8014992:	2b00      	cmp	r3, #0
 8014994:	d1be      	bne.n	8014914 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8014996:	68fb      	ldr	r3, [r7, #12]
 8014998:	695a      	ldr	r2, [r3, #20]
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	699b      	ldr	r3, [r3, #24]
 801499e:	429a      	cmp	r2, r3
 80149a0:	d811      	bhi.n	80149c6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80149a2:	683b      	ldr	r3, [r7, #0]
 80149a4:	f003 030f 	and.w	r3, r3, #15
 80149a8:	2201      	movs	r2, #1
 80149aa:	fa02 f303 	lsl.w	r3, r2, r3
 80149ae:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80149b0:	693b      	ldr	r3, [r7, #16]
 80149b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80149b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80149b8:	68bb      	ldr	r3, [r7, #8]
 80149ba:	43db      	mvns	r3, r3
 80149bc:	6939      	ldr	r1, [r7, #16]
 80149be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80149c2:	4013      	ands	r3, r2
 80149c4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80149c6:	2300      	movs	r3, #0
}
 80149c8:	4618      	mov	r0, r3
 80149ca:	3720      	adds	r7, #32
 80149cc:	46bd      	mov	sp, r7
 80149ce:	bd80      	pop	{r7, pc}

080149d0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80149d0:	b580      	push	{r7, lr}
 80149d2:	b086      	sub	sp, #24
 80149d4:	af00      	add	r7, sp, #0
 80149d6:	6078      	str	r0, [r7, #4]
 80149d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80149e0:	697b      	ldr	r3, [r7, #20]
 80149e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80149e4:	697b      	ldr	r3, [r7, #20]
 80149e6:	333c      	adds	r3, #60	; 0x3c
 80149e8:	3304      	adds	r3, #4
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80149ee:	683b      	ldr	r3, [r7, #0]
 80149f0:	015a      	lsls	r2, r3, #5
 80149f2:	693b      	ldr	r3, [r7, #16]
 80149f4:	4413      	add	r3, r2
 80149f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80149fa:	689b      	ldr	r3, [r3, #8]
 80149fc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	691b      	ldr	r3, [r3, #16]
 8014a02:	2b01      	cmp	r3, #1
 8014a04:	f040 80a0 	bne.w	8014b48 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8014a08:	68bb      	ldr	r3, [r7, #8]
 8014a0a:	f003 0308 	and.w	r3, r3, #8
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d015      	beq.n	8014a3e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8014a12:	68fb      	ldr	r3, [r7, #12]
 8014a14:	4a72      	ldr	r2, [pc, #456]	; (8014be0 <PCD_EP_OutXfrComplete_int+0x210>)
 8014a16:	4293      	cmp	r3, r2
 8014a18:	f240 80dd 	bls.w	8014bd6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8014a1c:	68bb      	ldr	r3, [r7, #8]
 8014a1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	f000 80d7 	beq.w	8014bd6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8014a28:	683b      	ldr	r3, [r7, #0]
 8014a2a:	015a      	lsls	r2, r3, #5
 8014a2c:	693b      	ldr	r3, [r7, #16]
 8014a2e:	4413      	add	r3, r2
 8014a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014a34:	461a      	mov	r2, r3
 8014a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014a3a:	6093      	str	r3, [r2, #8]
 8014a3c:	e0cb      	b.n	8014bd6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8014a3e:	68bb      	ldr	r3, [r7, #8]
 8014a40:	f003 0320 	and.w	r3, r3, #32
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d009      	beq.n	8014a5c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8014a48:	683b      	ldr	r3, [r7, #0]
 8014a4a:	015a      	lsls	r2, r3, #5
 8014a4c:	693b      	ldr	r3, [r7, #16]
 8014a4e:	4413      	add	r3, r2
 8014a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014a54:	461a      	mov	r2, r3
 8014a56:	2320      	movs	r3, #32
 8014a58:	6093      	str	r3, [r2, #8]
 8014a5a:	e0bc      	b.n	8014bd6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8014a5c:	68bb      	ldr	r3, [r7, #8]
 8014a5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	f040 80b7 	bne.w	8014bd6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	4a5d      	ldr	r2, [pc, #372]	; (8014be0 <PCD_EP_OutXfrComplete_int+0x210>)
 8014a6c:	4293      	cmp	r3, r2
 8014a6e:	d90f      	bls.n	8014a90 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8014a70:	68bb      	ldr	r3, [r7, #8]
 8014a72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d00a      	beq.n	8014a90 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8014a7a:	683b      	ldr	r3, [r7, #0]
 8014a7c:	015a      	lsls	r2, r3, #5
 8014a7e:	693b      	ldr	r3, [r7, #16]
 8014a80:	4413      	add	r3, r2
 8014a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014a86:	461a      	mov	r2, r3
 8014a88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014a8c:	6093      	str	r3, [r2, #8]
 8014a8e:	e0a2      	b.n	8014bd6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8014a90:	6879      	ldr	r1, [r7, #4]
 8014a92:	683a      	ldr	r2, [r7, #0]
 8014a94:	4613      	mov	r3, r2
 8014a96:	00db      	lsls	r3, r3, #3
 8014a98:	1a9b      	subs	r3, r3, r2
 8014a9a:	009b      	lsls	r3, r3, #2
 8014a9c:	440b      	add	r3, r1
 8014a9e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8014aa2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8014aa4:	683b      	ldr	r3, [r7, #0]
 8014aa6:	0159      	lsls	r1, r3, #5
 8014aa8:	693b      	ldr	r3, [r7, #16]
 8014aaa:	440b      	add	r3, r1
 8014aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014ab0:	691b      	ldr	r3, [r3, #16]
 8014ab2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8014ab6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8014ab8:	6878      	ldr	r0, [r7, #4]
 8014aba:	683a      	ldr	r2, [r7, #0]
 8014abc:	4613      	mov	r3, r2
 8014abe:	00db      	lsls	r3, r3, #3
 8014ac0:	1a9b      	subs	r3, r3, r2
 8014ac2:	009b      	lsls	r3, r3, #2
 8014ac4:	4403      	add	r3, r0
 8014ac6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8014aca:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8014acc:	6879      	ldr	r1, [r7, #4]
 8014ace:	683a      	ldr	r2, [r7, #0]
 8014ad0:	4613      	mov	r3, r2
 8014ad2:	00db      	lsls	r3, r3, #3
 8014ad4:	1a9b      	subs	r3, r3, r2
 8014ad6:	009b      	lsls	r3, r3, #2
 8014ad8:	440b      	add	r3, r1
 8014ada:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8014ade:	6819      	ldr	r1, [r3, #0]
 8014ae0:	6878      	ldr	r0, [r7, #4]
 8014ae2:	683a      	ldr	r2, [r7, #0]
 8014ae4:	4613      	mov	r3, r2
 8014ae6:	00db      	lsls	r3, r3, #3
 8014ae8:	1a9b      	subs	r3, r3, r2
 8014aea:	009b      	lsls	r3, r3, #2
 8014aec:	4403      	add	r3, r0
 8014aee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	4419      	add	r1, r3
 8014af6:	6878      	ldr	r0, [r7, #4]
 8014af8:	683a      	ldr	r2, [r7, #0]
 8014afa:	4613      	mov	r3, r2
 8014afc:	00db      	lsls	r3, r3, #3
 8014afe:	1a9b      	subs	r3, r3, r2
 8014b00:	009b      	lsls	r3, r3, #2
 8014b02:	4403      	add	r3, r0
 8014b04:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8014b08:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8014b0a:	683b      	ldr	r3, [r7, #0]
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d114      	bne.n	8014b3a <PCD_EP_OutXfrComplete_int+0x16a>
 8014b10:	6879      	ldr	r1, [r7, #4]
 8014b12:	683a      	ldr	r2, [r7, #0]
 8014b14:	4613      	mov	r3, r2
 8014b16:	00db      	lsls	r3, r3, #3
 8014b18:	1a9b      	subs	r3, r3, r2
 8014b1a:	009b      	lsls	r3, r3, #2
 8014b1c:	440b      	add	r3, r1
 8014b1e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d108      	bne.n	8014b3a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	6818      	ldr	r0, [r3, #0]
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8014b32:	461a      	mov	r2, r3
 8014b34:	2101      	movs	r1, #1
 8014b36:	f007 fc35 	bl	801c3a4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8014b3a:	683b      	ldr	r3, [r7, #0]
 8014b3c:	b2db      	uxtb	r3, r3
 8014b3e:	4619      	mov	r1, r3
 8014b40:	6878      	ldr	r0, [r7, #4]
 8014b42:	f009 faf7 	bl	801e134 <HAL_PCD_DataOutStageCallback>
 8014b46:	e046      	b.n	8014bd6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	4a26      	ldr	r2, [pc, #152]	; (8014be4 <PCD_EP_OutXfrComplete_int+0x214>)
 8014b4c:	4293      	cmp	r3, r2
 8014b4e:	d124      	bne.n	8014b9a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8014b50:	68bb      	ldr	r3, [r7, #8]
 8014b52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d00a      	beq.n	8014b70 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8014b5a:	683b      	ldr	r3, [r7, #0]
 8014b5c:	015a      	lsls	r2, r3, #5
 8014b5e:	693b      	ldr	r3, [r7, #16]
 8014b60:	4413      	add	r3, r2
 8014b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b66:	461a      	mov	r2, r3
 8014b68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014b6c:	6093      	str	r3, [r2, #8]
 8014b6e:	e032      	b.n	8014bd6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8014b70:	68bb      	ldr	r3, [r7, #8]
 8014b72:	f003 0320 	and.w	r3, r3, #32
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d008      	beq.n	8014b8c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8014b7a:	683b      	ldr	r3, [r7, #0]
 8014b7c:	015a      	lsls	r2, r3, #5
 8014b7e:	693b      	ldr	r3, [r7, #16]
 8014b80:	4413      	add	r3, r2
 8014b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b86:	461a      	mov	r2, r3
 8014b88:	2320      	movs	r3, #32
 8014b8a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8014b8c:	683b      	ldr	r3, [r7, #0]
 8014b8e:	b2db      	uxtb	r3, r3
 8014b90:	4619      	mov	r1, r3
 8014b92:	6878      	ldr	r0, [r7, #4]
 8014b94:	f009 face 	bl	801e134 <HAL_PCD_DataOutStageCallback>
 8014b98:	e01d      	b.n	8014bd6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8014b9a:	683b      	ldr	r3, [r7, #0]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d114      	bne.n	8014bca <PCD_EP_OutXfrComplete_int+0x1fa>
 8014ba0:	6879      	ldr	r1, [r7, #4]
 8014ba2:	683a      	ldr	r2, [r7, #0]
 8014ba4:	4613      	mov	r3, r2
 8014ba6:	00db      	lsls	r3, r3, #3
 8014ba8:	1a9b      	subs	r3, r3, r2
 8014baa:	009b      	lsls	r3, r3, #2
 8014bac:	440b      	add	r3, r1
 8014bae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8014bb2:	681b      	ldr	r3, [r3, #0]
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d108      	bne.n	8014bca <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	6818      	ldr	r0, [r3, #0]
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8014bc2:	461a      	mov	r2, r3
 8014bc4:	2100      	movs	r1, #0
 8014bc6:	f007 fbed 	bl	801c3a4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8014bca:	683b      	ldr	r3, [r7, #0]
 8014bcc:	b2db      	uxtb	r3, r3
 8014bce:	4619      	mov	r1, r3
 8014bd0:	6878      	ldr	r0, [r7, #4]
 8014bd2:	f009 faaf 	bl	801e134 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8014bd6:	2300      	movs	r3, #0
}
 8014bd8:	4618      	mov	r0, r3
 8014bda:	3718      	adds	r7, #24
 8014bdc:	46bd      	mov	sp, r7
 8014bde:	bd80      	pop	{r7, pc}
 8014be0:	4f54300a 	.word	0x4f54300a
 8014be4:	4f54310a 	.word	0x4f54310a

08014be8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8014be8:	b580      	push	{r7, lr}
 8014bea:	b086      	sub	sp, #24
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	6078      	str	r0, [r7, #4]
 8014bf0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014bf8:	697b      	ldr	r3, [r7, #20]
 8014bfa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8014bfc:	697b      	ldr	r3, [r7, #20]
 8014bfe:	333c      	adds	r3, #60	; 0x3c
 8014c00:	3304      	adds	r3, #4
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8014c06:	683b      	ldr	r3, [r7, #0]
 8014c08:	015a      	lsls	r2, r3, #5
 8014c0a:	693b      	ldr	r3, [r7, #16]
 8014c0c:	4413      	add	r3, r2
 8014c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014c12:	689b      	ldr	r3, [r3, #8]
 8014c14:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8014c16:	68fb      	ldr	r3, [r7, #12]
 8014c18:	4a15      	ldr	r2, [pc, #84]	; (8014c70 <PCD_EP_OutSetupPacket_int+0x88>)
 8014c1a:	4293      	cmp	r3, r2
 8014c1c:	d90e      	bls.n	8014c3c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8014c1e:	68bb      	ldr	r3, [r7, #8]
 8014c20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d009      	beq.n	8014c3c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8014c28:	683b      	ldr	r3, [r7, #0]
 8014c2a:	015a      	lsls	r2, r3, #5
 8014c2c:	693b      	ldr	r3, [r7, #16]
 8014c2e:	4413      	add	r3, r2
 8014c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014c34:	461a      	mov	r2, r3
 8014c36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014c3a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8014c3c:	6878      	ldr	r0, [r7, #4]
 8014c3e:	f009 fa67 	bl	801e110 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	4a0a      	ldr	r2, [pc, #40]	; (8014c70 <PCD_EP_OutSetupPacket_int+0x88>)
 8014c46:	4293      	cmp	r3, r2
 8014c48:	d90c      	bls.n	8014c64 <PCD_EP_OutSetupPacket_int+0x7c>
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	691b      	ldr	r3, [r3, #16]
 8014c4e:	2b01      	cmp	r3, #1
 8014c50:	d108      	bne.n	8014c64 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	6818      	ldr	r0, [r3, #0]
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8014c5c:	461a      	mov	r2, r3
 8014c5e:	2101      	movs	r1, #1
 8014c60:	f007 fba0 	bl	801c3a4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8014c64:	2300      	movs	r3, #0
}
 8014c66:	4618      	mov	r0, r3
 8014c68:	3718      	adds	r7, #24
 8014c6a:	46bd      	mov	sp, r7
 8014c6c:	bd80      	pop	{r7, pc}
 8014c6e:	bf00      	nop
 8014c70:	4f54300a 	.word	0x4f54300a

08014c74 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8014c74:	b480      	push	{r7}
 8014c76:	b085      	sub	sp, #20
 8014c78:	af00      	add	r7, sp, #0
 8014c7a:	6078      	str	r0, [r7, #4]
 8014c7c:	460b      	mov	r3, r1
 8014c7e:	70fb      	strb	r3, [r7, #3]
 8014c80:	4613      	mov	r3, r2
 8014c82:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	681b      	ldr	r3, [r3, #0]
 8014c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c8a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8014c8c:	78fb      	ldrb	r3, [r7, #3]
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d107      	bne.n	8014ca2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8014c92:	883b      	ldrh	r3, [r7, #0]
 8014c94:	0419      	lsls	r1, r3, #16
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	681b      	ldr	r3, [r3, #0]
 8014c9a:	68ba      	ldr	r2, [r7, #8]
 8014c9c:	430a      	orrs	r2, r1
 8014c9e:	629a      	str	r2, [r3, #40]	; 0x28
 8014ca0:	e028      	b.n	8014cf4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ca8:	0c1b      	lsrs	r3, r3, #16
 8014caa:	68ba      	ldr	r2, [r7, #8]
 8014cac:	4413      	add	r3, r2
 8014cae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8014cb0:	2300      	movs	r3, #0
 8014cb2:	73fb      	strb	r3, [r7, #15]
 8014cb4:	e00d      	b.n	8014cd2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	681a      	ldr	r2, [r3, #0]
 8014cba:	7bfb      	ldrb	r3, [r7, #15]
 8014cbc:	3340      	adds	r3, #64	; 0x40
 8014cbe:	009b      	lsls	r3, r3, #2
 8014cc0:	4413      	add	r3, r2
 8014cc2:	685b      	ldr	r3, [r3, #4]
 8014cc4:	0c1b      	lsrs	r3, r3, #16
 8014cc6:	68ba      	ldr	r2, [r7, #8]
 8014cc8:	4413      	add	r3, r2
 8014cca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8014ccc:	7bfb      	ldrb	r3, [r7, #15]
 8014cce:	3301      	adds	r3, #1
 8014cd0:	73fb      	strb	r3, [r7, #15]
 8014cd2:	7bfa      	ldrb	r2, [r7, #15]
 8014cd4:	78fb      	ldrb	r3, [r7, #3]
 8014cd6:	3b01      	subs	r3, #1
 8014cd8:	429a      	cmp	r2, r3
 8014cda:	d3ec      	bcc.n	8014cb6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8014cdc:	883b      	ldrh	r3, [r7, #0]
 8014cde:	0418      	lsls	r0, r3, #16
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	6819      	ldr	r1, [r3, #0]
 8014ce4:	78fb      	ldrb	r3, [r7, #3]
 8014ce6:	3b01      	subs	r3, #1
 8014ce8:	68ba      	ldr	r2, [r7, #8]
 8014cea:	4302      	orrs	r2, r0
 8014cec:	3340      	adds	r3, #64	; 0x40
 8014cee:	009b      	lsls	r3, r3, #2
 8014cf0:	440b      	add	r3, r1
 8014cf2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8014cf4:	2300      	movs	r3, #0
}
 8014cf6:	4618      	mov	r0, r3
 8014cf8:	3714      	adds	r7, #20
 8014cfa:	46bd      	mov	sp, r7
 8014cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d00:	4770      	bx	lr

08014d02 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8014d02:	b480      	push	{r7}
 8014d04:	b083      	sub	sp, #12
 8014d06:	af00      	add	r7, sp, #0
 8014d08:	6078      	str	r0, [r7, #4]
 8014d0a:	460b      	mov	r3, r1
 8014d0c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	887a      	ldrh	r2, [r7, #2]
 8014d14:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8014d16:	2300      	movs	r3, #0
}
 8014d18:	4618      	mov	r0, r3
 8014d1a:	370c      	adds	r7, #12
 8014d1c:	46bd      	mov	sp, r7
 8014d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d22:	4770      	bx	lr

08014d24 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8014d24:	b480      	push	{r7}
 8014d26:	b085      	sub	sp, #20
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	2201      	movs	r2, #1
 8014d36:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	2200      	movs	r2, #0
 8014d3e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	699b      	ldr	r3, [r3, #24]
 8014d46:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014d52:	4b05      	ldr	r3, [pc, #20]	; (8014d68 <HAL_PCDEx_ActivateLPM+0x44>)
 8014d54:	4313      	orrs	r3, r2
 8014d56:	68fa      	ldr	r2, [r7, #12]
 8014d58:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8014d5a:	2300      	movs	r3, #0
}
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	3714      	adds	r7, #20
 8014d60:	46bd      	mov	sp, r7
 8014d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d66:	4770      	bx	lr
 8014d68:	10000003 	.word	0x10000003

08014d6c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8014d6c:	b480      	push	{r7}
 8014d6e:	b083      	sub	sp, #12
 8014d70:	af00      	add	r7, sp, #0
 8014d72:	6078      	str	r0, [r7, #4]
 8014d74:	460b      	mov	r3, r1
 8014d76:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8014d78:	bf00      	nop
 8014d7a:	370c      	adds	r7, #12
 8014d7c:	46bd      	mov	sp, r7
 8014d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d82:	4770      	bx	lr

08014d84 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8014d84:	b580      	push	{r7, lr}
 8014d86:	b084      	sub	sp, #16
 8014d88:	af00      	add	r7, sp, #0
 8014d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8014d8c:	4b19      	ldr	r3, [pc, #100]	; (8014df4 <HAL_PWREx_ConfigSupply+0x70>)
 8014d8e:	68db      	ldr	r3, [r3, #12]
 8014d90:	f003 0304 	and.w	r3, r3, #4
 8014d94:	2b04      	cmp	r3, #4
 8014d96:	d00a      	beq.n	8014dae <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8014d98:	4b16      	ldr	r3, [pc, #88]	; (8014df4 <HAL_PWREx_ConfigSupply+0x70>)
 8014d9a:	68db      	ldr	r3, [r3, #12]
 8014d9c:	f003 0307 	and.w	r3, r3, #7
 8014da0:	687a      	ldr	r2, [r7, #4]
 8014da2:	429a      	cmp	r2, r3
 8014da4:	d001      	beq.n	8014daa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8014da6:	2301      	movs	r3, #1
 8014da8:	e01f      	b.n	8014dea <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8014daa:	2300      	movs	r3, #0
 8014dac:	e01d      	b.n	8014dea <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8014dae:	4b11      	ldr	r3, [pc, #68]	; (8014df4 <HAL_PWREx_ConfigSupply+0x70>)
 8014db0:	68db      	ldr	r3, [r3, #12]
 8014db2:	f023 0207 	bic.w	r2, r3, #7
 8014db6:	490f      	ldr	r1, [pc, #60]	; (8014df4 <HAL_PWREx_ConfigSupply+0x70>)
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	4313      	orrs	r3, r2
 8014dbc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8014dbe:	f7fe f87d 	bl	8012ebc <HAL_GetTick>
 8014dc2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8014dc4:	e009      	b.n	8014dda <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8014dc6:	f7fe f879 	bl	8012ebc <HAL_GetTick>
 8014dca:	4602      	mov	r2, r0
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	1ad3      	subs	r3, r2, r3
 8014dd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014dd4:	d901      	bls.n	8014dda <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8014dd6:	2301      	movs	r3, #1
 8014dd8:	e007      	b.n	8014dea <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8014dda:	4b06      	ldr	r3, [pc, #24]	; (8014df4 <HAL_PWREx_ConfigSupply+0x70>)
 8014ddc:	685b      	ldr	r3, [r3, #4]
 8014dde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014de6:	d1ee      	bne.n	8014dc6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8014de8:	2300      	movs	r3, #0
}
 8014dea:	4618      	mov	r0, r3
 8014dec:	3710      	adds	r7, #16
 8014dee:	46bd      	mov	sp, r7
 8014df0:	bd80      	pop	{r7, pc}
 8014df2:	bf00      	nop
 8014df4:	58024800 	.word	0x58024800

08014df8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8014df8:	b480      	push	{r7}
 8014dfa:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8014dfc:	4b05      	ldr	r3, [pc, #20]	; (8014e14 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8014dfe:	68db      	ldr	r3, [r3, #12]
 8014e00:	4a04      	ldr	r2, [pc, #16]	; (8014e14 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8014e02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014e06:	60d3      	str	r3, [r2, #12]
}
 8014e08:	bf00      	nop
 8014e0a:	46bd      	mov	sp, r7
 8014e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e10:	4770      	bx	lr
 8014e12:	bf00      	nop
 8014e14:	58024800 	.word	0x58024800

08014e18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8014e18:	b580      	push	{r7, lr}
 8014e1a:	b08c      	sub	sp, #48	; 0x30
 8014e1c:	af00      	add	r7, sp, #0
 8014e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d101      	bne.n	8014e2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8014e26:	2301      	movs	r3, #1
 8014e28:	e3c4      	b.n	80155b4 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	f003 0301 	and.w	r3, r3, #1
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	f000 8087 	beq.w	8014f46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014e38:	4ba2      	ldr	r3, [pc, #648]	; (80150c4 <HAL_RCC_OscConfig+0x2ac>)
 8014e3a:	691b      	ldr	r3, [r3, #16]
 8014e3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014e40:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8014e42:	4ba0      	ldr	r3, [pc, #640]	; (80150c4 <HAL_RCC_OscConfig+0x2ac>)
 8014e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e46:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8014e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e4a:	2b10      	cmp	r3, #16
 8014e4c:	d007      	beq.n	8014e5e <HAL_RCC_OscConfig+0x46>
 8014e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e50:	2b18      	cmp	r3, #24
 8014e52:	d110      	bne.n	8014e76 <HAL_RCC_OscConfig+0x5e>
 8014e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e56:	f003 0303 	and.w	r3, r3, #3
 8014e5a:	2b02      	cmp	r3, #2
 8014e5c:	d10b      	bne.n	8014e76 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014e5e:	4b99      	ldr	r3, [pc, #612]	; (80150c4 <HAL_RCC_OscConfig+0x2ac>)
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d06c      	beq.n	8014f44 <HAL_RCC_OscConfig+0x12c>
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	685b      	ldr	r3, [r3, #4]
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d168      	bne.n	8014f44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8014e72:	2301      	movs	r3, #1
 8014e74:	e39e      	b.n	80155b4 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	685b      	ldr	r3, [r3, #4]
 8014e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014e7e:	d106      	bne.n	8014e8e <HAL_RCC_OscConfig+0x76>
 8014e80:	4b90      	ldr	r3, [pc, #576]	; (80150c4 <HAL_RCC_OscConfig+0x2ac>)
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	4a8f      	ldr	r2, [pc, #572]	; (80150c4 <HAL_RCC_OscConfig+0x2ac>)
 8014e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014e8a:	6013      	str	r3, [r2, #0]
 8014e8c:	e02e      	b.n	8014eec <HAL_RCC_OscConfig+0xd4>
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	685b      	ldr	r3, [r3, #4]
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d10c      	bne.n	8014eb0 <HAL_RCC_OscConfig+0x98>
 8014e96:	4b8b      	ldr	r3, [pc, #556]	; (80150c4 <HAL_RCC_OscConfig+0x2ac>)
 8014e98:	681b      	ldr	r3, [r3, #0]
 8014e9a:	4a8a      	ldr	r2, [pc, #552]	; (80150c4 <HAL_RCC_OscConfig+0x2ac>)
 8014e9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014ea0:	6013      	str	r3, [r2, #0]
 8014ea2:	4b88      	ldr	r3, [pc, #544]	; (80150c4 <HAL_RCC_OscConfig+0x2ac>)
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	4a87      	ldr	r2, [pc, #540]	; (80150c4 <HAL_RCC_OscConfig+0x2ac>)
 8014ea8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8014eac:	6013      	str	r3, [r2, #0]
 8014eae:	e01d      	b.n	8014eec <HAL_RCC_OscConfig+0xd4>
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	685b      	ldr	r3, [r3, #4]
 8014eb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8014eb8:	d10c      	bne.n	8014ed4 <HAL_RCC_OscConfig+0xbc>
 8014eba:	4b82      	ldr	r3, [pc, #520]	; (80150c4 <HAL_RCC_OscConfig+0x2ac>)
 8014ebc:	681b      	ldr	r3, [r3, #0]
 8014ebe:	4a81      	ldr	r2, [pc, #516]	; (80150c4 <HAL_RCC_OscConfig+0x2ac>)
 8014ec0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8014ec4:	6013      	str	r3, [r2, #0]
 8014ec6:	4b7f      	ldr	r3, [pc, #508]	; (80150c4 <HAL_RCC_OscConfig+0x2ac>)
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	4a7e      	ldr	r2, [pc, #504]	; (80150c4 <HAL_RCC_OscConfig+0x2ac>)
 8014ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014ed0:	6013      	str	r3, [r2, #0]
 8014ed2:	e00b      	b.n	8014eec <HAL_RCC_OscConfig+0xd4>
 8014ed4:	4b7b      	ldr	r3, [pc, #492]	; (80150c4 <HAL_RCC_OscConfig+0x2ac>)
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	4a7a      	ldr	r2, [pc, #488]	; (80150c4 <HAL_RCC_OscConfig+0x2ac>)
 8014eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014ede:	6013      	str	r3, [r2, #0]
 8014ee0:	4b78      	ldr	r3, [pc, #480]	; (80150c4 <HAL_RCC_OscConfig+0x2ac>)
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	4a77      	ldr	r2, [pc, #476]	; (80150c4 <HAL_RCC_OscConfig+0x2ac>)
 8014ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8014eea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	685b      	ldr	r3, [r3, #4]
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d013      	beq.n	8014f1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014ef4:	f7fd ffe2 	bl	8012ebc <HAL_GetTick>
 8014ef8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014efa:	e008      	b.n	8014f0e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8014efc:	f7fd ffde 	bl	8012ebc <HAL_GetTick>
 8014f00:	4602      	mov	r2, r0
 8014f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f04:	1ad3      	subs	r3, r2, r3
 8014f06:	2b64      	cmp	r3, #100	; 0x64
 8014f08:	d901      	bls.n	8014f0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8014f0a:	2303      	movs	r3, #3
 8014f0c:	e352      	b.n	80155b4 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014f0e:	4b6d      	ldr	r3, [pc, #436]	; (80150c4 <HAL_RCC_OscConfig+0x2ac>)
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d0f0      	beq.n	8014efc <HAL_RCC_OscConfig+0xe4>
 8014f1a:	e014      	b.n	8014f46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014f1c:	f7fd ffce 	bl	8012ebc <HAL_GetTick>
 8014f20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8014f22:	e008      	b.n	8014f36 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8014f24:	f7fd ffca 	bl	8012ebc <HAL_GetTick>
 8014f28:	4602      	mov	r2, r0
 8014f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f2c:	1ad3      	subs	r3, r2, r3
 8014f2e:	2b64      	cmp	r3, #100	; 0x64
 8014f30:	d901      	bls.n	8014f36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8014f32:	2303      	movs	r3, #3
 8014f34:	e33e      	b.n	80155b4 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8014f36:	4b63      	ldr	r3, [pc, #396]	; (80150c4 <HAL_RCC_OscConfig+0x2ac>)
 8014f38:	681b      	ldr	r3, [r3, #0]
 8014f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d1f0      	bne.n	8014f24 <HAL_RCC_OscConfig+0x10c>
 8014f42:	e000      	b.n	8014f46 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	681b      	ldr	r3, [r3, #0]
 8014f4a:	f003 0302 	and.w	r3, r3, #2
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	f000 8092 	beq.w	8015078 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014f54:	4b5b      	ldr	r3, [pc, #364]	; (80150c4 <HAL_RCC_OscConfig+0x2ac>)
 8014f56:	691b      	ldr	r3, [r3, #16]
 8014f58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014f5c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8014f5e:	4b59      	ldr	r3, [pc, #356]	; (80150c4 <HAL_RCC_OscConfig+0x2ac>)
 8014f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f62:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8014f64:	6a3b      	ldr	r3, [r7, #32]
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d007      	beq.n	8014f7a <HAL_RCC_OscConfig+0x162>
 8014f6a:	6a3b      	ldr	r3, [r7, #32]
 8014f6c:	2b18      	cmp	r3, #24
 8014f6e:	d12d      	bne.n	8014fcc <HAL_RCC_OscConfig+0x1b4>
 8014f70:	69fb      	ldr	r3, [r7, #28]
 8014f72:	f003 0303 	and.w	r3, r3, #3
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d128      	bne.n	8014fcc <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8014f7a:	4b52      	ldr	r3, [pc, #328]	; (80150c4 <HAL_RCC_OscConfig+0x2ac>)
 8014f7c:	681b      	ldr	r3, [r3, #0]
 8014f7e:	f003 0304 	and.w	r3, r3, #4
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d005      	beq.n	8014f92 <HAL_RCC_OscConfig+0x17a>
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	68db      	ldr	r3, [r3, #12]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d101      	bne.n	8014f92 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8014f8e:	2301      	movs	r3, #1
 8014f90:	e310      	b.n	80155b4 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014f92:	f7fd ffc1 	bl	8012f18 <HAL_GetREVID>
 8014f96:	4602      	mov	r2, r0
 8014f98:	f241 0303 	movw	r3, #4099	; 0x1003
 8014f9c:	429a      	cmp	r2, r3
 8014f9e:	d80a      	bhi.n	8014fb6 <HAL_RCC_OscConfig+0x19e>
 8014fa0:	4b48      	ldr	r3, [pc, #288]	; (80150c4 <HAL_RCC_OscConfig+0x2ac>)
 8014fa2:	685b      	ldr	r3, [r3, #4]
 8014fa4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	691b      	ldr	r3, [r3, #16]
 8014fac:	031b      	lsls	r3, r3, #12
 8014fae:	4945      	ldr	r1, [pc, #276]	; (80150c4 <HAL_RCC_OscConfig+0x2ac>)
 8014fb0:	4313      	orrs	r3, r2
 8014fb2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8014fb4:	e060      	b.n	8015078 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014fb6:	4b43      	ldr	r3, [pc, #268]	; (80150c4 <HAL_RCC_OscConfig+0x2ac>)
 8014fb8:	685b      	ldr	r3, [r3, #4]
 8014fba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	691b      	ldr	r3, [r3, #16]
 8014fc2:	061b      	lsls	r3, r3, #24
 8014fc4:	493f      	ldr	r1, [pc, #252]	; (80150c4 <HAL_RCC_OscConfig+0x2ac>)
 8014fc6:	4313      	orrs	r3, r2
 8014fc8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8014fca:	e055      	b.n	8015078 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	68db      	ldr	r3, [r3, #12]
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d038      	beq.n	8015046 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8014fd4:	4b3b      	ldr	r3, [pc, #236]	; (80150c4 <HAL_RCC_OscConfig+0x2ac>)
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	f023 0219 	bic.w	r2, r3, #25
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	68db      	ldr	r3, [r3, #12]
 8014fe0:	4938      	ldr	r1, [pc, #224]	; (80150c4 <HAL_RCC_OscConfig+0x2ac>)
 8014fe2:	4313      	orrs	r3, r2
 8014fe4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014fe6:	f7fd ff69 	bl	8012ebc <HAL_GetTick>
 8014fea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8014fec:	e008      	b.n	8015000 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8014fee:	f7fd ff65 	bl	8012ebc <HAL_GetTick>
 8014ff2:	4602      	mov	r2, r0
 8014ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ff6:	1ad3      	subs	r3, r2, r3
 8014ff8:	2b02      	cmp	r3, #2
 8014ffa:	d901      	bls.n	8015000 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8014ffc:	2303      	movs	r3, #3
 8014ffe:	e2d9      	b.n	80155b4 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8015000:	4b30      	ldr	r3, [pc, #192]	; (80150c4 <HAL_RCC_OscConfig+0x2ac>)
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	f003 0304 	and.w	r3, r3, #4
 8015008:	2b00      	cmp	r3, #0
 801500a:	d0f0      	beq.n	8014fee <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801500c:	f7fd ff84 	bl	8012f18 <HAL_GetREVID>
 8015010:	4602      	mov	r2, r0
 8015012:	f241 0303 	movw	r3, #4099	; 0x1003
 8015016:	429a      	cmp	r2, r3
 8015018:	d80a      	bhi.n	8015030 <HAL_RCC_OscConfig+0x218>
 801501a:	4b2a      	ldr	r3, [pc, #168]	; (80150c4 <HAL_RCC_OscConfig+0x2ac>)
 801501c:	685b      	ldr	r3, [r3, #4]
 801501e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	691b      	ldr	r3, [r3, #16]
 8015026:	031b      	lsls	r3, r3, #12
 8015028:	4926      	ldr	r1, [pc, #152]	; (80150c4 <HAL_RCC_OscConfig+0x2ac>)
 801502a:	4313      	orrs	r3, r2
 801502c:	604b      	str	r3, [r1, #4]
 801502e:	e023      	b.n	8015078 <HAL_RCC_OscConfig+0x260>
 8015030:	4b24      	ldr	r3, [pc, #144]	; (80150c4 <HAL_RCC_OscConfig+0x2ac>)
 8015032:	685b      	ldr	r3, [r3, #4]
 8015034:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	691b      	ldr	r3, [r3, #16]
 801503c:	061b      	lsls	r3, r3, #24
 801503e:	4921      	ldr	r1, [pc, #132]	; (80150c4 <HAL_RCC_OscConfig+0x2ac>)
 8015040:	4313      	orrs	r3, r2
 8015042:	604b      	str	r3, [r1, #4]
 8015044:	e018      	b.n	8015078 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8015046:	4b1f      	ldr	r3, [pc, #124]	; (80150c4 <HAL_RCC_OscConfig+0x2ac>)
 8015048:	681b      	ldr	r3, [r3, #0]
 801504a:	4a1e      	ldr	r2, [pc, #120]	; (80150c4 <HAL_RCC_OscConfig+0x2ac>)
 801504c:	f023 0301 	bic.w	r3, r3, #1
 8015050:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015052:	f7fd ff33 	bl	8012ebc <HAL_GetTick>
 8015056:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8015058:	e008      	b.n	801506c <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801505a:	f7fd ff2f 	bl	8012ebc <HAL_GetTick>
 801505e:	4602      	mov	r2, r0
 8015060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015062:	1ad3      	subs	r3, r2, r3
 8015064:	2b02      	cmp	r3, #2
 8015066:	d901      	bls.n	801506c <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8015068:	2303      	movs	r3, #3
 801506a:	e2a3      	b.n	80155b4 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801506c:	4b15      	ldr	r3, [pc, #84]	; (80150c4 <HAL_RCC_OscConfig+0x2ac>)
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	f003 0304 	and.w	r3, r3, #4
 8015074:	2b00      	cmp	r3, #0
 8015076:	d1f0      	bne.n	801505a <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	f003 0310 	and.w	r3, r3, #16
 8015080:	2b00      	cmp	r3, #0
 8015082:	f000 8091 	beq.w	80151a8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8015086:	4b0f      	ldr	r3, [pc, #60]	; (80150c4 <HAL_RCC_OscConfig+0x2ac>)
 8015088:	691b      	ldr	r3, [r3, #16]
 801508a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801508e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8015090:	4b0c      	ldr	r3, [pc, #48]	; (80150c4 <HAL_RCC_OscConfig+0x2ac>)
 8015092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015094:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8015096:	69bb      	ldr	r3, [r7, #24]
 8015098:	2b08      	cmp	r3, #8
 801509a:	d007      	beq.n	80150ac <HAL_RCC_OscConfig+0x294>
 801509c:	69bb      	ldr	r3, [r7, #24]
 801509e:	2b18      	cmp	r3, #24
 80150a0:	d12f      	bne.n	8015102 <HAL_RCC_OscConfig+0x2ea>
 80150a2:	697b      	ldr	r3, [r7, #20]
 80150a4:	f003 0303 	and.w	r3, r3, #3
 80150a8:	2b01      	cmp	r3, #1
 80150aa:	d12a      	bne.n	8015102 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80150ac:	4b05      	ldr	r3, [pc, #20]	; (80150c4 <HAL_RCC_OscConfig+0x2ac>)
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d007      	beq.n	80150c8 <HAL_RCC_OscConfig+0x2b0>
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	69db      	ldr	r3, [r3, #28]
 80150bc:	2b80      	cmp	r3, #128	; 0x80
 80150be:	d003      	beq.n	80150c8 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 80150c0:	2301      	movs	r3, #1
 80150c2:	e277      	b.n	80155b4 <HAL_RCC_OscConfig+0x79c>
 80150c4:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80150c8:	f7fd ff26 	bl	8012f18 <HAL_GetREVID>
 80150cc:	4602      	mov	r2, r0
 80150ce:	f241 0303 	movw	r3, #4099	; 0x1003
 80150d2:	429a      	cmp	r2, r3
 80150d4:	d80a      	bhi.n	80150ec <HAL_RCC_OscConfig+0x2d4>
 80150d6:	4ba2      	ldr	r3, [pc, #648]	; (8015360 <HAL_RCC_OscConfig+0x548>)
 80150d8:	685b      	ldr	r3, [r3, #4]
 80150da:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	6a1b      	ldr	r3, [r3, #32]
 80150e2:	069b      	lsls	r3, r3, #26
 80150e4:	499e      	ldr	r1, [pc, #632]	; (8015360 <HAL_RCC_OscConfig+0x548>)
 80150e6:	4313      	orrs	r3, r2
 80150e8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80150ea:	e05d      	b.n	80151a8 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80150ec:	4b9c      	ldr	r3, [pc, #624]	; (8015360 <HAL_RCC_OscConfig+0x548>)
 80150ee:	68db      	ldr	r3, [r3, #12]
 80150f0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	6a1b      	ldr	r3, [r3, #32]
 80150f8:	061b      	lsls	r3, r3, #24
 80150fa:	4999      	ldr	r1, [pc, #612]	; (8015360 <HAL_RCC_OscConfig+0x548>)
 80150fc:	4313      	orrs	r3, r2
 80150fe:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8015100:	e052      	b.n	80151a8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	69db      	ldr	r3, [r3, #28]
 8015106:	2b00      	cmp	r3, #0
 8015108:	d035      	beq.n	8015176 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801510a:	4b95      	ldr	r3, [pc, #596]	; (8015360 <HAL_RCC_OscConfig+0x548>)
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	4a94      	ldr	r2, [pc, #592]	; (8015360 <HAL_RCC_OscConfig+0x548>)
 8015110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015114:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015116:	f7fd fed1 	bl	8012ebc <HAL_GetTick>
 801511a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801511c:	e008      	b.n	8015130 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 801511e:	f7fd fecd 	bl	8012ebc <HAL_GetTick>
 8015122:	4602      	mov	r2, r0
 8015124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015126:	1ad3      	subs	r3, r2, r3
 8015128:	2b02      	cmp	r3, #2
 801512a:	d901      	bls.n	8015130 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 801512c:	2303      	movs	r3, #3
 801512e:	e241      	b.n	80155b4 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8015130:	4b8b      	ldr	r3, [pc, #556]	; (8015360 <HAL_RCC_OscConfig+0x548>)
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015138:	2b00      	cmp	r3, #0
 801513a:	d0f0      	beq.n	801511e <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801513c:	f7fd feec 	bl	8012f18 <HAL_GetREVID>
 8015140:	4602      	mov	r2, r0
 8015142:	f241 0303 	movw	r3, #4099	; 0x1003
 8015146:	429a      	cmp	r2, r3
 8015148:	d80a      	bhi.n	8015160 <HAL_RCC_OscConfig+0x348>
 801514a:	4b85      	ldr	r3, [pc, #532]	; (8015360 <HAL_RCC_OscConfig+0x548>)
 801514c:	685b      	ldr	r3, [r3, #4]
 801514e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	6a1b      	ldr	r3, [r3, #32]
 8015156:	069b      	lsls	r3, r3, #26
 8015158:	4981      	ldr	r1, [pc, #516]	; (8015360 <HAL_RCC_OscConfig+0x548>)
 801515a:	4313      	orrs	r3, r2
 801515c:	604b      	str	r3, [r1, #4]
 801515e:	e023      	b.n	80151a8 <HAL_RCC_OscConfig+0x390>
 8015160:	4b7f      	ldr	r3, [pc, #508]	; (8015360 <HAL_RCC_OscConfig+0x548>)
 8015162:	68db      	ldr	r3, [r3, #12]
 8015164:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	6a1b      	ldr	r3, [r3, #32]
 801516c:	061b      	lsls	r3, r3, #24
 801516e:	497c      	ldr	r1, [pc, #496]	; (8015360 <HAL_RCC_OscConfig+0x548>)
 8015170:	4313      	orrs	r3, r2
 8015172:	60cb      	str	r3, [r1, #12]
 8015174:	e018      	b.n	80151a8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8015176:	4b7a      	ldr	r3, [pc, #488]	; (8015360 <HAL_RCC_OscConfig+0x548>)
 8015178:	681b      	ldr	r3, [r3, #0]
 801517a:	4a79      	ldr	r2, [pc, #484]	; (8015360 <HAL_RCC_OscConfig+0x548>)
 801517c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015182:	f7fd fe9b 	bl	8012ebc <HAL_GetTick>
 8015186:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8015188:	e008      	b.n	801519c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 801518a:	f7fd fe97 	bl	8012ebc <HAL_GetTick>
 801518e:	4602      	mov	r2, r0
 8015190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015192:	1ad3      	subs	r3, r2, r3
 8015194:	2b02      	cmp	r3, #2
 8015196:	d901      	bls.n	801519c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8015198:	2303      	movs	r3, #3
 801519a:	e20b      	b.n	80155b4 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801519c:	4b70      	ldr	r3, [pc, #448]	; (8015360 <HAL_RCC_OscConfig+0x548>)
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d1f0      	bne.n	801518a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	f003 0308 	and.w	r3, r3, #8
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d036      	beq.n	8015222 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	695b      	ldr	r3, [r3, #20]
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d019      	beq.n	80151f0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80151bc:	4b68      	ldr	r3, [pc, #416]	; (8015360 <HAL_RCC_OscConfig+0x548>)
 80151be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80151c0:	4a67      	ldr	r2, [pc, #412]	; (8015360 <HAL_RCC_OscConfig+0x548>)
 80151c2:	f043 0301 	orr.w	r3, r3, #1
 80151c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80151c8:	f7fd fe78 	bl	8012ebc <HAL_GetTick>
 80151cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80151ce:	e008      	b.n	80151e2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80151d0:	f7fd fe74 	bl	8012ebc <HAL_GetTick>
 80151d4:	4602      	mov	r2, r0
 80151d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151d8:	1ad3      	subs	r3, r2, r3
 80151da:	2b02      	cmp	r3, #2
 80151dc:	d901      	bls.n	80151e2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80151de:	2303      	movs	r3, #3
 80151e0:	e1e8      	b.n	80155b4 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80151e2:	4b5f      	ldr	r3, [pc, #380]	; (8015360 <HAL_RCC_OscConfig+0x548>)
 80151e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80151e6:	f003 0302 	and.w	r3, r3, #2
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d0f0      	beq.n	80151d0 <HAL_RCC_OscConfig+0x3b8>
 80151ee:	e018      	b.n	8015222 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80151f0:	4b5b      	ldr	r3, [pc, #364]	; (8015360 <HAL_RCC_OscConfig+0x548>)
 80151f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80151f4:	4a5a      	ldr	r2, [pc, #360]	; (8015360 <HAL_RCC_OscConfig+0x548>)
 80151f6:	f023 0301 	bic.w	r3, r3, #1
 80151fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80151fc:	f7fd fe5e 	bl	8012ebc <HAL_GetTick>
 8015200:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8015202:	e008      	b.n	8015216 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8015204:	f7fd fe5a 	bl	8012ebc <HAL_GetTick>
 8015208:	4602      	mov	r2, r0
 801520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801520c:	1ad3      	subs	r3, r2, r3
 801520e:	2b02      	cmp	r3, #2
 8015210:	d901      	bls.n	8015216 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8015212:	2303      	movs	r3, #3
 8015214:	e1ce      	b.n	80155b4 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8015216:	4b52      	ldr	r3, [pc, #328]	; (8015360 <HAL_RCC_OscConfig+0x548>)
 8015218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801521a:	f003 0302 	and.w	r3, r3, #2
 801521e:	2b00      	cmp	r3, #0
 8015220:	d1f0      	bne.n	8015204 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	f003 0320 	and.w	r3, r3, #32
 801522a:	2b00      	cmp	r3, #0
 801522c:	d036      	beq.n	801529c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	699b      	ldr	r3, [r3, #24]
 8015232:	2b00      	cmp	r3, #0
 8015234:	d019      	beq.n	801526a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8015236:	4b4a      	ldr	r3, [pc, #296]	; (8015360 <HAL_RCC_OscConfig+0x548>)
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	4a49      	ldr	r2, [pc, #292]	; (8015360 <HAL_RCC_OscConfig+0x548>)
 801523c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8015240:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8015242:	f7fd fe3b 	bl	8012ebc <HAL_GetTick>
 8015246:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8015248:	e008      	b.n	801525c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 801524a:	f7fd fe37 	bl	8012ebc <HAL_GetTick>
 801524e:	4602      	mov	r2, r0
 8015250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015252:	1ad3      	subs	r3, r2, r3
 8015254:	2b02      	cmp	r3, #2
 8015256:	d901      	bls.n	801525c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8015258:	2303      	movs	r3, #3
 801525a:	e1ab      	b.n	80155b4 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801525c:	4b40      	ldr	r3, [pc, #256]	; (8015360 <HAL_RCC_OscConfig+0x548>)
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015264:	2b00      	cmp	r3, #0
 8015266:	d0f0      	beq.n	801524a <HAL_RCC_OscConfig+0x432>
 8015268:	e018      	b.n	801529c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801526a:	4b3d      	ldr	r3, [pc, #244]	; (8015360 <HAL_RCC_OscConfig+0x548>)
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	4a3c      	ldr	r2, [pc, #240]	; (8015360 <HAL_RCC_OscConfig+0x548>)
 8015270:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015274:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8015276:	f7fd fe21 	bl	8012ebc <HAL_GetTick>
 801527a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801527c:	e008      	b.n	8015290 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 801527e:	f7fd fe1d 	bl	8012ebc <HAL_GetTick>
 8015282:	4602      	mov	r2, r0
 8015284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015286:	1ad3      	subs	r3, r2, r3
 8015288:	2b02      	cmp	r3, #2
 801528a:	d901      	bls.n	8015290 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 801528c:	2303      	movs	r3, #3
 801528e:	e191      	b.n	80155b4 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8015290:	4b33      	ldr	r3, [pc, #204]	; (8015360 <HAL_RCC_OscConfig+0x548>)
 8015292:	681b      	ldr	r3, [r3, #0]
 8015294:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015298:	2b00      	cmp	r3, #0
 801529a:	d1f0      	bne.n	801527e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	f003 0304 	and.w	r3, r3, #4
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	f000 8086 	beq.w	80153b6 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80152aa:	4b2e      	ldr	r3, [pc, #184]	; (8015364 <HAL_RCC_OscConfig+0x54c>)
 80152ac:	681b      	ldr	r3, [r3, #0]
 80152ae:	4a2d      	ldr	r2, [pc, #180]	; (8015364 <HAL_RCC_OscConfig+0x54c>)
 80152b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80152b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80152b6:	f7fd fe01 	bl	8012ebc <HAL_GetTick>
 80152ba:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80152bc:	e008      	b.n	80152d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80152be:	f7fd fdfd 	bl	8012ebc <HAL_GetTick>
 80152c2:	4602      	mov	r2, r0
 80152c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152c6:	1ad3      	subs	r3, r2, r3
 80152c8:	2b64      	cmp	r3, #100	; 0x64
 80152ca:	d901      	bls.n	80152d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80152cc:	2303      	movs	r3, #3
 80152ce:	e171      	b.n	80155b4 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80152d0:	4b24      	ldr	r3, [pc, #144]	; (8015364 <HAL_RCC_OscConfig+0x54c>)
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d0f0      	beq.n	80152be <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	689b      	ldr	r3, [r3, #8]
 80152e0:	2b01      	cmp	r3, #1
 80152e2:	d106      	bne.n	80152f2 <HAL_RCC_OscConfig+0x4da>
 80152e4:	4b1e      	ldr	r3, [pc, #120]	; (8015360 <HAL_RCC_OscConfig+0x548>)
 80152e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80152e8:	4a1d      	ldr	r2, [pc, #116]	; (8015360 <HAL_RCC_OscConfig+0x548>)
 80152ea:	f043 0301 	orr.w	r3, r3, #1
 80152ee:	6713      	str	r3, [r2, #112]	; 0x70
 80152f0:	e02d      	b.n	801534e <HAL_RCC_OscConfig+0x536>
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	689b      	ldr	r3, [r3, #8]
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d10c      	bne.n	8015314 <HAL_RCC_OscConfig+0x4fc>
 80152fa:	4b19      	ldr	r3, [pc, #100]	; (8015360 <HAL_RCC_OscConfig+0x548>)
 80152fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80152fe:	4a18      	ldr	r2, [pc, #96]	; (8015360 <HAL_RCC_OscConfig+0x548>)
 8015300:	f023 0301 	bic.w	r3, r3, #1
 8015304:	6713      	str	r3, [r2, #112]	; 0x70
 8015306:	4b16      	ldr	r3, [pc, #88]	; (8015360 <HAL_RCC_OscConfig+0x548>)
 8015308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801530a:	4a15      	ldr	r2, [pc, #84]	; (8015360 <HAL_RCC_OscConfig+0x548>)
 801530c:	f023 0304 	bic.w	r3, r3, #4
 8015310:	6713      	str	r3, [r2, #112]	; 0x70
 8015312:	e01c      	b.n	801534e <HAL_RCC_OscConfig+0x536>
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	689b      	ldr	r3, [r3, #8]
 8015318:	2b05      	cmp	r3, #5
 801531a:	d10c      	bne.n	8015336 <HAL_RCC_OscConfig+0x51e>
 801531c:	4b10      	ldr	r3, [pc, #64]	; (8015360 <HAL_RCC_OscConfig+0x548>)
 801531e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015320:	4a0f      	ldr	r2, [pc, #60]	; (8015360 <HAL_RCC_OscConfig+0x548>)
 8015322:	f043 0304 	orr.w	r3, r3, #4
 8015326:	6713      	str	r3, [r2, #112]	; 0x70
 8015328:	4b0d      	ldr	r3, [pc, #52]	; (8015360 <HAL_RCC_OscConfig+0x548>)
 801532a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801532c:	4a0c      	ldr	r2, [pc, #48]	; (8015360 <HAL_RCC_OscConfig+0x548>)
 801532e:	f043 0301 	orr.w	r3, r3, #1
 8015332:	6713      	str	r3, [r2, #112]	; 0x70
 8015334:	e00b      	b.n	801534e <HAL_RCC_OscConfig+0x536>
 8015336:	4b0a      	ldr	r3, [pc, #40]	; (8015360 <HAL_RCC_OscConfig+0x548>)
 8015338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801533a:	4a09      	ldr	r2, [pc, #36]	; (8015360 <HAL_RCC_OscConfig+0x548>)
 801533c:	f023 0301 	bic.w	r3, r3, #1
 8015340:	6713      	str	r3, [r2, #112]	; 0x70
 8015342:	4b07      	ldr	r3, [pc, #28]	; (8015360 <HAL_RCC_OscConfig+0x548>)
 8015344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015346:	4a06      	ldr	r2, [pc, #24]	; (8015360 <HAL_RCC_OscConfig+0x548>)
 8015348:	f023 0304 	bic.w	r3, r3, #4
 801534c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	689b      	ldr	r3, [r3, #8]
 8015352:	2b00      	cmp	r3, #0
 8015354:	d01a      	beq.n	801538c <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015356:	f7fd fdb1 	bl	8012ebc <HAL_GetTick>
 801535a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801535c:	e00f      	b.n	801537e <HAL_RCC_OscConfig+0x566>
 801535e:	bf00      	nop
 8015360:	58024400 	.word	0x58024400
 8015364:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015368:	f7fd fda8 	bl	8012ebc <HAL_GetTick>
 801536c:	4602      	mov	r2, r0
 801536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015370:	1ad3      	subs	r3, r2, r3
 8015372:	f241 3288 	movw	r2, #5000	; 0x1388
 8015376:	4293      	cmp	r3, r2
 8015378:	d901      	bls.n	801537e <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 801537a:	2303      	movs	r3, #3
 801537c:	e11a      	b.n	80155b4 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801537e:	4b8f      	ldr	r3, [pc, #572]	; (80155bc <HAL_RCC_OscConfig+0x7a4>)
 8015380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015382:	f003 0302 	and.w	r3, r3, #2
 8015386:	2b00      	cmp	r3, #0
 8015388:	d0ee      	beq.n	8015368 <HAL_RCC_OscConfig+0x550>
 801538a:	e014      	b.n	80153b6 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801538c:	f7fd fd96 	bl	8012ebc <HAL_GetTick>
 8015390:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8015392:	e00a      	b.n	80153aa <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015394:	f7fd fd92 	bl	8012ebc <HAL_GetTick>
 8015398:	4602      	mov	r2, r0
 801539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801539c:	1ad3      	subs	r3, r2, r3
 801539e:	f241 3288 	movw	r2, #5000	; 0x1388
 80153a2:	4293      	cmp	r3, r2
 80153a4:	d901      	bls.n	80153aa <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 80153a6:	2303      	movs	r3, #3
 80153a8:	e104      	b.n	80155b4 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80153aa:	4b84      	ldr	r3, [pc, #528]	; (80155bc <HAL_RCC_OscConfig+0x7a4>)
 80153ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80153ae:	f003 0302 	and.w	r3, r3, #2
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	d1ee      	bne.n	8015394 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	f000 80f9 	beq.w	80155b2 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80153c0:	4b7e      	ldr	r3, [pc, #504]	; (80155bc <HAL_RCC_OscConfig+0x7a4>)
 80153c2:	691b      	ldr	r3, [r3, #16]
 80153c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80153c8:	2b18      	cmp	r3, #24
 80153ca:	f000 80b4 	beq.w	8015536 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153d2:	2b02      	cmp	r3, #2
 80153d4:	f040 8095 	bne.w	8015502 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80153d8:	4b78      	ldr	r3, [pc, #480]	; (80155bc <HAL_RCC_OscConfig+0x7a4>)
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	4a77      	ldr	r2, [pc, #476]	; (80155bc <HAL_RCC_OscConfig+0x7a4>)
 80153de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80153e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80153e4:	f7fd fd6a 	bl	8012ebc <HAL_GetTick>
 80153e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80153ea:	e008      	b.n	80153fe <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80153ec:	f7fd fd66 	bl	8012ebc <HAL_GetTick>
 80153f0:	4602      	mov	r2, r0
 80153f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153f4:	1ad3      	subs	r3, r2, r3
 80153f6:	2b02      	cmp	r3, #2
 80153f8:	d901      	bls.n	80153fe <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80153fa:	2303      	movs	r3, #3
 80153fc:	e0da      	b.n	80155b4 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80153fe:	4b6f      	ldr	r3, [pc, #444]	; (80155bc <HAL_RCC_OscConfig+0x7a4>)
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015406:	2b00      	cmp	r3, #0
 8015408:	d1f0      	bne.n	80153ec <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801540a:	4b6c      	ldr	r3, [pc, #432]	; (80155bc <HAL_RCC_OscConfig+0x7a4>)
 801540c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801540e:	4b6c      	ldr	r3, [pc, #432]	; (80155c0 <HAL_RCC_OscConfig+0x7a8>)
 8015410:	4013      	ands	r3, r2
 8015412:	687a      	ldr	r2, [r7, #4]
 8015414:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8015416:	687a      	ldr	r2, [r7, #4]
 8015418:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801541a:	0112      	lsls	r2, r2, #4
 801541c:	430a      	orrs	r2, r1
 801541e:	4967      	ldr	r1, [pc, #412]	; (80155bc <HAL_RCC_OscConfig+0x7a4>)
 8015420:	4313      	orrs	r3, r2
 8015422:	628b      	str	r3, [r1, #40]	; 0x28
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015428:	3b01      	subs	r3, #1
 801542a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015432:	3b01      	subs	r3, #1
 8015434:	025b      	lsls	r3, r3, #9
 8015436:	b29b      	uxth	r3, r3
 8015438:	431a      	orrs	r2, r3
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801543e:	3b01      	subs	r3, #1
 8015440:	041b      	lsls	r3, r3, #16
 8015442:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8015446:	431a      	orrs	r2, r3
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801544c:	3b01      	subs	r3, #1
 801544e:	061b      	lsls	r3, r3, #24
 8015450:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8015454:	4959      	ldr	r1, [pc, #356]	; (80155bc <HAL_RCC_OscConfig+0x7a4>)
 8015456:	4313      	orrs	r3, r2
 8015458:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 801545a:	4b58      	ldr	r3, [pc, #352]	; (80155bc <HAL_RCC_OscConfig+0x7a4>)
 801545c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801545e:	4a57      	ldr	r2, [pc, #348]	; (80155bc <HAL_RCC_OscConfig+0x7a4>)
 8015460:	f023 0301 	bic.w	r3, r3, #1
 8015464:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8015466:	4b55      	ldr	r3, [pc, #340]	; (80155bc <HAL_RCC_OscConfig+0x7a4>)
 8015468:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801546a:	4b56      	ldr	r3, [pc, #344]	; (80155c4 <HAL_RCC_OscConfig+0x7ac>)
 801546c:	4013      	ands	r3, r2
 801546e:	687a      	ldr	r2, [r7, #4]
 8015470:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8015472:	00d2      	lsls	r2, r2, #3
 8015474:	4951      	ldr	r1, [pc, #324]	; (80155bc <HAL_RCC_OscConfig+0x7a4>)
 8015476:	4313      	orrs	r3, r2
 8015478:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801547a:	4b50      	ldr	r3, [pc, #320]	; (80155bc <HAL_RCC_OscConfig+0x7a4>)
 801547c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801547e:	f023 020c 	bic.w	r2, r3, #12
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015486:	494d      	ldr	r1, [pc, #308]	; (80155bc <HAL_RCC_OscConfig+0x7a4>)
 8015488:	4313      	orrs	r3, r2
 801548a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801548c:	4b4b      	ldr	r3, [pc, #300]	; (80155bc <HAL_RCC_OscConfig+0x7a4>)
 801548e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015490:	f023 0202 	bic.w	r2, r3, #2
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015498:	4948      	ldr	r1, [pc, #288]	; (80155bc <HAL_RCC_OscConfig+0x7a4>)
 801549a:	4313      	orrs	r3, r2
 801549c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801549e:	4b47      	ldr	r3, [pc, #284]	; (80155bc <HAL_RCC_OscConfig+0x7a4>)
 80154a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154a2:	4a46      	ldr	r2, [pc, #280]	; (80155bc <HAL_RCC_OscConfig+0x7a4>)
 80154a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80154a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80154aa:	4b44      	ldr	r3, [pc, #272]	; (80155bc <HAL_RCC_OscConfig+0x7a4>)
 80154ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154ae:	4a43      	ldr	r2, [pc, #268]	; (80155bc <HAL_RCC_OscConfig+0x7a4>)
 80154b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80154b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80154b6:	4b41      	ldr	r3, [pc, #260]	; (80155bc <HAL_RCC_OscConfig+0x7a4>)
 80154b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154ba:	4a40      	ldr	r2, [pc, #256]	; (80155bc <HAL_RCC_OscConfig+0x7a4>)
 80154bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80154c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80154c2:	4b3e      	ldr	r3, [pc, #248]	; (80155bc <HAL_RCC_OscConfig+0x7a4>)
 80154c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154c6:	4a3d      	ldr	r2, [pc, #244]	; (80155bc <HAL_RCC_OscConfig+0x7a4>)
 80154c8:	f043 0301 	orr.w	r3, r3, #1
 80154cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80154ce:	4b3b      	ldr	r3, [pc, #236]	; (80155bc <HAL_RCC_OscConfig+0x7a4>)
 80154d0:	681b      	ldr	r3, [r3, #0]
 80154d2:	4a3a      	ldr	r2, [pc, #232]	; (80155bc <HAL_RCC_OscConfig+0x7a4>)
 80154d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80154d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80154da:	f7fd fcef 	bl	8012ebc <HAL_GetTick>
 80154de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80154e0:	e008      	b.n	80154f4 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80154e2:	f7fd fceb 	bl	8012ebc <HAL_GetTick>
 80154e6:	4602      	mov	r2, r0
 80154e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154ea:	1ad3      	subs	r3, r2, r3
 80154ec:	2b02      	cmp	r3, #2
 80154ee:	d901      	bls.n	80154f4 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 80154f0:	2303      	movs	r3, #3
 80154f2:	e05f      	b.n	80155b4 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80154f4:	4b31      	ldr	r3, [pc, #196]	; (80155bc <HAL_RCC_OscConfig+0x7a4>)
 80154f6:	681b      	ldr	r3, [r3, #0]
 80154f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d0f0      	beq.n	80154e2 <HAL_RCC_OscConfig+0x6ca>
 8015500:	e057      	b.n	80155b2 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8015502:	4b2e      	ldr	r3, [pc, #184]	; (80155bc <HAL_RCC_OscConfig+0x7a4>)
 8015504:	681b      	ldr	r3, [r3, #0]
 8015506:	4a2d      	ldr	r2, [pc, #180]	; (80155bc <HAL_RCC_OscConfig+0x7a4>)
 8015508:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801550c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801550e:	f7fd fcd5 	bl	8012ebc <HAL_GetTick>
 8015512:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8015514:	e008      	b.n	8015528 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8015516:	f7fd fcd1 	bl	8012ebc <HAL_GetTick>
 801551a:	4602      	mov	r2, r0
 801551c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801551e:	1ad3      	subs	r3, r2, r3
 8015520:	2b02      	cmp	r3, #2
 8015522:	d901      	bls.n	8015528 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8015524:	2303      	movs	r3, #3
 8015526:	e045      	b.n	80155b4 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8015528:	4b24      	ldr	r3, [pc, #144]	; (80155bc <HAL_RCC_OscConfig+0x7a4>)
 801552a:	681b      	ldr	r3, [r3, #0]
 801552c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015530:	2b00      	cmp	r3, #0
 8015532:	d1f0      	bne.n	8015516 <HAL_RCC_OscConfig+0x6fe>
 8015534:	e03d      	b.n	80155b2 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8015536:	4b21      	ldr	r3, [pc, #132]	; (80155bc <HAL_RCC_OscConfig+0x7a4>)
 8015538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801553a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801553c:	4b1f      	ldr	r3, [pc, #124]	; (80155bc <HAL_RCC_OscConfig+0x7a4>)
 801553e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015540:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015546:	2b01      	cmp	r3, #1
 8015548:	d031      	beq.n	80155ae <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801554a:	693b      	ldr	r3, [r7, #16]
 801554c:	f003 0203 	and.w	r2, r3, #3
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8015554:	429a      	cmp	r2, r3
 8015556:	d12a      	bne.n	80155ae <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8015558:	693b      	ldr	r3, [r7, #16]
 801555a:	091b      	lsrs	r3, r3, #4
 801555c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8015564:	429a      	cmp	r2, r3
 8015566:	d122      	bne.n	80155ae <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8015568:	68fb      	ldr	r3, [r7, #12]
 801556a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015572:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8015574:	429a      	cmp	r2, r3
 8015576:	d11a      	bne.n	80155ae <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8015578:	68fb      	ldr	r3, [r7, #12]
 801557a:	0a5b      	lsrs	r3, r3, #9
 801557c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015584:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8015586:	429a      	cmp	r2, r3
 8015588:	d111      	bne.n	80155ae <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	0c1b      	lsrs	r3, r3, #16
 801558e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015596:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8015598:	429a      	cmp	r2, r3
 801559a:	d108      	bne.n	80155ae <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	0e1b      	lsrs	r3, r3, #24
 80155a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80155a8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80155aa:	429a      	cmp	r2, r3
 80155ac:	d001      	beq.n	80155b2 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 80155ae:	2301      	movs	r3, #1
 80155b0:	e000      	b.n	80155b4 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 80155b2:	2300      	movs	r3, #0
}
 80155b4:	4618      	mov	r0, r3
 80155b6:	3730      	adds	r7, #48	; 0x30
 80155b8:	46bd      	mov	sp, r7
 80155ba:	bd80      	pop	{r7, pc}
 80155bc:	58024400 	.word	0x58024400
 80155c0:	fffffc0c 	.word	0xfffffc0c
 80155c4:	ffff0007 	.word	0xffff0007

080155c8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80155c8:	b580      	push	{r7, lr}
 80155ca:	b086      	sub	sp, #24
 80155cc:	af00      	add	r7, sp, #0
 80155ce:	6078      	str	r0, [r7, #4]
 80155d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d101      	bne.n	80155dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80155d8:	2301      	movs	r3, #1
 80155da:	e19c      	b.n	8015916 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80155dc:	4b8a      	ldr	r3, [pc, #552]	; (8015808 <HAL_RCC_ClockConfig+0x240>)
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	f003 030f 	and.w	r3, r3, #15
 80155e4:	683a      	ldr	r2, [r7, #0]
 80155e6:	429a      	cmp	r2, r3
 80155e8:	d910      	bls.n	801560c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80155ea:	4b87      	ldr	r3, [pc, #540]	; (8015808 <HAL_RCC_ClockConfig+0x240>)
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	f023 020f 	bic.w	r2, r3, #15
 80155f2:	4985      	ldr	r1, [pc, #532]	; (8015808 <HAL_RCC_ClockConfig+0x240>)
 80155f4:	683b      	ldr	r3, [r7, #0]
 80155f6:	4313      	orrs	r3, r2
 80155f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80155fa:	4b83      	ldr	r3, [pc, #524]	; (8015808 <HAL_RCC_ClockConfig+0x240>)
 80155fc:	681b      	ldr	r3, [r3, #0]
 80155fe:	f003 030f 	and.w	r3, r3, #15
 8015602:	683a      	ldr	r2, [r7, #0]
 8015604:	429a      	cmp	r2, r3
 8015606:	d001      	beq.n	801560c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8015608:	2301      	movs	r3, #1
 801560a:	e184      	b.n	8015916 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	681b      	ldr	r3, [r3, #0]
 8015610:	f003 0304 	and.w	r3, r3, #4
 8015614:	2b00      	cmp	r3, #0
 8015616:	d010      	beq.n	801563a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	691a      	ldr	r2, [r3, #16]
 801561c:	4b7b      	ldr	r3, [pc, #492]	; (801580c <HAL_RCC_ClockConfig+0x244>)
 801561e:	699b      	ldr	r3, [r3, #24]
 8015620:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8015624:	429a      	cmp	r2, r3
 8015626:	d908      	bls.n	801563a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8015628:	4b78      	ldr	r3, [pc, #480]	; (801580c <HAL_RCC_ClockConfig+0x244>)
 801562a:	699b      	ldr	r3, [r3, #24]
 801562c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	691b      	ldr	r3, [r3, #16]
 8015634:	4975      	ldr	r1, [pc, #468]	; (801580c <HAL_RCC_ClockConfig+0x244>)
 8015636:	4313      	orrs	r3, r2
 8015638:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	681b      	ldr	r3, [r3, #0]
 801563e:	f003 0308 	and.w	r3, r3, #8
 8015642:	2b00      	cmp	r3, #0
 8015644:	d010      	beq.n	8015668 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	695a      	ldr	r2, [r3, #20]
 801564a:	4b70      	ldr	r3, [pc, #448]	; (801580c <HAL_RCC_ClockConfig+0x244>)
 801564c:	69db      	ldr	r3, [r3, #28]
 801564e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8015652:	429a      	cmp	r2, r3
 8015654:	d908      	bls.n	8015668 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8015656:	4b6d      	ldr	r3, [pc, #436]	; (801580c <HAL_RCC_ClockConfig+0x244>)
 8015658:	69db      	ldr	r3, [r3, #28]
 801565a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	695b      	ldr	r3, [r3, #20]
 8015662:	496a      	ldr	r1, [pc, #424]	; (801580c <HAL_RCC_ClockConfig+0x244>)
 8015664:	4313      	orrs	r3, r2
 8015666:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	681b      	ldr	r3, [r3, #0]
 801566c:	f003 0310 	and.w	r3, r3, #16
 8015670:	2b00      	cmp	r3, #0
 8015672:	d010      	beq.n	8015696 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	699a      	ldr	r2, [r3, #24]
 8015678:	4b64      	ldr	r3, [pc, #400]	; (801580c <HAL_RCC_ClockConfig+0x244>)
 801567a:	69db      	ldr	r3, [r3, #28]
 801567c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015680:	429a      	cmp	r2, r3
 8015682:	d908      	bls.n	8015696 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8015684:	4b61      	ldr	r3, [pc, #388]	; (801580c <HAL_RCC_ClockConfig+0x244>)
 8015686:	69db      	ldr	r3, [r3, #28]
 8015688:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	699b      	ldr	r3, [r3, #24]
 8015690:	495e      	ldr	r1, [pc, #376]	; (801580c <HAL_RCC_ClockConfig+0x244>)
 8015692:	4313      	orrs	r3, r2
 8015694:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	681b      	ldr	r3, [r3, #0]
 801569a:	f003 0320 	and.w	r3, r3, #32
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d010      	beq.n	80156c4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	69da      	ldr	r2, [r3, #28]
 80156a6:	4b59      	ldr	r3, [pc, #356]	; (801580c <HAL_RCC_ClockConfig+0x244>)
 80156a8:	6a1b      	ldr	r3, [r3, #32]
 80156aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80156ae:	429a      	cmp	r2, r3
 80156b0:	d908      	bls.n	80156c4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80156b2:	4b56      	ldr	r3, [pc, #344]	; (801580c <HAL_RCC_ClockConfig+0x244>)
 80156b4:	6a1b      	ldr	r3, [r3, #32]
 80156b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	69db      	ldr	r3, [r3, #28]
 80156be:	4953      	ldr	r1, [pc, #332]	; (801580c <HAL_RCC_ClockConfig+0x244>)
 80156c0:	4313      	orrs	r3, r2
 80156c2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	681b      	ldr	r3, [r3, #0]
 80156c8:	f003 0302 	and.w	r3, r3, #2
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d010      	beq.n	80156f2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	68da      	ldr	r2, [r3, #12]
 80156d4:	4b4d      	ldr	r3, [pc, #308]	; (801580c <HAL_RCC_ClockConfig+0x244>)
 80156d6:	699b      	ldr	r3, [r3, #24]
 80156d8:	f003 030f 	and.w	r3, r3, #15
 80156dc:	429a      	cmp	r2, r3
 80156de:	d908      	bls.n	80156f2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80156e0:	4b4a      	ldr	r3, [pc, #296]	; (801580c <HAL_RCC_ClockConfig+0x244>)
 80156e2:	699b      	ldr	r3, [r3, #24]
 80156e4:	f023 020f 	bic.w	r2, r3, #15
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	68db      	ldr	r3, [r3, #12]
 80156ec:	4947      	ldr	r1, [pc, #284]	; (801580c <HAL_RCC_ClockConfig+0x244>)
 80156ee:	4313      	orrs	r3, r2
 80156f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	f003 0301 	and.w	r3, r3, #1
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d055      	beq.n	80157aa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80156fe:	4b43      	ldr	r3, [pc, #268]	; (801580c <HAL_RCC_ClockConfig+0x244>)
 8015700:	699b      	ldr	r3, [r3, #24]
 8015702:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	689b      	ldr	r3, [r3, #8]
 801570a:	4940      	ldr	r1, [pc, #256]	; (801580c <HAL_RCC_ClockConfig+0x244>)
 801570c:	4313      	orrs	r3, r2
 801570e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	685b      	ldr	r3, [r3, #4]
 8015714:	2b02      	cmp	r3, #2
 8015716:	d107      	bne.n	8015728 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8015718:	4b3c      	ldr	r3, [pc, #240]	; (801580c <HAL_RCC_ClockConfig+0x244>)
 801571a:	681b      	ldr	r3, [r3, #0]
 801571c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015720:	2b00      	cmp	r3, #0
 8015722:	d121      	bne.n	8015768 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8015724:	2301      	movs	r3, #1
 8015726:	e0f6      	b.n	8015916 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	685b      	ldr	r3, [r3, #4]
 801572c:	2b03      	cmp	r3, #3
 801572e:	d107      	bne.n	8015740 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8015730:	4b36      	ldr	r3, [pc, #216]	; (801580c <HAL_RCC_ClockConfig+0x244>)
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015738:	2b00      	cmp	r3, #0
 801573a:	d115      	bne.n	8015768 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 801573c:	2301      	movs	r3, #1
 801573e:	e0ea      	b.n	8015916 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	685b      	ldr	r3, [r3, #4]
 8015744:	2b01      	cmp	r3, #1
 8015746:	d107      	bne.n	8015758 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8015748:	4b30      	ldr	r3, [pc, #192]	; (801580c <HAL_RCC_ClockConfig+0x244>)
 801574a:	681b      	ldr	r3, [r3, #0]
 801574c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015750:	2b00      	cmp	r3, #0
 8015752:	d109      	bne.n	8015768 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8015754:	2301      	movs	r3, #1
 8015756:	e0de      	b.n	8015916 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8015758:	4b2c      	ldr	r3, [pc, #176]	; (801580c <HAL_RCC_ClockConfig+0x244>)
 801575a:	681b      	ldr	r3, [r3, #0]
 801575c:	f003 0304 	and.w	r3, r3, #4
 8015760:	2b00      	cmp	r3, #0
 8015762:	d101      	bne.n	8015768 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8015764:	2301      	movs	r3, #1
 8015766:	e0d6      	b.n	8015916 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8015768:	4b28      	ldr	r3, [pc, #160]	; (801580c <HAL_RCC_ClockConfig+0x244>)
 801576a:	691b      	ldr	r3, [r3, #16]
 801576c:	f023 0207 	bic.w	r2, r3, #7
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	685b      	ldr	r3, [r3, #4]
 8015774:	4925      	ldr	r1, [pc, #148]	; (801580c <HAL_RCC_ClockConfig+0x244>)
 8015776:	4313      	orrs	r3, r2
 8015778:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801577a:	f7fd fb9f 	bl	8012ebc <HAL_GetTick>
 801577e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8015780:	e00a      	b.n	8015798 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015782:	f7fd fb9b 	bl	8012ebc <HAL_GetTick>
 8015786:	4602      	mov	r2, r0
 8015788:	697b      	ldr	r3, [r7, #20]
 801578a:	1ad3      	subs	r3, r2, r3
 801578c:	f241 3288 	movw	r2, #5000	; 0x1388
 8015790:	4293      	cmp	r3, r2
 8015792:	d901      	bls.n	8015798 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8015794:	2303      	movs	r3, #3
 8015796:	e0be      	b.n	8015916 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8015798:	4b1c      	ldr	r3, [pc, #112]	; (801580c <HAL_RCC_ClockConfig+0x244>)
 801579a:	691b      	ldr	r3, [r3, #16]
 801579c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	685b      	ldr	r3, [r3, #4]
 80157a4:	00db      	lsls	r3, r3, #3
 80157a6:	429a      	cmp	r2, r3
 80157a8:	d1eb      	bne.n	8015782 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	f003 0302 	and.w	r3, r3, #2
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d010      	beq.n	80157d8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	68da      	ldr	r2, [r3, #12]
 80157ba:	4b14      	ldr	r3, [pc, #80]	; (801580c <HAL_RCC_ClockConfig+0x244>)
 80157bc:	699b      	ldr	r3, [r3, #24]
 80157be:	f003 030f 	and.w	r3, r3, #15
 80157c2:	429a      	cmp	r2, r3
 80157c4:	d208      	bcs.n	80157d8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80157c6:	4b11      	ldr	r3, [pc, #68]	; (801580c <HAL_RCC_ClockConfig+0x244>)
 80157c8:	699b      	ldr	r3, [r3, #24]
 80157ca:	f023 020f 	bic.w	r2, r3, #15
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	68db      	ldr	r3, [r3, #12]
 80157d2:	490e      	ldr	r1, [pc, #56]	; (801580c <HAL_RCC_ClockConfig+0x244>)
 80157d4:	4313      	orrs	r3, r2
 80157d6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80157d8:	4b0b      	ldr	r3, [pc, #44]	; (8015808 <HAL_RCC_ClockConfig+0x240>)
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	f003 030f 	and.w	r3, r3, #15
 80157e0:	683a      	ldr	r2, [r7, #0]
 80157e2:	429a      	cmp	r2, r3
 80157e4:	d214      	bcs.n	8015810 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80157e6:	4b08      	ldr	r3, [pc, #32]	; (8015808 <HAL_RCC_ClockConfig+0x240>)
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	f023 020f 	bic.w	r2, r3, #15
 80157ee:	4906      	ldr	r1, [pc, #24]	; (8015808 <HAL_RCC_ClockConfig+0x240>)
 80157f0:	683b      	ldr	r3, [r7, #0]
 80157f2:	4313      	orrs	r3, r2
 80157f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80157f6:	4b04      	ldr	r3, [pc, #16]	; (8015808 <HAL_RCC_ClockConfig+0x240>)
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	f003 030f 	and.w	r3, r3, #15
 80157fe:	683a      	ldr	r2, [r7, #0]
 8015800:	429a      	cmp	r2, r3
 8015802:	d005      	beq.n	8015810 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8015804:	2301      	movs	r3, #1
 8015806:	e086      	b.n	8015916 <HAL_RCC_ClockConfig+0x34e>
 8015808:	52002000 	.word	0x52002000
 801580c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	f003 0304 	and.w	r3, r3, #4
 8015818:	2b00      	cmp	r3, #0
 801581a:	d010      	beq.n	801583e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	691a      	ldr	r2, [r3, #16]
 8015820:	4b3f      	ldr	r3, [pc, #252]	; (8015920 <HAL_RCC_ClockConfig+0x358>)
 8015822:	699b      	ldr	r3, [r3, #24]
 8015824:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8015828:	429a      	cmp	r2, r3
 801582a:	d208      	bcs.n	801583e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801582c:	4b3c      	ldr	r3, [pc, #240]	; (8015920 <HAL_RCC_ClockConfig+0x358>)
 801582e:	699b      	ldr	r3, [r3, #24]
 8015830:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	691b      	ldr	r3, [r3, #16]
 8015838:	4939      	ldr	r1, [pc, #228]	; (8015920 <HAL_RCC_ClockConfig+0x358>)
 801583a:	4313      	orrs	r3, r2
 801583c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	681b      	ldr	r3, [r3, #0]
 8015842:	f003 0308 	and.w	r3, r3, #8
 8015846:	2b00      	cmp	r3, #0
 8015848:	d010      	beq.n	801586c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	695a      	ldr	r2, [r3, #20]
 801584e:	4b34      	ldr	r3, [pc, #208]	; (8015920 <HAL_RCC_ClockConfig+0x358>)
 8015850:	69db      	ldr	r3, [r3, #28]
 8015852:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8015856:	429a      	cmp	r2, r3
 8015858:	d208      	bcs.n	801586c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801585a:	4b31      	ldr	r3, [pc, #196]	; (8015920 <HAL_RCC_ClockConfig+0x358>)
 801585c:	69db      	ldr	r3, [r3, #28]
 801585e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	695b      	ldr	r3, [r3, #20]
 8015866:	492e      	ldr	r1, [pc, #184]	; (8015920 <HAL_RCC_ClockConfig+0x358>)
 8015868:	4313      	orrs	r3, r2
 801586a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	f003 0310 	and.w	r3, r3, #16
 8015874:	2b00      	cmp	r3, #0
 8015876:	d010      	beq.n	801589a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	699a      	ldr	r2, [r3, #24]
 801587c:	4b28      	ldr	r3, [pc, #160]	; (8015920 <HAL_RCC_ClockConfig+0x358>)
 801587e:	69db      	ldr	r3, [r3, #28]
 8015880:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015884:	429a      	cmp	r2, r3
 8015886:	d208      	bcs.n	801589a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8015888:	4b25      	ldr	r3, [pc, #148]	; (8015920 <HAL_RCC_ClockConfig+0x358>)
 801588a:	69db      	ldr	r3, [r3, #28]
 801588c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	699b      	ldr	r3, [r3, #24]
 8015894:	4922      	ldr	r1, [pc, #136]	; (8015920 <HAL_RCC_ClockConfig+0x358>)
 8015896:	4313      	orrs	r3, r2
 8015898:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	681b      	ldr	r3, [r3, #0]
 801589e:	f003 0320 	and.w	r3, r3, #32
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d010      	beq.n	80158c8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	69da      	ldr	r2, [r3, #28]
 80158aa:	4b1d      	ldr	r3, [pc, #116]	; (8015920 <HAL_RCC_ClockConfig+0x358>)
 80158ac:	6a1b      	ldr	r3, [r3, #32]
 80158ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80158b2:	429a      	cmp	r2, r3
 80158b4:	d208      	bcs.n	80158c8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80158b6:	4b1a      	ldr	r3, [pc, #104]	; (8015920 <HAL_RCC_ClockConfig+0x358>)
 80158b8:	6a1b      	ldr	r3, [r3, #32]
 80158ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	69db      	ldr	r3, [r3, #28]
 80158c2:	4917      	ldr	r1, [pc, #92]	; (8015920 <HAL_RCC_ClockConfig+0x358>)
 80158c4:	4313      	orrs	r3, r2
 80158c6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80158c8:	f000 f834 	bl	8015934 <HAL_RCC_GetSysClockFreq>
 80158cc:	4601      	mov	r1, r0
 80158ce:	4b14      	ldr	r3, [pc, #80]	; (8015920 <HAL_RCC_ClockConfig+0x358>)
 80158d0:	699b      	ldr	r3, [r3, #24]
 80158d2:	0a1b      	lsrs	r3, r3, #8
 80158d4:	f003 030f 	and.w	r3, r3, #15
 80158d8:	4a12      	ldr	r2, [pc, #72]	; (8015924 <HAL_RCC_ClockConfig+0x35c>)
 80158da:	5cd3      	ldrb	r3, [r2, r3]
 80158dc:	f003 031f 	and.w	r3, r3, #31
 80158e0:	fa21 f303 	lsr.w	r3, r1, r3
 80158e4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80158e6:	4b0e      	ldr	r3, [pc, #56]	; (8015920 <HAL_RCC_ClockConfig+0x358>)
 80158e8:	699b      	ldr	r3, [r3, #24]
 80158ea:	f003 030f 	and.w	r3, r3, #15
 80158ee:	4a0d      	ldr	r2, [pc, #52]	; (8015924 <HAL_RCC_ClockConfig+0x35c>)
 80158f0:	5cd3      	ldrb	r3, [r2, r3]
 80158f2:	f003 031f 	and.w	r3, r3, #31
 80158f6:	693a      	ldr	r2, [r7, #16]
 80158f8:	fa22 f303 	lsr.w	r3, r2, r3
 80158fc:	4a0a      	ldr	r2, [pc, #40]	; (8015928 <HAL_RCC_ClockConfig+0x360>)
 80158fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8015900:	4a0a      	ldr	r2, [pc, #40]	; (801592c <HAL_RCC_ClockConfig+0x364>)
 8015902:	693b      	ldr	r3, [r7, #16]
 8015904:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8015906:	4b0a      	ldr	r3, [pc, #40]	; (8015930 <HAL_RCC_ClockConfig+0x368>)
 8015908:	681b      	ldr	r3, [r3, #0]
 801590a:	4618      	mov	r0, r3
 801590c:	f7fd fa8c 	bl	8012e28 <HAL_InitTick>
 8015910:	4603      	mov	r3, r0
 8015912:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8015914:	7bfb      	ldrb	r3, [r7, #15]
}
 8015916:	4618      	mov	r0, r3
 8015918:	3718      	adds	r7, #24
 801591a:	46bd      	mov	sp, r7
 801591c:	bd80      	pop	{r7, pc}
 801591e:	bf00      	nop
 8015920:	58024400 	.word	0x58024400
 8015924:	0801fa40 	.word	0x0801fa40
 8015928:	24000010 	.word	0x24000010
 801592c:	2400000c 	.word	0x2400000c
 8015930:	24000014 	.word	0x24000014

08015934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8015934:	b480      	push	{r7}
 8015936:	b089      	sub	sp, #36	; 0x24
 8015938:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801593a:	4baf      	ldr	r3, [pc, #700]	; (8015bf8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801593c:	691b      	ldr	r3, [r3, #16]
 801593e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8015942:	2b18      	cmp	r3, #24
 8015944:	f200 814e 	bhi.w	8015be4 <HAL_RCC_GetSysClockFreq+0x2b0>
 8015948:	a201      	add	r2, pc, #4	; (adr r2, 8015950 <HAL_RCC_GetSysClockFreq+0x1c>)
 801594a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801594e:	bf00      	nop
 8015950:	080159b5 	.word	0x080159b5
 8015954:	08015be5 	.word	0x08015be5
 8015958:	08015be5 	.word	0x08015be5
 801595c:	08015be5 	.word	0x08015be5
 8015960:	08015be5 	.word	0x08015be5
 8015964:	08015be5 	.word	0x08015be5
 8015968:	08015be5 	.word	0x08015be5
 801596c:	08015be5 	.word	0x08015be5
 8015970:	080159db 	.word	0x080159db
 8015974:	08015be5 	.word	0x08015be5
 8015978:	08015be5 	.word	0x08015be5
 801597c:	08015be5 	.word	0x08015be5
 8015980:	08015be5 	.word	0x08015be5
 8015984:	08015be5 	.word	0x08015be5
 8015988:	08015be5 	.word	0x08015be5
 801598c:	08015be5 	.word	0x08015be5
 8015990:	080159e1 	.word	0x080159e1
 8015994:	08015be5 	.word	0x08015be5
 8015998:	08015be5 	.word	0x08015be5
 801599c:	08015be5 	.word	0x08015be5
 80159a0:	08015be5 	.word	0x08015be5
 80159a4:	08015be5 	.word	0x08015be5
 80159a8:	08015be5 	.word	0x08015be5
 80159ac:	08015be5 	.word	0x08015be5
 80159b0:	080159e7 	.word	0x080159e7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80159b4:	4b90      	ldr	r3, [pc, #576]	; (8015bf8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	f003 0320 	and.w	r3, r3, #32
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d009      	beq.n	80159d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80159c0:	4b8d      	ldr	r3, [pc, #564]	; (8015bf8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	08db      	lsrs	r3, r3, #3
 80159c6:	f003 0303 	and.w	r3, r3, #3
 80159ca:	4a8c      	ldr	r2, [pc, #560]	; (8015bfc <HAL_RCC_GetSysClockFreq+0x2c8>)
 80159cc:	fa22 f303 	lsr.w	r3, r2, r3
 80159d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80159d2:	e10a      	b.n	8015bea <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80159d4:	4b89      	ldr	r3, [pc, #548]	; (8015bfc <HAL_RCC_GetSysClockFreq+0x2c8>)
 80159d6:	61bb      	str	r3, [r7, #24]
    break;
 80159d8:	e107      	b.n	8015bea <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80159da:	4b89      	ldr	r3, [pc, #548]	; (8015c00 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80159dc:	61bb      	str	r3, [r7, #24]
    break;
 80159de:	e104      	b.n	8015bea <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80159e0:	4b88      	ldr	r3, [pc, #544]	; (8015c04 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80159e2:	61bb      	str	r3, [r7, #24]
    break;
 80159e4:	e101      	b.n	8015bea <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80159e6:	4b84      	ldr	r3, [pc, #528]	; (8015bf8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80159e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80159ea:	f003 0303 	and.w	r3, r3, #3
 80159ee:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80159f0:	4b81      	ldr	r3, [pc, #516]	; (8015bf8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80159f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80159f4:	091b      	lsrs	r3, r3, #4
 80159f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80159fa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80159fc:	4b7e      	ldr	r3, [pc, #504]	; (8015bf8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80159fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a00:	f003 0301 	and.w	r3, r3, #1
 8015a04:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8015a06:	4b7c      	ldr	r3, [pc, #496]	; (8015bf8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8015a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015a0a:	08db      	lsrs	r3, r3, #3
 8015a0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015a10:	68fa      	ldr	r2, [r7, #12]
 8015a12:	fb02 f303 	mul.w	r3, r2, r3
 8015a16:	ee07 3a90 	vmov	s15, r3
 8015a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015a1e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8015a22:	693b      	ldr	r3, [r7, #16]
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	f000 80da 	beq.w	8015bde <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8015a2a:	697b      	ldr	r3, [r7, #20]
 8015a2c:	2b01      	cmp	r3, #1
 8015a2e:	d05a      	beq.n	8015ae6 <HAL_RCC_GetSysClockFreq+0x1b2>
 8015a30:	2b01      	cmp	r3, #1
 8015a32:	d302      	bcc.n	8015a3a <HAL_RCC_GetSysClockFreq+0x106>
 8015a34:	2b02      	cmp	r3, #2
 8015a36:	d078      	beq.n	8015b2a <HAL_RCC_GetSysClockFreq+0x1f6>
 8015a38:	e099      	b.n	8015b6e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015a3a:	4b6f      	ldr	r3, [pc, #444]	; (8015bf8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8015a3c:	681b      	ldr	r3, [r3, #0]
 8015a3e:	f003 0320 	and.w	r3, r3, #32
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d02d      	beq.n	8015aa2 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8015a46:	4b6c      	ldr	r3, [pc, #432]	; (8015bf8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	08db      	lsrs	r3, r3, #3
 8015a4c:	f003 0303 	and.w	r3, r3, #3
 8015a50:	4a6a      	ldr	r2, [pc, #424]	; (8015bfc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8015a52:	fa22 f303 	lsr.w	r3, r2, r3
 8015a56:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	ee07 3a90 	vmov	s15, r3
 8015a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015a62:	693b      	ldr	r3, [r7, #16]
 8015a64:	ee07 3a90 	vmov	s15, r3
 8015a68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015a6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015a70:	4b61      	ldr	r3, [pc, #388]	; (8015bf8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8015a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015a78:	ee07 3a90 	vmov	s15, r3
 8015a7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015a80:	ed97 6a02 	vldr	s12, [r7, #8]
 8015a84:	eddf 5a60 	vldr	s11, [pc, #384]	; 8015c08 <HAL_RCC_GetSysClockFreq+0x2d4>
 8015a88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015a8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015a90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015a94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015a98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015a9c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8015aa0:	e087      	b.n	8015bb2 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8015aa2:	693b      	ldr	r3, [r7, #16]
 8015aa4:	ee07 3a90 	vmov	s15, r3
 8015aa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015aac:	eddf 6a57 	vldr	s13, [pc, #348]	; 8015c0c <HAL_RCC_GetSysClockFreq+0x2d8>
 8015ab0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015ab4:	4b50      	ldr	r3, [pc, #320]	; (8015bf8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8015ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015abc:	ee07 3a90 	vmov	s15, r3
 8015ac0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015ac4:	ed97 6a02 	vldr	s12, [r7, #8]
 8015ac8:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8015c08 <HAL_RCC_GetSysClockFreq+0x2d4>
 8015acc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015ad0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015ad4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015ad8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015adc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015ae0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8015ae4:	e065      	b.n	8015bb2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8015ae6:	693b      	ldr	r3, [r7, #16]
 8015ae8:	ee07 3a90 	vmov	s15, r3
 8015aec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015af0:	eddf 6a47 	vldr	s13, [pc, #284]	; 8015c10 <HAL_RCC_GetSysClockFreq+0x2dc>
 8015af4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015af8:	4b3f      	ldr	r3, [pc, #252]	; (8015bf8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8015afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015b00:	ee07 3a90 	vmov	s15, r3
 8015b04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015b08:	ed97 6a02 	vldr	s12, [r7, #8]
 8015b0c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8015c08 <HAL_RCC_GetSysClockFreq+0x2d4>
 8015b10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015b14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015b18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015b1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015b20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015b24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8015b28:	e043      	b.n	8015bb2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8015b2a:	693b      	ldr	r3, [r7, #16]
 8015b2c:	ee07 3a90 	vmov	s15, r3
 8015b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015b34:	eddf 6a37 	vldr	s13, [pc, #220]	; 8015c14 <HAL_RCC_GetSysClockFreq+0x2e0>
 8015b38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015b3c:	4b2e      	ldr	r3, [pc, #184]	; (8015bf8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8015b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015b44:	ee07 3a90 	vmov	s15, r3
 8015b48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015b4c:	ed97 6a02 	vldr	s12, [r7, #8]
 8015b50:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8015c08 <HAL_RCC_GetSysClockFreq+0x2d4>
 8015b54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015b58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015b5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015b60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015b64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015b68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8015b6c:	e021      	b.n	8015bb2 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8015b6e:	693b      	ldr	r3, [r7, #16]
 8015b70:	ee07 3a90 	vmov	s15, r3
 8015b74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015b78:	eddf 6a25 	vldr	s13, [pc, #148]	; 8015c10 <HAL_RCC_GetSysClockFreq+0x2dc>
 8015b7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015b80:	4b1d      	ldr	r3, [pc, #116]	; (8015bf8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8015b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015b88:	ee07 3a90 	vmov	s15, r3
 8015b8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015b90:	ed97 6a02 	vldr	s12, [r7, #8]
 8015b94:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8015c08 <HAL_RCC_GetSysClockFreq+0x2d4>
 8015b98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015b9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015ba0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015ba4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015bac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8015bb0:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8015bb2:	4b11      	ldr	r3, [pc, #68]	; (8015bf8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8015bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015bb6:	0a5b      	lsrs	r3, r3, #9
 8015bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015bbc:	3301      	adds	r3, #1
 8015bbe:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8015bc0:	683b      	ldr	r3, [r7, #0]
 8015bc2:	ee07 3a90 	vmov	s15, r3
 8015bc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015bca:	edd7 6a07 	vldr	s13, [r7, #28]
 8015bce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015bd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015bd6:	ee17 3a90 	vmov	r3, s15
 8015bda:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8015bdc:	e005      	b.n	8015bea <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8015bde:	2300      	movs	r3, #0
 8015be0:	61bb      	str	r3, [r7, #24]
    break;
 8015be2:	e002      	b.n	8015bea <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8015be4:	4b06      	ldr	r3, [pc, #24]	; (8015c00 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8015be6:	61bb      	str	r3, [r7, #24]
    break;
 8015be8:	bf00      	nop
  }

  return sysclockfreq;
 8015bea:	69bb      	ldr	r3, [r7, #24]
}
 8015bec:	4618      	mov	r0, r3
 8015bee:	3724      	adds	r7, #36	; 0x24
 8015bf0:	46bd      	mov	sp, r7
 8015bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bf6:	4770      	bx	lr
 8015bf8:	58024400 	.word	0x58024400
 8015bfc:	03d09000 	.word	0x03d09000
 8015c00:	003d0900 	.word	0x003d0900
 8015c04:	007a1200 	.word	0x007a1200
 8015c08:	46000000 	.word	0x46000000
 8015c0c:	4c742400 	.word	0x4c742400
 8015c10:	4a742400 	.word	0x4a742400
 8015c14:	4af42400 	.word	0x4af42400

08015c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8015c18:	b580      	push	{r7, lr}
 8015c1a:	b082      	sub	sp, #8
 8015c1c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8015c1e:	f7ff fe89 	bl	8015934 <HAL_RCC_GetSysClockFreq>
 8015c22:	4601      	mov	r1, r0
 8015c24:	4b10      	ldr	r3, [pc, #64]	; (8015c68 <HAL_RCC_GetHCLKFreq+0x50>)
 8015c26:	699b      	ldr	r3, [r3, #24]
 8015c28:	0a1b      	lsrs	r3, r3, #8
 8015c2a:	f003 030f 	and.w	r3, r3, #15
 8015c2e:	4a0f      	ldr	r2, [pc, #60]	; (8015c6c <HAL_RCC_GetHCLKFreq+0x54>)
 8015c30:	5cd3      	ldrb	r3, [r2, r3]
 8015c32:	f003 031f 	and.w	r3, r3, #31
 8015c36:	fa21 f303 	lsr.w	r3, r1, r3
 8015c3a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8015c3c:	4b0a      	ldr	r3, [pc, #40]	; (8015c68 <HAL_RCC_GetHCLKFreq+0x50>)
 8015c3e:	699b      	ldr	r3, [r3, #24]
 8015c40:	f003 030f 	and.w	r3, r3, #15
 8015c44:	4a09      	ldr	r2, [pc, #36]	; (8015c6c <HAL_RCC_GetHCLKFreq+0x54>)
 8015c46:	5cd3      	ldrb	r3, [r2, r3]
 8015c48:	f003 031f 	and.w	r3, r3, #31
 8015c4c:	687a      	ldr	r2, [r7, #4]
 8015c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8015c52:	4a07      	ldr	r2, [pc, #28]	; (8015c70 <HAL_RCC_GetHCLKFreq+0x58>)
 8015c54:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8015c56:	4a07      	ldr	r2, [pc, #28]	; (8015c74 <HAL_RCC_GetHCLKFreq+0x5c>)
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8015c5c:	4b04      	ldr	r3, [pc, #16]	; (8015c70 <HAL_RCC_GetHCLKFreq+0x58>)
 8015c5e:	681b      	ldr	r3, [r3, #0]
}
 8015c60:	4618      	mov	r0, r3
 8015c62:	3708      	adds	r7, #8
 8015c64:	46bd      	mov	sp, r7
 8015c66:	bd80      	pop	{r7, pc}
 8015c68:	58024400 	.word	0x58024400
 8015c6c:	0801fa40 	.word	0x0801fa40
 8015c70:	24000010 	.word	0x24000010
 8015c74:	2400000c 	.word	0x2400000c

08015c78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8015c78:	b580      	push	{r7, lr}
 8015c7a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8015c7c:	f7ff ffcc 	bl	8015c18 <HAL_RCC_GetHCLKFreq>
 8015c80:	4601      	mov	r1, r0
 8015c82:	4b06      	ldr	r3, [pc, #24]	; (8015c9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8015c84:	69db      	ldr	r3, [r3, #28]
 8015c86:	091b      	lsrs	r3, r3, #4
 8015c88:	f003 0307 	and.w	r3, r3, #7
 8015c8c:	4a04      	ldr	r2, [pc, #16]	; (8015ca0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8015c8e:	5cd3      	ldrb	r3, [r2, r3]
 8015c90:	f003 031f 	and.w	r3, r3, #31
 8015c94:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8015c98:	4618      	mov	r0, r3
 8015c9a:	bd80      	pop	{r7, pc}
 8015c9c:	58024400 	.word	0x58024400
 8015ca0:	0801fa40 	.word	0x0801fa40

08015ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8015ca4:	b580      	push	{r7, lr}
 8015ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8015ca8:	f7ff ffb6 	bl	8015c18 <HAL_RCC_GetHCLKFreq>
 8015cac:	4601      	mov	r1, r0
 8015cae:	4b06      	ldr	r3, [pc, #24]	; (8015cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8015cb0:	69db      	ldr	r3, [r3, #28]
 8015cb2:	0a1b      	lsrs	r3, r3, #8
 8015cb4:	f003 0307 	and.w	r3, r3, #7
 8015cb8:	4a04      	ldr	r2, [pc, #16]	; (8015ccc <HAL_RCC_GetPCLK2Freq+0x28>)
 8015cba:	5cd3      	ldrb	r3, [r2, r3]
 8015cbc:	f003 031f 	and.w	r3, r3, #31
 8015cc0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8015cc4:	4618      	mov	r0, r3
 8015cc6:	bd80      	pop	{r7, pc}
 8015cc8:	58024400 	.word	0x58024400
 8015ccc:	0801fa40 	.word	0x0801fa40

08015cd0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8015cd0:	b580      	push	{r7, lr}
 8015cd2:	b086      	sub	sp, #24
 8015cd4:	af00      	add	r7, sp, #0
 8015cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8015cd8:	2300      	movs	r3, #0
 8015cda:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8015cdc:	2300      	movs	r3, #0
 8015cde:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	681b      	ldr	r3, [r3, #0]
 8015ce4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d03d      	beq.n	8015d68 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015cf0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015cf4:	d013      	beq.n	8015d1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8015cf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015cfa:	d802      	bhi.n	8015d02 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d007      	beq.n	8015d10 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8015d00:	e01f      	b.n	8015d42 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8015d02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015d06:	d013      	beq.n	8015d30 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8015d08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8015d0c:	d01c      	beq.n	8015d48 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8015d0e:	e018      	b.n	8015d42 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015d10:	4baf      	ldr	r3, [pc, #700]	; (8015fd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d14:	4aae      	ldr	r2, [pc, #696]	; (8015fd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015d1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8015d1c:	e015      	b.n	8015d4a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	3304      	adds	r3, #4
 8015d22:	2102      	movs	r1, #2
 8015d24:	4618      	mov	r0, r3
 8015d26:	f001 f95f 	bl	8016fe8 <RCCEx_PLL2_Config>
 8015d2a:	4603      	mov	r3, r0
 8015d2c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8015d2e:	e00c      	b.n	8015d4a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	3324      	adds	r3, #36	; 0x24
 8015d34:	2102      	movs	r1, #2
 8015d36:	4618      	mov	r0, r3
 8015d38:	f001 fa08 	bl	801714c <RCCEx_PLL3_Config>
 8015d3c:	4603      	mov	r3, r0
 8015d3e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8015d40:	e003      	b.n	8015d4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015d42:	2301      	movs	r3, #1
 8015d44:	75fb      	strb	r3, [r7, #23]
      break;
 8015d46:	e000      	b.n	8015d4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8015d48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015d4a:	7dfb      	ldrb	r3, [r7, #23]
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d109      	bne.n	8015d64 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8015d50:	4b9f      	ldr	r3, [pc, #636]	; (8015fd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015d54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015d5c:	499c      	ldr	r1, [pc, #624]	; (8015fd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015d5e:	4313      	orrs	r3, r2
 8015d60:	650b      	str	r3, [r1, #80]	; 0x50
 8015d62:	e001      	b.n	8015d68 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015d64:	7dfb      	ldrb	r3, [r7, #23]
 8015d66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	681b      	ldr	r3, [r3, #0]
 8015d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d03d      	beq.n	8015df0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015d78:	2b04      	cmp	r3, #4
 8015d7a:	d826      	bhi.n	8015dca <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8015d7c:	a201      	add	r2, pc, #4	; (adr r2, 8015d84 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8015d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d82:	bf00      	nop
 8015d84:	08015d99 	.word	0x08015d99
 8015d88:	08015da7 	.word	0x08015da7
 8015d8c:	08015db9 	.word	0x08015db9
 8015d90:	08015dd1 	.word	0x08015dd1
 8015d94:	08015dd1 	.word	0x08015dd1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015d98:	4b8d      	ldr	r3, [pc, #564]	; (8015fd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d9c:	4a8c      	ldr	r2, [pc, #560]	; (8015fd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015da2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8015da4:	e015      	b.n	8015dd2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	3304      	adds	r3, #4
 8015daa:	2100      	movs	r1, #0
 8015dac:	4618      	mov	r0, r3
 8015dae:	f001 f91b 	bl	8016fe8 <RCCEx_PLL2_Config>
 8015db2:	4603      	mov	r3, r0
 8015db4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8015db6:	e00c      	b.n	8015dd2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	3324      	adds	r3, #36	; 0x24
 8015dbc:	2100      	movs	r1, #0
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	f001 f9c4 	bl	801714c <RCCEx_PLL3_Config>
 8015dc4:	4603      	mov	r3, r0
 8015dc6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8015dc8:	e003      	b.n	8015dd2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015dca:	2301      	movs	r3, #1
 8015dcc:	75fb      	strb	r3, [r7, #23]
      break;
 8015dce:	e000      	b.n	8015dd2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8015dd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015dd2:	7dfb      	ldrb	r3, [r7, #23]
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d109      	bne.n	8015dec <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8015dd8:	4b7d      	ldr	r3, [pc, #500]	; (8015fd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015ddc:	f023 0207 	bic.w	r2, r3, #7
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015de4:	497a      	ldr	r1, [pc, #488]	; (8015fd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015de6:	4313      	orrs	r3, r2
 8015de8:	650b      	str	r3, [r1, #80]	; 0x50
 8015dea:	e001      	b.n	8015df0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015dec:	7dfb      	ldrb	r3, [r7, #23]
 8015dee:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d03e      	beq.n	8015e7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015e00:	2b80      	cmp	r3, #128	; 0x80
 8015e02:	d01c      	beq.n	8015e3e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8015e04:	2b80      	cmp	r3, #128	; 0x80
 8015e06:	d804      	bhi.n	8015e12 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d008      	beq.n	8015e1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8015e0c:	2b40      	cmp	r3, #64	; 0x40
 8015e0e:	d00d      	beq.n	8015e2c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8015e10:	e01e      	b.n	8015e50 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8015e12:	2bc0      	cmp	r3, #192	; 0xc0
 8015e14:	d01f      	beq.n	8015e56 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8015e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015e1a:	d01e      	beq.n	8015e5a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8015e1c:	e018      	b.n	8015e50 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015e1e:	4b6c      	ldr	r3, [pc, #432]	; (8015fd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e22:	4a6b      	ldr	r2, [pc, #428]	; (8015fd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015e28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8015e2a:	e017      	b.n	8015e5c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	3304      	adds	r3, #4
 8015e30:	2100      	movs	r1, #0
 8015e32:	4618      	mov	r0, r3
 8015e34:	f001 f8d8 	bl	8016fe8 <RCCEx_PLL2_Config>
 8015e38:	4603      	mov	r3, r0
 8015e3a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8015e3c:	e00e      	b.n	8015e5c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	3324      	adds	r3, #36	; 0x24
 8015e42:	2100      	movs	r1, #0
 8015e44:	4618      	mov	r0, r3
 8015e46:	f001 f981 	bl	801714c <RCCEx_PLL3_Config>
 8015e4a:	4603      	mov	r3, r0
 8015e4c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8015e4e:	e005      	b.n	8015e5c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015e50:	2301      	movs	r3, #1
 8015e52:	75fb      	strb	r3, [r7, #23]
      break;
 8015e54:	e002      	b.n	8015e5c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8015e56:	bf00      	nop
 8015e58:	e000      	b.n	8015e5c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8015e5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015e5c:	7dfb      	ldrb	r3, [r7, #23]
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d109      	bne.n	8015e76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8015e62:	4b5b      	ldr	r3, [pc, #364]	; (8015fd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015e66:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015e6e:	4958      	ldr	r1, [pc, #352]	; (8015fd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015e70:	4313      	orrs	r3, r2
 8015e72:	650b      	str	r3, [r1, #80]	; 0x50
 8015e74:	e001      	b.n	8015e7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015e76:	7dfb      	ldrb	r3, [r7, #23]
 8015e78:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d044      	beq.n	8015f10 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8015e8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8015e90:	d01f      	beq.n	8015ed2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8015e92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8015e96:	d805      	bhi.n	8015ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d00a      	beq.n	8015eb2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8015e9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015ea0:	d00e      	beq.n	8015ec0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8015ea2:	e01f      	b.n	8015ee4 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8015ea4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8015ea8:	d01f      	beq.n	8015eea <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8015eaa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8015eae:	d01e      	beq.n	8015eee <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8015eb0:	e018      	b.n	8015ee4 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015eb2:	4b47      	ldr	r3, [pc, #284]	; (8015fd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015eb6:	4a46      	ldr	r2, [pc, #280]	; (8015fd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015ebc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8015ebe:	e017      	b.n	8015ef0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	3304      	adds	r3, #4
 8015ec4:	2100      	movs	r1, #0
 8015ec6:	4618      	mov	r0, r3
 8015ec8:	f001 f88e 	bl	8016fe8 <RCCEx_PLL2_Config>
 8015ecc:	4603      	mov	r3, r0
 8015ece:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8015ed0:	e00e      	b.n	8015ef0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	3324      	adds	r3, #36	; 0x24
 8015ed6:	2100      	movs	r1, #0
 8015ed8:	4618      	mov	r0, r3
 8015eda:	f001 f937 	bl	801714c <RCCEx_PLL3_Config>
 8015ede:	4603      	mov	r3, r0
 8015ee0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8015ee2:	e005      	b.n	8015ef0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015ee4:	2301      	movs	r3, #1
 8015ee6:	75fb      	strb	r3, [r7, #23]
      break;
 8015ee8:	e002      	b.n	8015ef0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8015eea:	bf00      	nop
 8015eec:	e000      	b.n	8015ef0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8015eee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015ef0:	7dfb      	ldrb	r3, [r7, #23]
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d10a      	bne.n	8015f0c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8015ef6:	4b36      	ldr	r3, [pc, #216]	; (8015fd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015efa:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8015f04:	4932      	ldr	r1, [pc, #200]	; (8015fd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015f06:	4313      	orrs	r3, r2
 8015f08:	658b      	str	r3, [r1, #88]	; 0x58
 8015f0a:	e001      	b.n	8015f10 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015f0c:	7dfb      	ldrb	r3, [r7, #23]
 8015f0e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	681b      	ldr	r3, [r3, #0]
 8015f14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d044      	beq.n	8015fa6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015f22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8015f26:	d01f      	beq.n	8015f68 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8015f28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8015f2c:	d805      	bhi.n	8015f3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d00a      	beq.n	8015f48 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8015f32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8015f36:	d00e      	beq.n	8015f56 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8015f38:	e01f      	b.n	8015f7a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8015f3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8015f3e:	d01f      	beq.n	8015f80 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8015f40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8015f44:	d01e      	beq.n	8015f84 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8015f46:	e018      	b.n	8015f7a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015f48:	4b21      	ldr	r3, [pc, #132]	; (8015fd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f4c:	4a20      	ldr	r2, [pc, #128]	; (8015fd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015f4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015f52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8015f54:	e017      	b.n	8015f86 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	3304      	adds	r3, #4
 8015f5a:	2100      	movs	r1, #0
 8015f5c:	4618      	mov	r0, r3
 8015f5e:	f001 f843 	bl	8016fe8 <RCCEx_PLL2_Config>
 8015f62:	4603      	mov	r3, r0
 8015f64:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8015f66:	e00e      	b.n	8015f86 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	3324      	adds	r3, #36	; 0x24
 8015f6c:	2100      	movs	r1, #0
 8015f6e:	4618      	mov	r0, r3
 8015f70:	f001 f8ec 	bl	801714c <RCCEx_PLL3_Config>
 8015f74:	4603      	mov	r3, r0
 8015f76:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8015f78:	e005      	b.n	8015f86 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015f7a:	2301      	movs	r3, #1
 8015f7c:	75fb      	strb	r3, [r7, #23]
      break;
 8015f7e:	e002      	b.n	8015f86 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8015f80:	bf00      	nop
 8015f82:	e000      	b.n	8015f86 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8015f84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015f86:	7dfb      	ldrb	r3, [r7, #23]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d10a      	bne.n	8015fa2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8015f8c:	4b10      	ldr	r3, [pc, #64]	; (8015fd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015f90:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015f9a:	490d      	ldr	r1, [pc, #52]	; (8015fd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015f9c:	4313      	orrs	r3, r2
 8015f9e:	658b      	str	r3, [r1, #88]	; 0x58
 8015fa0:	e001      	b.n	8015fa6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015fa2:	7dfb      	ldrb	r3, [r7, #23]
 8015fa4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d035      	beq.n	801601e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015fb6:	2b10      	cmp	r3, #16
 8015fb8:	d00c      	beq.n	8015fd4 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8015fba:	2b10      	cmp	r3, #16
 8015fbc:	d802      	bhi.n	8015fc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d01b      	beq.n	8015ffa <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8015fc2:	e017      	b.n	8015ff4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8015fc4:	2b20      	cmp	r3, #32
 8015fc6:	d00c      	beq.n	8015fe2 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8015fc8:	2b30      	cmp	r3, #48	; 0x30
 8015fca:	d018      	beq.n	8015ffe <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8015fcc:	e012      	b.n	8015ff4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8015fce:	bf00      	nop
 8015fd0:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015fd4:	4baf      	ldr	r3, [pc, #700]	; (8016294 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015fd8:	4aae      	ldr	r2, [pc, #696]	; (8016294 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015fda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015fde:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8015fe0:	e00e      	b.n	8016000 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	3304      	adds	r3, #4
 8015fe6:	2102      	movs	r1, #2
 8015fe8:	4618      	mov	r0, r3
 8015fea:	f000 fffd 	bl	8016fe8 <RCCEx_PLL2_Config>
 8015fee:	4603      	mov	r3, r0
 8015ff0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8015ff2:	e005      	b.n	8016000 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8015ff4:	2301      	movs	r3, #1
 8015ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8015ff8:	e002      	b.n	8016000 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8015ffa:	bf00      	nop
 8015ffc:	e000      	b.n	8016000 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8015ffe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8016000:	7dfb      	ldrb	r3, [r7, #23]
 8016002:	2b00      	cmp	r3, #0
 8016004:	d109      	bne.n	801601a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8016006:	4ba3      	ldr	r3, [pc, #652]	; (8016294 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8016008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801600a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016012:	49a0      	ldr	r1, [pc, #640]	; (8016294 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8016014:	4313      	orrs	r3, r2
 8016016:	64cb      	str	r3, [r1, #76]	; 0x4c
 8016018:	e001      	b.n	801601e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801601a:	7dfb      	ldrb	r3, [r7, #23]
 801601c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	681b      	ldr	r3, [r3, #0]
 8016022:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8016026:	2b00      	cmp	r3, #0
 8016028:	d042      	beq.n	80160b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801602e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8016032:	d01f      	beq.n	8016074 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8016034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8016038:	d805      	bhi.n	8016046 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801603a:	2b00      	cmp	r3, #0
 801603c:	d00a      	beq.n	8016054 <HAL_RCCEx_PeriphCLKConfig+0x384>
 801603e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016042:	d00e      	beq.n	8016062 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8016044:	e01f      	b.n	8016086 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8016046:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801604a:	d01f      	beq.n	801608c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 801604c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016050:	d01e      	beq.n	8016090 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8016052:	e018      	b.n	8016086 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8016054:	4b8f      	ldr	r3, [pc, #572]	; (8016294 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8016056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016058:	4a8e      	ldr	r2, [pc, #568]	; (8016294 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801605a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801605e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8016060:	e017      	b.n	8016092 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	3304      	adds	r3, #4
 8016066:	2100      	movs	r1, #0
 8016068:	4618      	mov	r0, r3
 801606a:	f000 ffbd 	bl	8016fe8 <RCCEx_PLL2_Config>
 801606e:	4603      	mov	r3, r0
 8016070:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8016072:	e00e      	b.n	8016092 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	3324      	adds	r3, #36	; 0x24
 8016078:	2100      	movs	r1, #0
 801607a:	4618      	mov	r0, r3
 801607c:	f001 f866 	bl	801714c <RCCEx_PLL3_Config>
 8016080:	4603      	mov	r3, r0
 8016082:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8016084:	e005      	b.n	8016092 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8016086:	2301      	movs	r3, #1
 8016088:	75fb      	strb	r3, [r7, #23]
      break;
 801608a:	e002      	b.n	8016092 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 801608c:	bf00      	nop
 801608e:	e000      	b.n	8016092 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8016090:	bf00      	nop
    }

    if(ret == HAL_OK)
 8016092:	7dfb      	ldrb	r3, [r7, #23]
 8016094:	2b00      	cmp	r3, #0
 8016096:	d109      	bne.n	80160ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8016098:	4b7e      	ldr	r3, [pc, #504]	; (8016294 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801609a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801609c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80160a4:	497b      	ldr	r1, [pc, #492]	; (8016294 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80160a6:	4313      	orrs	r3, r2
 80160a8:	650b      	str	r3, [r1, #80]	; 0x50
 80160aa:	e001      	b.n	80160b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80160ac:	7dfb      	ldrb	r3, [r7, #23]
 80160ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d042      	beq.n	8016142 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80160c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80160c4:	d01b      	beq.n	80160fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80160c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80160ca:	d805      	bhi.n	80160d8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d022      	beq.n	8016116 <HAL_RCCEx_PeriphCLKConfig+0x446>
 80160d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80160d4:	d00a      	beq.n	80160ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80160d6:	e01b      	b.n	8016110 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80160d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80160dc:	d01d      	beq.n	801611a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80160de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80160e2:	d01c      	beq.n	801611e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80160e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80160e8:	d01b      	beq.n	8016122 <HAL_RCCEx_PeriphCLKConfig+0x452>
 80160ea:	e011      	b.n	8016110 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	3304      	adds	r3, #4
 80160f0:	2101      	movs	r1, #1
 80160f2:	4618      	mov	r0, r3
 80160f4:	f000 ff78 	bl	8016fe8 <RCCEx_PLL2_Config>
 80160f8:	4603      	mov	r3, r0
 80160fa:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80160fc:	e012      	b.n	8016124 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	3324      	adds	r3, #36	; 0x24
 8016102:	2101      	movs	r1, #1
 8016104:	4618      	mov	r0, r3
 8016106:	f001 f821 	bl	801714c <RCCEx_PLL3_Config>
 801610a:	4603      	mov	r3, r0
 801610c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 801610e:	e009      	b.n	8016124 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8016110:	2301      	movs	r3, #1
 8016112:	75fb      	strb	r3, [r7, #23]
      break;
 8016114:	e006      	b.n	8016124 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8016116:	bf00      	nop
 8016118:	e004      	b.n	8016124 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 801611a:	bf00      	nop
 801611c:	e002      	b.n	8016124 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 801611e:	bf00      	nop
 8016120:	e000      	b.n	8016124 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8016122:	bf00      	nop
    }

    if(ret == HAL_OK)
 8016124:	7dfb      	ldrb	r3, [r7, #23]
 8016126:	2b00      	cmp	r3, #0
 8016128:	d109      	bne.n	801613e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801612a:	4b5a      	ldr	r3, [pc, #360]	; (8016294 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801612c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801612e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016136:	4957      	ldr	r1, [pc, #348]	; (8016294 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8016138:	4313      	orrs	r3, r2
 801613a:	650b      	str	r3, [r1, #80]	; 0x50
 801613c:	e001      	b.n	8016142 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801613e:	7dfb      	ldrb	r3, [r7, #23]
 8016140:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801614a:	2b00      	cmp	r3, #0
 801614c:	d044      	beq.n	80161d8 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8016154:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8016158:	d01b      	beq.n	8016192 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 801615a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801615e:	d805      	bhi.n	801616c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8016160:	2b00      	cmp	r3, #0
 8016162:	d022      	beq.n	80161aa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8016164:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8016168:	d00a      	beq.n	8016180 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 801616a:	e01b      	b.n	80161a4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 801616c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016170:	d01d      	beq.n	80161ae <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8016172:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8016176:	d01c      	beq.n	80161b2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8016178:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801617c:	d01b      	beq.n	80161b6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 801617e:	e011      	b.n	80161a4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	3304      	adds	r3, #4
 8016184:	2101      	movs	r1, #1
 8016186:	4618      	mov	r0, r3
 8016188:	f000 ff2e 	bl	8016fe8 <RCCEx_PLL2_Config>
 801618c:	4603      	mov	r3, r0
 801618e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8016190:	e012      	b.n	80161b8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	3324      	adds	r3, #36	; 0x24
 8016196:	2101      	movs	r1, #1
 8016198:	4618      	mov	r0, r3
 801619a:	f000 ffd7 	bl	801714c <RCCEx_PLL3_Config>
 801619e:	4603      	mov	r3, r0
 80161a0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80161a2:	e009      	b.n	80161b8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80161a4:	2301      	movs	r3, #1
 80161a6:	75fb      	strb	r3, [r7, #23]
      break;
 80161a8:	e006      	b.n	80161b8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80161aa:	bf00      	nop
 80161ac:	e004      	b.n	80161b8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80161ae:	bf00      	nop
 80161b0:	e002      	b.n	80161b8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80161b2:	bf00      	nop
 80161b4:	e000      	b.n	80161b8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80161b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80161b8:	7dfb      	ldrb	r3, [r7, #23]
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d10a      	bne.n	80161d4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80161be:	4b35      	ldr	r3, [pc, #212]	; (8016294 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80161c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80161c2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80161cc:	4931      	ldr	r1, [pc, #196]	; (8016294 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80161ce:	4313      	orrs	r3, r2
 80161d0:	658b      	str	r3, [r1, #88]	; 0x58
 80161d2:	e001      	b.n	80161d8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80161d4:	7dfb      	ldrb	r3, [r7, #23]
 80161d6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	681b      	ldr	r3, [r3, #0]
 80161dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d02d      	beq.n	8016240 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80161e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80161ec:	d005      	beq.n	80161fa <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80161ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80161f2:	d009      	beq.n	8016208 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d013      	beq.n	8016220 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80161f8:	e00f      	b.n	801621a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80161fa:	4b26      	ldr	r3, [pc, #152]	; (8016294 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80161fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161fe:	4a25      	ldr	r2, [pc, #148]	; (8016294 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8016200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8016204:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8016206:	e00c      	b.n	8016222 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	3304      	adds	r3, #4
 801620c:	2101      	movs	r1, #1
 801620e:	4618      	mov	r0, r3
 8016210:	f000 feea 	bl	8016fe8 <RCCEx_PLL2_Config>
 8016214:	4603      	mov	r3, r0
 8016216:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8016218:	e003      	b.n	8016222 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801621a:	2301      	movs	r3, #1
 801621c:	75fb      	strb	r3, [r7, #23]
      break;
 801621e:	e000      	b.n	8016222 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8016220:	bf00      	nop
    }

    if(ret == HAL_OK)
 8016222:	7dfb      	ldrb	r3, [r7, #23]
 8016224:	2b00      	cmp	r3, #0
 8016226:	d109      	bne.n	801623c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8016228:	4b1a      	ldr	r3, [pc, #104]	; (8016294 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801622a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801622c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016234:	4917      	ldr	r1, [pc, #92]	; (8016294 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8016236:	4313      	orrs	r3, r2
 8016238:	650b      	str	r3, [r1, #80]	; 0x50
 801623a:	e001      	b.n	8016240 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801623c:	7dfb      	ldrb	r3, [r7, #23]
 801623e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	681b      	ldr	r3, [r3, #0]
 8016244:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016248:	2b00      	cmp	r3, #0
 801624a:	d035      	beq.n	80162b8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016250:	2b03      	cmp	r3, #3
 8016252:	d81b      	bhi.n	801628c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8016254:	a201      	add	r2, pc, #4	; (adr r2, 801625c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8016256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801625a:	bf00      	nop
 801625c:	08016299 	.word	0x08016299
 8016260:	0801626d 	.word	0x0801626d
 8016264:	0801627b 	.word	0x0801627b
 8016268:	08016299 	.word	0x08016299
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801626c:	4b09      	ldr	r3, [pc, #36]	; (8016294 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801626e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016270:	4a08      	ldr	r2, [pc, #32]	; (8016294 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8016272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8016276:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8016278:	e00f      	b.n	801629a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	3304      	adds	r3, #4
 801627e:	2102      	movs	r1, #2
 8016280:	4618      	mov	r0, r3
 8016282:	f000 feb1 	bl	8016fe8 <RCCEx_PLL2_Config>
 8016286:	4603      	mov	r3, r0
 8016288:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 801628a:	e006      	b.n	801629a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 801628c:	2301      	movs	r3, #1
 801628e:	75fb      	strb	r3, [r7, #23]
      break;
 8016290:	e003      	b.n	801629a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8016292:	bf00      	nop
 8016294:	58024400 	.word	0x58024400
      break;
 8016298:	bf00      	nop
    }

    if(ret == HAL_OK)
 801629a:	7dfb      	ldrb	r3, [r7, #23]
 801629c:	2b00      	cmp	r3, #0
 801629e:	d109      	bne.n	80162b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80162a0:	4bba      	ldr	r3, [pc, #744]	; (801658c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80162a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80162a4:	f023 0203 	bic.w	r2, r3, #3
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80162ac:	49b7      	ldr	r1, [pc, #732]	; (801658c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80162ae:	4313      	orrs	r3, r2
 80162b0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80162b2:	e001      	b.n	80162b8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80162b4:	7dfb      	ldrb	r3, [r7, #23]
 80162b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	681b      	ldr	r3, [r3, #0]
 80162bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	f000 8086 	beq.w	80163d2 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80162c6:	4bb2      	ldr	r3, [pc, #712]	; (8016590 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80162c8:	681b      	ldr	r3, [r3, #0]
 80162ca:	4ab1      	ldr	r2, [pc, #708]	; (8016590 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80162cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80162d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80162d2:	f7fc fdf3 	bl	8012ebc <HAL_GetTick>
 80162d6:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80162d8:	e009      	b.n	80162ee <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80162da:	f7fc fdef 	bl	8012ebc <HAL_GetTick>
 80162de:	4602      	mov	r2, r0
 80162e0:	693b      	ldr	r3, [r7, #16]
 80162e2:	1ad3      	subs	r3, r2, r3
 80162e4:	2b64      	cmp	r3, #100	; 0x64
 80162e6:	d902      	bls.n	80162ee <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80162e8:	2303      	movs	r3, #3
 80162ea:	75fb      	strb	r3, [r7, #23]
        break;
 80162ec:	e005      	b.n	80162fa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80162ee:	4ba8      	ldr	r3, [pc, #672]	; (8016590 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80162f0:	681b      	ldr	r3, [r3, #0]
 80162f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d0ef      	beq.n	80162da <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80162fa:	7dfb      	ldrb	r3, [r7, #23]
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d166      	bne.n	80163ce <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8016300:	4ba2      	ldr	r3, [pc, #648]	; (801658c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8016302:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801630a:	4053      	eors	r3, r2
 801630c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8016310:	2b00      	cmp	r3, #0
 8016312:	d013      	beq.n	801633c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8016314:	4b9d      	ldr	r3, [pc, #628]	; (801658c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8016316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801631c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801631e:	4b9b      	ldr	r3, [pc, #620]	; (801658c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8016320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016322:	4a9a      	ldr	r2, [pc, #616]	; (801658c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8016324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8016328:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801632a:	4b98      	ldr	r3, [pc, #608]	; (801658c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801632c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801632e:	4a97      	ldr	r2, [pc, #604]	; (801658c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8016330:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8016334:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8016336:	4a95      	ldr	r2, [pc, #596]	; (801658c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8016342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016346:	d115      	bne.n	8016374 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016348:	f7fc fdb8 	bl	8012ebc <HAL_GetTick>
 801634c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801634e:	e00b      	b.n	8016368 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8016350:	f7fc fdb4 	bl	8012ebc <HAL_GetTick>
 8016354:	4602      	mov	r2, r0
 8016356:	693b      	ldr	r3, [r7, #16]
 8016358:	1ad3      	subs	r3, r2, r3
 801635a:	f241 3288 	movw	r2, #5000	; 0x1388
 801635e:	4293      	cmp	r3, r2
 8016360:	d902      	bls.n	8016368 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8016362:	2303      	movs	r3, #3
 8016364:	75fb      	strb	r3, [r7, #23]
            break;
 8016366:	e005      	b.n	8016374 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8016368:	4b88      	ldr	r3, [pc, #544]	; (801658c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801636a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801636c:	f003 0302 	and.w	r3, r3, #2
 8016370:	2b00      	cmp	r3, #0
 8016372:	d0ed      	beq.n	8016350 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8016374:	7dfb      	ldrb	r3, [r7, #23]
 8016376:	2b00      	cmp	r3, #0
 8016378:	d126      	bne.n	80163c8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8016380:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8016384:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8016388:	d10d      	bne.n	80163a6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 801638a:	4b80      	ldr	r3, [pc, #512]	; (801658c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801638c:	691b      	ldr	r3, [r3, #16]
 801638e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8016398:	0919      	lsrs	r1, r3, #4
 801639a:	4b7e      	ldr	r3, [pc, #504]	; (8016594 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 801639c:	400b      	ands	r3, r1
 801639e:	497b      	ldr	r1, [pc, #492]	; (801658c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80163a0:	4313      	orrs	r3, r2
 80163a2:	610b      	str	r3, [r1, #16]
 80163a4:	e005      	b.n	80163b2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80163a6:	4b79      	ldr	r3, [pc, #484]	; (801658c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80163a8:	691b      	ldr	r3, [r3, #16]
 80163aa:	4a78      	ldr	r2, [pc, #480]	; (801658c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80163ac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80163b0:	6113      	str	r3, [r2, #16]
 80163b2:	4b76      	ldr	r3, [pc, #472]	; (801658c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80163b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80163bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80163c0:	4972      	ldr	r1, [pc, #456]	; (801658c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80163c2:	4313      	orrs	r3, r2
 80163c4:	670b      	str	r3, [r1, #112]	; 0x70
 80163c6:	e004      	b.n	80163d2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80163c8:	7dfb      	ldrb	r3, [r7, #23]
 80163ca:	75bb      	strb	r3, [r7, #22]
 80163cc:	e001      	b.n	80163d2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80163ce:	7dfb      	ldrb	r3, [r7, #23]
 80163d0:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	681b      	ldr	r3, [r3, #0]
 80163d6:	f003 0301 	and.w	r3, r3, #1
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d07d      	beq.n	80164da <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80163e2:	2b28      	cmp	r3, #40	; 0x28
 80163e4:	d866      	bhi.n	80164b4 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80163e6:	a201      	add	r2, pc, #4	; (adr r2, 80163ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80163e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80163ec:	080164bb 	.word	0x080164bb
 80163f0:	080164b5 	.word	0x080164b5
 80163f4:	080164b5 	.word	0x080164b5
 80163f8:	080164b5 	.word	0x080164b5
 80163fc:	080164b5 	.word	0x080164b5
 8016400:	080164b5 	.word	0x080164b5
 8016404:	080164b5 	.word	0x080164b5
 8016408:	080164b5 	.word	0x080164b5
 801640c:	08016491 	.word	0x08016491
 8016410:	080164b5 	.word	0x080164b5
 8016414:	080164b5 	.word	0x080164b5
 8016418:	080164b5 	.word	0x080164b5
 801641c:	080164b5 	.word	0x080164b5
 8016420:	080164b5 	.word	0x080164b5
 8016424:	080164b5 	.word	0x080164b5
 8016428:	080164b5 	.word	0x080164b5
 801642c:	080164a3 	.word	0x080164a3
 8016430:	080164b5 	.word	0x080164b5
 8016434:	080164b5 	.word	0x080164b5
 8016438:	080164b5 	.word	0x080164b5
 801643c:	080164b5 	.word	0x080164b5
 8016440:	080164b5 	.word	0x080164b5
 8016444:	080164b5 	.word	0x080164b5
 8016448:	080164b5 	.word	0x080164b5
 801644c:	080164bb 	.word	0x080164bb
 8016450:	080164b5 	.word	0x080164b5
 8016454:	080164b5 	.word	0x080164b5
 8016458:	080164b5 	.word	0x080164b5
 801645c:	080164b5 	.word	0x080164b5
 8016460:	080164b5 	.word	0x080164b5
 8016464:	080164b5 	.word	0x080164b5
 8016468:	080164b5 	.word	0x080164b5
 801646c:	080164bb 	.word	0x080164bb
 8016470:	080164b5 	.word	0x080164b5
 8016474:	080164b5 	.word	0x080164b5
 8016478:	080164b5 	.word	0x080164b5
 801647c:	080164b5 	.word	0x080164b5
 8016480:	080164b5 	.word	0x080164b5
 8016484:	080164b5 	.word	0x080164b5
 8016488:	080164b5 	.word	0x080164b5
 801648c:	080164bb 	.word	0x080164bb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	3304      	adds	r3, #4
 8016494:	2101      	movs	r1, #1
 8016496:	4618      	mov	r0, r3
 8016498:	f000 fda6 	bl	8016fe8 <RCCEx_PLL2_Config>
 801649c:	4603      	mov	r3, r0
 801649e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80164a0:	e00c      	b.n	80164bc <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	3324      	adds	r3, #36	; 0x24
 80164a6:	2101      	movs	r1, #1
 80164a8:	4618      	mov	r0, r3
 80164aa:	f000 fe4f 	bl	801714c <RCCEx_PLL3_Config>
 80164ae:	4603      	mov	r3, r0
 80164b0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80164b2:	e003      	b.n	80164bc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80164b4:	2301      	movs	r3, #1
 80164b6:	75fb      	strb	r3, [r7, #23]
      break;
 80164b8:	e000      	b.n	80164bc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80164ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80164bc:	7dfb      	ldrb	r3, [r7, #23]
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d109      	bne.n	80164d6 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80164c2:	4b32      	ldr	r3, [pc, #200]	; (801658c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80164c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80164c6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80164ce:	492f      	ldr	r1, [pc, #188]	; (801658c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80164d0:	4313      	orrs	r3, r2
 80164d2:	654b      	str	r3, [r1, #84]	; 0x54
 80164d4:	e001      	b.n	80164da <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80164d6:	7dfb      	ldrb	r3, [r7, #23]
 80164d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	681b      	ldr	r3, [r3, #0]
 80164de:	f003 0302 	and.w	r3, r3, #2
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	d037      	beq.n	8016556 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80164ea:	2b05      	cmp	r3, #5
 80164ec:	d820      	bhi.n	8016530 <HAL_RCCEx_PeriphCLKConfig+0x860>
 80164ee:	a201      	add	r2, pc, #4	; (adr r2, 80164f4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80164f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80164f4:	08016537 	.word	0x08016537
 80164f8:	0801650d 	.word	0x0801650d
 80164fc:	0801651f 	.word	0x0801651f
 8016500:	08016537 	.word	0x08016537
 8016504:	08016537 	.word	0x08016537
 8016508:	08016537 	.word	0x08016537
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	3304      	adds	r3, #4
 8016510:	2101      	movs	r1, #1
 8016512:	4618      	mov	r0, r3
 8016514:	f000 fd68 	bl	8016fe8 <RCCEx_PLL2_Config>
 8016518:	4603      	mov	r3, r0
 801651a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 801651c:	e00c      	b.n	8016538 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	3324      	adds	r3, #36	; 0x24
 8016522:	2101      	movs	r1, #1
 8016524:	4618      	mov	r0, r3
 8016526:	f000 fe11 	bl	801714c <RCCEx_PLL3_Config>
 801652a:	4603      	mov	r3, r0
 801652c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 801652e:	e003      	b.n	8016538 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8016530:	2301      	movs	r3, #1
 8016532:	75fb      	strb	r3, [r7, #23]
      break;
 8016534:	e000      	b.n	8016538 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8016536:	bf00      	nop
    }

    if(ret == HAL_OK)
 8016538:	7dfb      	ldrb	r3, [r7, #23]
 801653a:	2b00      	cmp	r3, #0
 801653c:	d109      	bne.n	8016552 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801653e:	4b13      	ldr	r3, [pc, #76]	; (801658c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8016540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016542:	f023 0207 	bic.w	r2, r3, #7
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801654a:	4910      	ldr	r1, [pc, #64]	; (801658c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801654c:	4313      	orrs	r3, r2
 801654e:	654b      	str	r3, [r1, #84]	; 0x54
 8016550:	e001      	b.n	8016556 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016552:	7dfb      	ldrb	r3, [r7, #23]
 8016554:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	681b      	ldr	r3, [r3, #0]
 801655a:	f003 0304 	and.w	r3, r3, #4
 801655e:	2b00      	cmp	r3, #0
 8016560:	d040      	beq.n	80165e4 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016568:	2b05      	cmp	r3, #5
 801656a:	d827      	bhi.n	80165bc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 801656c:	a201      	add	r2, pc, #4	; (adr r2, 8016574 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 801656e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016572:	bf00      	nop
 8016574:	080165c3 	.word	0x080165c3
 8016578:	08016599 	.word	0x08016599
 801657c:	080165ab 	.word	0x080165ab
 8016580:	080165c3 	.word	0x080165c3
 8016584:	080165c3 	.word	0x080165c3
 8016588:	080165c3 	.word	0x080165c3
 801658c:	58024400 	.word	0x58024400
 8016590:	58024800 	.word	0x58024800
 8016594:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	3304      	adds	r3, #4
 801659c:	2101      	movs	r1, #1
 801659e:	4618      	mov	r0, r3
 80165a0:	f000 fd22 	bl	8016fe8 <RCCEx_PLL2_Config>
 80165a4:	4603      	mov	r3, r0
 80165a6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80165a8:	e00c      	b.n	80165c4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	3324      	adds	r3, #36	; 0x24
 80165ae:	2101      	movs	r1, #1
 80165b0:	4618      	mov	r0, r3
 80165b2:	f000 fdcb 	bl	801714c <RCCEx_PLL3_Config>
 80165b6:	4603      	mov	r3, r0
 80165b8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80165ba:	e003      	b.n	80165c4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80165bc:	2301      	movs	r3, #1
 80165be:	75fb      	strb	r3, [r7, #23]
      break;
 80165c0:	e000      	b.n	80165c4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80165c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80165c4:	7dfb      	ldrb	r3, [r7, #23]
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d10a      	bne.n	80165e0 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80165ca:	4bb2      	ldr	r3, [pc, #712]	; (8016894 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80165cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80165ce:	f023 0207 	bic.w	r2, r3, #7
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80165d8:	49ae      	ldr	r1, [pc, #696]	; (8016894 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80165da:	4313      	orrs	r3, r2
 80165dc:	658b      	str	r3, [r1, #88]	; 0x58
 80165de:	e001      	b.n	80165e4 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80165e0:	7dfb      	ldrb	r3, [r7, #23]
 80165e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	681b      	ldr	r3, [r3, #0]
 80165e8:	f003 0320 	and.w	r3, r3, #32
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d044      	beq.n	801667a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80165f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80165fa:	d01b      	beq.n	8016634 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80165fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8016600:	d805      	bhi.n	801660e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8016602:	2b00      	cmp	r3, #0
 8016604:	d022      	beq.n	801664c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8016606:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801660a:	d00a      	beq.n	8016622 <HAL_RCCEx_PeriphCLKConfig+0x952>
 801660c:	e01b      	b.n	8016646 <HAL_RCCEx_PeriphCLKConfig+0x976>
 801660e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016612:	d01d      	beq.n	8016650 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8016614:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8016618:	d01c      	beq.n	8016654 <HAL_RCCEx_PeriphCLKConfig+0x984>
 801661a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801661e:	d01b      	beq.n	8016658 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8016620:	e011      	b.n	8016646 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	3304      	adds	r3, #4
 8016626:	2100      	movs	r1, #0
 8016628:	4618      	mov	r0, r3
 801662a:	f000 fcdd 	bl	8016fe8 <RCCEx_PLL2_Config>
 801662e:	4603      	mov	r3, r0
 8016630:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8016632:	e012      	b.n	801665a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	3324      	adds	r3, #36	; 0x24
 8016638:	2102      	movs	r1, #2
 801663a:	4618      	mov	r0, r3
 801663c:	f000 fd86 	bl	801714c <RCCEx_PLL3_Config>
 8016640:	4603      	mov	r3, r0
 8016642:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8016644:	e009      	b.n	801665a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8016646:	2301      	movs	r3, #1
 8016648:	75fb      	strb	r3, [r7, #23]
      break;
 801664a:	e006      	b.n	801665a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 801664c:	bf00      	nop
 801664e:	e004      	b.n	801665a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8016650:	bf00      	nop
 8016652:	e002      	b.n	801665a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8016654:	bf00      	nop
 8016656:	e000      	b.n	801665a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8016658:	bf00      	nop
    }

    if(ret == HAL_OK)
 801665a:	7dfb      	ldrb	r3, [r7, #23]
 801665c:	2b00      	cmp	r3, #0
 801665e:	d10a      	bne.n	8016676 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8016660:	4b8c      	ldr	r3, [pc, #560]	; (8016894 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8016662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016664:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801666e:	4989      	ldr	r1, [pc, #548]	; (8016894 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8016670:	4313      	orrs	r3, r2
 8016672:	654b      	str	r3, [r1, #84]	; 0x54
 8016674:	e001      	b.n	801667a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016676:	7dfb      	ldrb	r3, [r7, #23]
 8016678:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	681b      	ldr	r3, [r3, #0]
 801667e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016682:	2b00      	cmp	r3, #0
 8016684:	d044      	beq.n	8016710 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801668c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016690:	d01b      	beq.n	80166ca <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8016692:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016696:	d805      	bhi.n	80166a4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8016698:	2b00      	cmp	r3, #0
 801669a:	d022      	beq.n	80166e2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 801669c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80166a0:	d00a      	beq.n	80166b8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80166a2:	e01b      	b.n	80166dc <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80166a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80166a8:	d01d      	beq.n	80166e6 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80166aa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80166ae:	d01c      	beq.n	80166ea <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80166b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80166b4:	d01b      	beq.n	80166ee <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80166b6:	e011      	b.n	80166dc <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	3304      	adds	r3, #4
 80166bc:	2100      	movs	r1, #0
 80166be:	4618      	mov	r0, r3
 80166c0:	f000 fc92 	bl	8016fe8 <RCCEx_PLL2_Config>
 80166c4:	4603      	mov	r3, r0
 80166c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80166c8:	e012      	b.n	80166f0 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	3324      	adds	r3, #36	; 0x24
 80166ce:	2102      	movs	r1, #2
 80166d0:	4618      	mov	r0, r3
 80166d2:	f000 fd3b 	bl	801714c <RCCEx_PLL3_Config>
 80166d6:	4603      	mov	r3, r0
 80166d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80166da:	e009      	b.n	80166f0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80166dc:	2301      	movs	r3, #1
 80166de:	75fb      	strb	r3, [r7, #23]
      break;
 80166e0:	e006      	b.n	80166f0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80166e2:	bf00      	nop
 80166e4:	e004      	b.n	80166f0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80166e6:	bf00      	nop
 80166e8:	e002      	b.n	80166f0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80166ea:	bf00      	nop
 80166ec:	e000      	b.n	80166f0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80166ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80166f0:	7dfb      	ldrb	r3, [r7, #23]
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d10a      	bne.n	801670c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80166f6:	4b67      	ldr	r3, [pc, #412]	; (8016894 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80166f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80166fa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016704:	4963      	ldr	r1, [pc, #396]	; (8016894 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8016706:	4313      	orrs	r3, r2
 8016708:	658b      	str	r3, [r1, #88]	; 0x58
 801670a:	e001      	b.n	8016710 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801670c:	7dfb      	ldrb	r3, [r7, #23]
 801670e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	681b      	ldr	r3, [r3, #0]
 8016714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016718:	2b00      	cmp	r3, #0
 801671a:	d044      	beq.n	80167a6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8016722:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016726:	d01b      	beq.n	8016760 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8016728:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801672c:	d805      	bhi.n	801673a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 801672e:	2b00      	cmp	r3, #0
 8016730:	d022      	beq.n	8016778 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8016732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8016736:	d00a      	beq.n	801674e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8016738:	e01b      	b.n	8016772 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 801673a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801673e:	d01d      	beq.n	801677c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8016740:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8016744:	d01c      	beq.n	8016780 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8016746:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 801674a:	d01b      	beq.n	8016784 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 801674c:	e011      	b.n	8016772 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	3304      	adds	r3, #4
 8016752:	2100      	movs	r1, #0
 8016754:	4618      	mov	r0, r3
 8016756:	f000 fc47 	bl	8016fe8 <RCCEx_PLL2_Config>
 801675a:	4603      	mov	r3, r0
 801675c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 801675e:	e012      	b.n	8016786 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	3324      	adds	r3, #36	; 0x24
 8016764:	2102      	movs	r1, #2
 8016766:	4618      	mov	r0, r3
 8016768:	f000 fcf0 	bl	801714c <RCCEx_PLL3_Config>
 801676c:	4603      	mov	r3, r0
 801676e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8016770:	e009      	b.n	8016786 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8016772:	2301      	movs	r3, #1
 8016774:	75fb      	strb	r3, [r7, #23]
      break;
 8016776:	e006      	b.n	8016786 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8016778:	bf00      	nop
 801677a:	e004      	b.n	8016786 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 801677c:	bf00      	nop
 801677e:	e002      	b.n	8016786 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8016780:	bf00      	nop
 8016782:	e000      	b.n	8016786 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8016784:	bf00      	nop
    }

    if(ret == HAL_OK)
 8016786:	7dfb      	ldrb	r3, [r7, #23]
 8016788:	2b00      	cmp	r3, #0
 801678a:	d10a      	bne.n	80167a2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801678c:	4b41      	ldr	r3, [pc, #260]	; (8016894 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801678e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016790:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801679a:	493e      	ldr	r1, [pc, #248]	; (8016894 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801679c:	4313      	orrs	r3, r2
 801679e:	658b      	str	r3, [r1, #88]	; 0x58
 80167a0:	e001      	b.n	80167a6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80167a2:	7dfb      	ldrb	r3, [r7, #23]
 80167a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	f003 0308 	and.w	r3, r3, #8
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	d01a      	beq.n	80167e8 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80167b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80167bc:	d10a      	bne.n	80167d4 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	3324      	adds	r3, #36	; 0x24
 80167c2:	2102      	movs	r1, #2
 80167c4:	4618      	mov	r0, r3
 80167c6:	f000 fcc1 	bl	801714c <RCCEx_PLL3_Config>
 80167ca:	4603      	mov	r3, r0
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	d001      	beq.n	80167d4 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80167d0:	2301      	movs	r3, #1
 80167d2:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80167d4:	4b2f      	ldr	r3, [pc, #188]	; (8016894 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80167d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80167d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80167e2:	492c      	ldr	r1, [pc, #176]	; (8016894 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80167e4:	4313      	orrs	r3, r2
 80167e6:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	681b      	ldr	r3, [r3, #0]
 80167ec:	f003 0310 	and.w	r3, r3, #16
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	d01a      	beq.n	801682a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80167fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80167fe:	d10a      	bne.n	8016816 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	3324      	adds	r3, #36	; 0x24
 8016804:	2102      	movs	r1, #2
 8016806:	4618      	mov	r0, r3
 8016808:	f000 fca0 	bl	801714c <RCCEx_PLL3_Config>
 801680c:	4603      	mov	r3, r0
 801680e:	2b00      	cmp	r3, #0
 8016810:	d001      	beq.n	8016816 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8016812:	2301      	movs	r3, #1
 8016814:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8016816:	4b1f      	ldr	r3, [pc, #124]	; (8016894 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8016818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801681a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016824:	491b      	ldr	r1, [pc, #108]	; (8016894 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8016826:	4313      	orrs	r3, r2
 8016828:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	681b      	ldr	r3, [r3, #0]
 801682e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8016832:	2b00      	cmp	r3, #0
 8016834:	d032      	beq.n	801689c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801683c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016840:	d00d      	beq.n	801685e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8016842:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8016846:	d016      	beq.n	8016876 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8016848:	2b00      	cmp	r3, #0
 801684a:	d111      	bne.n	8016870 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	3304      	adds	r3, #4
 8016850:	2100      	movs	r1, #0
 8016852:	4618      	mov	r0, r3
 8016854:	f000 fbc8 	bl	8016fe8 <RCCEx_PLL2_Config>
 8016858:	4603      	mov	r3, r0
 801685a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 801685c:	e00c      	b.n	8016878 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	3324      	adds	r3, #36	; 0x24
 8016862:	2102      	movs	r1, #2
 8016864:	4618      	mov	r0, r3
 8016866:	f000 fc71 	bl	801714c <RCCEx_PLL3_Config>
 801686a:	4603      	mov	r3, r0
 801686c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 801686e:	e003      	b.n	8016878 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8016870:	2301      	movs	r3, #1
 8016872:	75fb      	strb	r3, [r7, #23]
      break;
 8016874:	e000      	b.n	8016878 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8016876:	bf00      	nop
    }

    if(ret == HAL_OK)
 8016878:	7dfb      	ldrb	r3, [r7, #23]
 801687a:	2b00      	cmp	r3, #0
 801687c:	d10c      	bne.n	8016898 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801687e:	4b05      	ldr	r3, [pc, #20]	; (8016894 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8016880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016882:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801688c:	4901      	ldr	r1, [pc, #4]	; (8016894 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801688e:	4313      	orrs	r3, r2
 8016890:	658b      	str	r3, [r1, #88]	; 0x58
 8016892:	e003      	b.n	801689c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8016894:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016898:	7dfb      	ldrb	r3, [r7, #23]
 801689a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	681b      	ldr	r3, [r3, #0]
 80168a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80168a4:	2b00      	cmp	r3, #0
 80168a6:	d02f      	beq.n	8016908 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80168ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80168b2:	d00c      	beq.n	80168ce <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80168b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80168b8:	d015      	beq.n	80168e6 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80168ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80168be:	d10f      	bne.n	80168e0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80168c0:	4b71      	ldr	r3, [pc, #452]	; (8016a88 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80168c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80168c4:	4a70      	ldr	r2, [pc, #448]	; (8016a88 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80168c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80168ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80168cc:	e00c      	b.n	80168e8 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	3324      	adds	r3, #36	; 0x24
 80168d2:	2101      	movs	r1, #1
 80168d4:	4618      	mov	r0, r3
 80168d6:	f000 fc39 	bl	801714c <RCCEx_PLL3_Config>
 80168da:	4603      	mov	r3, r0
 80168dc:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80168de:	e003      	b.n	80168e8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80168e0:	2301      	movs	r3, #1
 80168e2:	75fb      	strb	r3, [r7, #23]
      break;
 80168e4:	e000      	b.n	80168e8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80168e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80168e8:	7dfb      	ldrb	r3, [r7, #23]
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d10a      	bne.n	8016904 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80168ee:	4b66      	ldr	r3, [pc, #408]	; (8016a88 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80168f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80168f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80168fc:	4962      	ldr	r1, [pc, #392]	; (8016a88 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80168fe:	4313      	orrs	r3, r2
 8016900:	654b      	str	r3, [r1, #84]	; 0x54
 8016902:	e001      	b.n	8016908 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016904:	7dfb      	ldrb	r3, [r7, #23]
 8016906:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016910:	2b00      	cmp	r3, #0
 8016912:	d029      	beq.n	8016968 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016918:	2b00      	cmp	r3, #0
 801691a:	d003      	beq.n	8016924 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 801691c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016920:	d007      	beq.n	8016932 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8016922:	e00f      	b.n	8016944 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8016924:	4b58      	ldr	r3, [pc, #352]	; (8016a88 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016928:	4a57      	ldr	r2, [pc, #348]	; (8016a88 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 801692a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801692e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8016930:	e00b      	b.n	801694a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	3304      	adds	r3, #4
 8016936:	2102      	movs	r1, #2
 8016938:	4618      	mov	r0, r3
 801693a:	f000 fb55 	bl	8016fe8 <RCCEx_PLL2_Config>
 801693e:	4603      	mov	r3, r0
 8016940:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8016942:	e002      	b.n	801694a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8016944:	2301      	movs	r3, #1
 8016946:	75fb      	strb	r3, [r7, #23]
      break;
 8016948:	bf00      	nop
    }

    if(ret == HAL_OK)
 801694a:	7dfb      	ldrb	r3, [r7, #23]
 801694c:	2b00      	cmp	r3, #0
 801694e:	d109      	bne.n	8016964 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8016950:	4b4d      	ldr	r3, [pc, #308]	; (8016a88 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016954:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801695c:	494a      	ldr	r1, [pc, #296]	; (8016a88 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 801695e:	4313      	orrs	r3, r2
 8016960:	64cb      	str	r3, [r1, #76]	; 0x4c
 8016962:	e001      	b.n	8016968 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016964:	7dfb      	ldrb	r3, [r7, #23]
 8016966:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	681b      	ldr	r3, [r3, #0]
 801696c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8016970:	2b00      	cmp	r3, #0
 8016972:	d00a      	beq.n	801698a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	3324      	adds	r3, #36	; 0x24
 8016978:	2102      	movs	r1, #2
 801697a:	4618      	mov	r0, r3
 801697c:	f000 fbe6 	bl	801714c <RCCEx_PLL3_Config>
 8016980:	4603      	mov	r3, r0
 8016982:	2b00      	cmp	r3, #0
 8016984:	d001      	beq.n	801698a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8016986:	2301      	movs	r3, #1
 8016988:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016992:	2b00      	cmp	r3, #0
 8016994:	d02f      	beq.n	80169f6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801699a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801699e:	d00c      	beq.n	80169ba <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80169a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80169a4:	d802      	bhi.n	80169ac <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d011      	beq.n	80169ce <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80169aa:	e00d      	b.n	80169c8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80169ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80169b0:	d00f      	beq.n	80169d2 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80169b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80169b6:	d00e      	beq.n	80169d6 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80169b8:	e006      	b.n	80169c8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80169ba:	4b33      	ldr	r3, [pc, #204]	; (8016a88 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80169bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169be:	4a32      	ldr	r2, [pc, #200]	; (8016a88 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80169c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80169c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80169c6:	e007      	b.n	80169d8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80169c8:	2301      	movs	r3, #1
 80169ca:	75fb      	strb	r3, [r7, #23]
      break;
 80169cc:	e004      	b.n	80169d8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80169ce:	bf00      	nop
 80169d0:	e002      	b.n	80169d8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80169d2:	bf00      	nop
 80169d4:	e000      	b.n	80169d8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80169d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80169d8:	7dfb      	ldrb	r3, [r7, #23]
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d109      	bne.n	80169f2 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80169de:	4b2a      	ldr	r3, [pc, #168]	; (8016a88 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80169e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80169e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80169ea:	4927      	ldr	r1, [pc, #156]	; (8016a88 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80169ec:	4313      	orrs	r3, r2
 80169ee:	654b      	str	r3, [r1, #84]	; 0x54
 80169f0:	e001      	b.n	80169f6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80169f2:	7dfb      	ldrb	r3, [r7, #23]
 80169f4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	681b      	ldr	r3, [r3, #0]
 80169fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d008      	beq.n	8016a14 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8016a02:	4b21      	ldr	r3, [pc, #132]	; (8016a88 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016a06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016a0e:	491e      	ldr	r1, [pc, #120]	; (8016a88 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016a10:	4313      	orrs	r3, r2
 8016a12:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	681b      	ldr	r3, [r3, #0]
 8016a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d008      	beq.n	8016a32 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8016a20:	4b19      	ldr	r3, [pc, #100]	; (8016a88 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016a24:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016a2c:	4916      	ldr	r1, [pc, #88]	; (8016a88 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016a2e:	4313      	orrs	r3, r2
 8016a30:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	681b      	ldr	r3, [r3, #0]
 8016a36:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d00d      	beq.n	8016a5a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8016a3e:	4b12      	ldr	r3, [pc, #72]	; (8016a88 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016a40:	691b      	ldr	r3, [r3, #16]
 8016a42:	4a11      	ldr	r2, [pc, #68]	; (8016a88 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016a44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8016a48:	6113      	str	r3, [r2, #16]
 8016a4a:	4b0f      	ldr	r3, [pc, #60]	; (8016a88 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016a4c:	691a      	ldr	r2, [r3, #16]
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8016a54:	490c      	ldr	r1, [pc, #48]	; (8016a88 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016a56:	4313      	orrs	r3, r2
 8016a58:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	681b      	ldr	r3, [r3, #0]
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	da08      	bge.n	8016a74 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8016a62:	4b09      	ldr	r3, [pc, #36]	; (8016a88 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016a66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016a6e:	4906      	ldr	r1, [pc, #24]	; (8016a88 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016a70:	4313      	orrs	r3, r2
 8016a72:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8016a74:	7dbb      	ldrb	r3, [r7, #22]
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d101      	bne.n	8016a7e <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8016a7a:	2300      	movs	r3, #0
 8016a7c:	e000      	b.n	8016a80 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8016a7e:	2301      	movs	r3, #1
}
 8016a80:	4618      	mov	r0, r3
 8016a82:	3718      	adds	r7, #24
 8016a84:	46bd      	mov	sp, r7
 8016a86:	bd80      	pop	{r7, pc}
 8016a88:	58024400 	.word	0x58024400

08016a8c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8016a8c:	b580      	push	{r7, lr}
 8016a8e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8016a90:	f7ff f8c2 	bl	8015c18 <HAL_RCC_GetHCLKFreq>
 8016a94:	4601      	mov	r1, r0
 8016a96:	4b06      	ldr	r3, [pc, #24]	; (8016ab0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8016a98:	6a1b      	ldr	r3, [r3, #32]
 8016a9a:	091b      	lsrs	r3, r3, #4
 8016a9c:	f003 0307 	and.w	r3, r3, #7
 8016aa0:	4a04      	ldr	r2, [pc, #16]	; (8016ab4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8016aa2:	5cd3      	ldrb	r3, [r2, r3]
 8016aa4:	f003 031f 	and.w	r3, r3, #31
 8016aa8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8016aac:	4618      	mov	r0, r3
 8016aae:	bd80      	pop	{r7, pc}
 8016ab0:	58024400 	.word	0x58024400
 8016ab4:	0801fa40 	.word	0x0801fa40

08016ab8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8016ab8:	b480      	push	{r7}
 8016aba:	b089      	sub	sp, #36	; 0x24
 8016abc:	af00      	add	r7, sp, #0
 8016abe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8016ac0:	4b9d      	ldr	r3, [pc, #628]	; (8016d38 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016ac4:	f003 0303 	and.w	r3, r3, #3
 8016ac8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8016aca:	4b9b      	ldr	r3, [pc, #620]	; (8016d38 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016ace:	0b1b      	lsrs	r3, r3, #12
 8016ad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016ad4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8016ad6:	4b98      	ldr	r3, [pc, #608]	; (8016d38 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ada:	091b      	lsrs	r3, r3, #4
 8016adc:	f003 0301 	and.w	r3, r3, #1
 8016ae0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8016ae2:	4b95      	ldr	r3, [pc, #596]	; (8016d38 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016ae6:	08db      	lsrs	r3, r3, #3
 8016ae8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016aec:	693a      	ldr	r2, [r7, #16]
 8016aee:	fb02 f303 	mul.w	r3, r2, r3
 8016af2:	ee07 3a90 	vmov	s15, r3
 8016af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016afa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8016afe:	697b      	ldr	r3, [r7, #20]
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	f000 810a 	beq.w	8016d1a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8016b06:	69bb      	ldr	r3, [r7, #24]
 8016b08:	2b01      	cmp	r3, #1
 8016b0a:	d05a      	beq.n	8016bc2 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8016b0c:	2b01      	cmp	r3, #1
 8016b0e:	d302      	bcc.n	8016b16 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8016b10:	2b02      	cmp	r3, #2
 8016b12:	d078      	beq.n	8016c06 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8016b14:	e099      	b.n	8016c4a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016b16:	4b88      	ldr	r3, [pc, #544]	; (8016d38 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016b18:	681b      	ldr	r3, [r3, #0]
 8016b1a:	f003 0320 	and.w	r3, r3, #32
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	d02d      	beq.n	8016b7e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8016b22:	4b85      	ldr	r3, [pc, #532]	; (8016d38 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016b24:	681b      	ldr	r3, [r3, #0]
 8016b26:	08db      	lsrs	r3, r3, #3
 8016b28:	f003 0303 	and.w	r3, r3, #3
 8016b2c:	4a83      	ldr	r2, [pc, #524]	; (8016d3c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8016b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8016b32:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8016b34:	68bb      	ldr	r3, [r7, #8]
 8016b36:	ee07 3a90 	vmov	s15, r3
 8016b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016b3e:	697b      	ldr	r3, [r7, #20]
 8016b40:	ee07 3a90 	vmov	s15, r3
 8016b44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016b48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016b4c:	4b7a      	ldr	r3, [pc, #488]	; (8016d38 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016b54:	ee07 3a90 	vmov	s15, r3
 8016b58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016b5c:	ed97 6a03 	vldr	s12, [r7, #12]
 8016b60:	eddf 5a77 	vldr	s11, [pc, #476]	; 8016d40 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8016b64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016b68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016b6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016b70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016b74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016b78:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8016b7c:	e087      	b.n	8016c8e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8016b7e:	697b      	ldr	r3, [r7, #20]
 8016b80:	ee07 3a90 	vmov	s15, r3
 8016b84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016b88:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8016d44 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8016b8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016b90:	4b69      	ldr	r3, [pc, #420]	; (8016d38 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016b98:	ee07 3a90 	vmov	s15, r3
 8016b9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016ba0:	ed97 6a03 	vldr	s12, [r7, #12]
 8016ba4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8016d40 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8016ba8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016bac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016bb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016bb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016bbc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8016bc0:	e065      	b.n	8016c8e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8016bc2:	697b      	ldr	r3, [r7, #20]
 8016bc4:	ee07 3a90 	vmov	s15, r3
 8016bc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016bcc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8016d48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8016bd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016bd4:	4b58      	ldr	r3, [pc, #352]	; (8016d38 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016bdc:	ee07 3a90 	vmov	s15, r3
 8016be0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016be4:	ed97 6a03 	vldr	s12, [r7, #12]
 8016be8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8016d40 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8016bec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016bf0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016bf4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016bf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016bfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016c00:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8016c04:	e043      	b.n	8016c8e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8016c06:	697b      	ldr	r3, [r7, #20]
 8016c08:	ee07 3a90 	vmov	s15, r3
 8016c0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016c10:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8016d4c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8016c14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016c18:	4b47      	ldr	r3, [pc, #284]	; (8016d38 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016c20:	ee07 3a90 	vmov	s15, r3
 8016c24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016c28:	ed97 6a03 	vldr	s12, [r7, #12]
 8016c2c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8016d40 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8016c30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016c34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016c38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016c3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016c44:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8016c48:	e021      	b.n	8016c8e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8016c4a:	697b      	ldr	r3, [r7, #20]
 8016c4c:	ee07 3a90 	vmov	s15, r3
 8016c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016c54:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8016d48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8016c58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016c5c:	4b36      	ldr	r3, [pc, #216]	; (8016d38 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016c64:	ee07 3a90 	vmov	s15, r3
 8016c68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016c6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8016c70:	eddf 5a33 	vldr	s11, [pc, #204]	; 8016d40 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8016c74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016c78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016c7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016c80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016c84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016c88:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8016c8c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8016c8e:	4b2a      	ldr	r3, [pc, #168]	; (8016d38 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c92:	0a5b      	lsrs	r3, r3, #9
 8016c94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016c98:	ee07 3a90 	vmov	s15, r3
 8016c9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016ca0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016ca4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016ca8:	edd7 6a07 	vldr	s13, [r7, #28]
 8016cac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016cb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016cb4:	ee17 2a90 	vmov	r2, s15
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8016cbc:	4b1e      	ldr	r3, [pc, #120]	; (8016d38 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016cc0:	0c1b      	lsrs	r3, r3, #16
 8016cc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016cc6:	ee07 3a90 	vmov	s15, r3
 8016cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016cce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016cd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016cd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8016cda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016cde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016ce2:	ee17 2a90 	vmov	r2, s15
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8016cea:	4b13      	ldr	r3, [pc, #76]	; (8016d38 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016cee:	0e1b      	lsrs	r3, r3, #24
 8016cf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016cf4:	ee07 3a90 	vmov	s15, r3
 8016cf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016cfc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016d00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016d04:	edd7 6a07 	vldr	s13, [r7, #28]
 8016d08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016d0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016d10:	ee17 2a90 	vmov	r2, s15
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8016d18:	e008      	b.n	8016d2c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	2200      	movs	r2, #0
 8016d1e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	2200      	movs	r2, #0
 8016d24:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	2200      	movs	r2, #0
 8016d2a:	609a      	str	r2, [r3, #8]
}
 8016d2c:	bf00      	nop
 8016d2e:	3724      	adds	r7, #36	; 0x24
 8016d30:	46bd      	mov	sp, r7
 8016d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d36:	4770      	bx	lr
 8016d38:	58024400 	.word	0x58024400
 8016d3c:	03d09000 	.word	0x03d09000
 8016d40:	46000000 	.word	0x46000000
 8016d44:	4c742400 	.word	0x4c742400
 8016d48:	4a742400 	.word	0x4a742400
 8016d4c:	4af42400 	.word	0x4af42400

08016d50 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8016d50:	b480      	push	{r7}
 8016d52:	b089      	sub	sp, #36	; 0x24
 8016d54:	af00      	add	r7, sp, #0
 8016d56:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8016d58:	4b9d      	ldr	r3, [pc, #628]	; (8016fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d5c:	f003 0303 	and.w	r3, r3, #3
 8016d60:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8016d62:	4b9b      	ldr	r3, [pc, #620]	; (8016fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d66:	0d1b      	lsrs	r3, r3, #20
 8016d68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016d6c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8016d6e:	4b98      	ldr	r3, [pc, #608]	; (8016fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d72:	0a1b      	lsrs	r3, r3, #8
 8016d74:	f003 0301 	and.w	r3, r3, #1
 8016d78:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8016d7a:	4b95      	ldr	r3, [pc, #596]	; (8016fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016d7e:	08db      	lsrs	r3, r3, #3
 8016d80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016d84:	693a      	ldr	r2, [r7, #16]
 8016d86:	fb02 f303 	mul.w	r3, r2, r3
 8016d8a:	ee07 3a90 	vmov	s15, r3
 8016d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016d92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8016d96:	697b      	ldr	r3, [r7, #20]
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	f000 810a 	beq.w	8016fb2 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8016d9e:	69bb      	ldr	r3, [r7, #24]
 8016da0:	2b01      	cmp	r3, #1
 8016da2:	d05a      	beq.n	8016e5a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8016da4:	2b01      	cmp	r3, #1
 8016da6:	d302      	bcc.n	8016dae <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8016da8:	2b02      	cmp	r3, #2
 8016daa:	d078      	beq.n	8016e9e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8016dac:	e099      	b.n	8016ee2 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016dae:	4b88      	ldr	r3, [pc, #544]	; (8016fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016db0:	681b      	ldr	r3, [r3, #0]
 8016db2:	f003 0320 	and.w	r3, r3, #32
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	d02d      	beq.n	8016e16 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8016dba:	4b85      	ldr	r3, [pc, #532]	; (8016fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016dbc:	681b      	ldr	r3, [r3, #0]
 8016dbe:	08db      	lsrs	r3, r3, #3
 8016dc0:	f003 0303 	and.w	r3, r3, #3
 8016dc4:	4a83      	ldr	r2, [pc, #524]	; (8016fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8016dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8016dca:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8016dcc:	68bb      	ldr	r3, [r7, #8]
 8016dce:	ee07 3a90 	vmov	s15, r3
 8016dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016dd6:	697b      	ldr	r3, [r7, #20]
 8016dd8:	ee07 3a90 	vmov	s15, r3
 8016ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016de0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016de4:	4b7a      	ldr	r3, [pc, #488]	; (8016fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016de8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016dec:	ee07 3a90 	vmov	s15, r3
 8016df0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016df4:	ed97 6a03 	vldr	s12, [r7, #12]
 8016df8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8016fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8016dfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016e00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016e04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016e08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016e0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016e10:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8016e14:	e087      	b.n	8016f26 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8016e16:	697b      	ldr	r3, [r7, #20]
 8016e18:	ee07 3a90 	vmov	s15, r3
 8016e1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016e20:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8016fdc <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8016e24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016e28:	4b69      	ldr	r3, [pc, #420]	; (8016fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016e30:	ee07 3a90 	vmov	s15, r3
 8016e34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016e38:	ed97 6a03 	vldr	s12, [r7, #12]
 8016e3c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8016fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8016e40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016e44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016e48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016e4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016e54:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8016e58:	e065      	b.n	8016f26 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8016e5a:	697b      	ldr	r3, [r7, #20]
 8016e5c:	ee07 3a90 	vmov	s15, r3
 8016e60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016e64:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8016fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8016e68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016e6c:	4b58      	ldr	r3, [pc, #352]	; (8016fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016e74:	ee07 3a90 	vmov	s15, r3
 8016e78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016e7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8016e80:	eddf 5a55 	vldr	s11, [pc, #340]	; 8016fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8016e84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016e88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016e8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016e90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016e98:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8016e9c:	e043      	b.n	8016f26 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8016e9e:	697b      	ldr	r3, [r7, #20]
 8016ea0:	ee07 3a90 	vmov	s15, r3
 8016ea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016ea8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8016fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8016eac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016eb0:	4b47      	ldr	r3, [pc, #284]	; (8016fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016eb8:	ee07 3a90 	vmov	s15, r3
 8016ebc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016ec0:	ed97 6a03 	vldr	s12, [r7, #12]
 8016ec4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8016fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8016ec8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016ecc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016ed0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016ed4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016edc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8016ee0:	e021      	b.n	8016f26 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8016ee2:	697b      	ldr	r3, [r7, #20]
 8016ee4:	ee07 3a90 	vmov	s15, r3
 8016ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016eec:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8016fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8016ef0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016ef4:	4b36      	ldr	r3, [pc, #216]	; (8016fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016efc:	ee07 3a90 	vmov	s15, r3
 8016f00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016f04:	ed97 6a03 	vldr	s12, [r7, #12]
 8016f08:	eddf 5a33 	vldr	s11, [pc, #204]	; 8016fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8016f0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016f10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016f14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016f18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016f20:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8016f24:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8016f26:	4b2a      	ldr	r3, [pc, #168]	; (8016fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f2a:	0a5b      	lsrs	r3, r3, #9
 8016f2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016f30:	ee07 3a90 	vmov	s15, r3
 8016f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016f38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016f3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016f40:	edd7 6a07 	vldr	s13, [r7, #28]
 8016f44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016f48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016f4c:	ee17 2a90 	vmov	r2, s15
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8016f54:	4b1e      	ldr	r3, [pc, #120]	; (8016fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f58:	0c1b      	lsrs	r3, r3, #16
 8016f5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016f5e:	ee07 3a90 	vmov	s15, r3
 8016f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016f66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016f6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016f6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8016f72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016f76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016f7a:	ee17 2a90 	vmov	r2, s15
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8016f82:	4b13      	ldr	r3, [pc, #76]	; (8016fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f86:	0e1b      	lsrs	r3, r3, #24
 8016f88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016f8c:	ee07 3a90 	vmov	s15, r3
 8016f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016f94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016f98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016f9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8016fa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016fa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016fa8:	ee17 2a90 	vmov	r2, s15
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8016fb0:	e008      	b.n	8016fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	2200      	movs	r2, #0
 8016fb6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	2200      	movs	r2, #0
 8016fbc:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	2200      	movs	r2, #0
 8016fc2:	609a      	str	r2, [r3, #8]
}
 8016fc4:	bf00      	nop
 8016fc6:	3724      	adds	r7, #36	; 0x24
 8016fc8:	46bd      	mov	sp, r7
 8016fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fce:	4770      	bx	lr
 8016fd0:	58024400 	.word	0x58024400
 8016fd4:	03d09000 	.word	0x03d09000
 8016fd8:	46000000 	.word	0x46000000
 8016fdc:	4c742400 	.word	0x4c742400
 8016fe0:	4a742400 	.word	0x4a742400
 8016fe4:	4af42400 	.word	0x4af42400

08016fe8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8016fe8:	b580      	push	{r7, lr}
 8016fea:	b084      	sub	sp, #16
 8016fec:	af00      	add	r7, sp, #0
 8016fee:	6078      	str	r0, [r7, #4]
 8016ff0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8016ff2:	2300      	movs	r3, #0
 8016ff4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8016ff6:	4b53      	ldr	r3, [pc, #332]	; (8017144 <RCCEx_PLL2_Config+0x15c>)
 8016ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016ffa:	f003 0303 	and.w	r3, r3, #3
 8016ffe:	2b03      	cmp	r3, #3
 8017000:	d101      	bne.n	8017006 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8017002:	2301      	movs	r3, #1
 8017004:	e099      	b.n	801713a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8017006:	4b4f      	ldr	r3, [pc, #316]	; (8017144 <RCCEx_PLL2_Config+0x15c>)
 8017008:	681b      	ldr	r3, [r3, #0]
 801700a:	4a4e      	ldr	r2, [pc, #312]	; (8017144 <RCCEx_PLL2_Config+0x15c>)
 801700c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8017010:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8017012:	f7fb ff53 	bl	8012ebc <HAL_GetTick>
 8017016:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8017018:	e008      	b.n	801702c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 801701a:	f7fb ff4f 	bl	8012ebc <HAL_GetTick>
 801701e:	4602      	mov	r2, r0
 8017020:	68bb      	ldr	r3, [r7, #8]
 8017022:	1ad3      	subs	r3, r2, r3
 8017024:	2b02      	cmp	r3, #2
 8017026:	d901      	bls.n	801702c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8017028:	2303      	movs	r3, #3
 801702a:	e086      	b.n	801713a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801702c:	4b45      	ldr	r3, [pc, #276]	; (8017144 <RCCEx_PLL2_Config+0x15c>)
 801702e:	681b      	ldr	r3, [r3, #0]
 8017030:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8017034:	2b00      	cmp	r3, #0
 8017036:	d1f0      	bne.n	801701a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8017038:	4b42      	ldr	r3, [pc, #264]	; (8017144 <RCCEx_PLL2_Config+0x15c>)
 801703a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801703c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	681b      	ldr	r3, [r3, #0]
 8017044:	031b      	lsls	r3, r3, #12
 8017046:	493f      	ldr	r1, [pc, #252]	; (8017144 <RCCEx_PLL2_Config+0x15c>)
 8017048:	4313      	orrs	r3, r2
 801704a:	628b      	str	r3, [r1, #40]	; 0x28
 801704c:	687b      	ldr	r3, [r7, #4]
 801704e:	685b      	ldr	r3, [r3, #4]
 8017050:	3b01      	subs	r3, #1
 8017052:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	689b      	ldr	r3, [r3, #8]
 801705a:	3b01      	subs	r3, #1
 801705c:	025b      	lsls	r3, r3, #9
 801705e:	b29b      	uxth	r3, r3
 8017060:	431a      	orrs	r2, r3
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	68db      	ldr	r3, [r3, #12]
 8017066:	3b01      	subs	r3, #1
 8017068:	041b      	lsls	r3, r3, #16
 801706a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801706e:	431a      	orrs	r2, r3
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	691b      	ldr	r3, [r3, #16]
 8017074:	3b01      	subs	r3, #1
 8017076:	061b      	lsls	r3, r3, #24
 8017078:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801707c:	4931      	ldr	r1, [pc, #196]	; (8017144 <RCCEx_PLL2_Config+0x15c>)
 801707e:	4313      	orrs	r3, r2
 8017080:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8017082:	4b30      	ldr	r3, [pc, #192]	; (8017144 <RCCEx_PLL2_Config+0x15c>)
 8017084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017086:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	695b      	ldr	r3, [r3, #20]
 801708e:	492d      	ldr	r1, [pc, #180]	; (8017144 <RCCEx_PLL2_Config+0x15c>)
 8017090:	4313      	orrs	r3, r2
 8017092:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8017094:	4b2b      	ldr	r3, [pc, #172]	; (8017144 <RCCEx_PLL2_Config+0x15c>)
 8017096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017098:	f023 0220 	bic.w	r2, r3, #32
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	699b      	ldr	r3, [r3, #24]
 80170a0:	4928      	ldr	r1, [pc, #160]	; (8017144 <RCCEx_PLL2_Config+0x15c>)
 80170a2:	4313      	orrs	r3, r2
 80170a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80170a6:	4b27      	ldr	r3, [pc, #156]	; (8017144 <RCCEx_PLL2_Config+0x15c>)
 80170a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170aa:	4a26      	ldr	r2, [pc, #152]	; (8017144 <RCCEx_PLL2_Config+0x15c>)
 80170ac:	f023 0310 	bic.w	r3, r3, #16
 80170b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80170b2:	4b24      	ldr	r3, [pc, #144]	; (8017144 <RCCEx_PLL2_Config+0x15c>)
 80170b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80170b6:	4b24      	ldr	r3, [pc, #144]	; (8017148 <RCCEx_PLL2_Config+0x160>)
 80170b8:	4013      	ands	r3, r2
 80170ba:	687a      	ldr	r2, [r7, #4]
 80170bc:	69d2      	ldr	r2, [r2, #28]
 80170be:	00d2      	lsls	r2, r2, #3
 80170c0:	4920      	ldr	r1, [pc, #128]	; (8017144 <RCCEx_PLL2_Config+0x15c>)
 80170c2:	4313      	orrs	r3, r2
 80170c4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80170c6:	4b1f      	ldr	r3, [pc, #124]	; (8017144 <RCCEx_PLL2_Config+0x15c>)
 80170c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170ca:	4a1e      	ldr	r2, [pc, #120]	; (8017144 <RCCEx_PLL2_Config+0x15c>)
 80170cc:	f043 0310 	orr.w	r3, r3, #16
 80170d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80170d2:	683b      	ldr	r3, [r7, #0]
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	d106      	bne.n	80170e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80170d8:	4b1a      	ldr	r3, [pc, #104]	; (8017144 <RCCEx_PLL2_Config+0x15c>)
 80170da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170dc:	4a19      	ldr	r2, [pc, #100]	; (8017144 <RCCEx_PLL2_Config+0x15c>)
 80170de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80170e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80170e4:	e00f      	b.n	8017106 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80170e6:	683b      	ldr	r3, [r7, #0]
 80170e8:	2b01      	cmp	r3, #1
 80170ea:	d106      	bne.n	80170fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80170ec:	4b15      	ldr	r3, [pc, #84]	; (8017144 <RCCEx_PLL2_Config+0x15c>)
 80170ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170f0:	4a14      	ldr	r2, [pc, #80]	; (8017144 <RCCEx_PLL2_Config+0x15c>)
 80170f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80170f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80170f8:	e005      	b.n	8017106 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80170fa:	4b12      	ldr	r3, [pc, #72]	; (8017144 <RCCEx_PLL2_Config+0x15c>)
 80170fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170fe:	4a11      	ldr	r2, [pc, #68]	; (8017144 <RCCEx_PLL2_Config+0x15c>)
 8017100:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8017104:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8017106:	4b0f      	ldr	r3, [pc, #60]	; (8017144 <RCCEx_PLL2_Config+0x15c>)
 8017108:	681b      	ldr	r3, [r3, #0]
 801710a:	4a0e      	ldr	r2, [pc, #56]	; (8017144 <RCCEx_PLL2_Config+0x15c>)
 801710c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8017110:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8017112:	f7fb fed3 	bl	8012ebc <HAL_GetTick>
 8017116:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8017118:	e008      	b.n	801712c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 801711a:	f7fb fecf 	bl	8012ebc <HAL_GetTick>
 801711e:	4602      	mov	r2, r0
 8017120:	68bb      	ldr	r3, [r7, #8]
 8017122:	1ad3      	subs	r3, r2, r3
 8017124:	2b02      	cmp	r3, #2
 8017126:	d901      	bls.n	801712c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8017128:	2303      	movs	r3, #3
 801712a:	e006      	b.n	801713a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801712c:	4b05      	ldr	r3, [pc, #20]	; (8017144 <RCCEx_PLL2_Config+0x15c>)
 801712e:	681b      	ldr	r3, [r3, #0]
 8017130:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8017134:	2b00      	cmp	r3, #0
 8017136:	d0f0      	beq.n	801711a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8017138:	7bfb      	ldrb	r3, [r7, #15]
}
 801713a:	4618      	mov	r0, r3
 801713c:	3710      	adds	r7, #16
 801713e:	46bd      	mov	sp, r7
 8017140:	bd80      	pop	{r7, pc}
 8017142:	bf00      	nop
 8017144:	58024400 	.word	0x58024400
 8017148:	ffff0007 	.word	0xffff0007

0801714c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801714c:	b580      	push	{r7, lr}
 801714e:	b084      	sub	sp, #16
 8017150:	af00      	add	r7, sp, #0
 8017152:	6078      	str	r0, [r7, #4]
 8017154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8017156:	2300      	movs	r3, #0
 8017158:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801715a:	4b53      	ldr	r3, [pc, #332]	; (80172a8 <RCCEx_PLL3_Config+0x15c>)
 801715c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801715e:	f003 0303 	and.w	r3, r3, #3
 8017162:	2b03      	cmp	r3, #3
 8017164:	d101      	bne.n	801716a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8017166:	2301      	movs	r3, #1
 8017168:	e099      	b.n	801729e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801716a:	4b4f      	ldr	r3, [pc, #316]	; (80172a8 <RCCEx_PLL3_Config+0x15c>)
 801716c:	681b      	ldr	r3, [r3, #0]
 801716e:	4a4e      	ldr	r2, [pc, #312]	; (80172a8 <RCCEx_PLL3_Config+0x15c>)
 8017170:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8017174:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8017176:	f7fb fea1 	bl	8012ebc <HAL_GetTick>
 801717a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801717c:	e008      	b.n	8017190 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 801717e:	f7fb fe9d 	bl	8012ebc <HAL_GetTick>
 8017182:	4602      	mov	r2, r0
 8017184:	68bb      	ldr	r3, [r7, #8]
 8017186:	1ad3      	subs	r3, r2, r3
 8017188:	2b02      	cmp	r3, #2
 801718a:	d901      	bls.n	8017190 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801718c:	2303      	movs	r3, #3
 801718e:	e086      	b.n	801729e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8017190:	4b45      	ldr	r3, [pc, #276]	; (80172a8 <RCCEx_PLL3_Config+0x15c>)
 8017192:	681b      	ldr	r3, [r3, #0]
 8017194:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8017198:	2b00      	cmp	r3, #0
 801719a:	d1f0      	bne.n	801717e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801719c:	4b42      	ldr	r3, [pc, #264]	; (80172a8 <RCCEx_PLL3_Config+0x15c>)
 801719e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80171a0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	681b      	ldr	r3, [r3, #0]
 80171a8:	051b      	lsls	r3, r3, #20
 80171aa:	493f      	ldr	r1, [pc, #252]	; (80172a8 <RCCEx_PLL3_Config+0x15c>)
 80171ac:	4313      	orrs	r3, r2
 80171ae:	628b      	str	r3, [r1, #40]	; 0x28
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	685b      	ldr	r3, [r3, #4]
 80171b4:	3b01      	subs	r3, #1
 80171b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	689b      	ldr	r3, [r3, #8]
 80171be:	3b01      	subs	r3, #1
 80171c0:	025b      	lsls	r3, r3, #9
 80171c2:	b29b      	uxth	r3, r3
 80171c4:	431a      	orrs	r2, r3
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	68db      	ldr	r3, [r3, #12]
 80171ca:	3b01      	subs	r3, #1
 80171cc:	041b      	lsls	r3, r3, #16
 80171ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80171d2:	431a      	orrs	r2, r3
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	691b      	ldr	r3, [r3, #16]
 80171d8:	3b01      	subs	r3, #1
 80171da:	061b      	lsls	r3, r3, #24
 80171dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80171e0:	4931      	ldr	r1, [pc, #196]	; (80172a8 <RCCEx_PLL3_Config+0x15c>)
 80171e2:	4313      	orrs	r3, r2
 80171e4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80171e6:	4b30      	ldr	r3, [pc, #192]	; (80172a8 <RCCEx_PLL3_Config+0x15c>)
 80171e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	695b      	ldr	r3, [r3, #20]
 80171f2:	492d      	ldr	r1, [pc, #180]	; (80172a8 <RCCEx_PLL3_Config+0x15c>)
 80171f4:	4313      	orrs	r3, r2
 80171f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80171f8:	4b2b      	ldr	r3, [pc, #172]	; (80172a8 <RCCEx_PLL3_Config+0x15c>)
 80171fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171fc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	699b      	ldr	r3, [r3, #24]
 8017204:	4928      	ldr	r1, [pc, #160]	; (80172a8 <RCCEx_PLL3_Config+0x15c>)
 8017206:	4313      	orrs	r3, r2
 8017208:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801720a:	4b27      	ldr	r3, [pc, #156]	; (80172a8 <RCCEx_PLL3_Config+0x15c>)
 801720c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801720e:	4a26      	ldr	r2, [pc, #152]	; (80172a8 <RCCEx_PLL3_Config+0x15c>)
 8017210:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017214:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8017216:	4b24      	ldr	r3, [pc, #144]	; (80172a8 <RCCEx_PLL3_Config+0x15c>)
 8017218:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801721a:	4b24      	ldr	r3, [pc, #144]	; (80172ac <RCCEx_PLL3_Config+0x160>)
 801721c:	4013      	ands	r3, r2
 801721e:	687a      	ldr	r2, [r7, #4]
 8017220:	69d2      	ldr	r2, [r2, #28]
 8017222:	00d2      	lsls	r2, r2, #3
 8017224:	4920      	ldr	r1, [pc, #128]	; (80172a8 <RCCEx_PLL3_Config+0x15c>)
 8017226:	4313      	orrs	r3, r2
 8017228:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801722a:	4b1f      	ldr	r3, [pc, #124]	; (80172a8 <RCCEx_PLL3_Config+0x15c>)
 801722c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801722e:	4a1e      	ldr	r2, [pc, #120]	; (80172a8 <RCCEx_PLL3_Config+0x15c>)
 8017230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017234:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8017236:	683b      	ldr	r3, [r7, #0]
 8017238:	2b00      	cmp	r3, #0
 801723a:	d106      	bne.n	801724a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801723c:	4b1a      	ldr	r3, [pc, #104]	; (80172a8 <RCCEx_PLL3_Config+0x15c>)
 801723e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017240:	4a19      	ldr	r2, [pc, #100]	; (80172a8 <RCCEx_PLL3_Config+0x15c>)
 8017242:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8017246:	62d3      	str	r3, [r2, #44]	; 0x2c
 8017248:	e00f      	b.n	801726a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 801724a:	683b      	ldr	r3, [r7, #0]
 801724c:	2b01      	cmp	r3, #1
 801724e:	d106      	bne.n	801725e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8017250:	4b15      	ldr	r3, [pc, #84]	; (80172a8 <RCCEx_PLL3_Config+0x15c>)
 8017252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017254:	4a14      	ldr	r2, [pc, #80]	; (80172a8 <RCCEx_PLL3_Config+0x15c>)
 8017256:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801725a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801725c:	e005      	b.n	801726a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801725e:	4b12      	ldr	r3, [pc, #72]	; (80172a8 <RCCEx_PLL3_Config+0x15c>)
 8017260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017262:	4a11      	ldr	r2, [pc, #68]	; (80172a8 <RCCEx_PLL3_Config+0x15c>)
 8017264:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8017268:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801726a:	4b0f      	ldr	r3, [pc, #60]	; (80172a8 <RCCEx_PLL3_Config+0x15c>)
 801726c:	681b      	ldr	r3, [r3, #0]
 801726e:	4a0e      	ldr	r2, [pc, #56]	; (80172a8 <RCCEx_PLL3_Config+0x15c>)
 8017270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017274:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8017276:	f7fb fe21 	bl	8012ebc <HAL_GetTick>
 801727a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801727c:	e008      	b.n	8017290 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 801727e:	f7fb fe1d 	bl	8012ebc <HAL_GetTick>
 8017282:	4602      	mov	r2, r0
 8017284:	68bb      	ldr	r3, [r7, #8]
 8017286:	1ad3      	subs	r3, r2, r3
 8017288:	2b02      	cmp	r3, #2
 801728a:	d901      	bls.n	8017290 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801728c:	2303      	movs	r3, #3
 801728e:	e006      	b.n	801729e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8017290:	4b05      	ldr	r3, [pc, #20]	; (80172a8 <RCCEx_PLL3_Config+0x15c>)
 8017292:	681b      	ldr	r3, [r3, #0]
 8017294:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8017298:	2b00      	cmp	r3, #0
 801729a:	d0f0      	beq.n	801727e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801729c:	7bfb      	ldrb	r3, [r7, #15]
}
 801729e:	4618      	mov	r0, r3
 80172a0:	3710      	adds	r7, #16
 80172a2:	46bd      	mov	sp, r7
 80172a4:	bd80      	pop	{r7, pc}
 80172a6:	bf00      	nop
 80172a8:	58024400 	.word	0x58024400
 80172ac:	ffff0007 	.word	0xffff0007

080172b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80172b0:	b580      	push	{r7, lr}
 80172b2:	b082      	sub	sp, #8
 80172b4:	af00      	add	r7, sp, #0
 80172b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d101      	bne.n	80172c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80172be:	2301      	movs	r3, #1
 80172c0:	e01d      	b.n	80172fe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80172c2:	687b      	ldr	r3, [r7, #4]
 80172c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80172c8:	b2db      	uxtb	r3, r3
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d106      	bne.n	80172dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	2200      	movs	r2, #0
 80172d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80172d6:	6878      	ldr	r0, [r7, #4]
 80172d8:	f7eb f89c 	bl	8002414 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	2202      	movs	r2, #2
 80172e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	681a      	ldr	r2, [r3, #0]
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	3304      	adds	r3, #4
 80172ec:	4619      	mov	r1, r3
 80172ee:	4610      	mov	r0, r2
 80172f0:	f000 fb18 	bl	8017924 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	2201      	movs	r2, #1
 80172f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80172fc:	2300      	movs	r3, #0
}
 80172fe:	4618      	mov	r0, r3
 8017300:	3708      	adds	r7, #8
 8017302:	46bd      	mov	sp, r7
 8017304:	bd80      	pop	{r7, pc}
	...

08017308 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8017308:	b480      	push	{r7}
 801730a:	b085      	sub	sp, #20
 801730c:	af00      	add	r7, sp, #0
 801730e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	681b      	ldr	r3, [r3, #0]
 8017314:	68da      	ldr	r2, [r3, #12]
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	681b      	ldr	r3, [r3, #0]
 801731a:	f042 0201 	orr.w	r2, r2, #1
 801731e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	681b      	ldr	r3, [r3, #0]
 8017324:	689a      	ldr	r2, [r3, #8]
 8017326:	4b0c      	ldr	r3, [pc, #48]	; (8017358 <HAL_TIM_Base_Start_IT+0x50>)
 8017328:	4013      	ands	r3, r2
 801732a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801732c:	68fb      	ldr	r3, [r7, #12]
 801732e:	2b06      	cmp	r3, #6
 8017330:	d00b      	beq.n	801734a <HAL_TIM_Base_Start_IT+0x42>
 8017332:	68fb      	ldr	r3, [r7, #12]
 8017334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017338:	d007      	beq.n	801734a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	681b      	ldr	r3, [r3, #0]
 801733e:	681a      	ldr	r2, [r3, #0]
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	681b      	ldr	r3, [r3, #0]
 8017344:	f042 0201 	orr.w	r2, r2, #1
 8017348:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801734a:	2300      	movs	r3, #0
}
 801734c:	4618      	mov	r0, r3
 801734e:	3714      	adds	r7, #20
 8017350:	46bd      	mov	sp, r7
 8017352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017356:	4770      	bx	lr
 8017358:	00010007 	.word	0x00010007

0801735c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801735c:	b580      	push	{r7, lr}
 801735e:	b082      	sub	sp, #8
 8017360:	af00      	add	r7, sp, #0
 8017362:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	2b00      	cmp	r3, #0
 8017368:	d101      	bne.n	801736e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801736a:	2301      	movs	r3, #1
 801736c:	e01d      	b.n	80173aa <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801736e:	687b      	ldr	r3, [r7, #4]
 8017370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017374:	b2db      	uxtb	r3, r3
 8017376:	2b00      	cmp	r3, #0
 8017378:	d106      	bne.n	8017388 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	2200      	movs	r2, #0
 801737e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8017382:	6878      	ldr	r0, [r7, #4]
 8017384:	f7ea ffe0 	bl	8002348 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	2202      	movs	r2, #2
 801738c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	681a      	ldr	r2, [r3, #0]
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	3304      	adds	r3, #4
 8017398:	4619      	mov	r1, r3
 801739a:	4610      	mov	r0, r2
 801739c:	f000 fac2 	bl	8017924 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	2201      	movs	r2, #1
 80173a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80173a8:	2300      	movs	r3, #0
}
 80173aa:	4618      	mov	r0, r3
 80173ac:	3708      	adds	r7, #8
 80173ae:	46bd      	mov	sp, r7
 80173b0:	bd80      	pop	{r7, pc}
	...

080173b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80173b4:	b580      	push	{r7, lr}
 80173b6:	b084      	sub	sp, #16
 80173b8:	af00      	add	r7, sp, #0
 80173ba:	6078      	str	r0, [r7, #4]
 80173bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	681b      	ldr	r3, [r3, #0]
 80173c2:	2201      	movs	r2, #1
 80173c4:	6839      	ldr	r1, [r7, #0]
 80173c6:	4618      	mov	r0, r3
 80173c8:	f000 fe14 	bl	8017ff4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	681b      	ldr	r3, [r3, #0]
 80173d0:	4a1e      	ldr	r2, [pc, #120]	; (801744c <HAL_TIM_PWM_Start+0x98>)
 80173d2:	4293      	cmp	r3, r2
 80173d4:	d013      	beq.n	80173fe <HAL_TIM_PWM_Start+0x4a>
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	681b      	ldr	r3, [r3, #0]
 80173da:	4a1d      	ldr	r2, [pc, #116]	; (8017450 <HAL_TIM_PWM_Start+0x9c>)
 80173dc:	4293      	cmp	r3, r2
 80173de:	d00e      	beq.n	80173fe <HAL_TIM_PWM_Start+0x4a>
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	681b      	ldr	r3, [r3, #0]
 80173e4:	4a1b      	ldr	r2, [pc, #108]	; (8017454 <HAL_TIM_PWM_Start+0xa0>)
 80173e6:	4293      	cmp	r3, r2
 80173e8:	d009      	beq.n	80173fe <HAL_TIM_PWM_Start+0x4a>
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	681b      	ldr	r3, [r3, #0]
 80173ee:	4a1a      	ldr	r2, [pc, #104]	; (8017458 <HAL_TIM_PWM_Start+0xa4>)
 80173f0:	4293      	cmp	r3, r2
 80173f2:	d004      	beq.n	80173fe <HAL_TIM_PWM_Start+0x4a>
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	681b      	ldr	r3, [r3, #0]
 80173f8:	4a18      	ldr	r2, [pc, #96]	; (801745c <HAL_TIM_PWM_Start+0xa8>)
 80173fa:	4293      	cmp	r3, r2
 80173fc:	d101      	bne.n	8017402 <HAL_TIM_PWM_Start+0x4e>
 80173fe:	2301      	movs	r3, #1
 8017400:	e000      	b.n	8017404 <HAL_TIM_PWM_Start+0x50>
 8017402:	2300      	movs	r3, #0
 8017404:	2b00      	cmp	r3, #0
 8017406:	d007      	beq.n	8017418 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	681b      	ldr	r3, [r3, #0]
 801740c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	681b      	ldr	r3, [r3, #0]
 8017412:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8017416:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	681b      	ldr	r3, [r3, #0]
 801741c:	689a      	ldr	r2, [r3, #8]
 801741e:	4b10      	ldr	r3, [pc, #64]	; (8017460 <HAL_TIM_PWM_Start+0xac>)
 8017420:	4013      	ands	r3, r2
 8017422:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8017424:	68fb      	ldr	r3, [r7, #12]
 8017426:	2b06      	cmp	r3, #6
 8017428:	d00b      	beq.n	8017442 <HAL_TIM_PWM_Start+0x8e>
 801742a:	68fb      	ldr	r3, [r7, #12]
 801742c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017430:	d007      	beq.n	8017442 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	681b      	ldr	r3, [r3, #0]
 8017436:	681a      	ldr	r2, [r3, #0]
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	681b      	ldr	r3, [r3, #0]
 801743c:	f042 0201 	orr.w	r2, r2, #1
 8017440:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8017442:	2300      	movs	r3, #0
}
 8017444:	4618      	mov	r0, r3
 8017446:	3710      	adds	r7, #16
 8017448:	46bd      	mov	sp, r7
 801744a:	bd80      	pop	{r7, pc}
 801744c:	40010000 	.word	0x40010000
 8017450:	40010400 	.word	0x40010400
 8017454:	40014000 	.word	0x40014000
 8017458:	40014400 	.word	0x40014400
 801745c:	40014800 	.word	0x40014800
 8017460:	00010007 	.word	0x00010007

08017464 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8017464:	b580      	push	{r7, lr}
 8017466:	b082      	sub	sp, #8
 8017468:	af00      	add	r7, sp, #0
 801746a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	681b      	ldr	r3, [r3, #0]
 8017470:	691b      	ldr	r3, [r3, #16]
 8017472:	f003 0302 	and.w	r3, r3, #2
 8017476:	2b02      	cmp	r3, #2
 8017478:	d122      	bne.n	80174c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	681b      	ldr	r3, [r3, #0]
 801747e:	68db      	ldr	r3, [r3, #12]
 8017480:	f003 0302 	and.w	r3, r3, #2
 8017484:	2b02      	cmp	r3, #2
 8017486:	d11b      	bne.n	80174c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	681b      	ldr	r3, [r3, #0]
 801748c:	f06f 0202 	mvn.w	r2, #2
 8017490:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	2201      	movs	r2, #1
 8017496:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	681b      	ldr	r3, [r3, #0]
 801749c:	699b      	ldr	r3, [r3, #24]
 801749e:	f003 0303 	and.w	r3, r3, #3
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d003      	beq.n	80174ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80174a6:	6878      	ldr	r0, [r7, #4]
 80174a8:	f000 fa1e 	bl	80178e8 <HAL_TIM_IC_CaptureCallback>
 80174ac:	e005      	b.n	80174ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80174ae:	6878      	ldr	r0, [r7, #4]
 80174b0:	f000 fa10 	bl	80178d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80174b4:	6878      	ldr	r0, [r7, #4]
 80174b6:	f000 fa21 	bl	80178fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80174ba:	687b      	ldr	r3, [r7, #4]
 80174bc:	2200      	movs	r2, #0
 80174be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	681b      	ldr	r3, [r3, #0]
 80174c4:	691b      	ldr	r3, [r3, #16]
 80174c6:	f003 0304 	and.w	r3, r3, #4
 80174ca:	2b04      	cmp	r3, #4
 80174cc:	d122      	bne.n	8017514 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	68db      	ldr	r3, [r3, #12]
 80174d4:	f003 0304 	and.w	r3, r3, #4
 80174d8:	2b04      	cmp	r3, #4
 80174da:	d11b      	bne.n	8017514 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	681b      	ldr	r3, [r3, #0]
 80174e0:	f06f 0204 	mvn.w	r2, #4
 80174e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	2202      	movs	r2, #2
 80174ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	681b      	ldr	r3, [r3, #0]
 80174f0:	699b      	ldr	r3, [r3, #24]
 80174f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d003      	beq.n	8017502 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80174fa:	6878      	ldr	r0, [r7, #4]
 80174fc:	f000 f9f4 	bl	80178e8 <HAL_TIM_IC_CaptureCallback>
 8017500:	e005      	b.n	801750e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8017502:	6878      	ldr	r0, [r7, #4]
 8017504:	f000 f9e6 	bl	80178d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017508:	6878      	ldr	r0, [r7, #4]
 801750a:	f000 f9f7 	bl	80178fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	2200      	movs	r2, #0
 8017512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	681b      	ldr	r3, [r3, #0]
 8017518:	691b      	ldr	r3, [r3, #16]
 801751a:	f003 0308 	and.w	r3, r3, #8
 801751e:	2b08      	cmp	r3, #8
 8017520:	d122      	bne.n	8017568 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	681b      	ldr	r3, [r3, #0]
 8017526:	68db      	ldr	r3, [r3, #12]
 8017528:	f003 0308 	and.w	r3, r3, #8
 801752c:	2b08      	cmp	r3, #8
 801752e:	d11b      	bne.n	8017568 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	681b      	ldr	r3, [r3, #0]
 8017534:	f06f 0208 	mvn.w	r2, #8
 8017538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	2204      	movs	r2, #4
 801753e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	681b      	ldr	r3, [r3, #0]
 8017544:	69db      	ldr	r3, [r3, #28]
 8017546:	f003 0303 	and.w	r3, r3, #3
 801754a:	2b00      	cmp	r3, #0
 801754c:	d003      	beq.n	8017556 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801754e:	6878      	ldr	r0, [r7, #4]
 8017550:	f000 f9ca 	bl	80178e8 <HAL_TIM_IC_CaptureCallback>
 8017554:	e005      	b.n	8017562 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8017556:	6878      	ldr	r0, [r7, #4]
 8017558:	f000 f9bc 	bl	80178d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801755c:	6878      	ldr	r0, [r7, #4]
 801755e:	f000 f9cd 	bl	80178fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	2200      	movs	r2, #0
 8017566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	681b      	ldr	r3, [r3, #0]
 801756c:	691b      	ldr	r3, [r3, #16]
 801756e:	f003 0310 	and.w	r3, r3, #16
 8017572:	2b10      	cmp	r3, #16
 8017574:	d122      	bne.n	80175bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	681b      	ldr	r3, [r3, #0]
 801757a:	68db      	ldr	r3, [r3, #12]
 801757c:	f003 0310 	and.w	r3, r3, #16
 8017580:	2b10      	cmp	r3, #16
 8017582:	d11b      	bne.n	80175bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	681b      	ldr	r3, [r3, #0]
 8017588:	f06f 0210 	mvn.w	r2, #16
 801758c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	2208      	movs	r2, #8
 8017592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	681b      	ldr	r3, [r3, #0]
 8017598:	69db      	ldr	r3, [r3, #28]
 801759a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801759e:	2b00      	cmp	r3, #0
 80175a0:	d003      	beq.n	80175aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80175a2:	6878      	ldr	r0, [r7, #4]
 80175a4:	f000 f9a0 	bl	80178e8 <HAL_TIM_IC_CaptureCallback>
 80175a8:	e005      	b.n	80175b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80175aa:	6878      	ldr	r0, [r7, #4]
 80175ac:	f000 f992 	bl	80178d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80175b0:	6878      	ldr	r0, [r7, #4]
 80175b2:	f000 f9a3 	bl	80178fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	2200      	movs	r2, #0
 80175ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	681b      	ldr	r3, [r3, #0]
 80175c0:	691b      	ldr	r3, [r3, #16]
 80175c2:	f003 0301 	and.w	r3, r3, #1
 80175c6:	2b01      	cmp	r3, #1
 80175c8:	d10e      	bne.n	80175e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	681b      	ldr	r3, [r3, #0]
 80175ce:	68db      	ldr	r3, [r3, #12]
 80175d0:	f003 0301 	and.w	r3, r3, #1
 80175d4:	2b01      	cmp	r3, #1
 80175d6:	d107      	bne.n	80175e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	681b      	ldr	r3, [r3, #0]
 80175dc:	f06f 0201 	mvn.w	r2, #1
 80175e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80175e2:	6878      	ldr	r0, [r7, #4]
 80175e4:	f7e9 fcb4 	bl	8000f50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	681b      	ldr	r3, [r3, #0]
 80175ec:	691b      	ldr	r3, [r3, #16]
 80175ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80175f2:	2b80      	cmp	r3, #128	; 0x80
 80175f4:	d10e      	bne.n	8017614 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	681b      	ldr	r3, [r3, #0]
 80175fa:	68db      	ldr	r3, [r3, #12]
 80175fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017600:	2b80      	cmp	r3, #128	; 0x80
 8017602:	d107      	bne.n	8017614 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	681b      	ldr	r3, [r3, #0]
 8017608:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801760c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801760e:	6878      	ldr	r0, [r7, #4]
 8017610:	f000 fe26 	bl	8018260 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	681b      	ldr	r3, [r3, #0]
 8017618:	691b      	ldr	r3, [r3, #16]
 801761a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801761e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017622:	d10e      	bne.n	8017642 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	681b      	ldr	r3, [r3, #0]
 8017628:	68db      	ldr	r3, [r3, #12]
 801762a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801762e:	2b80      	cmp	r3, #128	; 0x80
 8017630:	d107      	bne.n	8017642 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	681b      	ldr	r3, [r3, #0]
 8017636:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801763a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801763c:	6878      	ldr	r0, [r7, #4]
 801763e:	f000 fe19 	bl	8018274 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	681b      	ldr	r3, [r3, #0]
 8017646:	691b      	ldr	r3, [r3, #16]
 8017648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801764c:	2b40      	cmp	r3, #64	; 0x40
 801764e:	d10e      	bne.n	801766e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	681b      	ldr	r3, [r3, #0]
 8017654:	68db      	ldr	r3, [r3, #12]
 8017656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801765a:	2b40      	cmp	r3, #64	; 0x40
 801765c:	d107      	bne.n	801766e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	681b      	ldr	r3, [r3, #0]
 8017662:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8017666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8017668:	6878      	ldr	r0, [r7, #4]
 801766a:	f000 f951 	bl	8017910 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	681b      	ldr	r3, [r3, #0]
 8017672:	691b      	ldr	r3, [r3, #16]
 8017674:	f003 0320 	and.w	r3, r3, #32
 8017678:	2b20      	cmp	r3, #32
 801767a:	d10e      	bne.n	801769a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	681b      	ldr	r3, [r3, #0]
 8017680:	68db      	ldr	r3, [r3, #12]
 8017682:	f003 0320 	and.w	r3, r3, #32
 8017686:	2b20      	cmp	r3, #32
 8017688:	d107      	bne.n	801769a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	681b      	ldr	r3, [r3, #0]
 801768e:	f06f 0220 	mvn.w	r2, #32
 8017692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8017694:	6878      	ldr	r0, [r7, #4]
 8017696:	f000 fdd9 	bl	801824c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801769a:	bf00      	nop
 801769c:	3708      	adds	r7, #8
 801769e:	46bd      	mov	sp, r7
 80176a0:	bd80      	pop	{r7, pc}
	...

080176a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80176a4:	b580      	push	{r7, lr}
 80176a6:	b084      	sub	sp, #16
 80176a8:	af00      	add	r7, sp, #0
 80176aa:	60f8      	str	r0, [r7, #12]
 80176ac:	60b9      	str	r1, [r7, #8]
 80176ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80176b0:	68fb      	ldr	r3, [r7, #12]
 80176b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80176b6:	2b01      	cmp	r3, #1
 80176b8:	d101      	bne.n	80176be <HAL_TIM_PWM_ConfigChannel+0x1a>
 80176ba:	2302      	movs	r3, #2
 80176bc:	e105      	b.n	80178ca <HAL_TIM_PWM_ConfigChannel+0x226>
 80176be:	68fb      	ldr	r3, [r7, #12]
 80176c0:	2201      	movs	r2, #1
 80176c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80176c6:	68fb      	ldr	r3, [r7, #12]
 80176c8:	2202      	movs	r2, #2
 80176ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	2b14      	cmp	r3, #20
 80176d2:	f200 80f0 	bhi.w	80178b6 <HAL_TIM_PWM_ConfigChannel+0x212>
 80176d6:	a201      	add	r2, pc, #4	; (adr r2, 80176dc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80176d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80176dc:	08017731 	.word	0x08017731
 80176e0:	080178b7 	.word	0x080178b7
 80176e4:	080178b7 	.word	0x080178b7
 80176e8:	080178b7 	.word	0x080178b7
 80176ec:	08017771 	.word	0x08017771
 80176f0:	080178b7 	.word	0x080178b7
 80176f4:	080178b7 	.word	0x080178b7
 80176f8:	080178b7 	.word	0x080178b7
 80176fc:	080177b3 	.word	0x080177b3
 8017700:	080178b7 	.word	0x080178b7
 8017704:	080178b7 	.word	0x080178b7
 8017708:	080178b7 	.word	0x080178b7
 801770c:	080177f3 	.word	0x080177f3
 8017710:	080178b7 	.word	0x080178b7
 8017714:	080178b7 	.word	0x080178b7
 8017718:	080178b7 	.word	0x080178b7
 801771c:	08017835 	.word	0x08017835
 8017720:	080178b7 	.word	0x080178b7
 8017724:	080178b7 	.word	0x080178b7
 8017728:	080178b7 	.word	0x080178b7
 801772c:	08017875 	.word	0x08017875
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8017730:	68fb      	ldr	r3, [r7, #12]
 8017732:	681b      	ldr	r3, [r3, #0]
 8017734:	68b9      	ldr	r1, [r7, #8]
 8017736:	4618      	mov	r0, r3
 8017738:	f000 f98e 	bl	8017a58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801773c:	68fb      	ldr	r3, [r7, #12]
 801773e:	681b      	ldr	r3, [r3, #0]
 8017740:	699a      	ldr	r2, [r3, #24]
 8017742:	68fb      	ldr	r3, [r7, #12]
 8017744:	681b      	ldr	r3, [r3, #0]
 8017746:	f042 0208 	orr.w	r2, r2, #8
 801774a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801774c:	68fb      	ldr	r3, [r7, #12]
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	699a      	ldr	r2, [r3, #24]
 8017752:	68fb      	ldr	r3, [r7, #12]
 8017754:	681b      	ldr	r3, [r3, #0]
 8017756:	f022 0204 	bic.w	r2, r2, #4
 801775a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801775c:	68fb      	ldr	r3, [r7, #12]
 801775e:	681b      	ldr	r3, [r3, #0]
 8017760:	6999      	ldr	r1, [r3, #24]
 8017762:	68bb      	ldr	r3, [r7, #8]
 8017764:	691a      	ldr	r2, [r3, #16]
 8017766:	68fb      	ldr	r3, [r7, #12]
 8017768:	681b      	ldr	r3, [r3, #0]
 801776a:	430a      	orrs	r2, r1
 801776c:	619a      	str	r2, [r3, #24]
      break;
 801776e:	e0a3      	b.n	80178b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8017770:	68fb      	ldr	r3, [r7, #12]
 8017772:	681b      	ldr	r3, [r3, #0]
 8017774:	68b9      	ldr	r1, [r7, #8]
 8017776:	4618      	mov	r0, r3
 8017778:	f000 f9fe 	bl	8017b78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801777c:	68fb      	ldr	r3, [r7, #12]
 801777e:	681b      	ldr	r3, [r3, #0]
 8017780:	699a      	ldr	r2, [r3, #24]
 8017782:	68fb      	ldr	r3, [r7, #12]
 8017784:	681b      	ldr	r3, [r3, #0]
 8017786:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801778a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801778c:	68fb      	ldr	r3, [r7, #12]
 801778e:	681b      	ldr	r3, [r3, #0]
 8017790:	699a      	ldr	r2, [r3, #24]
 8017792:	68fb      	ldr	r3, [r7, #12]
 8017794:	681b      	ldr	r3, [r3, #0]
 8017796:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801779a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801779c:	68fb      	ldr	r3, [r7, #12]
 801779e:	681b      	ldr	r3, [r3, #0]
 80177a0:	6999      	ldr	r1, [r3, #24]
 80177a2:	68bb      	ldr	r3, [r7, #8]
 80177a4:	691b      	ldr	r3, [r3, #16]
 80177a6:	021a      	lsls	r2, r3, #8
 80177a8:	68fb      	ldr	r3, [r7, #12]
 80177aa:	681b      	ldr	r3, [r3, #0]
 80177ac:	430a      	orrs	r2, r1
 80177ae:	619a      	str	r2, [r3, #24]
      break;
 80177b0:	e082      	b.n	80178b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80177b2:	68fb      	ldr	r3, [r7, #12]
 80177b4:	681b      	ldr	r3, [r3, #0]
 80177b6:	68b9      	ldr	r1, [r7, #8]
 80177b8:	4618      	mov	r0, r3
 80177ba:	f000 fa67 	bl	8017c8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80177be:	68fb      	ldr	r3, [r7, #12]
 80177c0:	681b      	ldr	r3, [r3, #0]
 80177c2:	69da      	ldr	r2, [r3, #28]
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	681b      	ldr	r3, [r3, #0]
 80177c8:	f042 0208 	orr.w	r2, r2, #8
 80177cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80177ce:	68fb      	ldr	r3, [r7, #12]
 80177d0:	681b      	ldr	r3, [r3, #0]
 80177d2:	69da      	ldr	r2, [r3, #28]
 80177d4:	68fb      	ldr	r3, [r7, #12]
 80177d6:	681b      	ldr	r3, [r3, #0]
 80177d8:	f022 0204 	bic.w	r2, r2, #4
 80177dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80177de:	68fb      	ldr	r3, [r7, #12]
 80177e0:	681b      	ldr	r3, [r3, #0]
 80177e2:	69d9      	ldr	r1, [r3, #28]
 80177e4:	68bb      	ldr	r3, [r7, #8]
 80177e6:	691a      	ldr	r2, [r3, #16]
 80177e8:	68fb      	ldr	r3, [r7, #12]
 80177ea:	681b      	ldr	r3, [r3, #0]
 80177ec:	430a      	orrs	r2, r1
 80177ee:	61da      	str	r2, [r3, #28]
      break;
 80177f0:	e062      	b.n	80178b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80177f2:	68fb      	ldr	r3, [r7, #12]
 80177f4:	681b      	ldr	r3, [r3, #0]
 80177f6:	68b9      	ldr	r1, [r7, #8]
 80177f8:	4618      	mov	r0, r3
 80177fa:	f000 facd 	bl	8017d98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80177fe:	68fb      	ldr	r3, [r7, #12]
 8017800:	681b      	ldr	r3, [r3, #0]
 8017802:	69da      	ldr	r2, [r3, #28]
 8017804:	68fb      	ldr	r3, [r7, #12]
 8017806:	681b      	ldr	r3, [r3, #0]
 8017808:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801780c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801780e:	68fb      	ldr	r3, [r7, #12]
 8017810:	681b      	ldr	r3, [r3, #0]
 8017812:	69da      	ldr	r2, [r3, #28]
 8017814:	68fb      	ldr	r3, [r7, #12]
 8017816:	681b      	ldr	r3, [r3, #0]
 8017818:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801781c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801781e:	68fb      	ldr	r3, [r7, #12]
 8017820:	681b      	ldr	r3, [r3, #0]
 8017822:	69d9      	ldr	r1, [r3, #28]
 8017824:	68bb      	ldr	r3, [r7, #8]
 8017826:	691b      	ldr	r3, [r3, #16]
 8017828:	021a      	lsls	r2, r3, #8
 801782a:	68fb      	ldr	r3, [r7, #12]
 801782c:	681b      	ldr	r3, [r3, #0]
 801782e:	430a      	orrs	r2, r1
 8017830:	61da      	str	r2, [r3, #28]
      break;
 8017832:	e041      	b.n	80178b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8017834:	68fb      	ldr	r3, [r7, #12]
 8017836:	681b      	ldr	r3, [r3, #0]
 8017838:	68b9      	ldr	r1, [r7, #8]
 801783a:	4618      	mov	r0, r3
 801783c:	f000 fb14 	bl	8017e68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8017840:	68fb      	ldr	r3, [r7, #12]
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8017846:	68fb      	ldr	r3, [r7, #12]
 8017848:	681b      	ldr	r3, [r3, #0]
 801784a:	f042 0208 	orr.w	r2, r2, #8
 801784e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8017850:	68fb      	ldr	r3, [r7, #12]
 8017852:	681b      	ldr	r3, [r3, #0]
 8017854:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8017856:	68fb      	ldr	r3, [r7, #12]
 8017858:	681b      	ldr	r3, [r3, #0]
 801785a:	f022 0204 	bic.w	r2, r2, #4
 801785e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8017860:	68fb      	ldr	r3, [r7, #12]
 8017862:	681b      	ldr	r3, [r3, #0]
 8017864:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8017866:	68bb      	ldr	r3, [r7, #8]
 8017868:	691a      	ldr	r2, [r3, #16]
 801786a:	68fb      	ldr	r3, [r7, #12]
 801786c:	681b      	ldr	r3, [r3, #0]
 801786e:	430a      	orrs	r2, r1
 8017870:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8017872:	e021      	b.n	80178b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8017874:	68fb      	ldr	r3, [r7, #12]
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	68b9      	ldr	r1, [r7, #8]
 801787a:	4618      	mov	r0, r3
 801787c:	f000 fb56 	bl	8017f2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8017880:	68fb      	ldr	r3, [r7, #12]
 8017882:	681b      	ldr	r3, [r3, #0]
 8017884:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	681b      	ldr	r3, [r3, #0]
 801788a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801788e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8017890:	68fb      	ldr	r3, [r7, #12]
 8017892:	681b      	ldr	r3, [r3, #0]
 8017894:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	681b      	ldr	r3, [r3, #0]
 801789a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801789e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80178a0:	68fb      	ldr	r3, [r7, #12]
 80178a2:	681b      	ldr	r3, [r3, #0]
 80178a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80178a6:	68bb      	ldr	r3, [r7, #8]
 80178a8:	691b      	ldr	r3, [r3, #16]
 80178aa:	021a      	lsls	r2, r3, #8
 80178ac:	68fb      	ldr	r3, [r7, #12]
 80178ae:	681b      	ldr	r3, [r3, #0]
 80178b0:	430a      	orrs	r2, r1
 80178b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80178b4:	e000      	b.n	80178b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80178b6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80178b8:	68fb      	ldr	r3, [r7, #12]
 80178ba:	2201      	movs	r2, #1
 80178bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80178c0:	68fb      	ldr	r3, [r7, #12]
 80178c2:	2200      	movs	r2, #0
 80178c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80178c8:	2300      	movs	r3, #0
}
 80178ca:	4618      	mov	r0, r3
 80178cc:	3710      	adds	r7, #16
 80178ce:	46bd      	mov	sp, r7
 80178d0:	bd80      	pop	{r7, pc}
 80178d2:	bf00      	nop

080178d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80178d4:	b480      	push	{r7}
 80178d6:	b083      	sub	sp, #12
 80178d8:	af00      	add	r7, sp, #0
 80178da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80178dc:	bf00      	nop
 80178de:	370c      	adds	r7, #12
 80178e0:	46bd      	mov	sp, r7
 80178e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178e6:	4770      	bx	lr

080178e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80178e8:	b480      	push	{r7}
 80178ea:	b083      	sub	sp, #12
 80178ec:	af00      	add	r7, sp, #0
 80178ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80178f0:	bf00      	nop
 80178f2:	370c      	adds	r7, #12
 80178f4:	46bd      	mov	sp, r7
 80178f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178fa:	4770      	bx	lr

080178fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80178fc:	b480      	push	{r7}
 80178fe:	b083      	sub	sp, #12
 8017900:	af00      	add	r7, sp, #0
 8017902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8017904:	bf00      	nop
 8017906:	370c      	adds	r7, #12
 8017908:	46bd      	mov	sp, r7
 801790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801790e:	4770      	bx	lr

08017910 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8017910:	b480      	push	{r7}
 8017912:	b083      	sub	sp, #12
 8017914:	af00      	add	r7, sp, #0
 8017916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8017918:	bf00      	nop
 801791a:	370c      	adds	r7, #12
 801791c:	46bd      	mov	sp, r7
 801791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017922:	4770      	bx	lr

08017924 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8017924:	b480      	push	{r7}
 8017926:	b085      	sub	sp, #20
 8017928:	af00      	add	r7, sp, #0
 801792a:	6078      	str	r0, [r7, #4]
 801792c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	681b      	ldr	r3, [r3, #0]
 8017932:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	4a40      	ldr	r2, [pc, #256]	; (8017a38 <TIM_Base_SetConfig+0x114>)
 8017938:	4293      	cmp	r3, r2
 801793a:	d013      	beq.n	8017964 <TIM_Base_SetConfig+0x40>
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017942:	d00f      	beq.n	8017964 <TIM_Base_SetConfig+0x40>
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	4a3d      	ldr	r2, [pc, #244]	; (8017a3c <TIM_Base_SetConfig+0x118>)
 8017948:	4293      	cmp	r3, r2
 801794a:	d00b      	beq.n	8017964 <TIM_Base_SetConfig+0x40>
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	4a3c      	ldr	r2, [pc, #240]	; (8017a40 <TIM_Base_SetConfig+0x11c>)
 8017950:	4293      	cmp	r3, r2
 8017952:	d007      	beq.n	8017964 <TIM_Base_SetConfig+0x40>
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	4a3b      	ldr	r2, [pc, #236]	; (8017a44 <TIM_Base_SetConfig+0x120>)
 8017958:	4293      	cmp	r3, r2
 801795a:	d003      	beq.n	8017964 <TIM_Base_SetConfig+0x40>
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	4a3a      	ldr	r2, [pc, #232]	; (8017a48 <TIM_Base_SetConfig+0x124>)
 8017960:	4293      	cmp	r3, r2
 8017962:	d108      	bne.n	8017976 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8017964:	68fb      	ldr	r3, [r7, #12]
 8017966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801796a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801796c:	683b      	ldr	r3, [r7, #0]
 801796e:	685b      	ldr	r3, [r3, #4]
 8017970:	68fa      	ldr	r2, [r7, #12]
 8017972:	4313      	orrs	r3, r2
 8017974:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	4a2f      	ldr	r2, [pc, #188]	; (8017a38 <TIM_Base_SetConfig+0x114>)
 801797a:	4293      	cmp	r3, r2
 801797c:	d01f      	beq.n	80179be <TIM_Base_SetConfig+0x9a>
 801797e:	687b      	ldr	r3, [r7, #4]
 8017980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017984:	d01b      	beq.n	80179be <TIM_Base_SetConfig+0x9a>
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	4a2c      	ldr	r2, [pc, #176]	; (8017a3c <TIM_Base_SetConfig+0x118>)
 801798a:	4293      	cmp	r3, r2
 801798c:	d017      	beq.n	80179be <TIM_Base_SetConfig+0x9a>
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	4a2b      	ldr	r2, [pc, #172]	; (8017a40 <TIM_Base_SetConfig+0x11c>)
 8017992:	4293      	cmp	r3, r2
 8017994:	d013      	beq.n	80179be <TIM_Base_SetConfig+0x9a>
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	4a2a      	ldr	r2, [pc, #168]	; (8017a44 <TIM_Base_SetConfig+0x120>)
 801799a:	4293      	cmp	r3, r2
 801799c:	d00f      	beq.n	80179be <TIM_Base_SetConfig+0x9a>
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	4a29      	ldr	r2, [pc, #164]	; (8017a48 <TIM_Base_SetConfig+0x124>)
 80179a2:	4293      	cmp	r3, r2
 80179a4:	d00b      	beq.n	80179be <TIM_Base_SetConfig+0x9a>
 80179a6:	687b      	ldr	r3, [r7, #4]
 80179a8:	4a28      	ldr	r2, [pc, #160]	; (8017a4c <TIM_Base_SetConfig+0x128>)
 80179aa:	4293      	cmp	r3, r2
 80179ac:	d007      	beq.n	80179be <TIM_Base_SetConfig+0x9a>
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	4a27      	ldr	r2, [pc, #156]	; (8017a50 <TIM_Base_SetConfig+0x12c>)
 80179b2:	4293      	cmp	r3, r2
 80179b4:	d003      	beq.n	80179be <TIM_Base_SetConfig+0x9a>
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	4a26      	ldr	r2, [pc, #152]	; (8017a54 <TIM_Base_SetConfig+0x130>)
 80179ba:	4293      	cmp	r3, r2
 80179bc:	d108      	bne.n	80179d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80179be:	68fb      	ldr	r3, [r7, #12]
 80179c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80179c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80179c6:	683b      	ldr	r3, [r7, #0]
 80179c8:	68db      	ldr	r3, [r3, #12]
 80179ca:	68fa      	ldr	r2, [r7, #12]
 80179cc:	4313      	orrs	r3, r2
 80179ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80179d0:	68fb      	ldr	r3, [r7, #12]
 80179d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80179d6:	683b      	ldr	r3, [r7, #0]
 80179d8:	695b      	ldr	r3, [r3, #20]
 80179da:	4313      	orrs	r3, r2
 80179dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	68fa      	ldr	r2, [r7, #12]
 80179e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80179e4:	683b      	ldr	r3, [r7, #0]
 80179e6:	689a      	ldr	r2, [r3, #8]
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80179ec:	683b      	ldr	r3, [r7, #0]
 80179ee:	681a      	ldr	r2, [r3, #0]
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	4a10      	ldr	r2, [pc, #64]	; (8017a38 <TIM_Base_SetConfig+0x114>)
 80179f8:	4293      	cmp	r3, r2
 80179fa:	d00f      	beq.n	8017a1c <TIM_Base_SetConfig+0xf8>
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	4a12      	ldr	r2, [pc, #72]	; (8017a48 <TIM_Base_SetConfig+0x124>)
 8017a00:	4293      	cmp	r3, r2
 8017a02:	d00b      	beq.n	8017a1c <TIM_Base_SetConfig+0xf8>
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	4a11      	ldr	r2, [pc, #68]	; (8017a4c <TIM_Base_SetConfig+0x128>)
 8017a08:	4293      	cmp	r3, r2
 8017a0a:	d007      	beq.n	8017a1c <TIM_Base_SetConfig+0xf8>
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	4a10      	ldr	r2, [pc, #64]	; (8017a50 <TIM_Base_SetConfig+0x12c>)
 8017a10:	4293      	cmp	r3, r2
 8017a12:	d003      	beq.n	8017a1c <TIM_Base_SetConfig+0xf8>
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	4a0f      	ldr	r2, [pc, #60]	; (8017a54 <TIM_Base_SetConfig+0x130>)
 8017a18:	4293      	cmp	r3, r2
 8017a1a:	d103      	bne.n	8017a24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8017a1c:	683b      	ldr	r3, [r7, #0]
 8017a1e:	691a      	ldr	r2, [r3, #16]
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	2201      	movs	r2, #1
 8017a28:	615a      	str	r2, [r3, #20]
}
 8017a2a:	bf00      	nop
 8017a2c:	3714      	adds	r7, #20
 8017a2e:	46bd      	mov	sp, r7
 8017a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a34:	4770      	bx	lr
 8017a36:	bf00      	nop
 8017a38:	40010000 	.word	0x40010000
 8017a3c:	40000400 	.word	0x40000400
 8017a40:	40000800 	.word	0x40000800
 8017a44:	40000c00 	.word	0x40000c00
 8017a48:	40010400 	.word	0x40010400
 8017a4c:	40014000 	.word	0x40014000
 8017a50:	40014400 	.word	0x40014400
 8017a54:	40014800 	.word	0x40014800

08017a58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8017a58:	b480      	push	{r7}
 8017a5a:	b087      	sub	sp, #28
 8017a5c:	af00      	add	r7, sp, #0
 8017a5e:	6078      	str	r0, [r7, #4]
 8017a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	6a1b      	ldr	r3, [r3, #32]
 8017a66:	f023 0201 	bic.w	r2, r3, #1
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	6a1b      	ldr	r3, [r3, #32]
 8017a72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	685b      	ldr	r3, [r3, #4]
 8017a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	699b      	ldr	r3, [r3, #24]
 8017a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8017a80:	68fa      	ldr	r2, [r7, #12]
 8017a82:	4b37      	ldr	r3, [pc, #220]	; (8017b60 <TIM_OC1_SetConfig+0x108>)
 8017a84:	4013      	ands	r3, r2
 8017a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8017a88:	68fb      	ldr	r3, [r7, #12]
 8017a8a:	f023 0303 	bic.w	r3, r3, #3
 8017a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8017a90:	683b      	ldr	r3, [r7, #0]
 8017a92:	681b      	ldr	r3, [r3, #0]
 8017a94:	68fa      	ldr	r2, [r7, #12]
 8017a96:	4313      	orrs	r3, r2
 8017a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8017a9a:	697b      	ldr	r3, [r7, #20]
 8017a9c:	f023 0302 	bic.w	r3, r3, #2
 8017aa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8017aa2:	683b      	ldr	r3, [r7, #0]
 8017aa4:	689b      	ldr	r3, [r3, #8]
 8017aa6:	697a      	ldr	r2, [r7, #20]
 8017aa8:	4313      	orrs	r3, r2
 8017aaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	4a2d      	ldr	r2, [pc, #180]	; (8017b64 <TIM_OC1_SetConfig+0x10c>)
 8017ab0:	4293      	cmp	r3, r2
 8017ab2:	d00f      	beq.n	8017ad4 <TIM_OC1_SetConfig+0x7c>
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	4a2c      	ldr	r2, [pc, #176]	; (8017b68 <TIM_OC1_SetConfig+0x110>)
 8017ab8:	4293      	cmp	r3, r2
 8017aba:	d00b      	beq.n	8017ad4 <TIM_OC1_SetConfig+0x7c>
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	4a2b      	ldr	r2, [pc, #172]	; (8017b6c <TIM_OC1_SetConfig+0x114>)
 8017ac0:	4293      	cmp	r3, r2
 8017ac2:	d007      	beq.n	8017ad4 <TIM_OC1_SetConfig+0x7c>
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	4a2a      	ldr	r2, [pc, #168]	; (8017b70 <TIM_OC1_SetConfig+0x118>)
 8017ac8:	4293      	cmp	r3, r2
 8017aca:	d003      	beq.n	8017ad4 <TIM_OC1_SetConfig+0x7c>
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	4a29      	ldr	r2, [pc, #164]	; (8017b74 <TIM_OC1_SetConfig+0x11c>)
 8017ad0:	4293      	cmp	r3, r2
 8017ad2:	d10c      	bne.n	8017aee <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8017ad4:	697b      	ldr	r3, [r7, #20]
 8017ad6:	f023 0308 	bic.w	r3, r3, #8
 8017ada:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8017adc:	683b      	ldr	r3, [r7, #0]
 8017ade:	68db      	ldr	r3, [r3, #12]
 8017ae0:	697a      	ldr	r2, [r7, #20]
 8017ae2:	4313      	orrs	r3, r2
 8017ae4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8017ae6:	697b      	ldr	r3, [r7, #20]
 8017ae8:	f023 0304 	bic.w	r3, r3, #4
 8017aec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	4a1c      	ldr	r2, [pc, #112]	; (8017b64 <TIM_OC1_SetConfig+0x10c>)
 8017af2:	4293      	cmp	r3, r2
 8017af4:	d00f      	beq.n	8017b16 <TIM_OC1_SetConfig+0xbe>
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	4a1b      	ldr	r2, [pc, #108]	; (8017b68 <TIM_OC1_SetConfig+0x110>)
 8017afa:	4293      	cmp	r3, r2
 8017afc:	d00b      	beq.n	8017b16 <TIM_OC1_SetConfig+0xbe>
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	4a1a      	ldr	r2, [pc, #104]	; (8017b6c <TIM_OC1_SetConfig+0x114>)
 8017b02:	4293      	cmp	r3, r2
 8017b04:	d007      	beq.n	8017b16 <TIM_OC1_SetConfig+0xbe>
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	4a19      	ldr	r2, [pc, #100]	; (8017b70 <TIM_OC1_SetConfig+0x118>)
 8017b0a:	4293      	cmp	r3, r2
 8017b0c:	d003      	beq.n	8017b16 <TIM_OC1_SetConfig+0xbe>
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	4a18      	ldr	r2, [pc, #96]	; (8017b74 <TIM_OC1_SetConfig+0x11c>)
 8017b12:	4293      	cmp	r3, r2
 8017b14:	d111      	bne.n	8017b3a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8017b16:	693b      	ldr	r3, [r7, #16]
 8017b18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8017b1e:	693b      	ldr	r3, [r7, #16]
 8017b20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8017b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8017b26:	683b      	ldr	r3, [r7, #0]
 8017b28:	695b      	ldr	r3, [r3, #20]
 8017b2a:	693a      	ldr	r2, [r7, #16]
 8017b2c:	4313      	orrs	r3, r2
 8017b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8017b30:	683b      	ldr	r3, [r7, #0]
 8017b32:	699b      	ldr	r3, [r3, #24]
 8017b34:	693a      	ldr	r2, [r7, #16]
 8017b36:	4313      	orrs	r3, r2
 8017b38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	693a      	ldr	r2, [r7, #16]
 8017b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	68fa      	ldr	r2, [r7, #12]
 8017b44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8017b46:	683b      	ldr	r3, [r7, #0]
 8017b48:	685a      	ldr	r2, [r3, #4]
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	697a      	ldr	r2, [r7, #20]
 8017b52:	621a      	str	r2, [r3, #32]
}
 8017b54:	bf00      	nop
 8017b56:	371c      	adds	r7, #28
 8017b58:	46bd      	mov	sp, r7
 8017b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b5e:	4770      	bx	lr
 8017b60:	fffeff8f 	.word	0xfffeff8f
 8017b64:	40010000 	.word	0x40010000
 8017b68:	40010400 	.word	0x40010400
 8017b6c:	40014000 	.word	0x40014000
 8017b70:	40014400 	.word	0x40014400
 8017b74:	40014800 	.word	0x40014800

08017b78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8017b78:	b480      	push	{r7}
 8017b7a:	b087      	sub	sp, #28
 8017b7c:	af00      	add	r7, sp, #0
 8017b7e:	6078      	str	r0, [r7, #4]
 8017b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	6a1b      	ldr	r3, [r3, #32]
 8017b86:	f023 0210 	bic.w	r2, r3, #16
 8017b8a:	687b      	ldr	r3, [r7, #4]
 8017b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017b8e:	687b      	ldr	r3, [r7, #4]
 8017b90:	6a1b      	ldr	r3, [r3, #32]
 8017b92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	685b      	ldr	r3, [r3, #4]
 8017b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	699b      	ldr	r3, [r3, #24]
 8017b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8017ba0:	68fa      	ldr	r2, [r7, #12]
 8017ba2:	4b34      	ldr	r3, [pc, #208]	; (8017c74 <TIM_OC2_SetConfig+0xfc>)
 8017ba4:	4013      	ands	r3, r2
 8017ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8017ba8:	68fb      	ldr	r3, [r7, #12]
 8017baa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8017bae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017bb0:	683b      	ldr	r3, [r7, #0]
 8017bb2:	681b      	ldr	r3, [r3, #0]
 8017bb4:	021b      	lsls	r3, r3, #8
 8017bb6:	68fa      	ldr	r2, [r7, #12]
 8017bb8:	4313      	orrs	r3, r2
 8017bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8017bbc:	697b      	ldr	r3, [r7, #20]
 8017bbe:	f023 0320 	bic.w	r3, r3, #32
 8017bc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8017bc4:	683b      	ldr	r3, [r7, #0]
 8017bc6:	689b      	ldr	r3, [r3, #8]
 8017bc8:	011b      	lsls	r3, r3, #4
 8017bca:	697a      	ldr	r2, [r7, #20]
 8017bcc:	4313      	orrs	r3, r2
 8017bce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	4a29      	ldr	r2, [pc, #164]	; (8017c78 <TIM_OC2_SetConfig+0x100>)
 8017bd4:	4293      	cmp	r3, r2
 8017bd6:	d003      	beq.n	8017be0 <TIM_OC2_SetConfig+0x68>
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	4a28      	ldr	r2, [pc, #160]	; (8017c7c <TIM_OC2_SetConfig+0x104>)
 8017bdc:	4293      	cmp	r3, r2
 8017bde:	d10d      	bne.n	8017bfc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8017be0:	697b      	ldr	r3, [r7, #20]
 8017be2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017be6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8017be8:	683b      	ldr	r3, [r7, #0]
 8017bea:	68db      	ldr	r3, [r3, #12]
 8017bec:	011b      	lsls	r3, r3, #4
 8017bee:	697a      	ldr	r2, [r7, #20]
 8017bf0:	4313      	orrs	r3, r2
 8017bf2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8017bf4:	697b      	ldr	r3, [r7, #20]
 8017bf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017bfa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	4a1e      	ldr	r2, [pc, #120]	; (8017c78 <TIM_OC2_SetConfig+0x100>)
 8017c00:	4293      	cmp	r3, r2
 8017c02:	d00f      	beq.n	8017c24 <TIM_OC2_SetConfig+0xac>
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	4a1d      	ldr	r2, [pc, #116]	; (8017c7c <TIM_OC2_SetConfig+0x104>)
 8017c08:	4293      	cmp	r3, r2
 8017c0a:	d00b      	beq.n	8017c24 <TIM_OC2_SetConfig+0xac>
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	4a1c      	ldr	r2, [pc, #112]	; (8017c80 <TIM_OC2_SetConfig+0x108>)
 8017c10:	4293      	cmp	r3, r2
 8017c12:	d007      	beq.n	8017c24 <TIM_OC2_SetConfig+0xac>
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	4a1b      	ldr	r2, [pc, #108]	; (8017c84 <TIM_OC2_SetConfig+0x10c>)
 8017c18:	4293      	cmp	r3, r2
 8017c1a:	d003      	beq.n	8017c24 <TIM_OC2_SetConfig+0xac>
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	4a1a      	ldr	r2, [pc, #104]	; (8017c88 <TIM_OC2_SetConfig+0x110>)
 8017c20:	4293      	cmp	r3, r2
 8017c22:	d113      	bne.n	8017c4c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8017c24:	693b      	ldr	r3, [r7, #16]
 8017c26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8017c2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8017c2c:	693b      	ldr	r3, [r7, #16]
 8017c2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8017c32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8017c34:	683b      	ldr	r3, [r7, #0]
 8017c36:	695b      	ldr	r3, [r3, #20]
 8017c38:	009b      	lsls	r3, r3, #2
 8017c3a:	693a      	ldr	r2, [r7, #16]
 8017c3c:	4313      	orrs	r3, r2
 8017c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8017c40:	683b      	ldr	r3, [r7, #0]
 8017c42:	699b      	ldr	r3, [r3, #24]
 8017c44:	009b      	lsls	r3, r3, #2
 8017c46:	693a      	ldr	r2, [r7, #16]
 8017c48:	4313      	orrs	r3, r2
 8017c4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	693a      	ldr	r2, [r7, #16]
 8017c50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	68fa      	ldr	r2, [r7, #12]
 8017c56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8017c58:	683b      	ldr	r3, [r7, #0]
 8017c5a:	685a      	ldr	r2, [r3, #4]
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	697a      	ldr	r2, [r7, #20]
 8017c64:	621a      	str	r2, [r3, #32]
}
 8017c66:	bf00      	nop
 8017c68:	371c      	adds	r7, #28
 8017c6a:	46bd      	mov	sp, r7
 8017c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c70:	4770      	bx	lr
 8017c72:	bf00      	nop
 8017c74:	feff8fff 	.word	0xfeff8fff
 8017c78:	40010000 	.word	0x40010000
 8017c7c:	40010400 	.word	0x40010400
 8017c80:	40014000 	.word	0x40014000
 8017c84:	40014400 	.word	0x40014400
 8017c88:	40014800 	.word	0x40014800

08017c8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8017c8c:	b480      	push	{r7}
 8017c8e:	b087      	sub	sp, #28
 8017c90:	af00      	add	r7, sp, #0
 8017c92:	6078      	str	r0, [r7, #4]
 8017c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	6a1b      	ldr	r3, [r3, #32]
 8017c9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	6a1b      	ldr	r3, [r3, #32]
 8017ca6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017ca8:	687b      	ldr	r3, [r7, #4]
 8017caa:	685b      	ldr	r3, [r3, #4]
 8017cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	69db      	ldr	r3, [r3, #28]
 8017cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8017cb4:	68fb      	ldr	r3, [r7, #12]
 8017cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8017cbc:	68fb      	ldr	r3, [r7, #12]
 8017cbe:	f023 0303 	bic.w	r3, r3, #3
 8017cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8017cc4:	683b      	ldr	r3, [r7, #0]
 8017cc6:	681b      	ldr	r3, [r3, #0]
 8017cc8:	68fa      	ldr	r2, [r7, #12]
 8017cca:	4313      	orrs	r3, r2
 8017ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8017cce:	697b      	ldr	r3, [r7, #20]
 8017cd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8017cd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8017cd6:	683b      	ldr	r3, [r7, #0]
 8017cd8:	689b      	ldr	r3, [r3, #8]
 8017cda:	021b      	lsls	r3, r3, #8
 8017cdc:	697a      	ldr	r2, [r7, #20]
 8017cde:	4313      	orrs	r3, r2
 8017ce0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	4a27      	ldr	r2, [pc, #156]	; (8017d84 <TIM_OC3_SetConfig+0xf8>)
 8017ce6:	4293      	cmp	r3, r2
 8017ce8:	d003      	beq.n	8017cf2 <TIM_OC3_SetConfig+0x66>
 8017cea:	687b      	ldr	r3, [r7, #4]
 8017cec:	4a26      	ldr	r2, [pc, #152]	; (8017d88 <TIM_OC3_SetConfig+0xfc>)
 8017cee:	4293      	cmp	r3, r2
 8017cf0:	d10d      	bne.n	8017d0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8017cf2:	697b      	ldr	r3, [r7, #20]
 8017cf4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8017cf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8017cfa:	683b      	ldr	r3, [r7, #0]
 8017cfc:	68db      	ldr	r3, [r3, #12]
 8017cfe:	021b      	lsls	r3, r3, #8
 8017d00:	697a      	ldr	r2, [r7, #20]
 8017d02:	4313      	orrs	r3, r2
 8017d04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8017d06:	697b      	ldr	r3, [r7, #20]
 8017d08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8017d0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	4a1c      	ldr	r2, [pc, #112]	; (8017d84 <TIM_OC3_SetConfig+0xf8>)
 8017d12:	4293      	cmp	r3, r2
 8017d14:	d00f      	beq.n	8017d36 <TIM_OC3_SetConfig+0xaa>
 8017d16:	687b      	ldr	r3, [r7, #4]
 8017d18:	4a1b      	ldr	r2, [pc, #108]	; (8017d88 <TIM_OC3_SetConfig+0xfc>)
 8017d1a:	4293      	cmp	r3, r2
 8017d1c:	d00b      	beq.n	8017d36 <TIM_OC3_SetConfig+0xaa>
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	4a1a      	ldr	r2, [pc, #104]	; (8017d8c <TIM_OC3_SetConfig+0x100>)
 8017d22:	4293      	cmp	r3, r2
 8017d24:	d007      	beq.n	8017d36 <TIM_OC3_SetConfig+0xaa>
 8017d26:	687b      	ldr	r3, [r7, #4]
 8017d28:	4a19      	ldr	r2, [pc, #100]	; (8017d90 <TIM_OC3_SetConfig+0x104>)
 8017d2a:	4293      	cmp	r3, r2
 8017d2c:	d003      	beq.n	8017d36 <TIM_OC3_SetConfig+0xaa>
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	4a18      	ldr	r2, [pc, #96]	; (8017d94 <TIM_OC3_SetConfig+0x108>)
 8017d32:	4293      	cmp	r3, r2
 8017d34:	d113      	bne.n	8017d5e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8017d36:	693b      	ldr	r3, [r7, #16]
 8017d38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017d3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8017d3e:	693b      	ldr	r3, [r7, #16]
 8017d40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8017d44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8017d46:	683b      	ldr	r3, [r7, #0]
 8017d48:	695b      	ldr	r3, [r3, #20]
 8017d4a:	011b      	lsls	r3, r3, #4
 8017d4c:	693a      	ldr	r2, [r7, #16]
 8017d4e:	4313      	orrs	r3, r2
 8017d50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8017d52:	683b      	ldr	r3, [r7, #0]
 8017d54:	699b      	ldr	r3, [r3, #24]
 8017d56:	011b      	lsls	r3, r3, #4
 8017d58:	693a      	ldr	r2, [r7, #16]
 8017d5a:	4313      	orrs	r3, r2
 8017d5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	693a      	ldr	r2, [r7, #16]
 8017d62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	68fa      	ldr	r2, [r7, #12]
 8017d68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8017d6a:	683b      	ldr	r3, [r7, #0]
 8017d6c:	685a      	ldr	r2, [r3, #4]
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	697a      	ldr	r2, [r7, #20]
 8017d76:	621a      	str	r2, [r3, #32]
}
 8017d78:	bf00      	nop
 8017d7a:	371c      	adds	r7, #28
 8017d7c:	46bd      	mov	sp, r7
 8017d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d82:	4770      	bx	lr
 8017d84:	40010000 	.word	0x40010000
 8017d88:	40010400 	.word	0x40010400
 8017d8c:	40014000 	.word	0x40014000
 8017d90:	40014400 	.word	0x40014400
 8017d94:	40014800 	.word	0x40014800

08017d98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8017d98:	b480      	push	{r7}
 8017d9a:	b087      	sub	sp, #28
 8017d9c:	af00      	add	r7, sp, #0
 8017d9e:	6078      	str	r0, [r7, #4]
 8017da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	6a1b      	ldr	r3, [r3, #32]
 8017da6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	6a1b      	ldr	r3, [r3, #32]
 8017db2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	685b      	ldr	r3, [r3, #4]
 8017db8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	69db      	ldr	r3, [r3, #28]
 8017dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8017dc0:	68fb      	ldr	r3, [r7, #12]
 8017dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8017dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8017dc8:	68fb      	ldr	r3, [r7, #12]
 8017dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8017dce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017dd0:	683b      	ldr	r3, [r7, #0]
 8017dd2:	681b      	ldr	r3, [r3, #0]
 8017dd4:	021b      	lsls	r3, r3, #8
 8017dd6:	68fa      	ldr	r2, [r7, #12]
 8017dd8:	4313      	orrs	r3, r2
 8017dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8017ddc:	693b      	ldr	r3, [r7, #16]
 8017dde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8017de2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8017de4:	683b      	ldr	r3, [r7, #0]
 8017de6:	689b      	ldr	r3, [r3, #8]
 8017de8:	031b      	lsls	r3, r3, #12
 8017dea:	693a      	ldr	r2, [r7, #16]
 8017dec:	4313      	orrs	r3, r2
 8017dee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	4a18      	ldr	r2, [pc, #96]	; (8017e54 <TIM_OC4_SetConfig+0xbc>)
 8017df4:	4293      	cmp	r3, r2
 8017df6:	d00f      	beq.n	8017e18 <TIM_OC4_SetConfig+0x80>
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	4a17      	ldr	r2, [pc, #92]	; (8017e58 <TIM_OC4_SetConfig+0xc0>)
 8017dfc:	4293      	cmp	r3, r2
 8017dfe:	d00b      	beq.n	8017e18 <TIM_OC4_SetConfig+0x80>
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	4a16      	ldr	r2, [pc, #88]	; (8017e5c <TIM_OC4_SetConfig+0xc4>)
 8017e04:	4293      	cmp	r3, r2
 8017e06:	d007      	beq.n	8017e18 <TIM_OC4_SetConfig+0x80>
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	4a15      	ldr	r2, [pc, #84]	; (8017e60 <TIM_OC4_SetConfig+0xc8>)
 8017e0c:	4293      	cmp	r3, r2
 8017e0e:	d003      	beq.n	8017e18 <TIM_OC4_SetConfig+0x80>
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	4a14      	ldr	r2, [pc, #80]	; (8017e64 <TIM_OC4_SetConfig+0xcc>)
 8017e14:	4293      	cmp	r3, r2
 8017e16:	d109      	bne.n	8017e2c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8017e18:	697b      	ldr	r3, [r7, #20]
 8017e1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8017e1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8017e20:	683b      	ldr	r3, [r7, #0]
 8017e22:	695b      	ldr	r3, [r3, #20]
 8017e24:	019b      	lsls	r3, r3, #6
 8017e26:	697a      	ldr	r2, [r7, #20]
 8017e28:	4313      	orrs	r3, r2
 8017e2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	697a      	ldr	r2, [r7, #20]
 8017e30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	68fa      	ldr	r2, [r7, #12]
 8017e36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8017e38:	683b      	ldr	r3, [r7, #0]
 8017e3a:	685a      	ldr	r2, [r3, #4]
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	693a      	ldr	r2, [r7, #16]
 8017e44:	621a      	str	r2, [r3, #32]
}
 8017e46:	bf00      	nop
 8017e48:	371c      	adds	r7, #28
 8017e4a:	46bd      	mov	sp, r7
 8017e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e50:	4770      	bx	lr
 8017e52:	bf00      	nop
 8017e54:	40010000 	.word	0x40010000
 8017e58:	40010400 	.word	0x40010400
 8017e5c:	40014000 	.word	0x40014000
 8017e60:	40014400 	.word	0x40014400
 8017e64:	40014800 	.word	0x40014800

08017e68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8017e68:	b480      	push	{r7}
 8017e6a:	b087      	sub	sp, #28
 8017e6c:	af00      	add	r7, sp, #0
 8017e6e:	6078      	str	r0, [r7, #4]
 8017e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	6a1b      	ldr	r3, [r3, #32]
 8017e76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8017e7a:	687b      	ldr	r3, [r7, #4]
 8017e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	6a1b      	ldr	r3, [r3, #32]
 8017e82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	685b      	ldr	r3, [r3, #4]
 8017e88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8017e90:	68fb      	ldr	r3, [r7, #12]
 8017e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017e96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8017e98:	683b      	ldr	r3, [r7, #0]
 8017e9a:	681b      	ldr	r3, [r3, #0]
 8017e9c:	68fa      	ldr	r2, [r7, #12]
 8017e9e:	4313      	orrs	r3, r2
 8017ea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8017ea2:	693b      	ldr	r3, [r7, #16]
 8017ea4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8017ea8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8017eaa:	683b      	ldr	r3, [r7, #0]
 8017eac:	689b      	ldr	r3, [r3, #8]
 8017eae:	041b      	lsls	r3, r3, #16
 8017eb0:	693a      	ldr	r2, [r7, #16]
 8017eb2:	4313      	orrs	r3, r2
 8017eb4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	4a17      	ldr	r2, [pc, #92]	; (8017f18 <TIM_OC5_SetConfig+0xb0>)
 8017eba:	4293      	cmp	r3, r2
 8017ebc:	d00f      	beq.n	8017ede <TIM_OC5_SetConfig+0x76>
 8017ebe:	687b      	ldr	r3, [r7, #4]
 8017ec0:	4a16      	ldr	r2, [pc, #88]	; (8017f1c <TIM_OC5_SetConfig+0xb4>)
 8017ec2:	4293      	cmp	r3, r2
 8017ec4:	d00b      	beq.n	8017ede <TIM_OC5_SetConfig+0x76>
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	4a15      	ldr	r2, [pc, #84]	; (8017f20 <TIM_OC5_SetConfig+0xb8>)
 8017eca:	4293      	cmp	r3, r2
 8017ecc:	d007      	beq.n	8017ede <TIM_OC5_SetConfig+0x76>
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	4a14      	ldr	r2, [pc, #80]	; (8017f24 <TIM_OC5_SetConfig+0xbc>)
 8017ed2:	4293      	cmp	r3, r2
 8017ed4:	d003      	beq.n	8017ede <TIM_OC5_SetConfig+0x76>
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	4a13      	ldr	r2, [pc, #76]	; (8017f28 <TIM_OC5_SetConfig+0xc0>)
 8017eda:	4293      	cmp	r3, r2
 8017edc:	d109      	bne.n	8017ef2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8017ede:	697b      	ldr	r3, [r7, #20]
 8017ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8017ee4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8017ee6:	683b      	ldr	r3, [r7, #0]
 8017ee8:	695b      	ldr	r3, [r3, #20]
 8017eea:	021b      	lsls	r3, r3, #8
 8017eec:	697a      	ldr	r2, [r7, #20]
 8017eee:	4313      	orrs	r3, r2
 8017ef0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	697a      	ldr	r2, [r7, #20]
 8017ef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	68fa      	ldr	r2, [r7, #12]
 8017efc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8017efe:	683b      	ldr	r3, [r7, #0]
 8017f00:	685a      	ldr	r2, [r3, #4]
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	693a      	ldr	r2, [r7, #16]
 8017f0a:	621a      	str	r2, [r3, #32]
}
 8017f0c:	bf00      	nop
 8017f0e:	371c      	adds	r7, #28
 8017f10:	46bd      	mov	sp, r7
 8017f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f16:	4770      	bx	lr
 8017f18:	40010000 	.word	0x40010000
 8017f1c:	40010400 	.word	0x40010400
 8017f20:	40014000 	.word	0x40014000
 8017f24:	40014400 	.word	0x40014400
 8017f28:	40014800 	.word	0x40014800

08017f2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8017f2c:	b480      	push	{r7}
 8017f2e:	b087      	sub	sp, #28
 8017f30:	af00      	add	r7, sp, #0
 8017f32:	6078      	str	r0, [r7, #4]
 8017f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	6a1b      	ldr	r3, [r3, #32]
 8017f3a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017f42:	687b      	ldr	r3, [r7, #4]
 8017f44:	6a1b      	ldr	r3, [r3, #32]
 8017f46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	685b      	ldr	r3, [r3, #4]
 8017f4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8017f4e:	687b      	ldr	r3, [r7, #4]
 8017f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8017f54:	68fb      	ldr	r3, [r7, #12]
 8017f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8017f5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017f5c:	683b      	ldr	r3, [r7, #0]
 8017f5e:	681b      	ldr	r3, [r3, #0]
 8017f60:	021b      	lsls	r3, r3, #8
 8017f62:	68fa      	ldr	r2, [r7, #12]
 8017f64:	4313      	orrs	r3, r2
 8017f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8017f68:	693b      	ldr	r3, [r7, #16]
 8017f6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8017f6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8017f70:	683b      	ldr	r3, [r7, #0]
 8017f72:	689b      	ldr	r3, [r3, #8]
 8017f74:	051b      	lsls	r3, r3, #20
 8017f76:	693a      	ldr	r2, [r7, #16]
 8017f78:	4313      	orrs	r3, r2
 8017f7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	4a18      	ldr	r2, [pc, #96]	; (8017fe0 <TIM_OC6_SetConfig+0xb4>)
 8017f80:	4293      	cmp	r3, r2
 8017f82:	d00f      	beq.n	8017fa4 <TIM_OC6_SetConfig+0x78>
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	4a17      	ldr	r2, [pc, #92]	; (8017fe4 <TIM_OC6_SetConfig+0xb8>)
 8017f88:	4293      	cmp	r3, r2
 8017f8a:	d00b      	beq.n	8017fa4 <TIM_OC6_SetConfig+0x78>
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	4a16      	ldr	r2, [pc, #88]	; (8017fe8 <TIM_OC6_SetConfig+0xbc>)
 8017f90:	4293      	cmp	r3, r2
 8017f92:	d007      	beq.n	8017fa4 <TIM_OC6_SetConfig+0x78>
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	4a15      	ldr	r2, [pc, #84]	; (8017fec <TIM_OC6_SetConfig+0xc0>)
 8017f98:	4293      	cmp	r3, r2
 8017f9a:	d003      	beq.n	8017fa4 <TIM_OC6_SetConfig+0x78>
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	4a14      	ldr	r2, [pc, #80]	; (8017ff0 <TIM_OC6_SetConfig+0xc4>)
 8017fa0:	4293      	cmp	r3, r2
 8017fa2:	d109      	bne.n	8017fb8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8017fa4:	697b      	ldr	r3, [r7, #20]
 8017fa6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8017faa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8017fac:	683b      	ldr	r3, [r7, #0]
 8017fae:	695b      	ldr	r3, [r3, #20]
 8017fb0:	029b      	lsls	r3, r3, #10
 8017fb2:	697a      	ldr	r2, [r7, #20]
 8017fb4:	4313      	orrs	r3, r2
 8017fb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	697a      	ldr	r2, [r7, #20]
 8017fbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	68fa      	ldr	r2, [r7, #12]
 8017fc2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8017fc4:	683b      	ldr	r3, [r7, #0]
 8017fc6:	685a      	ldr	r2, [r3, #4]
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	693a      	ldr	r2, [r7, #16]
 8017fd0:	621a      	str	r2, [r3, #32]
}
 8017fd2:	bf00      	nop
 8017fd4:	371c      	adds	r7, #28
 8017fd6:	46bd      	mov	sp, r7
 8017fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fdc:	4770      	bx	lr
 8017fde:	bf00      	nop
 8017fe0:	40010000 	.word	0x40010000
 8017fe4:	40010400 	.word	0x40010400
 8017fe8:	40014000 	.word	0x40014000
 8017fec:	40014400 	.word	0x40014400
 8017ff0:	40014800 	.word	0x40014800

08017ff4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8017ff4:	b480      	push	{r7}
 8017ff6:	b087      	sub	sp, #28
 8017ff8:	af00      	add	r7, sp, #0
 8017ffa:	60f8      	str	r0, [r7, #12]
 8017ffc:	60b9      	str	r1, [r7, #8]
 8017ffe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8018000:	68bb      	ldr	r3, [r7, #8]
 8018002:	f003 031f 	and.w	r3, r3, #31
 8018006:	2201      	movs	r2, #1
 8018008:	fa02 f303 	lsl.w	r3, r2, r3
 801800c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801800e:	68fb      	ldr	r3, [r7, #12]
 8018010:	6a1a      	ldr	r2, [r3, #32]
 8018012:	697b      	ldr	r3, [r7, #20]
 8018014:	43db      	mvns	r3, r3
 8018016:	401a      	ands	r2, r3
 8018018:	68fb      	ldr	r3, [r7, #12]
 801801a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801801c:	68fb      	ldr	r3, [r7, #12]
 801801e:	6a1a      	ldr	r2, [r3, #32]
 8018020:	68bb      	ldr	r3, [r7, #8]
 8018022:	f003 031f 	and.w	r3, r3, #31
 8018026:	6879      	ldr	r1, [r7, #4]
 8018028:	fa01 f303 	lsl.w	r3, r1, r3
 801802c:	431a      	orrs	r2, r3
 801802e:	68fb      	ldr	r3, [r7, #12]
 8018030:	621a      	str	r2, [r3, #32]
}
 8018032:	bf00      	nop
 8018034:	371c      	adds	r7, #28
 8018036:	46bd      	mov	sp, r7
 8018038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801803c:	4770      	bx	lr
	...

08018040 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8018040:	b480      	push	{r7}
 8018042:	b085      	sub	sp, #20
 8018044:	af00      	add	r7, sp, #0
 8018046:	6078      	str	r0, [r7, #4]
 8018048:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8018050:	2b01      	cmp	r3, #1
 8018052:	d101      	bne.n	8018058 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8018054:	2302      	movs	r3, #2
 8018056:	e068      	b.n	801812a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	2201      	movs	r2, #1
 801805c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	2202      	movs	r2, #2
 8018064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	681b      	ldr	r3, [r3, #0]
 801806c:	685b      	ldr	r3, [r3, #4]
 801806e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	681b      	ldr	r3, [r3, #0]
 8018074:	689b      	ldr	r3, [r3, #8]
 8018076:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	681b      	ldr	r3, [r3, #0]
 801807c:	4a2e      	ldr	r2, [pc, #184]	; (8018138 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 801807e:	4293      	cmp	r3, r2
 8018080:	d004      	beq.n	801808c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	681b      	ldr	r3, [r3, #0]
 8018086:	4a2d      	ldr	r2, [pc, #180]	; (801813c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8018088:	4293      	cmp	r3, r2
 801808a:	d108      	bne.n	801809e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801808c:	68fb      	ldr	r3, [r7, #12]
 801808e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8018092:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8018094:	683b      	ldr	r3, [r7, #0]
 8018096:	685b      	ldr	r3, [r3, #4]
 8018098:	68fa      	ldr	r2, [r7, #12]
 801809a:	4313      	orrs	r3, r2
 801809c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801809e:	68fb      	ldr	r3, [r7, #12]
 80180a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80180a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80180a6:	683b      	ldr	r3, [r7, #0]
 80180a8:	681b      	ldr	r3, [r3, #0]
 80180aa:	68fa      	ldr	r2, [r7, #12]
 80180ac:	4313      	orrs	r3, r2
 80180ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	681b      	ldr	r3, [r3, #0]
 80180b4:	68fa      	ldr	r2, [r7, #12]
 80180b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	681b      	ldr	r3, [r3, #0]
 80180bc:	4a1e      	ldr	r2, [pc, #120]	; (8018138 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80180be:	4293      	cmp	r3, r2
 80180c0:	d01d      	beq.n	80180fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	681b      	ldr	r3, [r3, #0]
 80180c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80180ca:	d018      	beq.n	80180fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	681b      	ldr	r3, [r3, #0]
 80180d0:	4a1b      	ldr	r2, [pc, #108]	; (8018140 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80180d2:	4293      	cmp	r3, r2
 80180d4:	d013      	beq.n	80180fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	681b      	ldr	r3, [r3, #0]
 80180da:	4a1a      	ldr	r2, [pc, #104]	; (8018144 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80180dc:	4293      	cmp	r3, r2
 80180de:	d00e      	beq.n	80180fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	681b      	ldr	r3, [r3, #0]
 80180e4:	4a18      	ldr	r2, [pc, #96]	; (8018148 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80180e6:	4293      	cmp	r3, r2
 80180e8:	d009      	beq.n	80180fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	681b      	ldr	r3, [r3, #0]
 80180ee:	4a13      	ldr	r2, [pc, #76]	; (801813c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80180f0:	4293      	cmp	r3, r2
 80180f2:	d004      	beq.n	80180fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	681b      	ldr	r3, [r3, #0]
 80180f8:	4a14      	ldr	r2, [pc, #80]	; (801814c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80180fa:	4293      	cmp	r3, r2
 80180fc:	d10c      	bne.n	8018118 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80180fe:	68bb      	ldr	r3, [r7, #8]
 8018100:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8018104:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8018106:	683b      	ldr	r3, [r7, #0]
 8018108:	689b      	ldr	r3, [r3, #8]
 801810a:	68ba      	ldr	r2, [r7, #8]
 801810c:	4313      	orrs	r3, r2
 801810e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	681b      	ldr	r3, [r3, #0]
 8018114:	68ba      	ldr	r2, [r7, #8]
 8018116:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	2201      	movs	r2, #1
 801811c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	2200      	movs	r2, #0
 8018124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8018128:	2300      	movs	r3, #0
}
 801812a:	4618      	mov	r0, r3
 801812c:	3714      	adds	r7, #20
 801812e:	46bd      	mov	sp, r7
 8018130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018134:	4770      	bx	lr
 8018136:	bf00      	nop
 8018138:	40010000 	.word	0x40010000
 801813c:	40010400 	.word	0x40010400
 8018140:	40000400 	.word	0x40000400
 8018144:	40000800 	.word	0x40000800
 8018148:	40000c00 	.word	0x40000c00
 801814c:	40001800 	.word	0x40001800

08018150 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8018150:	b480      	push	{r7}
 8018152:	b085      	sub	sp, #20
 8018154:	af00      	add	r7, sp, #0
 8018156:	6078      	str	r0, [r7, #4]
 8018158:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801815a:	2300      	movs	r3, #0
 801815c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8018164:	2b01      	cmp	r3, #1
 8018166:	d101      	bne.n	801816c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8018168:	2302      	movs	r3, #2
 801816a:	e065      	b.n	8018238 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	2201      	movs	r2, #1
 8018170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8018174:	68fb      	ldr	r3, [r7, #12]
 8018176:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801817a:	683b      	ldr	r3, [r7, #0]
 801817c:	68db      	ldr	r3, [r3, #12]
 801817e:	4313      	orrs	r3, r2
 8018180:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8018182:	68fb      	ldr	r3, [r7, #12]
 8018184:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8018188:	683b      	ldr	r3, [r7, #0]
 801818a:	689b      	ldr	r3, [r3, #8]
 801818c:	4313      	orrs	r3, r2
 801818e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8018190:	68fb      	ldr	r3, [r7, #12]
 8018192:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8018196:	683b      	ldr	r3, [r7, #0]
 8018198:	685b      	ldr	r3, [r3, #4]
 801819a:	4313      	orrs	r3, r2
 801819c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801819e:	68fb      	ldr	r3, [r7, #12]
 80181a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80181a4:	683b      	ldr	r3, [r7, #0]
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	4313      	orrs	r3, r2
 80181aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80181ac:	68fb      	ldr	r3, [r7, #12]
 80181ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80181b2:	683b      	ldr	r3, [r7, #0]
 80181b4:	691b      	ldr	r3, [r3, #16]
 80181b6:	4313      	orrs	r3, r2
 80181b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80181ba:	68fb      	ldr	r3, [r7, #12]
 80181bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80181c0:	683b      	ldr	r3, [r7, #0]
 80181c2:	695b      	ldr	r3, [r3, #20]
 80181c4:	4313      	orrs	r3, r2
 80181c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80181c8:	68fb      	ldr	r3, [r7, #12]
 80181ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80181ce:	683b      	ldr	r3, [r7, #0]
 80181d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80181d2:	4313      	orrs	r3, r2
 80181d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80181d6:	68fb      	ldr	r3, [r7, #12]
 80181d8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80181dc:	683b      	ldr	r3, [r7, #0]
 80181de:	699b      	ldr	r3, [r3, #24]
 80181e0:	041b      	lsls	r3, r3, #16
 80181e2:	4313      	orrs	r3, r2
 80181e4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80181e6:	687b      	ldr	r3, [r7, #4]
 80181e8:	681b      	ldr	r3, [r3, #0]
 80181ea:	4a16      	ldr	r2, [pc, #88]	; (8018244 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80181ec:	4293      	cmp	r3, r2
 80181ee:	d004      	beq.n	80181fa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80181f0:	687b      	ldr	r3, [r7, #4]
 80181f2:	681b      	ldr	r3, [r3, #0]
 80181f4:	4a14      	ldr	r2, [pc, #80]	; (8018248 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80181f6:	4293      	cmp	r3, r2
 80181f8:	d115      	bne.n	8018226 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80181fa:	68fb      	ldr	r3, [r7, #12]
 80181fc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8018200:	683b      	ldr	r3, [r7, #0]
 8018202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018204:	051b      	lsls	r3, r3, #20
 8018206:	4313      	orrs	r3, r2
 8018208:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801820a:	68fb      	ldr	r3, [r7, #12]
 801820c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8018210:	683b      	ldr	r3, [r7, #0]
 8018212:	69db      	ldr	r3, [r3, #28]
 8018214:	4313      	orrs	r3, r2
 8018216:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8018218:	68fb      	ldr	r3, [r7, #12]
 801821a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801821e:	683b      	ldr	r3, [r7, #0]
 8018220:	6a1b      	ldr	r3, [r3, #32]
 8018222:	4313      	orrs	r3, r2
 8018224:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	681b      	ldr	r3, [r3, #0]
 801822a:	68fa      	ldr	r2, [r7, #12]
 801822c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	2200      	movs	r2, #0
 8018232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8018236:	2300      	movs	r3, #0
}
 8018238:	4618      	mov	r0, r3
 801823a:	3714      	adds	r7, #20
 801823c:	46bd      	mov	sp, r7
 801823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018242:	4770      	bx	lr
 8018244:	40010000 	.word	0x40010000
 8018248:	40010400 	.word	0x40010400

0801824c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801824c:	b480      	push	{r7}
 801824e:	b083      	sub	sp, #12
 8018250:	af00      	add	r7, sp, #0
 8018252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8018254:	bf00      	nop
 8018256:	370c      	adds	r7, #12
 8018258:	46bd      	mov	sp, r7
 801825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801825e:	4770      	bx	lr

08018260 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8018260:	b480      	push	{r7}
 8018262:	b083      	sub	sp, #12
 8018264:	af00      	add	r7, sp, #0
 8018266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8018268:	bf00      	nop
 801826a:	370c      	adds	r7, #12
 801826c:	46bd      	mov	sp, r7
 801826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018272:	4770      	bx	lr

08018274 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8018274:	b480      	push	{r7}
 8018276:	b083      	sub	sp, #12
 8018278:	af00      	add	r7, sp, #0
 801827a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801827c:	bf00      	nop
 801827e:	370c      	adds	r7, #12
 8018280:	46bd      	mov	sp, r7
 8018282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018286:	4770      	bx	lr

08018288 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8018288:	b580      	push	{r7, lr}
 801828a:	b082      	sub	sp, #8
 801828c:	af00      	add	r7, sp, #0
 801828e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8018290:	687b      	ldr	r3, [r7, #4]
 8018292:	2b00      	cmp	r3, #0
 8018294:	d101      	bne.n	801829a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8018296:	2301      	movs	r3, #1
 8018298:	e042      	b.n	8018320 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801829a:	687b      	ldr	r3, [r7, #4]
 801829c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80182a0:	2b00      	cmp	r3, #0
 80182a2:	d106      	bne.n	80182b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	2200      	movs	r2, #0
 80182a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80182ac:	6878      	ldr	r0, [r7, #4]
 80182ae:	f7ea f9ab 	bl	8002608 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	2224      	movs	r2, #36	; 0x24
 80182b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	681b      	ldr	r3, [r3, #0]
 80182be:	681a      	ldr	r2, [r3, #0]
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	681b      	ldr	r3, [r3, #0]
 80182c4:	f022 0201 	bic.w	r2, r2, #1
 80182c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80182ca:	6878      	ldr	r0, [r7, #4]
 80182cc:	f000 f9c0 	bl	8018650 <UART_SetConfig>
 80182d0:	4603      	mov	r3, r0
 80182d2:	2b01      	cmp	r3, #1
 80182d4:	d101      	bne.n	80182da <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80182d6:	2301      	movs	r3, #1
 80182d8:	e022      	b.n	8018320 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80182de:	2b00      	cmp	r3, #0
 80182e0:	d002      	beq.n	80182e8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80182e2:	6878      	ldr	r0, [r7, #4]
 80182e4:	f002 fb32 	bl	801a94c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	681b      	ldr	r3, [r3, #0]
 80182ec:	685a      	ldr	r2, [r3, #4]
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	681b      	ldr	r3, [r3, #0]
 80182f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80182f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	681b      	ldr	r3, [r3, #0]
 80182fc:	689a      	ldr	r2, [r3, #8]
 80182fe:	687b      	ldr	r3, [r7, #4]
 8018300:	681b      	ldr	r3, [r3, #0]
 8018302:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8018306:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	681b      	ldr	r3, [r3, #0]
 801830c:	681a      	ldr	r2, [r3, #0]
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	681b      	ldr	r3, [r3, #0]
 8018312:	f042 0201 	orr.w	r2, r2, #1
 8018316:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8018318:	6878      	ldr	r0, [r7, #4]
 801831a:	f002 fbb9 	bl	801aa90 <UART_CheckIdleState>
 801831e:	4603      	mov	r3, r0
}
 8018320:	4618      	mov	r0, r3
 8018322:	3708      	adds	r7, #8
 8018324:	46bd      	mov	sp, r7
 8018326:	bd80      	pop	{r7, pc}

08018328 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8018328:	b580      	push	{r7, lr}
 801832a:	b088      	sub	sp, #32
 801832c:	af00      	add	r7, sp, #0
 801832e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	681b      	ldr	r3, [r3, #0]
 8018334:	69db      	ldr	r3, [r3, #28]
 8018336:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	681b      	ldr	r3, [r3, #0]
 801833c:	681b      	ldr	r3, [r3, #0]
 801833e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	681b      	ldr	r3, [r3, #0]
 8018344:	689b      	ldr	r3, [r3, #8]
 8018346:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8018348:	69fa      	ldr	r2, [r7, #28]
 801834a:	f640 030f 	movw	r3, #2063	; 0x80f
 801834e:	4013      	ands	r3, r2
 8018350:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8018352:	693b      	ldr	r3, [r7, #16]
 8018354:	2b00      	cmp	r3, #0
 8018356:	d118      	bne.n	801838a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8018358:	69fb      	ldr	r3, [r7, #28]
 801835a:	f003 0320 	and.w	r3, r3, #32
 801835e:	2b00      	cmp	r3, #0
 8018360:	d013      	beq.n	801838a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8018362:	69bb      	ldr	r3, [r7, #24]
 8018364:	f003 0320 	and.w	r3, r3, #32
 8018368:	2b00      	cmp	r3, #0
 801836a:	d104      	bne.n	8018376 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801836c:	697b      	ldr	r3, [r7, #20]
 801836e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018372:	2b00      	cmp	r3, #0
 8018374:	d009      	beq.n	801838a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801837a:	2b00      	cmp	r3, #0
 801837c:	f000 8145 	beq.w	801860a <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018384:	6878      	ldr	r0, [r7, #4]
 8018386:	4798      	blx	r3
      }
      return;
 8018388:	e13f      	b.n	801860a <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801838a:	693b      	ldr	r3, [r7, #16]
 801838c:	2b00      	cmp	r3, #0
 801838e:	f000 80e8 	beq.w	8018562 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8018392:	697a      	ldr	r2, [r7, #20]
 8018394:	4ba1      	ldr	r3, [pc, #644]	; (801861c <HAL_UART_IRQHandler+0x2f4>)
 8018396:	4013      	ands	r3, r2
 8018398:	2b00      	cmp	r3, #0
 801839a:	d105      	bne.n	80183a8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801839c:	69ba      	ldr	r2, [r7, #24]
 801839e:	4ba0      	ldr	r3, [pc, #640]	; (8018620 <HAL_UART_IRQHandler+0x2f8>)
 80183a0:	4013      	ands	r3, r2
 80183a2:	2b00      	cmp	r3, #0
 80183a4:	f000 80dd 	beq.w	8018562 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80183a8:	69fb      	ldr	r3, [r7, #28]
 80183aa:	f003 0301 	and.w	r3, r3, #1
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	d010      	beq.n	80183d4 <HAL_UART_IRQHandler+0xac>
 80183b2:	69bb      	ldr	r3, [r7, #24]
 80183b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d00b      	beq.n	80183d4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	681b      	ldr	r3, [r3, #0]
 80183c0:	2201      	movs	r2, #1
 80183c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80183ca:	f043 0201 	orr.w	r2, r3, #1
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80183d4:	69fb      	ldr	r3, [r7, #28]
 80183d6:	f003 0302 	and.w	r3, r3, #2
 80183da:	2b00      	cmp	r3, #0
 80183dc:	d010      	beq.n	8018400 <HAL_UART_IRQHandler+0xd8>
 80183de:	697b      	ldr	r3, [r7, #20]
 80183e0:	f003 0301 	and.w	r3, r3, #1
 80183e4:	2b00      	cmp	r3, #0
 80183e6:	d00b      	beq.n	8018400 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	681b      	ldr	r3, [r3, #0]
 80183ec:	2202      	movs	r2, #2
 80183ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80183f6:	f043 0204 	orr.w	r2, r3, #4
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8018400:	69fb      	ldr	r3, [r7, #28]
 8018402:	f003 0304 	and.w	r3, r3, #4
 8018406:	2b00      	cmp	r3, #0
 8018408:	d010      	beq.n	801842c <HAL_UART_IRQHandler+0x104>
 801840a:	697b      	ldr	r3, [r7, #20]
 801840c:	f003 0301 	and.w	r3, r3, #1
 8018410:	2b00      	cmp	r3, #0
 8018412:	d00b      	beq.n	801842c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	2204      	movs	r2, #4
 801841a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018422:	f043 0202 	orr.w	r2, r3, #2
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801842c:	69fb      	ldr	r3, [r7, #28]
 801842e:	f003 0308 	and.w	r3, r3, #8
 8018432:	2b00      	cmp	r3, #0
 8018434:	d015      	beq.n	8018462 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8018436:	69bb      	ldr	r3, [r7, #24]
 8018438:	f003 0320 	and.w	r3, r3, #32
 801843c:	2b00      	cmp	r3, #0
 801843e:	d104      	bne.n	801844a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8018440:	697a      	ldr	r2, [r7, #20]
 8018442:	4b76      	ldr	r3, [pc, #472]	; (801861c <HAL_UART_IRQHandler+0x2f4>)
 8018444:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8018446:	2b00      	cmp	r3, #0
 8018448:	d00b      	beq.n	8018462 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	681b      	ldr	r3, [r3, #0]
 801844e:	2208      	movs	r2, #8
 8018450:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018458:	f043 0208 	orr.w	r2, r3, #8
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8018462:	69fb      	ldr	r3, [r7, #28]
 8018464:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018468:	2b00      	cmp	r3, #0
 801846a:	d011      	beq.n	8018490 <HAL_UART_IRQHandler+0x168>
 801846c:	69bb      	ldr	r3, [r7, #24]
 801846e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8018472:	2b00      	cmp	r3, #0
 8018474:	d00c      	beq.n	8018490 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	681b      	ldr	r3, [r3, #0]
 801847a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801847e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018486:	f043 0220 	orr.w	r2, r3, #32
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018496:	2b00      	cmp	r3, #0
 8018498:	f000 80b9 	beq.w	801860e <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801849c:	69fb      	ldr	r3, [r7, #28]
 801849e:	f003 0320 	and.w	r3, r3, #32
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d011      	beq.n	80184ca <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80184a6:	69bb      	ldr	r3, [r7, #24]
 80184a8:	f003 0320 	and.w	r3, r3, #32
 80184ac:	2b00      	cmp	r3, #0
 80184ae:	d104      	bne.n	80184ba <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80184b0:	697b      	ldr	r3, [r7, #20]
 80184b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80184b6:	2b00      	cmp	r3, #0
 80184b8:	d007      	beq.n	80184ca <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80184ba:	687b      	ldr	r3, [r7, #4]
 80184bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80184be:	2b00      	cmp	r3, #0
 80184c0:	d003      	beq.n	80184ca <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80184c6:	6878      	ldr	r0, [r7, #4]
 80184c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80184d0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80184d2:	687b      	ldr	r3, [r7, #4]
 80184d4:	681b      	ldr	r3, [r3, #0]
 80184d6:	689b      	ldr	r3, [r3, #8]
 80184d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80184dc:	2b40      	cmp	r3, #64	; 0x40
 80184de:	d004      	beq.n	80184ea <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80184e0:	68fb      	ldr	r3, [r7, #12]
 80184e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80184e6:	2b00      	cmp	r3, #0
 80184e8:	d031      	beq.n	801854e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80184ea:	6878      	ldr	r0, [r7, #4]
 80184ec:	f002 fb98 	bl	801ac20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	681b      	ldr	r3, [r3, #0]
 80184f4:	689b      	ldr	r3, [r3, #8]
 80184f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80184fa:	2b40      	cmp	r3, #64	; 0x40
 80184fc:	d123      	bne.n	8018546 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	681b      	ldr	r3, [r3, #0]
 8018502:	689a      	ldr	r2, [r3, #8]
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	681b      	ldr	r3, [r3, #0]
 8018508:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801850c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801850e:	687b      	ldr	r3, [r7, #4]
 8018510:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018512:	2b00      	cmp	r3, #0
 8018514:	d013      	beq.n	801853e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801851a:	4a42      	ldr	r2, [pc, #264]	; (8018624 <HAL_UART_IRQHandler+0x2fc>)
 801851c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801851e:	687b      	ldr	r3, [r7, #4]
 8018520:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018522:	4618      	mov	r0, r3
 8018524:	f7fa fe14 	bl	8013150 <HAL_DMA_Abort_IT>
 8018528:	4603      	mov	r3, r0
 801852a:	2b00      	cmp	r3, #0
 801852c:	d017      	beq.n	801855e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801852e:	687b      	ldr	r3, [r7, #4]
 8018530:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018534:	687a      	ldr	r2, [r7, #4]
 8018536:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8018538:	4610      	mov	r0, r2
 801853a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801853c:	e00f      	b.n	801855e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801853e:	6878      	ldr	r0, [r7, #4]
 8018540:	f000 f87c 	bl	801863c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018544:	e00b      	b.n	801855e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8018546:	6878      	ldr	r0, [r7, #4]
 8018548:	f000 f878 	bl	801863c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801854c:	e007      	b.n	801855e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801854e:	6878      	ldr	r0, [r7, #4]
 8018550:	f000 f874 	bl	801863c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	2200      	movs	r2, #0
 8018558:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 801855c:	e057      	b.n	801860e <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801855e:	bf00      	nop
    return;
 8018560:	e055      	b.n	801860e <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8018562:	69fb      	ldr	r3, [r7, #28]
 8018564:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8018568:	2b00      	cmp	r3, #0
 801856a:	d00d      	beq.n	8018588 <HAL_UART_IRQHandler+0x260>
 801856c:	697b      	ldr	r3, [r7, #20]
 801856e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8018572:	2b00      	cmp	r3, #0
 8018574:	d008      	beq.n	8018588 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	681b      	ldr	r3, [r3, #0]
 801857a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801857e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8018580:	6878      	ldr	r0, [r7, #4]
 8018582:	f002 fba1 	bl	801acc8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8018586:	e045      	b.n	8018614 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8018588:	69fb      	ldr	r3, [r7, #28]
 801858a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801858e:	2b00      	cmp	r3, #0
 8018590:	d012      	beq.n	80185b8 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8018592:	69bb      	ldr	r3, [r7, #24]
 8018594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018598:	2b00      	cmp	r3, #0
 801859a:	d104      	bne.n	80185a6 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801859c:	697b      	ldr	r3, [r7, #20]
 801859e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	d008      	beq.n	80185b8 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	d031      	beq.n	8018612 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80185b2:	6878      	ldr	r0, [r7, #4]
 80185b4:	4798      	blx	r3
    }
    return;
 80185b6:	e02c      	b.n	8018612 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80185b8:	69fb      	ldr	r3, [r7, #28]
 80185ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d008      	beq.n	80185d4 <HAL_UART_IRQHandler+0x2ac>
 80185c2:	69bb      	ldr	r3, [r7, #24]
 80185c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	d003      	beq.n	80185d4 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 80185cc:	6878      	ldr	r0, [r7, #4]
 80185ce:	f002 fb61 	bl	801ac94 <UART_EndTransmit_IT>
    return;
 80185d2:	e01f      	b.n	8018614 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80185d4:	69fb      	ldr	r3, [r7, #28]
 80185d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80185da:	2b00      	cmp	r3, #0
 80185dc:	d008      	beq.n	80185f0 <HAL_UART_IRQHandler+0x2c8>
 80185de:	69bb      	ldr	r3, [r7, #24]
 80185e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80185e4:	2b00      	cmp	r3, #0
 80185e6:	d003      	beq.n	80185f0 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80185e8:	6878      	ldr	r0, [r7, #4]
 80185ea:	f002 fb81 	bl	801acf0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80185ee:	e011      	b.n	8018614 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80185f0:	69fb      	ldr	r3, [r7, #28]
 80185f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	d00c      	beq.n	8018614 <HAL_UART_IRQHandler+0x2ec>
 80185fa:	69bb      	ldr	r3, [r7, #24]
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	da09      	bge.n	8018614 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8018600:	6878      	ldr	r0, [r7, #4]
 8018602:	f002 fb6b 	bl	801acdc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8018606:	bf00      	nop
 8018608:	e004      	b.n	8018614 <HAL_UART_IRQHandler+0x2ec>
      return;
 801860a:	bf00      	nop
 801860c:	e002      	b.n	8018614 <HAL_UART_IRQHandler+0x2ec>
    return;
 801860e:	bf00      	nop
 8018610:	e000      	b.n	8018614 <HAL_UART_IRQHandler+0x2ec>
    return;
 8018612:	bf00      	nop
  }
}
 8018614:	3720      	adds	r7, #32
 8018616:	46bd      	mov	sp, r7
 8018618:	bd80      	pop	{r7, pc}
 801861a:	bf00      	nop
 801861c:	10000001 	.word	0x10000001
 8018620:	04000120 	.word	0x04000120
 8018624:	0801ac69 	.word	0x0801ac69

08018628 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8018628:	b480      	push	{r7}
 801862a:	b083      	sub	sp, #12
 801862c:	af00      	add	r7, sp, #0
 801862e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8018630:	bf00      	nop
 8018632:	370c      	adds	r7, #12
 8018634:	46bd      	mov	sp, r7
 8018636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801863a:	4770      	bx	lr

0801863c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801863c:	b480      	push	{r7}
 801863e:	b083      	sub	sp, #12
 8018640:	af00      	add	r7, sp, #0
 8018642:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8018644:	bf00      	nop
 8018646:	370c      	adds	r7, #12
 8018648:	46bd      	mov	sp, r7
 801864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801864e:	4770      	bx	lr

08018650 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8018650:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8018654:	b090      	sub	sp, #64	; 0x40
 8018656:	af00      	add	r7, sp, #0
 8018658:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 801865a:	2300      	movs	r3, #0
 801865c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 801865e:	2300      	movs	r3, #0
 8018660:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8018664:	2300      	movs	r3, #0
 8018666:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8018668:	687b      	ldr	r3, [r7, #4]
 801866a:	689a      	ldr	r2, [r3, #8]
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	691b      	ldr	r3, [r3, #16]
 8018670:	431a      	orrs	r2, r3
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	695b      	ldr	r3, [r3, #20]
 8018676:	431a      	orrs	r2, r3
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	69db      	ldr	r3, [r3, #28]
 801867c:	4313      	orrs	r3, r2
 801867e:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018684:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018686:	4313      	orrs	r3, r2
 8018688:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801868a:	687b      	ldr	r3, [r7, #4]
 801868c:	681b      	ldr	r3, [r3, #0]
 801868e:	681a      	ldr	r2, [r3, #0]
 8018690:	4bc1      	ldr	r3, [pc, #772]	; (8018998 <UART_SetConfig+0x348>)
 8018692:	4013      	ands	r3, r2
 8018694:	687a      	ldr	r2, [r7, #4]
 8018696:	6812      	ldr	r2, [r2, #0]
 8018698:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801869a:	430b      	orrs	r3, r1
 801869c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	681b      	ldr	r3, [r3, #0]
 80186a2:	685b      	ldr	r3, [r3, #4]
 80186a4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	68da      	ldr	r2, [r3, #12]
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	681b      	ldr	r3, [r3, #0]
 80186b0:	430a      	orrs	r2, r1
 80186b2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	699b      	ldr	r3, [r3, #24]
 80186b8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	681b      	ldr	r3, [r3, #0]
 80186be:	4ab7      	ldr	r2, [pc, #732]	; (801899c <UART_SetConfig+0x34c>)
 80186c0:	4293      	cmp	r3, r2
 80186c2:	d004      	beq.n	80186ce <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	6a1b      	ldr	r3, [r3, #32]
 80186c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80186ca:	4313      	orrs	r3, r2
 80186cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	681b      	ldr	r3, [r3, #0]
 80186d2:	689a      	ldr	r2, [r3, #8]
 80186d4:	4bb2      	ldr	r3, [pc, #712]	; (80189a0 <UART_SetConfig+0x350>)
 80186d6:	4013      	ands	r3, r2
 80186d8:	687a      	ldr	r2, [r7, #4]
 80186da:	6812      	ldr	r2, [r2, #0]
 80186dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80186de:	430b      	orrs	r3, r1
 80186e0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	681b      	ldr	r3, [r3, #0]
 80186e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80186e8:	f023 010f 	bic.w	r1, r3, #15
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	681b      	ldr	r3, [r3, #0]
 80186f4:	430a      	orrs	r2, r1
 80186f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80186f8:	687b      	ldr	r3, [r7, #4]
 80186fa:	681b      	ldr	r3, [r3, #0]
 80186fc:	4aa9      	ldr	r2, [pc, #676]	; (80189a4 <UART_SetConfig+0x354>)
 80186fe:	4293      	cmp	r3, r2
 8018700:	d177      	bne.n	80187f2 <UART_SetConfig+0x1a2>
 8018702:	4ba9      	ldr	r3, [pc, #676]	; (80189a8 <UART_SetConfig+0x358>)
 8018704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018706:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801870a:	2b28      	cmp	r3, #40	; 0x28
 801870c:	d86c      	bhi.n	80187e8 <UART_SetConfig+0x198>
 801870e:	a201      	add	r2, pc, #4	; (adr r2, 8018714 <UART_SetConfig+0xc4>)
 8018710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018714:	080187b9 	.word	0x080187b9
 8018718:	080187e9 	.word	0x080187e9
 801871c:	080187e9 	.word	0x080187e9
 8018720:	080187e9 	.word	0x080187e9
 8018724:	080187e9 	.word	0x080187e9
 8018728:	080187e9 	.word	0x080187e9
 801872c:	080187e9 	.word	0x080187e9
 8018730:	080187e9 	.word	0x080187e9
 8018734:	080187c1 	.word	0x080187c1
 8018738:	080187e9 	.word	0x080187e9
 801873c:	080187e9 	.word	0x080187e9
 8018740:	080187e9 	.word	0x080187e9
 8018744:	080187e9 	.word	0x080187e9
 8018748:	080187e9 	.word	0x080187e9
 801874c:	080187e9 	.word	0x080187e9
 8018750:	080187e9 	.word	0x080187e9
 8018754:	080187c9 	.word	0x080187c9
 8018758:	080187e9 	.word	0x080187e9
 801875c:	080187e9 	.word	0x080187e9
 8018760:	080187e9 	.word	0x080187e9
 8018764:	080187e9 	.word	0x080187e9
 8018768:	080187e9 	.word	0x080187e9
 801876c:	080187e9 	.word	0x080187e9
 8018770:	080187e9 	.word	0x080187e9
 8018774:	080187d1 	.word	0x080187d1
 8018778:	080187e9 	.word	0x080187e9
 801877c:	080187e9 	.word	0x080187e9
 8018780:	080187e9 	.word	0x080187e9
 8018784:	080187e9 	.word	0x080187e9
 8018788:	080187e9 	.word	0x080187e9
 801878c:	080187e9 	.word	0x080187e9
 8018790:	080187e9 	.word	0x080187e9
 8018794:	080187d9 	.word	0x080187d9
 8018798:	080187e9 	.word	0x080187e9
 801879c:	080187e9 	.word	0x080187e9
 80187a0:	080187e9 	.word	0x080187e9
 80187a4:	080187e9 	.word	0x080187e9
 80187a8:	080187e9 	.word	0x080187e9
 80187ac:	080187e9 	.word	0x080187e9
 80187b0:	080187e9 	.word	0x080187e9
 80187b4:	080187e1 	.word	0x080187e1
 80187b8:	2301      	movs	r3, #1
 80187ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80187be:	e233      	b.n	8018c28 <UART_SetConfig+0x5d8>
 80187c0:	2304      	movs	r3, #4
 80187c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80187c6:	e22f      	b.n	8018c28 <UART_SetConfig+0x5d8>
 80187c8:	2308      	movs	r3, #8
 80187ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80187ce:	e22b      	b.n	8018c28 <UART_SetConfig+0x5d8>
 80187d0:	2310      	movs	r3, #16
 80187d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80187d6:	e227      	b.n	8018c28 <UART_SetConfig+0x5d8>
 80187d8:	2320      	movs	r3, #32
 80187da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80187de:	e223      	b.n	8018c28 <UART_SetConfig+0x5d8>
 80187e0:	2340      	movs	r3, #64	; 0x40
 80187e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80187e6:	e21f      	b.n	8018c28 <UART_SetConfig+0x5d8>
 80187e8:	2380      	movs	r3, #128	; 0x80
 80187ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80187ee:	bf00      	nop
 80187f0:	e21a      	b.n	8018c28 <UART_SetConfig+0x5d8>
 80187f2:	687b      	ldr	r3, [r7, #4]
 80187f4:	681b      	ldr	r3, [r3, #0]
 80187f6:	4a6d      	ldr	r2, [pc, #436]	; (80189ac <UART_SetConfig+0x35c>)
 80187f8:	4293      	cmp	r3, r2
 80187fa:	d132      	bne.n	8018862 <UART_SetConfig+0x212>
 80187fc:	4b6a      	ldr	r3, [pc, #424]	; (80189a8 <UART_SetConfig+0x358>)
 80187fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018800:	f003 0307 	and.w	r3, r3, #7
 8018804:	2b05      	cmp	r3, #5
 8018806:	d827      	bhi.n	8018858 <UART_SetConfig+0x208>
 8018808:	a201      	add	r2, pc, #4	; (adr r2, 8018810 <UART_SetConfig+0x1c0>)
 801880a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801880e:	bf00      	nop
 8018810:	08018829 	.word	0x08018829
 8018814:	08018831 	.word	0x08018831
 8018818:	08018839 	.word	0x08018839
 801881c:	08018841 	.word	0x08018841
 8018820:	08018849 	.word	0x08018849
 8018824:	08018851 	.word	0x08018851
 8018828:	2300      	movs	r3, #0
 801882a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801882e:	e1fb      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018830:	2304      	movs	r3, #4
 8018832:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018836:	e1f7      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018838:	2308      	movs	r3, #8
 801883a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801883e:	e1f3      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018840:	2310      	movs	r3, #16
 8018842:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018846:	e1ef      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018848:	2320      	movs	r3, #32
 801884a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801884e:	e1eb      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018850:	2340      	movs	r3, #64	; 0x40
 8018852:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018856:	e1e7      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018858:	2380      	movs	r3, #128	; 0x80
 801885a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801885e:	bf00      	nop
 8018860:	e1e2      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018862:	687b      	ldr	r3, [r7, #4]
 8018864:	681b      	ldr	r3, [r3, #0]
 8018866:	4a52      	ldr	r2, [pc, #328]	; (80189b0 <UART_SetConfig+0x360>)
 8018868:	4293      	cmp	r3, r2
 801886a:	d132      	bne.n	80188d2 <UART_SetConfig+0x282>
 801886c:	4b4e      	ldr	r3, [pc, #312]	; (80189a8 <UART_SetConfig+0x358>)
 801886e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018870:	f003 0307 	and.w	r3, r3, #7
 8018874:	2b05      	cmp	r3, #5
 8018876:	d827      	bhi.n	80188c8 <UART_SetConfig+0x278>
 8018878:	a201      	add	r2, pc, #4	; (adr r2, 8018880 <UART_SetConfig+0x230>)
 801887a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801887e:	bf00      	nop
 8018880:	08018899 	.word	0x08018899
 8018884:	080188a1 	.word	0x080188a1
 8018888:	080188a9 	.word	0x080188a9
 801888c:	080188b1 	.word	0x080188b1
 8018890:	080188b9 	.word	0x080188b9
 8018894:	080188c1 	.word	0x080188c1
 8018898:	2300      	movs	r3, #0
 801889a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801889e:	e1c3      	b.n	8018c28 <UART_SetConfig+0x5d8>
 80188a0:	2304      	movs	r3, #4
 80188a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80188a6:	e1bf      	b.n	8018c28 <UART_SetConfig+0x5d8>
 80188a8:	2308      	movs	r3, #8
 80188aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80188ae:	e1bb      	b.n	8018c28 <UART_SetConfig+0x5d8>
 80188b0:	2310      	movs	r3, #16
 80188b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80188b6:	e1b7      	b.n	8018c28 <UART_SetConfig+0x5d8>
 80188b8:	2320      	movs	r3, #32
 80188ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80188be:	e1b3      	b.n	8018c28 <UART_SetConfig+0x5d8>
 80188c0:	2340      	movs	r3, #64	; 0x40
 80188c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80188c6:	e1af      	b.n	8018c28 <UART_SetConfig+0x5d8>
 80188c8:	2380      	movs	r3, #128	; 0x80
 80188ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80188ce:	bf00      	nop
 80188d0:	e1aa      	b.n	8018c28 <UART_SetConfig+0x5d8>
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	681b      	ldr	r3, [r3, #0]
 80188d6:	4a37      	ldr	r2, [pc, #220]	; (80189b4 <UART_SetConfig+0x364>)
 80188d8:	4293      	cmp	r3, r2
 80188da:	d132      	bne.n	8018942 <UART_SetConfig+0x2f2>
 80188dc:	4b32      	ldr	r3, [pc, #200]	; (80189a8 <UART_SetConfig+0x358>)
 80188de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80188e0:	f003 0307 	and.w	r3, r3, #7
 80188e4:	2b05      	cmp	r3, #5
 80188e6:	d827      	bhi.n	8018938 <UART_SetConfig+0x2e8>
 80188e8:	a201      	add	r2, pc, #4	; (adr r2, 80188f0 <UART_SetConfig+0x2a0>)
 80188ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80188ee:	bf00      	nop
 80188f0:	08018909 	.word	0x08018909
 80188f4:	08018911 	.word	0x08018911
 80188f8:	08018919 	.word	0x08018919
 80188fc:	08018921 	.word	0x08018921
 8018900:	08018929 	.word	0x08018929
 8018904:	08018931 	.word	0x08018931
 8018908:	2300      	movs	r3, #0
 801890a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801890e:	e18b      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018910:	2304      	movs	r3, #4
 8018912:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018916:	e187      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018918:	2308      	movs	r3, #8
 801891a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801891e:	e183      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018920:	2310      	movs	r3, #16
 8018922:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018926:	e17f      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018928:	2320      	movs	r3, #32
 801892a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801892e:	e17b      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018930:	2340      	movs	r3, #64	; 0x40
 8018932:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018936:	e177      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018938:	2380      	movs	r3, #128	; 0x80
 801893a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801893e:	bf00      	nop
 8018940:	e172      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018942:	687b      	ldr	r3, [r7, #4]
 8018944:	681b      	ldr	r3, [r3, #0]
 8018946:	4a1c      	ldr	r2, [pc, #112]	; (80189b8 <UART_SetConfig+0x368>)
 8018948:	4293      	cmp	r3, r2
 801894a:	d144      	bne.n	80189d6 <UART_SetConfig+0x386>
 801894c:	4b16      	ldr	r3, [pc, #88]	; (80189a8 <UART_SetConfig+0x358>)
 801894e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018950:	f003 0307 	and.w	r3, r3, #7
 8018954:	2b05      	cmp	r3, #5
 8018956:	d839      	bhi.n	80189cc <UART_SetConfig+0x37c>
 8018958:	a201      	add	r2, pc, #4	; (adr r2, 8018960 <UART_SetConfig+0x310>)
 801895a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801895e:	bf00      	nop
 8018960:	08018979 	.word	0x08018979
 8018964:	08018981 	.word	0x08018981
 8018968:	08018989 	.word	0x08018989
 801896c:	08018991 	.word	0x08018991
 8018970:	080189bd 	.word	0x080189bd
 8018974:	080189c5 	.word	0x080189c5
 8018978:	2300      	movs	r3, #0
 801897a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801897e:	e153      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018980:	2304      	movs	r3, #4
 8018982:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018986:	e14f      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018988:	2308      	movs	r3, #8
 801898a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801898e:	e14b      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018990:	2310      	movs	r3, #16
 8018992:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018996:	e147      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018998:	cfff69f3 	.word	0xcfff69f3
 801899c:	58000c00 	.word	0x58000c00
 80189a0:	11fff4ff 	.word	0x11fff4ff
 80189a4:	40011000 	.word	0x40011000
 80189a8:	58024400 	.word	0x58024400
 80189ac:	40004400 	.word	0x40004400
 80189b0:	40004800 	.word	0x40004800
 80189b4:	40004c00 	.word	0x40004c00
 80189b8:	40005000 	.word	0x40005000
 80189bc:	2320      	movs	r3, #32
 80189be:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80189c2:	e131      	b.n	8018c28 <UART_SetConfig+0x5d8>
 80189c4:	2340      	movs	r3, #64	; 0x40
 80189c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80189ca:	e12d      	b.n	8018c28 <UART_SetConfig+0x5d8>
 80189cc:	2380      	movs	r3, #128	; 0x80
 80189ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80189d2:	bf00      	nop
 80189d4:	e128      	b.n	8018c28 <UART_SetConfig+0x5d8>
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	681b      	ldr	r3, [r3, #0]
 80189da:	4ac3      	ldr	r2, [pc, #780]	; (8018ce8 <UART_SetConfig+0x698>)
 80189dc:	4293      	cmp	r3, r2
 80189de:	d178      	bne.n	8018ad2 <UART_SetConfig+0x482>
 80189e0:	4bc2      	ldr	r3, [pc, #776]	; (8018cec <UART_SetConfig+0x69c>)
 80189e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80189e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80189e8:	2b28      	cmp	r3, #40	; 0x28
 80189ea:	d86d      	bhi.n	8018ac8 <UART_SetConfig+0x478>
 80189ec:	a201      	add	r2, pc, #4	; (adr r2, 80189f4 <UART_SetConfig+0x3a4>)
 80189ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80189f2:	bf00      	nop
 80189f4:	08018a99 	.word	0x08018a99
 80189f8:	08018ac9 	.word	0x08018ac9
 80189fc:	08018ac9 	.word	0x08018ac9
 8018a00:	08018ac9 	.word	0x08018ac9
 8018a04:	08018ac9 	.word	0x08018ac9
 8018a08:	08018ac9 	.word	0x08018ac9
 8018a0c:	08018ac9 	.word	0x08018ac9
 8018a10:	08018ac9 	.word	0x08018ac9
 8018a14:	08018aa1 	.word	0x08018aa1
 8018a18:	08018ac9 	.word	0x08018ac9
 8018a1c:	08018ac9 	.word	0x08018ac9
 8018a20:	08018ac9 	.word	0x08018ac9
 8018a24:	08018ac9 	.word	0x08018ac9
 8018a28:	08018ac9 	.word	0x08018ac9
 8018a2c:	08018ac9 	.word	0x08018ac9
 8018a30:	08018ac9 	.word	0x08018ac9
 8018a34:	08018aa9 	.word	0x08018aa9
 8018a38:	08018ac9 	.word	0x08018ac9
 8018a3c:	08018ac9 	.word	0x08018ac9
 8018a40:	08018ac9 	.word	0x08018ac9
 8018a44:	08018ac9 	.word	0x08018ac9
 8018a48:	08018ac9 	.word	0x08018ac9
 8018a4c:	08018ac9 	.word	0x08018ac9
 8018a50:	08018ac9 	.word	0x08018ac9
 8018a54:	08018ab1 	.word	0x08018ab1
 8018a58:	08018ac9 	.word	0x08018ac9
 8018a5c:	08018ac9 	.word	0x08018ac9
 8018a60:	08018ac9 	.word	0x08018ac9
 8018a64:	08018ac9 	.word	0x08018ac9
 8018a68:	08018ac9 	.word	0x08018ac9
 8018a6c:	08018ac9 	.word	0x08018ac9
 8018a70:	08018ac9 	.word	0x08018ac9
 8018a74:	08018ab9 	.word	0x08018ab9
 8018a78:	08018ac9 	.word	0x08018ac9
 8018a7c:	08018ac9 	.word	0x08018ac9
 8018a80:	08018ac9 	.word	0x08018ac9
 8018a84:	08018ac9 	.word	0x08018ac9
 8018a88:	08018ac9 	.word	0x08018ac9
 8018a8c:	08018ac9 	.word	0x08018ac9
 8018a90:	08018ac9 	.word	0x08018ac9
 8018a94:	08018ac1 	.word	0x08018ac1
 8018a98:	2301      	movs	r3, #1
 8018a9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018a9e:	e0c3      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018aa0:	2304      	movs	r3, #4
 8018aa2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018aa6:	e0bf      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018aa8:	2308      	movs	r3, #8
 8018aaa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018aae:	e0bb      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018ab0:	2310      	movs	r3, #16
 8018ab2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018ab6:	e0b7      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018ab8:	2320      	movs	r3, #32
 8018aba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018abe:	e0b3      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018ac0:	2340      	movs	r3, #64	; 0x40
 8018ac2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018ac6:	e0af      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018ac8:	2380      	movs	r3, #128	; 0x80
 8018aca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018ace:	bf00      	nop
 8018ad0:	e0aa      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018ad2:	687b      	ldr	r3, [r7, #4]
 8018ad4:	681b      	ldr	r3, [r3, #0]
 8018ad6:	4a86      	ldr	r2, [pc, #536]	; (8018cf0 <UART_SetConfig+0x6a0>)
 8018ad8:	4293      	cmp	r3, r2
 8018ada:	d132      	bne.n	8018b42 <UART_SetConfig+0x4f2>
 8018adc:	4b83      	ldr	r3, [pc, #524]	; (8018cec <UART_SetConfig+0x69c>)
 8018ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018ae0:	f003 0307 	and.w	r3, r3, #7
 8018ae4:	2b05      	cmp	r3, #5
 8018ae6:	d827      	bhi.n	8018b38 <UART_SetConfig+0x4e8>
 8018ae8:	a201      	add	r2, pc, #4	; (adr r2, 8018af0 <UART_SetConfig+0x4a0>)
 8018aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018aee:	bf00      	nop
 8018af0:	08018b09 	.word	0x08018b09
 8018af4:	08018b11 	.word	0x08018b11
 8018af8:	08018b19 	.word	0x08018b19
 8018afc:	08018b21 	.word	0x08018b21
 8018b00:	08018b29 	.word	0x08018b29
 8018b04:	08018b31 	.word	0x08018b31
 8018b08:	2300      	movs	r3, #0
 8018b0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018b0e:	e08b      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018b10:	2304      	movs	r3, #4
 8018b12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018b16:	e087      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018b18:	2308      	movs	r3, #8
 8018b1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018b1e:	e083      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018b20:	2310      	movs	r3, #16
 8018b22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018b26:	e07f      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018b28:	2320      	movs	r3, #32
 8018b2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018b2e:	e07b      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018b30:	2340      	movs	r3, #64	; 0x40
 8018b32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018b36:	e077      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018b38:	2380      	movs	r3, #128	; 0x80
 8018b3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018b3e:	bf00      	nop
 8018b40:	e072      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	681b      	ldr	r3, [r3, #0]
 8018b46:	4a6b      	ldr	r2, [pc, #428]	; (8018cf4 <UART_SetConfig+0x6a4>)
 8018b48:	4293      	cmp	r3, r2
 8018b4a:	d132      	bne.n	8018bb2 <UART_SetConfig+0x562>
 8018b4c:	4b67      	ldr	r3, [pc, #412]	; (8018cec <UART_SetConfig+0x69c>)
 8018b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018b50:	f003 0307 	and.w	r3, r3, #7
 8018b54:	2b05      	cmp	r3, #5
 8018b56:	d827      	bhi.n	8018ba8 <UART_SetConfig+0x558>
 8018b58:	a201      	add	r2, pc, #4	; (adr r2, 8018b60 <UART_SetConfig+0x510>)
 8018b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b5e:	bf00      	nop
 8018b60:	08018b79 	.word	0x08018b79
 8018b64:	08018b81 	.word	0x08018b81
 8018b68:	08018b89 	.word	0x08018b89
 8018b6c:	08018b91 	.word	0x08018b91
 8018b70:	08018b99 	.word	0x08018b99
 8018b74:	08018ba1 	.word	0x08018ba1
 8018b78:	2300      	movs	r3, #0
 8018b7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018b7e:	e053      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018b80:	2304      	movs	r3, #4
 8018b82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018b86:	e04f      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018b88:	2308      	movs	r3, #8
 8018b8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018b8e:	e04b      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018b90:	2310      	movs	r3, #16
 8018b92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018b96:	e047      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018b98:	2320      	movs	r3, #32
 8018b9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018b9e:	e043      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018ba0:	2340      	movs	r3, #64	; 0x40
 8018ba2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018ba6:	e03f      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018ba8:	2380      	movs	r3, #128	; 0x80
 8018baa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018bae:	bf00      	nop
 8018bb0:	e03a      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	681b      	ldr	r3, [r3, #0]
 8018bb6:	4a50      	ldr	r2, [pc, #320]	; (8018cf8 <UART_SetConfig+0x6a8>)
 8018bb8:	4293      	cmp	r3, r2
 8018bba:	d132      	bne.n	8018c22 <UART_SetConfig+0x5d2>
 8018bbc:	4b4b      	ldr	r3, [pc, #300]	; (8018cec <UART_SetConfig+0x69c>)
 8018bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018bc0:	f003 0307 	and.w	r3, r3, #7
 8018bc4:	2b05      	cmp	r3, #5
 8018bc6:	d827      	bhi.n	8018c18 <UART_SetConfig+0x5c8>
 8018bc8:	a201      	add	r2, pc, #4	; (adr r2, 8018bd0 <UART_SetConfig+0x580>)
 8018bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018bce:	bf00      	nop
 8018bd0:	08018be9 	.word	0x08018be9
 8018bd4:	08018bf1 	.word	0x08018bf1
 8018bd8:	08018bf9 	.word	0x08018bf9
 8018bdc:	08018c01 	.word	0x08018c01
 8018be0:	08018c09 	.word	0x08018c09
 8018be4:	08018c11 	.word	0x08018c11
 8018be8:	2302      	movs	r3, #2
 8018bea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018bee:	e01b      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018bf0:	2304      	movs	r3, #4
 8018bf2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018bf6:	e017      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018bf8:	2308      	movs	r3, #8
 8018bfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018bfe:	e013      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018c00:	2310      	movs	r3, #16
 8018c02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018c06:	e00f      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018c08:	2320      	movs	r3, #32
 8018c0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018c0e:	e00b      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018c10:	2340      	movs	r3, #64	; 0x40
 8018c12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018c16:	e007      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018c18:	2380      	movs	r3, #128	; 0x80
 8018c1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018c1e:	bf00      	nop
 8018c20:	e002      	b.n	8018c28 <UART_SetConfig+0x5d8>
 8018c22:	2380      	movs	r3, #128	; 0x80
 8018c24:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	681b      	ldr	r3, [r3, #0]
 8018c2c:	4a32      	ldr	r2, [pc, #200]	; (8018cf8 <UART_SetConfig+0x6a8>)
 8018c2e:	4293      	cmp	r3, r2
 8018c30:	f040 86f7 	bne.w	8019a22 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8018c34:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8018c38:	2b08      	cmp	r3, #8
 8018c3a:	f000 80c0 	beq.w	8018dbe <UART_SetConfig+0x76e>
 8018c3e:	2b08      	cmp	r3, #8
 8018c40:	dc04      	bgt.n	8018c4c <UART_SetConfig+0x5fc>
 8018c42:	2b02      	cmp	r3, #2
 8018c44:	d00c      	beq.n	8018c60 <UART_SetConfig+0x610>
 8018c46:	2b04      	cmp	r3, #4
 8018c48:	d065      	beq.n	8018d16 <UART_SetConfig+0x6c6>
 8018c4a:	e27a      	b.n	8019142 <UART_SetConfig+0xaf2>
 8018c4c:	2b20      	cmp	r3, #32
 8018c4e:	f000 81b0 	beq.w	8018fb2 <UART_SetConfig+0x962>
 8018c52:	2b40      	cmp	r3, #64	; 0x40
 8018c54:	f000 821e 	beq.w	8019094 <UART_SetConfig+0xa44>
 8018c58:	2b10      	cmp	r3, #16
 8018c5a:	f000 8104 	beq.w	8018e66 <UART_SetConfig+0x816>
 8018c5e:	e270      	b.n	8019142 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8018c60:	f7fd ff14 	bl	8016a8c <HAL_RCCEx_GetD3PCLK1Freq>
 8018c64:	4602      	mov	r2, r0
 8018c66:	687b      	ldr	r3, [r7, #4]
 8018c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	d04e      	beq.n	8018d0c <UART_SetConfig+0x6bc>
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c72:	2b01      	cmp	r3, #1
 8018c74:	d048      	beq.n	8018d08 <UART_SetConfig+0x6b8>
 8018c76:	687b      	ldr	r3, [r7, #4]
 8018c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c7a:	2b02      	cmp	r3, #2
 8018c7c:	d042      	beq.n	8018d04 <UART_SetConfig+0x6b4>
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c82:	2b03      	cmp	r3, #3
 8018c84:	d03c      	beq.n	8018d00 <UART_SetConfig+0x6b0>
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c8a:	2b04      	cmp	r3, #4
 8018c8c:	d036      	beq.n	8018cfc <UART_SetConfig+0x6ac>
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c92:	2b05      	cmp	r3, #5
 8018c94:	d026      	beq.n	8018ce4 <UART_SetConfig+0x694>
 8018c96:	687b      	ldr	r3, [r7, #4]
 8018c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c9a:	2b06      	cmp	r3, #6
 8018c9c:	d020      	beq.n	8018ce0 <UART_SetConfig+0x690>
 8018c9e:	687b      	ldr	r3, [r7, #4]
 8018ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ca2:	2b07      	cmp	r3, #7
 8018ca4:	d01a      	beq.n	8018cdc <UART_SetConfig+0x68c>
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018caa:	2b08      	cmp	r3, #8
 8018cac:	d014      	beq.n	8018cd8 <UART_SetConfig+0x688>
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cb2:	2b09      	cmp	r3, #9
 8018cb4:	d00e      	beq.n	8018cd4 <UART_SetConfig+0x684>
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cba:	2b0a      	cmp	r3, #10
 8018cbc:	d008      	beq.n	8018cd0 <UART_SetConfig+0x680>
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cc2:	2b0b      	cmp	r3, #11
 8018cc4:	d102      	bne.n	8018ccc <UART_SetConfig+0x67c>
 8018cc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8018cca:	e020      	b.n	8018d0e <UART_SetConfig+0x6be>
 8018ccc:	2301      	movs	r3, #1
 8018cce:	e01e      	b.n	8018d0e <UART_SetConfig+0x6be>
 8018cd0:	2380      	movs	r3, #128	; 0x80
 8018cd2:	e01c      	b.n	8018d0e <UART_SetConfig+0x6be>
 8018cd4:	2340      	movs	r3, #64	; 0x40
 8018cd6:	e01a      	b.n	8018d0e <UART_SetConfig+0x6be>
 8018cd8:	2320      	movs	r3, #32
 8018cda:	e018      	b.n	8018d0e <UART_SetConfig+0x6be>
 8018cdc:	2310      	movs	r3, #16
 8018cde:	e016      	b.n	8018d0e <UART_SetConfig+0x6be>
 8018ce0:	230c      	movs	r3, #12
 8018ce2:	e014      	b.n	8018d0e <UART_SetConfig+0x6be>
 8018ce4:	230a      	movs	r3, #10
 8018ce6:	e012      	b.n	8018d0e <UART_SetConfig+0x6be>
 8018ce8:	40011400 	.word	0x40011400
 8018cec:	58024400 	.word	0x58024400
 8018cf0:	40007800 	.word	0x40007800
 8018cf4:	40007c00 	.word	0x40007c00
 8018cf8:	58000c00 	.word	0x58000c00
 8018cfc:	2308      	movs	r3, #8
 8018cfe:	e006      	b.n	8018d0e <UART_SetConfig+0x6be>
 8018d00:	2306      	movs	r3, #6
 8018d02:	e004      	b.n	8018d0e <UART_SetConfig+0x6be>
 8018d04:	2304      	movs	r3, #4
 8018d06:	e002      	b.n	8018d0e <UART_SetConfig+0x6be>
 8018d08:	2302      	movs	r3, #2
 8018d0a:	e000      	b.n	8018d0e <UART_SetConfig+0x6be>
 8018d0c:	2301      	movs	r3, #1
 8018d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8018d12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8018d14:	e219      	b.n	801914a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018d16:	f107 0318 	add.w	r3, r7, #24
 8018d1a:	4618      	mov	r0, r3
 8018d1c:	f7fd fecc 	bl	8016ab8 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8018d20:	69fa      	ldr	r2, [r7, #28]
 8018d22:	687b      	ldr	r3, [r7, #4]
 8018d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	d044      	beq.n	8018db4 <UART_SetConfig+0x764>
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d2e:	2b01      	cmp	r3, #1
 8018d30:	d03e      	beq.n	8018db0 <UART_SetConfig+0x760>
 8018d32:	687b      	ldr	r3, [r7, #4]
 8018d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d36:	2b02      	cmp	r3, #2
 8018d38:	d038      	beq.n	8018dac <UART_SetConfig+0x75c>
 8018d3a:	687b      	ldr	r3, [r7, #4]
 8018d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d3e:	2b03      	cmp	r3, #3
 8018d40:	d032      	beq.n	8018da8 <UART_SetConfig+0x758>
 8018d42:	687b      	ldr	r3, [r7, #4]
 8018d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d46:	2b04      	cmp	r3, #4
 8018d48:	d02c      	beq.n	8018da4 <UART_SetConfig+0x754>
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d4e:	2b05      	cmp	r3, #5
 8018d50:	d026      	beq.n	8018da0 <UART_SetConfig+0x750>
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d56:	2b06      	cmp	r3, #6
 8018d58:	d020      	beq.n	8018d9c <UART_SetConfig+0x74c>
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d5e:	2b07      	cmp	r3, #7
 8018d60:	d01a      	beq.n	8018d98 <UART_SetConfig+0x748>
 8018d62:	687b      	ldr	r3, [r7, #4]
 8018d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d66:	2b08      	cmp	r3, #8
 8018d68:	d014      	beq.n	8018d94 <UART_SetConfig+0x744>
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d6e:	2b09      	cmp	r3, #9
 8018d70:	d00e      	beq.n	8018d90 <UART_SetConfig+0x740>
 8018d72:	687b      	ldr	r3, [r7, #4]
 8018d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d76:	2b0a      	cmp	r3, #10
 8018d78:	d008      	beq.n	8018d8c <UART_SetConfig+0x73c>
 8018d7a:	687b      	ldr	r3, [r7, #4]
 8018d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d7e:	2b0b      	cmp	r3, #11
 8018d80:	d102      	bne.n	8018d88 <UART_SetConfig+0x738>
 8018d82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8018d86:	e016      	b.n	8018db6 <UART_SetConfig+0x766>
 8018d88:	2301      	movs	r3, #1
 8018d8a:	e014      	b.n	8018db6 <UART_SetConfig+0x766>
 8018d8c:	2380      	movs	r3, #128	; 0x80
 8018d8e:	e012      	b.n	8018db6 <UART_SetConfig+0x766>
 8018d90:	2340      	movs	r3, #64	; 0x40
 8018d92:	e010      	b.n	8018db6 <UART_SetConfig+0x766>
 8018d94:	2320      	movs	r3, #32
 8018d96:	e00e      	b.n	8018db6 <UART_SetConfig+0x766>
 8018d98:	2310      	movs	r3, #16
 8018d9a:	e00c      	b.n	8018db6 <UART_SetConfig+0x766>
 8018d9c:	230c      	movs	r3, #12
 8018d9e:	e00a      	b.n	8018db6 <UART_SetConfig+0x766>
 8018da0:	230a      	movs	r3, #10
 8018da2:	e008      	b.n	8018db6 <UART_SetConfig+0x766>
 8018da4:	2308      	movs	r3, #8
 8018da6:	e006      	b.n	8018db6 <UART_SetConfig+0x766>
 8018da8:	2306      	movs	r3, #6
 8018daa:	e004      	b.n	8018db6 <UART_SetConfig+0x766>
 8018dac:	2304      	movs	r3, #4
 8018dae:	e002      	b.n	8018db6 <UART_SetConfig+0x766>
 8018db0:	2302      	movs	r3, #2
 8018db2:	e000      	b.n	8018db6 <UART_SetConfig+0x766>
 8018db4:	2301      	movs	r3, #1
 8018db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8018dba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8018dbc:	e1c5      	b.n	801914a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8018dbe:	f107 030c 	add.w	r3, r7, #12
 8018dc2:	4618      	mov	r0, r3
 8018dc4:	f7fd ffc4 	bl	8016d50 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8018dc8:	693a      	ldr	r2, [r7, #16]
 8018dca:	687b      	ldr	r3, [r7, #4]
 8018dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dce:	2b00      	cmp	r3, #0
 8018dd0:	d044      	beq.n	8018e5c <UART_SetConfig+0x80c>
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dd6:	2b01      	cmp	r3, #1
 8018dd8:	d03e      	beq.n	8018e58 <UART_SetConfig+0x808>
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dde:	2b02      	cmp	r3, #2
 8018de0:	d038      	beq.n	8018e54 <UART_SetConfig+0x804>
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018de6:	2b03      	cmp	r3, #3
 8018de8:	d032      	beq.n	8018e50 <UART_SetConfig+0x800>
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dee:	2b04      	cmp	r3, #4
 8018df0:	d02c      	beq.n	8018e4c <UART_SetConfig+0x7fc>
 8018df2:	687b      	ldr	r3, [r7, #4]
 8018df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018df6:	2b05      	cmp	r3, #5
 8018df8:	d026      	beq.n	8018e48 <UART_SetConfig+0x7f8>
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dfe:	2b06      	cmp	r3, #6
 8018e00:	d020      	beq.n	8018e44 <UART_SetConfig+0x7f4>
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e06:	2b07      	cmp	r3, #7
 8018e08:	d01a      	beq.n	8018e40 <UART_SetConfig+0x7f0>
 8018e0a:	687b      	ldr	r3, [r7, #4]
 8018e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e0e:	2b08      	cmp	r3, #8
 8018e10:	d014      	beq.n	8018e3c <UART_SetConfig+0x7ec>
 8018e12:	687b      	ldr	r3, [r7, #4]
 8018e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e16:	2b09      	cmp	r3, #9
 8018e18:	d00e      	beq.n	8018e38 <UART_SetConfig+0x7e8>
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e1e:	2b0a      	cmp	r3, #10
 8018e20:	d008      	beq.n	8018e34 <UART_SetConfig+0x7e4>
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e26:	2b0b      	cmp	r3, #11
 8018e28:	d102      	bne.n	8018e30 <UART_SetConfig+0x7e0>
 8018e2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8018e2e:	e016      	b.n	8018e5e <UART_SetConfig+0x80e>
 8018e30:	2301      	movs	r3, #1
 8018e32:	e014      	b.n	8018e5e <UART_SetConfig+0x80e>
 8018e34:	2380      	movs	r3, #128	; 0x80
 8018e36:	e012      	b.n	8018e5e <UART_SetConfig+0x80e>
 8018e38:	2340      	movs	r3, #64	; 0x40
 8018e3a:	e010      	b.n	8018e5e <UART_SetConfig+0x80e>
 8018e3c:	2320      	movs	r3, #32
 8018e3e:	e00e      	b.n	8018e5e <UART_SetConfig+0x80e>
 8018e40:	2310      	movs	r3, #16
 8018e42:	e00c      	b.n	8018e5e <UART_SetConfig+0x80e>
 8018e44:	230c      	movs	r3, #12
 8018e46:	e00a      	b.n	8018e5e <UART_SetConfig+0x80e>
 8018e48:	230a      	movs	r3, #10
 8018e4a:	e008      	b.n	8018e5e <UART_SetConfig+0x80e>
 8018e4c:	2308      	movs	r3, #8
 8018e4e:	e006      	b.n	8018e5e <UART_SetConfig+0x80e>
 8018e50:	2306      	movs	r3, #6
 8018e52:	e004      	b.n	8018e5e <UART_SetConfig+0x80e>
 8018e54:	2304      	movs	r3, #4
 8018e56:	e002      	b.n	8018e5e <UART_SetConfig+0x80e>
 8018e58:	2302      	movs	r3, #2
 8018e5a:	e000      	b.n	8018e5e <UART_SetConfig+0x80e>
 8018e5c:	2301      	movs	r3, #1
 8018e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8018e62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8018e64:	e171      	b.n	801914a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018e66:	4b7a      	ldr	r3, [pc, #488]	; (8019050 <UART_SetConfig+0xa00>)
 8018e68:	681b      	ldr	r3, [r3, #0]
 8018e6a:	f003 0320 	and.w	r3, r3, #32
 8018e6e:	2b00      	cmp	r3, #0
 8018e70:	d054      	beq.n	8018f1c <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8018e72:	4b77      	ldr	r3, [pc, #476]	; (8019050 <UART_SetConfig+0xa00>)
 8018e74:	681b      	ldr	r3, [r3, #0]
 8018e76:	08db      	lsrs	r3, r3, #3
 8018e78:	f003 0303 	and.w	r3, r3, #3
 8018e7c:	4a75      	ldr	r2, [pc, #468]	; (8019054 <UART_SetConfig+0xa04>)
 8018e7e:	40da      	lsrs	r2, r3
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e84:	2b00      	cmp	r3, #0
 8018e86:	d044      	beq.n	8018f12 <UART_SetConfig+0x8c2>
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e8c:	2b01      	cmp	r3, #1
 8018e8e:	d03e      	beq.n	8018f0e <UART_SetConfig+0x8be>
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e94:	2b02      	cmp	r3, #2
 8018e96:	d038      	beq.n	8018f0a <UART_SetConfig+0x8ba>
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e9c:	2b03      	cmp	r3, #3
 8018e9e:	d032      	beq.n	8018f06 <UART_SetConfig+0x8b6>
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ea4:	2b04      	cmp	r3, #4
 8018ea6:	d02c      	beq.n	8018f02 <UART_SetConfig+0x8b2>
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018eac:	2b05      	cmp	r3, #5
 8018eae:	d026      	beq.n	8018efe <UART_SetConfig+0x8ae>
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018eb4:	2b06      	cmp	r3, #6
 8018eb6:	d020      	beq.n	8018efa <UART_SetConfig+0x8aa>
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ebc:	2b07      	cmp	r3, #7
 8018ebe:	d01a      	beq.n	8018ef6 <UART_SetConfig+0x8a6>
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ec4:	2b08      	cmp	r3, #8
 8018ec6:	d014      	beq.n	8018ef2 <UART_SetConfig+0x8a2>
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ecc:	2b09      	cmp	r3, #9
 8018ece:	d00e      	beq.n	8018eee <UART_SetConfig+0x89e>
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ed4:	2b0a      	cmp	r3, #10
 8018ed6:	d008      	beq.n	8018eea <UART_SetConfig+0x89a>
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018edc:	2b0b      	cmp	r3, #11
 8018ede:	d102      	bne.n	8018ee6 <UART_SetConfig+0x896>
 8018ee0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8018ee4:	e016      	b.n	8018f14 <UART_SetConfig+0x8c4>
 8018ee6:	2301      	movs	r3, #1
 8018ee8:	e014      	b.n	8018f14 <UART_SetConfig+0x8c4>
 8018eea:	2380      	movs	r3, #128	; 0x80
 8018eec:	e012      	b.n	8018f14 <UART_SetConfig+0x8c4>
 8018eee:	2340      	movs	r3, #64	; 0x40
 8018ef0:	e010      	b.n	8018f14 <UART_SetConfig+0x8c4>
 8018ef2:	2320      	movs	r3, #32
 8018ef4:	e00e      	b.n	8018f14 <UART_SetConfig+0x8c4>
 8018ef6:	2310      	movs	r3, #16
 8018ef8:	e00c      	b.n	8018f14 <UART_SetConfig+0x8c4>
 8018efa:	230c      	movs	r3, #12
 8018efc:	e00a      	b.n	8018f14 <UART_SetConfig+0x8c4>
 8018efe:	230a      	movs	r3, #10
 8018f00:	e008      	b.n	8018f14 <UART_SetConfig+0x8c4>
 8018f02:	2308      	movs	r3, #8
 8018f04:	e006      	b.n	8018f14 <UART_SetConfig+0x8c4>
 8018f06:	2306      	movs	r3, #6
 8018f08:	e004      	b.n	8018f14 <UART_SetConfig+0x8c4>
 8018f0a:	2304      	movs	r3, #4
 8018f0c:	e002      	b.n	8018f14 <UART_SetConfig+0x8c4>
 8018f0e:	2302      	movs	r3, #2
 8018f10:	e000      	b.n	8018f14 <UART_SetConfig+0x8c4>
 8018f12:	2301      	movs	r3, #1
 8018f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8018f18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8018f1a:	e116      	b.n	801914a <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	d043      	beq.n	8018fac <UART_SetConfig+0x95c>
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f28:	2b01      	cmp	r3, #1
 8018f2a:	d03d      	beq.n	8018fa8 <UART_SetConfig+0x958>
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f30:	2b02      	cmp	r3, #2
 8018f32:	d037      	beq.n	8018fa4 <UART_SetConfig+0x954>
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f38:	2b03      	cmp	r3, #3
 8018f3a:	d031      	beq.n	8018fa0 <UART_SetConfig+0x950>
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f40:	2b04      	cmp	r3, #4
 8018f42:	d02b      	beq.n	8018f9c <UART_SetConfig+0x94c>
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f48:	2b05      	cmp	r3, #5
 8018f4a:	d025      	beq.n	8018f98 <UART_SetConfig+0x948>
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f50:	2b06      	cmp	r3, #6
 8018f52:	d01f      	beq.n	8018f94 <UART_SetConfig+0x944>
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f58:	2b07      	cmp	r3, #7
 8018f5a:	d019      	beq.n	8018f90 <UART_SetConfig+0x940>
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f60:	2b08      	cmp	r3, #8
 8018f62:	d013      	beq.n	8018f8c <UART_SetConfig+0x93c>
 8018f64:	687b      	ldr	r3, [r7, #4]
 8018f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f68:	2b09      	cmp	r3, #9
 8018f6a:	d00d      	beq.n	8018f88 <UART_SetConfig+0x938>
 8018f6c:	687b      	ldr	r3, [r7, #4]
 8018f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f70:	2b0a      	cmp	r3, #10
 8018f72:	d007      	beq.n	8018f84 <UART_SetConfig+0x934>
 8018f74:	687b      	ldr	r3, [r7, #4]
 8018f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f78:	2b0b      	cmp	r3, #11
 8018f7a:	d101      	bne.n	8018f80 <UART_SetConfig+0x930>
 8018f7c:	4b36      	ldr	r3, [pc, #216]	; (8019058 <UART_SetConfig+0xa08>)
 8018f7e:	e016      	b.n	8018fae <UART_SetConfig+0x95e>
 8018f80:	4b34      	ldr	r3, [pc, #208]	; (8019054 <UART_SetConfig+0xa04>)
 8018f82:	e014      	b.n	8018fae <UART_SetConfig+0x95e>
 8018f84:	4b35      	ldr	r3, [pc, #212]	; (801905c <UART_SetConfig+0xa0c>)
 8018f86:	e012      	b.n	8018fae <UART_SetConfig+0x95e>
 8018f88:	4b35      	ldr	r3, [pc, #212]	; (8019060 <UART_SetConfig+0xa10>)
 8018f8a:	e010      	b.n	8018fae <UART_SetConfig+0x95e>
 8018f8c:	4b35      	ldr	r3, [pc, #212]	; (8019064 <UART_SetConfig+0xa14>)
 8018f8e:	e00e      	b.n	8018fae <UART_SetConfig+0x95e>
 8018f90:	4b35      	ldr	r3, [pc, #212]	; (8019068 <UART_SetConfig+0xa18>)
 8018f92:	e00c      	b.n	8018fae <UART_SetConfig+0x95e>
 8018f94:	4b35      	ldr	r3, [pc, #212]	; (801906c <UART_SetConfig+0xa1c>)
 8018f96:	e00a      	b.n	8018fae <UART_SetConfig+0x95e>
 8018f98:	4b35      	ldr	r3, [pc, #212]	; (8019070 <UART_SetConfig+0xa20>)
 8018f9a:	e008      	b.n	8018fae <UART_SetConfig+0x95e>
 8018f9c:	4b35      	ldr	r3, [pc, #212]	; (8019074 <UART_SetConfig+0xa24>)
 8018f9e:	e006      	b.n	8018fae <UART_SetConfig+0x95e>
 8018fa0:	4b35      	ldr	r3, [pc, #212]	; (8019078 <UART_SetConfig+0xa28>)
 8018fa2:	e004      	b.n	8018fae <UART_SetConfig+0x95e>
 8018fa4:	4b35      	ldr	r3, [pc, #212]	; (801907c <UART_SetConfig+0xa2c>)
 8018fa6:	e002      	b.n	8018fae <UART_SetConfig+0x95e>
 8018fa8:	4b35      	ldr	r3, [pc, #212]	; (8019080 <UART_SetConfig+0xa30>)
 8018faa:	e000      	b.n	8018fae <UART_SetConfig+0x95e>
 8018fac:	4b29      	ldr	r3, [pc, #164]	; (8019054 <UART_SetConfig+0xa04>)
 8018fae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8018fb0:	e0cb      	b.n	801914a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8018fb2:	687b      	ldr	r3, [r7, #4]
 8018fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fb6:	2b00      	cmp	r3, #0
 8018fb8:	d046      	beq.n	8019048 <UART_SetConfig+0x9f8>
 8018fba:	687b      	ldr	r3, [r7, #4]
 8018fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fbe:	2b01      	cmp	r3, #1
 8018fc0:	d040      	beq.n	8019044 <UART_SetConfig+0x9f4>
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fc6:	2b02      	cmp	r3, #2
 8018fc8:	d03a      	beq.n	8019040 <UART_SetConfig+0x9f0>
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fce:	2b03      	cmp	r3, #3
 8018fd0:	d034      	beq.n	801903c <UART_SetConfig+0x9ec>
 8018fd2:	687b      	ldr	r3, [r7, #4]
 8018fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fd6:	2b04      	cmp	r3, #4
 8018fd8:	d02e      	beq.n	8019038 <UART_SetConfig+0x9e8>
 8018fda:	687b      	ldr	r3, [r7, #4]
 8018fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fde:	2b05      	cmp	r3, #5
 8018fe0:	d028      	beq.n	8019034 <UART_SetConfig+0x9e4>
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fe6:	2b06      	cmp	r3, #6
 8018fe8:	d022      	beq.n	8019030 <UART_SetConfig+0x9e0>
 8018fea:	687b      	ldr	r3, [r7, #4]
 8018fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fee:	2b07      	cmp	r3, #7
 8018ff0:	d01c      	beq.n	801902c <UART_SetConfig+0x9dc>
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ff6:	2b08      	cmp	r3, #8
 8018ff8:	d016      	beq.n	8019028 <UART_SetConfig+0x9d8>
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ffe:	2b09      	cmp	r3, #9
 8019000:	d00f      	beq.n	8019022 <UART_SetConfig+0x9d2>
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019006:	2b0a      	cmp	r3, #10
 8019008:	d008      	beq.n	801901c <UART_SetConfig+0x9cc>
 801900a:	687b      	ldr	r3, [r7, #4]
 801900c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801900e:	2b0b      	cmp	r3, #11
 8019010:	d102      	bne.n	8019018 <UART_SetConfig+0x9c8>
 8019012:	f643 5309 	movw	r3, #15625	; 0x3d09
 8019016:	e018      	b.n	801904a <UART_SetConfig+0x9fa>
 8019018:	4b13      	ldr	r3, [pc, #76]	; (8019068 <UART_SetConfig+0xa18>)
 801901a:	e016      	b.n	801904a <UART_SetConfig+0x9fa>
 801901c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8019020:	e013      	b.n	801904a <UART_SetConfig+0x9fa>
 8019022:	f24f 4324 	movw	r3, #62500	; 0xf424
 8019026:	e010      	b.n	801904a <UART_SetConfig+0x9fa>
 8019028:	4b16      	ldr	r3, [pc, #88]	; (8019084 <UART_SetConfig+0xa34>)
 801902a:	e00e      	b.n	801904a <UART_SetConfig+0x9fa>
 801902c:	4b0a      	ldr	r3, [pc, #40]	; (8019058 <UART_SetConfig+0xa08>)
 801902e:	e00c      	b.n	801904a <UART_SetConfig+0x9fa>
 8019030:	4b15      	ldr	r3, [pc, #84]	; (8019088 <UART_SetConfig+0xa38>)
 8019032:	e00a      	b.n	801904a <UART_SetConfig+0x9fa>
 8019034:	4b15      	ldr	r3, [pc, #84]	; (801908c <UART_SetConfig+0xa3c>)
 8019036:	e008      	b.n	801904a <UART_SetConfig+0x9fa>
 8019038:	4b08      	ldr	r3, [pc, #32]	; (801905c <UART_SetConfig+0xa0c>)
 801903a:	e006      	b.n	801904a <UART_SetConfig+0x9fa>
 801903c:	4b14      	ldr	r3, [pc, #80]	; (8019090 <UART_SetConfig+0xa40>)
 801903e:	e004      	b.n	801904a <UART_SetConfig+0x9fa>
 8019040:	4b07      	ldr	r3, [pc, #28]	; (8019060 <UART_SetConfig+0xa10>)
 8019042:	e002      	b.n	801904a <UART_SetConfig+0x9fa>
 8019044:	4b07      	ldr	r3, [pc, #28]	; (8019064 <UART_SetConfig+0xa14>)
 8019046:	e000      	b.n	801904a <UART_SetConfig+0x9fa>
 8019048:	4b07      	ldr	r3, [pc, #28]	; (8019068 <UART_SetConfig+0xa18>)
 801904a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801904c:	e07d      	b.n	801914a <UART_SetConfig+0xafa>
 801904e:	bf00      	nop
 8019050:	58024400 	.word	0x58024400
 8019054:	03d09000 	.word	0x03d09000
 8019058:	0003d090 	.word	0x0003d090
 801905c:	0007a120 	.word	0x0007a120
 8019060:	000f4240 	.word	0x000f4240
 8019064:	001e8480 	.word	0x001e8480
 8019068:	003d0900 	.word	0x003d0900
 801906c:	00516155 	.word	0x00516155
 8019070:	0061a800 	.word	0x0061a800
 8019074:	007a1200 	.word	0x007a1200
 8019078:	00a2c2aa 	.word	0x00a2c2aa
 801907c:	00f42400 	.word	0x00f42400
 8019080:	01e84800 	.word	0x01e84800
 8019084:	0001e848 	.word	0x0001e848
 8019088:	00051615 	.word	0x00051615
 801908c:	00061a80 	.word	0x00061a80
 8019090:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019098:	2b00      	cmp	r3, #0
 801909a:	d04e      	beq.n	801913a <UART_SetConfig+0xaea>
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190a0:	2b01      	cmp	r3, #1
 80190a2:	d047      	beq.n	8019134 <UART_SetConfig+0xae4>
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190a8:	2b02      	cmp	r3, #2
 80190aa:	d040      	beq.n	801912e <UART_SetConfig+0xade>
 80190ac:	687b      	ldr	r3, [r7, #4]
 80190ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190b0:	2b03      	cmp	r3, #3
 80190b2:	d039      	beq.n	8019128 <UART_SetConfig+0xad8>
 80190b4:	687b      	ldr	r3, [r7, #4]
 80190b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190b8:	2b04      	cmp	r3, #4
 80190ba:	d032      	beq.n	8019122 <UART_SetConfig+0xad2>
 80190bc:	687b      	ldr	r3, [r7, #4]
 80190be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190c0:	2b05      	cmp	r3, #5
 80190c2:	d02b      	beq.n	801911c <UART_SetConfig+0xacc>
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190c8:	2b06      	cmp	r3, #6
 80190ca:	d024      	beq.n	8019116 <UART_SetConfig+0xac6>
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190d0:	2b07      	cmp	r3, #7
 80190d2:	d01d      	beq.n	8019110 <UART_SetConfig+0xac0>
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190d8:	2b08      	cmp	r3, #8
 80190da:	d016      	beq.n	801910a <UART_SetConfig+0xaba>
 80190dc:	687b      	ldr	r3, [r7, #4]
 80190de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190e0:	2b09      	cmp	r3, #9
 80190e2:	d00f      	beq.n	8019104 <UART_SetConfig+0xab4>
 80190e4:	687b      	ldr	r3, [r7, #4]
 80190e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190e8:	2b0a      	cmp	r3, #10
 80190ea:	d008      	beq.n	80190fe <UART_SetConfig+0xaae>
 80190ec:	687b      	ldr	r3, [r7, #4]
 80190ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190f0:	2b0b      	cmp	r3, #11
 80190f2:	d101      	bne.n	80190f8 <UART_SetConfig+0xaa8>
 80190f4:	2380      	movs	r3, #128	; 0x80
 80190f6:	e022      	b.n	801913e <UART_SetConfig+0xaee>
 80190f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80190fc:	e01f      	b.n	801913e <UART_SetConfig+0xaee>
 80190fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019102:	e01c      	b.n	801913e <UART_SetConfig+0xaee>
 8019104:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019108:	e019      	b.n	801913e <UART_SetConfig+0xaee>
 801910a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801910e:	e016      	b.n	801913e <UART_SetConfig+0xaee>
 8019110:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019114:	e013      	b.n	801913e <UART_SetConfig+0xaee>
 8019116:	f640 23aa 	movw	r3, #2730	; 0xaaa
 801911a:	e010      	b.n	801913e <UART_SetConfig+0xaee>
 801911c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8019120:	e00d      	b.n	801913e <UART_SetConfig+0xaee>
 8019122:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8019126:	e00a      	b.n	801913e <UART_SetConfig+0xaee>
 8019128:	f241 5355 	movw	r3, #5461	; 0x1555
 801912c:	e007      	b.n	801913e <UART_SetConfig+0xaee>
 801912e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8019132:	e004      	b.n	801913e <UART_SetConfig+0xaee>
 8019134:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8019138:	e001      	b.n	801913e <UART_SetConfig+0xaee>
 801913a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801913e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8019140:	e003      	b.n	801914a <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 8019142:	2301      	movs	r3, #1
 8019144:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8019148:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 801914a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801914c:	2b00      	cmp	r3, #0
 801914e:	f001 83e8 	beq.w	801a922 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8019152:	687b      	ldr	r3, [r7, #4]
 8019154:	685a      	ldr	r2, [r3, #4]
 8019156:	4613      	mov	r3, r2
 8019158:	005b      	lsls	r3, r3, #1
 801915a:	4413      	add	r3, r2
 801915c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801915e:	429a      	cmp	r2, r3
 8019160:	d305      	bcc.n	801916e <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8019162:	687b      	ldr	r3, [r7, #4]
 8019164:	685b      	ldr	r3, [r3, #4]
 8019166:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8019168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801916a:	429a      	cmp	r2, r3
 801916c:	d904      	bls.n	8019178 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 801916e:	2301      	movs	r3, #1
 8019170:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8019174:	f001 bbd5 	b.w	801a922 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8019178:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801917c:	2b08      	cmp	r3, #8
 801917e:	f000 8154 	beq.w	801942a <UART_SetConfig+0xdda>
 8019182:	2b08      	cmp	r3, #8
 8019184:	dc06      	bgt.n	8019194 <UART_SetConfig+0xb44>
 8019186:	2b02      	cmp	r3, #2
 8019188:	d00f      	beq.n	80191aa <UART_SetConfig+0xb5a>
 801918a:	2b04      	cmp	r3, #4
 801918c:	f000 80ac 	beq.w	80192e8 <UART_SetConfig+0xc98>
 8019190:	f000 bc30 	b.w	80199f4 <UART_SetConfig+0x13a4>
 8019194:	2b20      	cmp	r3, #32
 8019196:	f000 832d 	beq.w	80197f4 <UART_SetConfig+0x11a4>
 801919a:	2b40      	cmp	r3, #64	; 0x40
 801919c:	f000 83a5 	beq.w	80198ea <UART_SetConfig+0x129a>
 80191a0:	2b10      	cmp	r3, #16
 80191a2:	f000 81e3 	beq.w	801956c <UART_SetConfig+0xf1c>
 80191a6:	f000 bc25 	b.w	80199f4 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80191aa:	f7fd fc6f 	bl	8016a8c <HAL_RCCEx_GetD3PCLK1Freq>
 80191ae:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80191b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191b2:	4618      	mov	r0, r3
 80191b4:	f04f 0100 	mov.w	r1, #0
 80191b8:	687b      	ldr	r3, [r7, #4]
 80191ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191bc:	2b00      	cmp	r3, #0
 80191be:	d067      	beq.n	8019290 <UART_SetConfig+0xc40>
 80191c0:	687b      	ldr	r3, [r7, #4]
 80191c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191c4:	2b01      	cmp	r3, #1
 80191c6:	d05e      	beq.n	8019286 <UART_SetConfig+0xc36>
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191cc:	2b02      	cmp	r3, #2
 80191ce:	d055      	beq.n	801927c <UART_SetConfig+0xc2c>
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191d4:	2b03      	cmp	r3, #3
 80191d6:	d04c      	beq.n	8019272 <UART_SetConfig+0xc22>
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191dc:	2b04      	cmp	r3, #4
 80191de:	d043      	beq.n	8019268 <UART_SetConfig+0xc18>
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191e4:	2b05      	cmp	r3, #5
 80191e6:	d03a      	beq.n	801925e <UART_SetConfig+0xc0e>
 80191e8:	687b      	ldr	r3, [r7, #4]
 80191ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191ec:	2b06      	cmp	r3, #6
 80191ee:	d031      	beq.n	8019254 <UART_SetConfig+0xc04>
 80191f0:	687b      	ldr	r3, [r7, #4]
 80191f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191f4:	2b07      	cmp	r3, #7
 80191f6:	d028      	beq.n	801924a <UART_SetConfig+0xbfa>
 80191f8:	687b      	ldr	r3, [r7, #4]
 80191fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191fc:	2b08      	cmp	r3, #8
 80191fe:	d01f      	beq.n	8019240 <UART_SetConfig+0xbf0>
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019204:	2b09      	cmp	r3, #9
 8019206:	d016      	beq.n	8019236 <UART_SetConfig+0xbe6>
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801920c:	2b0a      	cmp	r3, #10
 801920e:	d00d      	beq.n	801922c <UART_SetConfig+0xbdc>
 8019210:	687b      	ldr	r3, [r7, #4]
 8019212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019214:	2b0b      	cmp	r3, #11
 8019216:	d104      	bne.n	8019222 <UART_SetConfig+0xbd2>
 8019218:	f44f 7380 	mov.w	r3, #256	; 0x100
 801921c:	f04f 0400 	mov.w	r4, #0
 8019220:	e03a      	b.n	8019298 <UART_SetConfig+0xc48>
 8019222:	f04f 0301 	mov.w	r3, #1
 8019226:	f04f 0400 	mov.w	r4, #0
 801922a:	e035      	b.n	8019298 <UART_SetConfig+0xc48>
 801922c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8019230:	f04f 0400 	mov.w	r4, #0
 8019234:	e030      	b.n	8019298 <UART_SetConfig+0xc48>
 8019236:	f04f 0340 	mov.w	r3, #64	; 0x40
 801923a:	f04f 0400 	mov.w	r4, #0
 801923e:	e02b      	b.n	8019298 <UART_SetConfig+0xc48>
 8019240:	f04f 0320 	mov.w	r3, #32
 8019244:	f04f 0400 	mov.w	r4, #0
 8019248:	e026      	b.n	8019298 <UART_SetConfig+0xc48>
 801924a:	f04f 0310 	mov.w	r3, #16
 801924e:	f04f 0400 	mov.w	r4, #0
 8019252:	e021      	b.n	8019298 <UART_SetConfig+0xc48>
 8019254:	f04f 030c 	mov.w	r3, #12
 8019258:	f04f 0400 	mov.w	r4, #0
 801925c:	e01c      	b.n	8019298 <UART_SetConfig+0xc48>
 801925e:	f04f 030a 	mov.w	r3, #10
 8019262:	f04f 0400 	mov.w	r4, #0
 8019266:	e017      	b.n	8019298 <UART_SetConfig+0xc48>
 8019268:	f04f 0308 	mov.w	r3, #8
 801926c:	f04f 0400 	mov.w	r4, #0
 8019270:	e012      	b.n	8019298 <UART_SetConfig+0xc48>
 8019272:	f04f 0306 	mov.w	r3, #6
 8019276:	f04f 0400 	mov.w	r4, #0
 801927a:	e00d      	b.n	8019298 <UART_SetConfig+0xc48>
 801927c:	f04f 0304 	mov.w	r3, #4
 8019280:	f04f 0400 	mov.w	r4, #0
 8019284:	e008      	b.n	8019298 <UART_SetConfig+0xc48>
 8019286:	f04f 0302 	mov.w	r3, #2
 801928a:	f04f 0400 	mov.w	r4, #0
 801928e:	e003      	b.n	8019298 <UART_SetConfig+0xc48>
 8019290:	f04f 0301 	mov.w	r3, #1
 8019294:	f04f 0400 	mov.w	r4, #0
 8019298:	461a      	mov	r2, r3
 801929a:	4623      	mov	r3, r4
 801929c:	f7e7 f824 	bl	80002e8 <__aeabi_uldivmod>
 80192a0:	4603      	mov	r3, r0
 80192a2:	460c      	mov	r4, r1
 80192a4:	4619      	mov	r1, r3
 80192a6:	4622      	mov	r2, r4
 80192a8:	f04f 0300 	mov.w	r3, #0
 80192ac:	f04f 0400 	mov.w	r4, #0
 80192b0:	0214      	lsls	r4, r2, #8
 80192b2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80192b6:	020b      	lsls	r3, r1, #8
 80192b8:	687a      	ldr	r2, [r7, #4]
 80192ba:	6852      	ldr	r2, [r2, #4]
 80192bc:	0852      	lsrs	r2, r2, #1
 80192be:	4611      	mov	r1, r2
 80192c0:	f04f 0200 	mov.w	r2, #0
 80192c4:	eb13 0b01 	adds.w	fp, r3, r1
 80192c8:	eb44 0c02 	adc.w	ip, r4, r2
 80192cc:	4658      	mov	r0, fp
 80192ce:	4661      	mov	r1, ip
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	685b      	ldr	r3, [r3, #4]
 80192d4:	f04f 0400 	mov.w	r4, #0
 80192d8:	461a      	mov	r2, r3
 80192da:	4623      	mov	r3, r4
 80192dc:	f7e7 f804 	bl	80002e8 <__aeabi_uldivmod>
 80192e0:	4603      	mov	r3, r0
 80192e2:	460c      	mov	r4, r1
 80192e4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80192e6:	e389      	b.n	80199fc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80192e8:	f107 0318 	add.w	r3, r7, #24
 80192ec:	4618      	mov	r0, r3
 80192ee:	f7fd fbe3 	bl	8016ab8 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80192f2:	69fb      	ldr	r3, [r7, #28]
 80192f4:	4618      	mov	r0, r3
 80192f6:	f04f 0100 	mov.w	r1, #0
 80192fa:	687b      	ldr	r3, [r7, #4]
 80192fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192fe:	2b00      	cmp	r3, #0
 8019300:	d067      	beq.n	80193d2 <UART_SetConfig+0xd82>
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019306:	2b01      	cmp	r3, #1
 8019308:	d05e      	beq.n	80193c8 <UART_SetConfig+0xd78>
 801930a:	687b      	ldr	r3, [r7, #4]
 801930c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801930e:	2b02      	cmp	r3, #2
 8019310:	d055      	beq.n	80193be <UART_SetConfig+0xd6e>
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019316:	2b03      	cmp	r3, #3
 8019318:	d04c      	beq.n	80193b4 <UART_SetConfig+0xd64>
 801931a:	687b      	ldr	r3, [r7, #4]
 801931c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801931e:	2b04      	cmp	r3, #4
 8019320:	d043      	beq.n	80193aa <UART_SetConfig+0xd5a>
 8019322:	687b      	ldr	r3, [r7, #4]
 8019324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019326:	2b05      	cmp	r3, #5
 8019328:	d03a      	beq.n	80193a0 <UART_SetConfig+0xd50>
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801932e:	2b06      	cmp	r3, #6
 8019330:	d031      	beq.n	8019396 <UART_SetConfig+0xd46>
 8019332:	687b      	ldr	r3, [r7, #4]
 8019334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019336:	2b07      	cmp	r3, #7
 8019338:	d028      	beq.n	801938c <UART_SetConfig+0xd3c>
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801933e:	2b08      	cmp	r3, #8
 8019340:	d01f      	beq.n	8019382 <UART_SetConfig+0xd32>
 8019342:	687b      	ldr	r3, [r7, #4]
 8019344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019346:	2b09      	cmp	r3, #9
 8019348:	d016      	beq.n	8019378 <UART_SetConfig+0xd28>
 801934a:	687b      	ldr	r3, [r7, #4]
 801934c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801934e:	2b0a      	cmp	r3, #10
 8019350:	d00d      	beq.n	801936e <UART_SetConfig+0xd1e>
 8019352:	687b      	ldr	r3, [r7, #4]
 8019354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019356:	2b0b      	cmp	r3, #11
 8019358:	d104      	bne.n	8019364 <UART_SetConfig+0xd14>
 801935a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801935e:	f04f 0400 	mov.w	r4, #0
 8019362:	e03a      	b.n	80193da <UART_SetConfig+0xd8a>
 8019364:	f04f 0301 	mov.w	r3, #1
 8019368:	f04f 0400 	mov.w	r4, #0
 801936c:	e035      	b.n	80193da <UART_SetConfig+0xd8a>
 801936e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8019372:	f04f 0400 	mov.w	r4, #0
 8019376:	e030      	b.n	80193da <UART_SetConfig+0xd8a>
 8019378:	f04f 0340 	mov.w	r3, #64	; 0x40
 801937c:	f04f 0400 	mov.w	r4, #0
 8019380:	e02b      	b.n	80193da <UART_SetConfig+0xd8a>
 8019382:	f04f 0320 	mov.w	r3, #32
 8019386:	f04f 0400 	mov.w	r4, #0
 801938a:	e026      	b.n	80193da <UART_SetConfig+0xd8a>
 801938c:	f04f 0310 	mov.w	r3, #16
 8019390:	f04f 0400 	mov.w	r4, #0
 8019394:	e021      	b.n	80193da <UART_SetConfig+0xd8a>
 8019396:	f04f 030c 	mov.w	r3, #12
 801939a:	f04f 0400 	mov.w	r4, #0
 801939e:	e01c      	b.n	80193da <UART_SetConfig+0xd8a>
 80193a0:	f04f 030a 	mov.w	r3, #10
 80193a4:	f04f 0400 	mov.w	r4, #0
 80193a8:	e017      	b.n	80193da <UART_SetConfig+0xd8a>
 80193aa:	f04f 0308 	mov.w	r3, #8
 80193ae:	f04f 0400 	mov.w	r4, #0
 80193b2:	e012      	b.n	80193da <UART_SetConfig+0xd8a>
 80193b4:	f04f 0306 	mov.w	r3, #6
 80193b8:	f04f 0400 	mov.w	r4, #0
 80193bc:	e00d      	b.n	80193da <UART_SetConfig+0xd8a>
 80193be:	f04f 0304 	mov.w	r3, #4
 80193c2:	f04f 0400 	mov.w	r4, #0
 80193c6:	e008      	b.n	80193da <UART_SetConfig+0xd8a>
 80193c8:	f04f 0302 	mov.w	r3, #2
 80193cc:	f04f 0400 	mov.w	r4, #0
 80193d0:	e003      	b.n	80193da <UART_SetConfig+0xd8a>
 80193d2:	f04f 0301 	mov.w	r3, #1
 80193d6:	f04f 0400 	mov.w	r4, #0
 80193da:	461a      	mov	r2, r3
 80193dc:	4623      	mov	r3, r4
 80193de:	f7e6 ff83 	bl	80002e8 <__aeabi_uldivmod>
 80193e2:	4603      	mov	r3, r0
 80193e4:	460c      	mov	r4, r1
 80193e6:	4619      	mov	r1, r3
 80193e8:	4622      	mov	r2, r4
 80193ea:	f04f 0300 	mov.w	r3, #0
 80193ee:	f04f 0400 	mov.w	r4, #0
 80193f2:	0214      	lsls	r4, r2, #8
 80193f4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80193f8:	020b      	lsls	r3, r1, #8
 80193fa:	687a      	ldr	r2, [r7, #4]
 80193fc:	6852      	ldr	r2, [r2, #4]
 80193fe:	0852      	lsrs	r2, r2, #1
 8019400:	4611      	mov	r1, r2
 8019402:	f04f 0200 	mov.w	r2, #0
 8019406:	eb13 0b01 	adds.w	fp, r3, r1
 801940a:	eb44 0c02 	adc.w	ip, r4, r2
 801940e:	4658      	mov	r0, fp
 8019410:	4661      	mov	r1, ip
 8019412:	687b      	ldr	r3, [r7, #4]
 8019414:	685b      	ldr	r3, [r3, #4]
 8019416:	f04f 0400 	mov.w	r4, #0
 801941a:	461a      	mov	r2, r3
 801941c:	4623      	mov	r3, r4
 801941e:	f7e6 ff63 	bl	80002e8 <__aeabi_uldivmod>
 8019422:	4603      	mov	r3, r0
 8019424:	460c      	mov	r4, r1
 8019426:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8019428:	e2e8      	b.n	80199fc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801942a:	f107 030c 	add.w	r3, r7, #12
 801942e:	4618      	mov	r0, r3
 8019430:	f7fd fc8e 	bl	8016d50 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019434:	693b      	ldr	r3, [r7, #16]
 8019436:	4618      	mov	r0, r3
 8019438:	f04f 0100 	mov.w	r1, #0
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019440:	2b00      	cmp	r3, #0
 8019442:	d067      	beq.n	8019514 <UART_SetConfig+0xec4>
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019448:	2b01      	cmp	r3, #1
 801944a:	d05e      	beq.n	801950a <UART_SetConfig+0xeba>
 801944c:	687b      	ldr	r3, [r7, #4]
 801944e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019450:	2b02      	cmp	r3, #2
 8019452:	d055      	beq.n	8019500 <UART_SetConfig+0xeb0>
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019458:	2b03      	cmp	r3, #3
 801945a:	d04c      	beq.n	80194f6 <UART_SetConfig+0xea6>
 801945c:	687b      	ldr	r3, [r7, #4]
 801945e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019460:	2b04      	cmp	r3, #4
 8019462:	d043      	beq.n	80194ec <UART_SetConfig+0xe9c>
 8019464:	687b      	ldr	r3, [r7, #4]
 8019466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019468:	2b05      	cmp	r3, #5
 801946a:	d03a      	beq.n	80194e2 <UART_SetConfig+0xe92>
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019470:	2b06      	cmp	r3, #6
 8019472:	d031      	beq.n	80194d8 <UART_SetConfig+0xe88>
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019478:	2b07      	cmp	r3, #7
 801947a:	d028      	beq.n	80194ce <UART_SetConfig+0xe7e>
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019480:	2b08      	cmp	r3, #8
 8019482:	d01f      	beq.n	80194c4 <UART_SetConfig+0xe74>
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019488:	2b09      	cmp	r3, #9
 801948a:	d016      	beq.n	80194ba <UART_SetConfig+0xe6a>
 801948c:	687b      	ldr	r3, [r7, #4]
 801948e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019490:	2b0a      	cmp	r3, #10
 8019492:	d00d      	beq.n	80194b0 <UART_SetConfig+0xe60>
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019498:	2b0b      	cmp	r3, #11
 801949a:	d104      	bne.n	80194a6 <UART_SetConfig+0xe56>
 801949c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80194a0:	f04f 0400 	mov.w	r4, #0
 80194a4:	e03a      	b.n	801951c <UART_SetConfig+0xecc>
 80194a6:	f04f 0301 	mov.w	r3, #1
 80194aa:	f04f 0400 	mov.w	r4, #0
 80194ae:	e035      	b.n	801951c <UART_SetConfig+0xecc>
 80194b0:	f04f 0380 	mov.w	r3, #128	; 0x80
 80194b4:	f04f 0400 	mov.w	r4, #0
 80194b8:	e030      	b.n	801951c <UART_SetConfig+0xecc>
 80194ba:	f04f 0340 	mov.w	r3, #64	; 0x40
 80194be:	f04f 0400 	mov.w	r4, #0
 80194c2:	e02b      	b.n	801951c <UART_SetConfig+0xecc>
 80194c4:	f04f 0320 	mov.w	r3, #32
 80194c8:	f04f 0400 	mov.w	r4, #0
 80194cc:	e026      	b.n	801951c <UART_SetConfig+0xecc>
 80194ce:	f04f 0310 	mov.w	r3, #16
 80194d2:	f04f 0400 	mov.w	r4, #0
 80194d6:	e021      	b.n	801951c <UART_SetConfig+0xecc>
 80194d8:	f04f 030c 	mov.w	r3, #12
 80194dc:	f04f 0400 	mov.w	r4, #0
 80194e0:	e01c      	b.n	801951c <UART_SetConfig+0xecc>
 80194e2:	f04f 030a 	mov.w	r3, #10
 80194e6:	f04f 0400 	mov.w	r4, #0
 80194ea:	e017      	b.n	801951c <UART_SetConfig+0xecc>
 80194ec:	f04f 0308 	mov.w	r3, #8
 80194f0:	f04f 0400 	mov.w	r4, #0
 80194f4:	e012      	b.n	801951c <UART_SetConfig+0xecc>
 80194f6:	f04f 0306 	mov.w	r3, #6
 80194fa:	f04f 0400 	mov.w	r4, #0
 80194fe:	e00d      	b.n	801951c <UART_SetConfig+0xecc>
 8019500:	f04f 0304 	mov.w	r3, #4
 8019504:	f04f 0400 	mov.w	r4, #0
 8019508:	e008      	b.n	801951c <UART_SetConfig+0xecc>
 801950a:	f04f 0302 	mov.w	r3, #2
 801950e:	f04f 0400 	mov.w	r4, #0
 8019512:	e003      	b.n	801951c <UART_SetConfig+0xecc>
 8019514:	f04f 0301 	mov.w	r3, #1
 8019518:	f04f 0400 	mov.w	r4, #0
 801951c:	461a      	mov	r2, r3
 801951e:	4623      	mov	r3, r4
 8019520:	f7e6 fee2 	bl	80002e8 <__aeabi_uldivmod>
 8019524:	4603      	mov	r3, r0
 8019526:	460c      	mov	r4, r1
 8019528:	4619      	mov	r1, r3
 801952a:	4622      	mov	r2, r4
 801952c:	f04f 0300 	mov.w	r3, #0
 8019530:	f04f 0400 	mov.w	r4, #0
 8019534:	0214      	lsls	r4, r2, #8
 8019536:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 801953a:	020b      	lsls	r3, r1, #8
 801953c:	687a      	ldr	r2, [r7, #4]
 801953e:	6852      	ldr	r2, [r2, #4]
 8019540:	0852      	lsrs	r2, r2, #1
 8019542:	4611      	mov	r1, r2
 8019544:	f04f 0200 	mov.w	r2, #0
 8019548:	eb13 0b01 	adds.w	fp, r3, r1
 801954c:	eb44 0c02 	adc.w	ip, r4, r2
 8019550:	4658      	mov	r0, fp
 8019552:	4661      	mov	r1, ip
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	685b      	ldr	r3, [r3, #4]
 8019558:	f04f 0400 	mov.w	r4, #0
 801955c:	461a      	mov	r2, r3
 801955e:	4623      	mov	r3, r4
 8019560:	f7e6 fec2 	bl	80002e8 <__aeabi_uldivmod>
 8019564:	4603      	mov	r3, r0
 8019566:	460c      	mov	r4, r1
 8019568:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 801956a:	e247      	b.n	80199fc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801956c:	4b96      	ldr	r3, [pc, #600]	; (80197c8 <UART_SetConfig+0x1178>)
 801956e:	681b      	ldr	r3, [r3, #0]
 8019570:	f003 0320 	and.w	r3, r3, #32
 8019574:	2b00      	cmp	r3, #0
 8019576:	f000 80a3 	beq.w	80196c0 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801957a:	4b93      	ldr	r3, [pc, #588]	; (80197c8 <UART_SetConfig+0x1178>)
 801957c:	681b      	ldr	r3, [r3, #0]
 801957e:	08db      	lsrs	r3, r3, #3
 8019580:	f003 0303 	and.w	r3, r3, #3
 8019584:	4a91      	ldr	r2, [pc, #580]	; (80197cc <UART_SetConfig+0x117c>)
 8019586:	fa22 f303 	lsr.w	r3, r2, r3
 801958a:	4618      	mov	r0, r3
 801958c:	f04f 0100 	mov.w	r1, #0
 8019590:	687b      	ldr	r3, [r7, #4]
 8019592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019594:	2b00      	cmp	r3, #0
 8019596:	d067      	beq.n	8019668 <UART_SetConfig+0x1018>
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801959c:	2b01      	cmp	r3, #1
 801959e:	d05e      	beq.n	801965e <UART_SetConfig+0x100e>
 80195a0:	687b      	ldr	r3, [r7, #4]
 80195a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195a4:	2b02      	cmp	r3, #2
 80195a6:	d055      	beq.n	8019654 <UART_SetConfig+0x1004>
 80195a8:	687b      	ldr	r3, [r7, #4]
 80195aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195ac:	2b03      	cmp	r3, #3
 80195ae:	d04c      	beq.n	801964a <UART_SetConfig+0xffa>
 80195b0:	687b      	ldr	r3, [r7, #4]
 80195b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195b4:	2b04      	cmp	r3, #4
 80195b6:	d043      	beq.n	8019640 <UART_SetConfig+0xff0>
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195bc:	2b05      	cmp	r3, #5
 80195be:	d03a      	beq.n	8019636 <UART_SetConfig+0xfe6>
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195c4:	2b06      	cmp	r3, #6
 80195c6:	d031      	beq.n	801962c <UART_SetConfig+0xfdc>
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195cc:	2b07      	cmp	r3, #7
 80195ce:	d028      	beq.n	8019622 <UART_SetConfig+0xfd2>
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195d4:	2b08      	cmp	r3, #8
 80195d6:	d01f      	beq.n	8019618 <UART_SetConfig+0xfc8>
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195dc:	2b09      	cmp	r3, #9
 80195de:	d016      	beq.n	801960e <UART_SetConfig+0xfbe>
 80195e0:	687b      	ldr	r3, [r7, #4]
 80195e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195e4:	2b0a      	cmp	r3, #10
 80195e6:	d00d      	beq.n	8019604 <UART_SetConfig+0xfb4>
 80195e8:	687b      	ldr	r3, [r7, #4]
 80195ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195ec:	2b0b      	cmp	r3, #11
 80195ee:	d104      	bne.n	80195fa <UART_SetConfig+0xfaa>
 80195f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80195f4:	f04f 0400 	mov.w	r4, #0
 80195f8:	e03a      	b.n	8019670 <UART_SetConfig+0x1020>
 80195fa:	f04f 0301 	mov.w	r3, #1
 80195fe:	f04f 0400 	mov.w	r4, #0
 8019602:	e035      	b.n	8019670 <UART_SetConfig+0x1020>
 8019604:	f04f 0380 	mov.w	r3, #128	; 0x80
 8019608:	f04f 0400 	mov.w	r4, #0
 801960c:	e030      	b.n	8019670 <UART_SetConfig+0x1020>
 801960e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8019612:	f04f 0400 	mov.w	r4, #0
 8019616:	e02b      	b.n	8019670 <UART_SetConfig+0x1020>
 8019618:	f04f 0320 	mov.w	r3, #32
 801961c:	f04f 0400 	mov.w	r4, #0
 8019620:	e026      	b.n	8019670 <UART_SetConfig+0x1020>
 8019622:	f04f 0310 	mov.w	r3, #16
 8019626:	f04f 0400 	mov.w	r4, #0
 801962a:	e021      	b.n	8019670 <UART_SetConfig+0x1020>
 801962c:	f04f 030c 	mov.w	r3, #12
 8019630:	f04f 0400 	mov.w	r4, #0
 8019634:	e01c      	b.n	8019670 <UART_SetConfig+0x1020>
 8019636:	f04f 030a 	mov.w	r3, #10
 801963a:	f04f 0400 	mov.w	r4, #0
 801963e:	e017      	b.n	8019670 <UART_SetConfig+0x1020>
 8019640:	f04f 0308 	mov.w	r3, #8
 8019644:	f04f 0400 	mov.w	r4, #0
 8019648:	e012      	b.n	8019670 <UART_SetConfig+0x1020>
 801964a:	f04f 0306 	mov.w	r3, #6
 801964e:	f04f 0400 	mov.w	r4, #0
 8019652:	e00d      	b.n	8019670 <UART_SetConfig+0x1020>
 8019654:	f04f 0304 	mov.w	r3, #4
 8019658:	f04f 0400 	mov.w	r4, #0
 801965c:	e008      	b.n	8019670 <UART_SetConfig+0x1020>
 801965e:	f04f 0302 	mov.w	r3, #2
 8019662:	f04f 0400 	mov.w	r4, #0
 8019666:	e003      	b.n	8019670 <UART_SetConfig+0x1020>
 8019668:	f04f 0301 	mov.w	r3, #1
 801966c:	f04f 0400 	mov.w	r4, #0
 8019670:	461a      	mov	r2, r3
 8019672:	4623      	mov	r3, r4
 8019674:	f7e6 fe38 	bl	80002e8 <__aeabi_uldivmod>
 8019678:	4603      	mov	r3, r0
 801967a:	460c      	mov	r4, r1
 801967c:	4619      	mov	r1, r3
 801967e:	4622      	mov	r2, r4
 8019680:	f04f 0300 	mov.w	r3, #0
 8019684:	f04f 0400 	mov.w	r4, #0
 8019688:	0214      	lsls	r4, r2, #8
 801968a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 801968e:	020b      	lsls	r3, r1, #8
 8019690:	687a      	ldr	r2, [r7, #4]
 8019692:	6852      	ldr	r2, [r2, #4]
 8019694:	0852      	lsrs	r2, r2, #1
 8019696:	4611      	mov	r1, r2
 8019698:	f04f 0200 	mov.w	r2, #0
 801969c:	eb13 0b01 	adds.w	fp, r3, r1
 80196a0:	eb44 0c02 	adc.w	ip, r4, r2
 80196a4:	4658      	mov	r0, fp
 80196a6:	4661      	mov	r1, ip
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	685b      	ldr	r3, [r3, #4]
 80196ac:	f04f 0400 	mov.w	r4, #0
 80196b0:	461a      	mov	r2, r3
 80196b2:	4623      	mov	r3, r4
 80196b4:	f7e6 fe18 	bl	80002e8 <__aeabi_uldivmod>
 80196b8:	4603      	mov	r3, r0
 80196ba:	460c      	mov	r4, r1
 80196bc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 80196be:	e19d      	b.n	80199fc <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196c4:	2b00      	cmp	r3, #0
 80196c6:	d05b      	beq.n	8019780 <UART_SetConfig+0x1130>
 80196c8:	687b      	ldr	r3, [r7, #4]
 80196ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196cc:	2b01      	cmp	r3, #1
 80196ce:	d053      	beq.n	8019778 <UART_SetConfig+0x1128>
 80196d0:	687b      	ldr	r3, [r7, #4]
 80196d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196d4:	2b02      	cmp	r3, #2
 80196d6:	d04b      	beq.n	8019770 <UART_SetConfig+0x1120>
 80196d8:	687b      	ldr	r3, [r7, #4]
 80196da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196dc:	2b03      	cmp	r3, #3
 80196de:	d043      	beq.n	8019768 <UART_SetConfig+0x1118>
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196e4:	2b04      	cmp	r3, #4
 80196e6:	d03b      	beq.n	8019760 <UART_SetConfig+0x1110>
 80196e8:	687b      	ldr	r3, [r7, #4]
 80196ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196ec:	2b05      	cmp	r3, #5
 80196ee:	d033      	beq.n	8019758 <UART_SetConfig+0x1108>
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196f4:	2b06      	cmp	r3, #6
 80196f6:	d02b      	beq.n	8019750 <UART_SetConfig+0x1100>
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196fc:	2b07      	cmp	r3, #7
 80196fe:	d023      	beq.n	8019748 <UART_SetConfig+0x10f8>
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019704:	2b08      	cmp	r3, #8
 8019706:	d01b      	beq.n	8019740 <UART_SetConfig+0x10f0>
 8019708:	687b      	ldr	r3, [r7, #4]
 801970a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801970c:	2b09      	cmp	r3, #9
 801970e:	d013      	beq.n	8019738 <UART_SetConfig+0x10e8>
 8019710:	687b      	ldr	r3, [r7, #4]
 8019712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019714:	2b0a      	cmp	r3, #10
 8019716:	d00b      	beq.n	8019730 <UART_SetConfig+0x10e0>
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801971c:	2b0b      	cmp	r3, #11
 801971e:	d103      	bne.n	8019728 <UART_SetConfig+0x10d8>
 8019720:	4b2a      	ldr	r3, [pc, #168]	; (80197cc <UART_SetConfig+0x117c>)
 8019722:	f04f 0400 	mov.w	r4, #0
 8019726:	e02e      	b.n	8019786 <UART_SetConfig+0x1136>
 8019728:	4b29      	ldr	r3, [pc, #164]	; (80197d0 <UART_SetConfig+0x1180>)
 801972a:	f04f 0403 	mov.w	r4, #3
 801972e:	e02a      	b.n	8019786 <UART_SetConfig+0x1136>
 8019730:	4b28      	ldr	r3, [pc, #160]	; (80197d4 <UART_SetConfig+0x1184>)
 8019732:	f04f 0400 	mov.w	r4, #0
 8019736:	e026      	b.n	8019786 <UART_SetConfig+0x1136>
 8019738:	4b27      	ldr	r3, [pc, #156]	; (80197d8 <UART_SetConfig+0x1188>)
 801973a:	f04f 0400 	mov.w	r4, #0
 801973e:	e022      	b.n	8019786 <UART_SetConfig+0x1136>
 8019740:	4b26      	ldr	r3, [pc, #152]	; (80197dc <UART_SetConfig+0x118c>)
 8019742:	f04f 0400 	mov.w	r4, #0
 8019746:	e01e      	b.n	8019786 <UART_SetConfig+0x1136>
 8019748:	4b25      	ldr	r3, [pc, #148]	; (80197e0 <UART_SetConfig+0x1190>)
 801974a:	f04f 0400 	mov.w	r4, #0
 801974e:	e01a      	b.n	8019786 <UART_SetConfig+0x1136>
 8019750:	a419      	add	r4, pc, #100	; (adr r4, 80197b8 <UART_SetConfig+0x1168>)
 8019752:	e9d4 3400 	ldrd	r3, r4, [r4]
 8019756:	e016      	b.n	8019786 <UART_SetConfig+0x1136>
 8019758:	4b22      	ldr	r3, [pc, #136]	; (80197e4 <UART_SetConfig+0x1194>)
 801975a:	f04f 0400 	mov.w	r4, #0
 801975e:	e012      	b.n	8019786 <UART_SetConfig+0x1136>
 8019760:	4b21      	ldr	r3, [pc, #132]	; (80197e8 <UART_SetConfig+0x1198>)
 8019762:	f04f 0400 	mov.w	r4, #0
 8019766:	e00e      	b.n	8019786 <UART_SetConfig+0x1136>
 8019768:	a415      	add	r4, pc, #84	; (adr r4, 80197c0 <UART_SetConfig+0x1170>)
 801976a:	e9d4 3400 	ldrd	r3, r4, [r4]
 801976e:	e00a      	b.n	8019786 <UART_SetConfig+0x1136>
 8019770:	4b1e      	ldr	r3, [pc, #120]	; (80197ec <UART_SetConfig+0x119c>)
 8019772:	f04f 0400 	mov.w	r4, #0
 8019776:	e006      	b.n	8019786 <UART_SetConfig+0x1136>
 8019778:	4b1d      	ldr	r3, [pc, #116]	; (80197f0 <UART_SetConfig+0x11a0>)
 801977a:	f04f 0401 	mov.w	r4, #1
 801977e:	e002      	b.n	8019786 <UART_SetConfig+0x1136>
 8019780:	4b13      	ldr	r3, [pc, #76]	; (80197d0 <UART_SetConfig+0x1180>)
 8019782:	f04f 0403 	mov.w	r4, #3
 8019786:	687a      	ldr	r2, [r7, #4]
 8019788:	6852      	ldr	r2, [r2, #4]
 801978a:	0852      	lsrs	r2, r2, #1
 801978c:	4611      	mov	r1, r2
 801978e:	f04f 0200 	mov.w	r2, #0
 8019792:	eb13 0b01 	adds.w	fp, r3, r1
 8019796:	eb44 0c02 	adc.w	ip, r4, r2
 801979a:	4658      	mov	r0, fp
 801979c:	4661      	mov	r1, ip
 801979e:	687b      	ldr	r3, [r7, #4]
 80197a0:	685b      	ldr	r3, [r3, #4]
 80197a2:	f04f 0400 	mov.w	r4, #0
 80197a6:	461a      	mov	r2, r3
 80197a8:	4623      	mov	r3, r4
 80197aa:	f7e6 fd9d 	bl	80002e8 <__aeabi_uldivmod>
 80197ae:	4603      	mov	r3, r0
 80197b0:	460c      	mov	r4, r1
 80197b2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80197b4:	e122      	b.n	80199fc <UART_SetConfig+0x13ac>
 80197b6:	bf00      	nop
 80197b8:	51615500 	.word	0x51615500
 80197bc:	00000000 	.word	0x00000000
 80197c0:	a2c2aa00 	.word	0xa2c2aa00
 80197c4:	00000000 	.word	0x00000000
 80197c8:	58024400 	.word	0x58024400
 80197cc:	03d09000 	.word	0x03d09000
 80197d0:	d0900000 	.word	0xd0900000
 80197d4:	07a12000 	.word	0x07a12000
 80197d8:	0f424000 	.word	0x0f424000
 80197dc:	1e848000 	.word	0x1e848000
 80197e0:	3d090000 	.word	0x3d090000
 80197e4:	61a80000 	.word	0x61a80000
 80197e8:	7a120000 	.word	0x7a120000
 80197ec:	f4240000 	.word	0xf4240000
 80197f0:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197f8:	2b00      	cmp	r3, #0
 80197fa:	d05b      	beq.n	80198b4 <UART_SetConfig+0x1264>
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019800:	2b01      	cmp	r3, #1
 8019802:	d053      	beq.n	80198ac <UART_SetConfig+0x125c>
 8019804:	687b      	ldr	r3, [r7, #4]
 8019806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019808:	2b02      	cmp	r3, #2
 801980a:	d04b      	beq.n	80198a4 <UART_SetConfig+0x1254>
 801980c:	687b      	ldr	r3, [r7, #4]
 801980e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019810:	2b03      	cmp	r3, #3
 8019812:	d043      	beq.n	801989c <UART_SetConfig+0x124c>
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019818:	2b04      	cmp	r3, #4
 801981a:	d03b      	beq.n	8019894 <UART_SetConfig+0x1244>
 801981c:	687b      	ldr	r3, [r7, #4]
 801981e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019820:	2b05      	cmp	r3, #5
 8019822:	d033      	beq.n	801988c <UART_SetConfig+0x123c>
 8019824:	687b      	ldr	r3, [r7, #4]
 8019826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019828:	2b06      	cmp	r3, #6
 801982a:	d02b      	beq.n	8019884 <UART_SetConfig+0x1234>
 801982c:	687b      	ldr	r3, [r7, #4]
 801982e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019830:	2b07      	cmp	r3, #7
 8019832:	d023      	beq.n	801987c <UART_SetConfig+0x122c>
 8019834:	687b      	ldr	r3, [r7, #4]
 8019836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019838:	2b08      	cmp	r3, #8
 801983a:	d01b      	beq.n	8019874 <UART_SetConfig+0x1224>
 801983c:	687b      	ldr	r3, [r7, #4]
 801983e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019840:	2b09      	cmp	r3, #9
 8019842:	d013      	beq.n	801986c <UART_SetConfig+0x121c>
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019848:	2b0a      	cmp	r3, #10
 801984a:	d00b      	beq.n	8019864 <UART_SetConfig+0x1214>
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019850:	2b0b      	cmp	r3, #11
 8019852:	d103      	bne.n	801985c <UART_SetConfig+0x120c>
 8019854:	4bc0      	ldr	r3, [pc, #768]	; (8019b58 <UART_SetConfig+0x1508>)
 8019856:	f04f 0400 	mov.w	r4, #0
 801985a:	e02e      	b.n	80198ba <UART_SetConfig+0x126a>
 801985c:	4bbf      	ldr	r3, [pc, #764]	; (8019b5c <UART_SetConfig+0x150c>)
 801985e:	f04f 0400 	mov.w	r4, #0
 8019862:	e02a      	b.n	80198ba <UART_SetConfig+0x126a>
 8019864:	4bbe      	ldr	r3, [pc, #760]	; (8019b60 <UART_SetConfig+0x1510>)
 8019866:	f04f 0400 	mov.w	r4, #0
 801986a:	e026      	b.n	80198ba <UART_SetConfig+0x126a>
 801986c:	4bbd      	ldr	r3, [pc, #756]	; (8019b64 <UART_SetConfig+0x1514>)
 801986e:	f04f 0400 	mov.w	r4, #0
 8019872:	e022      	b.n	80198ba <UART_SetConfig+0x126a>
 8019874:	4bbc      	ldr	r3, [pc, #752]	; (8019b68 <UART_SetConfig+0x1518>)
 8019876:	f04f 0400 	mov.w	r4, #0
 801987a:	e01e      	b.n	80198ba <UART_SetConfig+0x126a>
 801987c:	4bbb      	ldr	r3, [pc, #748]	; (8019b6c <UART_SetConfig+0x151c>)
 801987e:	f04f 0400 	mov.w	r4, #0
 8019882:	e01a      	b.n	80198ba <UART_SetConfig+0x126a>
 8019884:	a4b0      	add	r4, pc, #704	; (adr r4, 8019b48 <UART_SetConfig+0x14f8>)
 8019886:	e9d4 3400 	ldrd	r3, r4, [r4]
 801988a:	e016      	b.n	80198ba <UART_SetConfig+0x126a>
 801988c:	4bb8      	ldr	r3, [pc, #736]	; (8019b70 <UART_SetConfig+0x1520>)
 801988e:	f04f 0400 	mov.w	r4, #0
 8019892:	e012      	b.n	80198ba <UART_SetConfig+0x126a>
 8019894:	4bb7      	ldr	r3, [pc, #732]	; (8019b74 <UART_SetConfig+0x1524>)
 8019896:	f04f 0400 	mov.w	r4, #0
 801989a:	e00e      	b.n	80198ba <UART_SetConfig+0x126a>
 801989c:	a4ac      	add	r4, pc, #688	; (adr r4, 8019b50 <UART_SetConfig+0x1500>)
 801989e:	e9d4 3400 	ldrd	r3, r4, [r4]
 80198a2:	e00a      	b.n	80198ba <UART_SetConfig+0x126a>
 80198a4:	4bb4      	ldr	r3, [pc, #720]	; (8019b78 <UART_SetConfig+0x1528>)
 80198a6:	f04f 0400 	mov.w	r4, #0
 80198aa:	e006      	b.n	80198ba <UART_SetConfig+0x126a>
 80198ac:	4bb3      	ldr	r3, [pc, #716]	; (8019b7c <UART_SetConfig+0x152c>)
 80198ae:	f04f 0400 	mov.w	r4, #0
 80198b2:	e002      	b.n	80198ba <UART_SetConfig+0x126a>
 80198b4:	4ba9      	ldr	r3, [pc, #676]	; (8019b5c <UART_SetConfig+0x150c>)
 80198b6:	f04f 0400 	mov.w	r4, #0
 80198ba:	687a      	ldr	r2, [r7, #4]
 80198bc:	6852      	ldr	r2, [r2, #4]
 80198be:	0852      	lsrs	r2, r2, #1
 80198c0:	4611      	mov	r1, r2
 80198c2:	f04f 0200 	mov.w	r2, #0
 80198c6:	eb13 0b01 	adds.w	fp, r3, r1
 80198ca:	eb44 0c02 	adc.w	ip, r4, r2
 80198ce:	4658      	mov	r0, fp
 80198d0:	4661      	mov	r1, ip
 80198d2:	687b      	ldr	r3, [r7, #4]
 80198d4:	685b      	ldr	r3, [r3, #4]
 80198d6:	f04f 0400 	mov.w	r4, #0
 80198da:	461a      	mov	r2, r3
 80198dc:	4623      	mov	r3, r4
 80198de:	f7e6 fd03 	bl	80002e8 <__aeabi_uldivmod>
 80198e2:	4603      	mov	r3, r0
 80198e4:	460c      	mov	r4, r1
 80198e6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80198e8:	e088      	b.n	80199fc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80198ea:	687b      	ldr	r3, [r7, #4]
 80198ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198ee:	2b00      	cmp	r3, #0
 80198f0:	d064      	beq.n	80199bc <UART_SetConfig+0x136c>
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198f6:	2b01      	cmp	r3, #1
 80198f8:	d05b      	beq.n	80199b2 <UART_SetConfig+0x1362>
 80198fa:	687b      	ldr	r3, [r7, #4]
 80198fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198fe:	2b02      	cmp	r3, #2
 8019900:	d052      	beq.n	80199a8 <UART_SetConfig+0x1358>
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019906:	2b03      	cmp	r3, #3
 8019908:	d04a      	beq.n	80199a0 <UART_SetConfig+0x1350>
 801990a:	687b      	ldr	r3, [r7, #4]
 801990c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801990e:	2b04      	cmp	r3, #4
 8019910:	d041      	beq.n	8019996 <UART_SetConfig+0x1346>
 8019912:	687b      	ldr	r3, [r7, #4]
 8019914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019916:	2b05      	cmp	r3, #5
 8019918:	d039      	beq.n	801998e <UART_SetConfig+0x133e>
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801991e:	2b06      	cmp	r3, #6
 8019920:	d031      	beq.n	8019986 <UART_SetConfig+0x1336>
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019926:	2b07      	cmp	r3, #7
 8019928:	d028      	beq.n	801997c <UART_SetConfig+0x132c>
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801992e:	2b08      	cmp	r3, #8
 8019930:	d01f      	beq.n	8019972 <UART_SetConfig+0x1322>
 8019932:	687b      	ldr	r3, [r7, #4]
 8019934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019936:	2b09      	cmp	r3, #9
 8019938:	d016      	beq.n	8019968 <UART_SetConfig+0x1318>
 801993a:	687b      	ldr	r3, [r7, #4]
 801993c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801993e:	2b0a      	cmp	r3, #10
 8019940:	d00d      	beq.n	801995e <UART_SetConfig+0x130e>
 8019942:	687b      	ldr	r3, [r7, #4]
 8019944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019946:	2b0b      	cmp	r3, #11
 8019948:	d104      	bne.n	8019954 <UART_SetConfig+0x1304>
 801994a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801994e:	f04f 0400 	mov.w	r4, #0
 8019952:	e037      	b.n	80199c4 <UART_SetConfig+0x1374>
 8019954:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8019958:	f04f 0400 	mov.w	r4, #0
 801995c:	e032      	b.n	80199c4 <UART_SetConfig+0x1374>
 801995e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8019962:	f04f 0400 	mov.w	r4, #0
 8019966:	e02d      	b.n	80199c4 <UART_SetConfig+0x1374>
 8019968:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801996c:	f04f 0400 	mov.w	r4, #0
 8019970:	e028      	b.n	80199c4 <UART_SetConfig+0x1374>
 8019972:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8019976:	f04f 0400 	mov.w	r4, #0
 801997a:	e023      	b.n	80199c4 <UART_SetConfig+0x1374>
 801997c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8019980:	f04f 0400 	mov.w	r4, #0
 8019984:	e01e      	b.n	80199c4 <UART_SetConfig+0x1374>
 8019986:	4b7e      	ldr	r3, [pc, #504]	; (8019b80 <UART_SetConfig+0x1530>)
 8019988:	f04f 0400 	mov.w	r4, #0
 801998c:	e01a      	b.n	80199c4 <UART_SetConfig+0x1374>
 801998e:	4b7d      	ldr	r3, [pc, #500]	; (8019b84 <UART_SetConfig+0x1534>)
 8019990:	f04f 0400 	mov.w	r4, #0
 8019994:	e016      	b.n	80199c4 <UART_SetConfig+0x1374>
 8019996:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801999a:	f04f 0400 	mov.w	r4, #0
 801999e:	e011      	b.n	80199c4 <UART_SetConfig+0x1374>
 80199a0:	4b79      	ldr	r3, [pc, #484]	; (8019b88 <UART_SetConfig+0x1538>)
 80199a2:	f04f 0400 	mov.w	r4, #0
 80199a6:	e00d      	b.n	80199c4 <UART_SetConfig+0x1374>
 80199a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80199ac:	f04f 0400 	mov.w	r4, #0
 80199b0:	e008      	b.n	80199c4 <UART_SetConfig+0x1374>
 80199b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80199b6:	f04f 0400 	mov.w	r4, #0
 80199ba:	e003      	b.n	80199c4 <UART_SetConfig+0x1374>
 80199bc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80199c0:	f04f 0400 	mov.w	r4, #0
 80199c4:	687a      	ldr	r2, [r7, #4]
 80199c6:	6852      	ldr	r2, [r2, #4]
 80199c8:	0852      	lsrs	r2, r2, #1
 80199ca:	4611      	mov	r1, r2
 80199cc:	f04f 0200 	mov.w	r2, #0
 80199d0:	eb13 0b01 	adds.w	fp, r3, r1
 80199d4:	eb44 0c02 	adc.w	ip, r4, r2
 80199d8:	4658      	mov	r0, fp
 80199da:	4661      	mov	r1, ip
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	685b      	ldr	r3, [r3, #4]
 80199e0:	f04f 0400 	mov.w	r4, #0
 80199e4:	461a      	mov	r2, r3
 80199e6:	4623      	mov	r3, r4
 80199e8:	f7e6 fc7e 	bl	80002e8 <__aeabi_uldivmod>
 80199ec:	4603      	mov	r3, r0
 80199ee:	460c      	mov	r4, r1
 80199f0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80199f2:	e003      	b.n	80199fc <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 80199f4:	2301      	movs	r3, #1
 80199f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 80199fa:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80199fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80199fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8019a02:	d309      	bcc.n	8019a18 <UART_SetConfig+0x13c8>
 8019a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8019a0a:	d205      	bcs.n	8019a18 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 8019a0c:	687b      	ldr	r3, [r7, #4]
 8019a0e:	681b      	ldr	r3, [r3, #0]
 8019a10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019a12:	60da      	str	r2, [r3, #12]
 8019a14:	f000 bf85 	b.w	801a922 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8019a18:	2301      	movs	r3, #1
 8019a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8019a1e:	f000 bf80 	b.w	801a922 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	69db      	ldr	r3, [r3, #28]
 8019a26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8019a2a:	f040 83da 	bne.w	801a1e2 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 8019a2e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8019a32:	2b40      	cmp	r3, #64	; 0x40
 8019a34:	f200 83b3 	bhi.w	801a19e <UART_SetConfig+0x1b4e>
 8019a38:	a201      	add	r2, pc, #4	; (adr r2, 8019a40 <UART_SetConfig+0x13f0>)
 8019a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019a3e:	bf00      	nop
 8019a40:	08019b8d 	.word	0x08019b8d
 8019a44:	08019c45 	.word	0x08019c45
 8019a48:	0801a19f 	.word	0x0801a19f
 8019a4c:	0801a19f 	.word	0x0801a19f
 8019a50:	08019cfd 	.word	0x08019cfd
 8019a54:	0801a19f 	.word	0x0801a19f
 8019a58:	0801a19f 	.word	0x0801a19f
 8019a5c:	0801a19f 	.word	0x0801a19f
 8019a60:	08019db9 	.word	0x08019db9
 8019a64:	0801a19f 	.word	0x0801a19f
 8019a68:	0801a19f 	.word	0x0801a19f
 8019a6c:	0801a19f 	.word	0x0801a19f
 8019a70:	0801a19f 	.word	0x0801a19f
 8019a74:	0801a19f 	.word	0x0801a19f
 8019a78:	0801a19f 	.word	0x0801a19f
 8019a7c:	0801a19f 	.word	0x0801a19f
 8019a80:	08019e75 	.word	0x08019e75
 8019a84:	0801a19f 	.word	0x0801a19f
 8019a88:	0801a19f 	.word	0x0801a19f
 8019a8c:	0801a19f 	.word	0x0801a19f
 8019a90:	0801a19f 	.word	0x0801a19f
 8019a94:	0801a19f 	.word	0x0801a19f
 8019a98:	0801a19f 	.word	0x0801a19f
 8019a9c:	0801a19f 	.word	0x0801a19f
 8019aa0:	0801a19f 	.word	0x0801a19f
 8019aa4:	0801a19f 	.word	0x0801a19f
 8019aa8:	0801a19f 	.word	0x0801a19f
 8019aac:	0801a19f 	.word	0x0801a19f
 8019ab0:	0801a19f 	.word	0x0801a19f
 8019ab4:	0801a19f 	.word	0x0801a19f
 8019ab8:	0801a19f 	.word	0x0801a19f
 8019abc:	0801a19f 	.word	0x0801a19f
 8019ac0:	08019fe7 	.word	0x08019fe7
 8019ac4:	0801a19f 	.word	0x0801a19f
 8019ac8:	0801a19f 	.word	0x0801a19f
 8019acc:	0801a19f 	.word	0x0801a19f
 8019ad0:	0801a19f 	.word	0x0801a19f
 8019ad4:	0801a19f 	.word	0x0801a19f
 8019ad8:	0801a19f 	.word	0x0801a19f
 8019adc:	0801a19f 	.word	0x0801a19f
 8019ae0:	0801a19f 	.word	0x0801a19f
 8019ae4:	0801a19f 	.word	0x0801a19f
 8019ae8:	0801a19f 	.word	0x0801a19f
 8019aec:	0801a19f 	.word	0x0801a19f
 8019af0:	0801a19f 	.word	0x0801a19f
 8019af4:	0801a19f 	.word	0x0801a19f
 8019af8:	0801a19f 	.word	0x0801a19f
 8019afc:	0801a19f 	.word	0x0801a19f
 8019b00:	0801a19f 	.word	0x0801a19f
 8019b04:	0801a19f 	.word	0x0801a19f
 8019b08:	0801a19f 	.word	0x0801a19f
 8019b0c:	0801a19f 	.word	0x0801a19f
 8019b10:	0801a19f 	.word	0x0801a19f
 8019b14:	0801a19f 	.word	0x0801a19f
 8019b18:	0801a19f 	.word	0x0801a19f
 8019b1c:	0801a19f 	.word	0x0801a19f
 8019b20:	0801a19f 	.word	0x0801a19f
 8019b24:	0801a19f 	.word	0x0801a19f
 8019b28:	0801a19f 	.word	0x0801a19f
 8019b2c:	0801a19f 	.word	0x0801a19f
 8019b30:	0801a19f 	.word	0x0801a19f
 8019b34:	0801a19f 	.word	0x0801a19f
 8019b38:	0801a19f 	.word	0x0801a19f
 8019b3c:	0801a19f 	.word	0x0801a19f
 8019b40:	0801a0dd 	.word	0x0801a0dd
 8019b44:	f3af 8000 	nop.w
 8019b48:	05161500 	.word	0x05161500
 8019b4c:	00000000 	.word	0x00000000
 8019b50:	0a2c2a00 	.word	0x0a2c2a00
 8019b54:	00000000 	.word	0x00000000
 8019b58:	003d0900 	.word	0x003d0900
 8019b5c:	3d090000 	.word	0x3d090000
 8019b60:	007a1200 	.word	0x007a1200
 8019b64:	00f42400 	.word	0x00f42400
 8019b68:	01e84800 	.word	0x01e84800
 8019b6c:	03d09000 	.word	0x03d09000
 8019b70:	061a8000 	.word	0x061a8000
 8019b74:	07a12000 	.word	0x07a12000
 8019b78:	0f424000 	.word	0x0f424000
 8019b7c:	1e848000 	.word	0x1e848000
 8019b80:	000aaa00 	.word	0x000aaa00
 8019b84:	000ccc00 	.word	0x000ccc00
 8019b88:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8019b8c:	f7fc f874 	bl	8015c78 <HAL_RCC_GetPCLK1Freq>
 8019b90:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b96:	2b00      	cmp	r3, #0
 8019b98:	d044      	beq.n	8019c24 <UART_SetConfig+0x15d4>
 8019b9a:	687b      	ldr	r3, [r7, #4]
 8019b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b9e:	2b01      	cmp	r3, #1
 8019ba0:	d03e      	beq.n	8019c20 <UART_SetConfig+0x15d0>
 8019ba2:	687b      	ldr	r3, [r7, #4]
 8019ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ba6:	2b02      	cmp	r3, #2
 8019ba8:	d038      	beq.n	8019c1c <UART_SetConfig+0x15cc>
 8019baa:	687b      	ldr	r3, [r7, #4]
 8019bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bae:	2b03      	cmp	r3, #3
 8019bb0:	d032      	beq.n	8019c18 <UART_SetConfig+0x15c8>
 8019bb2:	687b      	ldr	r3, [r7, #4]
 8019bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bb6:	2b04      	cmp	r3, #4
 8019bb8:	d02c      	beq.n	8019c14 <UART_SetConfig+0x15c4>
 8019bba:	687b      	ldr	r3, [r7, #4]
 8019bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bbe:	2b05      	cmp	r3, #5
 8019bc0:	d026      	beq.n	8019c10 <UART_SetConfig+0x15c0>
 8019bc2:	687b      	ldr	r3, [r7, #4]
 8019bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bc6:	2b06      	cmp	r3, #6
 8019bc8:	d020      	beq.n	8019c0c <UART_SetConfig+0x15bc>
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bce:	2b07      	cmp	r3, #7
 8019bd0:	d01a      	beq.n	8019c08 <UART_SetConfig+0x15b8>
 8019bd2:	687b      	ldr	r3, [r7, #4]
 8019bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bd6:	2b08      	cmp	r3, #8
 8019bd8:	d014      	beq.n	8019c04 <UART_SetConfig+0x15b4>
 8019bda:	687b      	ldr	r3, [r7, #4]
 8019bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bde:	2b09      	cmp	r3, #9
 8019be0:	d00e      	beq.n	8019c00 <UART_SetConfig+0x15b0>
 8019be2:	687b      	ldr	r3, [r7, #4]
 8019be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019be6:	2b0a      	cmp	r3, #10
 8019be8:	d008      	beq.n	8019bfc <UART_SetConfig+0x15ac>
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bee:	2b0b      	cmp	r3, #11
 8019bf0:	d102      	bne.n	8019bf8 <UART_SetConfig+0x15a8>
 8019bf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019bf6:	e016      	b.n	8019c26 <UART_SetConfig+0x15d6>
 8019bf8:	2301      	movs	r3, #1
 8019bfa:	e014      	b.n	8019c26 <UART_SetConfig+0x15d6>
 8019bfc:	2380      	movs	r3, #128	; 0x80
 8019bfe:	e012      	b.n	8019c26 <UART_SetConfig+0x15d6>
 8019c00:	2340      	movs	r3, #64	; 0x40
 8019c02:	e010      	b.n	8019c26 <UART_SetConfig+0x15d6>
 8019c04:	2320      	movs	r3, #32
 8019c06:	e00e      	b.n	8019c26 <UART_SetConfig+0x15d6>
 8019c08:	2310      	movs	r3, #16
 8019c0a:	e00c      	b.n	8019c26 <UART_SetConfig+0x15d6>
 8019c0c:	230c      	movs	r3, #12
 8019c0e:	e00a      	b.n	8019c26 <UART_SetConfig+0x15d6>
 8019c10:	230a      	movs	r3, #10
 8019c12:	e008      	b.n	8019c26 <UART_SetConfig+0x15d6>
 8019c14:	2308      	movs	r3, #8
 8019c16:	e006      	b.n	8019c26 <UART_SetConfig+0x15d6>
 8019c18:	2306      	movs	r3, #6
 8019c1a:	e004      	b.n	8019c26 <UART_SetConfig+0x15d6>
 8019c1c:	2304      	movs	r3, #4
 8019c1e:	e002      	b.n	8019c26 <UART_SetConfig+0x15d6>
 8019c20:	2302      	movs	r3, #2
 8019c22:	e000      	b.n	8019c26 <UART_SetConfig+0x15d6>
 8019c24:	2301      	movs	r3, #1
 8019c26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8019c2c:	005a      	lsls	r2, r3, #1
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	685b      	ldr	r3, [r3, #4]
 8019c32:	085b      	lsrs	r3, r3, #1
 8019c34:	441a      	add	r2, r3
 8019c36:	687b      	ldr	r3, [r7, #4]
 8019c38:	685b      	ldr	r3, [r3, #4]
 8019c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8019c3e:	b29b      	uxth	r3, r3
 8019c40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8019c42:	e2b0      	b.n	801a1a6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8019c44:	f7fc f82e 	bl	8015ca4 <HAL_RCC_GetPCLK2Freq>
 8019c48:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019c4a:	687b      	ldr	r3, [r7, #4]
 8019c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c4e:	2b00      	cmp	r3, #0
 8019c50:	d044      	beq.n	8019cdc <UART_SetConfig+0x168c>
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c56:	2b01      	cmp	r3, #1
 8019c58:	d03e      	beq.n	8019cd8 <UART_SetConfig+0x1688>
 8019c5a:	687b      	ldr	r3, [r7, #4]
 8019c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c5e:	2b02      	cmp	r3, #2
 8019c60:	d038      	beq.n	8019cd4 <UART_SetConfig+0x1684>
 8019c62:	687b      	ldr	r3, [r7, #4]
 8019c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c66:	2b03      	cmp	r3, #3
 8019c68:	d032      	beq.n	8019cd0 <UART_SetConfig+0x1680>
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c6e:	2b04      	cmp	r3, #4
 8019c70:	d02c      	beq.n	8019ccc <UART_SetConfig+0x167c>
 8019c72:	687b      	ldr	r3, [r7, #4]
 8019c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c76:	2b05      	cmp	r3, #5
 8019c78:	d026      	beq.n	8019cc8 <UART_SetConfig+0x1678>
 8019c7a:	687b      	ldr	r3, [r7, #4]
 8019c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c7e:	2b06      	cmp	r3, #6
 8019c80:	d020      	beq.n	8019cc4 <UART_SetConfig+0x1674>
 8019c82:	687b      	ldr	r3, [r7, #4]
 8019c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c86:	2b07      	cmp	r3, #7
 8019c88:	d01a      	beq.n	8019cc0 <UART_SetConfig+0x1670>
 8019c8a:	687b      	ldr	r3, [r7, #4]
 8019c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c8e:	2b08      	cmp	r3, #8
 8019c90:	d014      	beq.n	8019cbc <UART_SetConfig+0x166c>
 8019c92:	687b      	ldr	r3, [r7, #4]
 8019c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c96:	2b09      	cmp	r3, #9
 8019c98:	d00e      	beq.n	8019cb8 <UART_SetConfig+0x1668>
 8019c9a:	687b      	ldr	r3, [r7, #4]
 8019c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c9e:	2b0a      	cmp	r3, #10
 8019ca0:	d008      	beq.n	8019cb4 <UART_SetConfig+0x1664>
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ca6:	2b0b      	cmp	r3, #11
 8019ca8:	d102      	bne.n	8019cb0 <UART_SetConfig+0x1660>
 8019caa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019cae:	e016      	b.n	8019cde <UART_SetConfig+0x168e>
 8019cb0:	2301      	movs	r3, #1
 8019cb2:	e014      	b.n	8019cde <UART_SetConfig+0x168e>
 8019cb4:	2380      	movs	r3, #128	; 0x80
 8019cb6:	e012      	b.n	8019cde <UART_SetConfig+0x168e>
 8019cb8:	2340      	movs	r3, #64	; 0x40
 8019cba:	e010      	b.n	8019cde <UART_SetConfig+0x168e>
 8019cbc:	2320      	movs	r3, #32
 8019cbe:	e00e      	b.n	8019cde <UART_SetConfig+0x168e>
 8019cc0:	2310      	movs	r3, #16
 8019cc2:	e00c      	b.n	8019cde <UART_SetConfig+0x168e>
 8019cc4:	230c      	movs	r3, #12
 8019cc6:	e00a      	b.n	8019cde <UART_SetConfig+0x168e>
 8019cc8:	230a      	movs	r3, #10
 8019cca:	e008      	b.n	8019cde <UART_SetConfig+0x168e>
 8019ccc:	2308      	movs	r3, #8
 8019cce:	e006      	b.n	8019cde <UART_SetConfig+0x168e>
 8019cd0:	2306      	movs	r3, #6
 8019cd2:	e004      	b.n	8019cde <UART_SetConfig+0x168e>
 8019cd4:	2304      	movs	r3, #4
 8019cd6:	e002      	b.n	8019cde <UART_SetConfig+0x168e>
 8019cd8:	2302      	movs	r3, #2
 8019cda:	e000      	b.n	8019cde <UART_SetConfig+0x168e>
 8019cdc:	2301      	movs	r3, #1
 8019cde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8019ce4:	005a      	lsls	r2, r3, #1
 8019ce6:	687b      	ldr	r3, [r7, #4]
 8019ce8:	685b      	ldr	r3, [r3, #4]
 8019cea:	085b      	lsrs	r3, r3, #1
 8019cec:	441a      	add	r2, r3
 8019cee:	687b      	ldr	r3, [r7, #4]
 8019cf0:	685b      	ldr	r3, [r3, #4]
 8019cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8019cf6:	b29b      	uxth	r3, r3
 8019cf8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8019cfa:	e254      	b.n	801a1a6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8019cfc:	f107 0318 	add.w	r3, r7, #24
 8019d00:	4618      	mov	r0, r3
 8019d02:	f7fc fed9 	bl	8016ab8 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019d06:	69fa      	ldr	r2, [r7, #28]
 8019d08:	687b      	ldr	r3, [r7, #4]
 8019d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d0c:	2b00      	cmp	r3, #0
 8019d0e:	d044      	beq.n	8019d9a <UART_SetConfig+0x174a>
 8019d10:	687b      	ldr	r3, [r7, #4]
 8019d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d14:	2b01      	cmp	r3, #1
 8019d16:	d03e      	beq.n	8019d96 <UART_SetConfig+0x1746>
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d1c:	2b02      	cmp	r3, #2
 8019d1e:	d038      	beq.n	8019d92 <UART_SetConfig+0x1742>
 8019d20:	687b      	ldr	r3, [r7, #4]
 8019d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d24:	2b03      	cmp	r3, #3
 8019d26:	d032      	beq.n	8019d8e <UART_SetConfig+0x173e>
 8019d28:	687b      	ldr	r3, [r7, #4]
 8019d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d2c:	2b04      	cmp	r3, #4
 8019d2e:	d02c      	beq.n	8019d8a <UART_SetConfig+0x173a>
 8019d30:	687b      	ldr	r3, [r7, #4]
 8019d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d34:	2b05      	cmp	r3, #5
 8019d36:	d026      	beq.n	8019d86 <UART_SetConfig+0x1736>
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d3c:	2b06      	cmp	r3, #6
 8019d3e:	d020      	beq.n	8019d82 <UART_SetConfig+0x1732>
 8019d40:	687b      	ldr	r3, [r7, #4]
 8019d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d44:	2b07      	cmp	r3, #7
 8019d46:	d01a      	beq.n	8019d7e <UART_SetConfig+0x172e>
 8019d48:	687b      	ldr	r3, [r7, #4]
 8019d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d4c:	2b08      	cmp	r3, #8
 8019d4e:	d014      	beq.n	8019d7a <UART_SetConfig+0x172a>
 8019d50:	687b      	ldr	r3, [r7, #4]
 8019d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d54:	2b09      	cmp	r3, #9
 8019d56:	d00e      	beq.n	8019d76 <UART_SetConfig+0x1726>
 8019d58:	687b      	ldr	r3, [r7, #4]
 8019d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d5c:	2b0a      	cmp	r3, #10
 8019d5e:	d008      	beq.n	8019d72 <UART_SetConfig+0x1722>
 8019d60:	687b      	ldr	r3, [r7, #4]
 8019d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d64:	2b0b      	cmp	r3, #11
 8019d66:	d102      	bne.n	8019d6e <UART_SetConfig+0x171e>
 8019d68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019d6c:	e016      	b.n	8019d9c <UART_SetConfig+0x174c>
 8019d6e:	2301      	movs	r3, #1
 8019d70:	e014      	b.n	8019d9c <UART_SetConfig+0x174c>
 8019d72:	2380      	movs	r3, #128	; 0x80
 8019d74:	e012      	b.n	8019d9c <UART_SetConfig+0x174c>
 8019d76:	2340      	movs	r3, #64	; 0x40
 8019d78:	e010      	b.n	8019d9c <UART_SetConfig+0x174c>
 8019d7a:	2320      	movs	r3, #32
 8019d7c:	e00e      	b.n	8019d9c <UART_SetConfig+0x174c>
 8019d7e:	2310      	movs	r3, #16
 8019d80:	e00c      	b.n	8019d9c <UART_SetConfig+0x174c>
 8019d82:	230c      	movs	r3, #12
 8019d84:	e00a      	b.n	8019d9c <UART_SetConfig+0x174c>
 8019d86:	230a      	movs	r3, #10
 8019d88:	e008      	b.n	8019d9c <UART_SetConfig+0x174c>
 8019d8a:	2308      	movs	r3, #8
 8019d8c:	e006      	b.n	8019d9c <UART_SetConfig+0x174c>
 8019d8e:	2306      	movs	r3, #6
 8019d90:	e004      	b.n	8019d9c <UART_SetConfig+0x174c>
 8019d92:	2304      	movs	r3, #4
 8019d94:	e002      	b.n	8019d9c <UART_SetConfig+0x174c>
 8019d96:	2302      	movs	r3, #2
 8019d98:	e000      	b.n	8019d9c <UART_SetConfig+0x174c>
 8019d9a:	2301      	movs	r3, #1
 8019d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8019da0:	005a      	lsls	r2, r3, #1
 8019da2:	687b      	ldr	r3, [r7, #4]
 8019da4:	685b      	ldr	r3, [r3, #4]
 8019da6:	085b      	lsrs	r3, r3, #1
 8019da8:	441a      	add	r2, r3
 8019daa:	687b      	ldr	r3, [r7, #4]
 8019dac:	685b      	ldr	r3, [r3, #4]
 8019dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8019db2:	b29b      	uxth	r3, r3
 8019db4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8019db6:	e1f6      	b.n	801a1a6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8019db8:	f107 030c 	add.w	r3, r7, #12
 8019dbc:	4618      	mov	r0, r3
 8019dbe:	f7fc ffc7 	bl	8016d50 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019dc2:	693a      	ldr	r2, [r7, #16]
 8019dc4:	687b      	ldr	r3, [r7, #4]
 8019dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019dc8:	2b00      	cmp	r3, #0
 8019dca:	d044      	beq.n	8019e56 <UART_SetConfig+0x1806>
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019dd0:	2b01      	cmp	r3, #1
 8019dd2:	d03e      	beq.n	8019e52 <UART_SetConfig+0x1802>
 8019dd4:	687b      	ldr	r3, [r7, #4]
 8019dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019dd8:	2b02      	cmp	r3, #2
 8019dda:	d038      	beq.n	8019e4e <UART_SetConfig+0x17fe>
 8019ddc:	687b      	ldr	r3, [r7, #4]
 8019dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019de0:	2b03      	cmp	r3, #3
 8019de2:	d032      	beq.n	8019e4a <UART_SetConfig+0x17fa>
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019de8:	2b04      	cmp	r3, #4
 8019dea:	d02c      	beq.n	8019e46 <UART_SetConfig+0x17f6>
 8019dec:	687b      	ldr	r3, [r7, #4]
 8019dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019df0:	2b05      	cmp	r3, #5
 8019df2:	d026      	beq.n	8019e42 <UART_SetConfig+0x17f2>
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019df8:	2b06      	cmp	r3, #6
 8019dfa:	d020      	beq.n	8019e3e <UART_SetConfig+0x17ee>
 8019dfc:	687b      	ldr	r3, [r7, #4]
 8019dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e00:	2b07      	cmp	r3, #7
 8019e02:	d01a      	beq.n	8019e3a <UART_SetConfig+0x17ea>
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e08:	2b08      	cmp	r3, #8
 8019e0a:	d014      	beq.n	8019e36 <UART_SetConfig+0x17e6>
 8019e0c:	687b      	ldr	r3, [r7, #4]
 8019e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e10:	2b09      	cmp	r3, #9
 8019e12:	d00e      	beq.n	8019e32 <UART_SetConfig+0x17e2>
 8019e14:	687b      	ldr	r3, [r7, #4]
 8019e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e18:	2b0a      	cmp	r3, #10
 8019e1a:	d008      	beq.n	8019e2e <UART_SetConfig+0x17de>
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e20:	2b0b      	cmp	r3, #11
 8019e22:	d102      	bne.n	8019e2a <UART_SetConfig+0x17da>
 8019e24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019e28:	e016      	b.n	8019e58 <UART_SetConfig+0x1808>
 8019e2a:	2301      	movs	r3, #1
 8019e2c:	e014      	b.n	8019e58 <UART_SetConfig+0x1808>
 8019e2e:	2380      	movs	r3, #128	; 0x80
 8019e30:	e012      	b.n	8019e58 <UART_SetConfig+0x1808>
 8019e32:	2340      	movs	r3, #64	; 0x40
 8019e34:	e010      	b.n	8019e58 <UART_SetConfig+0x1808>
 8019e36:	2320      	movs	r3, #32
 8019e38:	e00e      	b.n	8019e58 <UART_SetConfig+0x1808>
 8019e3a:	2310      	movs	r3, #16
 8019e3c:	e00c      	b.n	8019e58 <UART_SetConfig+0x1808>
 8019e3e:	230c      	movs	r3, #12
 8019e40:	e00a      	b.n	8019e58 <UART_SetConfig+0x1808>
 8019e42:	230a      	movs	r3, #10
 8019e44:	e008      	b.n	8019e58 <UART_SetConfig+0x1808>
 8019e46:	2308      	movs	r3, #8
 8019e48:	e006      	b.n	8019e58 <UART_SetConfig+0x1808>
 8019e4a:	2306      	movs	r3, #6
 8019e4c:	e004      	b.n	8019e58 <UART_SetConfig+0x1808>
 8019e4e:	2304      	movs	r3, #4
 8019e50:	e002      	b.n	8019e58 <UART_SetConfig+0x1808>
 8019e52:	2302      	movs	r3, #2
 8019e54:	e000      	b.n	8019e58 <UART_SetConfig+0x1808>
 8019e56:	2301      	movs	r3, #1
 8019e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8019e5c:	005a      	lsls	r2, r3, #1
 8019e5e:	687b      	ldr	r3, [r7, #4]
 8019e60:	685b      	ldr	r3, [r3, #4]
 8019e62:	085b      	lsrs	r3, r3, #1
 8019e64:	441a      	add	r2, r3
 8019e66:	687b      	ldr	r3, [r7, #4]
 8019e68:	685b      	ldr	r3, [r3, #4]
 8019e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8019e6e:	b29b      	uxth	r3, r3
 8019e70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8019e72:	e198      	b.n	801a1a6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8019e74:	4b87      	ldr	r3, [pc, #540]	; (801a094 <UART_SetConfig+0x1a44>)
 8019e76:	681b      	ldr	r3, [r3, #0]
 8019e78:	f003 0320 	and.w	r3, r3, #32
 8019e7c:	2b00      	cmp	r3, #0
 8019e7e:	d05e      	beq.n	8019f3e <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019e80:	4b84      	ldr	r3, [pc, #528]	; (801a094 <UART_SetConfig+0x1a44>)
 8019e82:	681b      	ldr	r3, [r3, #0]
 8019e84:	08db      	lsrs	r3, r3, #3
 8019e86:	f003 0303 	and.w	r3, r3, #3
 8019e8a:	4a83      	ldr	r2, [pc, #524]	; (801a098 <UART_SetConfig+0x1a48>)
 8019e8c:	40da      	lsrs	r2, r3
 8019e8e:	687b      	ldr	r3, [r7, #4]
 8019e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e92:	2b00      	cmp	r3, #0
 8019e94:	d044      	beq.n	8019f20 <UART_SetConfig+0x18d0>
 8019e96:	687b      	ldr	r3, [r7, #4]
 8019e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e9a:	2b01      	cmp	r3, #1
 8019e9c:	d03e      	beq.n	8019f1c <UART_SetConfig+0x18cc>
 8019e9e:	687b      	ldr	r3, [r7, #4]
 8019ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ea2:	2b02      	cmp	r3, #2
 8019ea4:	d038      	beq.n	8019f18 <UART_SetConfig+0x18c8>
 8019ea6:	687b      	ldr	r3, [r7, #4]
 8019ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019eaa:	2b03      	cmp	r3, #3
 8019eac:	d032      	beq.n	8019f14 <UART_SetConfig+0x18c4>
 8019eae:	687b      	ldr	r3, [r7, #4]
 8019eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019eb2:	2b04      	cmp	r3, #4
 8019eb4:	d02c      	beq.n	8019f10 <UART_SetConfig+0x18c0>
 8019eb6:	687b      	ldr	r3, [r7, #4]
 8019eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019eba:	2b05      	cmp	r3, #5
 8019ebc:	d026      	beq.n	8019f0c <UART_SetConfig+0x18bc>
 8019ebe:	687b      	ldr	r3, [r7, #4]
 8019ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ec2:	2b06      	cmp	r3, #6
 8019ec4:	d020      	beq.n	8019f08 <UART_SetConfig+0x18b8>
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019eca:	2b07      	cmp	r3, #7
 8019ecc:	d01a      	beq.n	8019f04 <UART_SetConfig+0x18b4>
 8019ece:	687b      	ldr	r3, [r7, #4]
 8019ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ed2:	2b08      	cmp	r3, #8
 8019ed4:	d014      	beq.n	8019f00 <UART_SetConfig+0x18b0>
 8019ed6:	687b      	ldr	r3, [r7, #4]
 8019ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019eda:	2b09      	cmp	r3, #9
 8019edc:	d00e      	beq.n	8019efc <UART_SetConfig+0x18ac>
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ee2:	2b0a      	cmp	r3, #10
 8019ee4:	d008      	beq.n	8019ef8 <UART_SetConfig+0x18a8>
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019eea:	2b0b      	cmp	r3, #11
 8019eec:	d102      	bne.n	8019ef4 <UART_SetConfig+0x18a4>
 8019eee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019ef2:	e016      	b.n	8019f22 <UART_SetConfig+0x18d2>
 8019ef4:	2301      	movs	r3, #1
 8019ef6:	e014      	b.n	8019f22 <UART_SetConfig+0x18d2>
 8019ef8:	2380      	movs	r3, #128	; 0x80
 8019efa:	e012      	b.n	8019f22 <UART_SetConfig+0x18d2>
 8019efc:	2340      	movs	r3, #64	; 0x40
 8019efe:	e010      	b.n	8019f22 <UART_SetConfig+0x18d2>
 8019f00:	2320      	movs	r3, #32
 8019f02:	e00e      	b.n	8019f22 <UART_SetConfig+0x18d2>
 8019f04:	2310      	movs	r3, #16
 8019f06:	e00c      	b.n	8019f22 <UART_SetConfig+0x18d2>
 8019f08:	230c      	movs	r3, #12
 8019f0a:	e00a      	b.n	8019f22 <UART_SetConfig+0x18d2>
 8019f0c:	230a      	movs	r3, #10
 8019f0e:	e008      	b.n	8019f22 <UART_SetConfig+0x18d2>
 8019f10:	2308      	movs	r3, #8
 8019f12:	e006      	b.n	8019f22 <UART_SetConfig+0x18d2>
 8019f14:	2306      	movs	r3, #6
 8019f16:	e004      	b.n	8019f22 <UART_SetConfig+0x18d2>
 8019f18:	2304      	movs	r3, #4
 8019f1a:	e002      	b.n	8019f22 <UART_SetConfig+0x18d2>
 8019f1c:	2302      	movs	r3, #2
 8019f1e:	e000      	b.n	8019f22 <UART_SetConfig+0x18d2>
 8019f20:	2301      	movs	r3, #1
 8019f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8019f26:	005a      	lsls	r2, r3, #1
 8019f28:	687b      	ldr	r3, [r7, #4]
 8019f2a:	685b      	ldr	r3, [r3, #4]
 8019f2c:	085b      	lsrs	r3, r3, #1
 8019f2e:	441a      	add	r2, r3
 8019f30:	687b      	ldr	r3, [r7, #4]
 8019f32:	685b      	ldr	r3, [r3, #4]
 8019f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8019f38:	b29b      	uxth	r3, r3
 8019f3a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8019f3c:	e133      	b.n	801a1a6 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019f3e:	687b      	ldr	r3, [r7, #4]
 8019f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f42:	2b00      	cmp	r3, #0
 8019f44:	d043      	beq.n	8019fce <UART_SetConfig+0x197e>
 8019f46:	687b      	ldr	r3, [r7, #4]
 8019f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f4a:	2b01      	cmp	r3, #1
 8019f4c:	d03d      	beq.n	8019fca <UART_SetConfig+0x197a>
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f52:	2b02      	cmp	r3, #2
 8019f54:	d037      	beq.n	8019fc6 <UART_SetConfig+0x1976>
 8019f56:	687b      	ldr	r3, [r7, #4]
 8019f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f5a:	2b03      	cmp	r3, #3
 8019f5c:	d031      	beq.n	8019fc2 <UART_SetConfig+0x1972>
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f62:	2b04      	cmp	r3, #4
 8019f64:	d02b      	beq.n	8019fbe <UART_SetConfig+0x196e>
 8019f66:	687b      	ldr	r3, [r7, #4]
 8019f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f6a:	2b05      	cmp	r3, #5
 8019f6c:	d025      	beq.n	8019fba <UART_SetConfig+0x196a>
 8019f6e:	687b      	ldr	r3, [r7, #4]
 8019f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f72:	2b06      	cmp	r3, #6
 8019f74:	d01f      	beq.n	8019fb6 <UART_SetConfig+0x1966>
 8019f76:	687b      	ldr	r3, [r7, #4]
 8019f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f7a:	2b07      	cmp	r3, #7
 8019f7c:	d019      	beq.n	8019fb2 <UART_SetConfig+0x1962>
 8019f7e:	687b      	ldr	r3, [r7, #4]
 8019f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f82:	2b08      	cmp	r3, #8
 8019f84:	d013      	beq.n	8019fae <UART_SetConfig+0x195e>
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f8a:	2b09      	cmp	r3, #9
 8019f8c:	d00d      	beq.n	8019faa <UART_SetConfig+0x195a>
 8019f8e:	687b      	ldr	r3, [r7, #4]
 8019f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f92:	2b0a      	cmp	r3, #10
 8019f94:	d007      	beq.n	8019fa6 <UART_SetConfig+0x1956>
 8019f96:	687b      	ldr	r3, [r7, #4]
 8019f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f9a:	2b0b      	cmp	r3, #11
 8019f9c:	d101      	bne.n	8019fa2 <UART_SetConfig+0x1952>
 8019f9e:	4b3f      	ldr	r3, [pc, #252]	; (801a09c <UART_SetConfig+0x1a4c>)
 8019fa0:	e016      	b.n	8019fd0 <UART_SetConfig+0x1980>
 8019fa2:	4b3f      	ldr	r3, [pc, #252]	; (801a0a0 <UART_SetConfig+0x1a50>)
 8019fa4:	e014      	b.n	8019fd0 <UART_SetConfig+0x1980>
 8019fa6:	4b3f      	ldr	r3, [pc, #252]	; (801a0a4 <UART_SetConfig+0x1a54>)
 8019fa8:	e012      	b.n	8019fd0 <UART_SetConfig+0x1980>
 8019faa:	4b3f      	ldr	r3, [pc, #252]	; (801a0a8 <UART_SetConfig+0x1a58>)
 8019fac:	e010      	b.n	8019fd0 <UART_SetConfig+0x1980>
 8019fae:	4b3f      	ldr	r3, [pc, #252]	; (801a0ac <UART_SetConfig+0x1a5c>)
 8019fb0:	e00e      	b.n	8019fd0 <UART_SetConfig+0x1980>
 8019fb2:	4b3f      	ldr	r3, [pc, #252]	; (801a0b0 <UART_SetConfig+0x1a60>)
 8019fb4:	e00c      	b.n	8019fd0 <UART_SetConfig+0x1980>
 8019fb6:	4b3f      	ldr	r3, [pc, #252]	; (801a0b4 <UART_SetConfig+0x1a64>)
 8019fb8:	e00a      	b.n	8019fd0 <UART_SetConfig+0x1980>
 8019fba:	4b3f      	ldr	r3, [pc, #252]	; (801a0b8 <UART_SetConfig+0x1a68>)
 8019fbc:	e008      	b.n	8019fd0 <UART_SetConfig+0x1980>
 8019fbe:	4b3f      	ldr	r3, [pc, #252]	; (801a0bc <UART_SetConfig+0x1a6c>)
 8019fc0:	e006      	b.n	8019fd0 <UART_SetConfig+0x1980>
 8019fc2:	4b3f      	ldr	r3, [pc, #252]	; (801a0c0 <UART_SetConfig+0x1a70>)
 8019fc4:	e004      	b.n	8019fd0 <UART_SetConfig+0x1980>
 8019fc6:	4b3f      	ldr	r3, [pc, #252]	; (801a0c4 <UART_SetConfig+0x1a74>)
 8019fc8:	e002      	b.n	8019fd0 <UART_SetConfig+0x1980>
 8019fca:	4b33      	ldr	r3, [pc, #204]	; (801a098 <UART_SetConfig+0x1a48>)
 8019fcc:	e000      	b.n	8019fd0 <UART_SetConfig+0x1980>
 8019fce:	4b34      	ldr	r3, [pc, #208]	; (801a0a0 <UART_SetConfig+0x1a50>)
 8019fd0:	687a      	ldr	r2, [r7, #4]
 8019fd2:	6852      	ldr	r2, [r2, #4]
 8019fd4:	0852      	lsrs	r2, r2, #1
 8019fd6:	441a      	add	r2, r3
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	685b      	ldr	r3, [r3, #4]
 8019fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8019fe0:	b29b      	uxth	r3, r3
 8019fe2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8019fe4:	e0df      	b.n	801a1a6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019fe6:	687b      	ldr	r3, [r7, #4]
 8019fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fea:	2b00      	cmp	r3, #0
 8019fec:	d045      	beq.n	801a07a <UART_SetConfig+0x1a2a>
 8019fee:	687b      	ldr	r3, [r7, #4]
 8019ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ff2:	2b01      	cmp	r3, #1
 8019ff4:	d03f      	beq.n	801a076 <UART_SetConfig+0x1a26>
 8019ff6:	687b      	ldr	r3, [r7, #4]
 8019ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ffa:	2b02      	cmp	r3, #2
 8019ffc:	d039      	beq.n	801a072 <UART_SetConfig+0x1a22>
 8019ffe:	687b      	ldr	r3, [r7, #4]
 801a000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a002:	2b03      	cmp	r3, #3
 801a004:	d033      	beq.n	801a06e <UART_SetConfig+0x1a1e>
 801a006:	687b      	ldr	r3, [r7, #4]
 801a008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a00a:	2b04      	cmp	r3, #4
 801a00c:	d02d      	beq.n	801a06a <UART_SetConfig+0x1a1a>
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a012:	2b05      	cmp	r3, #5
 801a014:	d027      	beq.n	801a066 <UART_SetConfig+0x1a16>
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a01a:	2b06      	cmp	r3, #6
 801a01c:	d021      	beq.n	801a062 <UART_SetConfig+0x1a12>
 801a01e:	687b      	ldr	r3, [r7, #4]
 801a020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a022:	2b07      	cmp	r3, #7
 801a024:	d01b      	beq.n	801a05e <UART_SetConfig+0x1a0e>
 801a026:	687b      	ldr	r3, [r7, #4]
 801a028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a02a:	2b08      	cmp	r3, #8
 801a02c:	d015      	beq.n	801a05a <UART_SetConfig+0x1a0a>
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a032:	2b09      	cmp	r3, #9
 801a034:	d00f      	beq.n	801a056 <UART_SetConfig+0x1a06>
 801a036:	687b      	ldr	r3, [r7, #4]
 801a038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a03a:	2b0a      	cmp	r3, #10
 801a03c:	d008      	beq.n	801a050 <UART_SetConfig+0x1a00>
 801a03e:	687b      	ldr	r3, [r7, #4]
 801a040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a042:	2b0b      	cmp	r3, #11
 801a044:	d102      	bne.n	801a04c <UART_SetConfig+0x19fc>
 801a046:	f647 2312 	movw	r3, #31250	; 0x7a12
 801a04a:	e017      	b.n	801a07c <UART_SetConfig+0x1a2c>
 801a04c:	4b18      	ldr	r3, [pc, #96]	; (801a0b0 <UART_SetConfig+0x1a60>)
 801a04e:	e015      	b.n	801a07c <UART_SetConfig+0x1a2c>
 801a050:	f24f 4324 	movw	r3, #62500	; 0xf424
 801a054:	e012      	b.n	801a07c <UART_SetConfig+0x1a2c>
 801a056:	4b1c      	ldr	r3, [pc, #112]	; (801a0c8 <UART_SetConfig+0x1a78>)
 801a058:	e010      	b.n	801a07c <UART_SetConfig+0x1a2c>
 801a05a:	4b1c      	ldr	r3, [pc, #112]	; (801a0cc <UART_SetConfig+0x1a7c>)
 801a05c:	e00e      	b.n	801a07c <UART_SetConfig+0x1a2c>
 801a05e:	4b0f      	ldr	r3, [pc, #60]	; (801a09c <UART_SetConfig+0x1a4c>)
 801a060:	e00c      	b.n	801a07c <UART_SetConfig+0x1a2c>
 801a062:	4b1b      	ldr	r3, [pc, #108]	; (801a0d0 <UART_SetConfig+0x1a80>)
 801a064:	e00a      	b.n	801a07c <UART_SetConfig+0x1a2c>
 801a066:	4b1b      	ldr	r3, [pc, #108]	; (801a0d4 <UART_SetConfig+0x1a84>)
 801a068:	e008      	b.n	801a07c <UART_SetConfig+0x1a2c>
 801a06a:	4b0e      	ldr	r3, [pc, #56]	; (801a0a4 <UART_SetConfig+0x1a54>)
 801a06c:	e006      	b.n	801a07c <UART_SetConfig+0x1a2c>
 801a06e:	4b1a      	ldr	r3, [pc, #104]	; (801a0d8 <UART_SetConfig+0x1a88>)
 801a070:	e004      	b.n	801a07c <UART_SetConfig+0x1a2c>
 801a072:	4b0d      	ldr	r3, [pc, #52]	; (801a0a8 <UART_SetConfig+0x1a58>)
 801a074:	e002      	b.n	801a07c <UART_SetConfig+0x1a2c>
 801a076:	4b0d      	ldr	r3, [pc, #52]	; (801a0ac <UART_SetConfig+0x1a5c>)
 801a078:	e000      	b.n	801a07c <UART_SetConfig+0x1a2c>
 801a07a:	4b0d      	ldr	r3, [pc, #52]	; (801a0b0 <UART_SetConfig+0x1a60>)
 801a07c:	687a      	ldr	r2, [r7, #4]
 801a07e:	6852      	ldr	r2, [r2, #4]
 801a080:	0852      	lsrs	r2, r2, #1
 801a082:	441a      	add	r2, r3
 801a084:	687b      	ldr	r3, [r7, #4]
 801a086:	685b      	ldr	r3, [r3, #4]
 801a088:	fbb2 f3f3 	udiv	r3, r2, r3
 801a08c:	b29b      	uxth	r3, r3
 801a08e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801a090:	e089      	b.n	801a1a6 <UART_SetConfig+0x1b56>
 801a092:	bf00      	nop
 801a094:	58024400 	.word	0x58024400
 801a098:	03d09000 	.word	0x03d09000
 801a09c:	0007a120 	.word	0x0007a120
 801a0a0:	07a12000 	.word	0x07a12000
 801a0a4:	000f4240 	.word	0x000f4240
 801a0a8:	001e8480 	.word	0x001e8480
 801a0ac:	003d0900 	.word	0x003d0900
 801a0b0:	007a1200 	.word	0x007a1200
 801a0b4:	00a2c2aa 	.word	0x00a2c2aa
 801a0b8:	00c35000 	.word	0x00c35000
 801a0bc:	00f42400 	.word	0x00f42400
 801a0c0:	01458554 	.word	0x01458554
 801a0c4:	01e84800 	.word	0x01e84800
 801a0c8:	0001e848 	.word	0x0001e848
 801a0cc:	0003d090 	.word	0x0003d090
 801a0d0:	000a2c2a 	.word	0x000a2c2a
 801a0d4:	000c3500 	.word	0x000c3500
 801a0d8:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a0dc:	687b      	ldr	r3, [r7, #4]
 801a0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0e0:	2b00      	cmp	r3, #0
 801a0e2:	d04f      	beq.n	801a184 <UART_SetConfig+0x1b34>
 801a0e4:	687b      	ldr	r3, [r7, #4]
 801a0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0e8:	2b01      	cmp	r3, #1
 801a0ea:	d048      	beq.n	801a17e <UART_SetConfig+0x1b2e>
 801a0ec:	687b      	ldr	r3, [r7, #4]
 801a0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0f0:	2b02      	cmp	r3, #2
 801a0f2:	d041      	beq.n	801a178 <UART_SetConfig+0x1b28>
 801a0f4:	687b      	ldr	r3, [r7, #4]
 801a0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0f8:	2b03      	cmp	r3, #3
 801a0fa:	d03a      	beq.n	801a172 <UART_SetConfig+0x1b22>
 801a0fc:	687b      	ldr	r3, [r7, #4]
 801a0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a100:	2b04      	cmp	r3, #4
 801a102:	d033      	beq.n	801a16c <UART_SetConfig+0x1b1c>
 801a104:	687b      	ldr	r3, [r7, #4]
 801a106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a108:	2b05      	cmp	r3, #5
 801a10a:	d02c      	beq.n	801a166 <UART_SetConfig+0x1b16>
 801a10c:	687b      	ldr	r3, [r7, #4]
 801a10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a110:	2b06      	cmp	r3, #6
 801a112:	d025      	beq.n	801a160 <UART_SetConfig+0x1b10>
 801a114:	687b      	ldr	r3, [r7, #4]
 801a116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a118:	2b07      	cmp	r3, #7
 801a11a:	d01e      	beq.n	801a15a <UART_SetConfig+0x1b0a>
 801a11c:	687b      	ldr	r3, [r7, #4]
 801a11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a120:	2b08      	cmp	r3, #8
 801a122:	d017      	beq.n	801a154 <UART_SetConfig+0x1b04>
 801a124:	687b      	ldr	r3, [r7, #4]
 801a126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a128:	2b09      	cmp	r3, #9
 801a12a:	d010      	beq.n	801a14e <UART_SetConfig+0x1afe>
 801a12c:	687b      	ldr	r3, [r7, #4]
 801a12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a130:	2b0a      	cmp	r3, #10
 801a132:	d009      	beq.n	801a148 <UART_SetConfig+0x1af8>
 801a134:	687b      	ldr	r3, [r7, #4]
 801a136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a138:	2b0b      	cmp	r3, #11
 801a13a:	d102      	bne.n	801a142 <UART_SetConfig+0x1af2>
 801a13c:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a140:	e022      	b.n	801a188 <UART_SetConfig+0x1b38>
 801a142:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801a146:	e01f      	b.n	801a188 <UART_SetConfig+0x1b38>
 801a148:	f44f 7300 	mov.w	r3, #512	; 0x200
 801a14c:	e01c      	b.n	801a188 <UART_SetConfig+0x1b38>
 801a14e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a152:	e019      	b.n	801a188 <UART_SetConfig+0x1b38>
 801a154:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a158:	e016      	b.n	801a188 <UART_SetConfig+0x1b38>
 801a15a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a15e:	e013      	b.n	801a188 <UART_SetConfig+0x1b38>
 801a160:	f241 5354 	movw	r3, #5460	; 0x1554
 801a164:	e010      	b.n	801a188 <UART_SetConfig+0x1b38>
 801a166:	f641 1398 	movw	r3, #6552	; 0x1998
 801a16a:	e00d      	b.n	801a188 <UART_SetConfig+0x1b38>
 801a16c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801a170:	e00a      	b.n	801a188 <UART_SetConfig+0x1b38>
 801a172:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 801a176:	e007      	b.n	801a188 <UART_SetConfig+0x1b38>
 801a178:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801a17c:	e004      	b.n	801a188 <UART_SetConfig+0x1b38>
 801a17e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a182:	e001      	b.n	801a188 <UART_SetConfig+0x1b38>
 801a184:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801a188:	687a      	ldr	r2, [r7, #4]
 801a18a:	6852      	ldr	r2, [r2, #4]
 801a18c:	0852      	lsrs	r2, r2, #1
 801a18e:	441a      	add	r2, r3
 801a190:	687b      	ldr	r3, [r7, #4]
 801a192:	685b      	ldr	r3, [r3, #4]
 801a194:	fbb2 f3f3 	udiv	r3, r2, r3
 801a198:	b29b      	uxth	r3, r3
 801a19a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801a19c:	e003      	b.n	801a1a6 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 801a19e:	2301      	movs	r3, #1
 801a1a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 801a1a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801a1a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a1a8:	2b0f      	cmp	r3, #15
 801a1aa:	d916      	bls.n	801a1da <UART_SetConfig+0x1b8a>
 801a1ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a1ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a1b2:	d212      	bcs.n	801a1da <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801a1b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a1b6:	b29b      	uxth	r3, r3
 801a1b8:	f023 030f 	bic.w	r3, r3, #15
 801a1bc:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801a1be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a1c0:	085b      	lsrs	r3, r3, #1
 801a1c2:	b29b      	uxth	r3, r3
 801a1c4:	f003 0307 	and.w	r3, r3, #7
 801a1c8:	b29a      	uxth	r2, r3
 801a1ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801a1cc:	4313      	orrs	r3, r2
 801a1ce:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	681b      	ldr	r3, [r3, #0]
 801a1d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a1d6:	60da      	str	r2, [r3, #12]
 801a1d8:	e3a3      	b.n	801a922 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 801a1da:	2301      	movs	r3, #1
 801a1dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801a1e0:	e39f      	b.n	801a922 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 801a1e2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801a1e6:	2b40      	cmp	r3, #64	; 0x40
 801a1e8:	f200 8388 	bhi.w	801a8fc <UART_SetConfig+0x22ac>
 801a1ec:	a201      	add	r2, pc, #4	; (adr r2, 801a1f4 <UART_SetConfig+0x1ba4>)
 801a1ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a1f2:	bf00      	nop
 801a1f4:	0801a2f9 	.word	0x0801a2f9
 801a1f8:	0801a3af 	.word	0x0801a3af
 801a1fc:	0801a8fd 	.word	0x0801a8fd
 801a200:	0801a8fd 	.word	0x0801a8fd
 801a204:	0801a465 	.word	0x0801a465
 801a208:	0801a8fd 	.word	0x0801a8fd
 801a20c:	0801a8fd 	.word	0x0801a8fd
 801a210:	0801a8fd 	.word	0x0801a8fd
 801a214:	0801a51f 	.word	0x0801a51f
 801a218:	0801a8fd 	.word	0x0801a8fd
 801a21c:	0801a8fd 	.word	0x0801a8fd
 801a220:	0801a8fd 	.word	0x0801a8fd
 801a224:	0801a8fd 	.word	0x0801a8fd
 801a228:	0801a8fd 	.word	0x0801a8fd
 801a22c:	0801a8fd 	.word	0x0801a8fd
 801a230:	0801a8fd 	.word	0x0801a8fd
 801a234:	0801a5d9 	.word	0x0801a5d9
 801a238:	0801a8fd 	.word	0x0801a8fd
 801a23c:	0801a8fd 	.word	0x0801a8fd
 801a240:	0801a8fd 	.word	0x0801a8fd
 801a244:	0801a8fd 	.word	0x0801a8fd
 801a248:	0801a8fd 	.word	0x0801a8fd
 801a24c:	0801a8fd 	.word	0x0801a8fd
 801a250:	0801a8fd 	.word	0x0801a8fd
 801a254:	0801a8fd 	.word	0x0801a8fd
 801a258:	0801a8fd 	.word	0x0801a8fd
 801a25c:	0801a8fd 	.word	0x0801a8fd
 801a260:	0801a8fd 	.word	0x0801a8fd
 801a264:	0801a8fd 	.word	0x0801a8fd
 801a268:	0801a8fd 	.word	0x0801a8fd
 801a26c:	0801a8fd 	.word	0x0801a8fd
 801a270:	0801a8fd 	.word	0x0801a8fd
 801a274:	0801a749 	.word	0x0801a749
 801a278:	0801a8fd 	.word	0x0801a8fd
 801a27c:	0801a8fd 	.word	0x0801a8fd
 801a280:	0801a8fd 	.word	0x0801a8fd
 801a284:	0801a8fd 	.word	0x0801a8fd
 801a288:	0801a8fd 	.word	0x0801a8fd
 801a28c:	0801a8fd 	.word	0x0801a8fd
 801a290:	0801a8fd 	.word	0x0801a8fd
 801a294:	0801a8fd 	.word	0x0801a8fd
 801a298:	0801a8fd 	.word	0x0801a8fd
 801a29c:	0801a8fd 	.word	0x0801a8fd
 801a2a0:	0801a8fd 	.word	0x0801a8fd
 801a2a4:	0801a8fd 	.word	0x0801a8fd
 801a2a8:	0801a8fd 	.word	0x0801a8fd
 801a2ac:	0801a8fd 	.word	0x0801a8fd
 801a2b0:	0801a8fd 	.word	0x0801a8fd
 801a2b4:	0801a8fd 	.word	0x0801a8fd
 801a2b8:	0801a8fd 	.word	0x0801a8fd
 801a2bc:	0801a8fd 	.word	0x0801a8fd
 801a2c0:	0801a8fd 	.word	0x0801a8fd
 801a2c4:	0801a8fd 	.word	0x0801a8fd
 801a2c8:	0801a8fd 	.word	0x0801a8fd
 801a2cc:	0801a8fd 	.word	0x0801a8fd
 801a2d0:	0801a8fd 	.word	0x0801a8fd
 801a2d4:	0801a8fd 	.word	0x0801a8fd
 801a2d8:	0801a8fd 	.word	0x0801a8fd
 801a2dc:	0801a8fd 	.word	0x0801a8fd
 801a2e0:	0801a8fd 	.word	0x0801a8fd
 801a2e4:	0801a8fd 	.word	0x0801a8fd
 801a2e8:	0801a8fd 	.word	0x0801a8fd
 801a2ec:	0801a8fd 	.word	0x0801a8fd
 801a2f0:	0801a8fd 	.word	0x0801a8fd
 801a2f4:	0801a83d 	.word	0x0801a83d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801a2f8:	f7fb fcbe 	bl	8015c78 <HAL_RCC_GetPCLK1Freq>
 801a2fc:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a302:	2b00      	cmp	r3, #0
 801a304:	d044      	beq.n	801a390 <UART_SetConfig+0x1d40>
 801a306:	687b      	ldr	r3, [r7, #4]
 801a308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a30a:	2b01      	cmp	r3, #1
 801a30c:	d03e      	beq.n	801a38c <UART_SetConfig+0x1d3c>
 801a30e:	687b      	ldr	r3, [r7, #4]
 801a310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a312:	2b02      	cmp	r3, #2
 801a314:	d038      	beq.n	801a388 <UART_SetConfig+0x1d38>
 801a316:	687b      	ldr	r3, [r7, #4]
 801a318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a31a:	2b03      	cmp	r3, #3
 801a31c:	d032      	beq.n	801a384 <UART_SetConfig+0x1d34>
 801a31e:	687b      	ldr	r3, [r7, #4]
 801a320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a322:	2b04      	cmp	r3, #4
 801a324:	d02c      	beq.n	801a380 <UART_SetConfig+0x1d30>
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a32a:	2b05      	cmp	r3, #5
 801a32c:	d026      	beq.n	801a37c <UART_SetConfig+0x1d2c>
 801a32e:	687b      	ldr	r3, [r7, #4]
 801a330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a332:	2b06      	cmp	r3, #6
 801a334:	d020      	beq.n	801a378 <UART_SetConfig+0x1d28>
 801a336:	687b      	ldr	r3, [r7, #4]
 801a338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a33a:	2b07      	cmp	r3, #7
 801a33c:	d01a      	beq.n	801a374 <UART_SetConfig+0x1d24>
 801a33e:	687b      	ldr	r3, [r7, #4]
 801a340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a342:	2b08      	cmp	r3, #8
 801a344:	d014      	beq.n	801a370 <UART_SetConfig+0x1d20>
 801a346:	687b      	ldr	r3, [r7, #4]
 801a348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a34a:	2b09      	cmp	r3, #9
 801a34c:	d00e      	beq.n	801a36c <UART_SetConfig+0x1d1c>
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a352:	2b0a      	cmp	r3, #10
 801a354:	d008      	beq.n	801a368 <UART_SetConfig+0x1d18>
 801a356:	687b      	ldr	r3, [r7, #4]
 801a358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a35a:	2b0b      	cmp	r3, #11
 801a35c:	d102      	bne.n	801a364 <UART_SetConfig+0x1d14>
 801a35e:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a362:	e016      	b.n	801a392 <UART_SetConfig+0x1d42>
 801a364:	2301      	movs	r3, #1
 801a366:	e014      	b.n	801a392 <UART_SetConfig+0x1d42>
 801a368:	2380      	movs	r3, #128	; 0x80
 801a36a:	e012      	b.n	801a392 <UART_SetConfig+0x1d42>
 801a36c:	2340      	movs	r3, #64	; 0x40
 801a36e:	e010      	b.n	801a392 <UART_SetConfig+0x1d42>
 801a370:	2320      	movs	r3, #32
 801a372:	e00e      	b.n	801a392 <UART_SetConfig+0x1d42>
 801a374:	2310      	movs	r3, #16
 801a376:	e00c      	b.n	801a392 <UART_SetConfig+0x1d42>
 801a378:	230c      	movs	r3, #12
 801a37a:	e00a      	b.n	801a392 <UART_SetConfig+0x1d42>
 801a37c:	230a      	movs	r3, #10
 801a37e:	e008      	b.n	801a392 <UART_SetConfig+0x1d42>
 801a380:	2308      	movs	r3, #8
 801a382:	e006      	b.n	801a392 <UART_SetConfig+0x1d42>
 801a384:	2306      	movs	r3, #6
 801a386:	e004      	b.n	801a392 <UART_SetConfig+0x1d42>
 801a388:	2304      	movs	r3, #4
 801a38a:	e002      	b.n	801a392 <UART_SetConfig+0x1d42>
 801a38c:	2302      	movs	r3, #2
 801a38e:	e000      	b.n	801a392 <UART_SetConfig+0x1d42>
 801a390:	2301      	movs	r3, #1
 801a392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a394:	fbb2 f2f3 	udiv	r2, r2, r3
 801a398:	687b      	ldr	r3, [r7, #4]
 801a39a:	685b      	ldr	r3, [r3, #4]
 801a39c:	085b      	lsrs	r3, r3, #1
 801a39e:	441a      	add	r2, r3
 801a3a0:	687b      	ldr	r3, [r7, #4]
 801a3a2:	685b      	ldr	r3, [r3, #4]
 801a3a4:	fbb2 f3f3 	udiv	r3, r2, r3
 801a3a8:	b29b      	uxth	r3, r3
 801a3aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801a3ac:	e2aa      	b.n	801a904 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801a3ae:	f7fb fc79 	bl	8015ca4 <HAL_RCC_GetPCLK2Freq>
 801a3b2:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a3b4:	687b      	ldr	r3, [r7, #4]
 801a3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3b8:	2b00      	cmp	r3, #0
 801a3ba:	d044      	beq.n	801a446 <UART_SetConfig+0x1df6>
 801a3bc:	687b      	ldr	r3, [r7, #4]
 801a3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3c0:	2b01      	cmp	r3, #1
 801a3c2:	d03e      	beq.n	801a442 <UART_SetConfig+0x1df2>
 801a3c4:	687b      	ldr	r3, [r7, #4]
 801a3c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3c8:	2b02      	cmp	r3, #2
 801a3ca:	d038      	beq.n	801a43e <UART_SetConfig+0x1dee>
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3d0:	2b03      	cmp	r3, #3
 801a3d2:	d032      	beq.n	801a43a <UART_SetConfig+0x1dea>
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3d8:	2b04      	cmp	r3, #4
 801a3da:	d02c      	beq.n	801a436 <UART_SetConfig+0x1de6>
 801a3dc:	687b      	ldr	r3, [r7, #4]
 801a3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3e0:	2b05      	cmp	r3, #5
 801a3e2:	d026      	beq.n	801a432 <UART_SetConfig+0x1de2>
 801a3e4:	687b      	ldr	r3, [r7, #4]
 801a3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3e8:	2b06      	cmp	r3, #6
 801a3ea:	d020      	beq.n	801a42e <UART_SetConfig+0x1dde>
 801a3ec:	687b      	ldr	r3, [r7, #4]
 801a3ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3f0:	2b07      	cmp	r3, #7
 801a3f2:	d01a      	beq.n	801a42a <UART_SetConfig+0x1dda>
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3f8:	2b08      	cmp	r3, #8
 801a3fa:	d014      	beq.n	801a426 <UART_SetConfig+0x1dd6>
 801a3fc:	687b      	ldr	r3, [r7, #4]
 801a3fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a400:	2b09      	cmp	r3, #9
 801a402:	d00e      	beq.n	801a422 <UART_SetConfig+0x1dd2>
 801a404:	687b      	ldr	r3, [r7, #4]
 801a406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a408:	2b0a      	cmp	r3, #10
 801a40a:	d008      	beq.n	801a41e <UART_SetConfig+0x1dce>
 801a40c:	687b      	ldr	r3, [r7, #4]
 801a40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a410:	2b0b      	cmp	r3, #11
 801a412:	d102      	bne.n	801a41a <UART_SetConfig+0x1dca>
 801a414:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a418:	e016      	b.n	801a448 <UART_SetConfig+0x1df8>
 801a41a:	2301      	movs	r3, #1
 801a41c:	e014      	b.n	801a448 <UART_SetConfig+0x1df8>
 801a41e:	2380      	movs	r3, #128	; 0x80
 801a420:	e012      	b.n	801a448 <UART_SetConfig+0x1df8>
 801a422:	2340      	movs	r3, #64	; 0x40
 801a424:	e010      	b.n	801a448 <UART_SetConfig+0x1df8>
 801a426:	2320      	movs	r3, #32
 801a428:	e00e      	b.n	801a448 <UART_SetConfig+0x1df8>
 801a42a:	2310      	movs	r3, #16
 801a42c:	e00c      	b.n	801a448 <UART_SetConfig+0x1df8>
 801a42e:	230c      	movs	r3, #12
 801a430:	e00a      	b.n	801a448 <UART_SetConfig+0x1df8>
 801a432:	230a      	movs	r3, #10
 801a434:	e008      	b.n	801a448 <UART_SetConfig+0x1df8>
 801a436:	2308      	movs	r3, #8
 801a438:	e006      	b.n	801a448 <UART_SetConfig+0x1df8>
 801a43a:	2306      	movs	r3, #6
 801a43c:	e004      	b.n	801a448 <UART_SetConfig+0x1df8>
 801a43e:	2304      	movs	r3, #4
 801a440:	e002      	b.n	801a448 <UART_SetConfig+0x1df8>
 801a442:	2302      	movs	r3, #2
 801a444:	e000      	b.n	801a448 <UART_SetConfig+0x1df8>
 801a446:	2301      	movs	r3, #1
 801a448:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a44a:	fbb2 f2f3 	udiv	r2, r2, r3
 801a44e:	687b      	ldr	r3, [r7, #4]
 801a450:	685b      	ldr	r3, [r3, #4]
 801a452:	085b      	lsrs	r3, r3, #1
 801a454:	441a      	add	r2, r3
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	685b      	ldr	r3, [r3, #4]
 801a45a:	fbb2 f3f3 	udiv	r3, r2, r3
 801a45e:	b29b      	uxth	r3, r3
 801a460:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801a462:	e24f      	b.n	801a904 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801a464:	f107 0318 	add.w	r3, r7, #24
 801a468:	4618      	mov	r0, r3
 801a46a:	f7fc fb25 	bl	8016ab8 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a46e:	69fa      	ldr	r2, [r7, #28]
 801a470:	687b      	ldr	r3, [r7, #4]
 801a472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a474:	2b00      	cmp	r3, #0
 801a476:	d044      	beq.n	801a502 <UART_SetConfig+0x1eb2>
 801a478:	687b      	ldr	r3, [r7, #4]
 801a47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a47c:	2b01      	cmp	r3, #1
 801a47e:	d03e      	beq.n	801a4fe <UART_SetConfig+0x1eae>
 801a480:	687b      	ldr	r3, [r7, #4]
 801a482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a484:	2b02      	cmp	r3, #2
 801a486:	d038      	beq.n	801a4fa <UART_SetConfig+0x1eaa>
 801a488:	687b      	ldr	r3, [r7, #4]
 801a48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a48c:	2b03      	cmp	r3, #3
 801a48e:	d032      	beq.n	801a4f6 <UART_SetConfig+0x1ea6>
 801a490:	687b      	ldr	r3, [r7, #4]
 801a492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a494:	2b04      	cmp	r3, #4
 801a496:	d02c      	beq.n	801a4f2 <UART_SetConfig+0x1ea2>
 801a498:	687b      	ldr	r3, [r7, #4]
 801a49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a49c:	2b05      	cmp	r3, #5
 801a49e:	d026      	beq.n	801a4ee <UART_SetConfig+0x1e9e>
 801a4a0:	687b      	ldr	r3, [r7, #4]
 801a4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4a4:	2b06      	cmp	r3, #6
 801a4a6:	d020      	beq.n	801a4ea <UART_SetConfig+0x1e9a>
 801a4a8:	687b      	ldr	r3, [r7, #4]
 801a4aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4ac:	2b07      	cmp	r3, #7
 801a4ae:	d01a      	beq.n	801a4e6 <UART_SetConfig+0x1e96>
 801a4b0:	687b      	ldr	r3, [r7, #4]
 801a4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4b4:	2b08      	cmp	r3, #8
 801a4b6:	d014      	beq.n	801a4e2 <UART_SetConfig+0x1e92>
 801a4b8:	687b      	ldr	r3, [r7, #4]
 801a4ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4bc:	2b09      	cmp	r3, #9
 801a4be:	d00e      	beq.n	801a4de <UART_SetConfig+0x1e8e>
 801a4c0:	687b      	ldr	r3, [r7, #4]
 801a4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4c4:	2b0a      	cmp	r3, #10
 801a4c6:	d008      	beq.n	801a4da <UART_SetConfig+0x1e8a>
 801a4c8:	687b      	ldr	r3, [r7, #4]
 801a4ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4cc:	2b0b      	cmp	r3, #11
 801a4ce:	d102      	bne.n	801a4d6 <UART_SetConfig+0x1e86>
 801a4d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a4d4:	e016      	b.n	801a504 <UART_SetConfig+0x1eb4>
 801a4d6:	2301      	movs	r3, #1
 801a4d8:	e014      	b.n	801a504 <UART_SetConfig+0x1eb4>
 801a4da:	2380      	movs	r3, #128	; 0x80
 801a4dc:	e012      	b.n	801a504 <UART_SetConfig+0x1eb4>
 801a4de:	2340      	movs	r3, #64	; 0x40
 801a4e0:	e010      	b.n	801a504 <UART_SetConfig+0x1eb4>
 801a4e2:	2320      	movs	r3, #32
 801a4e4:	e00e      	b.n	801a504 <UART_SetConfig+0x1eb4>
 801a4e6:	2310      	movs	r3, #16
 801a4e8:	e00c      	b.n	801a504 <UART_SetConfig+0x1eb4>
 801a4ea:	230c      	movs	r3, #12
 801a4ec:	e00a      	b.n	801a504 <UART_SetConfig+0x1eb4>
 801a4ee:	230a      	movs	r3, #10
 801a4f0:	e008      	b.n	801a504 <UART_SetConfig+0x1eb4>
 801a4f2:	2308      	movs	r3, #8
 801a4f4:	e006      	b.n	801a504 <UART_SetConfig+0x1eb4>
 801a4f6:	2306      	movs	r3, #6
 801a4f8:	e004      	b.n	801a504 <UART_SetConfig+0x1eb4>
 801a4fa:	2304      	movs	r3, #4
 801a4fc:	e002      	b.n	801a504 <UART_SetConfig+0x1eb4>
 801a4fe:	2302      	movs	r3, #2
 801a500:	e000      	b.n	801a504 <UART_SetConfig+0x1eb4>
 801a502:	2301      	movs	r3, #1
 801a504:	fbb2 f2f3 	udiv	r2, r2, r3
 801a508:	687b      	ldr	r3, [r7, #4]
 801a50a:	685b      	ldr	r3, [r3, #4]
 801a50c:	085b      	lsrs	r3, r3, #1
 801a50e:	441a      	add	r2, r3
 801a510:	687b      	ldr	r3, [r7, #4]
 801a512:	685b      	ldr	r3, [r3, #4]
 801a514:	fbb2 f3f3 	udiv	r3, r2, r3
 801a518:	b29b      	uxth	r3, r3
 801a51a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801a51c:	e1f2      	b.n	801a904 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801a51e:	f107 030c 	add.w	r3, r7, #12
 801a522:	4618      	mov	r0, r3
 801a524:	f7fc fc14 	bl	8016d50 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a528:	693a      	ldr	r2, [r7, #16]
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a52e:	2b00      	cmp	r3, #0
 801a530:	d044      	beq.n	801a5bc <UART_SetConfig+0x1f6c>
 801a532:	687b      	ldr	r3, [r7, #4]
 801a534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a536:	2b01      	cmp	r3, #1
 801a538:	d03e      	beq.n	801a5b8 <UART_SetConfig+0x1f68>
 801a53a:	687b      	ldr	r3, [r7, #4]
 801a53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a53e:	2b02      	cmp	r3, #2
 801a540:	d038      	beq.n	801a5b4 <UART_SetConfig+0x1f64>
 801a542:	687b      	ldr	r3, [r7, #4]
 801a544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a546:	2b03      	cmp	r3, #3
 801a548:	d032      	beq.n	801a5b0 <UART_SetConfig+0x1f60>
 801a54a:	687b      	ldr	r3, [r7, #4]
 801a54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a54e:	2b04      	cmp	r3, #4
 801a550:	d02c      	beq.n	801a5ac <UART_SetConfig+0x1f5c>
 801a552:	687b      	ldr	r3, [r7, #4]
 801a554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a556:	2b05      	cmp	r3, #5
 801a558:	d026      	beq.n	801a5a8 <UART_SetConfig+0x1f58>
 801a55a:	687b      	ldr	r3, [r7, #4]
 801a55c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a55e:	2b06      	cmp	r3, #6
 801a560:	d020      	beq.n	801a5a4 <UART_SetConfig+0x1f54>
 801a562:	687b      	ldr	r3, [r7, #4]
 801a564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a566:	2b07      	cmp	r3, #7
 801a568:	d01a      	beq.n	801a5a0 <UART_SetConfig+0x1f50>
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a56e:	2b08      	cmp	r3, #8
 801a570:	d014      	beq.n	801a59c <UART_SetConfig+0x1f4c>
 801a572:	687b      	ldr	r3, [r7, #4]
 801a574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a576:	2b09      	cmp	r3, #9
 801a578:	d00e      	beq.n	801a598 <UART_SetConfig+0x1f48>
 801a57a:	687b      	ldr	r3, [r7, #4]
 801a57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a57e:	2b0a      	cmp	r3, #10
 801a580:	d008      	beq.n	801a594 <UART_SetConfig+0x1f44>
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a586:	2b0b      	cmp	r3, #11
 801a588:	d102      	bne.n	801a590 <UART_SetConfig+0x1f40>
 801a58a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a58e:	e016      	b.n	801a5be <UART_SetConfig+0x1f6e>
 801a590:	2301      	movs	r3, #1
 801a592:	e014      	b.n	801a5be <UART_SetConfig+0x1f6e>
 801a594:	2380      	movs	r3, #128	; 0x80
 801a596:	e012      	b.n	801a5be <UART_SetConfig+0x1f6e>
 801a598:	2340      	movs	r3, #64	; 0x40
 801a59a:	e010      	b.n	801a5be <UART_SetConfig+0x1f6e>
 801a59c:	2320      	movs	r3, #32
 801a59e:	e00e      	b.n	801a5be <UART_SetConfig+0x1f6e>
 801a5a0:	2310      	movs	r3, #16
 801a5a2:	e00c      	b.n	801a5be <UART_SetConfig+0x1f6e>
 801a5a4:	230c      	movs	r3, #12
 801a5a6:	e00a      	b.n	801a5be <UART_SetConfig+0x1f6e>
 801a5a8:	230a      	movs	r3, #10
 801a5aa:	e008      	b.n	801a5be <UART_SetConfig+0x1f6e>
 801a5ac:	2308      	movs	r3, #8
 801a5ae:	e006      	b.n	801a5be <UART_SetConfig+0x1f6e>
 801a5b0:	2306      	movs	r3, #6
 801a5b2:	e004      	b.n	801a5be <UART_SetConfig+0x1f6e>
 801a5b4:	2304      	movs	r3, #4
 801a5b6:	e002      	b.n	801a5be <UART_SetConfig+0x1f6e>
 801a5b8:	2302      	movs	r3, #2
 801a5ba:	e000      	b.n	801a5be <UART_SetConfig+0x1f6e>
 801a5bc:	2301      	movs	r3, #1
 801a5be:	fbb2 f2f3 	udiv	r2, r2, r3
 801a5c2:	687b      	ldr	r3, [r7, #4]
 801a5c4:	685b      	ldr	r3, [r3, #4]
 801a5c6:	085b      	lsrs	r3, r3, #1
 801a5c8:	441a      	add	r2, r3
 801a5ca:	687b      	ldr	r3, [r7, #4]
 801a5cc:	685b      	ldr	r3, [r3, #4]
 801a5ce:	fbb2 f3f3 	udiv	r3, r2, r3
 801a5d2:	b29b      	uxth	r3, r3
 801a5d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801a5d6:	e195      	b.n	801a904 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801a5d8:	4b87      	ldr	r3, [pc, #540]	; (801a7f8 <UART_SetConfig+0x21a8>)
 801a5da:	681b      	ldr	r3, [r3, #0]
 801a5dc:	f003 0320 	and.w	r3, r3, #32
 801a5e0:	2b00      	cmp	r3, #0
 801a5e2:	d05d      	beq.n	801a6a0 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a5e4:	4b84      	ldr	r3, [pc, #528]	; (801a7f8 <UART_SetConfig+0x21a8>)
 801a5e6:	681b      	ldr	r3, [r3, #0]
 801a5e8:	08db      	lsrs	r3, r3, #3
 801a5ea:	f003 0303 	and.w	r3, r3, #3
 801a5ee:	4a83      	ldr	r2, [pc, #524]	; (801a7fc <UART_SetConfig+0x21ac>)
 801a5f0:	40da      	lsrs	r2, r3
 801a5f2:	687b      	ldr	r3, [r7, #4]
 801a5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a5f6:	2b00      	cmp	r3, #0
 801a5f8:	d044      	beq.n	801a684 <UART_SetConfig+0x2034>
 801a5fa:	687b      	ldr	r3, [r7, #4]
 801a5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a5fe:	2b01      	cmp	r3, #1
 801a600:	d03e      	beq.n	801a680 <UART_SetConfig+0x2030>
 801a602:	687b      	ldr	r3, [r7, #4]
 801a604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a606:	2b02      	cmp	r3, #2
 801a608:	d038      	beq.n	801a67c <UART_SetConfig+0x202c>
 801a60a:	687b      	ldr	r3, [r7, #4]
 801a60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a60e:	2b03      	cmp	r3, #3
 801a610:	d032      	beq.n	801a678 <UART_SetConfig+0x2028>
 801a612:	687b      	ldr	r3, [r7, #4]
 801a614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a616:	2b04      	cmp	r3, #4
 801a618:	d02c      	beq.n	801a674 <UART_SetConfig+0x2024>
 801a61a:	687b      	ldr	r3, [r7, #4]
 801a61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a61e:	2b05      	cmp	r3, #5
 801a620:	d026      	beq.n	801a670 <UART_SetConfig+0x2020>
 801a622:	687b      	ldr	r3, [r7, #4]
 801a624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a626:	2b06      	cmp	r3, #6
 801a628:	d020      	beq.n	801a66c <UART_SetConfig+0x201c>
 801a62a:	687b      	ldr	r3, [r7, #4]
 801a62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a62e:	2b07      	cmp	r3, #7
 801a630:	d01a      	beq.n	801a668 <UART_SetConfig+0x2018>
 801a632:	687b      	ldr	r3, [r7, #4]
 801a634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a636:	2b08      	cmp	r3, #8
 801a638:	d014      	beq.n	801a664 <UART_SetConfig+0x2014>
 801a63a:	687b      	ldr	r3, [r7, #4]
 801a63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a63e:	2b09      	cmp	r3, #9
 801a640:	d00e      	beq.n	801a660 <UART_SetConfig+0x2010>
 801a642:	687b      	ldr	r3, [r7, #4]
 801a644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a646:	2b0a      	cmp	r3, #10
 801a648:	d008      	beq.n	801a65c <UART_SetConfig+0x200c>
 801a64a:	687b      	ldr	r3, [r7, #4]
 801a64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a64e:	2b0b      	cmp	r3, #11
 801a650:	d102      	bne.n	801a658 <UART_SetConfig+0x2008>
 801a652:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a656:	e016      	b.n	801a686 <UART_SetConfig+0x2036>
 801a658:	2301      	movs	r3, #1
 801a65a:	e014      	b.n	801a686 <UART_SetConfig+0x2036>
 801a65c:	2380      	movs	r3, #128	; 0x80
 801a65e:	e012      	b.n	801a686 <UART_SetConfig+0x2036>
 801a660:	2340      	movs	r3, #64	; 0x40
 801a662:	e010      	b.n	801a686 <UART_SetConfig+0x2036>
 801a664:	2320      	movs	r3, #32
 801a666:	e00e      	b.n	801a686 <UART_SetConfig+0x2036>
 801a668:	2310      	movs	r3, #16
 801a66a:	e00c      	b.n	801a686 <UART_SetConfig+0x2036>
 801a66c:	230c      	movs	r3, #12
 801a66e:	e00a      	b.n	801a686 <UART_SetConfig+0x2036>
 801a670:	230a      	movs	r3, #10
 801a672:	e008      	b.n	801a686 <UART_SetConfig+0x2036>
 801a674:	2308      	movs	r3, #8
 801a676:	e006      	b.n	801a686 <UART_SetConfig+0x2036>
 801a678:	2306      	movs	r3, #6
 801a67a:	e004      	b.n	801a686 <UART_SetConfig+0x2036>
 801a67c:	2304      	movs	r3, #4
 801a67e:	e002      	b.n	801a686 <UART_SetConfig+0x2036>
 801a680:	2302      	movs	r3, #2
 801a682:	e000      	b.n	801a686 <UART_SetConfig+0x2036>
 801a684:	2301      	movs	r3, #1
 801a686:	fbb2 f2f3 	udiv	r2, r2, r3
 801a68a:	687b      	ldr	r3, [r7, #4]
 801a68c:	685b      	ldr	r3, [r3, #4]
 801a68e:	085b      	lsrs	r3, r3, #1
 801a690:	441a      	add	r2, r3
 801a692:	687b      	ldr	r3, [r7, #4]
 801a694:	685b      	ldr	r3, [r3, #4]
 801a696:	fbb2 f3f3 	udiv	r3, r2, r3
 801a69a:	b29b      	uxth	r3, r3
 801a69c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 801a69e:	e131      	b.n	801a904 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a6a0:	687b      	ldr	r3, [r7, #4]
 801a6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a6a4:	2b00      	cmp	r3, #0
 801a6a6:	d043      	beq.n	801a730 <UART_SetConfig+0x20e0>
 801a6a8:	687b      	ldr	r3, [r7, #4]
 801a6aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a6ac:	2b01      	cmp	r3, #1
 801a6ae:	d03d      	beq.n	801a72c <UART_SetConfig+0x20dc>
 801a6b0:	687b      	ldr	r3, [r7, #4]
 801a6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a6b4:	2b02      	cmp	r3, #2
 801a6b6:	d037      	beq.n	801a728 <UART_SetConfig+0x20d8>
 801a6b8:	687b      	ldr	r3, [r7, #4]
 801a6ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a6bc:	2b03      	cmp	r3, #3
 801a6be:	d031      	beq.n	801a724 <UART_SetConfig+0x20d4>
 801a6c0:	687b      	ldr	r3, [r7, #4]
 801a6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a6c4:	2b04      	cmp	r3, #4
 801a6c6:	d02b      	beq.n	801a720 <UART_SetConfig+0x20d0>
 801a6c8:	687b      	ldr	r3, [r7, #4]
 801a6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a6cc:	2b05      	cmp	r3, #5
 801a6ce:	d025      	beq.n	801a71c <UART_SetConfig+0x20cc>
 801a6d0:	687b      	ldr	r3, [r7, #4]
 801a6d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a6d4:	2b06      	cmp	r3, #6
 801a6d6:	d01f      	beq.n	801a718 <UART_SetConfig+0x20c8>
 801a6d8:	687b      	ldr	r3, [r7, #4]
 801a6da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a6dc:	2b07      	cmp	r3, #7
 801a6de:	d019      	beq.n	801a714 <UART_SetConfig+0x20c4>
 801a6e0:	687b      	ldr	r3, [r7, #4]
 801a6e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a6e4:	2b08      	cmp	r3, #8
 801a6e6:	d013      	beq.n	801a710 <UART_SetConfig+0x20c0>
 801a6e8:	687b      	ldr	r3, [r7, #4]
 801a6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a6ec:	2b09      	cmp	r3, #9
 801a6ee:	d00d      	beq.n	801a70c <UART_SetConfig+0x20bc>
 801a6f0:	687b      	ldr	r3, [r7, #4]
 801a6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a6f4:	2b0a      	cmp	r3, #10
 801a6f6:	d007      	beq.n	801a708 <UART_SetConfig+0x20b8>
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a6fc:	2b0b      	cmp	r3, #11
 801a6fe:	d101      	bne.n	801a704 <UART_SetConfig+0x20b4>
 801a700:	4b3f      	ldr	r3, [pc, #252]	; (801a800 <UART_SetConfig+0x21b0>)
 801a702:	e016      	b.n	801a732 <UART_SetConfig+0x20e2>
 801a704:	4b3d      	ldr	r3, [pc, #244]	; (801a7fc <UART_SetConfig+0x21ac>)
 801a706:	e014      	b.n	801a732 <UART_SetConfig+0x20e2>
 801a708:	4b3e      	ldr	r3, [pc, #248]	; (801a804 <UART_SetConfig+0x21b4>)
 801a70a:	e012      	b.n	801a732 <UART_SetConfig+0x20e2>
 801a70c:	4b3e      	ldr	r3, [pc, #248]	; (801a808 <UART_SetConfig+0x21b8>)
 801a70e:	e010      	b.n	801a732 <UART_SetConfig+0x20e2>
 801a710:	4b3e      	ldr	r3, [pc, #248]	; (801a80c <UART_SetConfig+0x21bc>)
 801a712:	e00e      	b.n	801a732 <UART_SetConfig+0x20e2>
 801a714:	4b3e      	ldr	r3, [pc, #248]	; (801a810 <UART_SetConfig+0x21c0>)
 801a716:	e00c      	b.n	801a732 <UART_SetConfig+0x20e2>
 801a718:	4b3e      	ldr	r3, [pc, #248]	; (801a814 <UART_SetConfig+0x21c4>)
 801a71a:	e00a      	b.n	801a732 <UART_SetConfig+0x20e2>
 801a71c:	4b3e      	ldr	r3, [pc, #248]	; (801a818 <UART_SetConfig+0x21c8>)
 801a71e:	e008      	b.n	801a732 <UART_SetConfig+0x20e2>
 801a720:	4b3e      	ldr	r3, [pc, #248]	; (801a81c <UART_SetConfig+0x21cc>)
 801a722:	e006      	b.n	801a732 <UART_SetConfig+0x20e2>
 801a724:	4b3e      	ldr	r3, [pc, #248]	; (801a820 <UART_SetConfig+0x21d0>)
 801a726:	e004      	b.n	801a732 <UART_SetConfig+0x20e2>
 801a728:	4b3e      	ldr	r3, [pc, #248]	; (801a824 <UART_SetConfig+0x21d4>)
 801a72a:	e002      	b.n	801a732 <UART_SetConfig+0x20e2>
 801a72c:	4b3e      	ldr	r3, [pc, #248]	; (801a828 <UART_SetConfig+0x21d8>)
 801a72e:	e000      	b.n	801a732 <UART_SetConfig+0x20e2>
 801a730:	4b32      	ldr	r3, [pc, #200]	; (801a7fc <UART_SetConfig+0x21ac>)
 801a732:	687a      	ldr	r2, [r7, #4]
 801a734:	6852      	ldr	r2, [r2, #4]
 801a736:	0852      	lsrs	r2, r2, #1
 801a738:	441a      	add	r2, r3
 801a73a:	687b      	ldr	r3, [r7, #4]
 801a73c:	685b      	ldr	r3, [r3, #4]
 801a73e:	fbb2 f3f3 	udiv	r3, r2, r3
 801a742:	b29b      	uxth	r3, r3
 801a744:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801a746:	e0dd      	b.n	801a904 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a748:	687b      	ldr	r3, [r7, #4]
 801a74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a74c:	2b00      	cmp	r3, #0
 801a74e:	d046      	beq.n	801a7de <UART_SetConfig+0x218e>
 801a750:	687b      	ldr	r3, [r7, #4]
 801a752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a754:	2b01      	cmp	r3, #1
 801a756:	d040      	beq.n	801a7da <UART_SetConfig+0x218a>
 801a758:	687b      	ldr	r3, [r7, #4]
 801a75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a75c:	2b02      	cmp	r3, #2
 801a75e:	d03a      	beq.n	801a7d6 <UART_SetConfig+0x2186>
 801a760:	687b      	ldr	r3, [r7, #4]
 801a762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a764:	2b03      	cmp	r3, #3
 801a766:	d034      	beq.n	801a7d2 <UART_SetConfig+0x2182>
 801a768:	687b      	ldr	r3, [r7, #4]
 801a76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a76c:	2b04      	cmp	r3, #4
 801a76e:	d02e      	beq.n	801a7ce <UART_SetConfig+0x217e>
 801a770:	687b      	ldr	r3, [r7, #4]
 801a772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a774:	2b05      	cmp	r3, #5
 801a776:	d028      	beq.n	801a7ca <UART_SetConfig+0x217a>
 801a778:	687b      	ldr	r3, [r7, #4]
 801a77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a77c:	2b06      	cmp	r3, #6
 801a77e:	d022      	beq.n	801a7c6 <UART_SetConfig+0x2176>
 801a780:	687b      	ldr	r3, [r7, #4]
 801a782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a784:	2b07      	cmp	r3, #7
 801a786:	d01c      	beq.n	801a7c2 <UART_SetConfig+0x2172>
 801a788:	687b      	ldr	r3, [r7, #4]
 801a78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a78c:	2b08      	cmp	r3, #8
 801a78e:	d016      	beq.n	801a7be <UART_SetConfig+0x216e>
 801a790:	687b      	ldr	r3, [r7, #4]
 801a792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a794:	2b09      	cmp	r3, #9
 801a796:	d00f      	beq.n	801a7b8 <UART_SetConfig+0x2168>
 801a798:	687b      	ldr	r3, [r7, #4]
 801a79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a79c:	2b0a      	cmp	r3, #10
 801a79e:	d008      	beq.n	801a7b2 <UART_SetConfig+0x2162>
 801a7a0:	687b      	ldr	r3, [r7, #4]
 801a7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a7a4:	2b0b      	cmp	r3, #11
 801a7a6:	d102      	bne.n	801a7ae <UART_SetConfig+0x215e>
 801a7a8:	f643 5309 	movw	r3, #15625	; 0x3d09
 801a7ac:	e018      	b.n	801a7e0 <UART_SetConfig+0x2190>
 801a7ae:	4b18      	ldr	r3, [pc, #96]	; (801a810 <UART_SetConfig+0x21c0>)
 801a7b0:	e016      	b.n	801a7e0 <UART_SetConfig+0x2190>
 801a7b2:	f647 2312 	movw	r3, #31250	; 0x7a12
 801a7b6:	e013      	b.n	801a7e0 <UART_SetConfig+0x2190>
 801a7b8:	f24f 4324 	movw	r3, #62500	; 0xf424
 801a7bc:	e010      	b.n	801a7e0 <UART_SetConfig+0x2190>
 801a7be:	4b1b      	ldr	r3, [pc, #108]	; (801a82c <UART_SetConfig+0x21dc>)
 801a7c0:	e00e      	b.n	801a7e0 <UART_SetConfig+0x2190>
 801a7c2:	4b0f      	ldr	r3, [pc, #60]	; (801a800 <UART_SetConfig+0x21b0>)
 801a7c4:	e00c      	b.n	801a7e0 <UART_SetConfig+0x2190>
 801a7c6:	4b1a      	ldr	r3, [pc, #104]	; (801a830 <UART_SetConfig+0x21e0>)
 801a7c8:	e00a      	b.n	801a7e0 <UART_SetConfig+0x2190>
 801a7ca:	4b1a      	ldr	r3, [pc, #104]	; (801a834 <UART_SetConfig+0x21e4>)
 801a7cc:	e008      	b.n	801a7e0 <UART_SetConfig+0x2190>
 801a7ce:	4b0d      	ldr	r3, [pc, #52]	; (801a804 <UART_SetConfig+0x21b4>)
 801a7d0:	e006      	b.n	801a7e0 <UART_SetConfig+0x2190>
 801a7d2:	4b19      	ldr	r3, [pc, #100]	; (801a838 <UART_SetConfig+0x21e8>)
 801a7d4:	e004      	b.n	801a7e0 <UART_SetConfig+0x2190>
 801a7d6:	4b0c      	ldr	r3, [pc, #48]	; (801a808 <UART_SetConfig+0x21b8>)
 801a7d8:	e002      	b.n	801a7e0 <UART_SetConfig+0x2190>
 801a7da:	4b0c      	ldr	r3, [pc, #48]	; (801a80c <UART_SetConfig+0x21bc>)
 801a7dc:	e000      	b.n	801a7e0 <UART_SetConfig+0x2190>
 801a7de:	4b0c      	ldr	r3, [pc, #48]	; (801a810 <UART_SetConfig+0x21c0>)
 801a7e0:	687a      	ldr	r2, [r7, #4]
 801a7e2:	6852      	ldr	r2, [r2, #4]
 801a7e4:	0852      	lsrs	r2, r2, #1
 801a7e6:	441a      	add	r2, r3
 801a7e8:	687b      	ldr	r3, [r7, #4]
 801a7ea:	685b      	ldr	r3, [r3, #4]
 801a7ec:	fbb2 f3f3 	udiv	r3, r2, r3
 801a7f0:	b29b      	uxth	r3, r3
 801a7f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801a7f4:	e086      	b.n	801a904 <UART_SetConfig+0x22b4>
 801a7f6:	bf00      	nop
 801a7f8:	58024400 	.word	0x58024400
 801a7fc:	03d09000 	.word	0x03d09000
 801a800:	0003d090 	.word	0x0003d090
 801a804:	0007a120 	.word	0x0007a120
 801a808:	000f4240 	.word	0x000f4240
 801a80c:	001e8480 	.word	0x001e8480
 801a810:	003d0900 	.word	0x003d0900
 801a814:	00516155 	.word	0x00516155
 801a818:	0061a800 	.word	0x0061a800
 801a81c:	007a1200 	.word	0x007a1200
 801a820:	00a2c2aa 	.word	0x00a2c2aa
 801a824:	00f42400 	.word	0x00f42400
 801a828:	01e84800 	.word	0x01e84800
 801a82c:	0001e848 	.word	0x0001e848
 801a830:	00051615 	.word	0x00051615
 801a834:	00061a80 	.word	0x00061a80
 801a838:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a83c:	687b      	ldr	r3, [r7, #4]
 801a83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a840:	2b00      	cmp	r3, #0
 801a842:	d04e      	beq.n	801a8e2 <UART_SetConfig+0x2292>
 801a844:	687b      	ldr	r3, [r7, #4]
 801a846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a848:	2b01      	cmp	r3, #1
 801a84a:	d047      	beq.n	801a8dc <UART_SetConfig+0x228c>
 801a84c:	687b      	ldr	r3, [r7, #4]
 801a84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a850:	2b02      	cmp	r3, #2
 801a852:	d040      	beq.n	801a8d6 <UART_SetConfig+0x2286>
 801a854:	687b      	ldr	r3, [r7, #4]
 801a856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a858:	2b03      	cmp	r3, #3
 801a85a:	d039      	beq.n	801a8d0 <UART_SetConfig+0x2280>
 801a85c:	687b      	ldr	r3, [r7, #4]
 801a85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a860:	2b04      	cmp	r3, #4
 801a862:	d032      	beq.n	801a8ca <UART_SetConfig+0x227a>
 801a864:	687b      	ldr	r3, [r7, #4]
 801a866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a868:	2b05      	cmp	r3, #5
 801a86a:	d02b      	beq.n	801a8c4 <UART_SetConfig+0x2274>
 801a86c:	687b      	ldr	r3, [r7, #4]
 801a86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a870:	2b06      	cmp	r3, #6
 801a872:	d024      	beq.n	801a8be <UART_SetConfig+0x226e>
 801a874:	687b      	ldr	r3, [r7, #4]
 801a876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a878:	2b07      	cmp	r3, #7
 801a87a:	d01d      	beq.n	801a8b8 <UART_SetConfig+0x2268>
 801a87c:	687b      	ldr	r3, [r7, #4]
 801a87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a880:	2b08      	cmp	r3, #8
 801a882:	d016      	beq.n	801a8b2 <UART_SetConfig+0x2262>
 801a884:	687b      	ldr	r3, [r7, #4]
 801a886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a888:	2b09      	cmp	r3, #9
 801a88a:	d00f      	beq.n	801a8ac <UART_SetConfig+0x225c>
 801a88c:	687b      	ldr	r3, [r7, #4]
 801a88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a890:	2b0a      	cmp	r3, #10
 801a892:	d008      	beq.n	801a8a6 <UART_SetConfig+0x2256>
 801a894:	687b      	ldr	r3, [r7, #4]
 801a896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a898:	2b0b      	cmp	r3, #11
 801a89a:	d101      	bne.n	801a8a0 <UART_SetConfig+0x2250>
 801a89c:	2380      	movs	r3, #128	; 0x80
 801a89e:	e022      	b.n	801a8e6 <UART_SetConfig+0x2296>
 801a8a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a8a4:	e01f      	b.n	801a8e6 <UART_SetConfig+0x2296>
 801a8a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a8aa:	e01c      	b.n	801a8e6 <UART_SetConfig+0x2296>
 801a8ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 801a8b0:	e019      	b.n	801a8e6 <UART_SetConfig+0x2296>
 801a8b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a8b6:	e016      	b.n	801a8e6 <UART_SetConfig+0x2296>
 801a8b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a8bc:	e013      	b.n	801a8e6 <UART_SetConfig+0x2296>
 801a8be:	f640 23aa 	movw	r3, #2730	; 0xaaa
 801a8c2:	e010      	b.n	801a8e6 <UART_SetConfig+0x2296>
 801a8c4:	f640 43cc 	movw	r3, #3276	; 0xccc
 801a8c8:	e00d      	b.n	801a8e6 <UART_SetConfig+0x2296>
 801a8ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a8ce:	e00a      	b.n	801a8e6 <UART_SetConfig+0x2296>
 801a8d0:	f241 5355 	movw	r3, #5461	; 0x1555
 801a8d4:	e007      	b.n	801a8e6 <UART_SetConfig+0x2296>
 801a8d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801a8da:	e004      	b.n	801a8e6 <UART_SetConfig+0x2296>
 801a8dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801a8e0:	e001      	b.n	801a8e6 <UART_SetConfig+0x2296>
 801a8e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a8e6:	687a      	ldr	r2, [r7, #4]
 801a8e8:	6852      	ldr	r2, [r2, #4]
 801a8ea:	0852      	lsrs	r2, r2, #1
 801a8ec:	441a      	add	r2, r3
 801a8ee:	687b      	ldr	r3, [r7, #4]
 801a8f0:	685b      	ldr	r3, [r3, #4]
 801a8f2:	fbb2 f3f3 	udiv	r3, r2, r3
 801a8f6:	b29b      	uxth	r3, r3
 801a8f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801a8fa:	e003      	b.n	801a904 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 801a8fc:	2301      	movs	r3, #1
 801a8fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 801a902:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801a904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a906:	2b0f      	cmp	r3, #15
 801a908:	d908      	bls.n	801a91c <UART_SetConfig+0x22cc>
 801a90a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a90c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a910:	d204      	bcs.n	801a91c <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	681b      	ldr	r3, [r3, #0]
 801a916:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a918:	60da      	str	r2, [r3, #12]
 801a91a:	e002      	b.n	801a922 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 801a91c:	2301      	movs	r3, #1
 801a91e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801a922:	687b      	ldr	r3, [r7, #4]
 801a924:	2201      	movs	r2, #1
 801a926:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801a92a:	687b      	ldr	r3, [r7, #4]
 801a92c:	2201      	movs	r2, #1
 801a92e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801a932:	687b      	ldr	r3, [r7, #4]
 801a934:	2200      	movs	r2, #0
 801a936:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 801a938:	687b      	ldr	r3, [r7, #4]
 801a93a:	2200      	movs	r2, #0
 801a93c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 801a93e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 801a942:	4618      	mov	r0, r3
 801a944:	3740      	adds	r7, #64	; 0x40
 801a946:	46bd      	mov	sp, r7
 801a948:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0801a94c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801a94c:	b480      	push	{r7}
 801a94e:	b083      	sub	sp, #12
 801a950:	af00      	add	r7, sp, #0
 801a952:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a958:	f003 0301 	and.w	r3, r3, #1
 801a95c:	2b00      	cmp	r3, #0
 801a95e:	d00a      	beq.n	801a976 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801a960:	687b      	ldr	r3, [r7, #4]
 801a962:	681b      	ldr	r3, [r3, #0]
 801a964:	685b      	ldr	r3, [r3, #4]
 801a966:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801a96a:	687b      	ldr	r3, [r7, #4]
 801a96c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a96e:	687b      	ldr	r3, [r7, #4]
 801a970:	681b      	ldr	r3, [r3, #0]
 801a972:	430a      	orrs	r2, r1
 801a974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801a976:	687b      	ldr	r3, [r7, #4]
 801a978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a97a:	f003 0302 	and.w	r3, r3, #2
 801a97e:	2b00      	cmp	r3, #0
 801a980:	d00a      	beq.n	801a998 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801a982:	687b      	ldr	r3, [r7, #4]
 801a984:	681b      	ldr	r3, [r3, #0]
 801a986:	685b      	ldr	r3, [r3, #4]
 801a988:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	681b      	ldr	r3, [r3, #0]
 801a994:	430a      	orrs	r2, r1
 801a996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a99c:	f003 0304 	and.w	r3, r3, #4
 801a9a0:	2b00      	cmp	r3, #0
 801a9a2:	d00a      	beq.n	801a9ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801a9a4:	687b      	ldr	r3, [r7, #4]
 801a9a6:	681b      	ldr	r3, [r3, #0]
 801a9a8:	685b      	ldr	r3, [r3, #4]
 801a9aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801a9b2:	687b      	ldr	r3, [r7, #4]
 801a9b4:	681b      	ldr	r3, [r3, #0]
 801a9b6:	430a      	orrs	r2, r1
 801a9b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801a9ba:	687b      	ldr	r3, [r7, #4]
 801a9bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a9be:	f003 0308 	and.w	r3, r3, #8
 801a9c2:	2b00      	cmp	r3, #0
 801a9c4:	d00a      	beq.n	801a9dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801a9c6:	687b      	ldr	r3, [r7, #4]
 801a9c8:	681b      	ldr	r3, [r3, #0]
 801a9ca:	685b      	ldr	r3, [r3, #4]
 801a9cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801a9d0:	687b      	ldr	r3, [r7, #4]
 801a9d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a9d4:	687b      	ldr	r3, [r7, #4]
 801a9d6:	681b      	ldr	r3, [r3, #0]
 801a9d8:	430a      	orrs	r2, r1
 801a9da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801a9dc:	687b      	ldr	r3, [r7, #4]
 801a9de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a9e0:	f003 0310 	and.w	r3, r3, #16
 801a9e4:	2b00      	cmp	r3, #0
 801a9e6:	d00a      	beq.n	801a9fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801a9e8:	687b      	ldr	r3, [r7, #4]
 801a9ea:	681b      	ldr	r3, [r3, #0]
 801a9ec:	689b      	ldr	r3, [r3, #8]
 801a9ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801a9f2:	687b      	ldr	r3, [r7, #4]
 801a9f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801a9f6:	687b      	ldr	r3, [r7, #4]
 801a9f8:	681b      	ldr	r3, [r3, #0]
 801a9fa:	430a      	orrs	r2, r1
 801a9fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801a9fe:	687b      	ldr	r3, [r7, #4]
 801aa00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aa02:	f003 0320 	and.w	r3, r3, #32
 801aa06:	2b00      	cmp	r3, #0
 801aa08:	d00a      	beq.n	801aa20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	681b      	ldr	r3, [r3, #0]
 801aa0e:	689b      	ldr	r3, [r3, #8]
 801aa10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801aa18:	687b      	ldr	r3, [r7, #4]
 801aa1a:	681b      	ldr	r3, [r3, #0]
 801aa1c:	430a      	orrs	r2, r1
 801aa1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801aa20:	687b      	ldr	r3, [r7, #4]
 801aa22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aa24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801aa28:	2b00      	cmp	r3, #0
 801aa2a:	d01a      	beq.n	801aa62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801aa2c:	687b      	ldr	r3, [r7, #4]
 801aa2e:	681b      	ldr	r3, [r3, #0]
 801aa30:	685b      	ldr	r3, [r3, #4]
 801aa32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801aa36:	687b      	ldr	r3, [r7, #4]
 801aa38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801aa3a:	687b      	ldr	r3, [r7, #4]
 801aa3c:	681b      	ldr	r3, [r3, #0]
 801aa3e:	430a      	orrs	r2, r1
 801aa40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801aa42:	687b      	ldr	r3, [r7, #4]
 801aa44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801aa46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801aa4a:	d10a      	bne.n	801aa62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801aa4c:	687b      	ldr	r3, [r7, #4]
 801aa4e:	681b      	ldr	r3, [r3, #0]
 801aa50:	685b      	ldr	r3, [r3, #4]
 801aa52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801aa56:	687b      	ldr	r3, [r7, #4]
 801aa58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	681b      	ldr	r3, [r3, #0]
 801aa5e:	430a      	orrs	r2, r1
 801aa60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801aa62:	687b      	ldr	r3, [r7, #4]
 801aa64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aa66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801aa6a:	2b00      	cmp	r3, #0
 801aa6c:	d00a      	beq.n	801aa84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801aa6e:	687b      	ldr	r3, [r7, #4]
 801aa70:	681b      	ldr	r3, [r3, #0]
 801aa72:	685b      	ldr	r3, [r3, #4]
 801aa74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801aa78:	687b      	ldr	r3, [r7, #4]
 801aa7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801aa7c:	687b      	ldr	r3, [r7, #4]
 801aa7e:	681b      	ldr	r3, [r3, #0]
 801aa80:	430a      	orrs	r2, r1
 801aa82:	605a      	str	r2, [r3, #4]
  }
}
 801aa84:	bf00      	nop
 801aa86:	370c      	adds	r7, #12
 801aa88:	46bd      	mov	sp, r7
 801aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa8e:	4770      	bx	lr

0801aa90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801aa90:	b580      	push	{r7, lr}
 801aa92:	b086      	sub	sp, #24
 801aa94:	af02      	add	r7, sp, #8
 801aa96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	2200      	movs	r2, #0
 801aa9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 801aaa0:	f7f8 fa0c 	bl	8012ebc <HAL_GetTick>
 801aaa4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801aaa6:	687b      	ldr	r3, [r7, #4]
 801aaa8:	681b      	ldr	r3, [r3, #0]
 801aaaa:	681b      	ldr	r3, [r3, #0]
 801aaac:	f003 0308 	and.w	r3, r3, #8
 801aab0:	2b08      	cmp	r3, #8
 801aab2:	d10e      	bne.n	801aad2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801aab4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801aab8:	9300      	str	r3, [sp, #0]
 801aaba:	68fb      	ldr	r3, [r7, #12]
 801aabc:	2200      	movs	r2, #0
 801aabe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801aac2:	6878      	ldr	r0, [r7, #4]
 801aac4:	f000 f82c 	bl	801ab20 <UART_WaitOnFlagUntilTimeout>
 801aac8:	4603      	mov	r3, r0
 801aaca:	2b00      	cmp	r3, #0
 801aacc:	d001      	beq.n	801aad2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801aace:	2303      	movs	r3, #3
 801aad0:	e022      	b.n	801ab18 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801aad2:	687b      	ldr	r3, [r7, #4]
 801aad4:	681b      	ldr	r3, [r3, #0]
 801aad6:	681b      	ldr	r3, [r3, #0]
 801aad8:	f003 0304 	and.w	r3, r3, #4
 801aadc:	2b04      	cmp	r3, #4
 801aade:	d10e      	bne.n	801aafe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801aae0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801aae4:	9300      	str	r3, [sp, #0]
 801aae6:	68fb      	ldr	r3, [r7, #12]
 801aae8:	2200      	movs	r2, #0
 801aaea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801aaee:	6878      	ldr	r0, [r7, #4]
 801aaf0:	f000 f816 	bl	801ab20 <UART_WaitOnFlagUntilTimeout>
 801aaf4:	4603      	mov	r3, r0
 801aaf6:	2b00      	cmp	r3, #0
 801aaf8:	d001      	beq.n	801aafe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801aafa:	2303      	movs	r3, #3
 801aafc:	e00c      	b.n	801ab18 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801aafe:	687b      	ldr	r3, [r7, #4]
 801ab00:	2220      	movs	r2, #32
 801ab02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	2220      	movs	r2, #32
 801ab0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 801ab0e:	687b      	ldr	r3, [r7, #4]
 801ab10:	2200      	movs	r2, #0
 801ab12:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 801ab16:	2300      	movs	r3, #0
}
 801ab18:	4618      	mov	r0, r3
 801ab1a:	3710      	adds	r7, #16
 801ab1c:	46bd      	mov	sp, r7
 801ab1e:	bd80      	pop	{r7, pc}

0801ab20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801ab20:	b580      	push	{r7, lr}
 801ab22:	b084      	sub	sp, #16
 801ab24:	af00      	add	r7, sp, #0
 801ab26:	60f8      	str	r0, [r7, #12]
 801ab28:	60b9      	str	r1, [r7, #8]
 801ab2a:	603b      	str	r3, [r7, #0]
 801ab2c:	4613      	mov	r3, r2
 801ab2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801ab30:	e062      	b.n	801abf8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801ab32:	69bb      	ldr	r3, [r7, #24]
 801ab34:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ab38:	d05e      	beq.n	801abf8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801ab3a:	f7f8 f9bf 	bl	8012ebc <HAL_GetTick>
 801ab3e:	4602      	mov	r2, r0
 801ab40:	683b      	ldr	r3, [r7, #0]
 801ab42:	1ad3      	subs	r3, r2, r3
 801ab44:	69ba      	ldr	r2, [r7, #24]
 801ab46:	429a      	cmp	r2, r3
 801ab48:	d302      	bcc.n	801ab50 <UART_WaitOnFlagUntilTimeout+0x30>
 801ab4a:	69bb      	ldr	r3, [r7, #24]
 801ab4c:	2b00      	cmp	r3, #0
 801ab4e:	d11d      	bne.n	801ab8c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 801ab50:	68fb      	ldr	r3, [r7, #12]
 801ab52:	681b      	ldr	r3, [r3, #0]
 801ab54:	681a      	ldr	r2, [r3, #0]
 801ab56:	68fb      	ldr	r3, [r7, #12]
 801ab58:	681b      	ldr	r3, [r3, #0]
 801ab5a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801ab5e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ab60:	68fb      	ldr	r3, [r7, #12]
 801ab62:	681b      	ldr	r3, [r3, #0]
 801ab64:	689a      	ldr	r2, [r3, #8]
 801ab66:	68fb      	ldr	r3, [r7, #12]
 801ab68:	681b      	ldr	r3, [r3, #0]
 801ab6a:	f022 0201 	bic.w	r2, r2, #1
 801ab6e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 801ab70:	68fb      	ldr	r3, [r7, #12]
 801ab72:	2220      	movs	r2, #32
 801ab74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 801ab78:	68fb      	ldr	r3, [r7, #12]
 801ab7a:	2220      	movs	r2, #32
 801ab7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 801ab80:	68fb      	ldr	r3, [r7, #12]
 801ab82:	2200      	movs	r2, #0
 801ab84:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 801ab88:	2303      	movs	r3, #3
 801ab8a:	e045      	b.n	801ac18 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801ab8c:	68fb      	ldr	r3, [r7, #12]
 801ab8e:	681b      	ldr	r3, [r3, #0]
 801ab90:	681b      	ldr	r3, [r3, #0]
 801ab92:	f003 0304 	and.w	r3, r3, #4
 801ab96:	2b00      	cmp	r3, #0
 801ab98:	d02e      	beq.n	801abf8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801ab9a:	68fb      	ldr	r3, [r7, #12]
 801ab9c:	681b      	ldr	r3, [r3, #0]
 801ab9e:	69db      	ldr	r3, [r3, #28]
 801aba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801aba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801aba8:	d126      	bne.n	801abf8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801abaa:	68fb      	ldr	r3, [r7, #12]
 801abac:	681b      	ldr	r3, [r3, #0]
 801abae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801abb2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 801abb4:	68fb      	ldr	r3, [r7, #12]
 801abb6:	681b      	ldr	r3, [r3, #0]
 801abb8:	681a      	ldr	r2, [r3, #0]
 801abba:	68fb      	ldr	r3, [r7, #12]
 801abbc:	681b      	ldr	r3, [r3, #0]
 801abbe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801abc2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801abc4:	68fb      	ldr	r3, [r7, #12]
 801abc6:	681b      	ldr	r3, [r3, #0]
 801abc8:	689a      	ldr	r2, [r3, #8]
 801abca:	68fb      	ldr	r3, [r7, #12]
 801abcc:	681b      	ldr	r3, [r3, #0]
 801abce:	f022 0201 	bic.w	r2, r2, #1
 801abd2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 801abd4:	68fb      	ldr	r3, [r7, #12]
 801abd6:	2220      	movs	r2, #32
 801abd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 801abdc:	68fb      	ldr	r3, [r7, #12]
 801abde:	2220      	movs	r2, #32
 801abe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801abe4:	68fb      	ldr	r3, [r7, #12]
 801abe6:	2220      	movs	r2, #32
 801abe8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801abec:	68fb      	ldr	r3, [r7, #12]
 801abee:	2200      	movs	r2, #0
 801abf0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 801abf4:	2303      	movs	r3, #3
 801abf6:	e00f      	b.n	801ac18 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801abf8:	68fb      	ldr	r3, [r7, #12]
 801abfa:	681b      	ldr	r3, [r3, #0]
 801abfc:	69da      	ldr	r2, [r3, #28]
 801abfe:	68bb      	ldr	r3, [r7, #8]
 801ac00:	4013      	ands	r3, r2
 801ac02:	68ba      	ldr	r2, [r7, #8]
 801ac04:	429a      	cmp	r2, r3
 801ac06:	bf0c      	ite	eq
 801ac08:	2301      	moveq	r3, #1
 801ac0a:	2300      	movne	r3, #0
 801ac0c:	b2db      	uxtb	r3, r3
 801ac0e:	461a      	mov	r2, r3
 801ac10:	79fb      	ldrb	r3, [r7, #7]
 801ac12:	429a      	cmp	r2, r3
 801ac14:	d08d      	beq.n	801ab32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801ac16:	2300      	movs	r3, #0
}
 801ac18:	4618      	mov	r0, r3
 801ac1a:	3710      	adds	r7, #16
 801ac1c:	46bd      	mov	sp, r7
 801ac1e:	bd80      	pop	{r7, pc}

0801ac20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801ac20:	b480      	push	{r7}
 801ac22:	b083      	sub	sp, #12
 801ac24:	af00      	add	r7, sp, #0
 801ac26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	681b      	ldr	r3, [r3, #0]
 801ac2c:	681a      	ldr	r2, [r3, #0]
 801ac2e:	687b      	ldr	r3, [r7, #4]
 801ac30:	681b      	ldr	r3, [r3, #0]
 801ac32:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801ac36:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801ac38:	687b      	ldr	r3, [r7, #4]
 801ac3a:	681b      	ldr	r3, [r3, #0]
 801ac3c:	6899      	ldr	r1, [r3, #8]
 801ac3e:	687b      	ldr	r3, [r7, #4]
 801ac40:	681a      	ldr	r2, [r3, #0]
 801ac42:	4b08      	ldr	r3, [pc, #32]	; (801ac64 <UART_EndRxTransfer+0x44>)
 801ac44:	400b      	ands	r3, r1
 801ac46:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801ac48:	687b      	ldr	r3, [r7, #4]
 801ac4a:	2220      	movs	r2, #32
 801ac4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801ac50:	687b      	ldr	r3, [r7, #4]
 801ac52:	2200      	movs	r2, #0
 801ac54:	66da      	str	r2, [r3, #108]	; 0x6c
}
 801ac56:	bf00      	nop
 801ac58:	370c      	adds	r7, #12
 801ac5a:	46bd      	mov	sp, r7
 801ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac60:	4770      	bx	lr
 801ac62:	bf00      	nop
 801ac64:	effffffe 	.word	0xeffffffe

0801ac68 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801ac68:	b580      	push	{r7, lr}
 801ac6a:	b084      	sub	sp, #16
 801ac6c:	af00      	add	r7, sp, #0
 801ac6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ac70:	687b      	ldr	r3, [r7, #4]
 801ac72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ac74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801ac76:	68fb      	ldr	r3, [r7, #12]
 801ac78:	2200      	movs	r2, #0
 801ac7a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801ac7e:	68fb      	ldr	r3, [r7, #12]
 801ac80:	2200      	movs	r2, #0
 801ac82:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801ac86:	68f8      	ldr	r0, [r7, #12]
 801ac88:	f7fd fcd8 	bl	801863c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801ac8c:	bf00      	nop
 801ac8e:	3710      	adds	r7, #16
 801ac90:	46bd      	mov	sp, r7
 801ac92:	bd80      	pop	{r7, pc}

0801ac94 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801ac94:	b580      	push	{r7, lr}
 801ac96:	b082      	sub	sp, #8
 801ac98:	af00      	add	r7, sp, #0
 801ac9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801ac9c:	687b      	ldr	r3, [r7, #4]
 801ac9e:	681b      	ldr	r3, [r3, #0]
 801aca0:	681a      	ldr	r2, [r3, #0]
 801aca2:	687b      	ldr	r3, [r7, #4]
 801aca4:	681b      	ldr	r3, [r3, #0]
 801aca6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801acaa:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801acac:	687b      	ldr	r3, [r7, #4]
 801acae:	2220      	movs	r2, #32
 801acb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801acb4:	687b      	ldr	r3, [r7, #4]
 801acb6:	2200      	movs	r2, #0
 801acb8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801acba:	6878      	ldr	r0, [r7, #4]
 801acbc:	f7fd fcb4 	bl	8018628 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801acc0:	bf00      	nop
 801acc2:	3708      	adds	r7, #8
 801acc4:	46bd      	mov	sp, r7
 801acc6:	bd80      	pop	{r7, pc}

0801acc8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801acc8:	b480      	push	{r7}
 801acca:	b083      	sub	sp, #12
 801accc:	af00      	add	r7, sp, #0
 801acce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801acd0:	bf00      	nop
 801acd2:	370c      	adds	r7, #12
 801acd4:	46bd      	mov	sp, r7
 801acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acda:	4770      	bx	lr

0801acdc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801acdc:	b480      	push	{r7}
 801acde:	b083      	sub	sp, #12
 801ace0:	af00      	add	r7, sp, #0
 801ace2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801ace4:	bf00      	nop
 801ace6:	370c      	adds	r7, #12
 801ace8:	46bd      	mov	sp, r7
 801acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acee:	4770      	bx	lr

0801acf0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801acf0:	b480      	push	{r7}
 801acf2:	b083      	sub	sp, #12
 801acf4:	af00      	add	r7, sp, #0
 801acf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801acf8:	bf00      	nop
 801acfa:	370c      	adds	r7, #12
 801acfc:	46bd      	mov	sp, r7
 801acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad02:	4770      	bx	lr

0801ad04 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801ad04:	b480      	push	{r7}
 801ad06:	b085      	sub	sp, #20
 801ad08:	af00      	add	r7, sp, #0
 801ad0a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801ad0c:	687b      	ldr	r3, [r7, #4]
 801ad0e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801ad12:	2b01      	cmp	r3, #1
 801ad14:	d101      	bne.n	801ad1a <HAL_UARTEx_DisableFifoMode+0x16>
 801ad16:	2302      	movs	r3, #2
 801ad18:	e027      	b.n	801ad6a <HAL_UARTEx_DisableFifoMode+0x66>
 801ad1a:	687b      	ldr	r3, [r7, #4]
 801ad1c:	2201      	movs	r2, #1
 801ad1e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	2224      	movs	r2, #36	; 0x24
 801ad26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801ad2a:	687b      	ldr	r3, [r7, #4]
 801ad2c:	681b      	ldr	r3, [r3, #0]
 801ad2e:	681b      	ldr	r3, [r3, #0]
 801ad30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801ad32:	687b      	ldr	r3, [r7, #4]
 801ad34:	681b      	ldr	r3, [r3, #0]
 801ad36:	681a      	ldr	r2, [r3, #0]
 801ad38:	687b      	ldr	r3, [r7, #4]
 801ad3a:	681b      	ldr	r3, [r3, #0]
 801ad3c:	f022 0201 	bic.w	r2, r2, #1
 801ad40:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801ad42:	68fb      	ldr	r3, [r7, #12]
 801ad44:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801ad48:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801ad4a:	687b      	ldr	r3, [r7, #4]
 801ad4c:	2200      	movs	r2, #0
 801ad4e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801ad50:	687b      	ldr	r3, [r7, #4]
 801ad52:	681b      	ldr	r3, [r3, #0]
 801ad54:	68fa      	ldr	r2, [r7, #12]
 801ad56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801ad58:	687b      	ldr	r3, [r7, #4]
 801ad5a:	2220      	movs	r2, #32
 801ad5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ad60:	687b      	ldr	r3, [r7, #4]
 801ad62:	2200      	movs	r2, #0
 801ad64:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 801ad68:	2300      	movs	r3, #0
}
 801ad6a:	4618      	mov	r0, r3
 801ad6c:	3714      	adds	r7, #20
 801ad6e:	46bd      	mov	sp, r7
 801ad70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad74:	4770      	bx	lr

0801ad76 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801ad76:	b580      	push	{r7, lr}
 801ad78:	b084      	sub	sp, #16
 801ad7a:	af00      	add	r7, sp, #0
 801ad7c:	6078      	str	r0, [r7, #4]
 801ad7e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801ad80:	687b      	ldr	r3, [r7, #4]
 801ad82:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801ad86:	2b01      	cmp	r3, #1
 801ad88:	d101      	bne.n	801ad8e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801ad8a:	2302      	movs	r3, #2
 801ad8c:	e02d      	b.n	801adea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801ad8e:	687b      	ldr	r3, [r7, #4]
 801ad90:	2201      	movs	r2, #1
 801ad92:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 801ad96:	687b      	ldr	r3, [r7, #4]
 801ad98:	2224      	movs	r2, #36	; 0x24
 801ad9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801ad9e:	687b      	ldr	r3, [r7, #4]
 801ada0:	681b      	ldr	r3, [r3, #0]
 801ada2:	681b      	ldr	r3, [r3, #0]
 801ada4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801ada6:	687b      	ldr	r3, [r7, #4]
 801ada8:	681b      	ldr	r3, [r3, #0]
 801adaa:	681a      	ldr	r2, [r3, #0]
 801adac:	687b      	ldr	r3, [r7, #4]
 801adae:	681b      	ldr	r3, [r3, #0]
 801adb0:	f022 0201 	bic.w	r2, r2, #1
 801adb4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801adb6:	687b      	ldr	r3, [r7, #4]
 801adb8:	681b      	ldr	r3, [r3, #0]
 801adba:	689b      	ldr	r3, [r3, #8]
 801adbc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801adc0:	687b      	ldr	r3, [r7, #4]
 801adc2:	681b      	ldr	r3, [r3, #0]
 801adc4:	683a      	ldr	r2, [r7, #0]
 801adc6:	430a      	orrs	r2, r1
 801adc8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801adca:	6878      	ldr	r0, [r7, #4]
 801adcc:	f000 f850 	bl	801ae70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801add0:	687b      	ldr	r3, [r7, #4]
 801add2:	681b      	ldr	r3, [r3, #0]
 801add4:	68fa      	ldr	r2, [r7, #12]
 801add6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801add8:	687b      	ldr	r3, [r7, #4]
 801adda:	2220      	movs	r2, #32
 801addc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ade0:	687b      	ldr	r3, [r7, #4]
 801ade2:	2200      	movs	r2, #0
 801ade4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 801ade8:	2300      	movs	r3, #0
}
 801adea:	4618      	mov	r0, r3
 801adec:	3710      	adds	r7, #16
 801adee:	46bd      	mov	sp, r7
 801adf0:	bd80      	pop	{r7, pc}

0801adf2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801adf2:	b580      	push	{r7, lr}
 801adf4:	b084      	sub	sp, #16
 801adf6:	af00      	add	r7, sp, #0
 801adf8:	6078      	str	r0, [r7, #4]
 801adfa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801adfc:	687b      	ldr	r3, [r7, #4]
 801adfe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801ae02:	2b01      	cmp	r3, #1
 801ae04:	d101      	bne.n	801ae0a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801ae06:	2302      	movs	r3, #2
 801ae08:	e02d      	b.n	801ae66 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801ae0a:	687b      	ldr	r3, [r7, #4]
 801ae0c:	2201      	movs	r2, #1
 801ae0e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 801ae12:	687b      	ldr	r3, [r7, #4]
 801ae14:	2224      	movs	r2, #36	; 0x24
 801ae16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801ae1a:	687b      	ldr	r3, [r7, #4]
 801ae1c:	681b      	ldr	r3, [r3, #0]
 801ae1e:	681b      	ldr	r3, [r3, #0]
 801ae20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801ae22:	687b      	ldr	r3, [r7, #4]
 801ae24:	681b      	ldr	r3, [r3, #0]
 801ae26:	681a      	ldr	r2, [r3, #0]
 801ae28:	687b      	ldr	r3, [r7, #4]
 801ae2a:	681b      	ldr	r3, [r3, #0]
 801ae2c:	f022 0201 	bic.w	r2, r2, #1
 801ae30:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801ae32:	687b      	ldr	r3, [r7, #4]
 801ae34:	681b      	ldr	r3, [r3, #0]
 801ae36:	689b      	ldr	r3, [r3, #8]
 801ae38:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801ae3c:	687b      	ldr	r3, [r7, #4]
 801ae3e:	681b      	ldr	r3, [r3, #0]
 801ae40:	683a      	ldr	r2, [r7, #0]
 801ae42:	430a      	orrs	r2, r1
 801ae44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801ae46:	6878      	ldr	r0, [r7, #4]
 801ae48:	f000 f812 	bl	801ae70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801ae4c:	687b      	ldr	r3, [r7, #4]
 801ae4e:	681b      	ldr	r3, [r3, #0]
 801ae50:	68fa      	ldr	r2, [r7, #12]
 801ae52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801ae54:	687b      	ldr	r3, [r7, #4]
 801ae56:	2220      	movs	r2, #32
 801ae58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ae5c:	687b      	ldr	r3, [r7, #4]
 801ae5e:	2200      	movs	r2, #0
 801ae60:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 801ae64:	2300      	movs	r3, #0
}
 801ae66:	4618      	mov	r0, r3
 801ae68:	3710      	adds	r7, #16
 801ae6a:	46bd      	mov	sp, r7
 801ae6c:	bd80      	pop	{r7, pc}
	...

0801ae70 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801ae70:	b480      	push	{r7}
 801ae72:	b089      	sub	sp, #36	; 0x24
 801ae74:	af00      	add	r7, sp, #0
 801ae76:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 801ae78:	4a2f      	ldr	r2, [pc, #188]	; (801af38 <UARTEx_SetNbDataToProcess+0xc8>)
 801ae7a:	f107 0314 	add.w	r3, r7, #20
 801ae7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ae82:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 801ae86:	4a2d      	ldr	r2, [pc, #180]	; (801af3c <UARTEx_SetNbDataToProcess+0xcc>)
 801ae88:	f107 030c 	add.w	r3, r7, #12
 801ae8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ae90:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801ae94:	687b      	ldr	r3, [r7, #4]
 801ae96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801ae98:	2b00      	cmp	r3, #0
 801ae9a:	d108      	bne.n	801aeae <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 801ae9c:	687b      	ldr	r3, [r7, #4]
 801ae9e:	2201      	movs	r2, #1
 801aea0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801aea4:	687b      	ldr	r3, [r7, #4]
 801aea6:	2201      	movs	r2, #1
 801aea8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801aeac:	e03d      	b.n	801af2a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801aeae:	2308      	movs	r3, #8
 801aeb0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801aeb2:	2308      	movs	r3, #8
 801aeb4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801aeb6:	687b      	ldr	r3, [r7, #4]
 801aeb8:	681b      	ldr	r3, [r3, #0]
 801aeba:	689b      	ldr	r3, [r3, #8]
 801aebc:	0e5b      	lsrs	r3, r3, #25
 801aebe:	b2db      	uxtb	r3, r3
 801aec0:	f003 0307 	and.w	r3, r3, #7
 801aec4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801aec6:	687b      	ldr	r3, [r7, #4]
 801aec8:	681b      	ldr	r3, [r3, #0]
 801aeca:	689b      	ldr	r3, [r3, #8]
 801aecc:	0f5b      	lsrs	r3, r3, #29
 801aece:	b2db      	uxtb	r3, r3
 801aed0:	f003 0307 	and.w	r3, r3, #7
 801aed4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 801aed6:	7fbb      	ldrb	r3, [r7, #30]
 801aed8:	7f3a      	ldrb	r2, [r7, #28]
 801aeda:	f107 0120 	add.w	r1, r7, #32
 801aede:	440a      	add	r2, r1
 801aee0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 801aee4:	fb02 f303 	mul.w	r3, r2, r3
 801aee8:	7f3a      	ldrb	r2, [r7, #28]
 801aeea:	f107 0120 	add.w	r1, r7, #32
 801aeee:	440a      	add	r2, r1
 801aef0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 801aef4:	fb93 f3f2 	sdiv	r3, r3, r2
 801aef8:	b29a      	uxth	r2, r3
 801aefa:	687b      	ldr	r3, [r7, #4]
 801aefc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 801af00:	7ffb      	ldrb	r3, [r7, #31]
 801af02:	7f7a      	ldrb	r2, [r7, #29]
 801af04:	f107 0120 	add.w	r1, r7, #32
 801af08:	440a      	add	r2, r1
 801af0a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 801af0e:	fb02 f303 	mul.w	r3, r2, r3
 801af12:	7f7a      	ldrb	r2, [r7, #29]
 801af14:	f107 0120 	add.w	r1, r7, #32
 801af18:	440a      	add	r2, r1
 801af1a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 801af1e:	fb93 f3f2 	sdiv	r3, r3, r2
 801af22:	b29a      	uxth	r2, r3
 801af24:	687b      	ldr	r3, [r7, #4]
 801af26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801af2a:	bf00      	nop
 801af2c:	3724      	adds	r7, #36	; 0x24
 801af2e:	46bd      	mov	sp, r7
 801af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af34:	4770      	bx	lr
 801af36:	bf00      	nop
 801af38:	0801f8f4 	.word	0x0801f8f4
 801af3c:	0801f8fc 	.word	0x0801f8fc

0801af40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801af40:	b084      	sub	sp, #16
 801af42:	b580      	push	{r7, lr}
 801af44:	b084      	sub	sp, #16
 801af46:	af00      	add	r7, sp, #0
 801af48:	6078      	str	r0, [r7, #4]
 801af4a:	f107 001c 	add.w	r0, r7, #28
 801af4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801af52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af54:	2b01      	cmp	r3, #1
 801af56:	d120      	bne.n	801af9a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801af58:	687b      	ldr	r3, [r7, #4]
 801af5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801af5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801af60:	687b      	ldr	r3, [r7, #4]
 801af62:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801af64:	687b      	ldr	r3, [r7, #4]
 801af66:	68da      	ldr	r2, [r3, #12]
 801af68:	4b25      	ldr	r3, [pc, #148]	; (801b000 <USB_CoreInit+0xc0>)
 801af6a:	4013      	ands	r3, r2
 801af6c:	687a      	ldr	r2, [r7, #4]
 801af6e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801af70:	687b      	ldr	r3, [r7, #4]
 801af72:	68db      	ldr	r3, [r3, #12]
 801af74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801af78:	687b      	ldr	r3, [r7, #4]
 801af7a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801af7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801af7e:	2b01      	cmp	r3, #1
 801af80:	d105      	bne.n	801af8e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801af82:	687b      	ldr	r3, [r7, #4]
 801af84:	68db      	ldr	r3, [r3, #12]
 801af86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801af8a:	687b      	ldr	r3, [r7, #4]
 801af8c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 801af8e:	6878      	ldr	r0, [r7, #4]
 801af90:	f001 fa66 	bl	801c460 <USB_CoreReset>
 801af94:	4603      	mov	r3, r0
 801af96:	73fb      	strb	r3, [r7, #15]
 801af98:	e01a      	b.n	801afd0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801af9a:	687b      	ldr	r3, [r7, #4]
 801af9c:	68db      	ldr	r3, [r3, #12]
 801af9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801afa2:	687b      	ldr	r3, [r7, #4]
 801afa4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 801afa6:	6878      	ldr	r0, [r7, #4]
 801afa8:	f001 fa5a 	bl	801c460 <USB_CoreReset>
 801afac:	4603      	mov	r3, r0
 801afae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801afb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801afb2:	2b00      	cmp	r3, #0
 801afb4:	d106      	bne.n	801afc4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801afb6:	687b      	ldr	r3, [r7, #4]
 801afb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801afba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801afbe:	687b      	ldr	r3, [r7, #4]
 801afc0:	639a      	str	r2, [r3, #56]	; 0x38
 801afc2:	e005      	b.n	801afd0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801afc4:	687b      	ldr	r3, [r7, #4]
 801afc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801afc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801afcc:	687b      	ldr	r3, [r7, #4]
 801afce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801afd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801afd2:	2b01      	cmp	r3, #1
 801afd4:	d10b      	bne.n	801afee <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801afd6:	687b      	ldr	r3, [r7, #4]
 801afd8:	689b      	ldr	r3, [r3, #8]
 801afda:	f043 0206 	orr.w	r2, r3, #6
 801afde:	687b      	ldr	r3, [r7, #4]
 801afe0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801afe2:	687b      	ldr	r3, [r7, #4]
 801afe4:	689b      	ldr	r3, [r3, #8]
 801afe6:	f043 0220 	orr.w	r2, r3, #32
 801afea:	687b      	ldr	r3, [r7, #4]
 801afec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801afee:	7bfb      	ldrb	r3, [r7, #15]
}
 801aff0:	4618      	mov	r0, r3
 801aff2:	3710      	adds	r7, #16
 801aff4:	46bd      	mov	sp, r7
 801aff6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801affa:	b004      	add	sp, #16
 801affc:	4770      	bx	lr
 801affe:	bf00      	nop
 801b000:	ffbdffbf 	.word	0xffbdffbf

0801b004 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801b004:	b480      	push	{r7}
 801b006:	b087      	sub	sp, #28
 801b008:	af00      	add	r7, sp, #0
 801b00a:	60f8      	str	r0, [r7, #12]
 801b00c:	60b9      	str	r1, [r7, #8]
 801b00e:	4613      	mov	r3, r2
 801b010:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801b012:	79fb      	ldrb	r3, [r7, #7]
 801b014:	2b02      	cmp	r3, #2
 801b016:	d165      	bne.n	801b0e4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801b018:	68bb      	ldr	r3, [r7, #8]
 801b01a:	4a41      	ldr	r2, [pc, #260]	; (801b120 <USB_SetTurnaroundTime+0x11c>)
 801b01c:	4293      	cmp	r3, r2
 801b01e:	d906      	bls.n	801b02e <USB_SetTurnaroundTime+0x2a>
 801b020:	68bb      	ldr	r3, [r7, #8]
 801b022:	4a40      	ldr	r2, [pc, #256]	; (801b124 <USB_SetTurnaroundTime+0x120>)
 801b024:	4293      	cmp	r3, r2
 801b026:	d802      	bhi.n	801b02e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801b028:	230f      	movs	r3, #15
 801b02a:	617b      	str	r3, [r7, #20]
 801b02c:	e062      	b.n	801b0f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801b02e:	68bb      	ldr	r3, [r7, #8]
 801b030:	4a3c      	ldr	r2, [pc, #240]	; (801b124 <USB_SetTurnaroundTime+0x120>)
 801b032:	4293      	cmp	r3, r2
 801b034:	d906      	bls.n	801b044 <USB_SetTurnaroundTime+0x40>
 801b036:	68bb      	ldr	r3, [r7, #8]
 801b038:	4a3b      	ldr	r2, [pc, #236]	; (801b128 <USB_SetTurnaroundTime+0x124>)
 801b03a:	4293      	cmp	r3, r2
 801b03c:	d802      	bhi.n	801b044 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801b03e:	230e      	movs	r3, #14
 801b040:	617b      	str	r3, [r7, #20]
 801b042:	e057      	b.n	801b0f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801b044:	68bb      	ldr	r3, [r7, #8]
 801b046:	4a38      	ldr	r2, [pc, #224]	; (801b128 <USB_SetTurnaroundTime+0x124>)
 801b048:	4293      	cmp	r3, r2
 801b04a:	d906      	bls.n	801b05a <USB_SetTurnaroundTime+0x56>
 801b04c:	68bb      	ldr	r3, [r7, #8]
 801b04e:	4a37      	ldr	r2, [pc, #220]	; (801b12c <USB_SetTurnaroundTime+0x128>)
 801b050:	4293      	cmp	r3, r2
 801b052:	d802      	bhi.n	801b05a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801b054:	230d      	movs	r3, #13
 801b056:	617b      	str	r3, [r7, #20]
 801b058:	e04c      	b.n	801b0f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801b05a:	68bb      	ldr	r3, [r7, #8]
 801b05c:	4a33      	ldr	r2, [pc, #204]	; (801b12c <USB_SetTurnaroundTime+0x128>)
 801b05e:	4293      	cmp	r3, r2
 801b060:	d906      	bls.n	801b070 <USB_SetTurnaroundTime+0x6c>
 801b062:	68bb      	ldr	r3, [r7, #8]
 801b064:	4a32      	ldr	r2, [pc, #200]	; (801b130 <USB_SetTurnaroundTime+0x12c>)
 801b066:	4293      	cmp	r3, r2
 801b068:	d802      	bhi.n	801b070 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801b06a:	230c      	movs	r3, #12
 801b06c:	617b      	str	r3, [r7, #20]
 801b06e:	e041      	b.n	801b0f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801b070:	68bb      	ldr	r3, [r7, #8]
 801b072:	4a2f      	ldr	r2, [pc, #188]	; (801b130 <USB_SetTurnaroundTime+0x12c>)
 801b074:	4293      	cmp	r3, r2
 801b076:	d906      	bls.n	801b086 <USB_SetTurnaroundTime+0x82>
 801b078:	68bb      	ldr	r3, [r7, #8]
 801b07a:	4a2e      	ldr	r2, [pc, #184]	; (801b134 <USB_SetTurnaroundTime+0x130>)
 801b07c:	4293      	cmp	r3, r2
 801b07e:	d802      	bhi.n	801b086 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 801b080:	230b      	movs	r3, #11
 801b082:	617b      	str	r3, [r7, #20]
 801b084:	e036      	b.n	801b0f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801b086:	68bb      	ldr	r3, [r7, #8]
 801b088:	4a2a      	ldr	r2, [pc, #168]	; (801b134 <USB_SetTurnaroundTime+0x130>)
 801b08a:	4293      	cmp	r3, r2
 801b08c:	d906      	bls.n	801b09c <USB_SetTurnaroundTime+0x98>
 801b08e:	68bb      	ldr	r3, [r7, #8]
 801b090:	4a29      	ldr	r2, [pc, #164]	; (801b138 <USB_SetTurnaroundTime+0x134>)
 801b092:	4293      	cmp	r3, r2
 801b094:	d802      	bhi.n	801b09c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801b096:	230a      	movs	r3, #10
 801b098:	617b      	str	r3, [r7, #20]
 801b09a:	e02b      	b.n	801b0f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801b09c:	68bb      	ldr	r3, [r7, #8]
 801b09e:	4a26      	ldr	r2, [pc, #152]	; (801b138 <USB_SetTurnaroundTime+0x134>)
 801b0a0:	4293      	cmp	r3, r2
 801b0a2:	d906      	bls.n	801b0b2 <USB_SetTurnaroundTime+0xae>
 801b0a4:	68bb      	ldr	r3, [r7, #8]
 801b0a6:	4a25      	ldr	r2, [pc, #148]	; (801b13c <USB_SetTurnaroundTime+0x138>)
 801b0a8:	4293      	cmp	r3, r2
 801b0aa:	d802      	bhi.n	801b0b2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801b0ac:	2309      	movs	r3, #9
 801b0ae:	617b      	str	r3, [r7, #20]
 801b0b0:	e020      	b.n	801b0f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801b0b2:	68bb      	ldr	r3, [r7, #8]
 801b0b4:	4a21      	ldr	r2, [pc, #132]	; (801b13c <USB_SetTurnaroundTime+0x138>)
 801b0b6:	4293      	cmp	r3, r2
 801b0b8:	d906      	bls.n	801b0c8 <USB_SetTurnaroundTime+0xc4>
 801b0ba:	68bb      	ldr	r3, [r7, #8]
 801b0bc:	4a20      	ldr	r2, [pc, #128]	; (801b140 <USB_SetTurnaroundTime+0x13c>)
 801b0be:	4293      	cmp	r3, r2
 801b0c0:	d802      	bhi.n	801b0c8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801b0c2:	2308      	movs	r3, #8
 801b0c4:	617b      	str	r3, [r7, #20]
 801b0c6:	e015      	b.n	801b0f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801b0c8:	68bb      	ldr	r3, [r7, #8]
 801b0ca:	4a1d      	ldr	r2, [pc, #116]	; (801b140 <USB_SetTurnaroundTime+0x13c>)
 801b0cc:	4293      	cmp	r3, r2
 801b0ce:	d906      	bls.n	801b0de <USB_SetTurnaroundTime+0xda>
 801b0d0:	68bb      	ldr	r3, [r7, #8]
 801b0d2:	4a1c      	ldr	r2, [pc, #112]	; (801b144 <USB_SetTurnaroundTime+0x140>)
 801b0d4:	4293      	cmp	r3, r2
 801b0d6:	d802      	bhi.n	801b0de <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 801b0d8:	2307      	movs	r3, #7
 801b0da:	617b      	str	r3, [r7, #20]
 801b0dc:	e00a      	b.n	801b0f4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801b0de:	2306      	movs	r3, #6
 801b0e0:	617b      	str	r3, [r7, #20]
 801b0e2:	e007      	b.n	801b0f4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801b0e4:	79fb      	ldrb	r3, [r7, #7]
 801b0e6:	2b00      	cmp	r3, #0
 801b0e8:	d102      	bne.n	801b0f0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801b0ea:	2309      	movs	r3, #9
 801b0ec:	617b      	str	r3, [r7, #20]
 801b0ee:	e001      	b.n	801b0f4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801b0f0:	2309      	movs	r3, #9
 801b0f2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801b0f4:	68fb      	ldr	r3, [r7, #12]
 801b0f6:	68db      	ldr	r3, [r3, #12]
 801b0f8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 801b0fc:	68fb      	ldr	r3, [r7, #12]
 801b0fe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801b100:	68fb      	ldr	r3, [r7, #12]
 801b102:	68da      	ldr	r2, [r3, #12]
 801b104:	697b      	ldr	r3, [r7, #20]
 801b106:	029b      	lsls	r3, r3, #10
 801b108:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 801b10c:	431a      	orrs	r2, r3
 801b10e:	68fb      	ldr	r3, [r7, #12]
 801b110:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801b112:	2300      	movs	r3, #0
}
 801b114:	4618      	mov	r0, r3
 801b116:	371c      	adds	r7, #28
 801b118:	46bd      	mov	sp, r7
 801b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b11e:	4770      	bx	lr
 801b120:	00d8acbf 	.word	0x00d8acbf
 801b124:	00e4e1bf 	.word	0x00e4e1bf
 801b128:	00f423ff 	.word	0x00f423ff
 801b12c:	0106737f 	.word	0x0106737f
 801b130:	011a499f 	.word	0x011a499f
 801b134:	01312cff 	.word	0x01312cff
 801b138:	014ca43f 	.word	0x014ca43f
 801b13c:	016e35ff 	.word	0x016e35ff
 801b140:	01a6ab1f 	.word	0x01a6ab1f
 801b144:	01e847ff 	.word	0x01e847ff

0801b148 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801b148:	b480      	push	{r7}
 801b14a:	b083      	sub	sp, #12
 801b14c:	af00      	add	r7, sp, #0
 801b14e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801b150:	687b      	ldr	r3, [r7, #4]
 801b152:	689b      	ldr	r3, [r3, #8]
 801b154:	f043 0201 	orr.w	r2, r3, #1
 801b158:	687b      	ldr	r3, [r7, #4]
 801b15a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801b15c:	2300      	movs	r3, #0
}
 801b15e:	4618      	mov	r0, r3
 801b160:	370c      	adds	r7, #12
 801b162:	46bd      	mov	sp, r7
 801b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b168:	4770      	bx	lr

0801b16a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801b16a:	b480      	push	{r7}
 801b16c:	b083      	sub	sp, #12
 801b16e:	af00      	add	r7, sp, #0
 801b170:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801b172:	687b      	ldr	r3, [r7, #4]
 801b174:	689b      	ldr	r3, [r3, #8]
 801b176:	f023 0201 	bic.w	r2, r3, #1
 801b17a:	687b      	ldr	r3, [r7, #4]
 801b17c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801b17e:	2300      	movs	r3, #0
}
 801b180:	4618      	mov	r0, r3
 801b182:	370c      	adds	r7, #12
 801b184:	46bd      	mov	sp, r7
 801b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b18a:	4770      	bx	lr

0801b18c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801b18c:	b580      	push	{r7, lr}
 801b18e:	b082      	sub	sp, #8
 801b190:	af00      	add	r7, sp, #0
 801b192:	6078      	str	r0, [r7, #4]
 801b194:	460b      	mov	r3, r1
 801b196:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801b198:	687b      	ldr	r3, [r7, #4]
 801b19a:	68db      	ldr	r3, [r3, #12]
 801b19c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801b1a0:	687b      	ldr	r3, [r7, #4]
 801b1a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801b1a4:	78fb      	ldrb	r3, [r7, #3]
 801b1a6:	2b01      	cmp	r3, #1
 801b1a8:	d106      	bne.n	801b1b8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801b1aa:	687b      	ldr	r3, [r7, #4]
 801b1ac:	68db      	ldr	r3, [r3, #12]
 801b1ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801b1b2:	687b      	ldr	r3, [r7, #4]
 801b1b4:	60da      	str	r2, [r3, #12]
 801b1b6:	e00b      	b.n	801b1d0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 801b1b8:	78fb      	ldrb	r3, [r7, #3]
 801b1ba:	2b00      	cmp	r3, #0
 801b1bc:	d106      	bne.n	801b1cc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801b1be:	687b      	ldr	r3, [r7, #4]
 801b1c0:	68db      	ldr	r3, [r3, #12]
 801b1c2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801b1c6:	687b      	ldr	r3, [r7, #4]
 801b1c8:	60da      	str	r2, [r3, #12]
 801b1ca:	e001      	b.n	801b1d0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 801b1cc:	2301      	movs	r3, #1
 801b1ce:	e003      	b.n	801b1d8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 801b1d0:	2032      	movs	r0, #50	; 0x32
 801b1d2:	f7f7 fe7f 	bl	8012ed4 <HAL_Delay>

  return HAL_OK;
 801b1d6:	2300      	movs	r3, #0
}
 801b1d8:	4618      	mov	r0, r3
 801b1da:	3708      	adds	r7, #8
 801b1dc:	46bd      	mov	sp, r7
 801b1de:	bd80      	pop	{r7, pc}

0801b1e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801b1e0:	b084      	sub	sp, #16
 801b1e2:	b580      	push	{r7, lr}
 801b1e4:	b086      	sub	sp, #24
 801b1e6:	af00      	add	r7, sp, #0
 801b1e8:	6078      	str	r0, [r7, #4]
 801b1ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801b1ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801b1f2:	2300      	movs	r3, #0
 801b1f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b1f6:	687b      	ldr	r3, [r7, #4]
 801b1f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801b1fa:	2300      	movs	r3, #0
 801b1fc:	613b      	str	r3, [r7, #16]
 801b1fe:	e009      	b.n	801b214 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801b200:	687a      	ldr	r2, [r7, #4]
 801b202:	693b      	ldr	r3, [r7, #16]
 801b204:	3340      	adds	r3, #64	; 0x40
 801b206:	009b      	lsls	r3, r3, #2
 801b208:	4413      	add	r3, r2
 801b20a:	2200      	movs	r2, #0
 801b20c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801b20e:	693b      	ldr	r3, [r7, #16]
 801b210:	3301      	adds	r3, #1
 801b212:	613b      	str	r3, [r7, #16]
 801b214:	693b      	ldr	r3, [r7, #16]
 801b216:	2b0e      	cmp	r3, #14
 801b218:	d9f2      	bls.n	801b200 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801b21a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b21c:	2b00      	cmp	r3, #0
 801b21e:	d11c      	bne.n	801b25a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801b220:	68fb      	ldr	r3, [r7, #12]
 801b222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b226:	685b      	ldr	r3, [r3, #4]
 801b228:	68fa      	ldr	r2, [r7, #12]
 801b22a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801b22e:	f043 0302 	orr.w	r3, r3, #2
 801b232:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801b234:	687b      	ldr	r3, [r7, #4]
 801b236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b238:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801b23c:	687b      	ldr	r3, [r7, #4]
 801b23e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801b240:	687b      	ldr	r3, [r7, #4]
 801b242:	681b      	ldr	r3, [r3, #0]
 801b244:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801b248:	687b      	ldr	r3, [r7, #4]
 801b24a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801b24c:	687b      	ldr	r3, [r7, #4]
 801b24e:	681b      	ldr	r3, [r3, #0]
 801b250:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801b254:	687b      	ldr	r3, [r7, #4]
 801b256:	601a      	str	r2, [r3, #0]
 801b258:	e005      	b.n	801b266 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801b25a:	687b      	ldr	r3, [r7, #4]
 801b25c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b25e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801b262:	687b      	ldr	r3, [r7, #4]
 801b264:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801b266:	68fb      	ldr	r3, [r7, #12]
 801b268:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801b26c:	461a      	mov	r2, r3
 801b26e:	2300      	movs	r3, #0
 801b270:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801b272:	68fb      	ldr	r3, [r7, #12]
 801b274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b278:	4619      	mov	r1, r3
 801b27a:	68fb      	ldr	r3, [r7, #12]
 801b27c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b280:	461a      	mov	r2, r3
 801b282:	680b      	ldr	r3, [r1, #0]
 801b284:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801b286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b288:	2b01      	cmp	r3, #1
 801b28a:	d10c      	bne.n	801b2a6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801b28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b28e:	2b00      	cmp	r3, #0
 801b290:	d104      	bne.n	801b29c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801b292:	2100      	movs	r1, #0
 801b294:	6878      	ldr	r0, [r7, #4]
 801b296:	f000 f949 	bl	801b52c <USB_SetDevSpeed>
 801b29a:	e008      	b.n	801b2ae <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801b29c:	2101      	movs	r1, #1
 801b29e:	6878      	ldr	r0, [r7, #4]
 801b2a0:	f000 f944 	bl	801b52c <USB_SetDevSpeed>
 801b2a4:	e003      	b.n	801b2ae <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801b2a6:	2103      	movs	r1, #3
 801b2a8:	6878      	ldr	r0, [r7, #4]
 801b2aa:	f000 f93f 	bl	801b52c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801b2ae:	2110      	movs	r1, #16
 801b2b0:	6878      	ldr	r0, [r7, #4]
 801b2b2:	f000 f8f3 	bl	801b49c <USB_FlushTxFifo>
 801b2b6:	4603      	mov	r3, r0
 801b2b8:	2b00      	cmp	r3, #0
 801b2ba:	d001      	beq.n	801b2c0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 801b2bc:	2301      	movs	r3, #1
 801b2be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801b2c0:	6878      	ldr	r0, [r7, #4]
 801b2c2:	f000 f911 	bl	801b4e8 <USB_FlushRxFifo>
 801b2c6:	4603      	mov	r3, r0
 801b2c8:	2b00      	cmp	r3, #0
 801b2ca:	d001      	beq.n	801b2d0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 801b2cc:	2301      	movs	r3, #1
 801b2ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801b2d0:	68fb      	ldr	r3, [r7, #12]
 801b2d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b2d6:	461a      	mov	r2, r3
 801b2d8:	2300      	movs	r3, #0
 801b2da:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801b2dc:	68fb      	ldr	r3, [r7, #12]
 801b2de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b2e2:	461a      	mov	r2, r3
 801b2e4:	2300      	movs	r3, #0
 801b2e6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801b2e8:	68fb      	ldr	r3, [r7, #12]
 801b2ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b2ee:	461a      	mov	r2, r3
 801b2f0:	2300      	movs	r3, #0
 801b2f2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801b2f4:	2300      	movs	r3, #0
 801b2f6:	613b      	str	r3, [r7, #16]
 801b2f8:	e043      	b.n	801b382 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801b2fa:	693b      	ldr	r3, [r7, #16]
 801b2fc:	015a      	lsls	r2, r3, #5
 801b2fe:	68fb      	ldr	r3, [r7, #12]
 801b300:	4413      	add	r3, r2
 801b302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b306:	681b      	ldr	r3, [r3, #0]
 801b308:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801b30c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801b310:	d118      	bne.n	801b344 <USB_DevInit+0x164>
    {
      if (i == 0U)
 801b312:	693b      	ldr	r3, [r7, #16]
 801b314:	2b00      	cmp	r3, #0
 801b316:	d10a      	bne.n	801b32e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801b318:	693b      	ldr	r3, [r7, #16]
 801b31a:	015a      	lsls	r2, r3, #5
 801b31c:	68fb      	ldr	r3, [r7, #12]
 801b31e:	4413      	add	r3, r2
 801b320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b324:	461a      	mov	r2, r3
 801b326:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801b32a:	6013      	str	r3, [r2, #0]
 801b32c:	e013      	b.n	801b356 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801b32e:	693b      	ldr	r3, [r7, #16]
 801b330:	015a      	lsls	r2, r3, #5
 801b332:	68fb      	ldr	r3, [r7, #12]
 801b334:	4413      	add	r3, r2
 801b336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b33a:	461a      	mov	r2, r3
 801b33c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801b340:	6013      	str	r3, [r2, #0]
 801b342:	e008      	b.n	801b356 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801b344:	693b      	ldr	r3, [r7, #16]
 801b346:	015a      	lsls	r2, r3, #5
 801b348:	68fb      	ldr	r3, [r7, #12]
 801b34a:	4413      	add	r3, r2
 801b34c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b350:	461a      	mov	r2, r3
 801b352:	2300      	movs	r3, #0
 801b354:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801b356:	693b      	ldr	r3, [r7, #16]
 801b358:	015a      	lsls	r2, r3, #5
 801b35a:	68fb      	ldr	r3, [r7, #12]
 801b35c:	4413      	add	r3, r2
 801b35e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b362:	461a      	mov	r2, r3
 801b364:	2300      	movs	r3, #0
 801b366:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801b368:	693b      	ldr	r3, [r7, #16]
 801b36a:	015a      	lsls	r2, r3, #5
 801b36c:	68fb      	ldr	r3, [r7, #12]
 801b36e:	4413      	add	r3, r2
 801b370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b374:	461a      	mov	r2, r3
 801b376:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801b37a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801b37c:	693b      	ldr	r3, [r7, #16]
 801b37e:	3301      	adds	r3, #1
 801b380:	613b      	str	r3, [r7, #16]
 801b382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b384:	693a      	ldr	r2, [r7, #16]
 801b386:	429a      	cmp	r2, r3
 801b388:	d3b7      	bcc.n	801b2fa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801b38a:	2300      	movs	r3, #0
 801b38c:	613b      	str	r3, [r7, #16]
 801b38e:	e043      	b.n	801b418 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801b390:	693b      	ldr	r3, [r7, #16]
 801b392:	015a      	lsls	r2, r3, #5
 801b394:	68fb      	ldr	r3, [r7, #12]
 801b396:	4413      	add	r3, r2
 801b398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b39c:	681b      	ldr	r3, [r3, #0]
 801b39e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801b3a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801b3a6:	d118      	bne.n	801b3da <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 801b3a8:	693b      	ldr	r3, [r7, #16]
 801b3aa:	2b00      	cmp	r3, #0
 801b3ac:	d10a      	bne.n	801b3c4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801b3ae:	693b      	ldr	r3, [r7, #16]
 801b3b0:	015a      	lsls	r2, r3, #5
 801b3b2:	68fb      	ldr	r3, [r7, #12]
 801b3b4:	4413      	add	r3, r2
 801b3b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b3ba:	461a      	mov	r2, r3
 801b3bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801b3c0:	6013      	str	r3, [r2, #0]
 801b3c2:	e013      	b.n	801b3ec <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801b3c4:	693b      	ldr	r3, [r7, #16]
 801b3c6:	015a      	lsls	r2, r3, #5
 801b3c8:	68fb      	ldr	r3, [r7, #12]
 801b3ca:	4413      	add	r3, r2
 801b3cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b3d0:	461a      	mov	r2, r3
 801b3d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801b3d6:	6013      	str	r3, [r2, #0]
 801b3d8:	e008      	b.n	801b3ec <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801b3da:	693b      	ldr	r3, [r7, #16]
 801b3dc:	015a      	lsls	r2, r3, #5
 801b3de:	68fb      	ldr	r3, [r7, #12]
 801b3e0:	4413      	add	r3, r2
 801b3e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b3e6:	461a      	mov	r2, r3
 801b3e8:	2300      	movs	r3, #0
 801b3ea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801b3ec:	693b      	ldr	r3, [r7, #16]
 801b3ee:	015a      	lsls	r2, r3, #5
 801b3f0:	68fb      	ldr	r3, [r7, #12]
 801b3f2:	4413      	add	r3, r2
 801b3f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b3f8:	461a      	mov	r2, r3
 801b3fa:	2300      	movs	r3, #0
 801b3fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801b3fe:	693b      	ldr	r3, [r7, #16]
 801b400:	015a      	lsls	r2, r3, #5
 801b402:	68fb      	ldr	r3, [r7, #12]
 801b404:	4413      	add	r3, r2
 801b406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b40a:	461a      	mov	r2, r3
 801b40c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801b410:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801b412:	693b      	ldr	r3, [r7, #16]
 801b414:	3301      	adds	r3, #1
 801b416:	613b      	str	r3, [r7, #16]
 801b418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b41a:	693a      	ldr	r2, [r7, #16]
 801b41c:	429a      	cmp	r2, r3
 801b41e:	d3b7      	bcc.n	801b390 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801b420:	68fb      	ldr	r3, [r7, #12]
 801b422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b426:	691b      	ldr	r3, [r3, #16]
 801b428:	68fa      	ldr	r2, [r7, #12]
 801b42a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801b42e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b432:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801b434:	687b      	ldr	r3, [r7, #4]
 801b436:	2200      	movs	r2, #0
 801b438:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801b43a:	687b      	ldr	r3, [r7, #4]
 801b43c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801b440:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801b442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b444:	2b00      	cmp	r3, #0
 801b446:	d105      	bne.n	801b454 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801b448:	687b      	ldr	r3, [r7, #4]
 801b44a:	699b      	ldr	r3, [r3, #24]
 801b44c:	f043 0210 	orr.w	r2, r3, #16
 801b450:	687b      	ldr	r3, [r7, #4]
 801b452:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801b454:	687b      	ldr	r3, [r7, #4]
 801b456:	699a      	ldr	r2, [r3, #24]
 801b458:	4b0e      	ldr	r3, [pc, #56]	; (801b494 <USB_DevInit+0x2b4>)
 801b45a:	4313      	orrs	r3, r2
 801b45c:	687a      	ldr	r2, [r7, #4]
 801b45e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801b460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b462:	2b00      	cmp	r3, #0
 801b464:	d005      	beq.n	801b472 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801b466:	687b      	ldr	r3, [r7, #4]
 801b468:	699b      	ldr	r3, [r3, #24]
 801b46a:	f043 0208 	orr.w	r2, r3, #8
 801b46e:	687b      	ldr	r3, [r7, #4]
 801b470:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801b472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b474:	2b01      	cmp	r3, #1
 801b476:	d105      	bne.n	801b484 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801b478:	687b      	ldr	r3, [r7, #4]
 801b47a:	699a      	ldr	r2, [r3, #24]
 801b47c:	4b06      	ldr	r3, [pc, #24]	; (801b498 <USB_DevInit+0x2b8>)
 801b47e:	4313      	orrs	r3, r2
 801b480:	687a      	ldr	r2, [r7, #4]
 801b482:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801b484:	7dfb      	ldrb	r3, [r7, #23]
}
 801b486:	4618      	mov	r0, r3
 801b488:	3718      	adds	r7, #24
 801b48a:	46bd      	mov	sp, r7
 801b48c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801b490:	b004      	add	sp, #16
 801b492:	4770      	bx	lr
 801b494:	803c3800 	.word	0x803c3800
 801b498:	40000004 	.word	0x40000004

0801b49c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801b49c:	b480      	push	{r7}
 801b49e:	b085      	sub	sp, #20
 801b4a0:	af00      	add	r7, sp, #0
 801b4a2:	6078      	str	r0, [r7, #4]
 801b4a4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 801b4a6:	2300      	movs	r3, #0
 801b4a8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801b4aa:	683b      	ldr	r3, [r7, #0]
 801b4ac:	019b      	lsls	r3, r3, #6
 801b4ae:	f043 0220 	orr.w	r2, r3, #32
 801b4b2:	687b      	ldr	r3, [r7, #4]
 801b4b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801b4b6:	68fb      	ldr	r3, [r7, #12]
 801b4b8:	3301      	adds	r3, #1
 801b4ba:	60fb      	str	r3, [r7, #12]
 801b4bc:	68fb      	ldr	r3, [r7, #12]
 801b4be:	4a09      	ldr	r2, [pc, #36]	; (801b4e4 <USB_FlushTxFifo+0x48>)
 801b4c0:	4293      	cmp	r3, r2
 801b4c2:	d901      	bls.n	801b4c8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 801b4c4:	2303      	movs	r3, #3
 801b4c6:	e006      	b.n	801b4d6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801b4c8:	687b      	ldr	r3, [r7, #4]
 801b4ca:	691b      	ldr	r3, [r3, #16]
 801b4cc:	f003 0320 	and.w	r3, r3, #32
 801b4d0:	2b20      	cmp	r3, #32
 801b4d2:	d0f0      	beq.n	801b4b6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 801b4d4:	2300      	movs	r3, #0
}
 801b4d6:	4618      	mov	r0, r3
 801b4d8:	3714      	adds	r7, #20
 801b4da:	46bd      	mov	sp, r7
 801b4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4e0:	4770      	bx	lr
 801b4e2:	bf00      	nop
 801b4e4:	00030d40 	.word	0x00030d40

0801b4e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801b4e8:	b480      	push	{r7}
 801b4ea:	b085      	sub	sp, #20
 801b4ec:	af00      	add	r7, sp, #0
 801b4ee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 801b4f0:	2300      	movs	r3, #0
 801b4f2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801b4f4:	687b      	ldr	r3, [r7, #4]
 801b4f6:	2210      	movs	r2, #16
 801b4f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801b4fa:	68fb      	ldr	r3, [r7, #12]
 801b4fc:	3301      	adds	r3, #1
 801b4fe:	60fb      	str	r3, [r7, #12]
 801b500:	68fb      	ldr	r3, [r7, #12]
 801b502:	4a09      	ldr	r2, [pc, #36]	; (801b528 <USB_FlushRxFifo+0x40>)
 801b504:	4293      	cmp	r3, r2
 801b506:	d901      	bls.n	801b50c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 801b508:	2303      	movs	r3, #3
 801b50a:	e006      	b.n	801b51a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801b50c:	687b      	ldr	r3, [r7, #4]
 801b50e:	691b      	ldr	r3, [r3, #16]
 801b510:	f003 0310 	and.w	r3, r3, #16
 801b514:	2b10      	cmp	r3, #16
 801b516:	d0f0      	beq.n	801b4fa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 801b518:	2300      	movs	r3, #0
}
 801b51a:	4618      	mov	r0, r3
 801b51c:	3714      	adds	r7, #20
 801b51e:	46bd      	mov	sp, r7
 801b520:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b524:	4770      	bx	lr
 801b526:	bf00      	nop
 801b528:	00030d40 	.word	0x00030d40

0801b52c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801b52c:	b480      	push	{r7}
 801b52e:	b085      	sub	sp, #20
 801b530:	af00      	add	r7, sp, #0
 801b532:	6078      	str	r0, [r7, #4]
 801b534:	460b      	mov	r3, r1
 801b536:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b538:	687b      	ldr	r3, [r7, #4]
 801b53a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801b53c:	68fb      	ldr	r3, [r7, #12]
 801b53e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b542:	681a      	ldr	r2, [r3, #0]
 801b544:	78fb      	ldrb	r3, [r7, #3]
 801b546:	68f9      	ldr	r1, [r7, #12]
 801b548:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b54c:	4313      	orrs	r3, r2
 801b54e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801b550:	2300      	movs	r3, #0
}
 801b552:	4618      	mov	r0, r3
 801b554:	3714      	adds	r7, #20
 801b556:	46bd      	mov	sp, r7
 801b558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b55c:	4770      	bx	lr

0801b55e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801b55e:	b480      	push	{r7}
 801b560:	b087      	sub	sp, #28
 801b562:	af00      	add	r7, sp, #0
 801b564:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b566:	687b      	ldr	r3, [r7, #4]
 801b568:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801b56a:	693b      	ldr	r3, [r7, #16]
 801b56c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b570:	689b      	ldr	r3, [r3, #8]
 801b572:	f003 0306 	and.w	r3, r3, #6
 801b576:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801b578:	68fb      	ldr	r3, [r7, #12]
 801b57a:	2b00      	cmp	r3, #0
 801b57c:	d102      	bne.n	801b584 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801b57e:	2300      	movs	r3, #0
 801b580:	75fb      	strb	r3, [r7, #23]
 801b582:	e00a      	b.n	801b59a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801b584:	68fb      	ldr	r3, [r7, #12]
 801b586:	2b02      	cmp	r3, #2
 801b588:	d002      	beq.n	801b590 <USB_GetDevSpeed+0x32>
 801b58a:	68fb      	ldr	r3, [r7, #12]
 801b58c:	2b06      	cmp	r3, #6
 801b58e:	d102      	bne.n	801b596 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801b590:	2302      	movs	r3, #2
 801b592:	75fb      	strb	r3, [r7, #23]
 801b594:	e001      	b.n	801b59a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801b596:	230f      	movs	r3, #15
 801b598:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801b59a:	7dfb      	ldrb	r3, [r7, #23]
}
 801b59c:	4618      	mov	r0, r3
 801b59e:	371c      	adds	r7, #28
 801b5a0:	46bd      	mov	sp, r7
 801b5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5a6:	4770      	bx	lr

0801b5a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801b5a8:	b480      	push	{r7}
 801b5aa:	b085      	sub	sp, #20
 801b5ac:	af00      	add	r7, sp, #0
 801b5ae:	6078      	str	r0, [r7, #4]
 801b5b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b5b2:	687b      	ldr	r3, [r7, #4]
 801b5b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801b5b6:	683b      	ldr	r3, [r7, #0]
 801b5b8:	781b      	ldrb	r3, [r3, #0]
 801b5ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801b5bc:	683b      	ldr	r3, [r7, #0]
 801b5be:	785b      	ldrb	r3, [r3, #1]
 801b5c0:	2b01      	cmp	r3, #1
 801b5c2:	d139      	bne.n	801b638 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801b5c4:	68fb      	ldr	r3, [r7, #12]
 801b5c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b5ca:	69da      	ldr	r2, [r3, #28]
 801b5cc:	683b      	ldr	r3, [r7, #0]
 801b5ce:	781b      	ldrb	r3, [r3, #0]
 801b5d0:	f003 030f 	and.w	r3, r3, #15
 801b5d4:	2101      	movs	r1, #1
 801b5d6:	fa01 f303 	lsl.w	r3, r1, r3
 801b5da:	b29b      	uxth	r3, r3
 801b5dc:	68f9      	ldr	r1, [r7, #12]
 801b5de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b5e2:	4313      	orrs	r3, r2
 801b5e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801b5e6:	68bb      	ldr	r3, [r7, #8]
 801b5e8:	015a      	lsls	r2, r3, #5
 801b5ea:	68fb      	ldr	r3, [r7, #12]
 801b5ec:	4413      	add	r3, r2
 801b5ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b5f2:	681b      	ldr	r3, [r3, #0]
 801b5f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801b5f8:	2b00      	cmp	r3, #0
 801b5fa:	d153      	bne.n	801b6a4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801b5fc:	68bb      	ldr	r3, [r7, #8]
 801b5fe:	015a      	lsls	r2, r3, #5
 801b600:	68fb      	ldr	r3, [r7, #12]
 801b602:	4413      	add	r3, r2
 801b604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b608:	681a      	ldr	r2, [r3, #0]
 801b60a:	683b      	ldr	r3, [r7, #0]
 801b60c:	689b      	ldr	r3, [r3, #8]
 801b60e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801b612:	683b      	ldr	r3, [r7, #0]
 801b614:	78db      	ldrb	r3, [r3, #3]
 801b616:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801b618:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801b61a:	68bb      	ldr	r3, [r7, #8]
 801b61c:	059b      	lsls	r3, r3, #22
 801b61e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801b620:	431a      	orrs	r2, r3
 801b622:	68bb      	ldr	r3, [r7, #8]
 801b624:	0159      	lsls	r1, r3, #5
 801b626:	68fb      	ldr	r3, [r7, #12]
 801b628:	440b      	add	r3, r1
 801b62a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b62e:	4619      	mov	r1, r3
 801b630:	4b20      	ldr	r3, [pc, #128]	; (801b6b4 <USB_ActivateEndpoint+0x10c>)
 801b632:	4313      	orrs	r3, r2
 801b634:	600b      	str	r3, [r1, #0]
 801b636:	e035      	b.n	801b6a4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801b638:	68fb      	ldr	r3, [r7, #12]
 801b63a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b63e:	69da      	ldr	r2, [r3, #28]
 801b640:	683b      	ldr	r3, [r7, #0]
 801b642:	781b      	ldrb	r3, [r3, #0]
 801b644:	f003 030f 	and.w	r3, r3, #15
 801b648:	2101      	movs	r1, #1
 801b64a:	fa01 f303 	lsl.w	r3, r1, r3
 801b64e:	041b      	lsls	r3, r3, #16
 801b650:	68f9      	ldr	r1, [r7, #12]
 801b652:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b656:	4313      	orrs	r3, r2
 801b658:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801b65a:	68bb      	ldr	r3, [r7, #8]
 801b65c:	015a      	lsls	r2, r3, #5
 801b65e:	68fb      	ldr	r3, [r7, #12]
 801b660:	4413      	add	r3, r2
 801b662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b666:	681b      	ldr	r3, [r3, #0]
 801b668:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801b66c:	2b00      	cmp	r3, #0
 801b66e:	d119      	bne.n	801b6a4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801b670:	68bb      	ldr	r3, [r7, #8]
 801b672:	015a      	lsls	r2, r3, #5
 801b674:	68fb      	ldr	r3, [r7, #12]
 801b676:	4413      	add	r3, r2
 801b678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b67c:	681a      	ldr	r2, [r3, #0]
 801b67e:	683b      	ldr	r3, [r7, #0]
 801b680:	689b      	ldr	r3, [r3, #8]
 801b682:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801b686:	683b      	ldr	r3, [r7, #0]
 801b688:	78db      	ldrb	r3, [r3, #3]
 801b68a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801b68c:	430b      	orrs	r3, r1
 801b68e:	431a      	orrs	r2, r3
 801b690:	68bb      	ldr	r3, [r7, #8]
 801b692:	0159      	lsls	r1, r3, #5
 801b694:	68fb      	ldr	r3, [r7, #12]
 801b696:	440b      	add	r3, r1
 801b698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b69c:	4619      	mov	r1, r3
 801b69e:	4b05      	ldr	r3, [pc, #20]	; (801b6b4 <USB_ActivateEndpoint+0x10c>)
 801b6a0:	4313      	orrs	r3, r2
 801b6a2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801b6a4:	2300      	movs	r3, #0
}
 801b6a6:	4618      	mov	r0, r3
 801b6a8:	3714      	adds	r7, #20
 801b6aa:	46bd      	mov	sp, r7
 801b6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6b0:	4770      	bx	lr
 801b6b2:	bf00      	nop
 801b6b4:	10008000 	.word	0x10008000

0801b6b8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801b6b8:	b480      	push	{r7}
 801b6ba:	b085      	sub	sp, #20
 801b6bc:	af00      	add	r7, sp, #0
 801b6be:	6078      	str	r0, [r7, #4]
 801b6c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b6c2:	687b      	ldr	r3, [r7, #4]
 801b6c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801b6c6:	683b      	ldr	r3, [r7, #0]
 801b6c8:	781b      	ldrb	r3, [r3, #0]
 801b6ca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801b6cc:	683b      	ldr	r3, [r7, #0]
 801b6ce:	785b      	ldrb	r3, [r3, #1]
 801b6d0:	2b01      	cmp	r3, #1
 801b6d2:	d135      	bne.n	801b740 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801b6d4:	68fb      	ldr	r3, [r7, #12]
 801b6d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b6da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801b6dc:	683b      	ldr	r3, [r7, #0]
 801b6de:	781b      	ldrb	r3, [r3, #0]
 801b6e0:	f003 030f 	and.w	r3, r3, #15
 801b6e4:	2101      	movs	r1, #1
 801b6e6:	fa01 f303 	lsl.w	r3, r1, r3
 801b6ea:	b29b      	uxth	r3, r3
 801b6ec:	43db      	mvns	r3, r3
 801b6ee:	68f9      	ldr	r1, [r7, #12]
 801b6f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b6f4:	4013      	ands	r3, r2
 801b6f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801b6f8:	68fb      	ldr	r3, [r7, #12]
 801b6fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b6fe:	69da      	ldr	r2, [r3, #28]
 801b700:	683b      	ldr	r3, [r7, #0]
 801b702:	781b      	ldrb	r3, [r3, #0]
 801b704:	f003 030f 	and.w	r3, r3, #15
 801b708:	2101      	movs	r1, #1
 801b70a:	fa01 f303 	lsl.w	r3, r1, r3
 801b70e:	b29b      	uxth	r3, r3
 801b710:	43db      	mvns	r3, r3
 801b712:	68f9      	ldr	r1, [r7, #12]
 801b714:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b718:	4013      	ands	r3, r2
 801b71a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801b71c:	68bb      	ldr	r3, [r7, #8]
 801b71e:	015a      	lsls	r2, r3, #5
 801b720:	68fb      	ldr	r3, [r7, #12]
 801b722:	4413      	add	r3, r2
 801b724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b728:	681a      	ldr	r2, [r3, #0]
 801b72a:	68bb      	ldr	r3, [r7, #8]
 801b72c:	0159      	lsls	r1, r3, #5
 801b72e:	68fb      	ldr	r3, [r7, #12]
 801b730:	440b      	add	r3, r1
 801b732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b736:	4619      	mov	r1, r3
 801b738:	4b1f      	ldr	r3, [pc, #124]	; (801b7b8 <USB_DeactivateEndpoint+0x100>)
 801b73a:	4013      	ands	r3, r2
 801b73c:	600b      	str	r3, [r1, #0]
 801b73e:	e034      	b.n	801b7aa <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801b740:	68fb      	ldr	r3, [r7, #12]
 801b742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b746:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801b748:	683b      	ldr	r3, [r7, #0]
 801b74a:	781b      	ldrb	r3, [r3, #0]
 801b74c:	f003 030f 	and.w	r3, r3, #15
 801b750:	2101      	movs	r1, #1
 801b752:	fa01 f303 	lsl.w	r3, r1, r3
 801b756:	041b      	lsls	r3, r3, #16
 801b758:	43db      	mvns	r3, r3
 801b75a:	68f9      	ldr	r1, [r7, #12]
 801b75c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b760:	4013      	ands	r3, r2
 801b762:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801b764:	68fb      	ldr	r3, [r7, #12]
 801b766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b76a:	69da      	ldr	r2, [r3, #28]
 801b76c:	683b      	ldr	r3, [r7, #0]
 801b76e:	781b      	ldrb	r3, [r3, #0]
 801b770:	f003 030f 	and.w	r3, r3, #15
 801b774:	2101      	movs	r1, #1
 801b776:	fa01 f303 	lsl.w	r3, r1, r3
 801b77a:	041b      	lsls	r3, r3, #16
 801b77c:	43db      	mvns	r3, r3
 801b77e:	68f9      	ldr	r1, [r7, #12]
 801b780:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b784:	4013      	ands	r3, r2
 801b786:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801b788:	68bb      	ldr	r3, [r7, #8]
 801b78a:	015a      	lsls	r2, r3, #5
 801b78c:	68fb      	ldr	r3, [r7, #12]
 801b78e:	4413      	add	r3, r2
 801b790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b794:	681a      	ldr	r2, [r3, #0]
 801b796:	68bb      	ldr	r3, [r7, #8]
 801b798:	0159      	lsls	r1, r3, #5
 801b79a:	68fb      	ldr	r3, [r7, #12]
 801b79c:	440b      	add	r3, r1
 801b79e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b7a2:	4619      	mov	r1, r3
 801b7a4:	4b05      	ldr	r3, [pc, #20]	; (801b7bc <USB_DeactivateEndpoint+0x104>)
 801b7a6:	4013      	ands	r3, r2
 801b7a8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801b7aa:	2300      	movs	r3, #0
}
 801b7ac:	4618      	mov	r0, r3
 801b7ae:	3714      	adds	r7, #20
 801b7b0:	46bd      	mov	sp, r7
 801b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7b6:	4770      	bx	lr
 801b7b8:	ec337800 	.word	0xec337800
 801b7bc:	eff37800 	.word	0xeff37800

0801b7c0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801b7c0:	b580      	push	{r7, lr}
 801b7c2:	b08a      	sub	sp, #40	; 0x28
 801b7c4:	af02      	add	r7, sp, #8
 801b7c6:	60f8      	str	r0, [r7, #12]
 801b7c8:	60b9      	str	r1, [r7, #8]
 801b7ca:	4613      	mov	r3, r2
 801b7cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b7ce:	68fb      	ldr	r3, [r7, #12]
 801b7d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801b7d2:	68bb      	ldr	r3, [r7, #8]
 801b7d4:	781b      	ldrb	r3, [r3, #0]
 801b7d6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801b7d8:	68bb      	ldr	r3, [r7, #8]
 801b7da:	785b      	ldrb	r3, [r3, #1]
 801b7dc:	2b01      	cmp	r3, #1
 801b7de:	f040 8163 	bne.w	801baa8 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801b7e2:	68bb      	ldr	r3, [r7, #8]
 801b7e4:	695b      	ldr	r3, [r3, #20]
 801b7e6:	2b00      	cmp	r3, #0
 801b7e8:	d132      	bne.n	801b850 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801b7ea:	69bb      	ldr	r3, [r7, #24]
 801b7ec:	015a      	lsls	r2, r3, #5
 801b7ee:	69fb      	ldr	r3, [r7, #28]
 801b7f0:	4413      	add	r3, r2
 801b7f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b7f6:	691a      	ldr	r2, [r3, #16]
 801b7f8:	69bb      	ldr	r3, [r7, #24]
 801b7fa:	0159      	lsls	r1, r3, #5
 801b7fc:	69fb      	ldr	r3, [r7, #28]
 801b7fe:	440b      	add	r3, r1
 801b800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b804:	4619      	mov	r1, r3
 801b806:	4ba5      	ldr	r3, [pc, #660]	; (801ba9c <USB_EPStartXfer+0x2dc>)
 801b808:	4013      	ands	r3, r2
 801b80a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801b80c:	69bb      	ldr	r3, [r7, #24]
 801b80e:	015a      	lsls	r2, r3, #5
 801b810:	69fb      	ldr	r3, [r7, #28]
 801b812:	4413      	add	r3, r2
 801b814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b818:	691b      	ldr	r3, [r3, #16]
 801b81a:	69ba      	ldr	r2, [r7, #24]
 801b81c:	0151      	lsls	r1, r2, #5
 801b81e:	69fa      	ldr	r2, [r7, #28]
 801b820:	440a      	add	r2, r1
 801b822:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b826:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801b82a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801b82c:	69bb      	ldr	r3, [r7, #24]
 801b82e:	015a      	lsls	r2, r3, #5
 801b830:	69fb      	ldr	r3, [r7, #28]
 801b832:	4413      	add	r3, r2
 801b834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b838:	691a      	ldr	r2, [r3, #16]
 801b83a:	69bb      	ldr	r3, [r7, #24]
 801b83c:	0159      	lsls	r1, r3, #5
 801b83e:	69fb      	ldr	r3, [r7, #28]
 801b840:	440b      	add	r3, r1
 801b842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b846:	4619      	mov	r1, r3
 801b848:	4b95      	ldr	r3, [pc, #596]	; (801baa0 <USB_EPStartXfer+0x2e0>)
 801b84a:	4013      	ands	r3, r2
 801b84c:	610b      	str	r3, [r1, #16]
 801b84e:	e074      	b.n	801b93a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801b850:	69bb      	ldr	r3, [r7, #24]
 801b852:	015a      	lsls	r2, r3, #5
 801b854:	69fb      	ldr	r3, [r7, #28]
 801b856:	4413      	add	r3, r2
 801b858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b85c:	691a      	ldr	r2, [r3, #16]
 801b85e:	69bb      	ldr	r3, [r7, #24]
 801b860:	0159      	lsls	r1, r3, #5
 801b862:	69fb      	ldr	r3, [r7, #28]
 801b864:	440b      	add	r3, r1
 801b866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b86a:	4619      	mov	r1, r3
 801b86c:	4b8c      	ldr	r3, [pc, #560]	; (801baa0 <USB_EPStartXfer+0x2e0>)
 801b86e:	4013      	ands	r3, r2
 801b870:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801b872:	69bb      	ldr	r3, [r7, #24]
 801b874:	015a      	lsls	r2, r3, #5
 801b876:	69fb      	ldr	r3, [r7, #28]
 801b878:	4413      	add	r3, r2
 801b87a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b87e:	691a      	ldr	r2, [r3, #16]
 801b880:	69bb      	ldr	r3, [r7, #24]
 801b882:	0159      	lsls	r1, r3, #5
 801b884:	69fb      	ldr	r3, [r7, #28]
 801b886:	440b      	add	r3, r1
 801b888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b88c:	4619      	mov	r1, r3
 801b88e:	4b83      	ldr	r3, [pc, #524]	; (801ba9c <USB_EPStartXfer+0x2dc>)
 801b890:	4013      	ands	r3, r2
 801b892:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801b894:	69bb      	ldr	r3, [r7, #24]
 801b896:	015a      	lsls	r2, r3, #5
 801b898:	69fb      	ldr	r3, [r7, #28]
 801b89a:	4413      	add	r3, r2
 801b89c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b8a0:	691a      	ldr	r2, [r3, #16]
 801b8a2:	68bb      	ldr	r3, [r7, #8]
 801b8a4:	6959      	ldr	r1, [r3, #20]
 801b8a6:	68bb      	ldr	r3, [r7, #8]
 801b8a8:	689b      	ldr	r3, [r3, #8]
 801b8aa:	440b      	add	r3, r1
 801b8ac:	1e59      	subs	r1, r3, #1
 801b8ae:	68bb      	ldr	r3, [r7, #8]
 801b8b0:	689b      	ldr	r3, [r3, #8]
 801b8b2:	fbb1 f3f3 	udiv	r3, r1, r3
 801b8b6:	04d9      	lsls	r1, r3, #19
 801b8b8:	4b7a      	ldr	r3, [pc, #488]	; (801baa4 <USB_EPStartXfer+0x2e4>)
 801b8ba:	400b      	ands	r3, r1
 801b8bc:	69b9      	ldr	r1, [r7, #24]
 801b8be:	0148      	lsls	r0, r1, #5
 801b8c0:	69f9      	ldr	r1, [r7, #28]
 801b8c2:	4401      	add	r1, r0
 801b8c4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801b8c8:	4313      	orrs	r3, r2
 801b8ca:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801b8cc:	69bb      	ldr	r3, [r7, #24]
 801b8ce:	015a      	lsls	r2, r3, #5
 801b8d0:	69fb      	ldr	r3, [r7, #28]
 801b8d2:	4413      	add	r3, r2
 801b8d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b8d8:	691a      	ldr	r2, [r3, #16]
 801b8da:	68bb      	ldr	r3, [r7, #8]
 801b8dc:	695b      	ldr	r3, [r3, #20]
 801b8de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801b8e2:	69b9      	ldr	r1, [r7, #24]
 801b8e4:	0148      	lsls	r0, r1, #5
 801b8e6:	69f9      	ldr	r1, [r7, #28]
 801b8e8:	4401      	add	r1, r0
 801b8ea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801b8ee:	4313      	orrs	r3, r2
 801b8f0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801b8f2:	68bb      	ldr	r3, [r7, #8]
 801b8f4:	78db      	ldrb	r3, [r3, #3]
 801b8f6:	2b01      	cmp	r3, #1
 801b8f8:	d11f      	bne.n	801b93a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801b8fa:	69bb      	ldr	r3, [r7, #24]
 801b8fc:	015a      	lsls	r2, r3, #5
 801b8fe:	69fb      	ldr	r3, [r7, #28]
 801b900:	4413      	add	r3, r2
 801b902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b906:	691b      	ldr	r3, [r3, #16]
 801b908:	69ba      	ldr	r2, [r7, #24]
 801b90a:	0151      	lsls	r1, r2, #5
 801b90c:	69fa      	ldr	r2, [r7, #28]
 801b90e:	440a      	add	r2, r1
 801b910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b914:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801b918:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801b91a:	69bb      	ldr	r3, [r7, #24]
 801b91c:	015a      	lsls	r2, r3, #5
 801b91e:	69fb      	ldr	r3, [r7, #28]
 801b920:	4413      	add	r3, r2
 801b922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b926:	691b      	ldr	r3, [r3, #16]
 801b928:	69ba      	ldr	r2, [r7, #24]
 801b92a:	0151      	lsls	r1, r2, #5
 801b92c:	69fa      	ldr	r2, [r7, #28]
 801b92e:	440a      	add	r2, r1
 801b930:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b934:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801b938:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801b93a:	79fb      	ldrb	r3, [r7, #7]
 801b93c:	2b01      	cmp	r3, #1
 801b93e:	d14b      	bne.n	801b9d8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801b940:	68bb      	ldr	r3, [r7, #8]
 801b942:	691b      	ldr	r3, [r3, #16]
 801b944:	2b00      	cmp	r3, #0
 801b946:	d009      	beq.n	801b95c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801b948:	69bb      	ldr	r3, [r7, #24]
 801b94a:	015a      	lsls	r2, r3, #5
 801b94c:	69fb      	ldr	r3, [r7, #28]
 801b94e:	4413      	add	r3, r2
 801b950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b954:	461a      	mov	r2, r3
 801b956:	68bb      	ldr	r3, [r7, #8]
 801b958:	691b      	ldr	r3, [r3, #16]
 801b95a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801b95c:	68bb      	ldr	r3, [r7, #8]
 801b95e:	78db      	ldrb	r3, [r3, #3]
 801b960:	2b01      	cmp	r3, #1
 801b962:	d128      	bne.n	801b9b6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801b964:	69fb      	ldr	r3, [r7, #28]
 801b966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b96a:	689b      	ldr	r3, [r3, #8]
 801b96c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b970:	2b00      	cmp	r3, #0
 801b972:	d110      	bne.n	801b996 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801b974:	69bb      	ldr	r3, [r7, #24]
 801b976:	015a      	lsls	r2, r3, #5
 801b978:	69fb      	ldr	r3, [r7, #28]
 801b97a:	4413      	add	r3, r2
 801b97c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b980:	681b      	ldr	r3, [r3, #0]
 801b982:	69ba      	ldr	r2, [r7, #24]
 801b984:	0151      	lsls	r1, r2, #5
 801b986:	69fa      	ldr	r2, [r7, #28]
 801b988:	440a      	add	r2, r1
 801b98a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b98e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801b992:	6013      	str	r3, [r2, #0]
 801b994:	e00f      	b.n	801b9b6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801b996:	69bb      	ldr	r3, [r7, #24]
 801b998:	015a      	lsls	r2, r3, #5
 801b99a:	69fb      	ldr	r3, [r7, #28]
 801b99c:	4413      	add	r3, r2
 801b99e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b9a2:	681b      	ldr	r3, [r3, #0]
 801b9a4:	69ba      	ldr	r2, [r7, #24]
 801b9a6:	0151      	lsls	r1, r2, #5
 801b9a8:	69fa      	ldr	r2, [r7, #28]
 801b9aa:	440a      	add	r2, r1
 801b9ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b9b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b9b4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801b9b6:	69bb      	ldr	r3, [r7, #24]
 801b9b8:	015a      	lsls	r2, r3, #5
 801b9ba:	69fb      	ldr	r3, [r7, #28]
 801b9bc:	4413      	add	r3, r2
 801b9be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b9c2:	681b      	ldr	r3, [r3, #0]
 801b9c4:	69ba      	ldr	r2, [r7, #24]
 801b9c6:	0151      	lsls	r1, r2, #5
 801b9c8:	69fa      	ldr	r2, [r7, #28]
 801b9ca:	440a      	add	r2, r1
 801b9cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b9d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801b9d4:	6013      	str	r3, [r2, #0]
 801b9d6:	e133      	b.n	801bc40 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801b9d8:	69bb      	ldr	r3, [r7, #24]
 801b9da:	015a      	lsls	r2, r3, #5
 801b9dc:	69fb      	ldr	r3, [r7, #28]
 801b9de:	4413      	add	r3, r2
 801b9e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b9e4:	681b      	ldr	r3, [r3, #0]
 801b9e6:	69ba      	ldr	r2, [r7, #24]
 801b9e8:	0151      	lsls	r1, r2, #5
 801b9ea:	69fa      	ldr	r2, [r7, #28]
 801b9ec:	440a      	add	r2, r1
 801b9ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b9f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801b9f6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801b9f8:	68bb      	ldr	r3, [r7, #8]
 801b9fa:	78db      	ldrb	r3, [r3, #3]
 801b9fc:	2b01      	cmp	r3, #1
 801b9fe:	d015      	beq.n	801ba2c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801ba00:	68bb      	ldr	r3, [r7, #8]
 801ba02:	695b      	ldr	r3, [r3, #20]
 801ba04:	2b00      	cmp	r3, #0
 801ba06:	f000 811b 	beq.w	801bc40 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801ba0a:	69fb      	ldr	r3, [r7, #28]
 801ba0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ba10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801ba12:	68bb      	ldr	r3, [r7, #8]
 801ba14:	781b      	ldrb	r3, [r3, #0]
 801ba16:	f003 030f 	and.w	r3, r3, #15
 801ba1a:	2101      	movs	r1, #1
 801ba1c:	fa01 f303 	lsl.w	r3, r1, r3
 801ba20:	69f9      	ldr	r1, [r7, #28]
 801ba22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801ba26:	4313      	orrs	r3, r2
 801ba28:	634b      	str	r3, [r1, #52]	; 0x34
 801ba2a:	e109      	b.n	801bc40 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801ba2c:	69fb      	ldr	r3, [r7, #28]
 801ba2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ba32:	689b      	ldr	r3, [r3, #8]
 801ba34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ba38:	2b00      	cmp	r3, #0
 801ba3a:	d110      	bne.n	801ba5e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801ba3c:	69bb      	ldr	r3, [r7, #24]
 801ba3e:	015a      	lsls	r2, r3, #5
 801ba40:	69fb      	ldr	r3, [r7, #28]
 801ba42:	4413      	add	r3, r2
 801ba44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ba48:	681b      	ldr	r3, [r3, #0]
 801ba4a:	69ba      	ldr	r2, [r7, #24]
 801ba4c:	0151      	lsls	r1, r2, #5
 801ba4e:	69fa      	ldr	r2, [r7, #28]
 801ba50:	440a      	add	r2, r1
 801ba52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ba56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801ba5a:	6013      	str	r3, [r2, #0]
 801ba5c:	e00f      	b.n	801ba7e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801ba5e:	69bb      	ldr	r3, [r7, #24]
 801ba60:	015a      	lsls	r2, r3, #5
 801ba62:	69fb      	ldr	r3, [r7, #28]
 801ba64:	4413      	add	r3, r2
 801ba66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ba6a:	681b      	ldr	r3, [r3, #0]
 801ba6c:	69ba      	ldr	r2, [r7, #24]
 801ba6e:	0151      	lsls	r1, r2, #5
 801ba70:	69fa      	ldr	r2, [r7, #28]
 801ba72:	440a      	add	r2, r1
 801ba74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ba78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801ba7c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801ba7e:	68bb      	ldr	r3, [r7, #8]
 801ba80:	68d9      	ldr	r1, [r3, #12]
 801ba82:	68bb      	ldr	r3, [r7, #8]
 801ba84:	781a      	ldrb	r2, [r3, #0]
 801ba86:	68bb      	ldr	r3, [r7, #8]
 801ba88:	695b      	ldr	r3, [r3, #20]
 801ba8a:	b298      	uxth	r0, r3
 801ba8c:	79fb      	ldrb	r3, [r7, #7]
 801ba8e:	9300      	str	r3, [sp, #0]
 801ba90:	4603      	mov	r3, r0
 801ba92:	68f8      	ldr	r0, [r7, #12]
 801ba94:	f000 fa38 	bl	801bf08 <USB_WritePacket>
 801ba98:	e0d2      	b.n	801bc40 <USB_EPStartXfer+0x480>
 801ba9a:	bf00      	nop
 801ba9c:	e007ffff 	.word	0xe007ffff
 801baa0:	fff80000 	.word	0xfff80000
 801baa4:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801baa8:	69bb      	ldr	r3, [r7, #24]
 801baaa:	015a      	lsls	r2, r3, #5
 801baac:	69fb      	ldr	r3, [r7, #28]
 801baae:	4413      	add	r3, r2
 801bab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bab4:	691a      	ldr	r2, [r3, #16]
 801bab6:	69bb      	ldr	r3, [r7, #24]
 801bab8:	0159      	lsls	r1, r3, #5
 801baba:	69fb      	ldr	r3, [r7, #28]
 801babc:	440b      	add	r3, r1
 801babe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bac2:	4619      	mov	r1, r3
 801bac4:	4b61      	ldr	r3, [pc, #388]	; (801bc4c <USB_EPStartXfer+0x48c>)
 801bac6:	4013      	ands	r3, r2
 801bac8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801baca:	69bb      	ldr	r3, [r7, #24]
 801bacc:	015a      	lsls	r2, r3, #5
 801bace:	69fb      	ldr	r3, [r7, #28]
 801bad0:	4413      	add	r3, r2
 801bad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bad6:	691a      	ldr	r2, [r3, #16]
 801bad8:	69bb      	ldr	r3, [r7, #24]
 801bada:	0159      	lsls	r1, r3, #5
 801badc:	69fb      	ldr	r3, [r7, #28]
 801bade:	440b      	add	r3, r1
 801bae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bae4:	4619      	mov	r1, r3
 801bae6:	4b5a      	ldr	r3, [pc, #360]	; (801bc50 <USB_EPStartXfer+0x490>)
 801bae8:	4013      	ands	r3, r2
 801baea:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 801baec:	68bb      	ldr	r3, [r7, #8]
 801baee:	695b      	ldr	r3, [r3, #20]
 801baf0:	2b00      	cmp	r3, #0
 801baf2:	d123      	bne.n	801bb3c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801baf4:	69bb      	ldr	r3, [r7, #24]
 801baf6:	015a      	lsls	r2, r3, #5
 801baf8:	69fb      	ldr	r3, [r7, #28]
 801bafa:	4413      	add	r3, r2
 801bafc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bb00:	691a      	ldr	r2, [r3, #16]
 801bb02:	68bb      	ldr	r3, [r7, #8]
 801bb04:	689b      	ldr	r3, [r3, #8]
 801bb06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801bb0a:	69b9      	ldr	r1, [r7, #24]
 801bb0c:	0148      	lsls	r0, r1, #5
 801bb0e:	69f9      	ldr	r1, [r7, #28]
 801bb10:	4401      	add	r1, r0
 801bb12:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801bb16:	4313      	orrs	r3, r2
 801bb18:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801bb1a:	69bb      	ldr	r3, [r7, #24]
 801bb1c:	015a      	lsls	r2, r3, #5
 801bb1e:	69fb      	ldr	r3, [r7, #28]
 801bb20:	4413      	add	r3, r2
 801bb22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bb26:	691b      	ldr	r3, [r3, #16]
 801bb28:	69ba      	ldr	r2, [r7, #24]
 801bb2a:	0151      	lsls	r1, r2, #5
 801bb2c:	69fa      	ldr	r2, [r7, #28]
 801bb2e:	440a      	add	r2, r1
 801bb30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801bb34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801bb38:	6113      	str	r3, [r2, #16]
 801bb3a:	e033      	b.n	801bba4 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801bb3c:	68bb      	ldr	r3, [r7, #8]
 801bb3e:	695a      	ldr	r2, [r3, #20]
 801bb40:	68bb      	ldr	r3, [r7, #8]
 801bb42:	689b      	ldr	r3, [r3, #8]
 801bb44:	4413      	add	r3, r2
 801bb46:	1e5a      	subs	r2, r3, #1
 801bb48:	68bb      	ldr	r3, [r7, #8]
 801bb4a:	689b      	ldr	r3, [r3, #8]
 801bb4c:	fbb2 f3f3 	udiv	r3, r2, r3
 801bb50:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801bb52:	69bb      	ldr	r3, [r7, #24]
 801bb54:	015a      	lsls	r2, r3, #5
 801bb56:	69fb      	ldr	r3, [r7, #28]
 801bb58:	4413      	add	r3, r2
 801bb5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bb5e:	691a      	ldr	r2, [r3, #16]
 801bb60:	8afb      	ldrh	r3, [r7, #22]
 801bb62:	04d9      	lsls	r1, r3, #19
 801bb64:	4b3b      	ldr	r3, [pc, #236]	; (801bc54 <USB_EPStartXfer+0x494>)
 801bb66:	400b      	ands	r3, r1
 801bb68:	69b9      	ldr	r1, [r7, #24]
 801bb6a:	0148      	lsls	r0, r1, #5
 801bb6c:	69f9      	ldr	r1, [r7, #28]
 801bb6e:	4401      	add	r1, r0
 801bb70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801bb74:	4313      	orrs	r3, r2
 801bb76:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 801bb78:	69bb      	ldr	r3, [r7, #24]
 801bb7a:	015a      	lsls	r2, r3, #5
 801bb7c:	69fb      	ldr	r3, [r7, #28]
 801bb7e:	4413      	add	r3, r2
 801bb80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bb84:	691a      	ldr	r2, [r3, #16]
 801bb86:	68bb      	ldr	r3, [r7, #8]
 801bb88:	689b      	ldr	r3, [r3, #8]
 801bb8a:	8af9      	ldrh	r1, [r7, #22]
 801bb8c:	fb01 f303 	mul.w	r3, r1, r3
 801bb90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801bb94:	69b9      	ldr	r1, [r7, #24]
 801bb96:	0148      	lsls	r0, r1, #5
 801bb98:	69f9      	ldr	r1, [r7, #28]
 801bb9a:	4401      	add	r1, r0
 801bb9c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801bba0:	4313      	orrs	r3, r2
 801bba2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801bba4:	79fb      	ldrb	r3, [r7, #7]
 801bba6:	2b01      	cmp	r3, #1
 801bba8:	d10d      	bne.n	801bbc6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801bbaa:	68bb      	ldr	r3, [r7, #8]
 801bbac:	68db      	ldr	r3, [r3, #12]
 801bbae:	2b00      	cmp	r3, #0
 801bbb0:	d009      	beq.n	801bbc6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801bbb2:	68bb      	ldr	r3, [r7, #8]
 801bbb4:	68d9      	ldr	r1, [r3, #12]
 801bbb6:	69bb      	ldr	r3, [r7, #24]
 801bbb8:	015a      	lsls	r2, r3, #5
 801bbba:	69fb      	ldr	r3, [r7, #28]
 801bbbc:	4413      	add	r3, r2
 801bbbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bbc2:	460a      	mov	r2, r1
 801bbc4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801bbc6:	68bb      	ldr	r3, [r7, #8]
 801bbc8:	78db      	ldrb	r3, [r3, #3]
 801bbca:	2b01      	cmp	r3, #1
 801bbcc:	d128      	bne.n	801bc20 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801bbce:	69fb      	ldr	r3, [r7, #28]
 801bbd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bbd4:	689b      	ldr	r3, [r3, #8]
 801bbd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bbda:	2b00      	cmp	r3, #0
 801bbdc:	d110      	bne.n	801bc00 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801bbde:	69bb      	ldr	r3, [r7, #24]
 801bbe0:	015a      	lsls	r2, r3, #5
 801bbe2:	69fb      	ldr	r3, [r7, #28]
 801bbe4:	4413      	add	r3, r2
 801bbe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bbea:	681b      	ldr	r3, [r3, #0]
 801bbec:	69ba      	ldr	r2, [r7, #24]
 801bbee:	0151      	lsls	r1, r2, #5
 801bbf0:	69fa      	ldr	r2, [r7, #28]
 801bbf2:	440a      	add	r2, r1
 801bbf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801bbf8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801bbfc:	6013      	str	r3, [r2, #0]
 801bbfe:	e00f      	b.n	801bc20 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801bc00:	69bb      	ldr	r3, [r7, #24]
 801bc02:	015a      	lsls	r2, r3, #5
 801bc04:	69fb      	ldr	r3, [r7, #28]
 801bc06:	4413      	add	r3, r2
 801bc08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bc0c:	681b      	ldr	r3, [r3, #0]
 801bc0e:	69ba      	ldr	r2, [r7, #24]
 801bc10:	0151      	lsls	r1, r2, #5
 801bc12:	69fa      	ldr	r2, [r7, #28]
 801bc14:	440a      	add	r2, r1
 801bc16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801bc1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801bc1e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801bc20:	69bb      	ldr	r3, [r7, #24]
 801bc22:	015a      	lsls	r2, r3, #5
 801bc24:	69fb      	ldr	r3, [r7, #28]
 801bc26:	4413      	add	r3, r2
 801bc28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bc2c:	681b      	ldr	r3, [r3, #0]
 801bc2e:	69ba      	ldr	r2, [r7, #24]
 801bc30:	0151      	lsls	r1, r2, #5
 801bc32:	69fa      	ldr	r2, [r7, #28]
 801bc34:	440a      	add	r2, r1
 801bc36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801bc3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801bc3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801bc40:	2300      	movs	r3, #0
}
 801bc42:	4618      	mov	r0, r3
 801bc44:	3720      	adds	r7, #32
 801bc46:	46bd      	mov	sp, r7
 801bc48:	bd80      	pop	{r7, pc}
 801bc4a:	bf00      	nop
 801bc4c:	fff80000 	.word	0xfff80000
 801bc50:	e007ffff 	.word	0xe007ffff
 801bc54:	1ff80000 	.word	0x1ff80000

0801bc58 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801bc58:	b480      	push	{r7}
 801bc5a:	b087      	sub	sp, #28
 801bc5c:	af00      	add	r7, sp, #0
 801bc5e:	60f8      	str	r0, [r7, #12]
 801bc60:	60b9      	str	r1, [r7, #8]
 801bc62:	4613      	mov	r3, r2
 801bc64:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bc66:	68fb      	ldr	r3, [r7, #12]
 801bc68:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801bc6a:	68bb      	ldr	r3, [r7, #8]
 801bc6c:	781b      	ldrb	r3, [r3, #0]
 801bc6e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801bc70:	68bb      	ldr	r3, [r7, #8]
 801bc72:	785b      	ldrb	r3, [r3, #1]
 801bc74:	2b01      	cmp	r3, #1
 801bc76:	f040 80cd 	bne.w	801be14 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801bc7a:	68bb      	ldr	r3, [r7, #8]
 801bc7c:	695b      	ldr	r3, [r3, #20]
 801bc7e:	2b00      	cmp	r3, #0
 801bc80:	d132      	bne.n	801bce8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801bc82:	693b      	ldr	r3, [r7, #16]
 801bc84:	015a      	lsls	r2, r3, #5
 801bc86:	697b      	ldr	r3, [r7, #20]
 801bc88:	4413      	add	r3, r2
 801bc8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bc8e:	691a      	ldr	r2, [r3, #16]
 801bc90:	693b      	ldr	r3, [r7, #16]
 801bc92:	0159      	lsls	r1, r3, #5
 801bc94:	697b      	ldr	r3, [r7, #20]
 801bc96:	440b      	add	r3, r1
 801bc98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bc9c:	4619      	mov	r1, r3
 801bc9e:	4b98      	ldr	r3, [pc, #608]	; (801bf00 <USB_EP0StartXfer+0x2a8>)
 801bca0:	4013      	ands	r3, r2
 801bca2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801bca4:	693b      	ldr	r3, [r7, #16]
 801bca6:	015a      	lsls	r2, r3, #5
 801bca8:	697b      	ldr	r3, [r7, #20]
 801bcaa:	4413      	add	r3, r2
 801bcac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bcb0:	691b      	ldr	r3, [r3, #16]
 801bcb2:	693a      	ldr	r2, [r7, #16]
 801bcb4:	0151      	lsls	r1, r2, #5
 801bcb6:	697a      	ldr	r2, [r7, #20]
 801bcb8:	440a      	add	r2, r1
 801bcba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801bcbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801bcc2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801bcc4:	693b      	ldr	r3, [r7, #16]
 801bcc6:	015a      	lsls	r2, r3, #5
 801bcc8:	697b      	ldr	r3, [r7, #20]
 801bcca:	4413      	add	r3, r2
 801bccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bcd0:	691a      	ldr	r2, [r3, #16]
 801bcd2:	693b      	ldr	r3, [r7, #16]
 801bcd4:	0159      	lsls	r1, r3, #5
 801bcd6:	697b      	ldr	r3, [r7, #20]
 801bcd8:	440b      	add	r3, r1
 801bcda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bcde:	4619      	mov	r1, r3
 801bce0:	4b88      	ldr	r3, [pc, #544]	; (801bf04 <USB_EP0StartXfer+0x2ac>)
 801bce2:	4013      	ands	r3, r2
 801bce4:	610b      	str	r3, [r1, #16]
 801bce6:	e04e      	b.n	801bd86 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801bce8:	693b      	ldr	r3, [r7, #16]
 801bcea:	015a      	lsls	r2, r3, #5
 801bcec:	697b      	ldr	r3, [r7, #20]
 801bcee:	4413      	add	r3, r2
 801bcf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bcf4:	691a      	ldr	r2, [r3, #16]
 801bcf6:	693b      	ldr	r3, [r7, #16]
 801bcf8:	0159      	lsls	r1, r3, #5
 801bcfa:	697b      	ldr	r3, [r7, #20]
 801bcfc:	440b      	add	r3, r1
 801bcfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bd02:	4619      	mov	r1, r3
 801bd04:	4b7f      	ldr	r3, [pc, #508]	; (801bf04 <USB_EP0StartXfer+0x2ac>)
 801bd06:	4013      	ands	r3, r2
 801bd08:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801bd0a:	693b      	ldr	r3, [r7, #16]
 801bd0c:	015a      	lsls	r2, r3, #5
 801bd0e:	697b      	ldr	r3, [r7, #20]
 801bd10:	4413      	add	r3, r2
 801bd12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bd16:	691a      	ldr	r2, [r3, #16]
 801bd18:	693b      	ldr	r3, [r7, #16]
 801bd1a:	0159      	lsls	r1, r3, #5
 801bd1c:	697b      	ldr	r3, [r7, #20]
 801bd1e:	440b      	add	r3, r1
 801bd20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bd24:	4619      	mov	r1, r3
 801bd26:	4b76      	ldr	r3, [pc, #472]	; (801bf00 <USB_EP0StartXfer+0x2a8>)
 801bd28:	4013      	ands	r3, r2
 801bd2a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 801bd2c:	68bb      	ldr	r3, [r7, #8]
 801bd2e:	695a      	ldr	r2, [r3, #20]
 801bd30:	68bb      	ldr	r3, [r7, #8]
 801bd32:	689b      	ldr	r3, [r3, #8]
 801bd34:	429a      	cmp	r2, r3
 801bd36:	d903      	bls.n	801bd40 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 801bd38:	68bb      	ldr	r3, [r7, #8]
 801bd3a:	689a      	ldr	r2, [r3, #8]
 801bd3c:	68bb      	ldr	r3, [r7, #8]
 801bd3e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801bd40:	693b      	ldr	r3, [r7, #16]
 801bd42:	015a      	lsls	r2, r3, #5
 801bd44:	697b      	ldr	r3, [r7, #20]
 801bd46:	4413      	add	r3, r2
 801bd48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bd4c:	691b      	ldr	r3, [r3, #16]
 801bd4e:	693a      	ldr	r2, [r7, #16]
 801bd50:	0151      	lsls	r1, r2, #5
 801bd52:	697a      	ldr	r2, [r7, #20]
 801bd54:	440a      	add	r2, r1
 801bd56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801bd5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801bd5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801bd60:	693b      	ldr	r3, [r7, #16]
 801bd62:	015a      	lsls	r2, r3, #5
 801bd64:	697b      	ldr	r3, [r7, #20]
 801bd66:	4413      	add	r3, r2
 801bd68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bd6c:	691a      	ldr	r2, [r3, #16]
 801bd6e:	68bb      	ldr	r3, [r7, #8]
 801bd70:	695b      	ldr	r3, [r3, #20]
 801bd72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801bd76:	6939      	ldr	r1, [r7, #16]
 801bd78:	0148      	lsls	r0, r1, #5
 801bd7a:	6979      	ldr	r1, [r7, #20]
 801bd7c:	4401      	add	r1, r0
 801bd7e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801bd82:	4313      	orrs	r3, r2
 801bd84:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801bd86:	79fb      	ldrb	r3, [r7, #7]
 801bd88:	2b01      	cmp	r3, #1
 801bd8a:	d11e      	bne.n	801bdca <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801bd8c:	68bb      	ldr	r3, [r7, #8]
 801bd8e:	691b      	ldr	r3, [r3, #16]
 801bd90:	2b00      	cmp	r3, #0
 801bd92:	d009      	beq.n	801bda8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801bd94:	693b      	ldr	r3, [r7, #16]
 801bd96:	015a      	lsls	r2, r3, #5
 801bd98:	697b      	ldr	r3, [r7, #20]
 801bd9a:	4413      	add	r3, r2
 801bd9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bda0:	461a      	mov	r2, r3
 801bda2:	68bb      	ldr	r3, [r7, #8]
 801bda4:	691b      	ldr	r3, [r3, #16]
 801bda6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801bda8:	693b      	ldr	r3, [r7, #16]
 801bdaa:	015a      	lsls	r2, r3, #5
 801bdac:	697b      	ldr	r3, [r7, #20]
 801bdae:	4413      	add	r3, r2
 801bdb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bdb4:	681b      	ldr	r3, [r3, #0]
 801bdb6:	693a      	ldr	r2, [r7, #16]
 801bdb8:	0151      	lsls	r1, r2, #5
 801bdba:	697a      	ldr	r2, [r7, #20]
 801bdbc:	440a      	add	r2, r1
 801bdbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801bdc2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801bdc6:	6013      	str	r3, [r2, #0]
 801bdc8:	e092      	b.n	801bef0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801bdca:	693b      	ldr	r3, [r7, #16]
 801bdcc:	015a      	lsls	r2, r3, #5
 801bdce:	697b      	ldr	r3, [r7, #20]
 801bdd0:	4413      	add	r3, r2
 801bdd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bdd6:	681b      	ldr	r3, [r3, #0]
 801bdd8:	693a      	ldr	r2, [r7, #16]
 801bdda:	0151      	lsls	r1, r2, #5
 801bddc:	697a      	ldr	r2, [r7, #20]
 801bdde:	440a      	add	r2, r1
 801bde0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801bde4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801bde8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801bdea:	68bb      	ldr	r3, [r7, #8]
 801bdec:	695b      	ldr	r3, [r3, #20]
 801bdee:	2b00      	cmp	r3, #0
 801bdf0:	d07e      	beq.n	801bef0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801bdf2:	697b      	ldr	r3, [r7, #20]
 801bdf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bdf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801bdfa:	68bb      	ldr	r3, [r7, #8]
 801bdfc:	781b      	ldrb	r3, [r3, #0]
 801bdfe:	f003 030f 	and.w	r3, r3, #15
 801be02:	2101      	movs	r1, #1
 801be04:	fa01 f303 	lsl.w	r3, r1, r3
 801be08:	6979      	ldr	r1, [r7, #20]
 801be0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801be0e:	4313      	orrs	r3, r2
 801be10:	634b      	str	r3, [r1, #52]	; 0x34
 801be12:	e06d      	b.n	801bef0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801be14:	693b      	ldr	r3, [r7, #16]
 801be16:	015a      	lsls	r2, r3, #5
 801be18:	697b      	ldr	r3, [r7, #20]
 801be1a:	4413      	add	r3, r2
 801be1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801be20:	691a      	ldr	r2, [r3, #16]
 801be22:	693b      	ldr	r3, [r7, #16]
 801be24:	0159      	lsls	r1, r3, #5
 801be26:	697b      	ldr	r3, [r7, #20]
 801be28:	440b      	add	r3, r1
 801be2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801be2e:	4619      	mov	r1, r3
 801be30:	4b34      	ldr	r3, [pc, #208]	; (801bf04 <USB_EP0StartXfer+0x2ac>)
 801be32:	4013      	ands	r3, r2
 801be34:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801be36:	693b      	ldr	r3, [r7, #16]
 801be38:	015a      	lsls	r2, r3, #5
 801be3a:	697b      	ldr	r3, [r7, #20]
 801be3c:	4413      	add	r3, r2
 801be3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801be42:	691a      	ldr	r2, [r3, #16]
 801be44:	693b      	ldr	r3, [r7, #16]
 801be46:	0159      	lsls	r1, r3, #5
 801be48:	697b      	ldr	r3, [r7, #20]
 801be4a:	440b      	add	r3, r1
 801be4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801be50:	4619      	mov	r1, r3
 801be52:	4b2b      	ldr	r3, [pc, #172]	; (801bf00 <USB_EP0StartXfer+0x2a8>)
 801be54:	4013      	ands	r3, r2
 801be56:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 801be58:	68bb      	ldr	r3, [r7, #8]
 801be5a:	695b      	ldr	r3, [r3, #20]
 801be5c:	2b00      	cmp	r3, #0
 801be5e:	d003      	beq.n	801be68 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 801be60:	68bb      	ldr	r3, [r7, #8]
 801be62:	689a      	ldr	r2, [r3, #8]
 801be64:	68bb      	ldr	r3, [r7, #8]
 801be66:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801be68:	693b      	ldr	r3, [r7, #16]
 801be6a:	015a      	lsls	r2, r3, #5
 801be6c:	697b      	ldr	r3, [r7, #20]
 801be6e:	4413      	add	r3, r2
 801be70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801be74:	691b      	ldr	r3, [r3, #16]
 801be76:	693a      	ldr	r2, [r7, #16]
 801be78:	0151      	lsls	r1, r2, #5
 801be7a:	697a      	ldr	r2, [r7, #20]
 801be7c:	440a      	add	r2, r1
 801be7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801be82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801be86:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 801be88:	693b      	ldr	r3, [r7, #16]
 801be8a:	015a      	lsls	r2, r3, #5
 801be8c:	697b      	ldr	r3, [r7, #20]
 801be8e:	4413      	add	r3, r2
 801be90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801be94:	691a      	ldr	r2, [r3, #16]
 801be96:	68bb      	ldr	r3, [r7, #8]
 801be98:	689b      	ldr	r3, [r3, #8]
 801be9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801be9e:	6939      	ldr	r1, [r7, #16]
 801bea0:	0148      	lsls	r0, r1, #5
 801bea2:	6979      	ldr	r1, [r7, #20]
 801bea4:	4401      	add	r1, r0
 801bea6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801beaa:	4313      	orrs	r3, r2
 801beac:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 801beae:	79fb      	ldrb	r3, [r7, #7]
 801beb0:	2b01      	cmp	r3, #1
 801beb2:	d10d      	bne.n	801bed0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801beb4:	68bb      	ldr	r3, [r7, #8]
 801beb6:	68db      	ldr	r3, [r3, #12]
 801beb8:	2b00      	cmp	r3, #0
 801beba:	d009      	beq.n	801bed0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801bebc:	68bb      	ldr	r3, [r7, #8]
 801bebe:	68d9      	ldr	r1, [r3, #12]
 801bec0:	693b      	ldr	r3, [r7, #16]
 801bec2:	015a      	lsls	r2, r3, #5
 801bec4:	697b      	ldr	r3, [r7, #20]
 801bec6:	4413      	add	r3, r2
 801bec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801becc:	460a      	mov	r2, r1
 801bece:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801bed0:	693b      	ldr	r3, [r7, #16]
 801bed2:	015a      	lsls	r2, r3, #5
 801bed4:	697b      	ldr	r3, [r7, #20]
 801bed6:	4413      	add	r3, r2
 801bed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bedc:	681b      	ldr	r3, [r3, #0]
 801bede:	693a      	ldr	r2, [r7, #16]
 801bee0:	0151      	lsls	r1, r2, #5
 801bee2:	697a      	ldr	r2, [r7, #20]
 801bee4:	440a      	add	r2, r1
 801bee6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801beea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801beee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801bef0:	2300      	movs	r3, #0
}
 801bef2:	4618      	mov	r0, r3
 801bef4:	371c      	adds	r7, #28
 801bef6:	46bd      	mov	sp, r7
 801bef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801befc:	4770      	bx	lr
 801befe:	bf00      	nop
 801bf00:	e007ffff 	.word	0xe007ffff
 801bf04:	fff80000 	.word	0xfff80000

0801bf08 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801bf08:	b480      	push	{r7}
 801bf0a:	b089      	sub	sp, #36	; 0x24
 801bf0c:	af00      	add	r7, sp, #0
 801bf0e:	60f8      	str	r0, [r7, #12]
 801bf10:	60b9      	str	r1, [r7, #8]
 801bf12:	4611      	mov	r1, r2
 801bf14:	461a      	mov	r2, r3
 801bf16:	460b      	mov	r3, r1
 801bf18:	71fb      	strb	r3, [r7, #7]
 801bf1a:	4613      	mov	r3, r2
 801bf1c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bf1e:	68fb      	ldr	r3, [r7, #12]
 801bf20:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 801bf22:	68bb      	ldr	r3, [r7, #8]
 801bf24:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 801bf26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801bf2a:	2b00      	cmp	r3, #0
 801bf2c:	d11a      	bne.n	801bf64 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801bf2e:	88bb      	ldrh	r3, [r7, #4]
 801bf30:	3303      	adds	r3, #3
 801bf32:	089b      	lsrs	r3, r3, #2
 801bf34:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801bf36:	2300      	movs	r3, #0
 801bf38:	61bb      	str	r3, [r7, #24]
 801bf3a:	e00f      	b.n	801bf5c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801bf3c:	79fb      	ldrb	r3, [r7, #7]
 801bf3e:	031a      	lsls	r2, r3, #12
 801bf40:	697b      	ldr	r3, [r7, #20]
 801bf42:	4413      	add	r3, r2
 801bf44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801bf48:	461a      	mov	r2, r3
 801bf4a:	69fb      	ldr	r3, [r7, #28]
 801bf4c:	681b      	ldr	r3, [r3, #0]
 801bf4e:	6013      	str	r3, [r2, #0]
      pSrc++;
 801bf50:	69fb      	ldr	r3, [r7, #28]
 801bf52:	3304      	adds	r3, #4
 801bf54:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801bf56:	69bb      	ldr	r3, [r7, #24]
 801bf58:	3301      	adds	r3, #1
 801bf5a:	61bb      	str	r3, [r7, #24]
 801bf5c:	69ba      	ldr	r2, [r7, #24]
 801bf5e:	693b      	ldr	r3, [r7, #16]
 801bf60:	429a      	cmp	r2, r3
 801bf62:	d3eb      	bcc.n	801bf3c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801bf64:	2300      	movs	r3, #0
}
 801bf66:	4618      	mov	r0, r3
 801bf68:	3724      	adds	r7, #36	; 0x24
 801bf6a:	46bd      	mov	sp, r7
 801bf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf70:	4770      	bx	lr

0801bf72 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801bf72:	b480      	push	{r7}
 801bf74:	b089      	sub	sp, #36	; 0x24
 801bf76:	af00      	add	r7, sp, #0
 801bf78:	60f8      	str	r0, [r7, #12]
 801bf7a:	60b9      	str	r1, [r7, #8]
 801bf7c:	4613      	mov	r3, r2
 801bf7e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bf80:	68fb      	ldr	r3, [r7, #12]
 801bf82:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 801bf84:	68bb      	ldr	r3, [r7, #8]
 801bf86:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 801bf88:	88fb      	ldrh	r3, [r7, #6]
 801bf8a:	3303      	adds	r3, #3
 801bf8c:	089b      	lsrs	r3, r3, #2
 801bf8e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 801bf90:	2300      	movs	r3, #0
 801bf92:	61bb      	str	r3, [r7, #24]
 801bf94:	e00b      	b.n	801bfae <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801bf96:	697b      	ldr	r3, [r7, #20]
 801bf98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801bf9c:	681a      	ldr	r2, [r3, #0]
 801bf9e:	69fb      	ldr	r3, [r7, #28]
 801bfa0:	601a      	str	r2, [r3, #0]
    pDest++;
 801bfa2:	69fb      	ldr	r3, [r7, #28]
 801bfa4:	3304      	adds	r3, #4
 801bfa6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 801bfa8:	69bb      	ldr	r3, [r7, #24]
 801bfaa:	3301      	adds	r3, #1
 801bfac:	61bb      	str	r3, [r7, #24]
 801bfae:	69ba      	ldr	r2, [r7, #24]
 801bfb0:	693b      	ldr	r3, [r7, #16]
 801bfb2:	429a      	cmp	r2, r3
 801bfb4:	d3ef      	bcc.n	801bf96 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 801bfb6:	69fb      	ldr	r3, [r7, #28]
}
 801bfb8:	4618      	mov	r0, r3
 801bfba:	3724      	adds	r7, #36	; 0x24
 801bfbc:	46bd      	mov	sp, r7
 801bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfc2:	4770      	bx	lr

0801bfc4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801bfc4:	b480      	push	{r7}
 801bfc6:	b085      	sub	sp, #20
 801bfc8:	af00      	add	r7, sp, #0
 801bfca:	6078      	str	r0, [r7, #4]
 801bfcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bfce:	687b      	ldr	r3, [r7, #4]
 801bfd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801bfd2:	683b      	ldr	r3, [r7, #0]
 801bfd4:	781b      	ldrb	r3, [r3, #0]
 801bfd6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801bfd8:	683b      	ldr	r3, [r7, #0]
 801bfda:	785b      	ldrb	r3, [r3, #1]
 801bfdc:	2b01      	cmp	r3, #1
 801bfde:	d12c      	bne.n	801c03a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801bfe0:	68bb      	ldr	r3, [r7, #8]
 801bfe2:	015a      	lsls	r2, r3, #5
 801bfe4:	68fb      	ldr	r3, [r7, #12]
 801bfe6:	4413      	add	r3, r2
 801bfe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bfec:	681b      	ldr	r3, [r3, #0]
 801bfee:	2b00      	cmp	r3, #0
 801bff0:	db12      	blt.n	801c018 <USB_EPSetStall+0x54>
 801bff2:	68bb      	ldr	r3, [r7, #8]
 801bff4:	2b00      	cmp	r3, #0
 801bff6:	d00f      	beq.n	801c018 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801bff8:	68bb      	ldr	r3, [r7, #8]
 801bffa:	015a      	lsls	r2, r3, #5
 801bffc:	68fb      	ldr	r3, [r7, #12]
 801bffe:	4413      	add	r3, r2
 801c000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c004:	681b      	ldr	r3, [r3, #0]
 801c006:	68ba      	ldr	r2, [r7, #8]
 801c008:	0151      	lsls	r1, r2, #5
 801c00a:	68fa      	ldr	r2, [r7, #12]
 801c00c:	440a      	add	r2, r1
 801c00e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c012:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801c016:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801c018:	68bb      	ldr	r3, [r7, #8]
 801c01a:	015a      	lsls	r2, r3, #5
 801c01c:	68fb      	ldr	r3, [r7, #12]
 801c01e:	4413      	add	r3, r2
 801c020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c024:	681b      	ldr	r3, [r3, #0]
 801c026:	68ba      	ldr	r2, [r7, #8]
 801c028:	0151      	lsls	r1, r2, #5
 801c02a:	68fa      	ldr	r2, [r7, #12]
 801c02c:	440a      	add	r2, r1
 801c02e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c032:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801c036:	6013      	str	r3, [r2, #0]
 801c038:	e02b      	b.n	801c092 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801c03a:	68bb      	ldr	r3, [r7, #8]
 801c03c:	015a      	lsls	r2, r3, #5
 801c03e:	68fb      	ldr	r3, [r7, #12]
 801c040:	4413      	add	r3, r2
 801c042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c046:	681b      	ldr	r3, [r3, #0]
 801c048:	2b00      	cmp	r3, #0
 801c04a:	db12      	blt.n	801c072 <USB_EPSetStall+0xae>
 801c04c:	68bb      	ldr	r3, [r7, #8]
 801c04e:	2b00      	cmp	r3, #0
 801c050:	d00f      	beq.n	801c072 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801c052:	68bb      	ldr	r3, [r7, #8]
 801c054:	015a      	lsls	r2, r3, #5
 801c056:	68fb      	ldr	r3, [r7, #12]
 801c058:	4413      	add	r3, r2
 801c05a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c05e:	681b      	ldr	r3, [r3, #0]
 801c060:	68ba      	ldr	r2, [r7, #8]
 801c062:	0151      	lsls	r1, r2, #5
 801c064:	68fa      	ldr	r2, [r7, #12]
 801c066:	440a      	add	r2, r1
 801c068:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c06c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801c070:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801c072:	68bb      	ldr	r3, [r7, #8]
 801c074:	015a      	lsls	r2, r3, #5
 801c076:	68fb      	ldr	r3, [r7, #12]
 801c078:	4413      	add	r3, r2
 801c07a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c07e:	681b      	ldr	r3, [r3, #0]
 801c080:	68ba      	ldr	r2, [r7, #8]
 801c082:	0151      	lsls	r1, r2, #5
 801c084:	68fa      	ldr	r2, [r7, #12]
 801c086:	440a      	add	r2, r1
 801c088:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c08c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801c090:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801c092:	2300      	movs	r3, #0
}
 801c094:	4618      	mov	r0, r3
 801c096:	3714      	adds	r7, #20
 801c098:	46bd      	mov	sp, r7
 801c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c09e:	4770      	bx	lr

0801c0a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801c0a0:	b480      	push	{r7}
 801c0a2:	b085      	sub	sp, #20
 801c0a4:	af00      	add	r7, sp, #0
 801c0a6:	6078      	str	r0, [r7, #4]
 801c0a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c0aa:	687b      	ldr	r3, [r7, #4]
 801c0ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801c0ae:	683b      	ldr	r3, [r7, #0]
 801c0b0:	781b      	ldrb	r3, [r3, #0]
 801c0b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801c0b4:	683b      	ldr	r3, [r7, #0]
 801c0b6:	785b      	ldrb	r3, [r3, #1]
 801c0b8:	2b01      	cmp	r3, #1
 801c0ba:	d128      	bne.n	801c10e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801c0bc:	68bb      	ldr	r3, [r7, #8]
 801c0be:	015a      	lsls	r2, r3, #5
 801c0c0:	68fb      	ldr	r3, [r7, #12]
 801c0c2:	4413      	add	r3, r2
 801c0c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c0c8:	681b      	ldr	r3, [r3, #0]
 801c0ca:	68ba      	ldr	r2, [r7, #8]
 801c0cc:	0151      	lsls	r1, r2, #5
 801c0ce:	68fa      	ldr	r2, [r7, #12]
 801c0d0:	440a      	add	r2, r1
 801c0d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c0d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801c0da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801c0dc:	683b      	ldr	r3, [r7, #0]
 801c0de:	78db      	ldrb	r3, [r3, #3]
 801c0e0:	2b03      	cmp	r3, #3
 801c0e2:	d003      	beq.n	801c0ec <USB_EPClearStall+0x4c>
 801c0e4:	683b      	ldr	r3, [r7, #0]
 801c0e6:	78db      	ldrb	r3, [r3, #3]
 801c0e8:	2b02      	cmp	r3, #2
 801c0ea:	d138      	bne.n	801c15e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801c0ec:	68bb      	ldr	r3, [r7, #8]
 801c0ee:	015a      	lsls	r2, r3, #5
 801c0f0:	68fb      	ldr	r3, [r7, #12]
 801c0f2:	4413      	add	r3, r2
 801c0f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c0f8:	681b      	ldr	r3, [r3, #0]
 801c0fa:	68ba      	ldr	r2, [r7, #8]
 801c0fc:	0151      	lsls	r1, r2, #5
 801c0fe:	68fa      	ldr	r2, [r7, #12]
 801c100:	440a      	add	r2, r1
 801c102:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801c10a:	6013      	str	r3, [r2, #0]
 801c10c:	e027      	b.n	801c15e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801c10e:	68bb      	ldr	r3, [r7, #8]
 801c110:	015a      	lsls	r2, r3, #5
 801c112:	68fb      	ldr	r3, [r7, #12]
 801c114:	4413      	add	r3, r2
 801c116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c11a:	681b      	ldr	r3, [r3, #0]
 801c11c:	68ba      	ldr	r2, [r7, #8]
 801c11e:	0151      	lsls	r1, r2, #5
 801c120:	68fa      	ldr	r2, [r7, #12]
 801c122:	440a      	add	r2, r1
 801c124:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c128:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801c12c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801c12e:	683b      	ldr	r3, [r7, #0]
 801c130:	78db      	ldrb	r3, [r3, #3]
 801c132:	2b03      	cmp	r3, #3
 801c134:	d003      	beq.n	801c13e <USB_EPClearStall+0x9e>
 801c136:	683b      	ldr	r3, [r7, #0]
 801c138:	78db      	ldrb	r3, [r3, #3]
 801c13a:	2b02      	cmp	r3, #2
 801c13c:	d10f      	bne.n	801c15e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801c13e:	68bb      	ldr	r3, [r7, #8]
 801c140:	015a      	lsls	r2, r3, #5
 801c142:	68fb      	ldr	r3, [r7, #12]
 801c144:	4413      	add	r3, r2
 801c146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c14a:	681b      	ldr	r3, [r3, #0]
 801c14c:	68ba      	ldr	r2, [r7, #8]
 801c14e:	0151      	lsls	r1, r2, #5
 801c150:	68fa      	ldr	r2, [r7, #12]
 801c152:	440a      	add	r2, r1
 801c154:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801c15c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801c15e:	2300      	movs	r3, #0
}
 801c160:	4618      	mov	r0, r3
 801c162:	3714      	adds	r7, #20
 801c164:	46bd      	mov	sp, r7
 801c166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c16a:	4770      	bx	lr

0801c16c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801c16c:	b480      	push	{r7}
 801c16e:	b085      	sub	sp, #20
 801c170:	af00      	add	r7, sp, #0
 801c172:	6078      	str	r0, [r7, #4]
 801c174:	460b      	mov	r3, r1
 801c176:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c178:	687b      	ldr	r3, [r7, #4]
 801c17a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801c17c:	68fb      	ldr	r3, [r7, #12]
 801c17e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c182:	681b      	ldr	r3, [r3, #0]
 801c184:	68fa      	ldr	r2, [r7, #12]
 801c186:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801c18a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801c18e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801c190:	68fb      	ldr	r3, [r7, #12]
 801c192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c196:	681a      	ldr	r2, [r3, #0]
 801c198:	78fb      	ldrb	r3, [r7, #3]
 801c19a:	011b      	lsls	r3, r3, #4
 801c19c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801c1a0:	68f9      	ldr	r1, [r7, #12]
 801c1a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801c1a6:	4313      	orrs	r3, r2
 801c1a8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801c1aa:	2300      	movs	r3, #0
}
 801c1ac:	4618      	mov	r0, r3
 801c1ae:	3714      	adds	r7, #20
 801c1b0:	46bd      	mov	sp, r7
 801c1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1b6:	4770      	bx	lr

0801c1b8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801c1b8:	b580      	push	{r7, lr}
 801c1ba:	b084      	sub	sp, #16
 801c1bc:	af00      	add	r7, sp, #0
 801c1be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c1c0:	687b      	ldr	r3, [r7, #4]
 801c1c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801c1c4:	68fb      	ldr	r3, [r7, #12]
 801c1c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c1ca:	685b      	ldr	r3, [r3, #4]
 801c1cc:	68fa      	ldr	r2, [r7, #12]
 801c1ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801c1d2:	f023 0302 	bic.w	r3, r3, #2
 801c1d6:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 801c1d8:	2003      	movs	r0, #3
 801c1da:	f7f6 fe7b 	bl	8012ed4 <HAL_Delay>

  return HAL_OK;
 801c1de:	2300      	movs	r3, #0
}
 801c1e0:	4618      	mov	r0, r3
 801c1e2:	3710      	adds	r7, #16
 801c1e4:	46bd      	mov	sp, r7
 801c1e6:	bd80      	pop	{r7, pc}

0801c1e8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801c1e8:	b580      	push	{r7, lr}
 801c1ea:	b084      	sub	sp, #16
 801c1ec:	af00      	add	r7, sp, #0
 801c1ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c1f0:	687b      	ldr	r3, [r7, #4]
 801c1f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801c1f4:	68fb      	ldr	r3, [r7, #12]
 801c1f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c1fa:	685b      	ldr	r3, [r3, #4]
 801c1fc:	68fa      	ldr	r2, [r7, #12]
 801c1fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801c202:	f043 0302 	orr.w	r3, r3, #2
 801c206:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 801c208:	2003      	movs	r0, #3
 801c20a:	f7f6 fe63 	bl	8012ed4 <HAL_Delay>

  return HAL_OK;
 801c20e:	2300      	movs	r3, #0
}
 801c210:	4618      	mov	r0, r3
 801c212:	3710      	adds	r7, #16
 801c214:	46bd      	mov	sp, r7
 801c216:	bd80      	pop	{r7, pc}

0801c218 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801c218:	b480      	push	{r7}
 801c21a:	b085      	sub	sp, #20
 801c21c:	af00      	add	r7, sp, #0
 801c21e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801c220:	687b      	ldr	r3, [r7, #4]
 801c222:	695b      	ldr	r3, [r3, #20]
 801c224:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801c226:	687b      	ldr	r3, [r7, #4]
 801c228:	699b      	ldr	r3, [r3, #24]
 801c22a:	68fa      	ldr	r2, [r7, #12]
 801c22c:	4013      	ands	r3, r2
 801c22e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801c230:	68fb      	ldr	r3, [r7, #12]
}
 801c232:	4618      	mov	r0, r3
 801c234:	3714      	adds	r7, #20
 801c236:	46bd      	mov	sp, r7
 801c238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c23c:	4770      	bx	lr

0801c23e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801c23e:	b480      	push	{r7}
 801c240:	b085      	sub	sp, #20
 801c242:	af00      	add	r7, sp, #0
 801c244:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c246:	687b      	ldr	r3, [r7, #4]
 801c248:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801c24a:	68fb      	ldr	r3, [r7, #12]
 801c24c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c250:	699b      	ldr	r3, [r3, #24]
 801c252:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801c254:	68fb      	ldr	r3, [r7, #12]
 801c256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c25a:	69db      	ldr	r3, [r3, #28]
 801c25c:	68ba      	ldr	r2, [r7, #8]
 801c25e:	4013      	ands	r3, r2
 801c260:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801c262:	68bb      	ldr	r3, [r7, #8]
 801c264:	0c1b      	lsrs	r3, r3, #16
}
 801c266:	4618      	mov	r0, r3
 801c268:	3714      	adds	r7, #20
 801c26a:	46bd      	mov	sp, r7
 801c26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c270:	4770      	bx	lr

0801c272 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801c272:	b480      	push	{r7}
 801c274:	b085      	sub	sp, #20
 801c276:	af00      	add	r7, sp, #0
 801c278:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c27a:	687b      	ldr	r3, [r7, #4]
 801c27c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801c27e:	68fb      	ldr	r3, [r7, #12]
 801c280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c284:	699b      	ldr	r3, [r3, #24]
 801c286:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801c288:	68fb      	ldr	r3, [r7, #12]
 801c28a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c28e:	69db      	ldr	r3, [r3, #28]
 801c290:	68ba      	ldr	r2, [r7, #8]
 801c292:	4013      	ands	r3, r2
 801c294:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801c296:	68bb      	ldr	r3, [r7, #8]
 801c298:	b29b      	uxth	r3, r3
}
 801c29a:	4618      	mov	r0, r3
 801c29c:	3714      	adds	r7, #20
 801c29e:	46bd      	mov	sp, r7
 801c2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2a4:	4770      	bx	lr

0801c2a6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801c2a6:	b480      	push	{r7}
 801c2a8:	b085      	sub	sp, #20
 801c2aa:	af00      	add	r7, sp, #0
 801c2ac:	6078      	str	r0, [r7, #4]
 801c2ae:	460b      	mov	r3, r1
 801c2b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c2b2:	687b      	ldr	r3, [r7, #4]
 801c2b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801c2b6:	78fb      	ldrb	r3, [r7, #3]
 801c2b8:	015a      	lsls	r2, r3, #5
 801c2ba:	68fb      	ldr	r3, [r7, #12]
 801c2bc:	4413      	add	r3, r2
 801c2be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c2c2:	689b      	ldr	r3, [r3, #8]
 801c2c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801c2c6:	68fb      	ldr	r3, [r7, #12]
 801c2c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c2cc:	695b      	ldr	r3, [r3, #20]
 801c2ce:	68ba      	ldr	r2, [r7, #8]
 801c2d0:	4013      	ands	r3, r2
 801c2d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801c2d4:	68bb      	ldr	r3, [r7, #8]
}
 801c2d6:	4618      	mov	r0, r3
 801c2d8:	3714      	adds	r7, #20
 801c2da:	46bd      	mov	sp, r7
 801c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2e0:	4770      	bx	lr

0801c2e2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801c2e2:	b480      	push	{r7}
 801c2e4:	b087      	sub	sp, #28
 801c2e6:	af00      	add	r7, sp, #0
 801c2e8:	6078      	str	r0, [r7, #4]
 801c2ea:	460b      	mov	r3, r1
 801c2ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c2ee:	687b      	ldr	r3, [r7, #4]
 801c2f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 801c2f2:	697b      	ldr	r3, [r7, #20]
 801c2f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c2f8:	691b      	ldr	r3, [r3, #16]
 801c2fa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801c2fc:	697b      	ldr	r3, [r7, #20]
 801c2fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c304:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801c306:	78fb      	ldrb	r3, [r7, #3]
 801c308:	f003 030f 	and.w	r3, r3, #15
 801c30c:	68fa      	ldr	r2, [r7, #12]
 801c30e:	fa22 f303 	lsr.w	r3, r2, r3
 801c312:	01db      	lsls	r3, r3, #7
 801c314:	b2db      	uxtb	r3, r3
 801c316:	693a      	ldr	r2, [r7, #16]
 801c318:	4313      	orrs	r3, r2
 801c31a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801c31c:	78fb      	ldrb	r3, [r7, #3]
 801c31e:	015a      	lsls	r2, r3, #5
 801c320:	697b      	ldr	r3, [r7, #20]
 801c322:	4413      	add	r3, r2
 801c324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c328:	689b      	ldr	r3, [r3, #8]
 801c32a:	693a      	ldr	r2, [r7, #16]
 801c32c:	4013      	ands	r3, r2
 801c32e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801c330:	68bb      	ldr	r3, [r7, #8]
}
 801c332:	4618      	mov	r0, r3
 801c334:	371c      	adds	r7, #28
 801c336:	46bd      	mov	sp, r7
 801c338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c33c:	4770      	bx	lr

0801c33e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801c33e:	b480      	push	{r7}
 801c340:	b083      	sub	sp, #12
 801c342:	af00      	add	r7, sp, #0
 801c344:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801c346:	687b      	ldr	r3, [r7, #4]
 801c348:	695b      	ldr	r3, [r3, #20]
 801c34a:	f003 0301 	and.w	r3, r3, #1
}
 801c34e:	4618      	mov	r0, r3
 801c350:	370c      	adds	r7, #12
 801c352:	46bd      	mov	sp, r7
 801c354:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c358:	4770      	bx	lr
	...

0801c35c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801c35c:	b480      	push	{r7}
 801c35e:	b085      	sub	sp, #20
 801c360:	af00      	add	r7, sp, #0
 801c362:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c364:	687b      	ldr	r3, [r7, #4]
 801c366:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801c368:	68fb      	ldr	r3, [r7, #12]
 801c36a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c36e:	681a      	ldr	r2, [r3, #0]
 801c370:	68fb      	ldr	r3, [r7, #12]
 801c372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c376:	4619      	mov	r1, r3
 801c378:	4b09      	ldr	r3, [pc, #36]	; (801c3a0 <USB_ActivateSetup+0x44>)
 801c37a:	4013      	ands	r3, r2
 801c37c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801c37e:	68fb      	ldr	r3, [r7, #12]
 801c380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c384:	685b      	ldr	r3, [r3, #4]
 801c386:	68fa      	ldr	r2, [r7, #12]
 801c388:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801c38c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c390:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801c392:	2300      	movs	r3, #0
}
 801c394:	4618      	mov	r0, r3
 801c396:	3714      	adds	r7, #20
 801c398:	46bd      	mov	sp, r7
 801c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c39e:	4770      	bx	lr
 801c3a0:	fffff800 	.word	0xfffff800

0801c3a4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801c3a4:	b480      	push	{r7}
 801c3a6:	b087      	sub	sp, #28
 801c3a8:	af00      	add	r7, sp, #0
 801c3aa:	60f8      	str	r0, [r7, #12]
 801c3ac:	460b      	mov	r3, r1
 801c3ae:	607a      	str	r2, [r7, #4]
 801c3b0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c3b2:	68fb      	ldr	r3, [r7, #12]
 801c3b4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801c3b6:	68fb      	ldr	r3, [r7, #12]
 801c3b8:	333c      	adds	r3, #60	; 0x3c
 801c3ba:	3304      	adds	r3, #4
 801c3bc:	681b      	ldr	r3, [r3, #0]
 801c3be:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801c3c0:	693b      	ldr	r3, [r7, #16]
 801c3c2:	4a26      	ldr	r2, [pc, #152]	; (801c45c <USB_EP0_OutStart+0xb8>)
 801c3c4:	4293      	cmp	r3, r2
 801c3c6:	d90a      	bls.n	801c3de <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801c3c8:	697b      	ldr	r3, [r7, #20]
 801c3ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c3ce:	681b      	ldr	r3, [r3, #0]
 801c3d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801c3d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801c3d8:	d101      	bne.n	801c3de <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801c3da:	2300      	movs	r3, #0
 801c3dc:	e037      	b.n	801c44e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801c3de:	697b      	ldr	r3, [r7, #20]
 801c3e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c3e4:	461a      	mov	r2, r3
 801c3e6:	2300      	movs	r3, #0
 801c3e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801c3ea:	697b      	ldr	r3, [r7, #20]
 801c3ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c3f0:	691b      	ldr	r3, [r3, #16]
 801c3f2:	697a      	ldr	r2, [r7, #20]
 801c3f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c3f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801c3fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801c3fe:	697b      	ldr	r3, [r7, #20]
 801c400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c404:	691b      	ldr	r3, [r3, #16]
 801c406:	697a      	ldr	r2, [r7, #20]
 801c408:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c40c:	f043 0318 	orr.w	r3, r3, #24
 801c410:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801c412:	697b      	ldr	r3, [r7, #20]
 801c414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c418:	691b      	ldr	r3, [r3, #16]
 801c41a:	697a      	ldr	r2, [r7, #20]
 801c41c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c420:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801c424:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801c426:	7afb      	ldrb	r3, [r7, #11]
 801c428:	2b01      	cmp	r3, #1
 801c42a:	d10f      	bne.n	801c44c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801c42c:	697b      	ldr	r3, [r7, #20]
 801c42e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c432:	461a      	mov	r2, r3
 801c434:	687b      	ldr	r3, [r7, #4]
 801c436:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801c438:	697b      	ldr	r3, [r7, #20]
 801c43a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c43e:	681b      	ldr	r3, [r3, #0]
 801c440:	697a      	ldr	r2, [r7, #20]
 801c442:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c446:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801c44a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801c44c:	2300      	movs	r3, #0
}
 801c44e:	4618      	mov	r0, r3
 801c450:	371c      	adds	r7, #28
 801c452:	46bd      	mov	sp, r7
 801c454:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c458:	4770      	bx	lr
 801c45a:	bf00      	nop
 801c45c:	4f54300a 	.word	0x4f54300a

0801c460 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801c460:	b480      	push	{r7}
 801c462:	b085      	sub	sp, #20
 801c464:	af00      	add	r7, sp, #0
 801c466:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 801c468:	2300      	movs	r3, #0
 801c46a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801c46c:	68fb      	ldr	r3, [r7, #12]
 801c46e:	3301      	adds	r3, #1
 801c470:	60fb      	str	r3, [r7, #12]
 801c472:	68fb      	ldr	r3, [r7, #12]
 801c474:	4a13      	ldr	r2, [pc, #76]	; (801c4c4 <USB_CoreReset+0x64>)
 801c476:	4293      	cmp	r3, r2
 801c478:	d901      	bls.n	801c47e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801c47a:	2303      	movs	r3, #3
 801c47c:	e01b      	b.n	801c4b6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801c47e:	687b      	ldr	r3, [r7, #4]
 801c480:	691b      	ldr	r3, [r3, #16]
 801c482:	2b00      	cmp	r3, #0
 801c484:	daf2      	bge.n	801c46c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801c486:	2300      	movs	r3, #0
 801c488:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801c48a:	687b      	ldr	r3, [r7, #4]
 801c48c:	691b      	ldr	r3, [r3, #16]
 801c48e:	f043 0201 	orr.w	r2, r3, #1
 801c492:	687b      	ldr	r3, [r7, #4]
 801c494:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801c496:	68fb      	ldr	r3, [r7, #12]
 801c498:	3301      	adds	r3, #1
 801c49a:	60fb      	str	r3, [r7, #12]
 801c49c:	68fb      	ldr	r3, [r7, #12]
 801c49e:	4a09      	ldr	r2, [pc, #36]	; (801c4c4 <USB_CoreReset+0x64>)
 801c4a0:	4293      	cmp	r3, r2
 801c4a2:	d901      	bls.n	801c4a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801c4a4:	2303      	movs	r3, #3
 801c4a6:	e006      	b.n	801c4b6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801c4a8:	687b      	ldr	r3, [r7, #4]
 801c4aa:	691b      	ldr	r3, [r3, #16]
 801c4ac:	f003 0301 	and.w	r3, r3, #1
 801c4b0:	2b01      	cmp	r3, #1
 801c4b2:	d0f0      	beq.n	801c496 <USB_CoreReset+0x36>

  return HAL_OK;
 801c4b4:	2300      	movs	r3, #0
}
 801c4b6:	4618      	mov	r0, r3
 801c4b8:	3714      	adds	r7, #20
 801c4ba:	46bd      	mov	sp, r7
 801c4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4c0:	4770      	bx	lr
 801c4c2:	bf00      	nop
 801c4c4:	00030d40 	.word	0x00030d40

0801c4c8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801c4c8:	b580      	push	{r7, lr}
 801c4ca:	b084      	sub	sp, #16
 801c4cc:	af00      	add	r7, sp, #0
 801c4ce:	6078      	str	r0, [r7, #4]
 801c4d0:	460b      	mov	r3, r1
 801c4d2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 801c4d4:	2300      	movs	r3, #0
 801c4d6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c4d8:	687b      	ldr	r3, [r7, #4]
 801c4da:	7c1b      	ldrb	r3, [r3, #16]
 801c4dc:	2b00      	cmp	r3, #0
 801c4de:	d115      	bne.n	801c50c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801c4e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 801c4e4:	2202      	movs	r2, #2
 801c4e6:	2181      	movs	r1, #129	; 0x81
 801c4e8:	6878      	ldr	r0, [r7, #4]
 801c4ea:	f001 ff6e 	bl	801e3ca <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801c4ee:	687b      	ldr	r3, [r7, #4]
 801c4f0:	2201      	movs	r2, #1
 801c4f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801c4f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 801c4f8:	2202      	movs	r2, #2
 801c4fa:	2101      	movs	r1, #1
 801c4fc:	6878      	ldr	r0, [r7, #4]
 801c4fe:	f001 ff64 	bl	801e3ca <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801c502:	687b      	ldr	r3, [r7, #4]
 801c504:	2201      	movs	r2, #1
 801c506:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 801c50a:	e012      	b.n	801c532 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801c50c:	2340      	movs	r3, #64	; 0x40
 801c50e:	2202      	movs	r2, #2
 801c510:	2181      	movs	r1, #129	; 0x81
 801c512:	6878      	ldr	r0, [r7, #4]
 801c514:	f001 ff59 	bl	801e3ca <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801c518:	687b      	ldr	r3, [r7, #4]
 801c51a:	2201      	movs	r2, #1
 801c51c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801c51e:	2340      	movs	r3, #64	; 0x40
 801c520:	2202      	movs	r2, #2
 801c522:	2101      	movs	r1, #1
 801c524:	6878      	ldr	r0, [r7, #4]
 801c526:	f001 ff50 	bl	801e3ca <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801c52a:	687b      	ldr	r3, [r7, #4]
 801c52c:	2201      	movs	r2, #1
 801c52e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801c532:	2308      	movs	r3, #8
 801c534:	2203      	movs	r2, #3
 801c536:	2182      	movs	r1, #130	; 0x82
 801c538:	6878      	ldr	r0, [r7, #4]
 801c53a:	f001 ff46 	bl	801e3ca <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801c53e:	687b      	ldr	r3, [r7, #4]
 801c540:	2201      	movs	r2, #1
 801c542:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801c544:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801c548:	f002 f8d6 	bl	801e6f8 <malloc>
 801c54c:	4603      	mov	r3, r0
 801c54e:	461a      	mov	r2, r3
 801c550:	687b      	ldr	r3, [r7, #4]
 801c552:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 801c556:	687b      	ldr	r3, [r7, #4]
 801c558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c55c:	2b00      	cmp	r3, #0
 801c55e:	d102      	bne.n	801c566 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 801c560:	2301      	movs	r3, #1
 801c562:	73fb      	strb	r3, [r7, #15]
 801c564:	e026      	b.n	801c5b4 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c566:	687b      	ldr	r3, [r7, #4]
 801c568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c56c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801c56e:	687b      	ldr	r3, [r7, #4]
 801c570:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c574:	681b      	ldr	r3, [r3, #0]
 801c576:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801c578:	68bb      	ldr	r3, [r7, #8]
 801c57a:	2200      	movs	r2, #0
 801c57c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 801c580:	68bb      	ldr	r3, [r7, #8]
 801c582:	2200      	movs	r2, #0
 801c584:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c588:	687b      	ldr	r3, [r7, #4]
 801c58a:	7c1b      	ldrb	r3, [r3, #16]
 801c58c:	2b00      	cmp	r3, #0
 801c58e:	d109      	bne.n	801c5a4 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801c590:	68bb      	ldr	r3, [r7, #8]
 801c592:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801c596:	f44f 7300 	mov.w	r3, #512	; 0x200
 801c59a:	2101      	movs	r1, #1
 801c59c:	6878      	ldr	r0, [r7, #4]
 801c59e:	f002 f805 	bl	801e5ac <USBD_LL_PrepareReceive>
 801c5a2:	e007      	b.n	801c5b4 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801c5a4:	68bb      	ldr	r3, [r7, #8]
 801c5a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801c5aa:	2340      	movs	r3, #64	; 0x40
 801c5ac:	2101      	movs	r1, #1
 801c5ae:	6878      	ldr	r0, [r7, #4]
 801c5b0:	f001 fffc 	bl	801e5ac <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801c5b4:	7bfb      	ldrb	r3, [r7, #15]
}
 801c5b6:	4618      	mov	r0, r3
 801c5b8:	3710      	adds	r7, #16
 801c5ba:	46bd      	mov	sp, r7
 801c5bc:	bd80      	pop	{r7, pc}

0801c5be <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801c5be:	b580      	push	{r7, lr}
 801c5c0:	b084      	sub	sp, #16
 801c5c2:	af00      	add	r7, sp, #0
 801c5c4:	6078      	str	r0, [r7, #4]
 801c5c6:	460b      	mov	r3, r1
 801c5c8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 801c5ca:	2300      	movs	r3, #0
 801c5cc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801c5ce:	2181      	movs	r1, #129	; 0x81
 801c5d0:	6878      	ldr	r0, [r7, #4]
 801c5d2:	f001 ff20 	bl	801e416 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801c5d6:	687b      	ldr	r3, [r7, #4]
 801c5d8:	2200      	movs	r2, #0
 801c5da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801c5dc:	2101      	movs	r1, #1
 801c5de:	6878      	ldr	r0, [r7, #4]
 801c5e0:	f001 ff19 	bl	801e416 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801c5e4:	687b      	ldr	r3, [r7, #4]
 801c5e6:	2200      	movs	r2, #0
 801c5e8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801c5ec:	2182      	movs	r1, #130	; 0x82
 801c5ee:	6878      	ldr	r0, [r7, #4]
 801c5f0:	f001 ff11 	bl	801e416 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801c5f4:	687b      	ldr	r3, [r7, #4]
 801c5f6:	2200      	movs	r2, #0
 801c5f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801c5fa:	687b      	ldr	r3, [r7, #4]
 801c5fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c600:	2b00      	cmp	r3, #0
 801c602:	d00e      	beq.n	801c622 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801c604:	687b      	ldr	r3, [r7, #4]
 801c606:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c60a:	685b      	ldr	r3, [r3, #4]
 801c60c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801c60e:	687b      	ldr	r3, [r7, #4]
 801c610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c614:	4618      	mov	r0, r3
 801c616:	f002 f877 	bl	801e708 <free>
    pdev->pClassData = NULL;
 801c61a:	687b      	ldr	r3, [r7, #4]
 801c61c:	2200      	movs	r2, #0
 801c61e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 801c622:	7bfb      	ldrb	r3, [r7, #15]
}
 801c624:	4618      	mov	r0, r3
 801c626:	3710      	adds	r7, #16
 801c628:	46bd      	mov	sp, r7
 801c62a:	bd80      	pop	{r7, pc}

0801c62c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801c62c:	b580      	push	{r7, lr}
 801c62e:	b086      	sub	sp, #24
 801c630:	af00      	add	r7, sp, #0
 801c632:	6078      	str	r0, [r7, #4]
 801c634:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c636:	687b      	ldr	r3, [r7, #4]
 801c638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c63c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801c63e:	2300      	movs	r3, #0
 801c640:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 801c642:	2300      	movs	r3, #0
 801c644:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 801c646:	2300      	movs	r3, #0
 801c648:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801c64a:	683b      	ldr	r3, [r7, #0]
 801c64c:	781b      	ldrb	r3, [r3, #0]
 801c64e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c652:	2b00      	cmp	r3, #0
 801c654:	d039      	beq.n	801c6ca <USBD_CDC_Setup+0x9e>
 801c656:	2b20      	cmp	r3, #32
 801c658:	d17c      	bne.n	801c754 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801c65a:	683b      	ldr	r3, [r7, #0]
 801c65c:	88db      	ldrh	r3, [r3, #6]
 801c65e:	2b00      	cmp	r3, #0
 801c660:	d029      	beq.n	801c6b6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 801c662:	683b      	ldr	r3, [r7, #0]
 801c664:	781b      	ldrb	r3, [r3, #0]
 801c666:	b25b      	sxtb	r3, r3
 801c668:	2b00      	cmp	r3, #0
 801c66a:	da11      	bge.n	801c690 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801c66c:	687b      	ldr	r3, [r7, #4]
 801c66e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c672:	689b      	ldr	r3, [r3, #8]
 801c674:	683a      	ldr	r2, [r7, #0]
 801c676:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801c678:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801c67a:	683a      	ldr	r2, [r7, #0]
 801c67c:	88d2      	ldrh	r2, [r2, #6]
 801c67e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801c680:	6939      	ldr	r1, [r7, #16]
 801c682:	683b      	ldr	r3, [r7, #0]
 801c684:	88db      	ldrh	r3, [r3, #6]
 801c686:	461a      	mov	r2, r3
 801c688:	6878      	ldr	r0, [r7, #4]
 801c68a:	f001 fa3f 	bl	801db0c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801c68e:	e068      	b.n	801c762 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 801c690:	683b      	ldr	r3, [r7, #0]
 801c692:	785a      	ldrb	r2, [r3, #1]
 801c694:	693b      	ldr	r3, [r7, #16]
 801c696:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 801c69a:	683b      	ldr	r3, [r7, #0]
 801c69c:	88db      	ldrh	r3, [r3, #6]
 801c69e:	b2da      	uxtb	r2, r3
 801c6a0:	693b      	ldr	r3, [r7, #16]
 801c6a2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801c6a6:	6939      	ldr	r1, [r7, #16]
 801c6a8:	683b      	ldr	r3, [r7, #0]
 801c6aa:	88db      	ldrh	r3, [r3, #6]
 801c6ac:	461a      	mov	r2, r3
 801c6ae:	6878      	ldr	r0, [r7, #4]
 801c6b0:	f001 fa5a 	bl	801db68 <USBD_CtlPrepareRx>
      break;
 801c6b4:	e055      	b.n	801c762 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801c6b6:	687b      	ldr	r3, [r7, #4]
 801c6b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c6bc:	689b      	ldr	r3, [r3, #8]
 801c6be:	683a      	ldr	r2, [r7, #0]
 801c6c0:	7850      	ldrb	r0, [r2, #1]
 801c6c2:	2200      	movs	r2, #0
 801c6c4:	6839      	ldr	r1, [r7, #0]
 801c6c6:	4798      	blx	r3
      break;
 801c6c8:	e04b      	b.n	801c762 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801c6ca:	683b      	ldr	r3, [r7, #0]
 801c6cc:	785b      	ldrb	r3, [r3, #1]
 801c6ce:	2b0a      	cmp	r3, #10
 801c6d0:	d017      	beq.n	801c702 <USBD_CDC_Setup+0xd6>
 801c6d2:	2b0b      	cmp	r3, #11
 801c6d4:	d029      	beq.n	801c72a <USBD_CDC_Setup+0xfe>
 801c6d6:	2b00      	cmp	r3, #0
 801c6d8:	d133      	bne.n	801c742 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c6da:	687b      	ldr	r3, [r7, #4]
 801c6dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c6e0:	2b03      	cmp	r3, #3
 801c6e2:	d107      	bne.n	801c6f4 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801c6e4:	f107 030c 	add.w	r3, r7, #12
 801c6e8:	2202      	movs	r2, #2
 801c6ea:	4619      	mov	r1, r3
 801c6ec:	6878      	ldr	r0, [r7, #4]
 801c6ee:	f001 fa0d 	bl	801db0c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801c6f2:	e02e      	b.n	801c752 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 801c6f4:	6839      	ldr	r1, [r7, #0]
 801c6f6:	6878      	ldr	r0, [r7, #4]
 801c6f8:	f001 f99d 	bl	801da36 <USBD_CtlError>
            ret = USBD_FAIL;
 801c6fc:	2302      	movs	r3, #2
 801c6fe:	75fb      	strb	r3, [r7, #23]
          break;
 801c700:	e027      	b.n	801c752 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c702:	687b      	ldr	r3, [r7, #4]
 801c704:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c708:	2b03      	cmp	r3, #3
 801c70a:	d107      	bne.n	801c71c <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801c70c:	f107 030f 	add.w	r3, r7, #15
 801c710:	2201      	movs	r2, #1
 801c712:	4619      	mov	r1, r3
 801c714:	6878      	ldr	r0, [r7, #4]
 801c716:	f001 f9f9 	bl	801db0c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801c71a:	e01a      	b.n	801c752 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 801c71c:	6839      	ldr	r1, [r7, #0]
 801c71e:	6878      	ldr	r0, [r7, #4]
 801c720:	f001 f989 	bl	801da36 <USBD_CtlError>
            ret = USBD_FAIL;
 801c724:	2302      	movs	r3, #2
 801c726:	75fb      	strb	r3, [r7, #23]
          break;
 801c728:	e013      	b.n	801c752 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801c72a:	687b      	ldr	r3, [r7, #4]
 801c72c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c730:	2b03      	cmp	r3, #3
 801c732:	d00d      	beq.n	801c750 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 801c734:	6839      	ldr	r1, [r7, #0]
 801c736:	6878      	ldr	r0, [r7, #4]
 801c738:	f001 f97d 	bl	801da36 <USBD_CtlError>
            ret = USBD_FAIL;
 801c73c:	2302      	movs	r3, #2
 801c73e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 801c740:	e006      	b.n	801c750 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 801c742:	6839      	ldr	r1, [r7, #0]
 801c744:	6878      	ldr	r0, [r7, #4]
 801c746:	f001 f976 	bl	801da36 <USBD_CtlError>
          ret = USBD_FAIL;
 801c74a:	2302      	movs	r3, #2
 801c74c:	75fb      	strb	r3, [r7, #23]
          break;
 801c74e:	e000      	b.n	801c752 <USBD_CDC_Setup+0x126>
          break;
 801c750:	bf00      	nop
      }
      break;
 801c752:	e006      	b.n	801c762 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 801c754:	6839      	ldr	r1, [r7, #0]
 801c756:	6878      	ldr	r0, [r7, #4]
 801c758:	f001 f96d 	bl	801da36 <USBD_CtlError>
      ret = USBD_FAIL;
 801c75c:	2302      	movs	r3, #2
 801c75e:	75fb      	strb	r3, [r7, #23]
      break;
 801c760:	bf00      	nop
  }

  return ret;
 801c762:	7dfb      	ldrb	r3, [r7, #23]
}
 801c764:	4618      	mov	r0, r3
 801c766:	3718      	adds	r7, #24
 801c768:	46bd      	mov	sp, r7
 801c76a:	bd80      	pop	{r7, pc}

0801c76c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801c76c:	b580      	push	{r7, lr}
 801c76e:	b084      	sub	sp, #16
 801c770:	af00      	add	r7, sp, #0
 801c772:	6078      	str	r0, [r7, #4]
 801c774:	460b      	mov	r3, r1
 801c776:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801c778:	687b      	ldr	r3, [r7, #4]
 801c77a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c77e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801c780:	687b      	ldr	r3, [r7, #4]
 801c782:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c786:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801c788:	687b      	ldr	r3, [r7, #4]
 801c78a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c78e:	2b00      	cmp	r3, #0
 801c790:	d03a      	beq.n	801c808 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801c792:	78fa      	ldrb	r2, [r7, #3]
 801c794:	6879      	ldr	r1, [r7, #4]
 801c796:	4613      	mov	r3, r2
 801c798:	009b      	lsls	r3, r3, #2
 801c79a:	4413      	add	r3, r2
 801c79c:	009b      	lsls	r3, r3, #2
 801c79e:	440b      	add	r3, r1
 801c7a0:	331c      	adds	r3, #28
 801c7a2:	681b      	ldr	r3, [r3, #0]
 801c7a4:	2b00      	cmp	r3, #0
 801c7a6:	d029      	beq.n	801c7fc <USBD_CDC_DataIn+0x90>
 801c7a8:	78fa      	ldrb	r2, [r7, #3]
 801c7aa:	6879      	ldr	r1, [r7, #4]
 801c7ac:	4613      	mov	r3, r2
 801c7ae:	009b      	lsls	r3, r3, #2
 801c7b0:	4413      	add	r3, r2
 801c7b2:	009b      	lsls	r3, r3, #2
 801c7b4:	440b      	add	r3, r1
 801c7b6:	331c      	adds	r3, #28
 801c7b8:	681a      	ldr	r2, [r3, #0]
 801c7ba:	78f9      	ldrb	r1, [r7, #3]
 801c7bc:	68b8      	ldr	r0, [r7, #8]
 801c7be:	460b      	mov	r3, r1
 801c7c0:	00db      	lsls	r3, r3, #3
 801c7c2:	1a5b      	subs	r3, r3, r1
 801c7c4:	009b      	lsls	r3, r3, #2
 801c7c6:	4403      	add	r3, r0
 801c7c8:	3344      	adds	r3, #68	; 0x44
 801c7ca:	681b      	ldr	r3, [r3, #0]
 801c7cc:	fbb2 f1f3 	udiv	r1, r2, r3
 801c7d0:	fb03 f301 	mul.w	r3, r3, r1
 801c7d4:	1ad3      	subs	r3, r2, r3
 801c7d6:	2b00      	cmp	r3, #0
 801c7d8:	d110      	bne.n	801c7fc <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801c7da:	78fa      	ldrb	r2, [r7, #3]
 801c7dc:	6879      	ldr	r1, [r7, #4]
 801c7de:	4613      	mov	r3, r2
 801c7e0:	009b      	lsls	r3, r3, #2
 801c7e2:	4413      	add	r3, r2
 801c7e4:	009b      	lsls	r3, r3, #2
 801c7e6:	440b      	add	r3, r1
 801c7e8:	331c      	adds	r3, #28
 801c7ea:	2200      	movs	r2, #0
 801c7ec:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801c7ee:	78f9      	ldrb	r1, [r7, #3]
 801c7f0:	2300      	movs	r3, #0
 801c7f2:	2200      	movs	r2, #0
 801c7f4:	6878      	ldr	r0, [r7, #4]
 801c7f6:	f001 feb6 	bl	801e566 <USBD_LL_Transmit>
 801c7fa:	e003      	b.n	801c804 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 801c7fc:	68fb      	ldr	r3, [r7, #12]
 801c7fe:	2200      	movs	r2, #0
 801c800:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 801c804:	2300      	movs	r3, #0
 801c806:	e000      	b.n	801c80a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 801c808:	2302      	movs	r3, #2
  }
}
 801c80a:	4618      	mov	r0, r3
 801c80c:	3710      	adds	r7, #16
 801c80e:	46bd      	mov	sp, r7
 801c810:	bd80      	pop	{r7, pc}

0801c812 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801c812:	b580      	push	{r7, lr}
 801c814:	b084      	sub	sp, #16
 801c816:	af00      	add	r7, sp, #0
 801c818:	6078      	str	r0, [r7, #4]
 801c81a:	460b      	mov	r3, r1
 801c81c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c81e:	687b      	ldr	r3, [r7, #4]
 801c820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c824:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801c826:	78fb      	ldrb	r3, [r7, #3]
 801c828:	4619      	mov	r1, r3
 801c82a:	6878      	ldr	r0, [r7, #4]
 801c82c:	f001 fee1 	bl	801e5f2 <USBD_LL_GetRxDataSize>
 801c830:	4602      	mov	r2, r0
 801c832:	68fb      	ldr	r3, [r7, #12]
 801c834:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801c838:	687b      	ldr	r3, [r7, #4]
 801c83a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c83e:	2b00      	cmp	r3, #0
 801c840:	d00d      	beq.n	801c85e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801c842:	687b      	ldr	r3, [r7, #4]
 801c844:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c848:	68db      	ldr	r3, [r3, #12]
 801c84a:	68fa      	ldr	r2, [r7, #12]
 801c84c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801c850:	68fa      	ldr	r2, [r7, #12]
 801c852:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801c856:	4611      	mov	r1, r2
 801c858:	4798      	blx	r3

    return USBD_OK;
 801c85a:	2300      	movs	r3, #0
 801c85c:	e000      	b.n	801c860 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 801c85e:	2302      	movs	r3, #2
  }
}
 801c860:	4618      	mov	r0, r3
 801c862:	3710      	adds	r7, #16
 801c864:	46bd      	mov	sp, r7
 801c866:	bd80      	pop	{r7, pc}

0801c868 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801c868:	b580      	push	{r7, lr}
 801c86a:	b084      	sub	sp, #16
 801c86c:	af00      	add	r7, sp, #0
 801c86e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c870:	687b      	ldr	r3, [r7, #4]
 801c872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c876:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801c878:	687b      	ldr	r3, [r7, #4]
 801c87a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c87e:	2b00      	cmp	r3, #0
 801c880:	d015      	beq.n	801c8ae <USBD_CDC_EP0_RxReady+0x46>
 801c882:	68fb      	ldr	r3, [r7, #12]
 801c884:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801c888:	2bff      	cmp	r3, #255	; 0xff
 801c88a:	d010      	beq.n	801c8ae <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801c88c:	687b      	ldr	r3, [r7, #4]
 801c88e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c892:	689b      	ldr	r3, [r3, #8]
 801c894:	68fa      	ldr	r2, [r7, #12]
 801c896:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 801c89a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801c89c:	68fa      	ldr	r2, [r7, #12]
 801c89e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801c8a2:	b292      	uxth	r2, r2
 801c8a4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801c8a6:	68fb      	ldr	r3, [r7, #12]
 801c8a8:	22ff      	movs	r2, #255	; 0xff
 801c8aa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 801c8ae:	2300      	movs	r3, #0
}
 801c8b0:	4618      	mov	r0, r3
 801c8b2:	3710      	adds	r7, #16
 801c8b4:	46bd      	mov	sp, r7
 801c8b6:	bd80      	pop	{r7, pc}

0801c8b8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801c8b8:	b480      	push	{r7}
 801c8ba:	b083      	sub	sp, #12
 801c8bc:	af00      	add	r7, sp, #0
 801c8be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801c8c0:	687b      	ldr	r3, [r7, #4]
 801c8c2:	2243      	movs	r2, #67	; 0x43
 801c8c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801c8c6:	4b03      	ldr	r3, [pc, #12]	; (801c8d4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 801c8c8:	4618      	mov	r0, r3
 801c8ca:	370c      	adds	r7, #12
 801c8cc:	46bd      	mov	sp, r7
 801c8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8d2:	4770      	bx	lr
 801c8d4:	240000a4 	.word	0x240000a4

0801c8d8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801c8d8:	b480      	push	{r7}
 801c8da:	b083      	sub	sp, #12
 801c8dc:	af00      	add	r7, sp, #0
 801c8de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801c8e0:	687b      	ldr	r3, [r7, #4]
 801c8e2:	2243      	movs	r2, #67	; 0x43
 801c8e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801c8e6:	4b03      	ldr	r3, [pc, #12]	; (801c8f4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 801c8e8:	4618      	mov	r0, r3
 801c8ea:	370c      	adds	r7, #12
 801c8ec:	46bd      	mov	sp, r7
 801c8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8f2:	4770      	bx	lr
 801c8f4:	24000060 	.word	0x24000060

0801c8f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801c8f8:	b480      	push	{r7}
 801c8fa:	b083      	sub	sp, #12
 801c8fc:	af00      	add	r7, sp, #0
 801c8fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801c900:	687b      	ldr	r3, [r7, #4]
 801c902:	2243      	movs	r2, #67	; 0x43
 801c904:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801c906:	4b03      	ldr	r3, [pc, #12]	; (801c914 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 801c908:	4618      	mov	r0, r3
 801c90a:	370c      	adds	r7, #12
 801c90c:	46bd      	mov	sp, r7
 801c90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c912:	4770      	bx	lr
 801c914:	240000e8 	.word	0x240000e8

0801c918 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801c918:	b480      	push	{r7}
 801c91a:	b083      	sub	sp, #12
 801c91c:	af00      	add	r7, sp, #0
 801c91e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 801c920:	687b      	ldr	r3, [r7, #4]
 801c922:	220a      	movs	r2, #10
 801c924:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801c926:	4b03      	ldr	r3, [pc, #12]	; (801c934 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801c928:	4618      	mov	r0, r3
 801c92a:	370c      	adds	r7, #12
 801c92c:	46bd      	mov	sp, r7
 801c92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c932:	4770      	bx	lr
 801c934:	2400001c 	.word	0x2400001c

0801c938 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 801c938:	b480      	push	{r7}
 801c93a:	b085      	sub	sp, #20
 801c93c:	af00      	add	r7, sp, #0
 801c93e:	6078      	str	r0, [r7, #4]
 801c940:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801c942:	2302      	movs	r3, #2
 801c944:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 801c946:	683b      	ldr	r3, [r7, #0]
 801c948:	2b00      	cmp	r3, #0
 801c94a:	d005      	beq.n	801c958 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 801c94c:	687b      	ldr	r3, [r7, #4]
 801c94e:	683a      	ldr	r2, [r7, #0]
 801c950:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 801c954:	2300      	movs	r3, #0
 801c956:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801c958:	7bfb      	ldrb	r3, [r7, #15]
}
 801c95a:	4618      	mov	r0, r3
 801c95c:	3714      	adds	r7, #20
 801c95e:	46bd      	mov	sp, r7
 801c960:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c964:	4770      	bx	lr

0801c966 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801c966:	b480      	push	{r7}
 801c968:	b087      	sub	sp, #28
 801c96a:	af00      	add	r7, sp, #0
 801c96c:	60f8      	str	r0, [r7, #12]
 801c96e:	60b9      	str	r1, [r7, #8]
 801c970:	4613      	mov	r3, r2
 801c972:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c974:	68fb      	ldr	r3, [r7, #12]
 801c976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c97a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801c97c:	697b      	ldr	r3, [r7, #20]
 801c97e:	68ba      	ldr	r2, [r7, #8]
 801c980:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801c984:	88fa      	ldrh	r2, [r7, #6]
 801c986:	697b      	ldr	r3, [r7, #20]
 801c988:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 801c98c:	2300      	movs	r3, #0
}
 801c98e:	4618      	mov	r0, r3
 801c990:	371c      	adds	r7, #28
 801c992:	46bd      	mov	sp, r7
 801c994:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c998:	4770      	bx	lr

0801c99a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801c99a:	b480      	push	{r7}
 801c99c:	b085      	sub	sp, #20
 801c99e:	af00      	add	r7, sp, #0
 801c9a0:	6078      	str	r0, [r7, #4]
 801c9a2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c9a4:	687b      	ldr	r3, [r7, #4]
 801c9a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c9aa:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801c9ac:	68fb      	ldr	r3, [r7, #12]
 801c9ae:	683a      	ldr	r2, [r7, #0]
 801c9b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 801c9b4:	2300      	movs	r3, #0
}
 801c9b6:	4618      	mov	r0, r3
 801c9b8:	3714      	adds	r7, #20
 801c9ba:	46bd      	mov	sp, r7
 801c9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9c0:	4770      	bx	lr

0801c9c2 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801c9c2:	b580      	push	{r7, lr}
 801c9c4:	b084      	sub	sp, #16
 801c9c6:	af00      	add	r7, sp, #0
 801c9c8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c9ca:	687b      	ldr	r3, [r7, #4]
 801c9cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c9d0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 801c9d2:	687b      	ldr	r3, [r7, #4]
 801c9d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c9d8:	2b00      	cmp	r3, #0
 801c9da:	d01c      	beq.n	801ca16 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 801c9dc:	68fb      	ldr	r3, [r7, #12]
 801c9de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801c9e2:	2b00      	cmp	r3, #0
 801c9e4:	d115      	bne.n	801ca12 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801c9e6:	68fb      	ldr	r3, [r7, #12]
 801c9e8:	2201      	movs	r2, #1
 801c9ea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801c9ee:	68fb      	ldr	r3, [r7, #12]
 801c9f0:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 801c9f4:	687b      	ldr	r3, [r7, #4]
 801c9f6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801c9f8:	68fb      	ldr	r3, [r7, #12]
 801c9fa:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 801c9fe:	68fb      	ldr	r3, [r7, #12]
 801ca00:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801ca04:	b29b      	uxth	r3, r3
 801ca06:	2181      	movs	r1, #129	; 0x81
 801ca08:	6878      	ldr	r0, [r7, #4]
 801ca0a:	f001 fdac 	bl	801e566 <USBD_LL_Transmit>

      return USBD_OK;
 801ca0e:	2300      	movs	r3, #0
 801ca10:	e002      	b.n	801ca18 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 801ca12:	2301      	movs	r3, #1
 801ca14:	e000      	b.n	801ca18 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 801ca16:	2302      	movs	r3, #2
  }
}
 801ca18:	4618      	mov	r0, r3
 801ca1a:	3710      	adds	r7, #16
 801ca1c:	46bd      	mov	sp, r7
 801ca1e:	bd80      	pop	{r7, pc}

0801ca20 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801ca20:	b580      	push	{r7, lr}
 801ca22:	b084      	sub	sp, #16
 801ca24:	af00      	add	r7, sp, #0
 801ca26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801ca28:	687b      	ldr	r3, [r7, #4]
 801ca2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ca2e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801ca30:	687b      	ldr	r3, [r7, #4]
 801ca32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ca36:	2b00      	cmp	r3, #0
 801ca38:	d017      	beq.n	801ca6a <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ca3a:	687b      	ldr	r3, [r7, #4]
 801ca3c:	7c1b      	ldrb	r3, [r3, #16]
 801ca3e:	2b00      	cmp	r3, #0
 801ca40:	d109      	bne.n	801ca56 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801ca42:	68fb      	ldr	r3, [r7, #12]
 801ca44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801ca48:	f44f 7300 	mov.w	r3, #512	; 0x200
 801ca4c:	2101      	movs	r1, #1
 801ca4e:	6878      	ldr	r0, [r7, #4]
 801ca50:	f001 fdac 	bl	801e5ac <USBD_LL_PrepareReceive>
 801ca54:	e007      	b.n	801ca66 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801ca56:	68fb      	ldr	r3, [r7, #12]
 801ca58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801ca5c:	2340      	movs	r3, #64	; 0x40
 801ca5e:	2101      	movs	r1, #1
 801ca60:	6878      	ldr	r0, [r7, #4]
 801ca62:	f001 fda3 	bl	801e5ac <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801ca66:	2300      	movs	r3, #0
 801ca68:	e000      	b.n	801ca6c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 801ca6a:	2302      	movs	r3, #2
  }
}
 801ca6c:	4618      	mov	r0, r3
 801ca6e:	3710      	adds	r7, #16
 801ca70:	46bd      	mov	sp, r7
 801ca72:	bd80      	pop	{r7, pc}

0801ca74 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801ca74:	b580      	push	{r7, lr}
 801ca76:	b084      	sub	sp, #16
 801ca78:	af00      	add	r7, sp, #0
 801ca7a:	60f8      	str	r0, [r7, #12]
 801ca7c:	60b9      	str	r1, [r7, #8]
 801ca7e:	4613      	mov	r3, r2
 801ca80:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801ca82:	68fb      	ldr	r3, [r7, #12]
 801ca84:	2b00      	cmp	r3, #0
 801ca86:	d101      	bne.n	801ca8c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801ca88:	2302      	movs	r3, #2
 801ca8a:	e01a      	b.n	801cac2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801ca8c:	68fb      	ldr	r3, [r7, #12]
 801ca8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ca92:	2b00      	cmp	r3, #0
 801ca94:	d003      	beq.n	801ca9e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 801ca96:	68fb      	ldr	r3, [r7, #12]
 801ca98:	2200      	movs	r2, #0
 801ca9a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801ca9e:	68bb      	ldr	r3, [r7, #8]
 801caa0:	2b00      	cmp	r3, #0
 801caa2:	d003      	beq.n	801caac <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 801caa4:	68fb      	ldr	r3, [r7, #12]
 801caa6:	68ba      	ldr	r2, [r7, #8]
 801caa8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801caac:	68fb      	ldr	r3, [r7, #12]
 801caae:	2201      	movs	r2, #1
 801cab0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801cab4:	68fb      	ldr	r3, [r7, #12]
 801cab6:	79fa      	ldrb	r2, [r7, #7]
 801cab8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801caba:	68f8      	ldr	r0, [r7, #12]
 801cabc:	f001 fc1a 	bl	801e2f4 <USBD_LL_Init>

  return USBD_OK;
 801cac0:	2300      	movs	r3, #0
}
 801cac2:	4618      	mov	r0, r3
 801cac4:	3710      	adds	r7, #16
 801cac6:	46bd      	mov	sp, r7
 801cac8:	bd80      	pop	{r7, pc}

0801caca <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801caca:	b480      	push	{r7}
 801cacc:	b085      	sub	sp, #20
 801cace:	af00      	add	r7, sp, #0
 801cad0:	6078      	str	r0, [r7, #4]
 801cad2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 801cad4:	2300      	movs	r3, #0
 801cad6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 801cad8:	683b      	ldr	r3, [r7, #0]
 801cada:	2b00      	cmp	r3, #0
 801cadc:	d006      	beq.n	801caec <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801cade:	687b      	ldr	r3, [r7, #4]
 801cae0:	683a      	ldr	r2, [r7, #0]
 801cae2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 801cae6:	2300      	movs	r3, #0
 801cae8:	73fb      	strb	r3, [r7, #15]
 801caea:	e001      	b.n	801caf0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801caec:	2302      	movs	r3, #2
 801caee:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801caf0:	7bfb      	ldrb	r3, [r7, #15]
}
 801caf2:	4618      	mov	r0, r3
 801caf4:	3714      	adds	r7, #20
 801caf6:	46bd      	mov	sp, r7
 801caf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cafc:	4770      	bx	lr

0801cafe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801cafe:	b580      	push	{r7, lr}
 801cb00:	b082      	sub	sp, #8
 801cb02:	af00      	add	r7, sp, #0
 801cb04:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801cb06:	6878      	ldr	r0, [r7, #4]
 801cb08:	f001 fc44 	bl	801e394 <USBD_LL_Start>

  return USBD_OK;
 801cb0c:	2300      	movs	r3, #0
}
 801cb0e:	4618      	mov	r0, r3
 801cb10:	3708      	adds	r7, #8
 801cb12:	46bd      	mov	sp, r7
 801cb14:	bd80      	pop	{r7, pc}

0801cb16 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801cb16:	b480      	push	{r7}
 801cb18:	b083      	sub	sp, #12
 801cb1a:	af00      	add	r7, sp, #0
 801cb1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801cb1e:	2300      	movs	r3, #0
}
 801cb20:	4618      	mov	r0, r3
 801cb22:	370c      	adds	r7, #12
 801cb24:	46bd      	mov	sp, r7
 801cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb2a:	4770      	bx	lr

0801cb2c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801cb2c:	b580      	push	{r7, lr}
 801cb2e:	b084      	sub	sp, #16
 801cb30:	af00      	add	r7, sp, #0
 801cb32:	6078      	str	r0, [r7, #4]
 801cb34:	460b      	mov	r3, r1
 801cb36:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801cb38:	2302      	movs	r3, #2
 801cb3a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 801cb3c:	687b      	ldr	r3, [r7, #4]
 801cb3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cb42:	2b00      	cmp	r3, #0
 801cb44:	d00c      	beq.n	801cb60 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801cb46:	687b      	ldr	r3, [r7, #4]
 801cb48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cb4c:	681b      	ldr	r3, [r3, #0]
 801cb4e:	78fa      	ldrb	r2, [r7, #3]
 801cb50:	4611      	mov	r1, r2
 801cb52:	6878      	ldr	r0, [r7, #4]
 801cb54:	4798      	blx	r3
 801cb56:	4603      	mov	r3, r0
 801cb58:	2b00      	cmp	r3, #0
 801cb5a:	d101      	bne.n	801cb60 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 801cb5c:	2300      	movs	r3, #0
 801cb5e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 801cb60:	7bfb      	ldrb	r3, [r7, #15]
}
 801cb62:	4618      	mov	r0, r3
 801cb64:	3710      	adds	r7, #16
 801cb66:	46bd      	mov	sp, r7
 801cb68:	bd80      	pop	{r7, pc}

0801cb6a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801cb6a:	b580      	push	{r7, lr}
 801cb6c:	b082      	sub	sp, #8
 801cb6e:	af00      	add	r7, sp, #0
 801cb70:	6078      	str	r0, [r7, #4]
 801cb72:	460b      	mov	r3, r1
 801cb74:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801cb76:	687b      	ldr	r3, [r7, #4]
 801cb78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cb7c:	685b      	ldr	r3, [r3, #4]
 801cb7e:	78fa      	ldrb	r2, [r7, #3]
 801cb80:	4611      	mov	r1, r2
 801cb82:	6878      	ldr	r0, [r7, #4]
 801cb84:	4798      	blx	r3

  return USBD_OK;
 801cb86:	2300      	movs	r3, #0
}
 801cb88:	4618      	mov	r0, r3
 801cb8a:	3708      	adds	r7, #8
 801cb8c:	46bd      	mov	sp, r7
 801cb8e:	bd80      	pop	{r7, pc}

0801cb90 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801cb90:	b580      	push	{r7, lr}
 801cb92:	b082      	sub	sp, #8
 801cb94:	af00      	add	r7, sp, #0
 801cb96:	6078      	str	r0, [r7, #4]
 801cb98:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801cb9a:	687b      	ldr	r3, [r7, #4]
 801cb9c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 801cba0:	6839      	ldr	r1, [r7, #0]
 801cba2:	4618      	mov	r0, r3
 801cba4:	f000 ff0a 	bl	801d9bc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801cba8:	687b      	ldr	r3, [r7, #4]
 801cbaa:	2201      	movs	r2, #1
 801cbac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801cbb0:	687b      	ldr	r3, [r7, #4]
 801cbb2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801cbb6:	461a      	mov	r2, r3
 801cbb8:	687b      	ldr	r3, [r7, #4]
 801cbba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801cbbe:	687b      	ldr	r3, [r7, #4]
 801cbc0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 801cbc4:	f003 031f 	and.w	r3, r3, #31
 801cbc8:	2b01      	cmp	r3, #1
 801cbca:	d00c      	beq.n	801cbe6 <USBD_LL_SetupStage+0x56>
 801cbcc:	2b01      	cmp	r3, #1
 801cbce:	d302      	bcc.n	801cbd6 <USBD_LL_SetupStage+0x46>
 801cbd0:	2b02      	cmp	r3, #2
 801cbd2:	d010      	beq.n	801cbf6 <USBD_LL_SetupStage+0x66>
 801cbd4:	e017      	b.n	801cc06 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801cbd6:	687b      	ldr	r3, [r7, #4]
 801cbd8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 801cbdc:	4619      	mov	r1, r3
 801cbde:	6878      	ldr	r0, [r7, #4]
 801cbe0:	f000 fa0a 	bl	801cff8 <USBD_StdDevReq>
      break;
 801cbe4:	e01a      	b.n	801cc1c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801cbe6:	687b      	ldr	r3, [r7, #4]
 801cbe8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 801cbec:	4619      	mov	r1, r3
 801cbee:	6878      	ldr	r0, [r7, #4]
 801cbf0:	f000 fa6c 	bl	801d0cc <USBD_StdItfReq>
      break;
 801cbf4:	e012      	b.n	801cc1c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801cbf6:	687b      	ldr	r3, [r7, #4]
 801cbf8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 801cbfc:	4619      	mov	r1, r3
 801cbfe:	6878      	ldr	r0, [r7, #4]
 801cc00:	f000 faaa 	bl	801d158 <USBD_StdEPReq>
      break;
 801cc04:	e00a      	b.n	801cc1c <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801cc06:	687b      	ldr	r3, [r7, #4]
 801cc08:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 801cc0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801cc10:	b2db      	uxtb	r3, r3
 801cc12:	4619      	mov	r1, r3
 801cc14:	6878      	ldr	r0, [r7, #4]
 801cc16:	f001 fc1d 	bl	801e454 <USBD_LL_StallEP>
      break;
 801cc1a:	bf00      	nop
  }

  return USBD_OK;
 801cc1c:	2300      	movs	r3, #0
}
 801cc1e:	4618      	mov	r0, r3
 801cc20:	3708      	adds	r7, #8
 801cc22:	46bd      	mov	sp, r7
 801cc24:	bd80      	pop	{r7, pc}

0801cc26 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801cc26:	b580      	push	{r7, lr}
 801cc28:	b086      	sub	sp, #24
 801cc2a:	af00      	add	r7, sp, #0
 801cc2c:	60f8      	str	r0, [r7, #12]
 801cc2e:	460b      	mov	r3, r1
 801cc30:	607a      	str	r2, [r7, #4]
 801cc32:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801cc34:	7afb      	ldrb	r3, [r7, #11]
 801cc36:	2b00      	cmp	r3, #0
 801cc38:	d14b      	bne.n	801ccd2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 801cc3a:	68fb      	ldr	r3, [r7, #12]
 801cc3c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801cc40:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801cc42:	68fb      	ldr	r3, [r7, #12]
 801cc44:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801cc48:	2b03      	cmp	r3, #3
 801cc4a:	d134      	bne.n	801ccb6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 801cc4c:	697b      	ldr	r3, [r7, #20]
 801cc4e:	68da      	ldr	r2, [r3, #12]
 801cc50:	697b      	ldr	r3, [r7, #20]
 801cc52:	691b      	ldr	r3, [r3, #16]
 801cc54:	429a      	cmp	r2, r3
 801cc56:	d919      	bls.n	801cc8c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801cc58:	697b      	ldr	r3, [r7, #20]
 801cc5a:	68da      	ldr	r2, [r3, #12]
 801cc5c:	697b      	ldr	r3, [r7, #20]
 801cc5e:	691b      	ldr	r3, [r3, #16]
 801cc60:	1ad2      	subs	r2, r2, r3
 801cc62:	697b      	ldr	r3, [r7, #20]
 801cc64:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801cc66:	697b      	ldr	r3, [r7, #20]
 801cc68:	68da      	ldr	r2, [r3, #12]
 801cc6a:	697b      	ldr	r3, [r7, #20]
 801cc6c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801cc6e:	429a      	cmp	r2, r3
 801cc70:	d203      	bcs.n	801cc7a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801cc72:	697b      	ldr	r3, [r7, #20]
 801cc74:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801cc76:	b29b      	uxth	r3, r3
 801cc78:	e002      	b.n	801cc80 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801cc7a:	697b      	ldr	r3, [r7, #20]
 801cc7c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801cc7e:	b29b      	uxth	r3, r3
 801cc80:	461a      	mov	r2, r3
 801cc82:	6879      	ldr	r1, [r7, #4]
 801cc84:	68f8      	ldr	r0, [r7, #12]
 801cc86:	f000 ff8d 	bl	801dba4 <USBD_CtlContinueRx>
 801cc8a:	e038      	b.n	801ccfe <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801cc8c:	68fb      	ldr	r3, [r7, #12]
 801cc8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cc92:	691b      	ldr	r3, [r3, #16]
 801cc94:	2b00      	cmp	r3, #0
 801cc96:	d00a      	beq.n	801ccae <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801cc98:	68fb      	ldr	r3, [r7, #12]
 801cc9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801cc9e:	2b03      	cmp	r3, #3
 801cca0:	d105      	bne.n	801ccae <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801cca2:	68fb      	ldr	r3, [r7, #12]
 801cca4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cca8:	691b      	ldr	r3, [r3, #16]
 801ccaa:	68f8      	ldr	r0, [r7, #12]
 801ccac:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801ccae:	68f8      	ldr	r0, [r7, #12]
 801ccb0:	f000 ff8a 	bl	801dbc8 <USBD_CtlSendStatus>
 801ccb4:	e023      	b.n	801ccfe <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801ccb6:	68fb      	ldr	r3, [r7, #12]
 801ccb8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801ccbc:	2b05      	cmp	r3, #5
 801ccbe:	d11e      	bne.n	801ccfe <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801ccc0:	68fb      	ldr	r3, [r7, #12]
 801ccc2:	2200      	movs	r2, #0
 801ccc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 801ccc8:	2100      	movs	r1, #0
 801ccca:	68f8      	ldr	r0, [r7, #12]
 801cccc:	f001 fbc2 	bl	801e454 <USBD_LL_StallEP>
 801ccd0:	e015      	b.n	801ccfe <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801ccd2:	68fb      	ldr	r3, [r7, #12]
 801ccd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ccd8:	699b      	ldr	r3, [r3, #24]
 801ccda:	2b00      	cmp	r3, #0
 801ccdc:	d00d      	beq.n	801ccfa <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801ccde:	68fb      	ldr	r3, [r7, #12]
 801cce0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 801cce4:	2b03      	cmp	r3, #3
 801cce6:	d108      	bne.n	801ccfa <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801cce8:	68fb      	ldr	r3, [r7, #12]
 801ccea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ccee:	699b      	ldr	r3, [r3, #24]
 801ccf0:	7afa      	ldrb	r2, [r7, #11]
 801ccf2:	4611      	mov	r1, r2
 801ccf4:	68f8      	ldr	r0, [r7, #12]
 801ccf6:	4798      	blx	r3
 801ccf8:	e001      	b.n	801ccfe <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801ccfa:	2302      	movs	r3, #2
 801ccfc:	e000      	b.n	801cd00 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 801ccfe:	2300      	movs	r3, #0
}
 801cd00:	4618      	mov	r0, r3
 801cd02:	3718      	adds	r7, #24
 801cd04:	46bd      	mov	sp, r7
 801cd06:	bd80      	pop	{r7, pc}

0801cd08 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801cd08:	b580      	push	{r7, lr}
 801cd0a:	b086      	sub	sp, #24
 801cd0c:	af00      	add	r7, sp, #0
 801cd0e:	60f8      	str	r0, [r7, #12]
 801cd10:	460b      	mov	r3, r1
 801cd12:	607a      	str	r2, [r7, #4]
 801cd14:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801cd16:	7afb      	ldrb	r3, [r7, #11]
 801cd18:	2b00      	cmp	r3, #0
 801cd1a:	d17f      	bne.n	801ce1c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 801cd1c:	68fb      	ldr	r3, [r7, #12]
 801cd1e:	3314      	adds	r3, #20
 801cd20:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801cd22:	68fb      	ldr	r3, [r7, #12]
 801cd24:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801cd28:	2b02      	cmp	r3, #2
 801cd2a:	d15c      	bne.n	801cde6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 801cd2c:	697b      	ldr	r3, [r7, #20]
 801cd2e:	68da      	ldr	r2, [r3, #12]
 801cd30:	697b      	ldr	r3, [r7, #20]
 801cd32:	691b      	ldr	r3, [r3, #16]
 801cd34:	429a      	cmp	r2, r3
 801cd36:	d915      	bls.n	801cd64 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 801cd38:	697b      	ldr	r3, [r7, #20]
 801cd3a:	68da      	ldr	r2, [r3, #12]
 801cd3c:	697b      	ldr	r3, [r7, #20]
 801cd3e:	691b      	ldr	r3, [r3, #16]
 801cd40:	1ad2      	subs	r2, r2, r3
 801cd42:	697b      	ldr	r3, [r7, #20]
 801cd44:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801cd46:	697b      	ldr	r3, [r7, #20]
 801cd48:	68db      	ldr	r3, [r3, #12]
 801cd4a:	b29b      	uxth	r3, r3
 801cd4c:	461a      	mov	r2, r3
 801cd4e:	6879      	ldr	r1, [r7, #4]
 801cd50:	68f8      	ldr	r0, [r7, #12]
 801cd52:	f000 fef7 	bl	801db44 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801cd56:	2300      	movs	r3, #0
 801cd58:	2200      	movs	r2, #0
 801cd5a:	2100      	movs	r1, #0
 801cd5c:	68f8      	ldr	r0, [r7, #12]
 801cd5e:	f001 fc25 	bl	801e5ac <USBD_LL_PrepareReceive>
 801cd62:	e04e      	b.n	801ce02 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801cd64:	697b      	ldr	r3, [r7, #20]
 801cd66:	689b      	ldr	r3, [r3, #8]
 801cd68:	697a      	ldr	r2, [r7, #20]
 801cd6a:	6912      	ldr	r2, [r2, #16]
 801cd6c:	fbb3 f1f2 	udiv	r1, r3, r2
 801cd70:	fb02 f201 	mul.w	r2, r2, r1
 801cd74:	1a9b      	subs	r3, r3, r2
 801cd76:	2b00      	cmp	r3, #0
 801cd78:	d11c      	bne.n	801cdb4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 801cd7a:	697b      	ldr	r3, [r7, #20]
 801cd7c:	689a      	ldr	r2, [r3, #8]
 801cd7e:	697b      	ldr	r3, [r7, #20]
 801cd80:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801cd82:	429a      	cmp	r2, r3
 801cd84:	d316      	bcc.n	801cdb4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 801cd86:	697b      	ldr	r3, [r7, #20]
 801cd88:	689a      	ldr	r2, [r3, #8]
 801cd8a:	68fb      	ldr	r3, [r7, #12]
 801cd8c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801cd90:	429a      	cmp	r2, r3
 801cd92:	d20f      	bcs.n	801cdb4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801cd94:	2200      	movs	r2, #0
 801cd96:	2100      	movs	r1, #0
 801cd98:	68f8      	ldr	r0, [r7, #12]
 801cd9a:	f000 fed3 	bl	801db44 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801cd9e:	68fb      	ldr	r3, [r7, #12]
 801cda0:	2200      	movs	r2, #0
 801cda2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801cda6:	2300      	movs	r3, #0
 801cda8:	2200      	movs	r2, #0
 801cdaa:	2100      	movs	r1, #0
 801cdac:	68f8      	ldr	r0, [r7, #12]
 801cdae:	f001 fbfd 	bl	801e5ac <USBD_LL_PrepareReceive>
 801cdb2:	e026      	b.n	801ce02 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801cdb4:	68fb      	ldr	r3, [r7, #12]
 801cdb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cdba:	68db      	ldr	r3, [r3, #12]
 801cdbc:	2b00      	cmp	r3, #0
 801cdbe:	d00a      	beq.n	801cdd6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801cdc0:	68fb      	ldr	r3, [r7, #12]
 801cdc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801cdc6:	2b03      	cmp	r3, #3
 801cdc8:	d105      	bne.n	801cdd6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801cdca:	68fb      	ldr	r3, [r7, #12]
 801cdcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cdd0:	68db      	ldr	r3, [r3, #12]
 801cdd2:	68f8      	ldr	r0, [r7, #12]
 801cdd4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801cdd6:	2180      	movs	r1, #128	; 0x80
 801cdd8:	68f8      	ldr	r0, [r7, #12]
 801cdda:	f001 fb3b 	bl	801e454 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801cdde:	68f8      	ldr	r0, [r7, #12]
 801cde0:	f000 ff05 	bl	801dbee <USBD_CtlReceiveStatus>
 801cde4:	e00d      	b.n	801ce02 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801cde6:	68fb      	ldr	r3, [r7, #12]
 801cde8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801cdec:	2b04      	cmp	r3, #4
 801cdee:	d004      	beq.n	801cdfa <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801cdf0:	68fb      	ldr	r3, [r7, #12]
 801cdf2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801cdf6:	2b00      	cmp	r3, #0
 801cdf8:	d103      	bne.n	801ce02 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801cdfa:	2180      	movs	r1, #128	; 0x80
 801cdfc:	68f8      	ldr	r0, [r7, #12]
 801cdfe:	f001 fb29 	bl	801e454 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801ce02:	68fb      	ldr	r3, [r7, #12]
 801ce04:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801ce08:	2b01      	cmp	r3, #1
 801ce0a:	d11d      	bne.n	801ce48 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 801ce0c:	68f8      	ldr	r0, [r7, #12]
 801ce0e:	f7ff fe82 	bl	801cb16 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801ce12:	68fb      	ldr	r3, [r7, #12]
 801ce14:	2200      	movs	r2, #0
 801ce16:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801ce1a:	e015      	b.n	801ce48 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801ce1c:	68fb      	ldr	r3, [r7, #12]
 801ce1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ce22:	695b      	ldr	r3, [r3, #20]
 801ce24:	2b00      	cmp	r3, #0
 801ce26:	d00d      	beq.n	801ce44 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801ce28:	68fb      	ldr	r3, [r7, #12]
 801ce2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 801ce2e:	2b03      	cmp	r3, #3
 801ce30:	d108      	bne.n	801ce44 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801ce32:	68fb      	ldr	r3, [r7, #12]
 801ce34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ce38:	695b      	ldr	r3, [r3, #20]
 801ce3a:	7afa      	ldrb	r2, [r7, #11]
 801ce3c:	4611      	mov	r1, r2
 801ce3e:	68f8      	ldr	r0, [r7, #12]
 801ce40:	4798      	blx	r3
 801ce42:	e001      	b.n	801ce48 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801ce44:	2302      	movs	r3, #2
 801ce46:	e000      	b.n	801ce4a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 801ce48:	2300      	movs	r3, #0
}
 801ce4a:	4618      	mov	r0, r3
 801ce4c:	3718      	adds	r7, #24
 801ce4e:	46bd      	mov	sp, r7
 801ce50:	bd80      	pop	{r7, pc}

0801ce52 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801ce52:	b580      	push	{r7, lr}
 801ce54:	b082      	sub	sp, #8
 801ce56:	af00      	add	r7, sp, #0
 801ce58:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801ce5a:	2340      	movs	r3, #64	; 0x40
 801ce5c:	2200      	movs	r2, #0
 801ce5e:	2100      	movs	r1, #0
 801ce60:	6878      	ldr	r0, [r7, #4]
 801ce62:	f001 fab2 	bl	801e3ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801ce66:	687b      	ldr	r3, [r7, #4]
 801ce68:	2201      	movs	r2, #1
 801ce6a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801ce6e:	687b      	ldr	r3, [r7, #4]
 801ce70:	2240      	movs	r2, #64	; 0x40
 801ce72:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801ce76:	2340      	movs	r3, #64	; 0x40
 801ce78:	2200      	movs	r2, #0
 801ce7a:	2180      	movs	r1, #128	; 0x80
 801ce7c:	6878      	ldr	r0, [r7, #4]
 801ce7e:	f001 faa4 	bl	801e3ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801ce82:	687b      	ldr	r3, [r7, #4]
 801ce84:	2201      	movs	r2, #1
 801ce86:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801ce88:	687b      	ldr	r3, [r7, #4]
 801ce8a:	2240      	movs	r2, #64	; 0x40
 801ce8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801ce8e:	687b      	ldr	r3, [r7, #4]
 801ce90:	2201      	movs	r2, #1
 801ce92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801ce96:	687b      	ldr	r3, [r7, #4]
 801ce98:	2200      	movs	r2, #0
 801ce9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801ce9e:	687b      	ldr	r3, [r7, #4]
 801cea0:	2200      	movs	r2, #0
 801cea2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801cea4:	687b      	ldr	r3, [r7, #4]
 801cea6:	2200      	movs	r2, #0
 801cea8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 801ceac:	687b      	ldr	r3, [r7, #4]
 801ceae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ceb2:	2b00      	cmp	r3, #0
 801ceb4:	d009      	beq.n	801ceca <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801ceb6:	687b      	ldr	r3, [r7, #4]
 801ceb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cebc:	685b      	ldr	r3, [r3, #4]
 801cebe:	687a      	ldr	r2, [r7, #4]
 801cec0:	6852      	ldr	r2, [r2, #4]
 801cec2:	b2d2      	uxtb	r2, r2
 801cec4:	4611      	mov	r1, r2
 801cec6:	6878      	ldr	r0, [r7, #4]
 801cec8:	4798      	blx	r3
  }

  return USBD_OK;
 801ceca:	2300      	movs	r3, #0
}
 801cecc:	4618      	mov	r0, r3
 801cece:	3708      	adds	r7, #8
 801ced0:	46bd      	mov	sp, r7
 801ced2:	bd80      	pop	{r7, pc}

0801ced4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801ced4:	b480      	push	{r7}
 801ced6:	b083      	sub	sp, #12
 801ced8:	af00      	add	r7, sp, #0
 801ceda:	6078      	str	r0, [r7, #4]
 801cedc:	460b      	mov	r3, r1
 801cede:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801cee0:	687b      	ldr	r3, [r7, #4]
 801cee2:	78fa      	ldrb	r2, [r7, #3]
 801cee4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801cee6:	2300      	movs	r3, #0
}
 801cee8:	4618      	mov	r0, r3
 801ceea:	370c      	adds	r7, #12
 801ceec:	46bd      	mov	sp, r7
 801ceee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cef2:	4770      	bx	lr

0801cef4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801cef4:	b480      	push	{r7}
 801cef6:	b083      	sub	sp, #12
 801cef8:	af00      	add	r7, sp, #0
 801cefa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801cefc:	687b      	ldr	r3, [r7, #4]
 801cefe:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 801cf02:	687b      	ldr	r3, [r7, #4]
 801cf04:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801cf08:	687b      	ldr	r3, [r7, #4]
 801cf0a:	2204      	movs	r2, #4
 801cf0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801cf10:	2300      	movs	r3, #0
}
 801cf12:	4618      	mov	r0, r3
 801cf14:	370c      	adds	r7, #12
 801cf16:	46bd      	mov	sp, r7
 801cf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf1c:	4770      	bx	lr

0801cf1e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801cf1e:	b480      	push	{r7}
 801cf20:	b083      	sub	sp, #12
 801cf22:	af00      	add	r7, sp, #0
 801cf24:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801cf26:	687b      	ldr	r3, [r7, #4]
 801cf28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801cf2c:	2b04      	cmp	r3, #4
 801cf2e:	d105      	bne.n	801cf3c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 801cf30:	687b      	ldr	r3, [r7, #4]
 801cf32:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 801cf36:	687b      	ldr	r3, [r7, #4]
 801cf38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801cf3c:	2300      	movs	r3, #0
}
 801cf3e:	4618      	mov	r0, r3
 801cf40:	370c      	adds	r7, #12
 801cf42:	46bd      	mov	sp, r7
 801cf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf48:	4770      	bx	lr

0801cf4a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801cf4a:	b580      	push	{r7, lr}
 801cf4c:	b082      	sub	sp, #8
 801cf4e:	af00      	add	r7, sp, #0
 801cf50:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801cf52:	687b      	ldr	r3, [r7, #4]
 801cf54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801cf58:	2b03      	cmp	r3, #3
 801cf5a:	d10b      	bne.n	801cf74 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 801cf5c:	687b      	ldr	r3, [r7, #4]
 801cf5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cf62:	69db      	ldr	r3, [r3, #28]
 801cf64:	2b00      	cmp	r3, #0
 801cf66:	d005      	beq.n	801cf74 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 801cf68:	687b      	ldr	r3, [r7, #4]
 801cf6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cf6e:	69db      	ldr	r3, [r3, #28]
 801cf70:	6878      	ldr	r0, [r7, #4]
 801cf72:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801cf74:	2300      	movs	r3, #0
}
 801cf76:	4618      	mov	r0, r3
 801cf78:	3708      	adds	r7, #8
 801cf7a:	46bd      	mov	sp, r7
 801cf7c:	bd80      	pop	{r7, pc}

0801cf7e <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801cf7e:	b480      	push	{r7}
 801cf80:	b083      	sub	sp, #12
 801cf82:	af00      	add	r7, sp, #0
 801cf84:	6078      	str	r0, [r7, #4]
 801cf86:	460b      	mov	r3, r1
 801cf88:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 801cf8a:	2300      	movs	r3, #0
}
 801cf8c:	4618      	mov	r0, r3
 801cf8e:	370c      	adds	r7, #12
 801cf90:	46bd      	mov	sp, r7
 801cf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf96:	4770      	bx	lr

0801cf98 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801cf98:	b480      	push	{r7}
 801cf9a:	b083      	sub	sp, #12
 801cf9c:	af00      	add	r7, sp, #0
 801cf9e:	6078      	str	r0, [r7, #4]
 801cfa0:	460b      	mov	r3, r1
 801cfa2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 801cfa4:	2300      	movs	r3, #0
}
 801cfa6:	4618      	mov	r0, r3
 801cfa8:	370c      	adds	r7, #12
 801cfaa:	46bd      	mov	sp, r7
 801cfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfb0:	4770      	bx	lr

0801cfb2 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801cfb2:	b480      	push	{r7}
 801cfb4:	b083      	sub	sp, #12
 801cfb6:	af00      	add	r7, sp, #0
 801cfb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801cfba:	2300      	movs	r3, #0
}
 801cfbc:	4618      	mov	r0, r3
 801cfbe:	370c      	adds	r7, #12
 801cfc0:	46bd      	mov	sp, r7
 801cfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfc6:	4770      	bx	lr

0801cfc8 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801cfc8:	b580      	push	{r7, lr}
 801cfca:	b082      	sub	sp, #8
 801cfcc:	af00      	add	r7, sp, #0
 801cfce:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801cfd0:	687b      	ldr	r3, [r7, #4]
 801cfd2:	2201      	movs	r2, #1
 801cfd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801cfd8:	687b      	ldr	r3, [r7, #4]
 801cfda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cfde:	685b      	ldr	r3, [r3, #4]
 801cfe0:	687a      	ldr	r2, [r7, #4]
 801cfe2:	6852      	ldr	r2, [r2, #4]
 801cfe4:	b2d2      	uxtb	r2, r2
 801cfe6:	4611      	mov	r1, r2
 801cfe8:	6878      	ldr	r0, [r7, #4]
 801cfea:	4798      	blx	r3

  return USBD_OK;
 801cfec:	2300      	movs	r3, #0
}
 801cfee:	4618      	mov	r0, r3
 801cff0:	3708      	adds	r7, #8
 801cff2:	46bd      	mov	sp, r7
 801cff4:	bd80      	pop	{r7, pc}
	...

0801cff8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801cff8:	b580      	push	{r7, lr}
 801cffa:	b084      	sub	sp, #16
 801cffc:	af00      	add	r7, sp, #0
 801cffe:	6078      	str	r0, [r7, #4]
 801d000:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801d002:	2300      	movs	r3, #0
 801d004:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801d006:	683b      	ldr	r3, [r7, #0]
 801d008:	781b      	ldrb	r3, [r3, #0]
 801d00a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d00e:	2b20      	cmp	r3, #32
 801d010:	d004      	beq.n	801d01c <USBD_StdDevReq+0x24>
 801d012:	2b40      	cmp	r3, #64	; 0x40
 801d014:	d002      	beq.n	801d01c <USBD_StdDevReq+0x24>
 801d016:	2b00      	cmp	r3, #0
 801d018:	d008      	beq.n	801d02c <USBD_StdDevReq+0x34>
 801d01a:	e04c      	b.n	801d0b6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801d01c:	687b      	ldr	r3, [r7, #4]
 801d01e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d022:	689b      	ldr	r3, [r3, #8]
 801d024:	6839      	ldr	r1, [r7, #0]
 801d026:	6878      	ldr	r0, [r7, #4]
 801d028:	4798      	blx	r3
      break;
 801d02a:	e049      	b.n	801d0c0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801d02c:	683b      	ldr	r3, [r7, #0]
 801d02e:	785b      	ldrb	r3, [r3, #1]
 801d030:	2b09      	cmp	r3, #9
 801d032:	d83a      	bhi.n	801d0aa <USBD_StdDevReq+0xb2>
 801d034:	a201      	add	r2, pc, #4	; (adr r2, 801d03c <USBD_StdDevReq+0x44>)
 801d036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d03a:	bf00      	nop
 801d03c:	0801d08d 	.word	0x0801d08d
 801d040:	0801d0a1 	.word	0x0801d0a1
 801d044:	0801d0ab 	.word	0x0801d0ab
 801d048:	0801d097 	.word	0x0801d097
 801d04c:	0801d0ab 	.word	0x0801d0ab
 801d050:	0801d06f 	.word	0x0801d06f
 801d054:	0801d065 	.word	0x0801d065
 801d058:	0801d0ab 	.word	0x0801d0ab
 801d05c:	0801d083 	.word	0x0801d083
 801d060:	0801d079 	.word	0x0801d079
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801d064:	6839      	ldr	r1, [r7, #0]
 801d066:	6878      	ldr	r0, [r7, #4]
 801d068:	f000 f9d4 	bl	801d414 <USBD_GetDescriptor>
          break;
 801d06c:	e022      	b.n	801d0b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801d06e:	6839      	ldr	r1, [r7, #0]
 801d070:	6878      	ldr	r0, [r7, #4]
 801d072:	f000 fb37 	bl	801d6e4 <USBD_SetAddress>
          break;
 801d076:	e01d      	b.n	801d0b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801d078:	6839      	ldr	r1, [r7, #0]
 801d07a:	6878      	ldr	r0, [r7, #4]
 801d07c:	f000 fb74 	bl	801d768 <USBD_SetConfig>
          break;
 801d080:	e018      	b.n	801d0b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801d082:	6839      	ldr	r1, [r7, #0]
 801d084:	6878      	ldr	r0, [r7, #4]
 801d086:	f000 fbfd 	bl	801d884 <USBD_GetConfig>
          break;
 801d08a:	e013      	b.n	801d0b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801d08c:	6839      	ldr	r1, [r7, #0]
 801d08e:	6878      	ldr	r0, [r7, #4]
 801d090:	f000 fc2c 	bl	801d8ec <USBD_GetStatus>
          break;
 801d094:	e00e      	b.n	801d0b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801d096:	6839      	ldr	r1, [r7, #0]
 801d098:	6878      	ldr	r0, [r7, #4]
 801d09a:	f000 fc5a 	bl	801d952 <USBD_SetFeature>
          break;
 801d09e:	e009      	b.n	801d0b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801d0a0:	6839      	ldr	r1, [r7, #0]
 801d0a2:	6878      	ldr	r0, [r7, #4]
 801d0a4:	f000 fc69 	bl	801d97a <USBD_ClrFeature>
          break;
 801d0a8:	e004      	b.n	801d0b4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 801d0aa:	6839      	ldr	r1, [r7, #0]
 801d0ac:	6878      	ldr	r0, [r7, #4]
 801d0ae:	f000 fcc2 	bl	801da36 <USBD_CtlError>
          break;
 801d0b2:	bf00      	nop
      }
      break;
 801d0b4:	e004      	b.n	801d0c0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 801d0b6:	6839      	ldr	r1, [r7, #0]
 801d0b8:	6878      	ldr	r0, [r7, #4]
 801d0ba:	f000 fcbc 	bl	801da36 <USBD_CtlError>
      break;
 801d0be:	bf00      	nop
  }

  return ret;
 801d0c0:	7bfb      	ldrb	r3, [r7, #15]
}
 801d0c2:	4618      	mov	r0, r3
 801d0c4:	3710      	adds	r7, #16
 801d0c6:	46bd      	mov	sp, r7
 801d0c8:	bd80      	pop	{r7, pc}
 801d0ca:	bf00      	nop

0801d0cc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801d0cc:	b580      	push	{r7, lr}
 801d0ce:	b084      	sub	sp, #16
 801d0d0:	af00      	add	r7, sp, #0
 801d0d2:	6078      	str	r0, [r7, #4]
 801d0d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801d0d6:	2300      	movs	r3, #0
 801d0d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801d0da:	683b      	ldr	r3, [r7, #0]
 801d0dc:	781b      	ldrb	r3, [r3, #0]
 801d0de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d0e2:	2b20      	cmp	r3, #32
 801d0e4:	d003      	beq.n	801d0ee <USBD_StdItfReq+0x22>
 801d0e6:	2b40      	cmp	r3, #64	; 0x40
 801d0e8:	d001      	beq.n	801d0ee <USBD_StdItfReq+0x22>
 801d0ea:	2b00      	cmp	r3, #0
 801d0ec:	d12a      	bne.n	801d144 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801d0ee:	687b      	ldr	r3, [r7, #4]
 801d0f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d0f4:	3b01      	subs	r3, #1
 801d0f6:	2b02      	cmp	r3, #2
 801d0f8:	d81d      	bhi.n	801d136 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801d0fa:	683b      	ldr	r3, [r7, #0]
 801d0fc:	889b      	ldrh	r3, [r3, #4]
 801d0fe:	b2db      	uxtb	r3, r3
 801d100:	2b01      	cmp	r3, #1
 801d102:	d813      	bhi.n	801d12c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801d104:	687b      	ldr	r3, [r7, #4]
 801d106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d10a:	689b      	ldr	r3, [r3, #8]
 801d10c:	6839      	ldr	r1, [r7, #0]
 801d10e:	6878      	ldr	r0, [r7, #4]
 801d110:	4798      	blx	r3
 801d112:	4603      	mov	r3, r0
 801d114:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801d116:	683b      	ldr	r3, [r7, #0]
 801d118:	88db      	ldrh	r3, [r3, #6]
 801d11a:	2b00      	cmp	r3, #0
 801d11c:	d110      	bne.n	801d140 <USBD_StdItfReq+0x74>
 801d11e:	7bfb      	ldrb	r3, [r7, #15]
 801d120:	2b00      	cmp	r3, #0
 801d122:	d10d      	bne.n	801d140 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 801d124:	6878      	ldr	r0, [r7, #4]
 801d126:	f000 fd4f 	bl	801dbc8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801d12a:	e009      	b.n	801d140 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 801d12c:	6839      	ldr	r1, [r7, #0]
 801d12e:	6878      	ldr	r0, [r7, #4]
 801d130:	f000 fc81 	bl	801da36 <USBD_CtlError>
          break;
 801d134:	e004      	b.n	801d140 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 801d136:	6839      	ldr	r1, [r7, #0]
 801d138:	6878      	ldr	r0, [r7, #4]
 801d13a:	f000 fc7c 	bl	801da36 <USBD_CtlError>
          break;
 801d13e:	e000      	b.n	801d142 <USBD_StdItfReq+0x76>
          break;
 801d140:	bf00      	nop
      }
      break;
 801d142:	e004      	b.n	801d14e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 801d144:	6839      	ldr	r1, [r7, #0]
 801d146:	6878      	ldr	r0, [r7, #4]
 801d148:	f000 fc75 	bl	801da36 <USBD_CtlError>
      break;
 801d14c:	bf00      	nop
  }

  return USBD_OK;
 801d14e:	2300      	movs	r3, #0
}
 801d150:	4618      	mov	r0, r3
 801d152:	3710      	adds	r7, #16
 801d154:	46bd      	mov	sp, r7
 801d156:	bd80      	pop	{r7, pc}

0801d158 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801d158:	b580      	push	{r7, lr}
 801d15a:	b084      	sub	sp, #16
 801d15c:	af00      	add	r7, sp, #0
 801d15e:	6078      	str	r0, [r7, #4]
 801d160:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801d162:	2300      	movs	r3, #0
 801d164:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 801d166:	683b      	ldr	r3, [r7, #0]
 801d168:	889b      	ldrh	r3, [r3, #4]
 801d16a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801d16c:	683b      	ldr	r3, [r7, #0]
 801d16e:	781b      	ldrb	r3, [r3, #0]
 801d170:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d174:	2b20      	cmp	r3, #32
 801d176:	d004      	beq.n	801d182 <USBD_StdEPReq+0x2a>
 801d178:	2b40      	cmp	r3, #64	; 0x40
 801d17a:	d002      	beq.n	801d182 <USBD_StdEPReq+0x2a>
 801d17c:	2b00      	cmp	r3, #0
 801d17e:	d008      	beq.n	801d192 <USBD_StdEPReq+0x3a>
 801d180:	e13d      	b.n	801d3fe <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801d182:	687b      	ldr	r3, [r7, #4]
 801d184:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d188:	689b      	ldr	r3, [r3, #8]
 801d18a:	6839      	ldr	r1, [r7, #0]
 801d18c:	6878      	ldr	r0, [r7, #4]
 801d18e:	4798      	blx	r3
      break;
 801d190:	e13a      	b.n	801d408 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801d192:	683b      	ldr	r3, [r7, #0]
 801d194:	781b      	ldrb	r3, [r3, #0]
 801d196:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d19a:	2b20      	cmp	r3, #32
 801d19c:	d10a      	bne.n	801d1b4 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801d19e:	687b      	ldr	r3, [r7, #4]
 801d1a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d1a4:	689b      	ldr	r3, [r3, #8]
 801d1a6:	6839      	ldr	r1, [r7, #0]
 801d1a8:	6878      	ldr	r0, [r7, #4]
 801d1aa:	4798      	blx	r3
 801d1ac:	4603      	mov	r3, r0
 801d1ae:	73fb      	strb	r3, [r7, #15]

        return ret;
 801d1b0:	7bfb      	ldrb	r3, [r7, #15]
 801d1b2:	e12a      	b.n	801d40a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 801d1b4:	683b      	ldr	r3, [r7, #0]
 801d1b6:	785b      	ldrb	r3, [r3, #1]
 801d1b8:	2b01      	cmp	r3, #1
 801d1ba:	d03e      	beq.n	801d23a <USBD_StdEPReq+0xe2>
 801d1bc:	2b03      	cmp	r3, #3
 801d1be:	d002      	beq.n	801d1c6 <USBD_StdEPReq+0x6e>
 801d1c0:	2b00      	cmp	r3, #0
 801d1c2:	d070      	beq.n	801d2a6 <USBD_StdEPReq+0x14e>
 801d1c4:	e115      	b.n	801d3f2 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801d1c6:	687b      	ldr	r3, [r7, #4]
 801d1c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d1cc:	2b02      	cmp	r3, #2
 801d1ce:	d002      	beq.n	801d1d6 <USBD_StdEPReq+0x7e>
 801d1d0:	2b03      	cmp	r3, #3
 801d1d2:	d015      	beq.n	801d200 <USBD_StdEPReq+0xa8>
 801d1d4:	e02b      	b.n	801d22e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801d1d6:	7bbb      	ldrb	r3, [r7, #14]
 801d1d8:	2b00      	cmp	r3, #0
 801d1da:	d00c      	beq.n	801d1f6 <USBD_StdEPReq+0x9e>
 801d1dc:	7bbb      	ldrb	r3, [r7, #14]
 801d1de:	2b80      	cmp	r3, #128	; 0x80
 801d1e0:	d009      	beq.n	801d1f6 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801d1e2:	7bbb      	ldrb	r3, [r7, #14]
 801d1e4:	4619      	mov	r1, r3
 801d1e6:	6878      	ldr	r0, [r7, #4]
 801d1e8:	f001 f934 	bl	801e454 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801d1ec:	2180      	movs	r1, #128	; 0x80
 801d1ee:	6878      	ldr	r0, [r7, #4]
 801d1f0:	f001 f930 	bl	801e454 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801d1f4:	e020      	b.n	801d238 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 801d1f6:	6839      	ldr	r1, [r7, #0]
 801d1f8:	6878      	ldr	r0, [r7, #4]
 801d1fa:	f000 fc1c 	bl	801da36 <USBD_CtlError>
              break;
 801d1fe:	e01b      	b.n	801d238 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801d200:	683b      	ldr	r3, [r7, #0]
 801d202:	885b      	ldrh	r3, [r3, #2]
 801d204:	2b00      	cmp	r3, #0
 801d206:	d10e      	bne.n	801d226 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 801d208:	7bbb      	ldrb	r3, [r7, #14]
 801d20a:	2b00      	cmp	r3, #0
 801d20c:	d00b      	beq.n	801d226 <USBD_StdEPReq+0xce>
 801d20e:	7bbb      	ldrb	r3, [r7, #14]
 801d210:	2b80      	cmp	r3, #128	; 0x80
 801d212:	d008      	beq.n	801d226 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801d214:	683b      	ldr	r3, [r7, #0]
 801d216:	88db      	ldrh	r3, [r3, #6]
 801d218:	2b00      	cmp	r3, #0
 801d21a:	d104      	bne.n	801d226 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801d21c:	7bbb      	ldrb	r3, [r7, #14]
 801d21e:	4619      	mov	r1, r3
 801d220:	6878      	ldr	r0, [r7, #4]
 801d222:	f001 f917 	bl	801e454 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801d226:	6878      	ldr	r0, [r7, #4]
 801d228:	f000 fcce 	bl	801dbc8 <USBD_CtlSendStatus>

              break;
 801d22c:	e004      	b.n	801d238 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 801d22e:	6839      	ldr	r1, [r7, #0]
 801d230:	6878      	ldr	r0, [r7, #4]
 801d232:	f000 fc00 	bl	801da36 <USBD_CtlError>
              break;
 801d236:	bf00      	nop
          }
          break;
 801d238:	e0e0      	b.n	801d3fc <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801d23a:	687b      	ldr	r3, [r7, #4]
 801d23c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d240:	2b02      	cmp	r3, #2
 801d242:	d002      	beq.n	801d24a <USBD_StdEPReq+0xf2>
 801d244:	2b03      	cmp	r3, #3
 801d246:	d015      	beq.n	801d274 <USBD_StdEPReq+0x11c>
 801d248:	e026      	b.n	801d298 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801d24a:	7bbb      	ldrb	r3, [r7, #14]
 801d24c:	2b00      	cmp	r3, #0
 801d24e:	d00c      	beq.n	801d26a <USBD_StdEPReq+0x112>
 801d250:	7bbb      	ldrb	r3, [r7, #14]
 801d252:	2b80      	cmp	r3, #128	; 0x80
 801d254:	d009      	beq.n	801d26a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801d256:	7bbb      	ldrb	r3, [r7, #14]
 801d258:	4619      	mov	r1, r3
 801d25a:	6878      	ldr	r0, [r7, #4]
 801d25c:	f001 f8fa 	bl	801e454 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801d260:	2180      	movs	r1, #128	; 0x80
 801d262:	6878      	ldr	r0, [r7, #4]
 801d264:	f001 f8f6 	bl	801e454 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801d268:	e01c      	b.n	801d2a4 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 801d26a:	6839      	ldr	r1, [r7, #0]
 801d26c:	6878      	ldr	r0, [r7, #4]
 801d26e:	f000 fbe2 	bl	801da36 <USBD_CtlError>
              break;
 801d272:	e017      	b.n	801d2a4 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801d274:	683b      	ldr	r3, [r7, #0]
 801d276:	885b      	ldrh	r3, [r3, #2]
 801d278:	2b00      	cmp	r3, #0
 801d27a:	d112      	bne.n	801d2a2 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801d27c:	7bbb      	ldrb	r3, [r7, #14]
 801d27e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d282:	2b00      	cmp	r3, #0
 801d284:	d004      	beq.n	801d290 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801d286:	7bbb      	ldrb	r3, [r7, #14]
 801d288:	4619      	mov	r1, r3
 801d28a:	6878      	ldr	r0, [r7, #4]
 801d28c:	f001 f901 	bl	801e492 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801d290:	6878      	ldr	r0, [r7, #4]
 801d292:	f000 fc99 	bl	801dbc8 <USBD_CtlSendStatus>
              }
              break;
 801d296:	e004      	b.n	801d2a2 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 801d298:	6839      	ldr	r1, [r7, #0]
 801d29a:	6878      	ldr	r0, [r7, #4]
 801d29c:	f000 fbcb 	bl	801da36 <USBD_CtlError>
              break;
 801d2a0:	e000      	b.n	801d2a4 <USBD_StdEPReq+0x14c>
              break;
 801d2a2:	bf00      	nop
          }
          break;
 801d2a4:	e0aa      	b.n	801d3fc <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801d2a6:	687b      	ldr	r3, [r7, #4]
 801d2a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d2ac:	2b02      	cmp	r3, #2
 801d2ae:	d002      	beq.n	801d2b6 <USBD_StdEPReq+0x15e>
 801d2b0:	2b03      	cmp	r3, #3
 801d2b2:	d032      	beq.n	801d31a <USBD_StdEPReq+0x1c2>
 801d2b4:	e097      	b.n	801d3e6 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801d2b6:	7bbb      	ldrb	r3, [r7, #14]
 801d2b8:	2b00      	cmp	r3, #0
 801d2ba:	d007      	beq.n	801d2cc <USBD_StdEPReq+0x174>
 801d2bc:	7bbb      	ldrb	r3, [r7, #14]
 801d2be:	2b80      	cmp	r3, #128	; 0x80
 801d2c0:	d004      	beq.n	801d2cc <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 801d2c2:	6839      	ldr	r1, [r7, #0]
 801d2c4:	6878      	ldr	r0, [r7, #4]
 801d2c6:	f000 fbb6 	bl	801da36 <USBD_CtlError>
                break;
 801d2ca:	e091      	b.n	801d3f0 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801d2cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801d2d0:	2b00      	cmp	r3, #0
 801d2d2:	da0b      	bge.n	801d2ec <USBD_StdEPReq+0x194>
 801d2d4:	7bbb      	ldrb	r3, [r7, #14]
 801d2d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801d2da:	4613      	mov	r3, r2
 801d2dc:	009b      	lsls	r3, r3, #2
 801d2de:	4413      	add	r3, r2
 801d2e0:	009b      	lsls	r3, r3, #2
 801d2e2:	3310      	adds	r3, #16
 801d2e4:	687a      	ldr	r2, [r7, #4]
 801d2e6:	4413      	add	r3, r2
 801d2e8:	3304      	adds	r3, #4
 801d2ea:	e00b      	b.n	801d304 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801d2ec:	7bbb      	ldrb	r3, [r7, #14]
 801d2ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801d2f2:	4613      	mov	r3, r2
 801d2f4:	009b      	lsls	r3, r3, #2
 801d2f6:	4413      	add	r3, r2
 801d2f8:	009b      	lsls	r3, r3, #2
 801d2fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801d2fe:	687a      	ldr	r2, [r7, #4]
 801d300:	4413      	add	r3, r2
 801d302:	3304      	adds	r3, #4
 801d304:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801d306:	68bb      	ldr	r3, [r7, #8]
 801d308:	2200      	movs	r2, #0
 801d30a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801d30c:	68bb      	ldr	r3, [r7, #8]
 801d30e:	2202      	movs	r2, #2
 801d310:	4619      	mov	r1, r3
 801d312:	6878      	ldr	r0, [r7, #4]
 801d314:	f000 fbfa 	bl	801db0c <USBD_CtlSendData>
              break;
 801d318:	e06a      	b.n	801d3f0 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801d31a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801d31e:	2b00      	cmp	r3, #0
 801d320:	da11      	bge.n	801d346 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801d322:	7bbb      	ldrb	r3, [r7, #14]
 801d324:	f003 020f 	and.w	r2, r3, #15
 801d328:	6879      	ldr	r1, [r7, #4]
 801d32a:	4613      	mov	r3, r2
 801d32c:	009b      	lsls	r3, r3, #2
 801d32e:	4413      	add	r3, r2
 801d330:	009b      	lsls	r3, r3, #2
 801d332:	440b      	add	r3, r1
 801d334:	3318      	adds	r3, #24
 801d336:	681b      	ldr	r3, [r3, #0]
 801d338:	2b00      	cmp	r3, #0
 801d33a:	d117      	bne.n	801d36c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 801d33c:	6839      	ldr	r1, [r7, #0]
 801d33e:	6878      	ldr	r0, [r7, #4]
 801d340:	f000 fb79 	bl	801da36 <USBD_CtlError>
                  break;
 801d344:	e054      	b.n	801d3f0 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801d346:	7bbb      	ldrb	r3, [r7, #14]
 801d348:	f003 020f 	and.w	r2, r3, #15
 801d34c:	6879      	ldr	r1, [r7, #4]
 801d34e:	4613      	mov	r3, r2
 801d350:	009b      	lsls	r3, r3, #2
 801d352:	4413      	add	r3, r2
 801d354:	009b      	lsls	r3, r3, #2
 801d356:	440b      	add	r3, r1
 801d358:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 801d35c:	681b      	ldr	r3, [r3, #0]
 801d35e:	2b00      	cmp	r3, #0
 801d360:	d104      	bne.n	801d36c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 801d362:	6839      	ldr	r1, [r7, #0]
 801d364:	6878      	ldr	r0, [r7, #4]
 801d366:	f000 fb66 	bl	801da36 <USBD_CtlError>
                  break;
 801d36a:	e041      	b.n	801d3f0 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801d36c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801d370:	2b00      	cmp	r3, #0
 801d372:	da0b      	bge.n	801d38c <USBD_StdEPReq+0x234>
 801d374:	7bbb      	ldrb	r3, [r7, #14]
 801d376:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801d37a:	4613      	mov	r3, r2
 801d37c:	009b      	lsls	r3, r3, #2
 801d37e:	4413      	add	r3, r2
 801d380:	009b      	lsls	r3, r3, #2
 801d382:	3310      	adds	r3, #16
 801d384:	687a      	ldr	r2, [r7, #4]
 801d386:	4413      	add	r3, r2
 801d388:	3304      	adds	r3, #4
 801d38a:	e00b      	b.n	801d3a4 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801d38c:	7bbb      	ldrb	r3, [r7, #14]
 801d38e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801d392:	4613      	mov	r3, r2
 801d394:	009b      	lsls	r3, r3, #2
 801d396:	4413      	add	r3, r2
 801d398:	009b      	lsls	r3, r3, #2
 801d39a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801d39e:	687a      	ldr	r2, [r7, #4]
 801d3a0:	4413      	add	r3, r2
 801d3a2:	3304      	adds	r3, #4
 801d3a4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801d3a6:	7bbb      	ldrb	r3, [r7, #14]
 801d3a8:	2b00      	cmp	r3, #0
 801d3aa:	d002      	beq.n	801d3b2 <USBD_StdEPReq+0x25a>
 801d3ac:	7bbb      	ldrb	r3, [r7, #14]
 801d3ae:	2b80      	cmp	r3, #128	; 0x80
 801d3b0:	d103      	bne.n	801d3ba <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 801d3b2:	68bb      	ldr	r3, [r7, #8]
 801d3b4:	2200      	movs	r2, #0
 801d3b6:	601a      	str	r2, [r3, #0]
 801d3b8:	e00e      	b.n	801d3d8 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801d3ba:	7bbb      	ldrb	r3, [r7, #14]
 801d3bc:	4619      	mov	r1, r3
 801d3be:	6878      	ldr	r0, [r7, #4]
 801d3c0:	f001 f886 	bl	801e4d0 <USBD_LL_IsStallEP>
 801d3c4:	4603      	mov	r3, r0
 801d3c6:	2b00      	cmp	r3, #0
 801d3c8:	d003      	beq.n	801d3d2 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 801d3ca:	68bb      	ldr	r3, [r7, #8]
 801d3cc:	2201      	movs	r2, #1
 801d3ce:	601a      	str	r2, [r3, #0]
 801d3d0:	e002      	b.n	801d3d8 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 801d3d2:	68bb      	ldr	r3, [r7, #8]
 801d3d4:	2200      	movs	r2, #0
 801d3d6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801d3d8:	68bb      	ldr	r3, [r7, #8]
 801d3da:	2202      	movs	r2, #2
 801d3dc:	4619      	mov	r1, r3
 801d3de:	6878      	ldr	r0, [r7, #4]
 801d3e0:	f000 fb94 	bl	801db0c <USBD_CtlSendData>
              break;
 801d3e4:	e004      	b.n	801d3f0 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 801d3e6:	6839      	ldr	r1, [r7, #0]
 801d3e8:	6878      	ldr	r0, [r7, #4]
 801d3ea:	f000 fb24 	bl	801da36 <USBD_CtlError>
              break;
 801d3ee:	bf00      	nop
          }
          break;
 801d3f0:	e004      	b.n	801d3fc <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 801d3f2:	6839      	ldr	r1, [r7, #0]
 801d3f4:	6878      	ldr	r0, [r7, #4]
 801d3f6:	f000 fb1e 	bl	801da36 <USBD_CtlError>
          break;
 801d3fa:	bf00      	nop
      }
      break;
 801d3fc:	e004      	b.n	801d408 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 801d3fe:	6839      	ldr	r1, [r7, #0]
 801d400:	6878      	ldr	r0, [r7, #4]
 801d402:	f000 fb18 	bl	801da36 <USBD_CtlError>
      break;
 801d406:	bf00      	nop
  }

  return ret;
 801d408:	7bfb      	ldrb	r3, [r7, #15]
}
 801d40a:	4618      	mov	r0, r3
 801d40c:	3710      	adds	r7, #16
 801d40e:	46bd      	mov	sp, r7
 801d410:	bd80      	pop	{r7, pc}
	...

0801d414 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801d414:	b580      	push	{r7, lr}
 801d416:	b084      	sub	sp, #16
 801d418:	af00      	add	r7, sp, #0
 801d41a:	6078      	str	r0, [r7, #4]
 801d41c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801d41e:	2300      	movs	r3, #0
 801d420:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801d422:	2300      	movs	r3, #0
 801d424:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801d426:	2300      	movs	r3, #0
 801d428:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801d42a:	683b      	ldr	r3, [r7, #0]
 801d42c:	885b      	ldrh	r3, [r3, #2]
 801d42e:	0a1b      	lsrs	r3, r3, #8
 801d430:	b29b      	uxth	r3, r3
 801d432:	3b01      	subs	r3, #1
 801d434:	2b06      	cmp	r3, #6
 801d436:	f200 8128 	bhi.w	801d68a <USBD_GetDescriptor+0x276>
 801d43a:	a201      	add	r2, pc, #4	; (adr r2, 801d440 <USBD_GetDescriptor+0x2c>)
 801d43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d440:	0801d45d 	.word	0x0801d45d
 801d444:	0801d475 	.word	0x0801d475
 801d448:	0801d4b5 	.word	0x0801d4b5
 801d44c:	0801d68b 	.word	0x0801d68b
 801d450:	0801d68b 	.word	0x0801d68b
 801d454:	0801d62b 	.word	0x0801d62b
 801d458:	0801d657 	.word	0x0801d657
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801d45c:	687b      	ldr	r3, [r7, #4]
 801d45e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d462:	681b      	ldr	r3, [r3, #0]
 801d464:	687a      	ldr	r2, [r7, #4]
 801d466:	7c12      	ldrb	r2, [r2, #16]
 801d468:	f107 0108 	add.w	r1, r7, #8
 801d46c:	4610      	mov	r0, r2
 801d46e:	4798      	blx	r3
 801d470:	60f8      	str	r0, [r7, #12]
      break;
 801d472:	e112      	b.n	801d69a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801d474:	687b      	ldr	r3, [r7, #4]
 801d476:	7c1b      	ldrb	r3, [r3, #16]
 801d478:	2b00      	cmp	r3, #0
 801d47a:	d10d      	bne.n	801d498 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801d47c:	687b      	ldr	r3, [r7, #4]
 801d47e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d484:	f107 0208 	add.w	r2, r7, #8
 801d488:	4610      	mov	r0, r2
 801d48a:	4798      	blx	r3
 801d48c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801d48e:	68fb      	ldr	r3, [r7, #12]
 801d490:	3301      	adds	r3, #1
 801d492:	2202      	movs	r2, #2
 801d494:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801d496:	e100      	b.n	801d69a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801d498:	687b      	ldr	r3, [r7, #4]
 801d49a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d4a0:	f107 0208 	add.w	r2, r7, #8
 801d4a4:	4610      	mov	r0, r2
 801d4a6:	4798      	blx	r3
 801d4a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801d4aa:	68fb      	ldr	r3, [r7, #12]
 801d4ac:	3301      	adds	r3, #1
 801d4ae:	2202      	movs	r2, #2
 801d4b0:	701a      	strb	r2, [r3, #0]
      break;
 801d4b2:	e0f2      	b.n	801d69a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801d4b4:	683b      	ldr	r3, [r7, #0]
 801d4b6:	885b      	ldrh	r3, [r3, #2]
 801d4b8:	b2db      	uxtb	r3, r3
 801d4ba:	2b05      	cmp	r3, #5
 801d4bc:	f200 80ac 	bhi.w	801d618 <USBD_GetDescriptor+0x204>
 801d4c0:	a201      	add	r2, pc, #4	; (adr r2, 801d4c8 <USBD_GetDescriptor+0xb4>)
 801d4c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d4c6:	bf00      	nop
 801d4c8:	0801d4e1 	.word	0x0801d4e1
 801d4cc:	0801d515 	.word	0x0801d515
 801d4d0:	0801d549 	.word	0x0801d549
 801d4d4:	0801d57d 	.word	0x0801d57d
 801d4d8:	0801d5b1 	.word	0x0801d5b1
 801d4dc:	0801d5e5 	.word	0x0801d5e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801d4e0:	687b      	ldr	r3, [r7, #4]
 801d4e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d4e6:	685b      	ldr	r3, [r3, #4]
 801d4e8:	2b00      	cmp	r3, #0
 801d4ea:	d00b      	beq.n	801d504 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801d4ec:	687b      	ldr	r3, [r7, #4]
 801d4ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d4f2:	685b      	ldr	r3, [r3, #4]
 801d4f4:	687a      	ldr	r2, [r7, #4]
 801d4f6:	7c12      	ldrb	r2, [r2, #16]
 801d4f8:	f107 0108 	add.w	r1, r7, #8
 801d4fc:	4610      	mov	r0, r2
 801d4fe:	4798      	blx	r3
 801d500:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801d502:	e091      	b.n	801d628 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801d504:	6839      	ldr	r1, [r7, #0]
 801d506:	6878      	ldr	r0, [r7, #4]
 801d508:	f000 fa95 	bl	801da36 <USBD_CtlError>
            err++;
 801d50c:	7afb      	ldrb	r3, [r7, #11]
 801d50e:	3301      	adds	r3, #1
 801d510:	72fb      	strb	r3, [r7, #11]
          break;
 801d512:	e089      	b.n	801d628 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801d514:	687b      	ldr	r3, [r7, #4]
 801d516:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d51a:	689b      	ldr	r3, [r3, #8]
 801d51c:	2b00      	cmp	r3, #0
 801d51e:	d00b      	beq.n	801d538 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801d520:	687b      	ldr	r3, [r7, #4]
 801d522:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d526:	689b      	ldr	r3, [r3, #8]
 801d528:	687a      	ldr	r2, [r7, #4]
 801d52a:	7c12      	ldrb	r2, [r2, #16]
 801d52c:	f107 0108 	add.w	r1, r7, #8
 801d530:	4610      	mov	r0, r2
 801d532:	4798      	blx	r3
 801d534:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801d536:	e077      	b.n	801d628 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801d538:	6839      	ldr	r1, [r7, #0]
 801d53a:	6878      	ldr	r0, [r7, #4]
 801d53c:	f000 fa7b 	bl	801da36 <USBD_CtlError>
            err++;
 801d540:	7afb      	ldrb	r3, [r7, #11]
 801d542:	3301      	adds	r3, #1
 801d544:	72fb      	strb	r3, [r7, #11]
          break;
 801d546:	e06f      	b.n	801d628 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801d548:	687b      	ldr	r3, [r7, #4]
 801d54a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d54e:	68db      	ldr	r3, [r3, #12]
 801d550:	2b00      	cmp	r3, #0
 801d552:	d00b      	beq.n	801d56c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801d554:	687b      	ldr	r3, [r7, #4]
 801d556:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d55a:	68db      	ldr	r3, [r3, #12]
 801d55c:	687a      	ldr	r2, [r7, #4]
 801d55e:	7c12      	ldrb	r2, [r2, #16]
 801d560:	f107 0108 	add.w	r1, r7, #8
 801d564:	4610      	mov	r0, r2
 801d566:	4798      	blx	r3
 801d568:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801d56a:	e05d      	b.n	801d628 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801d56c:	6839      	ldr	r1, [r7, #0]
 801d56e:	6878      	ldr	r0, [r7, #4]
 801d570:	f000 fa61 	bl	801da36 <USBD_CtlError>
            err++;
 801d574:	7afb      	ldrb	r3, [r7, #11]
 801d576:	3301      	adds	r3, #1
 801d578:	72fb      	strb	r3, [r7, #11]
          break;
 801d57a:	e055      	b.n	801d628 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801d57c:	687b      	ldr	r3, [r7, #4]
 801d57e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d582:	691b      	ldr	r3, [r3, #16]
 801d584:	2b00      	cmp	r3, #0
 801d586:	d00b      	beq.n	801d5a0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801d588:	687b      	ldr	r3, [r7, #4]
 801d58a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d58e:	691b      	ldr	r3, [r3, #16]
 801d590:	687a      	ldr	r2, [r7, #4]
 801d592:	7c12      	ldrb	r2, [r2, #16]
 801d594:	f107 0108 	add.w	r1, r7, #8
 801d598:	4610      	mov	r0, r2
 801d59a:	4798      	blx	r3
 801d59c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801d59e:	e043      	b.n	801d628 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801d5a0:	6839      	ldr	r1, [r7, #0]
 801d5a2:	6878      	ldr	r0, [r7, #4]
 801d5a4:	f000 fa47 	bl	801da36 <USBD_CtlError>
            err++;
 801d5a8:	7afb      	ldrb	r3, [r7, #11]
 801d5aa:	3301      	adds	r3, #1
 801d5ac:	72fb      	strb	r3, [r7, #11]
          break;
 801d5ae:	e03b      	b.n	801d628 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801d5b0:	687b      	ldr	r3, [r7, #4]
 801d5b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d5b6:	695b      	ldr	r3, [r3, #20]
 801d5b8:	2b00      	cmp	r3, #0
 801d5ba:	d00b      	beq.n	801d5d4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801d5bc:	687b      	ldr	r3, [r7, #4]
 801d5be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d5c2:	695b      	ldr	r3, [r3, #20]
 801d5c4:	687a      	ldr	r2, [r7, #4]
 801d5c6:	7c12      	ldrb	r2, [r2, #16]
 801d5c8:	f107 0108 	add.w	r1, r7, #8
 801d5cc:	4610      	mov	r0, r2
 801d5ce:	4798      	blx	r3
 801d5d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801d5d2:	e029      	b.n	801d628 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801d5d4:	6839      	ldr	r1, [r7, #0]
 801d5d6:	6878      	ldr	r0, [r7, #4]
 801d5d8:	f000 fa2d 	bl	801da36 <USBD_CtlError>
            err++;
 801d5dc:	7afb      	ldrb	r3, [r7, #11]
 801d5de:	3301      	adds	r3, #1
 801d5e0:	72fb      	strb	r3, [r7, #11]
          break;
 801d5e2:	e021      	b.n	801d628 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801d5e4:	687b      	ldr	r3, [r7, #4]
 801d5e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d5ea:	699b      	ldr	r3, [r3, #24]
 801d5ec:	2b00      	cmp	r3, #0
 801d5ee:	d00b      	beq.n	801d608 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801d5f0:	687b      	ldr	r3, [r7, #4]
 801d5f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d5f6:	699b      	ldr	r3, [r3, #24]
 801d5f8:	687a      	ldr	r2, [r7, #4]
 801d5fa:	7c12      	ldrb	r2, [r2, #16]
 801d5fc:	f107 0108 	add.w	r1, r7, #8
 801d600:	4610      	mov	r0, r2
 801d602:	4798      	blx	r3
 801d604:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801d606:	e00f      	b.n	801d628 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801d608:	6839      	ldr	r1, [r7, #0]
 801d60a:	6878      	ldr	r0, [r7, #4]
 801d60c:	f000 fa13 	bl	801da36 <USBD_CtlError>
            err++;
 801d610:	7afb      	ldrb	r3, [r7, #11]
 801d612:	3301      	adds	r3, #1
 801d614:	72fb      	strb	r3, [r7, #11]
          break;
 801d616:	e007      	b.n	801d628 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801d618:	6839      	ldr	r1, [r7, #0]
 801d61a:	6878      	ldr	r0, [r7, #4]
 801d61c:	f000 fa0b 	bl	801da36 <USBD_CtlError>
          err++;
 801d620:	7afb      	ldrb	r3, [r7, #11]
 801d622:	3301      	adds	r3, #1
 801d624:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 801d626:	e038      	b.n	801d69a <USBD_GetDescriptor+0x286>
 801d628:	e037      	b.n	801d69a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801d62a:	687b      	ldr	r3, [r7, #4]
 801d62c:	7c1b      	ldrb	r3, [r3, #16]
 801d62e:	2b00      	cmp	r3, #0
 801d630:	d109      	bne.n	801d646 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801d632:	687b      	ldr	r3, [r7, #4]
 801d634:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d63a:	f107 0208 	add.w	r2, r7, #8
 801d63e:	4610      	mov	r0, r2
 801d640:	4798      	blx	r3
 801d642:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801d644:	e029      	b.n	801d69a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801d646:	6839      	ldr	r1, [r7, #0]
 801d648:	6878      	ldr	r0, [r7, #4]
 801d64a:	f000 f9f4 	bl	801da36 <USBD_CtlError>
        err++;
 801d64e:	7afb      	ldrb	r3, [r7, #11]
 801d650:	3301      	adds	r3, #1
 801d652:	72fb      	strb	r3, [r7, #11]
      break;
 801d654:	e021      	b.n	801d69a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801d656:	687b      	ldr	r3, [r7, #4]
 801d658:	7c1b      	ldrb	r3, [r3, #16]
 801d65a:	2b00      	cmp	r3, #0
 801d65c:	d10d      	bne.n	801d67a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801d65e:	687b      	ldr	r3, [r7, #4]
 801d660:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d666:	f107 0208 	add.w	r2, r7, #8
 801d66a:	4610      	mov	r0, r2
 801d66c:	4798      	blx	r3
 801d66e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801d670:	68fb      	ldr	r3, [r7, #12]
 801d672:	3301      	adds	r3, #1
 801d674:	2207      	movs	r2, #7
 801d676:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801d678:	e00f      	b.n	801d69a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801d67a:	6839      	ldr	r1, [r7, #0]
 801d67c:	6878      	ldr	r0, [r7, #4]
 801d67e:	f000 f9da 	bl	801da36 <USBD_CtlError>
        err++;
 801d682:	7afb      	ldrb	r3, [r7, #11]
 801d684:	3301      	adds	r3, #1
 801d686:	72fb      	strb	r3, [r7, #11]
      break;
 801d688:	e007      	b.n	801d69a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801d68a:	6839      	ldr	r1, [r7, #0]
 801d68c:	6878      	ldr	r0, [r7, #4]
 801d68e:	f000 f9d2 	bl	801da36 <USBD_CtlError>
      err++;
 801d692:	7afb      	ldrb	r3, [r7, #11]
 801d694:	3301      	adds	r3, #1
 801d696:	72fb      	strb	r3, [r7, #11]
      break;
 801d698:	bf00      	nop
  }

  if (err != 0U)
 801d69a:	7afb      	ldrb	r3, [r7, #11]
 801d69c:	2b00      	cmp	r3, #0
 801d69e:	d11c      	bne.n	801d6da <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801d6a0:	893b      	ldrh	r3, [r7, #8]
 801d6a2:	2b00      	cmp	r3, #0
 801d6a4:	d011      	beq.n	801d6ca <USBD_GetDescriptor+0x2b6>
 801d6a6:	683b      	ldr	r3, [r7, #0]
 801d6a8:	88db      	ldrh	r3, [r3, #6]
 801d6aa:	2b00      	cmp	r3, #0
 801d6ac:	d00d      	beq.n	801d6ca <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 801d6ae:	683b      	ldr	r3, [r7, #0]
 801d6b0:	88da      	ldrh	r2, [r3, #6]
 801d6b2:	893b      	ldrh	r3, [r7, #8]
 801d6b4:	4293      	cmp	r3, r2
 801d6b6:	bf28      	it	cs
 801d6b8:	4613      	movcs	r3, r2
 801d6ba:	b29b      	uxth	r3, r3
 801d6bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801d6be:	893b      	ldrh	r3, [r7, #8]
 801d6c0:	461a      	mov	r2, r3
 801d6c2:	68f9      	ldr	r1, [r7, #12]
 801d6c4:	6878      	ldr	r0, [r7, #4]
 801d6c6:	f000 fa21 	bl	801db0c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801d6ca:	683b      	ldr	r3, [r7, #0]
 801d6cc:	88db      	ldrh	r3, [r3, #6]
 801d6ce:	2b00      	cmp	r3, #0
 801d6d0:	d104      	bne.n	801d6dc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 801d6d2:	6878      	ldr	r0, [r7, #4]
 801d6d4:	f000 fa78 	bl	801dbc8 <USBD_CtlSendStatus>
 801d6d8:	e000      	b.n	801d6dc <USBD_GetDescriptor+0x2c8>
    return;
 801d6da:	bf00      	nop
    }
  }
}
 801d6dc:	3710      	adds	r7, #16
 801d6de:	46bd      	mov	sp, r7
 801d6e0:	bd80      	pop	{r7, pc}
 801d6e2:	bf00      	nop

0801d6e4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801d6e4:	b580      	push	{r7, lr}
 801d6e6:	b084      	sub	sp, #16
 801d6e8:	af00      	add	r7, sp, #0
 801d6ea:	6078      	str	r0, [r7, #4]
 801d6ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801d6ee:	683b      	ldr	r3, [r7, #0]
 801d6f0:	889b      	ldrh	r3, [r3, #4]
 801d6f2:	2b00      	cmp	r3, #0
 801d6f4:	d130      	bne.n	801d758 <USBD_SetAddress+0x74>
 801d6f6:	683b      	ldr	r3, [r7, #0]
 801d6f8:	88db      	ldrh	r3, [r3, #6]
 801d6fa:	2b00      	cmp	r3, #0
 801d6fc:	d12c      	bne.n	801d758 <USBD_SetAddress+0x74>
 801d6fe:	683b      	ldr	r3, [r7, #0]
 801d700:	885b      	ldrh	r3, [r3, #2]
 801d702:	2b7f      	cmp	r3, #127	; 0x7f
 801d704:	d828      	bhi.n	801d758 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801d706:	683b      	ldr	r3, [r7, #0]
 801d708:	885b      	ldrh	r3, [r3, #2]
 801d70a:	b2db      	uxtb	r3, r3
 801d70c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d710:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d712:	687b      	ldr	r3, [r7, #4]
 801d714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d718:	2b03      	cmp	r3, #3
 801d71a:	d104      	bne.n	801d726 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 801d71c:	6839      	ldr	r1, [r7, #0]
 801d71e:	6878      	ldr	r0, [r7, #4]
 801d720:	f000 f989 	bl	801da36 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d724:	e01c      	b.n	801d760 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801d726:	687b      	ldr	r3, [r7, #4]
 801d728:	7bfa      	ldrb	r2, [r7, #15]
 801d72a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801d72e:	7bfb      	ldrb	r3, [r7, #15]
 801d730:	4619      	mov	r1, r3
 801d732:	6878      	ldr	r0, [r7, #4]
 801d734:	f000 fef8 	bl	801e528 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801d738:	6878      	ldr	r0, [r7, #4]
 801d73a:	f000 fa45 	bl	801dbc8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801d73e:	7bfb      	ldrb	r3, [r7, #15]
 801d740:	2b00      	cmp	r3, #0
 801d742:	d004      	beq.n	801d74e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801d744:	687b      	ldr	r3, [r7, #4]
 801d746:	2202      	movs	r2, #2
 801d748:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d74c:	e008      	b.n	801d760 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801d74e:	687b      	ldr	r3, [r7, #4]
 801d750:	2201      	movs	r2, #1
 801d752:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d756:	e003      	b.n	801d760 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801d758:	6839      	ldr	r1, [r7, #0]
 801d75a:	6878      	ldr	r0, [r7, #4]
 801d75c:	f000 f96b 	bl	801da36 <USBD_CtlError>
  }
}
 801d760:	bf00      	nop
 801d762:	3710      	adds	r7, #16
 801d764:	46bd      	mov	sp, r7
 801d766:	bd80      	pop	{r7, pc}

0801d768 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d768:	b580      	push	{r7, lr}
 801d76a:	b082      	sub	sp, #8
 801d76c:	af00      	add	r7, sp, #0
 801d76e:	6078      	str	r0, [r7, #4]
 801d770:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801d772:	683b      	ldr	r3, [r7, #0]
 801d774:	885b      	ldrh	r3, [r3, #2]
 801d776:	b2da      	uxtb	r2, r3
 801d778:	4b41      	ldr	r3, [pc, #260]	; (801d880 <USBD_SetConfig+0x118>)
 801d77a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801d77c:	4b40      	ldr	r3, [pc, #256]	; (801d880 <USBD_SetConfig+0x118>)
 801d77e:	781b      	ldrb	r3, [r3, #0]
 801d780:	2b01      	cmp	r3, #1
 801d782:	d904      	bls.n	801d78e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 801d784:	6839      	ldr	r1, [r7, #0]
 801d786:	6878      	ldr	r0, [r7, #4]
 801d788:	f000 f955 	bl	801da36 <USBD_CtlError>
 801d78c:	e075      	b.n	801d87a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 801d78e:	687b      	ldr	r3, [r7, #4]
 801d790:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d794:	2b02      	cmp	r3, #2
 801d796:	d002      	beq.n	801d79e <USBD_SetConfig+0x36>
 801d798:	2b03      	cmp	r3, #3
 801d79a:	d023      	beq.n	801d7e4 <USBD_SetConfig+0x7c>
 801d79c:	e062      	b.n	801d864 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801d79e:	4b38      	ldr	r3, [pc, #224]	; (801d880 <USBD_SetConfig+0x118>)
 801d7a0:	781b      	ldrb	r3, [r3, #0]
 801d7a2:	2b00      	cmp	r3, #0
 801d7a4:	d01a      	beq.n	801d7dc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 801d7a6:	4b36      	ldr	r3, [pc, #216]	; (801d880 <USBD_SetConfig+0x118>)
 801d7a8:	781b      	ldrb	r3, [r3, #0]
 801d7aa:	461a      	mov	r2, r3
 801d7ac:	687b      	ldr	r3, [r7, #4]
 801d7ae:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801d7b0:	687b      	ldr	r3, [r7, #4]
 801d7b2:	2203      	movs	r2, #3
 801d7b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801d7b8:	4b31      	ldr	r3, [pc, #196]	; (801d880 <USBD_SetConfig+0x118>)
 801d7ba:	781b      	ldrb	r3, [r3, #0]
 801d7bc:	4619      	mov	r1, r3
 801d7be:	6878      	ldr	r0, [r7, #4]
 801d7c0:	f7ff f9b4 	bl	801cb2c <USBD_SetClassConfig>
 801d7c4:	4603      	mov	r3, r0
 801d7c6:	2b02      	cmp	r3, #2
 801d7c8:	d104      	bne.n	801d7d4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 801d7ca:	6839      	ldr	r1, [r7, #0]
 801d7cc:	6878      	ldr	r0, [r7, #4]
 801d7ce:	f000 f932 	bl	801da36 <USBD_CtlError>
            return;
 801d7d2:	e052      	b.n	801d87a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 801d7d4:	6878      	ldr	r0, [r7, #4]
 801d7d6:	f000 f9f7 	bl	801dbc8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801d7da:	e04e      	b.n	801d87a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 801d7dc:	6878      	ldr	r0, [r7, #4]
 801d7de:	f000 f9f3 	bl	801dbc8 <USBD_CtlSendStatus>
        break;
 801d7e2:	e04a      	b.n	801d87a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801d7e4:	4b26      	ldr	r3, [pc, #152]	; (801d880 <USBD_SetConfig+0x118>)
 801d7e6:	781b      	ldrb	r3, [r3, #0]
 801d7e8:	2b00      	cmp	r3, #0
 801d7ea:	d112      	bne.n	801d812 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801d7ec:	687b      	ldr	r3, [r7, #4]
 801d7ee:	2202      	movs	r2, #2
 801d7f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 801d7f4:	4b22      	ldr	r3, [pc, #136]	; (801d880 <USBD_SetConfig+0x118>)
 801d7f6:	781b      	ldrb	r3, [r3, #0]
 801d7f8:	461a      	mov	r2, r3
 801d7fa:	687b      	ldr	r3, [r7, #4]
 801d7fc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801d7fe:	4b20      	ldr	r3, [pc, #128]	; (801d880 <USBD_SetConfig+0x118>)
 801d800:	781b      	ldrb	r3, [r3, #0]
 801d802:	4619      	mov	r1, r3
 801d804:	6878      	ldr	r0, [r7, #4]
 801d806:	f7ff f9b0 	bl	801cb6a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801d80a:	6878      	ldr	r0, [r7, #4]
 801d80c:	f000 f9dc 	bl	801dbc8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801d810:	e033      	b.n	801d87a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 801d812:	4b1b      	ldr	r3, [pc, #108]	; (801d880 <USBD_SetConfig+0x118>)
 801d814:	781b      	ldrb	r3, [r3, #0]
 801d816:	461a      	mov	r2, r3
 801d818:	687b      	ldr	r3, [r7, #4]
 801d81a:	685b      	ldr	r3, [r3, #4]
 801d81c:	429a      	cmp	r2, r3
 801d81e:	d01d      	beq.n	801d85c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801d820:	687b      	ldr	r3, [r7, #4]
 801d822:	685b      	ldr	r3, [r3, #4]
 801d824:	b2db      	uxtb	r3, r3
 801d826:	4619      	mov	r1, r3
 801d828:	6878      	ldr	r0, [r7, #4]
 801d82a:	f7ff f99e 	bl	801cb6a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801d82e:	4b14      	ldr	r3, [pc, #80]	; (801d880 <USBD_SetConfig+0x118>)
 801d830:	781b      	ldrb	r3, [r3, #0]
 801d832:	461a      	mov	r2, r3
 801d834:	687b      	ldr	r3, [r7, #4]
 801d836:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801d838:	4b11      	ldr	r3, [pc, #68]	; (801d880 <USBD_SetConfig+0x118>)
 801d83a:	781b      	ldrb	r3, [r3, #0]
 801d83c:	4619      	mov	r1, r3
 801d83e:	6878      	ldr	r0, [r7, #4]
 801d840:	f7ff f974 	bl	801cb2c <USBD_SetClassConfig>
 801d844:	4603      	mov	r3, r0
 801d846:	2b02      	cmp	r3, #2
 801d848:	d104      	bne.n	801d854 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 801d84a:	6839      	ldr	r1, [r7, #0]
 801d84c:	6878      	ldr	r0, [r7, #4]
 801d84e:	f000 f8f2 	bl	801da36 <USBD_CtlError>
            return;
 801d852:	e012      	b.n	801d87a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 801d854:	6878      	ldr	r0, [r7, #4]
 801d856:	f000 f9b7 	bl	801dbc8 <USBD_CtlSendStatus>
        break;
 801d85a:	e00e      	b.n	801d87a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 801d85c:	6878      	ldr	r0, [r7, #4]
 801d85e:	f000 f9b3 	bl	801dbc8 <USBD_CtlSendStatus>
        break;
 801d862:	e00a      	b.n	801d87a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 801d864:	6839      	ldr	r1, [r7, #0]
 801d866:	6878      	ldr	r0, [r7, #4]
 801d868:	f000 f8e5 	bl	801da36 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801d86c:	4b04      	ldr	r3, [pc, #16]	; (801d880 <USBD_SetConfig+0x118>)
 801d86e:	781b      	ldrb	r3, [r3, #0]
 801d870:	4619      	mov	r1, r3
 801d872:	6878      	ldr	r0, [r7, #4]
 801d874:	f7ff f979 	bl	801cb6a <USBD_ClrClassConfig>
        break;
 801d878:	bf00      	nop
    }
  }
}
 801d87a:	3708      	adds	r7, #8
 801d87c:	46bd      	mov	sp, r7
 801d87e:	bd80      	pop	{r7, pc}
 801d880:	24000315 	.word	0x24000315

0801d884 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d884:	b580      	push	{r7, lr}
 801d886:	b082      	sub	sp, #8
 801d888:	af00      	add	r7, sp, #0
 801d88a:	6078      	str	r0, [r7, #4]
 801d88c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801d88e:	683b      	ldr	r3, [r7, #0]
 801d890:	88db      	ldrh	r3, [r3, #6]
 801d892:	2b01      	cmp	r3, #1
 801d894:	d004      	beq.n	801d8a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801d896:	6839      	ldr	r1, [r7, #0]
 801d898:	6878      	ldr	r0, [r7, #4]
 801d89a:	f000 f8cc 	bl	801da36 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801d89e:	e021      	b.n	801d8e4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 801d8a0:	687b      	ldr	r3, [r7, #4]
 801d8a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d8a6:	2b01      	cmp	r3, #1
 801d8a8:	db17      	blt.n	801d8da <USBD_GetConfig+0x56>
 801d8aa:	2b02      	cmp	r3, #2
 801d8ac:	dd02      	ble.n	801d8b4 <USBD_GetConfig+0x30>
 801d8ae:	2b03      	cmp	r3, #3
 801d8b0:	d00b      	beq.n	801d8ca <USBD_GetConfig+0x46>
 801d8b2:	e012      	b.n	801d8da <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 801d8b4:	687b      	ldr	r3, [r7, #4]
 801d8b6:	2200      	movs	r2, #0
 801d8b8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801d8ba:	687b      	ldr	r3, [r7, #4]
 801d8bc:	3308      	adds	r3, #8
 801d8be:	2201      	movs	r2, #1
 801d8c0:	4619      	mov	r1, r3
 801d8c2:	6878      	ldr	r0, [r7, #4]
 801d8c4:	f000 f922 	bl	801db0c <USBD_CtlSendData>
        break;
 801d8c8:	e00c      	b.n	801d8e4 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801d8ca:	687b      	ldr	r3, [r7, #4]
 801d8cc:	3304      	adds	r3, #4
 801d8ce:	2201      	movs	r2, #1
 801d8d0:	4619      	mov	r1, r3
 801d8d2:	6878      	ldr	r0, [r7, #4]
 801d8d4:	f000 f91a 	bl	801db0c <USBD_CtlSendData>
        break;
 801d8d8:	e004      	b.n	801d8e4 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 801d8da:	6839      	ldr	r1, [r7, #0]
 801d8dc:	6878      	ldr	r0, [r7, #4]
 801d8de:	f000 f8aa 	bl	801da36 <USBD_CtlError>
        break;
 801d8e2:	bf00      	nop
}
 801d8e4:	bf00      	nop
 801d8e6:	3708      	adds	r7, #8
 801d8e8:	46bd      	mov	sp, r7
 801d8ea:	bd80      	pop	{r7, pc}

0801d8ec <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d8ec:	b580      	push	{r7, lr}
 801d8ee:	b082      	sub	sp, #8
 801d8f0:	af00      	add	r7, sp, #0
 801d8f2:	6078      	str	r0, [r7, #4]
 801d8f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801d8f6:	687b      	ldr	r3, [r7, #4]
 801d8f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d8fc:	3b01      	subs	r3, #1
 801d8fe:	2b02      	cmp	r3, #2
 801d900:	d81e      	bhi.n	801d940 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801d902:	683b      	ldr	r3, [r7, #0]
 801d904:	88db      	ldrh	r3, [r3, #6]
 801d906:	2b02      	cmp	r3, #2
 801d908:	d004      	beq.n	801d914 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 801d90a:	6839      	ldr	r1, [r7, #0]
 801d90c:	6878      	ldr	r0, [r7, #4]
 801d90e:	f000 f892 	bl	801da36 <USBD_CtlError>
        break;
 801d912:	e01a      	b.n	801d94a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801d914:	687b      	ldr	r3, [r7, #4]
 801d916:	2201      	movs	r2, #1
 801d918:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801d91a:	687b      	ldr	r3, [r7, #4]
 801d91c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801d920:	2b00      	cmp	r3, #0
 801d922:	d005      	beq.n	801d930 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801d924:	687b      	ldr	r3, [r7, #4]
 801d926:	68db      	ldr	r3, [r3, #12]
 801d928:	f043 0202 	orr.w	r2, r3, #2
 801d92c:	687b      	ldr	r3, [r7, #4]
 801d92e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801d930:	687b      	ldr	r3, [r7, #4]
 801d932:	330c      	adds	r3, #12
 801d934:	2202      	movs	r2, #2
 801d936:	4619      	mov	r1, r3
 801d938:	6878      	ldr	r0, [r7, #4]
 801d93a:	f000 f8e7 	bl	801db0c <USBD_CtlSendData>
      break;
 801d93e:	e004      	b.n	801d94a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 801d940:	6839      	ldr	r1, [r7, #0]
 801d942:	6878      	ldr	r0, [r7, #4]
 801d944:	f000 f877 	bl	801da36 <USBD_CtlError>
      break;
 801d948:	bf00      	nop
  }
}
 801d94a:	bf00      	nop
 801d94c:	3708      	adds	r7, #8
 801d94e:	46bd      	mov	sp, r7
 801d950:	bd80      	pop	{r7, pc}

0801d952 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801d952:	b580      	push	{r7, lr}
 801d954:	b082      	sub	sp, #8
 801d956:	af00      	add	r7, sp, #0
 801d958:	6078      	str	r0, [r7, #4]
 801d95a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801d95c:	683b      	ldr	r3, [r7, #0]
 801d95e:	885b      	ldrh	r3, [r3, #2]
 801d960:	2b01      	cmp	r3, #1
 801d962:	d106      	bne.n	801d972 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801d964:	687b      	ldr	r3, [r7, #4]
 801d966:	2201      	movs	r2, #1
 801d968:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 801d96c:	6878      	ldr	r0, [r7, #4]
 801d96e:	f000 f92b 	bl	801dbc8 <USBD_CtlSendStatus>
  }
}
 801d972:	bf00      	nop
 801d974:	3708      	adds	r7, #8
 801d976:	46bd      	mov	sp, r7
 801d978:	bd80      	pop	{r7, pc}

0801d97a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801d97a:	b580      	push	{r7, lr}
 801d97c:	b082      	sub	sp, #8
 801d97e:	af00      	add	r7, sp, #0
 801d980:	6078      	str	r0, [r7, #4]
 801d982:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801d984:	687b      	ldr	r3, [r7, #4]
 801d986:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d98a:	3b01      	subs	r3, #1
 801d98c:	2b02      	cmp	r3, #2
 801d98e:	d80b      	bhi.n	801d9a8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801d990:	683b      	ldr	r3, [r7, #0]
 801d992:	885b      	ldrh	r3, [r3, #2]
 801d994:	2b01      	cmp	r3, #1
 801d996:	d10c      	bne.n	801d9b2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 801d998:	687b      	ldr	r3, [r7, #4]
 801d99a:	2200      	movs	r2, #0
 801d99c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 801d9a0:	6878      	ldr	r0, [r7, #4]
 801d9a2:	f000 f911 	bl	801dbc8 <USBD_CtlSendStatus>
      }
      break;
 801d9a6:	e004      	b.n	801d9b2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 801d9a8:	6839      	ldr	r1, [r7, #0]
 801d9aa:	6878      	ldr	r0, [r7, #4]
 801d9ac:	f000 f843 	bl	801da36 <USBD_CtlError>
      break;
 801d9b0:	e000      	b.n	801d9b4 <USBD_ClrFeature+0x3a>
      break;
 801d9b2:	bf00      	nop
  }
}
 801d9b4:	bf00      	nop
 801d9b6:	3708      	adds	r7, #8
 801d9b8:	46bd      	mov	sp, r7
 801d9ba:	bd80      	pop	{r7, pc}

0801d9bc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801d9bc:	b480      	push	{r7}
 801d9be:	b083      	sub	sp, #12
 801d9c0:	af00      	add	r7, sp, #0
 801d9c2:	6078      	str	r0, [r7, #4]
 801d9c4:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801d9c6:	683b      	ldr	r3, [r7, #0]
 801d9c8:	781a      	ldrb	r2, [r3, #0]
 801d9ca:	687b      	ldr	r3, [r7, #4]
 801d9cc:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801d9ce:	683b      	ldr	r3, [r7, #0]
 801d9d0:	785a      	ldrb	r2, [r3, #1]
 801d9d2:	687b      	ldr	r3, [r7, #4]
 801d9d4:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801d9d6:	683b      	ldr	r3, [r7, #0]
 801d9d8:	3302      	adds	r3, #2
 801d9da:	781b      	ldrb	r3, [r3, #0]
 801d9dc:	b29a      	uxth	r2, r3
 801d9de:	683b      	ldr	r3, [r7, #0]
 801d9e0:	3303      	adds	r3, #3
 801d9e2:	781b      	ldrb	r3, [r3, #0]
 801d9e4:	b29b      	uxth	r3, r3
 801d9e6:	021b      	lsls	r3, r3, #8
 801d9e8:	b29b      	uxth	r3, r3
 801d9ea:	4413      	add	r3, r2
 801d9ec:	b29a      	uxth	r2, r3
 801d9ee:	687b      	ldr	r3, [r7, #4]
 801d9f0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801d9f2:	683b      	ldr	r3, [r7, #0]
 801d9f4:	3304      	adds	r3, #4
 801d9f6:	781b      	ldrb	r3, [r3, #0]
 801d9f8:	b29a      	uxth	r2, r3
 801d9fa:	683b      	ldr	r3, [r7, #0]
 801d9fc:	3305      	adds	r3, #5
 801d9fe:	781b      	ldrb	r3, [r3, #0]
 801da00:	b29b      	uxth	r3, r3
 801da02:	021b      	lsls	r3, r3, #8
 801da04:	b29b      	uxth	r3, r3
 801da06:	4413      	add	r3, r2
 801da08:	b29a      	uxth	r2, r3
 801da0a:	687b      	ldr	r3, [r7, #4]
 801da0c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801da0e:	683b      	ldr	r3, [r7, #0]
 801da10:	3306      	adds	r3, #6
 801da12:	781b      	ldrb	r3, [r3, #0]
 801da14:	b29a      	uxth	r2, r3
 801da16:	683b      	ldr	r3, [r7, #0]
 801da18:	3307      	adds	r3, #7
 801da1a:	781b      	ldrb	r3, [r3, #0]
 801da1c:	b29b      	uxth	r3, r3
 801da1e:	021b      	lsls	r3, r3, #8
 801da20:	b29b      	uxth	r3, r3
 801da22:	4413      	add	r3, r2
 801da24:	b29a      	uxth	r2, r3
 801da26:	687b      	ldr	r3, [r7, #4]
 801da28:	80da      	strh	r2, [r3, #6]

}
 801da2a:	bf00      	nop
 801da2c:	370c      	adds	r7, #12
 801da2e:	46bd      	mov	sp, r7
 801da30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da34:	4770      	bx	lr

0801da36 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801da36:	b580      	push	{r7, lr}
 801da38:	b082      	sub	sp, #8
 801da3a:	af00      	add	r7, sp, #0
 801da3c:	6078      	str	r0, [r7, #4]
 801da3e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801da40:	2180      	movs	r1, #128	; 0x80
 801da42:	6878      	ldr	r0, [r7, #4]
 801da44:	f000 fd06 	bl	801e454 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801da48:	2100      	movs	r1, #0
 801da4a:	6878      	ldr	r0, [r7, #4]
 801da4c:	f000 fd02 	bl	801e454 <USBD_LL_StallEP>
}
 801da50:	bf00      	nop
 801da52:	3708      	adds	r7, #8
 801da54:	46bd      	mov	sp, r7
 801da56:	bd80      	pop	{r7, pc}

0801da58 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801da58:	b580      	push	{r7, lr}
 801da5a:	b086      	sub	sp, #24
 801da5c:	af00      	add	r7, sp, #0
 801da5e:	60f8      	str	r0, [r7, #12]
 801da60:	60b9      	str	r1, [r7, #8]
 801da62:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801da64:	2300      	movs	r3, #0
 801da66:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 801da68:	68fb      	ldr	r3, [r7, #12]
 801da6a:	2b00      	cmp	r3, #0
 801da6c:	d032      	beq.n	801dad4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801da6e:	68f8      	ldr	r0, [r7, #12]
 801da70:	f000 f834 	bl	801dadc <USBD_GetLen>
 801da74:	4603      	mov	r3, r0
 801da76:	3301      	adds	r3, #1
 801da78:	b29b      	uxth	r3, r3
 801da7a:	005b      	lsls	r3, r3, #1
 801da7c:	b29a      	uxth	r2, r3
 801da7e:	687b      	ldr	r3, [r7, #4]
 801da80:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801da82:	7dfb      	ldrb	r3, [r7, #23]
 801da84:	1c5a      	adds	r2, r3, #1
 801da86:	75fa      	strb	r2, [r7, #23]
 801da88:	461a      	mov	r2, r3
 801da8a:	68bb      	ldr	r3, [r7, #8]
 801da8c:	4413      	add	r3, r2
 801da8e:	687a      	ldr	r2, [r7, #4]
 801da90:	7812      	ldrb	r2, [r2, #0]
 801da92:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801da94:	7dfb      	ldrb	r3, [r7, #23]
 801da96:	1c5a      	adds	r2, r3, #1
 801da98:	75fa      	strb	r2, [r7, #23]
 801da9a:	461a      	mov	r2, r3
 801da9c:	68bb      	ldr	r3, [r7, #8]
 801da9e:	4413      	add	r3, r2
 801daa0:	2203      	movs	r2, #3
 801daa2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801daa4:	e012      	b.n	801dacc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 801daa6:	68fb      	ldr	r3, [r7, #12]
 801daa8:	1c5a      	adds	r2, r3, #1
 801daaa:	60fa      	str	r2, [r7, #12]
 801daac:	7dfa      	ldrb	r2, [r7, #23]
 801daae:	1c51      	adds	r1, r2, #1
 801dab0:	75f9      	strb	r1, [r7, #23]
 801dab2:	4611      	mov	r1, r2
 801dab4:	68ba      	ldr	r2, [r7, #8]
 801dab6:	440a      	add	r2, r1
 801dab8:	781b      	ldrb	r3, [r3, #0]
 801daba:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801dabc:	7dfb      	ldrb	r3, [r7, #23]
 801dabe:	1c5a      	adds	r2, r3, #1
 801dac0:	75fa      	strb	r2, [r7, #23]
 801dac2:	461a      	mov	r2, r3
 801dac4:	68bb      	ldr	r3, [r7, #8]
 801dac6:	4413      	add	r3, r2
 801dac8:	2200      	movs	r2, #0
 801daca:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801dacc:	68fb      	ldr	r3, [r7, #12]
 801dace:	781b      	ldrb	r3, [r3, #0]
 801dad0:	2b00      	cmp	r3, #0
 801dad2:	d1e8      	bne.n	801daa6 <USBD_GetString+0x4e>
    }
  }
}
 801dad4:	bf00      	nop
 801dad6:	3718      	adds	r7, #24
 801dad8:	46bd      	mov	sp, r7
 801dada:	bd80      	pop	{r7, pc}

0801dadc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801dadc:	b480      	push	{r7}
 801dade:	b085      	sub	sp, #20
 801dae0:	af00      	add	r7, sp, #0
 801dae2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801dae4:	2300      	movs	r3, #0
 801dae6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 801dae8:	e005      	b.n	801daf6 <USBD_GetLen+0x1a>
  {
    len++;
 801daea:	7bfb      	ldrb	r3, [r7, #15]
 801daec:	3301      	adds	r3, #1
 801daee:	73fb      	strb	r3, [r7, #15]
    buf++;
 801daf0:	687b      	ldr	r3, [r7, #4]
 801daf2:	3301      	adds	r3, #1
 801daf4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801daf6:	687b      	ldr	r3, [r7, #4]
 801daf8:	781b      	ldrb	r3, [r3, #0]
 801dafa:	2b00      	cmp	r3, #0
 801dafc:	d1f5      	bne.n	801daea <USBD_GetLen+0xe>
  }

  return len;
 801dafe:	7bfb      	ldrb	r3, [r7, #15]
}
 801db00:	4618      	mov	r0, r3
 801db02:	3714      	adds	r7, #20
 801db04:	46bd      	mov	sp, r7
 801db06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db0a:	4770      	bx	lr

0801db0c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801db0c:	b580      	push	{r7, lr}
 801db0e:	b084      	sub	sp, #16
 801db10:	af00      	add	r7, sp, #0
 801db12:	60f8      	str	r0, [r7, #12]
 801db14:	60b9      	str	r1, [r7, #8]
 801db16:	4613      	mov	r3, r2
 801db18:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801db1a:	68fb      	ldr	r3, [r7, #12]
 801db1c:	2202      	movs	r2, #2
 801db1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801db22:	88fa      	ldrh	r2, [r7, #6]
 801db24:	68fb      	ldr	r3, [r7, #12]
 801db26:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801db28:	88fa      	ldrh	r2, [r7, #6]
 801db2a:	68fb      	ldr	r3, [r7, #12]
 801db2c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801db2e:	88fb      	ldrh	r3, [r7, #6]
 801db30:	68ba      	ldr	r2, [r7, #8]
 801db32:	2100      	movs	r1, #0
 801db34:	68f8      	ldr	r0, [r7, #12]
 801db36:	f000 fd16 	bl	801e566 <USBD_LL_Transmit>

  return USBD_OK;
 801db3a:	2300      	movs	r3, #0
}
 801db3c:	4618      	mov	r0, r3
 801db3e:	3710      	adds	r7, #16
 801db40:	46bd      	mov	sp, r7
 801db42:	bd80      	pop	{r7, pc}

0801db44 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801db44:	b580      	push	{r7, lr}
 801db46:	b084      	sub	sp, #16
 801db48:	af00      	add	r7, sp, #0
 801db4a:	60f8      	str	r0, [r7, #12]
 801db4c:	60b9      	str	r1, [r7, #8]
 801db4e:	4613      	mov	r3, r2
 801db50:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801db52:	88fb      	ldrh	r3, [r7, #6]
 801db54:	68ba      	ldr	r2, [r7, #8]
 801db56:	2100      	movs	r1, #0
 801db58:	68f8      	ldr	r0, [r7, #12]
 801db5a:	f000 fd04 	bl	801e566 <USBD_LL_Transmit>

  return USBD_OK;
 801db5e:	2300      	movs	r3, #0
}
 801db60:	4618      	mov	r0, r3
 801db62:	3710      	adds	r7, #16
 801db64:	46bd      	mov	sp, r7
 801db66:	bd80      	pop	{r7, pc}

0801db68 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801db68:	b580      	push	{r7, lr}
 801db6a:	b084      	sub	sp, #16
 801db6c:	af00      	add	r7, sp, #0
 801db6e:	60f8      	str	r0, [r7, #12]
 801db70:	60b9      	str	r1, [r7, #8]
 801db72:	4613      	mov	r3, r2
 801db74:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801db76:	68fb      	ldr	r3, [r7, #12]
 801db78:	2203      	movs	r2, #3
 801db7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801db7e:	88fa      	ldrh	r2, [r7, #6]
 801db80:	68fb      	ldr	r3, [r7, #12]
 801db82:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 801db86:	88fa      	ldrh	r2, [r7, #6]
 801db88:	68fb      	ldr	r3, [r7, #12]
 801db8a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801db8e:	88fb      	ldrh	r3, [r7, #6]
 801db90:	68ba      	ldr	r2, [r7, #8]
 801db92:	2100      	movs	r1, #0
 801db94:	68f8      	ldr	r0, [r7, #12]
 801db96:	f000 fd09 	bl	801e5ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 801db9a:	2300      	movs	r3, #0
}
 801db9c:	4618      	mov	r0, r3
 801db9e:	3710      	adds	r7, #16
 801dba0:	46bd      	mov	sp, r7
 801dba2:	bd80      	pop	{r7, pc}

0801dba4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801dba4:	b580      	push	{r7, lr}
 801dba6:	b084      	sub	sp, #16
 801dba8:	af00      	add	r7, sp, #0
 801dbaa:	60f8      	str	r0, [r7, #12]
 801dbac:	60b9      	str	r1, [r7, #8]
 801dbae:	4613      	mov	r3, r2
 801dbb0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801dbb2:	88fb      	ldrh	r3, [r7, #6]
 801dbb4:	68ba      	ldr	r2, [r7, #8]
 801dbb6:	2100      	movs	r1, #0
 801dbb8:	68f8      	ldr	r0, [r7, #12]
 801dbba:	f000 fcf7 	bl	801e5ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 801dbbe:	2300      	movs	r3, #0
}
 801dbc0:	4618      	mov	r0, r3
 801dbc2:	3710      	adds	r7, #16
 801dbc4:	46bd      	mov	sp, r7
 801dbc6:	bd80      	pop	{r7, pc}

0801dbc8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801dbc8:	b580      	push	{r7, lr}
 801dbca:	b082      	sub	sp, #8
 801dbcc:	af00      	add	r7, sp, #0
 801dbce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801dbd0:	687b      	ldr	r3, [r7, #4]
 801dbd2:	2204      	movs	r2, #4
 801dbd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801dbd8:	2300      	movs	r3, #0
 801dbda:	2200      	movs	r2, #0
 801dbdc:	2100      	movs	r1, #0
 801dbde:	6878      	ldr	r0, [r7, #4]
 801dbe0:	f000 fcc1 	bl	801e566 <USBD_LL_Transmit>

  return USBD_OK;
 801dbe4:	2300      	movs	r3, #0
}
 801dbe6:	4618      	mov	r0, r3
 801dbe8:	3708      	adds	r7, #8
 801dbea:	46bd      	mov	sp, r7
 801dbec:	bd80      	pop	{r7, pc}

0801dbee <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801dbee:	b580      	push	{r7, lr}
 801dbf0:	b082      	sub	sp, #8
 801dbf2:	af00      	add	r7, sp, #0
 801dbf4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801dbf6:	687b      	ldr	r3, [r7, #4]
 801dbf8:	2205      	movs	r2, #5
 801dbfa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801dbfe:	2300      	movs	r3, #0
 801dc00:	2200      	movs	r2, #0
 801dc02:	2100      	movs	r1, #0
 801dc04:	6878      	ldr	r0, [r7, #4]
 801dc06:	f000 fcd1 	bl	801e5ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 801dc0a:	2300      	movs	r3, #0
}
 801dc0c:	4618      	mov	r0, r3
 801dc0e:	3708      	adds	r7, #8
 801dc10:	46bd      	mov	sp, r7
 801dc12:	bd80      	pop	{r7, pc}

0801dc14 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801dc14:	b580      	push	{r7, lr}
 801dc16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801dc18:	2200      	movs	r2, #0
 801dc1a:	4913      	ldr	r1, [pc, #76]	; (801dc68 <MX_USB_DEVICE_Init+0x54>)
 801dc1c:	4813      	ldr	r0, [pc, #76]	; (801dc6c <MX_USB_DEVICE_Init+0x58>)
 801dc1e:	f7fe ff29 	bl	801ca74 <USBD_Init>
 801dc22:	4603      	mov	r3, r0
 801dc24:	2b00      	cmp	r3, #0
 801dc26:	d001      	beq.n	801dc2c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801dc28:	f7e4 fb6c 	bl	8002304 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801dc2c:	4910      	ldr	r1, [pc, #64]	; (801dc70 <MX_USB_DEVICE_Init+0x5c>)
 801dc2e:	480f      	ldr	r0, [pc, #60]	; (801dc6c <MX_USB_DEVICE_Init+0x58>)
 801dc30:	f7fe ff4b 	bl	801caca <USBD_RegisterClass>
 801dc34:	4603      	mov	r3, r0
 801dc36:	2b00      	cmp	r3, #0
 801dc38:	d001      	beq.n	801dc3e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801dc3a:	f7e4 fb63 	bl	8002304 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801dc3e:	490d      	ldr	r1, [pc, #52]	; (801dc74 <MX_USB_DEVICE_Init+0x60>)
 801dc40:	480a      	ldr	r0, [pc, #40]	; (801dc6c <MX_USB_DEVICE_Init+0x58>)
 801dc42:	f7fe fe79 	bl	801c938 <USBD_CDC_RegisterInterface>
 801dc46:	4603      	mov	r3, r0
 801dc48:	2b00      	cmp	r3, #0
 801dc4a:	d001      	beq.n	801dc50 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801dc4c:	f7e4 fb5a 	bl	8002304 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801dc50:	4806      	ldr	r0, [pc, #24]	; (801dc6c <MX_USB_DEVICE_Init+0x58>)
 801dc52:	f7fe ff54 	bl	801cafe <USBD_Start>
 801dc56:	4603      	mov	r3, r0
 801dc58:	2b00      	cmp	r3, #0
 801dc5a:	d001      	beq.n	801dc60 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801dc5c:	f7e4 fb52 	bl	8002304 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801dc60:	f7f7 f8ca 	bl	8014df8 <HAL_PWREx_EnableUSBVoltageDetector>
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801dc64:	bf00      	nop
 801dc66:	bd80      	pop	{r7, pc}
 801dc68:	2400013c 	.word	0x2400013c
 801dc6c:	240006e0 	.word	0x240006e0
 801dc70:	24000028 	.word	0x24000028
 801dc74:	2400012c 	.word	0x2400012c

0801dc78 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801dc78:	b580      	push	{r7, lr}
 801dc7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801dc7c:	2200      	movs	r2, #0
 801dc7e:	4905      	ldr	r1, [pc, #20]	; (801dc94 <CDC_Init_FS+0x1c>)
 801dc80:	4805      	ldr	r0, [pc, #20]	; (801dc98 <CDC_Init_FS+0x20>)
 801dc82:	f7fe fe70 	bl	801c966 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801dc86:	4905      	ldr	r1, [pc, #20]	; (801dc9c <CDC_Init_FS+0x24>)
 801dc88:	4803      	ldr	r0, [pc, #12]	; (801dc98 <CDC_Init_FS+0x20>)
 801dc8a:	f7fe fe86 	bl	801c99a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801dc8e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801dc90:	4618      	mov	r0, r3
 801dc92:	bd80      	pop	{r7, pc}
 801dc94:	240011a4 	.word	0x240011a4
 801dc98:	240006e0 	.word	0x240006e0
 801dc9c:	240009a4 	.word	0x240009a4

0801dca0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801dca0:	b480      	push	{r7}
 801dca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801dca4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801dca6:	4618      	mov	r0, r3
 801dca8:	46bd      	mov	sp, r7
 801dcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcae:	4770      	bx	lr

0801dcb0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801dcb0:	b480      	push	{r7}
 801dcb2:	b085      	sub	sp, #20
 801dcb4:	af00      	add	r7, sp, #0
 801dcb6:	4603      	mov	r3, r0
 801dcb8:	6039      	str	r1, [r7, #0]
 801dcba:	71fb      	strb	r3, [r7, #7]
 801dcbc:	4613      	mov	r3, r2
 801dcbe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 801dcc0:	f107 0308 	add.w	r3, r7, #8
 801dcc4:	2200      	movs	r2, #0
 801dcc6:	601a      	str	r2, [r3, #0]
 801dcc8:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 801dccc:	79fb      	ldrb	r3, [r7, #7]
 801dcce:	2b23      	cmp	r3, #35	; 0x23
 801dcd0:	d87c      	bhi.n	801ddcc <CDC_Control_FS+0x11c>
 801dcd2:	a201      	add	r2, pc, #4	; (adr r2, 801dcd8 <CDC_Control_FS+0x28>)
 801dcd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dcd8:	0801ddcd 	.word	0x0801ddcd
 801dcdc:	0801ddcd 	.word	0x0801ddcd
 801dce0:	0801ddcd 	.word	0x0801ddcd
 801dce4:	0801ddcd 	.word	0x0801ddcd
 801dce8:	0801ddcd 	.word	0x0801ddcd
 801dcec:	0801ddcd 	.word	0x0801ddcd
 801dcf0:	0801ddcd 	.word	0x0801ddcd
 801dcf4:	0801ddcd 	.word	0x0801ddcd
 801dcf8:	0801ddcd 	.word	0x0801ddcd
 801dcfc:	0801ddcd 	.word	0x0801ddcd
 801dd00:	0801ddcd 	.word	0x0801ddcd
 801dd04:	0801ddcd 	.word	0x0801ddcd
 801dd08:	0801ddcd 	.word	0x0801ddcd
 801dd0c:	0801ddcd 	.word	0x0801ddcd
 801dd10:	0801ddcd 	.word	0x0801ddcd
 801dd14:	0801ddcd 	.word	0x0801ddcd
 801dd18:	0801ddcd 	.word	0x0801ddcd
 801dd1c:	0801ddcd 	.word	0x0801ddcd
 801dd20:	0801ddcd 	.word	0x0801ddcd
 801dd24:	0801ddcd 	.word	0x0801ddcd
 801dd28:	0801ddcd 	.word	0x0801ddcd
 801dd2c:	0801ddcd 	.word	0x0801ddcd
 801dd30:	0801ddcd 	.word	0x0801ddcd
 801dd34:	0801ddcd 	.word	0x0801ddcd
 801dd38:	0801ddcd 	.word	0x0801ddcd
 801dd3c:	0801ddcd 	.word	0x0801ddcd
 801dd40:	0801ddcd 	.word	0x0801ddcd
 801dd44:	0801ddcd 	.word	0x0801ddcd
 801dd48:	0801ddcd 	.word	0x0801ddcd
 801dd4c:	0801ddcd 	.word	0x0801ddcd
 801dd50:	0801ddcd 	.word	0x0801ddcd
 801dd54:	0801ddcd 	.word	0x0801ddcd
 801dd58:	0801dd69 	.word	0x0801dd69
 801dd5c:	0801dd95 	.word	0x0801dd95
 801dd60:	0801ddcd 	.word	0x0801ddcd
 801dd64:	0801ddcd 	.word	0x0801ddcd
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
     	tempbuf[0] = pbuf[0];
 801dd68:	683b      	ldr	r3, [r7, #0]
 801dd6a:	781b      	ldrb	r3, [r3, #0]
 801dd6c:	723b      	strb	r3, [r7, #8]
     	tempbuf[1] = pbuf[1];
 801dd6e:	683b      	ldr	r3, [r7, #0]
 801dd70:	785b      	ldrb	r3, [r3, #1]
 801dd72:	727b      	strb	r3, [r7, #9]
     	tempbuf[2] = pbuf[2];
 801dd74:	683b      	ldr	r3, [r7, #0]
 801dd76:	789b      	ldrb	r3, [r3, #2]
 801dd78:	72bb      	strb	r3, [r7, #10]
     	tempbuf[3] = pbuf[3];
 801dd7a:	683b      	ldr	r3, [r7, #0]
 801dd7c:	78db      	ldrb	r3, [r3, #3]
 801dd7e:	72fb      	strb	r3, [r7, #11]
     	tempbuf[4] = pbuf[4];
 801dd80:	683b      	ldr	r3, [r7, #0]
 801dd82:	791b      	ldrb	r3, [r3, #4]
 801dd84:	733b      	strb	r3, [r7, #12]
     	tempbuf[5] = pbuf[5];
 801dd86:	683b      	ldr	r3, [r7, #0]
 801dd88:	795b      	ldrb	r3, [r3, #5]
 801dd8a:	737b      	strb	r3, [r7, #13]
     	tempbuf[6] = pbuf[6];
 801dd8c:	683b      	ldr	r3, [r7, #0]
 801dd8e:	799b      	ldrb	r3, [r3, #6]
 801dd90:	73bb      	strb	r3, [r7, #14]
     	break;
 801dd92:	e01c      	b.n	801ddce <CDC_Control_FS+0x11e>

     case CDC_GET_LINE_CODING:
     	pbuf[0] = tempbuf[0];
 801dd94:	7a3a      	ldrb	r2, [r7, #8]
 801dd96:	683b      	ldr	r3, [r7, #0]
 801dd98:	701a      	strb	r2, [r3, #0]
     	pbuf[1] = tempbuf[1];
 801dd9a:	683b      	ldr	r3, [r7, #0]
 801dd9c:	3301      	adds	r3, #1
 801dd9e:	7a7a      	ldrb	r2, [r7, #9]
 801dda0:	701a      	strb	r2, [r3, #0]
     	pbuf[2] = tempbuf[2];
 801dda2:	683b      	ldr	r3, [r7, #0]
 801dda4:	3302      	adds	r3, #2
 801dda6:	7aba      	ldrb	r2, [r7, #10]
 801dda8:	701a      	strb	r2, [r3, #0]
     	pbuf[3] = tempbuf[3];
 801ddaa:	683b      	ldr	r3, [r7, #0]
 801ddac:	3303      	adds	r3, #3
 801ddae:	7afa      	ldrb	r2, [r7, #11]
 801ddb0:	701a      	strb	r2, [r3, #0]
     	pbuf[4] = tempbuf[4];
 801ddb2:	683b      	ldr	r3, [r7, #0]
 801ddb4:	3304      	adds	r3, #4
 801ddb6:	7b3a      	ldrb	r2, [r7, #12]
 801ddb8:	701a      	strb	r2, [r3, #0]
     	pbuf[5] = tempbuf[5];
 801ddba:	683b      	ldr	r3, [r7, #0]
 801ddbc:	3305      	adds	r3, #5
 801ddbe:	7b7a      	ldrb	r2, [r7, #13]
 801ddc0:	701a      	strb	r2, [r3, #0]
     	pbuf[6] = tempbuf[6];
 801ddc2:	683b      	ldr	r3, [r7, #0]
 801ddc4:	3306      	adds	r3, #6
 801ddc6:	7bba      	ldrb	r2, [r7, #14]
 801ddc8:	701a      	strb	r2, [r3, #0]
     	break;
 801ddca:	e000      	b.n	801ddce <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801ddcc:	bf00      	nop
  }

  return (USBD_OK);
 801ddce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801ddd0:	4618      	mov	r0, r3
 801ddd2:	3714      	adds	r7, #20
 801ddd4:	46bd      	mov	sp, r7
 801ddd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddda:	4770      	bx	lr

0801dddc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801dddc:	b580      	push	{r7, lr}
 801ddde:	b082      	sub	sp, #8
 801dde0:	af00      	add	r7, sp, #0
 801dde2:	6078      	str	r0, [r7, #4]
 801dde4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801dde6:	6879      	ldr	r1, [r7, #4]
 801dde8:	4805      	ldr	r0, [pc, #20]	; (801de00 <CDC_Receive_FS+0x24>)
 801ddea:	f7fe fdd6 	bl	801c99a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801ddee:	4804      	ldr	r0, [pc, #16]	; (801de00 <CDC_Receive_FS+0x24>)
 801ddf0:	f7fe fe16 	bl	801ca20 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801ddf4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801ddf6:	4618      	mov	r0, r3
 801ddf8:	3708      	adds	r7, #8
 801ddfa:	46bd      	mov	sp, r7
 801ddfc:	bd80      	pop	{r7, pc}
 801ddfe:	bf00      	nop
 801de00:	240006e0 	.word	0x240006e0

0801de04 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801de04:	b580      	push	{r7, lr}
 801de06:	b084      	sub	sp, #16
 801de08:	af00      	add	r7, sp, #0
 801de0a:	6078      	str	r0, [r7, #4]
 801de0c:	460b      	mov	r3, r1
 801de0e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801de10:	2300      	movs	r3, #0
 801de12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801de14:	4b0d      	ldr	r3, [pc, #52]	; (801de4c <CDC_Transmit_FS+0x48>)
 801de16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801de1a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801de1c:	68bb      	ldr	r3, [r7, #8]
 801de1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801de22:	2b00      	cmp	r3, #0
 801de24:	d001      	beq.n	801de2a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801de26:	2301      	movs	r3, #1
 801de28:	e00b      	b.n	801de42 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801de2a:	887b      	ldrh	r3, [r7, #2]
 801de2c:	461a      	mov	r2, r3
 801de2e:	6879      	ldr	r1, [r7, #4]
 801de30:	4806      	ldr	r0, [pc, #24]	; (801de4c <CDC_Transmit_FS+0x48>)
 801de32:	f7fe fd98 	bl	801c966 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801de36:	4805      	ldr	r0, [pc, #20]	; (801de4c <CDC_Transmit_FS+0x48>)
 801de38:	f7fe fdc3 	bl	801c9c2 <USBD_CDC_TransmitPacket>
 801de3c:	4603      	mov	r3, r0
 801de3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801de40:	7bfb      	ldrb	r3, [r7, #15]
}
 801de42:	4618      	mov	r0, r3
 801de44:	3710      	adds	r7, #16
 801de46:	46bd      	mov	sp, r7
 801de48:	bd80      	pop	{r7, pc}
 801de4a:	bf00      	nop
 801de4c:	240006e0 	.word	0x240006e0

0801de50 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801de50:	b480      	push	{r7}
 801de52:	b083      	sub	sp, #12
 801de54:	af00      	add	r7, sp, #0
 801de56:	4603      	mov	r3, r0
 801de58:	6039      	str	r1, [r7, #0]
 801de5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801de5c:	683b      	ldr	r3, [r7, #0]
 801de5e:	2212      	movs	r2, #18
 801de60:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801de62:	4b03      	ldr	r3, [pc, #12]	; (801de70 <USBD_FS_DeviceDescriptor+0x20>)
}
 801de64:	4618      	mov	r0, r3
 801de66:	370c      	adds	r7, #12
 801de68:	46bd      	mov	sp, r7
 801de6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de6e:	4770      	bx	lr
 801de70:	24000158 	.word	0x24000158

0801de74 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801de74:	b480      	push	{r7}
 801de76:	b083      	sub	sp, #12
 801de78:	af00      	add	r7, sp, #0
 801de7a:	4603      	mov	r3, r0
 801de7c:	6039      	str	r1, [r7, #0]
 801de7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801de80:	683b      	ldr	r3, [r7, #0]
 801de82:	2204      	movs	r2, #4
 801de84:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801de86:	4b03      	ldr	r3, [pc, #12]	; (801de94 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801de88:	4618      	mov	r0, r3
 801de8a:	370c      	adds	r7, #12
 801de8c:	46bd      	mov	sp, r7
 801de8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de92:	4770      	bx	lr
 801de94:	2400016c 	.word	0x2400016c

0801de98 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801de98:	b580      	push	{r7, lr}
 801de9a:	b082      	sub	sp, #8
 801de9c:	af00      	add	r7, sp, #0
 801de9e:	4603      	mov	r3, r0
 801dea0:	6039      	str	r1, [r7, #0]
 801dea2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801dea4:	79fb      	ldrb	r3, [r7, #7]
 801dea6:	2b00      	cmp	r3, #0
 801dea8:	d105      	bne.n	801deb6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801deaa:	683a      	ldr	r2, [r7, #0]
 801deac:	4907      	ldr	r1, [pc, #28]	; (801decc <USBD_FS_ProductStrDescriptor+0x34>)
 801deae:	4808      	ldr	r0, [pc, #32]	; (801ded0 <USBD_FS_ProductStrDescriptor+0x38>)
 801deb0:	f7ff fdd2 	bl	801da58 <USBD_GetString>
 801deb4:	e004      	b.n	801dec0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801deb6:	683a      	ldr	r2, [r7, #0]
 801deb8:	4904      	ldr	r1, [pc, #16]	; (801decc <USBD_FS_ProductStrDescriptor+0x34>)
 801deba:	4805      	ldr	r0, [pc, #20]	; (801ded0 <USBD_FS_ProductStrDescriptor+0x38>)
 801debc:	f7ff fdcc 	bl	801da58 <USBD_GetString>
  }
  return USBD_StrDesc;
 801dec0:	4b02      	ldr	r3, [pc, #8]	; (801decc <USBD_FS_ProductStrDescriptor+0x34>)
}
 801dec2:	4618      	mov	r0, r3
 801dec4:	3708      	adds	r7, #8
 801dec6:	46bd      	mov	sp, r7
 801dec8:	bd80      	pop	{r7, pc}
 801deca:	bf00      	nop
 801decc:	240019a4 	.word	0x240019a4
 801ded0:	0801f904 	.word	0x0801f904

0801ded4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ded4:	b580      	push	{r7, lr}
 801ded6:	b082      	sub	sp, #8
 801ded8:	af00      	add	r7, sp, #0
 801deda:	4603      	mov	r3, r0
 801dedc:	6039      	str	r1, [r7, #0]
 801dede:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801dee0:	683a      	ldr	r2, [r7, #0]
 801dee2:	4904      	ldr	r1, [pc, #16]	; (801def4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801dee4:	4804      	ldr	r0, [pc, #16]	; (801def8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801dee6:	f7ff fdb7 	bl	801da58 <USBD_GetString>
  return USBD_StrDesc;
 801deea:	4b02      	ldr	r3, [pc, #8]	; (801def4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801deec:	4618      	mov	r0, r3
 801deee:	3708      	adds	r7, #8
 801def0:	46bd      	mov	sp, r7
 801def2:	bd80      	pop	{r7, pc}
 801def4:	240019a4 	.word	0x240019a4
 801def8:	0801f91c 	.word	0x0801f91c

0801defc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801defc:	b580      	push	{r7, lr}
 801defe:	b082      	sub	sp, #8
 801df00:	af00      	add	r7, sp, #0
 801df02:	4603      	mov	r3, r0
 801df04:	6039      	str	r1, [r7, #0]
 801df06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801df08:	683b      	ldr	r3, [r7, #0]
 801df0a:	221a      	movs	r2, #26
 801df0c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801df0e:	f000 f843 	bl	801df98 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801df12:	4b02      	ldr	r3, [pc, #8]	; (801df1c <USBD_FS_SerialStrDescriptor+0x20>)
}
 801df14:	4618      	mov	r0, r3
 801df16:	3708      	adds	r7, #8
 801df18:	46bd      	mov	sp, r7
 801df1a:	bd80      	pop	{r7, pc}
 801df1c:	24000170 	.word	0x24000170

0801df20 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801df20:	b580      	push	{r7, lr}
 801df22:	b082      	sub	sp, #8
 801df24:	af00      	add	r7, sp, #0
 801df26:	4603      	mov	r3, r0
 801df28:	6039      	str	r1, [r7, #0]
 801df2a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801df2c:	79fb      	ldrb	r3, [r7, #7]
 801df2e:	2b00      	cmp	r3, #0
 801df30:	d105      	bne.n	801df3e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801df32:	683a      	ldr	r2, [r7, #0]
 801df34:	4907      	ldr	r1, [pc, #28]	; (801df54 <USBD_FS_ConfigStrDescriptor+0x34>)
 801df36:	4808      	ldr	r0, [pc, #32]	; (801df58 <USBD_FS_ConfigStrDescriptor+0x38>)
 801df38:	f7ff fd8e 	bl	801da58 <USBD_GetString>
 801df3c:	e004      	b.n	801df48 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801df3e:	683a      	ldr	r2, [r7, #0]
 801df40:	4904      	ldr	r1, [pc, #16]	; (801df54 <USBD_FS_ConfigStrDescriptor+0x34>)
 801df42:	4805      	ldr	r0, [pc, #20]	; (801df58 <USBD_FS_ConfigStrDescriptor+0x38>)
 801df44:	f7ff fd88 	bl	801da58 <USBD_GetString>
  }
  return USBD_StrDesc;
 801df48:	4b02      	ldr	r3, [pc, #8]	; (801df54 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801df4a:	4618      	mov	r0, r3
 801df4c:	3708      	adds	r7, #8
 801df4e:	46bd      	mov	sp, r7
 801df50:	bd80      	pop	{r7, pc}
 801df52:	bf00      	nop
 801df54:	240019a4 	.word	0x240019a4
 801df58:	0801f930 	.word	0x0801f930

0801df5c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801df5c:	b580      	push	{r7, lr}
 801df5e:	b082      	sub	sp, #8
 801df60:	af00      	add	r7, sp, #0
 801df62:	4603      	mov	r3, r0
 801df64:	6039      	str	r1, [r7, #0]
 801df66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801df68:	79fb      	ldrb	r3, [r7, #7]
 801df6a:	2b00      	cmp	r3, #0
 801df6c:	d105      	bne.n	801df7a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801df6e:	683a      	ldr	r2, [r7, #0]
 801df70:	4907      	ldr	r1, [pc, #28]	; (801df90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801df72:	4808      	ldr	r0, [pc, #32]	; (801df94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801df74:	f7ff fd70 	bl	801da58 <USBD_GetString>
 801df78:	e004      	b.n	801df84 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801df7a:	683a      	ldr	r2, [r7, #0]
 801df7c:	4904      	ldr	r1, [pc, #16]	; (801df90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801df7e:	4805      	ldr	r0, [pc, #20]	; (801df94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801df80:	f7ff fd6a 	bl	801da58 <USBD_GetString>
  }
  return USBD_StrDesc;
 801df84:	4b02      	ldr	r3, [pc, #8]	; (801df90 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801df86:	4618      	mov	r0, r3
 801df88:	3708      	adds	r7, #8
 801df8a:	46bd      	mov	sp, r7
 801df8c:	bd80      	pop	{r7, pc}
 801df8e:	bf00      	nop
 801df90:	240019a4 	.word	0x240019a4
 801df94:	0801f93c 	.word	0x0801f93c

0801df98 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 801df98:	b580      	push	{r7, lr}
 801df9a:	b084      	sub	sp, #16
 801df9c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801df9e:	4b0f      	ldr	r3, [pc, #60]	; (801dfdc <Get_SerialNum+0x44>)
 801dfa0:	681b      	ldr	r3, [r3, #0]
 801dfa2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801dfa4:	4b0e      	ldr	r3, [pc, #56]	; (801dfe0 <Get_SerialNum+0x48>)
 801dfa6:	681b      	ldr	r3, [r3, #0]
 801dfa8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801dfaa:	4b0e      	ldr	r3, [pc, #56]	; (801dfe4 <Get_SerialNum+0x4c>)
 801dfac:	681b      	ldr	r3, [r3, #0]
 801dfae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801dfb0:	68fa      	ldr	r2, [r7, #12]
 801dfb2:	687b      	ldr	r3, [r7, #4]
 801dfb4:	4413      	add	r3, r2
 801dfb6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801dfb8:	68fb      	ldr	r3, [r7, #12]
 801dfba:	2b00      	cmp	r3, #0
 801dfbc:	d009      	beq.n	801dfd2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801dfbe:	2208      	movs	r2, #8
 801dfc0:	4909      	ldr	r1, [pc, #36]	; (801dfe8 <Get_SerialNum+0x50>)
 801dfc2:	68f8      	ldr	r0, [r7, #12]
 801dfc4:	f000 f814 	bl	801dff0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801dfc8:	2204      	movs	r2, #4
 801dfca:	4908      	ldr	r1, [pc, #32]	; (801dfec <Get_SerialNum+0x54>)
 801dfcc:	68b8      	ldr	r0, [r7, #8]
 801dfce:	f000 f80f 	bl	801dff0 <IntToUnicode>
  }
}
 801dfd2:	bf00      	nop
 801dfd4:	3710      	adds	r7, #16
 801dfd6:	46bd      	mov	sp, r7
 801dfd8:	bd80      	pop	{r7, pc}
 801dfda:	bf00      	nop
 801dfdc:	1ff1e800 	.word	0x1ff1e800
 801dfe0:	1ff1e804 	.word	0x1ff1e804
 801dfe4:	1ff1e808 	.word	0x1ff1e808
 801dfe8:	24000172 	.word	0x24000172
 801dfec:	24000182 	.word	0x24000182

0801dff0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801dff0:	b480      	push	{r7}
 801dff2:	b087      	sub	sp, #28
 801dff4:	af00      	add	r7, sp, #0
 801dff6:	60f8      	str	r0, [r7, #12]
 801dff8:	60b9      	str	r1, [r7, #8]
 801dffa:	4613      	mov	r3, r2
 801dffc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801dffe:	2300      	movs	r3, #0
 801e000:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801e002:	2300      	movs	r3, #0
 801e004:	75fb      	strb	r3, [r7, #23]
 801e006:	e027      	b.n	801e058 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801e008:	68fb      	ldr	r3, [r7, #12]
 801e00a:	0f1b      	lsrs	r3, r3, #28
 801e00c:	2b09      	cmp	r3, #9
 801e00e:	d80b      	bhi.n	801e028 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801e010:	68fb      	ldr	r3, [r7, #12]
 801e012:	0f1b      	lsrs	r3, r3, #28
 801e014:	b2da      	uxtb	r2, r3
 801e016:	7dfb      	ldrb	r3, [r7, #23]
 801e018:	005b      	lsls	r3, r3, #1
 801e01a:	4619      	mov	r1, r3
 801e01c:	68bb      	ldr	r3, [r7, #8]
 801e01e:	440b      	add	r3, r1
 801e020:	3230      	adds	r2, #48	; 0x30
 801e022:	b2d2      	uxtb	r2, r2
 801e024:	701a      	strb	r2, [r3, #0]
 801e026:	e00a      	b.n	801e03e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801e028:	68fb      	ldr	r3, [r7, #12]
 801e02a:	0f1b      	lsrs	r3, r3, #28
 801e02c:	b2da      	uxtb	r2, r3
 801e02e:	7dfb      	ldrb	r3, [r7, #23]
 801e030:	005b      	lsls	r3, r3, #1
 801e032:	4619      	mov	r1, r3
 801e034:	68bb      	ldr	r3, [r7, #8]
 801e036:	440b      	add	r3, r1
 801e038:	3237      	adds	r2, #55	; 0x37
 801e03a:	b2d2      	uxtb	r2, r2
 801e03c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801e03e:	68fb      	ldr	r3, [r7, #12]
 801e040:	011b      	lsls	r3, r3, #4
 801e042:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801e044:	7dfb      	ldrb	r3, [r7, #23]
 801e046:	005b      	lsls	r3, r3, #1
 801e048:	3301      	adds	r3, #1
 801e04a:	68ba      	ldr	r2, [r7, #8]
 801e04c:	4413      	add	r3, r2
 801e04e:	2200      	movs	r2, #0
 801e050:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801e052:	7dfb      	ldrb	r3, [r7, #23]
 801e054:	3301      	adds	r3, #1
 801e056:	75fb      	strb	r3, [r7, #23]
 801e058:	7dfa      	ldrb	r2, [r7, #23]
 801e05a:	79fb      	ldrb	r3, [r7, #7]
 801e05c:	429a      	cmp	r2, r3
 801e05e:	d3d3      	bcc.n	801e008 <IntToUnicode+0x18>
  }
}
 801e060:	bf00      	nop
 801e062:	371c      	adds	r7, #28
 801e064:	46bd      	mov	sp, r7
 801e066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e06a:	4770      	bx	lr

0801e06c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801e06c:	b580      	push	{r7, lr}
 801e06e:	b08a      	sub	sp, #40	; 0x28
 801e070:	af00      	add	r7, sp, #0
 801e072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801e074:	f107 0314 	add.w	r3, r7, #20
 801e078:	2200      	movs	r2, #0
 801e07a:	601a      	str	r2, [r3, #0]
 801e07c:	605a      	str	r2, [r3, #4]
 801e07e:	609a      	str	r2, [r3, #8]
 801e080:	60da      	str	r2, [r3, #12]
 801e082:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801e084:	687b      	ldr	r3, [r7, #4]
 801e086:	681b      	ldr	r3, [r3, #0]
 801e088:	4a1e      	ldr	r2, [pc, #120]	; (801e104 <HAL_PCD_MspInit+0x98>)
 801e08a:	4293      	cmp	r3, r2
 801e08c:	d136      	bne.n	801e0fc <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801e08e:	4b1e      	ldr	r3, [pc, #120]	; (801e108 <HAL_PCD_MspInit+0x9c>)
 801e090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801e094:	4a1c      	ldr	r2, [pc, #112]	; (801e108 <HAL_PCD_MspInit+0x9c>)
 801e096:	f043 0301 	orr.w	r3, r3, #1
 801e09a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801e09e:	4b1a      	ldr	r3, [pc, #104]	; (801e108 <HAL_PCD_MspInit+0x9c>)
 801e0a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801e0a4:	f003 0301 	and.w	r3, r3, #1
 801e0a8:	613b      	str	r3, [r7, #16]
 801e0aa:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 801e0ac:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 801e0b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801e0b2:	2302      	movs	r3, #2
 801e0b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e0b6:	2300      	movs	r3, #0
 801e0b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801e0ba:	2300      	movs	r3, #0
 801e0bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801e0be:	230a      	movs	r3, #10
 801e0c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801e0c2:	f107 0314 	add.w	r3, r7, #20
 801e0c6:	4619      	mov	r1, r3
 801e0c8:	4810      	ldr	r0, [pc, #64]	; (801e10c <HAL_PCD_MspInit+0xa0>)
 801e0ca:	f7f5 fa85 	bl	80135d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801e0ce:	4b0e      	ldr	r3, [pc, #56]	; (801e108 <HAL_PCD_MspInit+0x9c>)
 801e0d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801e0d4:	4a0c      	ldr	r2, [pc, #48]	; (801e108 <HAL_PCD_MspInit+0x9c>)
 801e0d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801e0da:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801e0de:	4b0a      	ldr	r3, [pc, #40]	; (801e108 <HAL_PCD_MspInit+0x9c>)
 801e0e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801e0e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801e0e8:	60fb      	str	r3, [r7, #12]
 801e0ea:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801e0ec:	2200      	movs	r2, #0
 801e0ee:	2100      	movs	r1, #0
 801e0f0:	2065      	movs	r0, #101	; 0x65
 801e0f2:	f7f4 fff8 	bl	80130e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801e0f6:	2065      	movs	r0, #101	; 0x65
 801e0f8:	f7f5 f80f 	bl	801311a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801e0fc:	bf00      	nop
 801e0fe:	3728      	adds	r7, #40	; 0x28
 801e100:	46bd      	mov	sp, r7
 801e102:	bd80      	pop	{r7, pc}
 801e104:	40080000 	.word	0x40080000
 801e108:	58024400 	.word	0x58024400
 801e10c:	58020000 	.word	0x58020000

0801e110 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e110:	b580      	push	{r7, lr}
 801e112:	b082      	sub	sp, #8
 801e114:	af00      	add	r7, sp, #0
 801e116:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801e118:	687b      	ldr	r3, [r7, #4]
 801e11a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801e11e:	687b      	ldr	r3, [r7, #4]
 801e120:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801e124:	4619      	mov	r1, r3
 801e126:	4610      	mov	r0, r2
 801e128:	f7fe fd32 	bl	801cb90 <USBD_LL_SetupStage>
}
 801e12c:	bf00      	nop
 801e12e:	3708      	adds	r7, #8
 801e130:	46bd      	mov	sp, r7
 801e132:	bd80      	pop	{r7, pc}

0801e134 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e134:	b580      	push	{r7, lr}
 801e136:	b082      	sub	sp, #8
 801e138:	af00      	add	r7, sp, #0
 801e13a:	6078      	str	r0, [r7, #4]
 801e13c:	460b      	mov	r3, r1
 801e13e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801e140:	687b      	ldr	r3, [r7, #4]
 801e142:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801e146:	78fa      	ldrb	r2, [r7, #3]
 801e148:	6879      	ldr	r1, [r7, #4]
 801e14a:	4613      	mov	r3, r2
 801e14c:	00db      	lsls	r3, r3, #3
 801e14e:	1a9b      	subs	r3, r3, r2
 801e150:	009b      	lsls	r3, r3, #2
 801e152:	440b      	add	r3, r1
 801e154:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801e158:	681a      	ldr	r2, [r3, #0]
 801e15a:	78fb      	ldrb	r3, [r7, #3]
 801e15c:	4619      	mov	r1, r3
 801e15e:	f7fe fd62 	bl	801cc26 <USBD_LL_DataOutStage>
}
 801e162:	bf00      	nop
 801e164:	3708      	adds	r7, #8
 801e166:	46bd      	mov	sp, r7
 801e168:	bd80      	pop	{r7, pc}

0801e16a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e16a:	b580      	push	{r7, lr}
 801e16c:	b082      	sub	sp, #8
 801e16e:	af00      	add	r7, sp, #0
 801e170:	6078      	str	r0, [r7, #4]
 801e172:	460b      	mov	r3, r1
 801e174:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801e176:	687b      	ldr	r3, [r7, #4]
 801e178:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801e17c:	78fa      	ldrb	r2, [r7, #3]
 801e17e:	6879      	ldr	r1, [r7, #4]
 801e180:	4613      	mov	r3, r2
 801e182:	00db      	lsls	r3, r3, #3
 801e184:	1a9b      	subs	r3, r3, r2
 801e186:	009b      	lsls	r3, r3, #2
 801e188:	440b      	add	r3, r1
 801e18a:	3348      	adds	r3, #72	; 0x48
 801e18c:	681a      	ldr	r2, [r3, #0]
 801e18e:	78fb      	ldrb	r3, [r7, #3]
 801e190:	4619      	mov	r1, r3
 801e192:	f7fe fdb9 	bl	801cd08 <USBD_LL_DataInStage>
}
 801e196:	bf00      	nop
 801e198:	3708      	adds	r7, #8
 801e19a:	46bd      	mov	sp, r7
 801e19c:	bd80      	pop	{r7, pc}

0801e19e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e19e:	b580      	push	{r7, lr}
 801e1a0:	b082      	sub	sp, #8
 801e1a2:	af00      	add	r7, sp, #0
 801e1a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801e1a6:	687b      	ldr	r3, [r7, #4]
 801e1a8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801e1ac:	4618      	mov	r0, r3
 801e1ae:	f7fe fecc 	bl	801cf4a <USBD_LL_SOF>
}
 801e1b2:	bf00      	nop
 801e1b4:	3708      	adds	r7, #8
 801e1b6:	46bd      	mov	sp, r7
 801e1b8:	bd80      	pop	{r7, pc}

0801e1ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 801e1ba:	b580      	push	{r7, lr}
 801e1bc:	b084      	sub	sp, #16
 801e1be:	af00      	add	r7, sp, #0
 801e1c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801e1c2:	2301      	movs	r3, #1
 801e1c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801e1c6:	687b      	ldr	r3, [r7, #4]
 801e1c8:	68db      	ldr	r3, [r3, #12]
 801e1ca:	2b00      	cmp	r3, #0
 801e1cc:	d102      	bne.n	801e1d4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801e1ce:	2300      	movs	r3, #0
 801e1d0:	73fb      	strb	r3, [r7, #15]
 801e1d2:	e008      	b.n	801e1e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801e1d4:	687b      	ldr	r3, [r7, #4]
 801e1d6:	68db      	ldr	r3, [r3, #12]
 801e1d8:	2b02      	cmp	r3, #2
 801e1da:	d102      	bne.n	801e1e2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801e1dc:	2301      	movs	r3, #1
 801e1de:	73fb      	strb	r3, [r7, #15]
 801e1e0:	e001      	b.n	801e1e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801e1e2:	f7e4 f88f 	bl	8002304 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801e1e6:	687b      	ldr	r3, [r7, #4]
 801e1e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801e1ec:	7bfa      	ldrb	r2, [r7, #15]
 801e1ee:	4611      	mov	r1, r2
 801e1f0:	4618      	mov	r0, r3
 801e1f2:	f7fe fe6f 	bl	801ced4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801e1f6:	687b      	ldr	r3, [r7, #4]
 801e1f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801e1fc:	4618      	mov	r0, r3
 801e1fe:	f7fe fe28 	bl	801ce52 <USBD_LL_Reset>
}
 801e202:	bf00      	nop
 801e204:	3710      	adds	r7, #16
 801e206:	46bd      	mov	sp, r7
 801e208:	bd80      	pop	{r7, pc}
	...

0801e20c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e20c:	b580      	push	{r7, lr}
 801e20e:	b082      	sub	sp, #8
 801e210:	af00      	add	r7, sp, #0
 801e212:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801e214:	687b      	ldr	r3, [r7, #4]
 801e216:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801e21a:	4618      	mov	r0, r3
 801e21c:	f7fe fe6a 	bl	801cef4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801e220:	687b      	ldr	r3, [r7, #4]
 801e222:	681b      	ldr	r3, [r3, #0]
 801e224:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801e228:	681b      	ldr	r3, [r3, #0]
 801e22a:	687a      	ldr	r2, [r7, #4]
 801e22c:	6812      	ldr	r2, [r2, #0]
 801e22e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801e232:	f043 0301 	orr.w	r3, r3, #1
 801e236:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801e238:	687b      	ldr	r3, [r7, #4]
 801e23a:	6a1b      	ldr	r3, [r3, #32]
 801e23c:	2b00      	cmp	r3, #0
 801e23e:	d005      	beq.n	801e24c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801e240:	4b04      	ldr	r3, [pc, #16]	; (801e254 <HAL_PCD_SuspendCallback+0x48>)
 801e242:	691b      	ldr	r3, [r3, #16]
 801e244:	4a03      	ldr	r2, [pc, #12]	; (801e254 <HAL_PCD_SuspendCallback+0x48>)
 801e246:	f043 0306 	orr.w	r3, r3, #6
 801e24a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801e24c:	bf00      	nop
 801e24e:	3708      	adds	r7, #8
 801e250:	46bd      	mov	sp, r7
 801e252:	bd80      	pop	{r7, pc}
 801e254:	e000ed00 	.word	0xe000ed00

0801e258 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e258:	b580      	push	{r7, lr}
 801e25a:	b082      	sub	sp, #8
 801e25c:	af00      	add	r7, sp, #0
 801e25e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801e260:	687b      	ldr	r3, [r7, #4]
 801e262:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801e266:	4618      	mov	r0, r3
 801e268:	f7fe fe59 	bl	801cf1e <USBD_LL_Resume>
}
 801e26c:	bf00      	nop
 801e26e:	3708      	adds	r7, #8
 801e270:	46bd      	mov	sp, r7
 801e272:	bd80      	pop	{r7, pc}

0801e274 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e274:	b580      	push	{r7, lr}
 801e276:	b082      	sub	sp, #8
 801e278:	af00      	add	r7, sp, #0
 801e27a:	6078      	str	r0, [r7, #4]
 801e27c:	460b      	mov	r3, r1
 801e27e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801e280:	687b      	ldr	r3, [r7, #4]
 801e282:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801e286:	78fa      	ldrb	r2, [r7, #3]
 801e288:	4611      	mov	r1, r2
 801e28a:	4618      	mov	r0, r3
 801e28c:	f7fe fe84 	bl	801cf98 <USBD_LL_IsoOUTIncomplete>
}
 801e290:	bf00      	nop
 801e292:	3708      	adds	r7, #8
 801e294:	46bd      	mov	sp, r7
 801e296:	bd80      	pop	{r7, pc}

0801e298 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e298:	b580      	push	{r7, lr}
 801e29a:	b082      	sub	sp, #8
 801e29c:	af00      	add	r7, sp, #0
 801e29e:	6078      	str	r0, [r7, #4]
 801e2a0:	460b      	mov	r3, r1
 801e2a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801e2a4:	687b      	ldr	r3, [r7, #4]
 801e2a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801e2aa:	78fa      	ldrb	r2, [r7, #3]
 801e2ac:	4611      	mov	r1, r2
 801e2ae:	4618      	mov	r0, r3
 801e2b0:	f7fe fe65 	bl	801cf7e <USBD_LL_IsoINIncomplete>
}
 801e2b4:	bf00      	nop
 801e2b6:	3708      	adds	r7, #8
 801e2b8:	46bd      	mov	sp, r7
 801e2ba:	bd80      	pop	{r7, pc}

0801e2bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e2bc:	b580      	push	{r7, lr}
 801e2be:	b082      	sub	sp, #8
 801e2c0:	af00      	add	r7, sp, #0
 801e2c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801e2c4:	687b      	ldr	r3, [r7, #4]
 801e2c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801e2ca:	4618      	mov	r0, r3
 801e2cc:	f7fe fe71 	bl	801cfb2 <USBD_LL_DevConnected>
}
 801e2d0:	bf00      	nop
 801e2d2:	3708      	adds	r7, #8
 801e2d4:	46bd      	mov	sp, r7
 801e2d6:	bd80      	pop	{r7, pc}

0801e2d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e2d8:	b580      	push	{r7, lr}
 801e2da:	b082      	sub	sp, #8
 801e2dc:	af00      	add	r7, sp, #0
 801e2de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801e2e0:	687b      	ldr	r3, [r7, #4]
 801e2e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801e2e6:	4618      	mov	r0, r3
 801e2e8:	f7fe fe6e 	bl	801cfc8 <USBD_LL_DevDisconnected>
}
 801e2ec:	bf00      	nop
 801e2ee:	3708      	adds	r7, #8
 801e2f0:	46bd      	mov	sp, r7
 801e2f2:	bd80      	pop	{r7, pc}

0801e2f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801e2f4:	b580      	push	{r7, lr}
 801e2f6:	b082      	sub	sp, #8
 801e2f8:	af00      	add	r7, sp, #0
 801e2fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801e2fc:	687b      	ldr	r3, [r7, #4]
 801e2fe:	781b      	ldrb	r3, [r3, #0]
 801e300:	2b00      	cmp	r3, #0
 801e302:	d13e      	bne.n	801e382 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801e304:	4a21      	ldr	r2, [pc, #132]	; (801e38c <USBD_LL_Init+0x98>)
 801e306:	687b      	ldr	r3, [r7, #4]
 801e308:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801e30c:	687b      	ldr	r3, [r7, #4]
 801e30e:	4a1f      	ldr	r2, [pc, #124]	; (801e38c <USBD_LL_Init+0x98>)
 801e310:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801e314:	4b1d      	ldr	r3, [pc, #116]	; (801e38c <USBD_LL_Init+0x98>)
 801e316:	4a1e      	ldr	r2, [pc, #120]	; (801e390 <USBD_LL_Init+0x9c>)
 801e318:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801e31a:	4b1c      	ldr	r3, [pc, #112]	; (801e38c <USBD_LL_Init+0x98>)
 801e31c:	2209      	movs	r2, #9
 801e31e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801e320:	4b1a      	ldr	r3, [pc, #104]	; (801e38c <USBD_LL_Init+0x98>)
 801e322:	2202      	movs	r2, #2
 801e324:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801e326:	4b19      	ldr	r3, [pc, #100]	; (801e38c <USBD_LL_Init+0x98>)
 801e328:	2200      	movs	r2, #0
 801e32a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801e32c:	4b17      	ldr	r3, [pc, #92]	; (801e38c <USBD_LL_Init+0x98>)
 801e32e:	2202      	movs	r2, #2
 801e330:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 801e332:	4b16      	ldr	r3, [pc, #88]	; (801e38c <USBD_LL_Init+0x98>)
 801e334:	2201      	movs	r2, #1
 801e336:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801e338:	4b14      	ldr	r3, [pc, #80]	; (801e38c <USBD_LL_Init+0x98>)
 801e33a:	2200      	movs	r2, #0
 801e33c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801e33e:	4b13      	ldr	r3, [pc, #76]	; (801e38c <USBD_LL_Init+0x98>)
 801e340:	2200      	movs	r2, #0
 801e342:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801e344:	4b11      	ldr	r3, [pc, #68]	; (801e38c <USBD_LL_Init+0x98>)
 801e346:	2200      	movs	r2, #0
 801e348:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801e34a:	4b10      	ldr	r3, [pc, #64]	; (801e38c <USBD_LL_Init+0x98>)
 801e34c:	2200      	movs	r2, #0
 801e34e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801e350:	4b0e      	ldr	r3, [pc, #56]	; (801e38c <USBD_LL_Init+0x98>)
 801e352:	2200      	movs	r2, #0
 801e354:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801e356:	480d      	ldr	r0, [pc, #52]	; (801e38c <USBD_LL_Init+0x98>)
 801e358:	f7f5 fb39 	bl	80139ce <HAL_PCD_Init>
 801e35c:	4603      	mov	r3, r0
 801e35e:	2b00      	cmp	r3, #0
 801e360:	d001      	beq.n	801e366 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801e362:	f7e3 ffcf 	bl	8002304 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801e366:	2180      	movs	r1, #128	; 0x80
 801e368:	4808      	ldr	r0, [pc, #32]	; (801e38c <USBD_LL_Init+0x98>)
 801e36a:	f7f6 fcca 	bl	8014d02 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801e36e:	2240      	movs	r2, #64	; 0x40
 801e370:	2100      	movs	r1, #0
 801e372:	4806      	ldr	r0, [pc, #24]	; (801e38c <USBD_LL_Init+0x98>)
 801e374:	f7f6 fc7e 	bl	8014c74 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801e378:	2280      	movs	r2, #128	; 0x80
 801e37a:	2101      	movs	r1, #1
 801e37c:	4803      	ldr	r0, [pc, #12]	; (801e38c <USBD_LL_Init+0x98>)
 801e37e:	f7f6 fc79 	bl	8014c74 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801e382:	2300      	movs	r3, #0
}
 801e384:	4618      	mov	r0, r3
 801e386:	3708      	adds	r7, #8
 801e388:	46bd      	mov	sp, r7
 801e38a:	bd80      	pop	{r7, pc}
 801e38c:	24001ba4 	.word	0x24001ba4
 801e390:	40080000 	.word	0x40080000

0801e394 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801e394:	b580      	push	{r7, lr}
 801e396:	b084      	sub	sp, #16
 801e398:	af00      	add	r7, sp, #0
 801e39a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e39c:	2300      	movs	r3, #0
 801e39e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e3a0:	2300      	movs	r3, #0
 801e3a2:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 801e3a4:	687b      	ldr	r3, [r7, #4]
 801e3a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801e3aa:	4618      	mov	r0, r3
 801e3ac:	f7f5 fc33 	bl	8013c16 <HAL_PCD_Start>
 801e3b0:	4603      	mov	r3, r0
 801e3b2:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 801e3b4:	7bfb      	ldrb	r3, [r7, #15]
 801e3b6:	4618      	mov	r0, r3
 801e3b8:	f000 f92e 	bl	801e618 <USBD_Get_USB_Status>
 801e3bc:	4603      	mov	r3, r0
 801e3be:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801e3c0:	7bbb      	ldrb	r3, [r7, #14]
}
 801e3c2:	4618      	mov	r0, r3
 801e3c4:	3710      	adds	r7, #16
 801e3c6:	46bd      	mov	sp, r7
 801e3c8:	bd80      	pop	{r7, pc}

0801e3ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801e3ca:	b580      	push	{r7, lr}
 801e3cc:	b084      	sub	sp, #16
 801e3ce:	af00      	add	r7, sp, #0
 801e3d0:	6078      	str	r0, [r7, #4]
 801e3d2:	4608      	mov	r0, r1
 801e3d4:	4611      	mov	r1, r2
 801e3d6:	461a      	mov	r2, r3
 801e3d8:	4603      	mov	r3, r0
 801e3da:	70fb      	strb	r3, [r7, #3]
 801e3dc:	460b      	mov	r3, r1
 801e3de:	70bb      	strb	r3, [r7, #2]
 801e3e0:	4613      	mov	r3, r2
 801e3e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e3e4:	2300      	movs	r3, #0
 801e3e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e3e8:	2300      	movs	r3, #0
 801e3ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801e3ec:	687b      	ldr	r3, [r7, #4]
 801e3ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801e3f2:	78bb      	ldrb	r3, [r7, #2]
 801e3f4:	883a      	ldrh	r2, [r7, #0]
 801e3f6:	78f9      	ldrb	r1, [r7, #3]
 801e3f8:	f7f6 f844 	bl	8014484 <HAL_PCD_EP_Open>
 801e3fc:	4603      	mov	r3, r0
 801e3fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e400:	7bfb      	ldrb	r3, [r7, #15]
 801e402:	4618      	mov	r0, r3
 801e404:	f000 f908 	bl	801e618 <USBD_Get_USB_Status>
 801e408:	4603      	mov	r3, r0
 801e40a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801e40c:	7bbb      	ldrb	r3, [r7, #14]
}
 801e40e:	4618      	mov	r0, r3
 801e410:	3710      	adds	r7, #16
 801e412:	46bd      	mov	sp, r7
 801e414:	bd80      	pop	{r7, pc}

0801e416 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e416:	b580      	push	{r7, lr}
 801e418:	b084      	sub	sp, #16
 801e41a:	af00      	add	r7, sp, #0
 801e41c:	6078      	str	r0, [r7, #4]
 801e41e:	460b      	mov	r3, r1
 801e420:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e422:	2300      	movs	r3, #0
 801e424:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e426:	2300      	movs	r3, #0
 801e428:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801e42a:	687b      	ldr	r3, [r7, #4]
 801e42c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801e430:	78fa      	ldrb	r2, [r7, #3]
 801e432:	4611      	mov	r1, r2
 801e434:	4618      	mov	r0, r3
 801e436:	f7f6 f88d 	bl	8014554 <HAL_PCD_EP_Close>
 801e43a:	4603      	mov	r3, r0
 801e43c:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 801e43e:	7bfb      	ldrb	r3, [r7, #15]
 801e440:	4618      	mov	r0, r3
 801e442:	f000 f8e9 	bl	801e618 <USBD_Get_USB_Status>
 801e446:	4603      	mov	r3, r0
 801e448:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 801e44a:	7bbb      	ldrb	r3, [r7, #14]
}
 801e44c:	4618      	mov	r0, r3
 801e44e:	3710      	adds	r7, #16
 801e450:	46bd      	mov	sp, r7
 801e452:	bd80      	pop	{r7, pc}

0801e454 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e454:	b580      	push	{r7, lr}
 801e456:	b084      	sub	sp, #16
 801e458:	af00      	add	r7, sp, #0
 801e45a:	6078      	str	r0, [r7, #4]
 801e45c:	460b      	mov	r3, r1
 801e45e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e460:	2300      	movs	r3, #0
 801e462:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e464:	2300      	movs	r3, #0
 801e466:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801e468:	687b      	ldr	r3, [r7, #4]
 801e46a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801e46e:	78fa      	ldrb	r2, [r7, #3]
 801e470:	4611      	mov	r1, r2
 801e472:	4618      	mov	r0, r3
 801e474:	f7f6 f965 	bl	8014742 <HAL_PCD_EP_SetStall>
 801e478:	4603      	mov	r3, r0
 801e47a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e47c:	7bfb      	ldrb	r3, [r7, #15]
 801e47e:	4618      	mov	r0, r3
 801e480:	f000 f8ca 	bl	801e618 <USBD_Get_USB_Status>
 801e484:	4603      	mov	r3, r0
 801e486:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 801e488:	7bbb      	ldrb	r3, [r7, #14]
}
 801e48a:	4618      	mov	r0, r3
 801e48c:	3710      	adds	r7, #16
 801e48e:	46bd      	mov	sp, r7
 801e490:	bd80      	pop	{r7, pc}

0801e492 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e492:	b580      	push	{r7, lr}
 801e494:	b084      	sub	sp, #16
 801e496:	af00      	add	r7, sp, #0
 801e498:	6078      	str	r0, [r7, #4]
 801e49a:	460b      	mov	r3, r1
 801e49c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e49e:	2300      	movs	r3, #0
 801e4a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e4a2:	2300      	movs	r3, #0
 801e4a4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801e4a6:	687b      	ldr	r3, [r7, #4]
 801e4a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801e4ac:	78fa      	ldrb	r2, [r7, #3]
 801e4ae:	4611      	mov	r1, r2
 801e4b0:	4618      	mov	r0, r3
 801e4b2:	f7f6 f9aa 	bl	801480a <HAL_PCD_EP_ClrStall>
 801e4b6:	4603      	mov	r3, r0
 801e4b8:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 801e4ba:	7bfb      	ldrb	r3, [r7, #15]
 801e4bc:	4618      	mov	r0, r3
 801e4be:	f000 f8ab 	bl	801e618 <USBD_Get_USB_Status>
 801e4c2:	4603      	mov	r3, r0
 801e4c4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 801e4c6:	7bbb      	ldrb	r3, [r7, #14]
}
 801e4c8:	4618      	mov	r0, r3
 801e4ca:	3710      	adds	r7, #16
 801e4cc:	46bd      	mov	sp, r7
 801e4ce:	bd80      	pop	{r7, pc}

0801e4d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e4d0:	b480      	push	{r7}
 801e4d2:	b085      	sub	sp, #20
 801e4d4:	af00      	add	r7, sp, #0
 801e4d6:	6078      	str	r0, [r7, #4]
 801e4d8:	460b      	mov	r3, r1
 801e4da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801e4dc:	687b      	ldr	r3, [r7, #4]
 801e4de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801e4e2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 801e4e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e4e8:	2b00      	cmp	r3, #0
 801e4ea:	da0b      	bge.n	801e504 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 801e4ec:	78fb      	ldrb	r3, [r7, #3]
 801e4ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801e4f2:	68f9      	ldr	r1, [r7, #12]
 801e4f4:	4613      	mov	r3, r2
 801e4f6:	00db      	lsls	r3, r3, #3
 801e4f8:	1a9b      	subs	r3, r3, r2
 801e4fa:	009b      	lsls	r3, r3, #2
 801e4fc:	440b      	add	r3, r1
 801e4fe:	333e      	adds	r3, #62	; 0x3e
 801e500:	781b      	ldrb	r3, [r3, #0]
 801e502:	e00b      	b.n	801e51c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 801e504:	78fb      	ldrb	r3, [r7, #3]
 801e506:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801e50a:	68f9      	ldr	r1, [r7, #12]
 801e50c:	4613      	mov	r3, r2
 801e50e:	00db      	lsls	r3, r3, #3
 801e510:	1a9b      	subs	r3, r3, r2
 801e512:	009b      	lsls	r3, r3, #2
 801e514:	440b      	add	r3, r1
 801e516:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801e51a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801e51c:	4618      	mov	r0, r3
 801e51e:	3714      	adds	r7, #20
 801e520:	46bd      	mov	sp, r7
 801e522:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e526:	4770      	bx	lr

0801e528 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801e528:	b580      	push	{r7, lr}
 801e52a:	b084      	sub	sp, #16
 801e52c:	af00      	add	r7, sp, #0
 801e52e:	6078      	str	r0, [r7, #4]
 801e530:	460b      	mov	r3, r1
 801e532:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e534:	2300      	movs	r3, #0
 801e536:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e538:	2300      	movs	r3, #0
 801e53a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801e53c:	687b      	ldr	r3, [r7, #4]
 801e53e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801e542:	78fa      	ldrb	r2, [r7, #3]
 801e544:	4611      	mov	r1, r2
 801e546:	4618      	mov	r0, r3
 801e548:	f7f5 ff77 	bl	801443a <HAL_PCD_SetAddress>
 801e54c:	4603      	mov	r3, r0
 801e54e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 801e550:	7bfb      	ldrb	r3, [r7, #15]
 801e552:	4618      	mov	r0, r3
 801e554:	f000 f860 	bl	801e618 <USBD_Get_USB_Status>
 801e558:	4603      	mov	r3, r0
 801e55a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 801e55c:	7bbb      	ldrb	r3, [r7, #14]
}
 801e55e:	4618      	mov	r0, r3
 801e560:	3710      	adds	r7, #16
 801e562:	46bd      	mov	sp, r7
 801e564:	bd80      	pop	{r7, pc}

0801e566 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801e566:	b580      	push	{r7, lr}
 801e568:	b086      	sub	sp, #24
 801e56a:	af00      	add	r7, sp, #0
 801e56c:	60f8      	str	r0, [r7, #12]
 801e56e:	607a      	str	r2, [r7, #4]
 801e570:	461a      	mov	r2, r3
 801e572:	460b      	mov	r3, r1
 801e574:	72fb      	strb	r3, [r7, #11]
 801e576:	4613      	mov	r3, r2
 801e578:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e57a:	2300      	movs	r3, #0
 801e57c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e57e:	2300      	movs	r3, #0
 801e580:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801e582:	68fb      	ldr	r3, [r7, #12]
 801e584:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801e588:	893b      	ldrh	r3, [r7, #8]
 801e58a:	7af9      	ldrb	r1, [r7, #11]
 801e58c:	687a      	ldr	r2, [r7, #4]
 801e58e:	f7f6 f88e 	bl	80146ae <HAL_PCD_EP_Transmit>
 801e592:	4603      	mov	r3, r0
 801e594:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 801e596:	7dfb      	ldrb	r3, [r7, #23]
 801e598:	4618      	mov	r0, r3
 801e59a:	f000 f83d 	bl	801e618 <USBD_Get_USB_Status>
 801e59e:	4603      	mov	r3, r0
 801e5a0:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 801e5a2:	7dbb      	ldrb	r3, [r7, #22]
}
 801e5a4:	4618      	mov	r0, r3
 801e5a6:	3718      	adds	r7, #24
 801e5a8:	46bd      	mov	sp, r7
 801e5aa:	bd80      	pop	{r7, pc}

0801e5ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801e5ac:	b580      	push	{r7, lr}
 801e5ae:	b086      	sub	sp, #24
 801e5b0:	af00      	add	r7, sp, #0
 801e5b2:	60f8      	str	r0, [r7, #12]
 801e5b4:	607a      	str	r2, [r7, #4]
 801e5b6:	461a      	mov	r2, r3
 801e5b8:	460b      	mov	r3, r1
 801e5ba:	72fb      	strb	r3, [r7, #11]
 801e5bc:	4613      	mov	r3, r2
 801e5be:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e5c0:	2300      	movs	r3, #0
 801e5c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e5c4:	2300      	movs	r3, #0
 801e5c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801e5c8:	68fb      	ldr	r3, [r7, #12]
 801e5ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801e5ce:	893b      	ldrh	r3, [r7, #8]
 801e5d0:	7af9      	ldrb	r1, [r7, #11]
 801e5d2:	687a      	ldr	r2, [r7, #4]
 801e5d4:	f7f6 f808 	bl	80145e8 <HAL_PCD_EP_Receive>
 801e5d8:	4603      	mov	r3, r0
 801e5da:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 801e5dc:	7dfb      	ldrb	r3, [r7, #23]
 801e5de:	4618      	mov	r0, r3
 801e5e0:	f000 f81a 	bl	801e618 <USBD_Get_USB_Status>
 801e5e4:	4603      	mov	r3, r0
 801e5e6:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 801e5e8:	7dbb      	ldrb	r3, [r7, #22]
}
 801e5ea:	4618      	mov	r0, r3
 801e5ec:	3718      	adds	r7, #24
 801e5ee:	46bd      	mov	sp, r7
 801e5f0:	bd80      	pop	{r7, pc}

0801e5f2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e5f2:	b580      	push	{r7, lr}
 801e5f4:	b082      	sub	sp, #8
 801e5f6:	af00      	add	r7, sp, #0
 801e5f8:	6078      	str	r0, [r7, #4]
 801e5fa:	460b      	mov	r3, r1
 801e5fc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801e5fe:	687b      	ldr	r3, [r7, #4]
 801e600:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801e604:	78fa      	ldrb	r2, [r7, #3]
 801e606:	4611      	mov	r1, r2
 801e608:	4618      	mov	r0, r3
 801e60a:	f7f6 f838 	bl	801467e <HAL_PCD_EP_GetRxCount>
 801e60e:	4603      	mov	r3, r0
}
 801e610:	4618      	mov	r0, r3
 801e612:	3708      	adds	r7, #8
 801e614:	46bd      	mov	sp, r7
 801e616:	bd80      	pop	{r7, pc}

0801e618 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801e618:	b480      	push	{r7}
 801e61a:	b085      	sub	sp, #20
 801e61c:	af00      	add	r7, sp, #0
 801e61e:	4603      	mov	r3, r0
 801e620:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e622:	2300      	movs	r3, #0
 801e624:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801e626:	79fb      	ldrb	r3, [r7, #7]
 801e628:	2b03      	cmp	r3, #3
 801e62a:	d817      	bhi.n	801e65c <USBD_Get_USB_Status+0x44>
 801e62c:	a201      	add	r2, pc, #4	; (adr r2, 801e634 <USBD_Get_USB_Status+0x1c>)
 801e62e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e632:	bf00      	nop
 801e634:	0801e645 	.word	0x0801e645
 801e638:	0801e64b 	.word	0x0801e64b
 801e63c:	0801e651 	.word	0x0801e651
 801e640:	0801e657 	.word	0x0801e657
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801e644:	2300      	movs	r3, #0
 801e646:	73fb      	strb	r3, [r7, #15]
    break;
 801e648:	e00b      	b.n	801e662 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801e64a:	2302      	movs	r3, #2
 801e64c:	73fb      	strb	r3, [r7, #15]
    break;
 801e64e:	e008      	b.n	801e662 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801e650:	2301      	movs	r3, #1
 801e652:	73fb      	strb	r3, [r7, #15]
    break;
 801e654:	e005      	b.n	801e662 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801e656:	2302      	movs	r3, #2
 801e658:	73fb      	strb	r3, [r7, #15]
    break;
 801e65a:	e002      	b.n	801e662 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801e65c:	2302      	movs	r3, #2
 801e65e:	73fb      	strb	r3, [r7, #15]
    break;
 801e660:	bf00      	nop
  }
  return usb_status;
 801e662:	7bfb      	ldrb	r3, [r7, #15]
}
 801e664:	4618      	mov	r0, r3
 801e666:	3714      	adds	r7, #20
 801e668:	46bd      	mov	sp, r7
 801e66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e66e:	4770      	bx	lr

0801e670 <__errno>:
 801e670:	4b01      	ldr	r3, [pc, #4]	; (801e678 <__errno+0x8>)
 801e672:	6818      	ldr	r0, [r3, #0]
 801e674:	4770      	bx	lr
 801e676:	bf00      	nop
 801e678:	2400018c 	.word	0x2400018c

0801e67c <__libc_init_array>:
 801e67c:	b570      	push	{r4, r5, r6, lr}
 801e67e:	4e0d      	ldr	r6, [pc, #52]	; (801e6b4 <__libc_init_array+0x38>)
 801e680:	4c0d      	ldr	r4, [pc, #52]	; (801e6b8 <__libc_init_array+0x3c>)
 801e682:	1ba4      	subs	r4, r4, r6
 801e684:	10a4      	asrs	r4, r4, #2
 801e686:	2500      	movs	r5, #0
 801e688:	42a5      	cmp	r5, r4
 801e68a:	d109      	bne.n	801e6a0 <__libc_init_array+0x24>
 801e68c:	4e0b      	ldr	r6, [pc, #44]	; (801e6bc <__libc_init_array+0x40>)
 801e68e:	4c0c      	ldr	r4, [pc, #48]	; (801e6c0 <__libc_init_array+0x44>)
 801e690:	f001 f908 	bl	801f8a4 <_init>
 801e694:	1ba4      	subs	r4, r4, r6
 801e696:	10a4      	asrs	r4, r4, #2
 801e698:	2500      	movs	r5, #0
 801e69a:	42a5      	cmp	r5, r4
 801e69c:	d105      	bne.n	801e6aa <__libc_init_array+0x2e>
 801e69e:	bd70      	pop	{r4, r5, r6, pc}
 801e6a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801e6a4:	4798      	blx	r3
 801e6a6:	3501      	adds	r5, #1
 801e6a8:	e7ee      	b.n	801e688 <__libc_init_array+0xc>
 801e6aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801e6ae:	4798      	blx	r3
 801e6b0:	3501      	adds	r5, #1
 801e6b2:	e7f2      	b.n	801e69a <__libc_init_array+0x1e>
 801e6b4:	0801fc90 	.word	0x0801fc90
 801e6b8:	0801fc90 	.word	0x0801fc90
 801e6bc:	0801fc90 	.word	0x0801fc90
 801e6c0:	0801fc94 	.word	0x0801fc94

0801e6c4 <__itoa>:
 801e6c4:	1e93      	subs	r3, r2, #2
 801e6c6:	2b22      	cmp	r3, #34	; 0x22
 801e6c8:	b510      	push	{r4, lr}
 801e6ca:	460c      	mov	r4, r1
 801e6cc:	d904      	bls.n	801e6d8 <__itoa+0x14>
 801e6ce:	2300      	movs	r3, #0
 801e6d0:	700b      	strb	r3, [r1, #0]
 801e6d2:	461c      	mov	r4, r3
 801e6d4:	4620      	mov	r0, r4
 801e6d6:	bd10      	pop	{r4, pc}
 801e6d8:	2a0a      	cmp	r2, #10
 801e6da:	d109      	bne.n	801e6f0 <__itoa+0x2c>
 801e6dc:	2800      	cmp	r0, #0
 801e6de:	da07      	bge.n	801e6f0 <__itoa+0x2c>
 801e6e0:	232d      	movs	r3, #45	; 0x2d
 801e6e2:	700b      	strb	r3, [r1, #0]
 801e6e4:	4240      	negs	r0, r0
 801e6e6:	2101      	movs	r1, #1
 801e6e8:	4421      	add	r1, r4
 801e6ea:	f000 f8ed 	bl	801e8c8 <__utoa>
 801e6ee:	e7f1      	b.n	801e6d4 <__itoa+0x10>
 801e6f0:	2100      	movs	r1, #0
 801e6f2:	e7f9      	b.n	801e6e8 <__itoa+0x24>

0801e6f4 <itoa>:
 801e6f4:	f7ff bfe6 	b.w	801e6c4 <__itoa>

0801e6f8 <malloc>:
 801e6f8:	4b02      	ldr	r3, [pc, #8]	; (801e704 <malloc+0xc>)
 801e6fa:	4601      	mov	r1, r0
 801e6fc:	6818      	ldr	r0, [r3, #0]
 801e6fe:	f000 b861 	b.w	801e7c4 <_malloc_r>
 801e702:	bf00      	nop
 801e704:	2400018c 	.word	0x2400018c

0801e708 <free>:
 801e708:	4b02      	ldr	r3, [pc, #8]	; (801e714 <free+0xc>)
 801e70a:	4601      	mov	r1, r0
 801e70c:	6818      	ldr	r0, [r3, #0]
 801e70e:	f000 b80b 	b.w	801e728 <_free_r>
 801e712:	bf00      	nop
 801e714:	2400018c 	.word	0x2400018c

0801e718 <memset>:
 801e718:	4402      	add	r2, r0
 801e71a:	4603      	mov	r3, r0
 801e71c:	4293      	cmp	r3, r2
 801e71e:	d100      	bne.n	801e722 <memset+0xa>
 801e720:	4770      	bx	lr
 801e722:	f803 1b01 	strb.w	r1, [r3], #1
 801e726:	e7f9      	b.n	801e71c <memset+0x4>

0801e728 <_free_r>:
 801e728:	b538      	push	{r3, r4, r5, lr}
 801e72a:	4605      	mov	r5, r0
 801e72c:	2900      	cmp	r1, #0
 801e72e:	d045      	beq.n	801e7bc <_free_r+0x94>
 801e730:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e734:	1f0c      	subs	r4, r1, #4
 801e736:	2b00      	cmp	r3, #0
 801e738:	bfb8      	it	lt
 801e73a:	18e4      	addlt	r4, r4, r3
 801e73c:	f000 f902 	bl	801e944 <__malloc_lock>
 801e740:	4a1f      	ldr	r2, [pc, #124]	; (801e7c0 <_free_r+0x98>)
 801e742:	6813      	ldr	r3, [r2, #0]
 801e744:	4610      	mov	r0, r2
 801e746:	b933      	cbnz	r3, 801e756 <_free_r+0x2e>
 801e748:	6063      	str	r3, [r4, #4]
 801e74a:	6014      	str	r4, [r2, #0]
 801e74c:	4628      	mov	r0, r5
 801e74e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e752:	f000 b8f8 	b.w	801e946 <__malloc_unlock>
 801e756:	42a3      	cmp	r3, r4
 801e758:	d90c      	bls.n	801e774 <_free_r+0x4c>
 801e75a:	6821      	ldr	r1, [r4, #0]
 801e75c:	1862      	adds	r2, r4, r1
 801e75e:	4293      	cmp	r3, r2
 801e760:	bf04      	itt	eq
 801e762:	681a      	ldreq	r2, [r3, #0]
 801e764:	685b      	ldreq	r3, [r3, #4]
 801e766:	6063      	str	r3, [r4, #4]
 801e768:	bf04      	itt	eq
 801e76a:	1852      	addeq	r2, r2, r1
 801e76c:	6022      	streq	r2, [r4, #0]
 801e76e:	6004      	str	r4, [r0, #0]
 801e770:	e7ec      	b.n	801e74c <_free_r+0x24>
 801e772:	4613      	mov	r3, r2
 801e774:	685a      	ldr	r2, [r3, #4]
 801e776:	b10a      	cbz	r2, 801e77c <_free_r+0x54>
 801e778:	42a2      	cmp	r2, r4
 801e77a:	d9fa      	bls.n	801e772 <_free_r+0x4a>
 801e77c:	6819      	ldr	r1, [r3, #0]
 801e77e:	1858      	adds	r0, r3, r1
 801e780:	42a0      	cmp	r0, r4
 801e782:	d10b      	bne.n	801e79c <_free_r+0x74>
 801e784:	6820      	ldr	r0, [r4, #0]
 801e786:	4401      	add	r1, r0
 801e788:	1858      	adds	r0, r3, r1
 801e78a:	4282      	cmp	r2, r0
 801e78c:	6019      	str	r1, [r3, #0]
 801e78e:	d1dd      	bne.n	801e74c <_free_r+0x24>
 801e790:	6810      	ldr	r0, [r2, #0]
 801e792:	6852      	ldr	r2, [r2, #4]
 801e794:	605a      	str	r2, [r3, #4]
 801e796:	4401      	add	r1, r0
 801e798:	6019      	str	r1, [r3, #0]
 801e79a:	e7d7      	b.n	801e74c <_free_r+0x24>
 801e79c:	d902      	bls.n	801e7a4 <_free_r+0x7c>
 801e79e:	230c      	movs	r3, #12
 801e7a0:	602b      	str	r3, [r5, #0]
 801e7a2:	e7d3      	b.n	801e74c <_free_r+0x24>
 801e7a4:	6820      	ldr	r0, [r4, #0]
 801e7a6:	1821      	adds	r1, r4, r0
 801e7a8:	428a      	cmp	r2, r1
 801e7aa:	bf04      	itt	eq
 801e7ac:	6811      	ldreq	r1, [r2, #0]
 801e7ae:	6852      	ldreq	r2, [r2, #4]
 801e7b0:	6062      	str	r2, [r4, #4]
 801e7b2:	bf04      	itt	eq
 801e7b4:	1809      	addeq	r1, r1, r0
 801e7b6:	6021      	streq	r1, [r4, #0]
 801e7b8:	605c      	str	r4, [r3, #4]
 801e7ba:	e7c7      	b.n	801e74c <_free_r+0x24>
 801e7bc:	bd38      	pop	{r3, r4, r5, pc}
 801e7be:	bf00      	nop
 801e7c0:	24000318 	.word	0x24000318

0801e7c4 <_malloc_r>:
 801e7c4:	b570      	push	{r4, r5, r6, lr}
 801e7c6:	1ccd      	adds	r5, r1, #3
 801e7c8:	f025 0503 	bic.w	r5, r5, #3
 801e7cc:	3508      	adds	r5, #8
 801e7ce:	2d0c      	cmp	r5, #12
 801e7d0:	bf38      	it	cc
 801e7d2:	250c      	movcc	r5, #12
 801e7d4:	2d00      	cmp	r5, #0
 801e7d6:	4606      	mov	r6, r0
 801e7d8:	db01      	blt.n	801e7de <_malloc_r+0x1a>
 801e7da:	42a9      	cmp	r1, r5
 801e7dc:	d903      	bls.n	801e7e6 <_malloc_r+0x22>
 801e7de:	230c      	movs	r3, #12
 801e7e0:	6033      	str	r3, [r6, #0]
 801e7e2:	2000      	movs	r0, #0
 801e7e4:	bd70      	pop	{r4, r5, r6, pc}
 801e7e6:	f000 f8ad 	bl	801e944 <__malloc_lock>
 801e7ea:	4a21      	ldr	r2, [pc, #132]	; (801e870 <_malloc_r+0xac>)
 801e7ec:	6814      	ldr	r4, [r2, #0]
 801e7ee:	4621      	mov	r1, r4
 801e7f0:	b991      	cbnz	r1, 801e818 <_malloc_r+0x54>
 801e7f2:	4c20      	ldr	r4, [pc, #128]	; (801e874 <_malloc_r+0xb0>)
 801e7f4:	6823      	ldr	r3, [r4, #0]
 801e7f6:	b91b      	cbnz	r3, 801e800 <_malloc_r+0x3c>
 801e7f8:	4630      	mov	r0, r6
 801e7fa:	f000 f83d 	bl	801e878 <_sbrk_r>
 801e7fe:	6020      	str	r0, [r4, #0]
 801e800:	4629      	mov	r1, r5
 801e802:	4630      	mov	r0, r6
 801e804:	f000 f838 	bl	801e878 <_sbrk_r>
 801e808:	1c43      	adds	r3, r0, #1
 801e80a:	d124      	bne.n	801e856 <_malloc_r+0x92>
 801e80c:	230c      	movs	r3, #12
 801e80e:	6033      	str	r3, [r6, #0]
 801e810:	4630      	mov	r0, r6
 801e812:	f000 f898 	bl	801e946 <__malloc_unlock>
 801e816:	e7e4      	b.n	801e7e2 <_malloc_r+0x1e>
 801e818:	680b      	ldr	r3, [r1, #0]
 801e81a:	1b5b      	subs	r3, r3, r5
 801e81c:	d418      	bmi.n	801e850 <_malloc_r+0x8c>
 801e81e:	2b0b      	cmp	r3, #11
 801e820:	d90f      	bls.n	801e842 <_malloc_r+0x7e>
 801e822:	600b      	str	r3, [r1, #0]
 801e824:	50cd      	str	r5, [r1, r3]
 801e826:	18cc      	adds	r4, r1, r3
 801e828:	4630      	mov	r0, r6
 801e82a:	f000 f88c 	bl	801e946 <__malloc_unlock>
 801e82e:	f104 000b 	add.w	r0, r4, #11
 801e832:	1d23      	adds	r3, r4, #4
 801e834:	f020 0007 	bic.w	r0, r0, #7
 801e838:	1ac3      	subs	r3, r0, r3
 801e83a:	d0d3      	beq.n	801e7e4 <_malloc_r+0x20>
 801e83c:	425a      	negs	r2, r3
 801e83e:	50e2      	str	r2, [r4, r3]
 801e840:	e7d0      	b.n	801e7e4 <_malloc_r+0x20>
 801e842:	428c      	cmp	r4, r1
 801e844:	684b      	ldr	r3, [r1, #4]
 801e846:	bf16      	itet	ne
 801e848:	6063      	strne	r3, [r4, #4]
 801e84a:	6013      	streq	r3, [r2, #0]
 801e84c:	460c      	movne	r4, r1
 801e84e:	e7eb      	b.n	801e828 <_malloc_r+0x64>
 801e850:	460c      	mov	r4, r1
 801e852:	6849      	ldr	r1, [r1, #4]
 801e854:	e7cc      	b.n	801e7f0 <_malloc_r+0x2c>
 801e856:	1cc4      	adds	r4, r0, #3
 801e858:	f024 0403 	bic.w	r4, r4, #3
 801e85c:	42a0      	cmp	r0, r4
 801e85e:	d005      	beq.n	801e86c <_malloc_r+0xa8>
 801e860:	1a21      	subs	r1, r4, r0
 801e862:	4630      	mov	r0, r6
 801e864:	f000 f808 	bl	801e878 <_sbrk_r>
 801e868:	3001      	adds	r0, #1
 801e86a:	d0cf      	beq.n	801e80c <_malloc_r+0x48>
 801e86c:	6025      	str	r5, [r4, #0]
 801e86e:	e7db      	b.n	801e828 <_malloc_r+0x64>
 801e870:	24000318 	.word	0x24000318
 801e874:	2400031c 	.word	0x2400031c

0801e878 <_sbrk_r>:
 801e878:	b538      	push	{r3, r4, r5, lr}
 801e87a:	4c06      	ldr	r4, [pc, #24]	; (801e894 <_sbrk_r+0x1c>)
 801e87c:	2300      	movs	r3, #0
 801e87e:	4605      	mov	r5, r0
 801e880:	4608      	mov	r0, r1
 801e882:	6023      	str	r3, [r4, #0]
 801e884:	f7e3 ffe0 	bl	8002848 <_sbrk>
 801e888:	1c43      	adds	r3, r0, #1
 801e88a:	d102      	bne.n	801e892 <_sbrk_r+0x1a>
 801e88c:	6823      	ldr	r3, [r4, #0]
 801e88e:	b103      	cbz	r3, 801e892 <_sbrk_r+0x1a>
 801e890:	602b      	str	r3, [r5, #0]
 801e892:	bd38      	pop	{r3, r4, r5, pc}
 801e894:	24001fac 	.word	0x24001fac

0801e898 <strcat>:
 801e898:	b510      	push	{r4, lr}
 801e89a:	4603      	mov	r3, r0
 801e89c:	781a      	ldrb	r2, [r3, #0]
 801e89e:	1c5c      	adds	r4, r3, #1
 801e8a0:	b93a      	cbnz	r2, 801e8b2 <strcat+0x1a>
 801e8a2:	3b01      	subs	r3, #1
 801e8a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e8a8:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e8ac:	2a00      	cmp	r2, #0
 801e8ae:	d1f9      	bne.n	801e8a4 <strcat+0xc>
 801e8b0:	bd10      	pop	{r4, pc}
 801e8b2:	4623      	mov	r3, r4
 801e8b4:	e7f2      	b.n	801e89c <strcat+0x4>

0801e8b6 <strcpy>:
 801e8b6:	4603      	mov	r3, r0
 801e8b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e8bc:	f803 2b01 	strb.w	r2, [r3], #1
 801e8c0:	2a00      	cmp	r2, #0
 801e8c2:	d1f9      	bne.n	801e8b8 <strcpy+0x2>
 801e8c4:	4770      	bx	lr
	...

0801e8c8 <__utoa>:
 801e8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e8ca:	4b1d      	ldr	r3, [pc, #116]	; (801e940 <__utoa+0x78>)
 801e8cc:	b08b      	sub	sp, #44	; 0x2c
 801e8ce:	4605      	mov	r5, r0
 801e8d0:	460c      	mov	r4, r1
 801e8d2:	466e      	mov	r6, sp
 801e8d4:	f103 0c20 	add.w	ip, r3, #32
 801e8d8:	6818      	ldr	r0, [r3, #0]
 801e8da:	6859      	ldr	r1, [r3, #4]
 801e8dc:	4637      	mov	r7, r6
 801e8de:	c703      	stmia	r7!, {r0, r1}
 801e8e0:	3308      	adds	r3, #8
 801e8e2:	4563      	cmp	r3, ip
 801e8e4:	463e      	mov	r6, r7
 801e8e6:	d1f7      	bne.n	801e8d8 <__utoa+0x10>
 801e8e8:	6818      	ldr	r0, [r3, #0]
 801e8ea:	791b      	ldrb	r3, [r3, #4]
 801e8ec:	713b      	strb	r3, [r7, #4]
 801e8ee:	1e93      	subs	r3, r2, #2
 801e8f0:	2b22      	cmp	r3, #34	; 0x22
 801e8f2:	6038      	str	r0, [r7, #0]
 801e8f4:	f04f 0300 	mov.w	r3, #0
 801e8f8:	d904      	bls.n	801e904 <__utoa+0x3c>
 801e8fa:	7023      	strb	r3, [r4, #0]
 801e8fc:	461c      	mov	r4, r3
 801e8fe:	4620      	mov	r0, r4
 801e900:	b00b      	add	sp, #44	; 0x2c
 801e902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e904:	1e66      	subs	r6, r4, #1
 801e906:	fbb5 f0f2 	udiv	r0, r5, r2
 801e90a:	af0a      	add	r7, sp, #40	; 0x28
 801e90c:	fb02 5510 	mls	r5, r2, r0, r5
 801e910:	443d      	add	r5, r7
 801e912:	1c59      	adds	r1, r3, #1
 801e914:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 801e918:	f806 5f01 	strb.w	r5, [r6, #1]!
 801e91c:	4605      	mov	r5, r0
 801e91e:	b968      	cbnz	r0, 801e93c <__utoa+0x74>
 801e920:	5460      	strb	r0, [r4, r1]
 801e922:	4423      	add	r3, r4
 801e924:	4622      	mov	r2, r4
 801e926:	1b19      	subs	r1, r3, r4
 801e928:	1b10      	subs	r0, r2, r4
 801e92a:	4281      	cmp	r1, r0
 801e92c:	dde7      	ble.n	801e8fe <__utoa+0x36>
 801e92e:	7811      	ldrb	r1, [r2, #0]
 801e930:	7818      	ldrb	r0, [r3, #0]
 801e932:	f802 0b01 	strb.w	r0, [r2], #1
 801e936:	f803 1901 	strb.w	r1, [r3], #-1
 801e93a:	e7f4      	b.n	801e926 <__utoa+0x5e>
 801e93c:	460b      	mov	r3, r1
 801e93e:	e7e2      	b.n	801e906 <__utoa+0x3e>
 801e940:	0801fa50 	.word	0x0801fa50

0801e944 <__malloc_lock>:
 801e944:	4770      	bx	lr

0801e946 <__malloc_unlock>:
 801e946:	4770      	bx	lr

0801e948 <cos>:
 801e948:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e94a:	eeb0 7b40 	vmov.f64	d7, d0
 801e94e:	ee17 3a90 	vmov	r3, s15
 801e952:	4a19      	ldr	r2, [pc, #100]	; (801e9b8 <cos+0x70>)
 801e954:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e958:	4293      	cmp	r3, r2
 801e95a:	dc04      	bgt.n	801e966 <cos+0x1e>
 801e95c:	ed9f 1b14 	vldr	d1, [pc, #80]	; 801e9b0 <cos+0x68>
 801e960:	f000 fb22 	bl	801efa8 <__kernel_cos>
 801e964:	e004      	b.n	801e970 <cos+0x28>
 801e966:	4a15      	ldr	r2, [pc, #84]	; (801e9bc <cos+0x74>)
 801e968:	4293      	cmp	r3, r2
 801e96a:	dd04      	ble.n	801e976 <cos+0x2e>
 801e96c:	ee30 0b40 	vsub.f64	d0, d0, d0
 801e970:	b005      	add	sp, #20
 801e972:	f85d fb04 	ldr.w	pc, [sp], #4
 801e976:	4668      	mov	r0, sp
 801e978:	f000 f9da 	bl	801ed30 <__ieee754_rem_pio2>
 801e97c:	f000 0003 	and.w	r0, r0, #3
 801e980:	2801      	cmp	r0, #1
 801e982:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e986:	ed9d 0b00 	vldr	d0, [sp]
 801e98a:	d007      	beq.n	801e99c <cos+0x54>
 801e98c:	2802      	cmp	r0, #2
 801e98e:	d00a      	beq.n	801e9a6 <cos+0x5e>
 801e990:	2800      	cmp	r0, #0
 801e992:	d0e5      	beq.n	801e960 <cos+0x18>
 801e994:	2001      	movs	r0, #1
 801e996:	f000 fe0f 	bl	801f5b8 <__kernel_sin>
 801e99a:	e7e9      	b.n	801e970 <cos+0x28>
 801e99c:	f000 fe0c 	bl	801f5b8 <__kernel_sin>
 801e9a0:	eeb1 0b40 	vneg.f64	d0, d0
 801e9a4:	e7e4      	b.n	801e970 <cos+0x28>
 801e9a6:	f000 faff 	bl	801efa8 <__kernel_cos>
 801e9aa:	e7f9      	b.n	801e9a0 <cos+0x58>
 801e9ac:	f3af 8000 	nop.w
	...
 801e9b8:	3fe921fb 	.word	0x3fe921fb
 801e9bc:	7fefffff 	.word	0x7fefffff

0801e9c0 <sin>:
 801e9c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e9c2:	eeb0 7b40 	vmov.f64	d7, d0
 801e9c6:	ee17 3a90 	vmov	r3, s15
 801e9ca:	4a19      	ldr	r2, [pc, #100]	; (801ea30 <sin+0x70>)
 801e9cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e9d0:	4293      	cmp	r3, r2
 801e9d2:	dc05      	bgt.n	801e9e0 <sin+0x20>
 801e9d4:	ed9f 1b14 	vldr	d1, [pc, #80]	; 801ea28 <sin+0x68>
 801e9d8:	2000      	movs	r0, #0
 801e9da:	f000 fded 	bl	801f5b8 <__kernel_sin>
 801e9de:	e004      	b.n	801e9ea <sin+0x2a>
 801e9e0:	4a14      	ldr	r2, [pc, #80]	; (801ea34 <sin+0x74>)
 801e9e2:	4293      	cmp	r3, r2
 801e9e4:	dd04      	ble.n	801e9f0 <sin+0x30>
 801e9e6:	ee30 0b40 	vsub.f64	d0, d0, d0
 801e9ea:	b005      	add	sp, #20
 801e9ec:	f85d fb04 	ldr.w	pc, [sp], #4
 801e9f0:	4668      	mov	r0, sp
 801e9f2:	f000 f99d 	bl	801ed30 <__ieee754_rem_pio2>
 801e9f6:	f000 0003 	and.w	r0, r0, #3
 801e9fa:	2801      	cmp	r0, #1
 801e9fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 801ea00:	ed9d 0b00 	vldr	d0, [sp]
 801ea04:	d004      	beq.n	801ea10 <sin+0x50>
 801ea06:	2802      	cmp	r0, #2
 801ea08:	d005      	beq.n	801ea16 <sin+0x56>
 801ea0a:	b950      	cbnz	r0, 801ea22 <sin+0x62>
 801ea0c:	2001      	movs	r0, #1
 801ea0e:	e7e4      	b.n	801e9da <sin+0x1a>
 801ea10:	f000 faca 	bl	801efa8 <__kernel_cos>
 801ea14:	e7e9      	b.n	801e9ea <sin+0x2a>
 801ea16:	2001      	movs	r0, #1
 801ea18:	f000 fdce 	bl	801f5b8 <__kernel_sin>
 801ea1c:	eeb1 0b40 	vneg.f64	d0, d0
 801ea20:	e7e3      	b.n	801e9ea <sin+0x2a>
 801ea22:	f000 fac1 	bl	801efa8 <__kernel_cos>
 801ea26:	e7f9      	b.n	801ea1c <sin+0x5c>
	...
 801ea30:	3fe921fb 	.word	0x3fe921fb
 801ea34:	7fefffff 	.word	0x7fefffff

0801ea38 <exp>:
 801ea38:	b510      	push	{r4, lr}
 801ea3a:	ed2d 8b04 	vpush	{d8-d9}
 801ea3e:	eeb0 8b40 	vmov.f64	d8, d0
 801ea42:	4c33      	ldr	r4, [pc, #204]	; (801eb10 <exp+0xd8>)
 801ea44:	b08a      	sub	sp, #40	; 0x28
 801ea46:	f000 f86b 	bl	801eb20 <__ieee754_exp>
 801ea4a:	f994 3000 	ldrsb.w	r3, [r4]
 801ea4e:	eeb0 9b40 	vmov.f64	d9, d0
 801ea52:	3301      	adds	r3, #1
 801ea54:	d029      	beq.n	801eaaa <exp+0x72>
 801ea56:	eeb0 0b48 	vmov.f64	d0, d8
 801ea5a:	f000 fe0e 	bl	801f67a <finite>
 801ea5e:	b320      	cbz	r0, 801eaaa <exp+0x72>
 801ea60:	ed9f 7b27 	vldr	d7, [pc, #156]	; 801eb00 <exp+0xc8>
 801ea64:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801ea68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ea6c:	dd2e      	ble.n	801eacc <exp+0x94>
 801ea6e:	2303      	movs	r3, #3
 801ea70:	9300      	str	r3, [sp, #0]
 801ea72:	4b28      	ldr	r3, [pc, #160]	; (801eb14 <exp+0xdc>)
 801ea74:	9301      	str	r3, [sp, #4]
 801ea76:	2300      	movs	r3, #0
 801ea78:	9308      	str	r3, [sp, #32]
 801ea7a:	f994 3000 	ldrsb.w	r3, [r4]
 801ea7e:	ed8d 8b04 	vstr	d8, [sp, #16]
 801ea82:	ed8d 8b02 	vstr	d8, [sp, #8]
 801ea86:	b9b3      	cbnz	r3, 801eab6 <exp+0x7e>
 801ea88:	4b23      	ldr	r3, [pc, #140]	; (801eb18 <exp+0xe0>)
 801ea8a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801ea8e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801ea92:	4668      	mov	r0, sp
 801ea94:	f000 fe74 	bl	801f780 <matherr>
 801ea98:	b198      	cbz	r0, 801eac2 <exp+0x8a>
 801ea9a:	9b08      	ldr	r3, [sp, #32]
 801ea9c:	b11b      	cbz	r3, 801eaa6 <exp+0x6e>
 801ea9e:	f7ff fde7 	bl	801e670 <__errno>
 801eaa2:	9b08      	ldr	r3, [sp, #32]
 801eaa4:	6003      	str	r3, [r0, #0]
 801eaa6:	ed9d 9b06 	vldr	d9, [sp, #24]
 801eaaa:	eeb0 0b49 	vmov.f64	d0, d9
 801eaae:	b00a      	add	sp, #40	; 0x28
 801eab0:	ecbd 8b04 	vpop	{d8-d9}
 801eab4:	bd10      	pop	{r4, pc}
 801eab6:	4919      	ldr	r1, [pc, #100]	; (801eb1c <exp+0xe4>)
 801eab8:	2000      	movs	r0, #0
 801eaba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801eabe:	2b02      	cmp	r3, #2
 801eac0:	d1e7      	bne.n	801ea92 <exp+0x5a>
 801eac2:	f7ff fdd5 	bl	801e670 <__errno>
 801eac6:	2322      	movs	r3, #34	; 0x22
 801eac8:	6003      	str	r3, [r0, #0]
 801eaca:	e7e6      	b.n	801ea9a <exp+0x62>
 801eacc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 801eb08 <exp+0xd0>
 801ead0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801ead4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ead8:	d5e7      	bpl.n	801eaaa <exp+0x72>
 801eada:	2304      	movs	r3, #4
 801eadc:	9300      	str	r3, [sp, #0]
 801eade:	4b0d      	ldr	r3, [pc, #52]	; (801eb14 <exp+0xdc>)
 801eae0:	9301      	str	r3, [sp, #4]
 801eae2:	2300      	movs	r3, #0
 801eae4:	9308      	str	r3, [sp, #32]
 801eae6:	2200      	movs	r2, #0
 801eae8:	2300      	movs	r3, #0
 801eaea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801eaee:	ed8d 8b04 	vstr	d8, [sp, #16]
 801eaf2:	ed8d 8b02 	vstr	d8, [sp, #8]
 801eaf6:	f994 3000 	ldrsb.w	r3, [r4]
 801eafa:	e7e0      	b.n	801eabe <exp+0x86>
 801eafc:	f3af 8000 	nop.w
 801eb00:	fefa39ef 	.word	0xfefa39ef
 801eb04:	40862e42 	.word	0x40862e42
 801eb08:	d52d3051 	.word	0xd52d3051
 801eb0c:	c0874910 	.word	0xc0874910
 801eb10:	240001f0 	.word	0x240001f0
 801eb14:	0801fa75 	.word	0x0801fa75
 801eb18:	47efffff 	.word	0x47efffff
 801eb1c:	7ff00000 	.word	0x7ff00000

0801eb20 <__ieee754_exp>:
 801eb20:	ee10 1a90 	vmov	r1, s1
 801eb24:	4b7a      	ldr	r3, [pc, #488]	; (801ed10 <__ieee754_exp+0x1f0>)
 801eb26:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801eb2a:	429a      	cmp	r2, r3
 801eb2c:	b082      	sub	sp, #8
 801eb2e:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 801eb32:	d928      	bls.n	801eb86 <__ieee754_exp+0x66>
 801eb34:	4b77      	ldr	r3, [pc, #476]	; (801ed14 <__ieee754_exp+0x1f4>)
 801eb36:	429a      	cmp	r2, r3
 801eb38:	d90f      	bls.n	801eb5a <__ieee754_exp+0x3a>
 801eb3a:	ee10 3a10 	vmov	r3, s0
 801eb3e:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801eb42:	430b      	orrs	r3, r1
 801eb44:	d003      	beq.n	801eb4e <__ieee754_exp+0x2e>
 801eb46:	ee30 0b00 	vadd.f64	d0, d0, d0
 801eb4a:	b002      	add	sp, #8
 801eb4c:	4770      	bx	lr
 801eb4e:	ed9f 7b56 	vldr	d7, [pc, #344]	; 801eca8 <__ieee754_exp+0x188>
 801eb52:	2800      	cmp	r0, #0
 801eb54:	fe00 0b07 	vseleq.f64	d0, d0, d7
 801eb58:	e7f7      	b.n	801eb4a <__ieee754_exp+0x2a>
 801eb5a:	ed9f 7b55 	vldr	d7, [pc, #340]	; 801ecb0 <__ieee754_exp+0x190>
 801eb5e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801eb62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb66:	dd04      	ble.n	801eb72 <__ieee754_exp+0x52>
 801eb68:	ed9f 0b53 	vldr	d0, [pc, #332]	; 801ecb8 <__ieee754_exp+0x198>
 801eb6c:	ee20 0b00 	vmul.f64	d0, d0, d0
 801eb70:	e7eb      	b.n	801eb4a <__ieee754_exp+0x2a>
 801eb72:	ed9f 7b53 	vldr	d7, [pc, #332]	; 801ecc0 <__ieee754_exp+0x1a0>
 801eb76:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801eb7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb7e:	d505      	bpl.n	801eb8c <__ieee754_exp+0x6c>
 801eb80:	ed9f 0b49 	vldr	d0, [pc, #292]	; 801eca8 <__ieee754_exp+0x188>
 801eb84:	e7e1      	b.n	801eb4a <__ieee754_exp+0x2a>
 801eb86:	4b64      	ldr	r3, [pc, #400]	; (801ed18 <__ieee754_exp+0x1f8>)
 801eb88:	429a      	cmp	r2, r3
 801eb8a:	d956      	bls.n	801ec3a <__ieee754_exp+0x11a>
 801eb8c:	4b63      	ldr	r3, [pc, #396]	; (801ed1c <__ieee754_exp+0x1fc>)
 801eb8e:	429a      	cmp	r2, r3
 801eb90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 801eb94:	d838      	bhi.n	801ec08 <__ieee754_exp+0xe8>
 801eb96:	4b62      	ldr	r3, [pc, #392]	; (801ed20 <__ieee754_exp+0x200>)
 801eb98:	4413      	add	r3, r2
 801eb9a:	ed93 6b00 	vldr	d6, [r3]
 801eb9e:	4b61      	ldr	r3, [pc, #388]	; (801ed24 <__ieee754_exp+0x204>)
 801eba0:	ee30 6b46 	vsub.f64	d6, d0, d6
 801eba4:	4413      	add	r3, r2
 801eba6:	ed93 7b00 	vldr	d7, [r3]
 801ebaa:	f1c0 0301 	rsb	r3, r0, #1
 801ebae:	1a1b      	subs	r3, r3, r0
 801ebb0:	ee36 0b47 	vsub.f64	d0, d6, d7
 801ebb4:	ed9f 4b44 	vldr	d4, [pc, #272]	; 801ecc8 <__ieee754_exp+0x1a8>
 801ebb8:	ee20 5b00 	vmul.f64	d5, d0, d0
 801ebbc:	ed9f 3b44 	vldr	d3, [pc, #272]	; 801ecd0 <__ieee754_exp+0x1b0>
 801ebc0:	eea5 3b04 	vfma.f64	d3, d5, d4
 801ebc4:	ed9f 4b44 	vldr	d4, [pc, #272]	; 801ecd8 <__ieee754_exp+0x1b8>
 801ebc8:	eea3 4b05 	vfma.f64	d4, d3, d5
 801ebcc:	ed9f 3b44 	vldr	d3, [pc, #272]	; 801ece0 <__ieee754_exp+0x1c0>
 801ebd0:	eea4 3b05 	vfma.f64	d3, d4, d5
 801ebd4:	ed9f 4b44 	vldr	d4, [pc, #272]	; 801ece8 <__ieee754_exp+0x1c8>
 801ebd8:	eea3 4b05 	vfma.f64	d4, d3, d5
 801ebdc:	eeb0 3b40 	vmov.f64	d3, d0
 801ebe0:	eea4 3b45 	vfms.f64	d3, d4, d5
 801ebe4:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 801ebe8:	eeb0 5b43 	vmov.f64	d5, d3
 801ebec:	ee20 2b03 	vmul.f64	d2, d0, d3
 801ebf0:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 801ebf4:	bba3      	cbnz	r3, 801ec60 <__ieee754_exp+0x140>
 801ebf6:	ee35 5b44 	vsub.f64	d5, d5, d4
 801ebfa:	ee82 7b05 	vdiv.f64	d7, d2, d5
 801ebfe:	ee37 0b40 	vsub.f64	d0, d7, d0
 801ec02:	ee33 0b40 	vsub.f64	d0, d3, d0
 801ec06:	e7a0      	b.n	801eb4a <__ieee754_exp+0x2a>
 801ec08:	4b47      	ldr	r3, [pc, #284]	; (801ed28 <__ieee754_exp+0x208>)
 801ec0a:	4413      	add	r3, r2
 801ec0c:	ed93 7b00 	vldr	d7, [r3]
 801ec10:	ed9f 6b37 	vldr	d6, [pc, #220]	; 801ecf0 <__ieee754_exp+0x1d0>
 801ec14:	ed9f 5b38 	vldr	d5, [pc, #224]	; 801ecf8 <__ieee754_exp+0x1d8>
 801ec18:	eea0 7b06 	vfma.f64	d7, d0, d6
 801ec1c:	ed9f 6b38 	vldr	d6, [pc, #224]	; 801ed00 <__ieee754_exp+0x1e0>
 801ec20:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801ec24:	ee17 3a90 	vmov	r3, s15
 801ec28:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801ec2c:	eea7 0b46 	vfms.f64	d0, d7, d6
 801ec30:	ee27 7b05 	vmul.f64	d7, d7, d5
 801ec34:	eeb0 6b40 	vmov.f64	d6, d0
 801ec38:	e7ba      	b.n	801ebb0 <__ieee754_exp+0x90>
 801ec3a:	4b3c      	ldr	r3, [pc, #240]	; (801ed2c <__ieee754_exp+0x20c>)
 801ec3c:	429a      	cmp	r2, r3
 801ec3e:	d80d      	bhi.n	801ec5c <__ieee754_exp+0x13c>
 801ec40:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801ec44:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 801ecb8 <__ieee754_exp+0x198>
 801ec48:	ee30 5b05 	vadd.f64	d5, d0, d5
 801ec4c:	eeb4 5bc4 	vcmpe.f64	d5, d4
 801ec50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ec54:	dd02      	ble.n	801ec5c <__ieee754_exp+0x13c>
 801ec56:	ee30 0b04 	vadd.f64	d0, d0, d4
 801ec5a:	e776      	b.n	801eb4a <__ieee754_exp+0x2a>
 801ec5c:	2300      	movs	r3, #0
 801ec5e:	e7a9      	b.n	801ebb4 <__ieee754_exp+0x94>
 801ec60:	f46f 717f 	mvn.w	r1, #1020	; 0x3fc
 801ec64:	ee34 5b45 	vsub.f64	d5, d4, d5
 801ec68:	428b      	cmp	r3, r1
 801ec6a:	ee82 4b05 	vdiv.f64	d4, d2, d5
 801ec6e:	ee37 7b44 	vsub.f64	d7, d7, d4
 801ec72:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ec76:	ee33 7b47 	vsub.f64	d7, d3, d7
 801ec7a:	ed8d 7b00 	vstr	d7, [sp]
 801ec7e:	9a01      	ldr	r2, [sp, #4]
 801ec80:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ec84:	db04      	blt.n	801ec90 <__ieee754_exp+0x170>
 801ec86:	eb02 5103 	add.w	r1, r2, r3, lsl #20
 801ec8a:	ec41 0b10 	vmov	d0, r0, r1
 801ec8e:	e75c      	b.n	801eb4a <__ieee754_exp+0x2a>
 801ec90:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801ec94:	eb02 5103 	add.w	r1, r2, r3, lsl #20
 801ec98:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 801ed08 <__ieee754_exp+0x1e8>
 801ec9c:	ec41 0b10 	vmov	d0, r0, r1
 801eca0:	ee20 0b07 	vmul.f64	d0, d0, d7
 801eca4:	e751      	b.n	801eb4a <__ieee754_exp+0x2a>
 801eca6:	bf00      	nop
	...
 801ecb0:	fefa39ef 	.word	0xfefa39ef
 801ecb4:	40862e42 	.word	0x40862e42
 801ecb8:	8800759c 	.word	0x8800759c
 801ecbc:	7e37e43c 	.word	0x7e37e43c
 801ecc0:	d52d3051 	.word	0xd52d3051
 801ecc4:	c0874910 	.word	0xc0874910
 801ecc8:	72bea4d0 	.word	0x72bea4d0
 801eccc:	3e663769 	.word	0x3e663769
 801ecd0:	c5d26bf1 	.word	0xc5d26bf1
 801ecd4:	bebbbd41 	.word	0xbebbbd41
 801ecd8:	af25de2c 	.word	0xaf25de2c
 801ecdc:	3f11566a 	.word	0x3f11566a
 801ece0:	16bebd93 	.word	0x16bebd93
 801ece4:	bf66c16c 	.word	0xbf66c16c
 801ece8:	5555553e 	.word	0x5555553e
 801ecec:	3fc55555 	.word	0x3fc55555
 801ecf0:	652b82fe 	.word	0x652b82fe
 801ecf4:	3ff71547 	.word	0x3ff71547
 801ecf8:	35793c76 	.word	0x35793c76
 801ecfc:	3dea39ef 	.word	0x3dea39ef
 801ed00:	fee00000 	.word	0xfee00000
 801ed04:	3fe62e42 	.word	0x3fe62e42
 801ed08:	00000000 	.word	0x00000000
 801ed0c:	01700000 	.word	0x01700000
 801ed10:	40862e41 	.word	0x40862e41
 801ed14:	7fefffff 	.word	0x7fefffff
 801ed18:	3fd62e42 	.word	0x3fd62e42
 801ed1c:	3ff0a2b1 	.word	0x3ff0a2b1
 801ed20:	0801fa90 	.word	0x0801fa90
 801ed24:	0801faa0 	.word	0x0801faa0
 801ed28:	0801fa80 	.word	0x0801fa80
 801ed2c:	3e2fffff 	.word	0x3e2fffff

0801ed30 <__ieee754_rem_pio2>:
 801ed30:	b570      	push	{r4, r5, r6, lr}
 801ed32:	eeb0 7b40 	vmov.f64	d7, d0
 801ed36:	ee17 5a90 	vmov	r5, s15
 801ed3a:	4b95      	ldr	r3, [pc, #596]	; (801ef90 <__ieee754_rem_pio2+0x260>)
 801ed3c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801ed40:	429e      	cmp	r6, r3
 801ed42:	b088      	sub	sp, #32
 801ed44:	4604      	mov	r4, r0
 801ed46:	dc07      	bgt.n	801ed58 <__ieee754_rem_pio2+0x28>
 801ed48:	2200      	movs	r2, #0
 801ed4a:	2300      	movs	r3, #0
 801ed4c:	ed84 0b00 	vstr	d0, [r4]
 801ed50:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801ed54:	2000      	movs	r0, #0
 801ed56:	e01b      	b.n	801ed90 <__ieee754_rem_pio2+0x60>
 801ed58:	4b8e      	ldr	r3, [pc, #568]	; (801ef94 <__ieee754_rem_pio2+0x264>)
 801ed5a:	429e      	cmp	r6, r3
 801ed5c:	dc3b      	bgt.n	801edd6 <__ieee754_rem_pio2+0xa6>
 801ed5e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 801ed62:	2d00      	cmp	r5, #0
 801ed64:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 801ef50 <__ieee754_rem_pio2+0x220>
 801ed68:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801ed6c:	dd19      	ble.n	801eda2 <__ieee754_rem_pio2+0x72>
 801ed6e:	ee30 7b46 	vsub.f64	d7, d0, d6
 801ed72:	429e      	cmp	r6, r3
 801ed74:	d00e      	beq.n	801ed94 <__ieee754_rem_pio2+0x64>
 801ed76:	ed9f 6b78 	vldr	d6, [pc, #480]	; 801ef58 <__ieee754_rem_pio2+0x228>
 801ed7a:	ee37 5b46 	vsub.f64	d5, d7, d6
 801ed7e:	ee37 7b45 	vsub.f64	d7, d7, d5
 801ed82:	ed84 5b00 	vstr	d5, [r4]
 801ed86:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ed8a:	ed84 7b02 	vstr	d7, [r4, #8]
 801ed8e:	2001      	movs	r0, #1
 801ed90:	b008      	add	sp, #32
 801ed92:	bd70      	pop	{r4, r5, r6, pc}
 801ed94:	ed9f 6b72 	vldr	d6, [pc, #456]	; 801ef60 <__ieee754_rem_pio2+0x230>
 801ed98:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ed9c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 801ef68 <__ieee754_rem_pio2+0x238>
 801eda0:	e7eb      	b.n	801ed7a <__ieee754_rem_pio2+0x4a>
 801eda2:	429e      	cmp	r6, r3
 801eda4:	ee30 7b06 	vadd.f64	d7, d0, d6
 801eda8:	d00e      	beq.n	801edc8 <__ieee754_rem_pio2+0x98>
 801edaa:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 801ef58 <__ieee754_rem_pio2+0x228>
 801edae:	ee37 5b06 	vadd.f64	d5, d7, d6
 801edb2:	ee37 7b45 	vsub.f64	d7, d7, d5
 801edb6:	ed84 5b00 	vstr	d5, [r4]
 801edba:	ee37 7b06 	vadd.f64	d7, d7, d6
 801edbe:	f04f 30ff 	mov.w	r0, #4294967295
 801edc2:	ed84 7b02 	vstr	d7, [r4, #8]
 801edc6:	e7e3      	b.n	801ed90 <__ieee754_rem_pio2+0x60>
 801edc8:	ed9f 6b65 	vldr	d6, [pc, #404]	; 801ef60 <__ieee754_rem_pio2+0x230>
 801edcc:	ee37 7b06 	vadd.f64	d7, d7, d6
 801edd0:	ed9f 6b65 	vldr	d6, [pc, #404]	; 801ef68 <__ieee754_rem_pio2+0x238>
 801edd4:	e7eb      	b.n	801edae <__ieee754_rem_pio2+0x7e>
 801edd6:	4b70      	ldr	r3, [pc, #448]	; (801ef98 <__ieee754_rem_pio2+0x268>)
 801edd8:	429e      	cmp	r6, r3
 801edda:	dc6c      	bgt.n	801eeb6 <__ieee754_rem_pio2+0x186>
 801eddc:	f000 fc44 	bl	801f668 <fabs>
 801ede0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801ede4:	ed9f 6b62 	vldr	d6, [pc, #392]	; 801ef70 <__ieee754_rem_pio2+0x240>
 801ede8:	eea0 7b06 	vfma.f64	d7, d0, d6
 801edec:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801edf0:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801edf4:	ee17 0a90 	vmov	r0, s15
 801edf8:	eeb1 5b44 	vneg.f64	d5, d4
 801edfc:	ed9f 7b54 	vldr	d7, [pc, #336]	; 801ef50 <__ieee754_rem_pio2+0x220>
 801ee00:	eea5 0b07 	vfma.f64	d0, d5, d7
 801ee04:	ed9f 7b54 	vldr	d7, [pc, #336]	; 801ef58 <__ieee754_rem_pio2+0x228>
 801ee08:	281f      	cmp	r0, #31
 801ee0a:	ee24 7b07 	vmul.f64	d7, d4, d7
 801ee0e:	ee30 6b47 	vsub.f64	d6, d0, d7
 801ee12:	dc08      	bgt.n	801ee26 <__ieee754_rem_pio2+0xf6>
 801ee14:	1e42      	subs	r2, r0, #1
 801ee16:	4b61      	ldr	r3, [pc, #388]	; (801ef9c <__ieee754_rem_pio2+0x26c>)
 801ee18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ee1c:	42b3      	cmp	r3, r6
 801ee1e:	d002      	beq.n	801ee26 <__ieee754_rem_pio2+0xf6>
 801ee20:	ed84 6b00 	vstr	d6, [r4]
 801ee24:	e022      	b.n	801ee6c <__ieee754_rem_pio2+0x13c>
 801ee26:	ee16 3a90 	vmov	r3, s13
 801ee2a:	1536      	asrs	r6, r6, #20
 801ee2c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801ee30:	1af3      	subs	r3, r6, r3
 801ee32:	2b10      	cmp	r3, #16
 801ee34:	ddf4      	ble.n	801ee20 <__ieee754_rem_pio2+0xf0>
 801ee36:	eeb0 6b40 	vmov.f64	d6, d0
 801ee3a:	ed9f 3b49 	vldr	d3, [pc, #292]	; 801ef60 <__ieee754_rem_pio2+0x230>
 801ee3e:	eea5 6b03 	vfma.f64	d6, d5, d3
 801ee42:	ee30 7b46 	vsub.f64	d7, d0, d6
 801ee46:	eea5 7b03 	vfma.f64	d7, d5, d3
 801ee4a:	ed9f 3b47 	vldr	d3, [pc, #284]	; 801ef68 <__ieee754_rem_pio2+0x238>
 801ee4e:	ee94 7b03 	vfnms.f64	d7, d4, d3
 801ee52:	ee36 3b47 	vsub.f64	d3, d6, d7
 801ee56:	ee13 3a90 	vmov	r3, s7
 801ee5a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801ee5e:	1af6      	subs	r6, r6, r3
 801ee60:	2e31      	cmp	r6, #49	; 0x31
 801ee62:	dc17      	bgt.n	801ee94 <__ieee754_rem_pio2+0x164>
 801ee64:	eeb0 0b46 	vmov.f64	d0, d6
 801ee68:	ed84 3b00 	vstr	d3, [r4]
 801ee6c:	ed94 6b00 	vldr	d6, [r4]
 801ee70:	2d00      	cmp	r5, #0
 801ee72:	ee30 0b46 	vsub.f64	d0, d0, d6
 801ee76:	ee30 7b47 	vsub.f64	d7, d0, d7
 801ee7a:	ed84 7b02 	vstr	d7, [r4, #8]
 801ee7e:	da87      	bge.n	801ed90 <__ieee754_rem_pio2+0x60>
 801ee80:	eeb1 6b46 	vneg.f64	d6, d6
 801ee84:	ed84 6b00 	vstr	d6, [r4]
 801ee88:	eeb1 7b47 	vneg.f64	d7, d7
 801ee8c:	4240      	negs	r0, r0
 801ee8e:	ed84 7b02 	vstr	d7, [r4, #8]
 801ee92:	e77d      	b.n	801ed90 <__ieee754_rem_pio2+0x60>
 801ee94:	ed9f 3b38 	vldr	d3, [pc, #224]	; 801ef78 <__ieee754_rem_pio2+0x248>
 801ee98:	eeb0 0b46 	vmov.f64	d0, d6
 801ee9c:	eea5 0b03 	vfma.f64	d0, d5, d3
 801eea0:	ee36 7b40 	vsub.f64	d7, d6, d0
 801eea4:	ed9f 6b36 	vldr	d6, [pc, #216]	; 801ef80 <__ieee754_rem_pio2+0x250>
 801eea8:	eea5 7b03 	vfma.f64	d7, d5, d3
 801eeac:	ee94 7b06 	vfnms.f64	d7, d4, d6
 801eeb0:	ee30 6b47 	vsub.f64	d6, d0, d7
 801eeb4:	e7b4      	b.n	801ee20 <__ieee754_rem_pio2+0xf0>
 801eeb6:	4b3a      	ldr	r3, [pc, #232]	; (801efa0 <__ieee754_rem_pio2+0x270>)
 801eeb8:	429e      	cmp	r6, r3
 801eeba:	dd06      	ble.n	801eeca <__ieee754_rem_pio2+0x19a>
 801eebc:	ee30 7b40 	vsub.f64	d7, d0, d0
 801eec0:	ed80 7b02 	vstr	d7, [r0, #8]
 801eec4:	ed80 7b00 	vstr	d7, [r0]
 801eec8:	e744      	b.n	801ed54 <__ieee754_rem_pio2+0x24>
 801eeca:	1532      	asrs	r2, r6, #20
 801eecc:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 801eed0:	ee10 0a10 	vmov	r0, s0
 801eed4:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801eed8:	ec41 0b17 	vmov	d7, r0, r1
 801eedc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801eee0:	ed9f 5b29 	vldr	d5, [pc, #164]	; 801ef88 <__ieee754_rem_pio2+0x258>
 801eee4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801eee8:	ee37 7b46 	vsub.f64	d7, d7, d6
 801eeec:	ed8d 6b02 	vstr	d6, [sp, #8]
 801eef0:	ee27 7b05 	vmul.f64	d7, d7, d5
 801eef4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801eef8:	a908      	add	r1, sp, #32
 801eefa:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801eefe:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ef02:	ed8d 6b04 	vstr	d6, [sp, #16]
 801ef06:	ee27 7b05 	vmul.f64	d7, d7, d5
 801ef0a:	ed8d 7b06 	vstr	d7, [sp, #24]
 801ef0e:	2303      	movs	r3, #3
 801ef10:	ed31 7b02 	vldmdb	r1!, {d7}
 801ef14:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ef18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef1c:	f103 30ff 	add.w	r0, r3, #4294967295
 801ef20:	d013      	beq.n	801ef4a <__ieee754_rem_pio2+0x21a>
 801ef22:	4920      	ldr	r1, [pc, #128]	; (801efa4 <__ieee754_rem_pio2+0x274>)
 801ef24:	9101      	str	r1, [sp, #4]
 801ef26:	2102      	movs	r1, #2
 801ef28:	9100      	str	r1, [sp, #0]
 801ef2a:	a802      	add	r0, sp, #8
 801ef2c:	4621      	mov	r1, r4
 801ef2e:	f000 f8a7 	bl	801f080 <__kernel_rem_pio2>
 801ef32:	2d00      	cmp	r5, #0
 801ef34:	f6bf af2c 	bge.w	801ed90 <__ieee754_rem_pio2+0x60>
 801ef38:	ed94 7b00 	vldr	d7, [r4]
 801ef3c:	eeb1 7b47 	vneg.f64	d7, d7
 801ef40:	ed84 7b00 	vstr	d7, [r4]
 801ef44:	ed94 7b02 	vldr	d7, [r4, #8]
 801ef48:	e79e      	b.n	801ee88 <__ieee754_rem_pio2+0x158>
 801ef4a:	4603      	mov	r3, r0
 801ef4c:	e7e0      	b.n	801ef10 <__ieee754_rem_pio2+0x1e0>
 801ef4e:	bf00      	nop
 801ef50:	54400000 	.word	0x54400000
 801ef54:	3ff921fb 	.word	0x3ff921fb
 801ef58:	1a626331 	.word	0x1a626331
 801ef5c:	3dd0b461 	.word	0x3dd0b461
 801ef60:	1a600000 	.word	0x1a600000
 801ef64:	3dd0b461 	.word	0x3dd0b461
 801ef68:	2e037073 	.word	0x2e037073
 801ef6c:	3ba3198a 	.word	0x3ba3198a
 801ef70:	6dc9c883 	.word	0x6dc9c883
 801ef74:	3fe45f30 	.word	0x3fe45f30
 801ef78:	2e000000 	.word	0x2e000000
 801ef7c:	3ba3198a 	.word	0x3ba3198a
 801ef80:	252049c1 	.word	0x252049c1
 801ef84:	397b839a 	.word	0x397b839a
 801ef88:	00000000 	.word	0x00000000
 801ef8c:	41700000 	.word	0x41700000
 801ef90:	3fe921fb 	.word	0x3fe921fb
 801ef94:	4002d97b 	.word	0x4002d97b
 801ef98:	413921fb 	.word	0x413921fb
 801ef9c:	0801fab0 	.word	0x0801fab0
 801efa0:	7fefffff 	.word	0x7fefffff
 801efa4:	0801fb30 	.word	0x0801fb30

0801efa8 <__kernel_cos>:
 801efa8:	ee10 1a90 	vmov	r1, s1
 801efac:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801efb0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801efb4:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 801efb8:	da05      	bge.n	801efc6 <__kernel_cos+0x1e>
 801efba:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 801efbe:	ee16 3a90 	vmov	r3, s13
 801efc2:	2b00      	cmp	r3, #0
 801efc4:	d03d      	beq.n	801f042 <__kernel_cos+0x9a>
 801efc6:	ee20 4b00 	vmul.f64	d4, d0, d0
 801efca:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 801efce:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 801f048 <__kernel_cos+0xa0>
 801efd2:	ee21 1b40 	vnmul.f64	d1, d1, d0
 801efd6:	ee24 6b06 	vmul.f64	d6, d4, d6
 801efda:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 801f050 <__kernel_cos+0xa8>
 801efde:	eea4 5b03 	vfma.f64	d5, d4, d3
 801efe2:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 801f058 <__kernel_cos+0xb0>
 801efe6:	eea5 3b04 	vfma.f64	d3, d5, d4
 801efea:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 801f060 <__kernel_cos+0xb8>
 801efee:	eea3 5b04 	vfma.f64	d5, d3, d4
 801eff2:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 801f068 <__kernel_cos+0xc0>
 801eff6:	4b20      	ldr	r3, [pc, #128]	; (801f078 <__kernel_cos+0xd0>)
 801eff8:	eea5 3b04 	vfma.f64	d3, d5, d4
 801effc:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 801f070 <__kernel_cos+0xc8>
 801f000:	4299      	cmp	r1, r3
 801f002:	eea3 5b04 	vfma.f64	d5, d3, d4
 801f006:	ee25 5b04 	vmul.f64	d5, d5, d4
 801f00a:	eea4 1b05 	vfma.f64	d1, d4, d5
 801f00e:	dc04      	bgt.n	801f01a <__kernel_cos+0x72>
 801f010:	ee36 6b41 	vsub.f64	d6, d6, d1
 801f014:	ee37 0b46 	vsub.f64	d0, d7, d6
 801f018:	4770      	bx	lr
 801f01a:	4b18      	ldr	r3, [pc, #96]	; (801f07c <__kernel_cos+0xd4>)
 801f01c:	4299      	cmp	r1, r3
 801f01e:	dc0d      	bgt.n	801f03c <__kernel_cos+0x94>
 801f020:	2200      	movs	r2, #0
 801f022:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 801f026:	ec43 2b15 	vmov	d5, r2, r3
 801f02a:	ee37 0b45 	vsub.f64	d0, d7, d5
 801f02e:	ee36 6b45 	vsub.f64	d6, d6, d5
 801f032:	ee36 6b41 	vsub.f64	d6, d6, d1
 801f036:	ee30 0b46 	vsub.f64	d0, d0, d6
 801f03a:	4770      	bx	lr
 801f03c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 801f040:	e7f3      	b.n	801f02a <__kernel_cos+0x82>
 801f042:	eeb0 0b47 	vmov.f64	d0, d7
 801f046:	4770      	bx	lr
 801f048:	be8838d4 	.word	0xbe8838d4
 801f04c:	bda8fae9 	.word	0xbda8fae9
 801f050:	bdb4b1c4 	.word	0xbdb4b1c4
 801f054:	3e21ee9e 	.word	0x3e21ee9e
 801f058:	809c52ad 	.word	0x809c52ad
 801f05c:	be927e4f 	.word	0xbe927e4f
 801f060:	19cb1590 	.word	0x19cb1590
 801f064:	3efa01a0 	.word	0x3efa01a0
 801f068:	16c15177 	.word	0x16c15177
 801f06c:	bf56c16c 	.word	0xbf56c16c
 801f070:	5555554c 	.word	0x5555554c
 801f074:	3fa55555 	.word	0x3fa55555
 801f078:	3fd33332 	.word	0x3fd33332
 801f07c:	3fe90000 	.word	0x3fe90000

0801f080 <__kernel_rem_pio2>:
 801f080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f084:	ed2d 8b06 	vpush	{d8-d10}
 801f088:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 801f08c:	469b      	mov	fp, r3
 801f08e:	460e      	mov	r6, r1
 801f090:	4bc7      	ldr	r3, [pc, #796]	; (801f3b0 <__kernel_rem_pio2+0x330>)
 801f092:	99a2      	ldr	r1, [sp, #648]	; 0x288
 801f094:	9002      	str	r0, [sp, #8]
 801f096:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 801f09a:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 801f09c:	1ed1      	subs	r1, r2, #3
 801f09e:	2318      	movs	r3, #24
 801f0a0:	f06f 0417 	mvn.w	r4, #23
 801f0a4:	fb91 f1f3 	sdiv	r1, r1, r3
 801f0a8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 801f0ac:	f10b 3aff 	add.w	sl, fp, #4294967295
 801f0b0:	fb01 4404 	mla	r4, r1, r4, r4
 801f0b4:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 801f398 <__kernel_rem_pio2+0x318>
 801f0b8:	4414      	add	r4, r2
 801f0ba:	eba1 050a 	sub.w	r5, r1, sl
 801f0be:	aa1a      	add	r2, sp, #104	; 0x68
 801f0c0:	eb09 070a 	add.w	r7, r9, sl
 801f0c4:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 801f0c8:	4696      	mov	lr, r2
 801f0ca:	2300      	movs	r3, #0
 801f0cc:	42bb      	cmp	r3, r7
 801f0ce:	dd0f      	ble.n	801f0f0 <__kernel_rem_pio2+0x70>
 801f0d0:	af6a      	add	r7, sp, #424	; 0x1a8
 801f0d2:	2200      	movs	r2, #0
 801f0d4:	454a      	cmp	r2, r9
 801f0d6:	dc28      	bgt.n	801f12a <__kernel_rem_pio2+0xaa>
 801f0d8:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 801f0dc:	eb0b 0302 	add.w	r3, fp, r2
 801f0e0:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 801f0e4:	9d02      	ldr	r5, [sp, #8]
 801f0e6:	ed9f 7bac 	vldr	d7, [pc, #688]	; 801f398 <__kernel_rem_pio2+0x318>
 801f0ea:	f04f 0c00 	mov.w	ip, #0
 801f0ee:	e016      	b.n	801f11e <__kernel_rem_pio2+0x9e>
 801f0f0:	42dd      	cmn	r5, r3
 801f0f2:	d409      	bmi.n	801f108 <__kernel_rem_pio2+0x88>
 801f0f4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801f0f8:	ee07 2a90 	vmov	s15, r2
 801f0fc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801f100:	ecae 7b02 	vstmia	lr!, {d7}
 801f104:	3301      	adds	r3, #1
 801f106:	e7e1      	b.n	801f0cc <__kernel_rem_pio2+0x4c>
 801f108:	eeb0 7b46 	vmov.f64	d7, d6
 801f10c:	e7f8      	b.n	801f100 <__kernel_rem_pio2+0x80>
 801f10e:	ecb5 5b02 	vldmia	r5!, {d5}
 801f112:	ed33 6b02 	vldmdb	r3!, {d6}
 801f116:	f10c 0c01 	add.w	ip, ip, #1
 801f11a:	eea5 7b06 	vfma.f64	d7, d5, d6
 801f11e:	45d4      	cmp	ip, sl
 801f120:	ddf5      	ble.n	801f10e <__kernel_rem_pio2+0x8e>
 801f122:	eca7 7b02 	vstmia	r7!, {d7}
 801f126:	3201      	adds	r2, #1
 801f128:	e7d4      	b.n	801f0d4 <__kernel_rem_pio2+0x54>
 801f12a:	ab06      	add	r3, sp, #24
 801f12c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 801f130:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 801f3a0 <__kernel_rem_pio2+0x320>
 801f134:	ed9f ab9c 	vldr	d10, [pc, #624]	; 801f3a8 <__kernel_rem_pio2+0x328>
 801f138:	9304      	str	r3, [sp, #16]
 801f13a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 801f13e:	9303      	str	r3, [sp, #12]
 801f140:	464d      	mov	r5, r9
 801f142:	ab92      	add	r3, sp, #584	; 0x248
 801f144:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 801f148:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801f14c:	3f01      	subs	r7, #1
 801f14e:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 801f152:	00ff      	lsls	r7, r7, #3
 801f154:	ab92      	add	r3, sp, #584	; 0x248
 801f156:	19da      	adds	r2, r3, r7
 801f158:	3a98      	subs	r2, #152	; 0x98
 801f15a:	2300      	movs	r3, #0
 801f15c:	1ae9      	subs	r1, r5, r3
 801f15e:	2900      	cmp	r1, #0
 801f160:	dc4e      	bgt.n	801f200 <__kernel_rem_pio2+0x180>
 801f162:	4620      	mov	r0, r4
 801f164:	f000 fb10 	bl	801f788 <scalbn>
 801f168:	eeb0 8b40 	vmov.f64	d8, d0
 801f16c:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 801f170:	ee28 0b00 	vmul.f64	d0, d8, d0
 801f174:	f000 fa8c 	bl	801f690 <floor>
 801f178:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 801f17c:	eea0 8b47 	vfms.f64	d8, d0, d7
 801f180:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801f184:	2c00      	cmp	r4, #0
 801f186:	edcd 7a01 	vstr	s15, [sp, #4]
 801f18a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801f18e:	ee38 8b47 	vsub.f64	d8, d8, d7
 801f192:	dd4a      	ble.n	801f22a <__kernel_rem_pio2+0x1aa>
 801f194:	1e69      	subs	r1, r5, #1
 801f196:	ab06      	add	r3, sp, #24
 801f198:	f1c4 0018 	rsb	r0, r4, #24
 801f19c:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 801f1a0:	9a01      	ldr	r2, [sp, #4]
 801f1a2:	fa4c f300 	asr.w	r3, ip, r0
 801f1a6:	441a      	add	r2, r3
 801f1a8:	4083      	lsls	r3, r0
 801f1aa:	9201      	str	r2, [sp, #4]
 801f1ac:	ebac 0203 	sub.w	r2, ip, r3
 801f1b0:	ab06      	add	r3, sp, #24
 801f1b2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 801f1b6:	f1c4 0317 	rsb	r3, r4, #23
 801f1ba:	fa42 f803 	asr.w	r8, r2, r3
 801f1be:	f1b8 0f00 	cmp.w	r8, #0
 801f1c2:	dd43      	ble.n	801f24c <__kernel_rem_pio2+0x1cc>
 801f1c4:	9b01      	ldr	r3, [sp, #4]
 801f1c6:	2000      	movs	r0, #0
 801f1c8:	3301      	adds	r3, #1
 801f1ca:	9301      	str	r3, [sp, #4]
 801f1cc:	4601      	mov	r1, r0
 801f1ce:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 801f1d2:	4285      	cmp	r5, r0
 801f1d4:	dc6e      	bgt.n	801f2b4 <__kernel_rem_pio2+0x234>
 801f1d6:	2c00      	cmp	r4, #0
 801f1d8:	dd04      	ble.n	801f1e4 <__kernel_rem_pio2+0x164>
 801f1da:	2c01      	cmp	r4, #1
 801f1dc:	d07f      	beq.n	801f2de <__kernel_rem_pio2+0x25e>
 801f1de:	2c02      	cmp	r4, #2
 801f1e0:	f000 8087 	beq.w	801f2f2 <__kernel_rem_pio2+0x272>
 801f1e4:	f1b8 0f02 	cmp.w	r8, #2
 801f1e8:	d130      	bne.n	801f24c <__kernel_rem_pio2+0x1cc>
 801f1ea:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801f1ee:	ee30 8b48 	vsub.f64	d8, d0, d8
 801f1f2:	b359      	cbz	r1, 801f24c <__kernel_rem_pio2+0x1cc>
 801f1f4:	4620      	mov	r0, r4
 801f1f6:	f000 fac7 	bl	801f788 <scalbn>
 801f1fa:	ee38 8b40 	vsub.f64	d8, d8, d0
 801f1fe:	e025      	b.n	801f24c <__kernel_rem_pio2+0x1cc>
 801f200:	ee20 7b09 	vmul.f64	d7, d0, d9
 801f204:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801f208:	a806      	add	r0, sp, #24
 801f20a:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801f20e:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801f212:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801f216:	ee10 1a10 	vmov	r1, s0
 801f21a:	ed32 0b02 	vldmdb	r2!, {d0}
 801f21e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 801f222:	ee37 0b00 	vadd.f64	d0, d7, d0
 801f226:	3301      	adds	r3, #1
 801f228:	e798      	b.n	801f15c <__kernel_rem_pio2+0xdc>
 801f22a:	d106      	bne.n	801f23a <__kernel_rem_pio2+0x1ba>
 801f22c:	1e6b      	subs	r3, r5, #1
 801f22e:	aa06      	add	r2, sp, #24
 801f230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801f234:	ea4f 58e2 	mov.w	r8, r2, asr #23
 801f238:	e7c1      	b.n	801f1be <__kernel_rem_pio2+0x13e>
 801f23a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801f23e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801f242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f246:	da32      	bge.n	801f2ae <__kernel_rem_pio2+0x22e>
 801f248:	f04f 0800 	mov.w	r8, #0
 801f24c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801f250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f254:	f040 80b0 	bne.w	801f3b8 <__kernel_rem_pio2+0x338>
 801f258:	1e6b      	subs	r3, r5, #1
 801f25a:	4618      	mov	r0, r3
 801f25c:	2200      	movs	r2, #0
 801f25e:	4548      	cmp	r0, r9
 801f260:	da4e      	bge.n	801f300 <__kernel_rem_pio2+0x280>
 801f262:	2a00      	cmp	r2, #0
 801f264:	f000 8088 	beq.w	801f378 <__kernel_rem_pio2+0x2f8>
 801f268:	aa06      	add	r2, sp, #24
 801f26a:	3c18      	subs	r4, #24
 801f26c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801f270:	2900      	cmp	r1, #0
 801f272:	f000 808e 	beq.w	801f392 <__kernel_rem_pio2+0x312>
 801f276:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801f27a:	4620      	mov	r0, r4
 801f27c:	9302      	str	r3, [sp, #8]
 801f27e:	f000 fa83 	bl	801f788 <scalbn>
 801f282:	9b02      	ldr	r3, [sp, #8]
 801f284:	aa6a      	add	r2, sp, #424	; 0x1a8
 801f286:	00d9      	lsls	r1, r3, #3
 801f288:	ed9f 6b45 	vldr	d6, [pc, #276]	; 801f3a0 <__kernel_rem_pio2+0x320>
 801f28c:	1850      	adds	r0, r2, r1
 801f28e:	f100 0508 	add.w	r5, r0, #8
 801f292:	461c      	mov	r4, r3
 801f294:	2c00      	cmp	r4, #0
 801f296:	f280 80bd 	bge.w	801f414 <__kernel_rem_pio2+0x394>
 801f29a:	2500      	movs	r5, #0
 801f29c:	1b5c      	subs	r4, r3, r5
 801f29e:	2c00      	cmp	r4, #0
 801f2a0:	f2c0 80dd 	blt.w	801f45e <__kernel_rem_pio2+0x3de>
 801f2a4:	4f43      	ldr	r7, [pc, #268]	; (801f3b4 <__kernel_rem_pio2+0x334>)
 801f2a6:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 801f398 <__kernel_rem_pio2+0x318>
 801f2aa:	2400      	movs	r4, #0
 801f2ac:	e0cb      	b.n	801f446 <__kernel_rem_pio2+0x3c6>
 801f2ae:	f04f 0802 	mov.w	r8, #2
 801f2b2:	e787      	b.n	801f1c4 <__kernel_rem_pio2+0x144>
 801f2b4:	ab06      	add	r3, sp, #24
 801f2b6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801f2ba:	b949      	cbnz	r1, 801f2d0 <__kernel_rem_pio2+0x250>
 801f2bc:	b12b      	cbz	r3, 801f2ca <__kernel_rem_pio2+0x24a>
 801f2be:	aa06      	add	r2, sp, #24
 801f2c0:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801f2c4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 801f2c8:	2301      	movs	r3, #1
 801f2ca:	3001      	adds	r0, #1
 801f2cc:	4619      	mov	r1, r3
 801f2ce:	e780      	b.n	801f1d2 <__kernel_rem_pio2+0x152>
 801f2d0:	aa06      	add	r2, sp, #24
 801f2d2:	ebac 0303 	sub.w	r3, ip, r3
 801f2d6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 801f2da:	460b      	mov	r3, r1
 801f2dc:	e7f5      	b.n	801f2ca <__kernel_rem_pio2+0x24a>
 801f2de:	1e68      	subs	r0, r5, #1
 801f2e0:	ab06      	add	r3, sp, #24
 801f2e2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801f2e6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801f2ea:	aa06      	add	r2, sp, #24
 801f2ec:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 801f2f0:	e778      	b.n	801f1e4 <__kernel_rem_pio2+0x164>
 801f2f2:	1e68      	subs	r0, r5, #1
 801f2f4:	ab06      	add	r3, sp, #24
 801f2f6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801f2fa:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801f2fe:	e7f4      	b.n	801f2ea <__kernel_rem_pio2+0x26a>
 801f300:	a906      	add	r1, sp, #24
 801f302:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801f306:	3801      	subs	r0, #1
 801f308:	430a      	orrs	r2, r1
 801f30a:	e7a8      	b.n	801f25e <__kernel_rem_pio2+0x1de>
 801f30c:	f10c 0c01 	add.w	ip, ip, #1
 801f310:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801f314:	2a00      	cmp	r2, #0
 801f316:	d0f9      	beq.n	801f30c <__kernel_rem_pio2+0x28c>
 801f318:	eb0b 0305 	add.w	r3, fp, r5
 801f31c:	aa1a      	add	r2, sp, #104	; 0x68
 801f31e:	00db      	lsls	r3, r3, #3
 801f320:	1898      	adds	r0, r3, r2
 801f322:	3008      	adds	r0, #8
 801f324:	1c69      	adds	r1, r5, #1
 801f326:	3708      	adds	r7, #8
 801f328:	2200      	movs	r2, #0
 801f32a:	4465      	add	r5, ip
 801f32c:	9005      	str	r0, [sp, #20]
 801f32e:	428d      	cmp	r5, r1
 801f330:	f6ff af07 	blt.w	801f142 <__kernel_rem_pio2+0xc2>
 801f334:	a81a      	add	r0, sp, #104	; 0x68
 801f336:	eb02 0c03 	add.w	ip, r2, r3
 801f33a:	4484      	add	ip, r0
 801f33c:	9803      	ldr	r0, [sp, #12]
 801f33e:	f8dd e008 	ldr.w	lr, [sp, #8]
 801f342:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 801f346:	9001      	str	r0, [sp, #4]
 801f348:	ee07 0a90 	vmov	s15, r0
 801f34c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801f350:	9805      	ldr	r0, [sp, #20]
 801f352:	ed8c 7b00 	vstr	d7, [ip]
 801f356:	ed9f 7b10 	vldr	d7, [pc, #64]	; 801f398 <__kernel_rem_pio2+0x318>
 801f35a:	eb00 0802 	add.w	r8, r0, r2
 801f35e:	f04f 0c00 	mov.w	ip, #0
 801f362:	45d4      	cmp	ip, sl
 801f364:	dd0c      	ble.n	801f380 <__kernel_rem_pio2+0x300>
 801f366:	eb02 0c07 	add.w	ip, r2, r7
 801f36a:	a86a      	add	r0, sp, #424	; 0x1a8
 801f36c:	4484      	add	ip, r0
 801f36e:	ed8c 7b02 	vstr	d7, [ip, #8]
 801f372:	3101      	adds	r1, #1
 801f374:	3208      	adds	r2, #8
 801f376:	e7da      	b.n	801f32e <__kernel_rem_pio2+0x2ae>
 801f378:	9b04      	ldr	r3, [sp, #16]
 801f37a:	f04f 0c01 	mov.w	ip, #1
 801f37e:	e7c7      	b.n	801f310 <__kernel_rem_pio2+0x290>
 801f380:	ecbe 5b02 	vldmia	lr!, {d5}
 801f384:	ed38 6b02 	vldmdb	r8!, {d6}
 801f388:	f10c 0c01 	add.w	ip, ip, #1
 801f38c:	eea5 7b06 	vfma.f64	d7, d5, d6
 801f390:	e7e7      	b.n	801f362 <__kernel_rem_pio2+0x2e2>
 801f392:	3b01      	subs	r3, #1
 801f394:	e768      	b.n	801f268 <__kernel_rem_pio2+0x1e8>
 801f396:	bf00      	nop
	...
 801f3a4:	3e700000 	.word	0x3e700000
 801f3a8:	00000000 	.word	0x00000000
 801f3ac:	41700000 	.word	0x41700000
 801f3b0:	0801fc78 	.word	0x0801fc78
 801f3b4:	0801fc38 	.word	0x0801fc38
 801f3b8:	4260      	negs	r0, r4
 801f3ba:	eeb0 0b48 	vmov.f64	d0, d8
 801f3be:	f000 f9e3 	bl	801f788 <scalbn>
 801f3c2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 801f5a0 <__kernel_rem_pio2+0x520>
 801f3c6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801f3ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f3ce:	db18      	blt.n	801f402 <__kernel_rem_pio2+0x382>
 801f3d0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 801f5a8 <__kernel_rem_pio2+0x528>
 801f3d4:	ee20 7b07 	vmul.f64	d7, d0, d7
 801f3d8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801f3dc:	aa06      	add	r2, sp, #24
 801f3de:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801f3e2:	eea5 0b46 	vfms.f64	d0, d5, d6
 801f3e6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801f3ea:	a906      	add	r1, sp, #24
 801f3ec:	ee10 3a10 	vmov	r3, s0
 801f3f0:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801f3f4:	1c6b      	adds	r3, r5, #1
 801f3f6:	ee17 2a10 	vmov	r2, s14
 801f3fa:	3418      	adds	r4, #24
 801f3fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801f400:	e739      	b.n	801f276 <__kernel_rem_pio2+0x1f6>
 801f402:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801f406:	aa06      	add	r2, sp, #24
 801f408:	ee10 3a10 	vmov	r3, s0
 801f40c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801f410:	462b      	mov	r3, r5
 801f412:	e730      	b.n	801f276 <__kernel_rem_pio2+0x1f6>
 801f414:	aa06      	add	r2, sp, #24
 801f416:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 801f41a:	9202      	str	r2, [sp, #8]
 801f41c:	ee07 2a90 	vmov	s15, r2
 801f420:	3c01      	subs	r4, #1
 801f422:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801f426:	ee27 7b00 	vmul.f64	d7, d7, d0
 801f42a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801f42e:	ed25 7b02 	vstmdb	r5!, {d7}
 801f432:	e72f      	b.n	801f294 <__kernel_rem_pio2+0x214>
 801f434:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 801f438:	ecb7 5b02 	vldmia	r7!, {d5}
 801f43c:	ed9c 6b00 	vldr	d6, [ip]
 801f440:	3401      	adds	r4, #1
 801f442:	eea5 7b06 	vfma.f64	d7, d5, d6
 801f446:	454c      	cmp	r4, r9
 801f448:	dc01      	bgt.n	801f44e <__kernel_rem_pio2+0x3ce>
 801f44a:	42a5      	cmp	r5, r4
 801f44c:	daf2      	bge.n	801f434 <__kernel_rem_pio2+0x3b4>
 801f44e:	aa42      	add	r2, sp, #264	; 0x108
 801f450:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 801f454:	ed84 7b00 	vstr	d7, [r4]
 801f458:	3501      	adds	r5, #1
 801f45a:	3808      	subs	r0, #8
 801f45c:	e71e      	b.n	801f29c <__kernel_rem_pio2+0x21c>
 801f45e:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801f460:	2a03      	cmp	r2, #3
 801f462:	d84e      	bhi.n	801f502 <__kernel_rem_pio2+0x482>
 801f464:	e8df f002 	tbb	[pc, r2]
 801f468:	021f1f3e 	.word	0x021f1f3e
 801f46c:	3108      	adds	r1, #8
 801f46e:	aa42      	add	r2, sp, #264	; 0x108
 801f470:	4411      	add	r1, r2
 801f472:	4608      	mov	r0, r1
 801f474:	461c      	mov	r4, r3
 801f476:	2c00      	cmp	r4, #0
 801f478:	dc61      	bgt.n	801f53e <__kernel_rem_pio2+0x4be>
 801f47a:	4608      	mov	r0, r1
 801f47c:	461c      	mov	r4, r3
 801f47e:	2c01      	cmp	r4, #1
 801f480:	dc6d      	bgt.n	801f55e <__kernel_rem_pio2+0x4de>
 801f482:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 801f5b0 <__kernel_rem_pio2+0x530>
 801f486:	2b01      	cmp	r3, #1
 801f488:	dc79      	bgt.n	801f57e <__kernel_rem_pio2+0x4fe>
 801f48a:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 801f48e:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 801f492:	f1b8 0f00 	cmp.w	r8, #0
 801f496:	d178      	bne.n	801f58a <__kernel_rem_pio2+0x50a>
 801f498:	ed86 5b00 	vstr	d5, [r6]
 801f49c:	ed86 6b02 	vstr	d6, [r6, #8]
 801f4a0:	ed86 7b04 	vstr	d7, [r6, #16]
 801f4a4:	e02d      	b.n	801f502 <__kernel_rem_pio2+0x482>
 801f4a6:	ed9f 6b42 	vldr	d6, [pc, #264]	; 801f5b0 <__kernel_rem_pio2+0x530>
 801f4aa:	3108      	adds	r1, #8
 801f4ac:	aa42      	add	r2, sp, #264	; 0x108
 801f4ae:	4411      	add	r1, r2
 801f4b0:	4618      	mov	r0, r3
 801f4b2:	2800      	cmp	r0, #0
 801f4b4:	da34      	bge.n	801f520 <__kernel_rem_pio2+0x4a0>
 801f4b6:	f1b8 0f00 	cmp.w	r8, #0
 801f4ba:	d037      	beq.n	801f52c <__kernel_rem_pio2+0x4ac>
 801f4bc:	eeb1 7b46 	vneg.f64	d7, d6
 801f4c0:	ed86 7b00 	vstr	d7, [r6]
 801f4c4:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 801f4c8:	a844      	add	r0, sp, #272	; 0x110
 801f4ca:	2101      	movs	r1, #1
 801f4cc:	ee37 7b46 	vsub.f64	d7, d7, d6
 801f4d0:	428b      	cmp	r3, r1
 801f4d2:	da2e      	bge.n	801f532 <__kernel_rem_pio2+0x4b2>
 801f4d4:	f1b8 0f00 	cmp.w	r8, #0
 801f4d8:	d001      	beq.n	801f4de <__kernel_rem_pio2+0x45e>
 801f4da:	eeb1 7b47 	vneg.f64	d7, d7
 801f4de:	ed86 7b02 	vstr	d7, [r6, #8]
 801f4e2:	e00e      	b.n	801f502 <__kernel_rem_pio2+0x482>
 801f4e4:	aa92      	add	r2, sp, #584	; 0x248
 801f4e6:	ed9f 7b32 	vldr	d7, [pc, #200]	; 801f5b0 <__kernel_rem_pio2+0x530>
 801f4ea:	4411      	add	r1, r2
 801f4ec:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 801f4f0:	2b00      	cmp	r3, #0
 801f4f2:	da0f      	bge.n	801f514 <__kernel_rem_pio2+0x494>
 801f4f4:	f1b8 0f00 	cmp.w	r8, #0
 801f4f8:	d001      	beq.n	801f4fe <__kernel_rem_pio2+0x47e>
 801f4fa:	eeb1 7b47 	vneg.f64	d7, d7
 801f4fe:	ed86 7b00 	vstr	d7, [r6]
 801f502:	9b01      	ldr	r3, [sp, #4]
 801f504:	f003 0007 	and.w	r0, r3, #7
 801f508:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 801f50c:	ecbd 8b06 	vpop	{d8-d10}
 801f510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f514:	ed31 6b02 	vldmdb	r1!, {d6}
 801f518:	3b01      	subs	r3, #1
 801f51a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801f51e:	e7e7      	b.n	801f4f0 <__kernel_rem_pio2+0x470>
 801f520:	ed31 7b02 	vldmdb	r1!, {d7}
 801f524:	3801      	subs	r0, #1
 801f526:	ee36 6b07 	vadd.f64	d6, d6, d7
 801f52a:	e7c2      	b.n	801f4b2 <__kernel_rem_pio2+0x432>
 801f52c:	eeb0 7b46 	vmov.f64	d7, d6
 801f530:	e7c6      	b.n	801f4c0 <__kernel_rem_pio2+0x440>
 801f532:	ecb0 6b02 	vldmia	r0!, {d6}
 801f536:	3101      	adds	r1, #1
 801f538:	ee37 7b06 	vadd.f64	d7, d7, d6
 801f53c:	e7c8      	b.n	801f4d0 <__kernel_rem_pio2+0x450>
 801f53e:	ed10 7b04 	vldr	d7, [r0, #-16]
 801f542:	ed30 5b02 	vldmdb	r0!, {d5}
 801f546:	3c01      	subs	r4, #1
 801f548:	ee37 6b05 	vadd.f64	d6, d7, d5
 801f54c:	ee37 7b46 	vsub.f64	d7, d7, d6
 801f550:	ed00 6b02 	vstr	d6, [r0, #-8]
 801f554:	ee37 7b05 	vadd.f64	d7, d7, d5
 801f558:	ed80 7b00 	vstr	d7, [r0]
 801f55c:	e78b      	b.n	801f476 <__kernel_rem_pio2+0x3f6>
 801f55e:	ed10 7b04 	vldr	d7, [r0, #-16]
 801f562:	ed30 5b02 	vldmdb	r0!, {d5}
 801f566:	3c01      	subs	r4, #1
 801f568:	ee37 6b05 	vadd.f64	d6, d7, d5
 801f56c:	ee37 7b46 	vsub.f64	d7, d7, d6
 801f570:	ed00 6b02 	vstr	d6, [r0, #-8]
 801f574:	ee37 7b05 	vadd.f64	d7, d7, d5
 801f578:	ed80 7b00 	vstr	d7, [r0]
 801f57c:	e77f      	b.n	801f47e <__kernel_rem_pio2+0x3fe>
 801f57e:	ed31 6b02 	vldmdb	r1!, {d6}
 801f582:	3b01      	subs	r3, #1
 801f584:	ee37 7b06 	vadd.f64	d7, d7, d6
 801f588:	e77d      	b.n	801f486 <__kernel_rem_pio2+0x406>
 801f58a:	eeb1 5b45 	vneg.f64	d5, d5
 801f58e:	eeb1 6b46 	vneg.f64	d6, d6
 801f592:	ed86 5b00 	vstr	d5, [r6]
 801f596:	eeb1 7b47 	vneg.f64	d7, d7
 801f59a:	ed86 6b02 	vstr	d6, [r6, #8]
 801f59e:	e77f      	b.n	801f4a0 <__kernel_rem_pio2+0x420>
 801f5a0:	00000000 	.word	0x00000000
 801f5a4:	41700000 	.word	0x41700000
 801f5a8:	00000000 	.word	0x00000000
 801f5ac:	3e700000 	.word	0x3e700000
	...

0801f5b8 <__kernel_sin>:
 801f5b8:	ee10 3a90 	vmov	r3, s1
 801f5bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f5c0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801f5c4:	da04      	bge.n	801f5d0 <__kernel_sin+0x18>
 801f5c6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801f5ca:	ee17 3a90 	vmov	r3, s15
 801f5ce:	b35b      	cbz	r3, 801f628 <__kernel_sin+0x70>
 801f5d0:	ee20 6b00 	vmul.f64	d6, d0, d0
 801f5d4:	ee20 5b06 	vmul.f64	d5, d0, d6
 801f5d8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 801f630 <__kernel_sin+0x78>
 801f5dc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 801f638 <__kernel_sin+0x80>
 801f5e0:	eea6 4b07 	vfma.f64	d4, d6, d7
 801f5e4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 801f640 <__kernel_sin+0x88>
 801f5e8:	eea4 7b06 	vfma.f64	d7, d4, d6
 801f5ec:	ed9f 4b16 	vldr	d4, [pc, #88]	; 801f648 <__kernel_sin+0x90>
 801f5f0:	eea7 4b06 	vfma.f64	d4, d7, d6
 801f5f4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 801f650 <__kernel_sin+0x98>
 801f5f8:	eea4 7b06 	vfma.f64	d7, d4, d6
 801f5fc:	b930      	cbnz	r0, 801f60c <__kernel_sin+0x54>
 801f5fe:	ed9f 4b16 	vldr	d4, [pc, #88]	; 801f658 <__kernel_sin+0xa0>
 801f602:	eea6 4b07 	vfma.f64	d4, d6, d7
 801f606:	eea4 0b05 	vfma.f64	d0, d4, d5
 801f60a:	4770      	bx	lr
 801f60c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 801f610:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 801f614:	eea1 7b04 	vfma.f64	d7, d1, d4
 801f618:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801f61c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 801f660 <__kernel_sin+0xa8>
 801f620:	eea5 1b07 	vfma.f64	d1, d5, d7
 801f624:	ee30 0b41 	vsub.f64	d0, d0, d1
 801f628:	4770      	bx	lr
 801f62a:	bf00      	nop
 801f62c:	f3af 8000 	nop.w
 801f630:	5acfd57c 	.word	0x5acfd57c
 801f634:	3de5d93a 	.word	0x3de5d93a
 801f638:	8a2b9ceb 	.word	0x8a2b9ceb
 801f63c:	be5ae5e6 	.word	0xbe5ae5e6
 801f640:	57b1fe7d 	.word	0x57b1fe7d
 801f644:	3ec71de3 	.word	0x3ec71de3
 801f648:	19c161d5 	.word	0x19c161d5
 801f64c:	bf2a01a0 	.word	0xbf2a01a0
 801f650:	1110f8a6 	.word	0x1110f8a6
 801f654:	3f811111 	.word	0x3f811111
 801f658:	55555549 	.word	0x55555549
 801f65c:	bfc55555 	.word	0xbfc55555
 801f660:	55555549 	.word	0x55555549
 801f664:	3fc55555 	.word	0x3fc55555

0801f668 <fabs>:
 801f668:	ec51 0b10 	vmov	r0, r1, d0
 801f66c:	ee10 2a10 	vmov	r2, s0
 801f670:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801f674:	ec43 2b10 	vmov	d0, r2, r3
 801f678:	4770      	bx	lr

0801f67a <finite>:
 801f67a:	ee10 3a90 	vmov	r3, s1
 801f67e:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801f682:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801f686:	0fc0      	lsrs	r0, r0, #31
 801f688:	4770      	bx	lr
 801f68a:	0000      	movs	r0, r0
 801f68c:	0000      	movs	r0, r0
	...

0801f690 <floor>:
 801f690:	ee10 1a90 	vmov	r1, s1
 801f694:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801f698:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801f69c:	2b13      	cmp	r3, #19
 801f69e:	b530      	push	{r4, r5, lr}
 801f6a0:	ee10 0a10 	vmov	r0, s0
 801f6a4:	ee10 5a10 	vmov	r5, s0
 801f6a8:	dc33      	bgt.n	801f712 <floor+0x82>
 801f6aa:	2b00      	cmp	r3, #0
 801f6ac:	da17      	bge.n	801f6de <floor+0x4e>
 801f6ae:	ed9f 7b30 	vldr	d7, [pc, #192]	; 801f770 <floor+0xe0>
 801f6b2:	ee30 0b07 	vadd.f64	d0, d0, d7
 801f6b6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801f6ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f6be:	dd09      	ble.n	801f6d4 <floor+0x44>
 801f6c0:	2900      	cmp	r1, #0
 801f6c2:	da50      	bge.n	801f766 <floor+0xd6>
 801f6c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801f6c8:	4a2b      	ldr	r2, [pc, #172]	; (801f778 <floor+0xe8>)
 801f6ca:	4303      	orrs	r3, r0
 801f6cc:	2000      	movs	r0, #0
 801f6ce:	4283      	cmp	r3, r0
 801f6d0:	bf18      	it	ne
 801f6d2:	4611      	movne	r1, r2
 801f6d4:	460b      	mov	r3, r1
 801f6d6:	4602      	mov	r2, r0
 801f6d8:	ec43 2b10 	vmov	d0, r2, r3
 801f6dc:	e020      	b.n	801f720 <floor+0x90>
 801f6de:	4a27      	ldr	r2, [pc, #156]	; (801f77c <floor+0xec>)
 801f6e0:	411a      	asrs	r2, r3
 801f6e2:	ea01 0402 	and.w	r4, r1, r2
 801f6e6:	4304      	orrs	r4, r0
 801f6e8:	d01a      	beq.n	801f720 <floor+0x90>
 801f6ea:	ed9f 7b21 	vldr	d7, [pc, #132]	; 801f770 <floor+0xe0>
 801f6ee:	ee30 0b07 	vadd.f64	d0, d0, d7
 801f6f2:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801f6f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f6fa:	ddeb      	ble.n	801f6d4 <floor+0x44>
 801f6fc:	2900      	cmp	r1, #0
 801f6fe:	bfbe      	ittt	lt
 801f700:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 801f704:	fa40 f303 	asrlt.w	r3, r0, r3
 801f708:	18c9      	addlt	r1, r1, r3
 801f70a:	ea21 0102 	bic.w	r1, r1, r2
 801f70e:	2000      	movs	r0, #0
 801f710:	e7e0      	b.n	801f6d4 <floor+0x44>
 801f712:	2b33      	cmp	r3, #51	; 0x33
 801f714:	dd05      	ble.n	801f722 <floor+0x92>
 801f716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f71a:	d101      	bne.n	801f720 <floor+0x90>
 801f71c:	ee30 0b00 	vadd.f64	d0, d0, d0
 801f720:	bd30      	pop	{r4, r5, pc}
 801f722:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801f726:	f04f 32ff 	mov.w	r2, #4294967295
 801f72a:	40e2      	lsrs	r2, r4
 801f72c:	4202      	tst	r2, r0
 801f72e:	d0f7      	beq.n	801f720 <floor+0x90>
 801f730:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 801f770 <floor+0xe0>
 801f734:	ee30 0b07 	vadd.f64	d0, d0, d7
 801f738:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801f73c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f740:	ddc8      	ble.n	801f6d4 <floor+0x44>
 801f742:	2900      	cmp	r1, #0
 801f744:	da02      	bge.n	801f74c <floor+0xbc>
 801f746:	2b14      	cmp	r3, #20
 801f748:	d103      	bne.n	801f752 <floor+0xc2>
 801f74a:	3101      	adds	r1, #1
 801f74c:	ea20 0002 	bic.w	r0, r0, r2
 801f750:	e7c0      	b.n	801f6d4 <floor+0x44>
 801f752:	2401      	movs	r4, #1
 801f754:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801f758:	fa04 f303 	lsl.w	r3, r4, r3
 801f75c:	4418      	add	r0, r3
 801f75e:	42a8      	cmp	r0, r5
 801f760:	bf38      	it	cc
 801f762:	1909      	addcc	r1, r1, r4
 801f764:	e7f2      	b.n	801f74c <floor+0xbc>
 801f766:	2000      	movs	r0, #0
 801f768:	4601      	mov	r1, r0
 801f76a:	e7b3      	b.n	801f6d4 <floor+0x44>
 801f76c:	f3af 8000 	nop.w
 801f770:	8800759c 	.word	0x8800759c
 801f774:	7e37e43c 	.word	0x7e37e43c
 801f778:	bff00000 	.word	0xbff00000
 801f77c:	000fffff 	.word	0x000fffff

0801f780 <matherr>:
 801f780:	2000      	movs	r0, #0
 801f782:	4770      	bx	lr
 801f784:	0000      	movs	r0, r0
	...

0801f788 <scalbn>:
 801f788:	b500      	push	{lr}
 801f78a:	ed2d 8b02 	vpush	{d8}
 801f78e:	b083      	sub	sp, #12
 801f790:	ed8d 0b00 	vstr	d0, [sp]
 801f794:	9b01      	ldr	r3, [sp, #4]
 801f796:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801f79a:	b9a2      	cbnz	r2, 801f7c6 <scalbn+0x3e>
 801f79c:	9a00      	ldr	r2, [sp, #0]
 801f79e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f7a2:	4313      	orrs	r3, r2
 801f7a4:	d03a      	beq.n	801f81c <scalbn+0x94>
 801f7a6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801f860 <scalbn+0xd8>
 801f7aa:	4b35      	ldr	r3, [pc, #212]	; (801f880 <scalbn+0xf8>)
 801f7ac:	ee20 7b07 	vmul.f64	d7, d0, d7
 801f7b0:	4298      	cmp	r0, r3
 801f7b2:	ed8d 7b00 	vstr	d7, [sp]
 801f7b6:	da11      	bge.n	801f7dc <scalbn+0x54>
 801f7b8:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 801f868 <scalbn+0xe0>
 801f7bc:	ed9d 6b00 	vldr	d6, [sp]
 801f7c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f7c4:	e007      	b.n	801f7d6 <scalbn+0x4e>
 801f7c6:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801f7ca:	428a      	cmp	r2, r1
 801f7cc:	d10a      	bne.n	801f7e4 <scalbn+0x5c>
 801f7ce:	ed9d 7b00 	vldr	d7, [sp]
 801f7d2:	ee37 7b07 	vadd.f64	d7, d7, d7
 801f7d6:	ed8d 7b00 	vstr	d7, [sp]
 801f7da:	e01f      	b.n	801f81c <scalbn+0x94>
 801f7dc:	9b01      	ldr	r3, [sp, #4]
 801f7de:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801f7e2:	3a36      	subs	r2, #54	; 0x36
 801f7e4:	4402      	add	r2, r0
 801f7e6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801f7ea:	428a      	cmp	r2, r1
 801f7ec:	dd0a      	ble.n	801f804 <scalbn+0x7c>
 801f7ee:	ed9f 8b20 	vldr	d8, [pc, #128]	; 801f870 <scalbn+0xe8>
 801f7f2:	eeb0 0b48 	vmov.f64	d0, d8
 801f7f6:	ed9d 1b00 	vldr	d1, [sp]
 801f7fa:	f000 f843 	bl	801f884 <copysign>
 801f7fe:	ee20 7b08 	vmul.f64	d7, d0, d8
 801f802:	e7e8      	b.n	801f7d6 <scalbn+0x4e>
 801f804:	2a00      	cmp	r2, #0
 801f806:	dd10      	ble.n	801f82a <scalbn+0xa2>
 801f808:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f80c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f810:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801f814:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801f818:	e9cd 0100 	strd	r0, r1, [sp]
 801f81c:	ed9d 0b00 	vldr	d0, [sp]
 801f820:	b003      	add	sp, #12
 801f822:	ecbd 8b02 	vpop	{d8}
 801f826:	f85d fb04 	ldr.w	pc, [sp], #4
 801f82a:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801f82e:	da06      	bge.n	801f83e <scalbn+0xb6>
 801f830:	f24c 3350 	movw	r3, #50000	; 0xc350
 801f834:	4298      	cmp	r0, r3
 801f836:	dcda      	bgt.n	801f7ee <scalbn+0x66>
 801f838:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 801f868 <scalbn+0xe0>
 801f83c:	e7d9      	b.n	801f7f2 <scalbn+0x6a>
 801f83e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f842:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f846:	3236      	adds	r2, #54	; 0x36
 801f848:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801f84c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801f850:	ec41 0b17 	vmov	d7, r0, r1
 801f854:	ed9f 6b08 	vldr	d6, [pc, #32]	; 801f878 <scalbn+0xf0>
 801f858:	e7b2      	b.n	801f7c0 <scalbn+0x38>
 801f85a:	bf00      	nop
 801f85c:	f3af 8000 	nop.w
 801f860:	00000000 	.word	0x00000000
 801f864:	43500000 	.word	0x43500000
 801f868:	c2f8f359 	.word	0xc2f8f359
 801f86c:	01a56e1f 	.word	0x01a56e1f
 801f870:	8800759c 	.word	0x8800759c
 801f874:	7e37e43c 	.word	0x7e37e43c
 801f878:	00000000 	.word	0x00000000
 801f87c:	3c900000 	.word	0x3c900000
 801f880:	ffff3cb0 	.word	0xffff3cb0

0801f884 <copysign>:
 801f884:	ec51 0b10 	vmov	r0, r1, d0
 801f888:	ee11 0a90 	vmov	r0, s3
 801f88c:	ee10 2a10 	vmov	r2, s0
 801f890:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801f894:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801f898:	ea41 0300 	orr.w	r3, r1, r0
 801f89c:	ec43 2b10 	vmov	d0, r2, r3
 801f8a0:	4770      	bx	lr
	...

0801f8a4 <_init>:
 801f8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f8a6:	bf00      	nop
 801f8a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f8aa:	bc08      	pop	{r3}
 801f8ac:	469e      	mov	lr, r3
 801f8ae:	4770      	bx	lr

0801f8b0 <_fini>:
 801f8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f8b2:	bf00      	nop
 801f8b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f8b6:	bc08      	pop	{r3}
 801f8b8:	469e      	mov	lr, r3
 801f8ba:	4770      	bx	lr
